00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91    Bit
00156                                           ! 91 8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos();
00321                                           !BCC_EOS
00322                                           ! 180 st
00323                                           ! 180 atic void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         0103              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        63            .ascii "current-cvs"
00413 0043                        20            .ascii " "
00414                       00000044            vgabios_date:
00415 0044                        30            .ascii "08 Dec 2011"
00416 004F                        0A            .byte 0x0a,0x0d
00417 0051                        00            .byte 0x00
00418                       00000052            vgabios_copyright:
00419 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 007B                        0A            .byte 0x0a,0x0d
00421 007D                        00            .byte 0x00
00422                       0000007E            vgabios_license:
00423 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00AE                        0A            .byte 0x0a,0x0d
00425 00B0                        0A            .byte 0x0a,0x0d
00426 00B2                        00            .byte 0x00
00427                       000000B3            vgabios_website:
00428 00B3                        50            .ascii "Please visit :"
00429 00C1                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00433 00E2                        0A            .byte 0x0a,0x0d
00434 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 0104                        0A            .byte 0x0a,0x0d
00436 0106                        0A            .byte 0x0a,0x0d
00437 0108                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000109            vgabios_init_func:
00444                                           ;; init vga card
00445 0109           E8         3457              call init_vga_card
00446                                           ;; init basic bios vars
00447 010C           E8         347F              call init_bios_area
00448                                           ;; init vbe functions
00449 010F           E8         96FB              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00452                                           ;; display splash screen
00453 0124           E8         34BB              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0127           B8                   0003    mov ax,#0x0003
00456 012A           CD                     10    int #0x10
00457                                           ;; show info
00458 012C           E8         34B4              call _display_info
00459                                           ;; show vbe info
00460 012F           E8         9709              call vbe_display_info
00461 0132           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       00000133            vgabios_int10_handler:
00467 0133           9C                           pushf
00468                                           ! 292  298
00469 0134           80FC                   0F    cmp ah, #0x0f
00470 0137           75           06              jne int10_test_1A
00471 0139           E8         60DE              call biosfn_get_video_mode
00472 013C           E9         00BC              jmp int10_end
00473                       0000013F            int10_test_1A:
00474 013F           80FC                   1A    cmp ah, #0x1a
00475 0142           75           06              jne int10_test_0B
00476 0144           E8         6C00              call biosfn_group_1A
00477 0147           E9         00B1              jmp int10_end
00478                       0000014A            int10_test_0B:
00479 014A           80FC                   0B    cmp ah, #0x0b
00480 014D           75           06              jne int10_test_1103
00481 014F           E8         57EE              call biosfn_group_0B
00482 0152           E9         00A6              jmp int10_end
00483                       00000155            int10_test_1103:
00484 0155           3D                   1103    cmp ax, #0x1103
00485 0158           75           06              jne int10_test_12
00486 015A           E8         67B8              call biosfn_set_text_block_specifier
00487 015D           E9         009B              jmp int10_end
00488                       00000160            int10_test_12:
00489 0160           80FC                   12    cmp ah, #0x12
00490 0163           75           3E              jne int10_test_101B
00491 0165           80FB                   10    cmp bl, #0x10
00492 0168           75           06              jne int10_test_BL30
00493 016A           E8         6A02              call biosfn_get_ega_info
00494 016D           E9         008B              jmp int10_end
00495                       00000170            int10_test_BL30:
00496 0170           80FB                   30    cmp bl, #0x30
00497 0173           75           06              jne int10_test_BL31
00498 0175           E8         6A1B              call biosfn_select_vert_res
00499 0178           E9         0080              jmp int10_end
00500                       0000017B            int10_test_BL31:
00501 017B           80FB                   31    cmp bl, #0x31
00502 017E           75           05              jne int10_test_BL32
00503 0180           E8         6A63              call biosfn_enable_default_palette_loading
00504 0183           EB           76              jmp int10_end
00505                       00000185            int10_test_BL32:
00506 0185           80FB                   32    cmp bl, #0x32
00507 0188           75           05              jne int10_test_BL33
00508 018A           E8         6A7B              call biosfn_enable_video_addressing
00509 018D           EB           6C              jmp int10_end
00510                       0000018F            int10_test_BL33:
00511 018F           80FB                   33    cmp bl, #0x33
00512 0192           75           05              jne int10_test_BL34
00513 0194           E8         6A8F              call biosfn_enable_grayscale_summing
00514 0197           EB           62              jmp int10_end
00515                       00000199            int10_test_BL34:
00516 0199           80FB                   34    cmp bl, #0x34
00517 019C           75           4F              jne int10_normal
00518 019E           E8         6AA9              call biosfn_enable_cursor_emulation
00519 01A1           EB           58              jmp int10_end
00520                       000001A3            int10_test_101B:
00521 01A3           3D                   101B    cmp ax, #0x101b
00522 01A6           74           45              je int10_normal
00523 01A8           80FC                   10    cmp ah, #0x10
00524                                           
00525                                           
00526                                           
00527 01AB           75           05              jne int10_test_4F
00528                                           
00529 01AD           E8         6091              call biosfn_group_10
00530 01B0           EB           49              jmp int10_end
00531                                           
00532                       000001B2            int10_test_4F:
00533 01B2           80FC                   4F    cmp ah, #0x4f
00534 01B5           75           36              jne int10_normal
00535 01B7           3C                     03    cmp al, #0x03
00536 01B9           75           05              jne int10_test_vbe_05
00537 01BB           E8         9B6F              call vbe_biosfn_return_current_mode
00538 01BE           EB           3B              jmp int10_end
00539                       000001C0            int10_test_vbe_05:
00540 01C0           3C                     05    cmp al, #0x05
00541 01C2           75           05              jne int10_test_vbe_06
00542 01C4           E8         9E3A              call vbe_biosfn_display_window_control
00543 01C7           EB           32              jmp int10_end
00544                       000001C9            int10_test_vbe_06:
00545 01C9           3C                     06    cmp al, #0x06
00546 01CB           75           05              jne int10_test_vbe_07
00547 01CD           E8         9E5E              call vbe_biosfn_set_get_logical_scan_line_length
00548 01D0           EB           29              jmp int10_end
00549                       000001D2            int10_test_vbe_07:
00550 01D2           3C                     07    cmp al, #0x07
00551 01D4           75           05              jne int10_test_vbe_08
00552 01D6           E8         9EA2              call vbe_biosfn_set_get_display_start
00553 01D9           EB           20              jmp int10_end
00554                       000001DB            int10_test_vbe_08:
00555 01DB           3C                     08    cmp al, #0x08
00556 01DD           75           05              jne int10_test_vbe_0A
00557 01DF           E8         9EC7              call vbe_biosfn_set_get_dac_palette_format
00558 01E2           EB           17              jmp int10_end
00559                       000001E4            int10_test_vbe_0A:
00560 01E4           3C                     0A    cmp al, #0x0A
00561 01E6           75           05              jne int10_normal
00562 01E8           E8         9EF6              call vbe_biosfn_return_protected_mode_interface
00563 01EB           EB           0E              jmp int10_end
00564                                           
00565                                           
00566                       000001ED            int10_normal:
00567 01ED           06                           push es
00568 01EE           1E                           push ds
00569 01EF           60                           pusha
00570                                           
00571                                           ;; We have to set ds to access the right data segment
00572 01F0           BB                   C000    mov bx, #0xc000
00573 01F3           8EDB                         mov ds, bx
00574 01F5           E8         3430              call _int10_func
00575                                           
00576 01F8           61                           popa
00577 01F9           1F                           pop ds
00578 01FA           07                           pop es
00579                       000001FB            int10_end:
00580 01FB           9D                           popf
00581 01FC           CF                           iret
00582                                           ! 411 endasm
00583                                           !BCC_ENDASM
00584                                           ! 412 typedef struct
00585                                           ! 413 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 414  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 415  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 416  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 417  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 418  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 419  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 420 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 421 static VGAMODES vga_modes[15 +1]=
00602                                           ! 422 {
00603                                           
00604                       000001FD            _vga_modes:
00605                                           ! 423  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 01FD                        00            .byte	0
00607 01FE                        00            .byte	0
00608 01FF                        00            .byte	0
00609 0200                        04            .byte	4
00610 0201                      B800            .word	$B800
00611 0203                        FF            .byte	$FF
00612 0204                        02            .byte	2
00613                                           ! 424  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 0205                        01            .byte	1
00615 0206                        00            .byte	0
00616 0207                        00            .byte	0
00617 0208                        04            .byte	4
00618 0209                      B800            .word	$B800
00619 020B                        FF            .byte	$FF
00620 020C                        02            .byte	2
00621                                           ! 425  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 020D                        02            .byte	2
00623 020E                        00            .byte	0
00624 020F                        00            .byte	0
00625 0210                        04            .byte	4
00626 0211                      B800            .word	$B800
00627 0213                        FF            .byte	$FF
00628 0214                        02            .byte	2
00629                                           ! 426  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 0215                        03            .byte	3
00631 0216                        00            .byte	0
00632 0217                        00            .byte	0
00633 0218                        04            .byte	4
00634 0219                      B800            .word	$B800
00635 021B                        FF            .byte	$FF
00636 021C                        02            .byte	2
00637                                           ! 427  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 021D                        04            .byte	4
00639 021E                        01            .byte	1
00640 021F                        02            .byte	2
00641 0220                        02            .byte	2
00642 0221                      B800            .word	$B800
00643 0223                        FF            .byte	$FF
00644 0224                        01            .byte	1
00645                                           ! 428  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 0225                        05            .byte	5
00647 0226                        01            .byte	1
00648 0227                        02            .byte	2
00649 0228                        02            .byte	2
00650 0229                      B800            .word	$B800
00651 022B                        FF            .byte	$FF
00652 022C                        01            .byte	1
00653                                           ! 429  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 022D                        06            .byte	6
00655 022E                        01            .byte	1
00656 022F                        02            .byte	2
00657 0230                        01            .byte	1
00658 0231                      B800            .word	$B800
00659 0233                        FF            .byte	$FF
00660 0234                        01            .byte	1
00661                                           ! 430  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 0235                        07            .byte	7
00663 0236                        00            .byte	0
00664 0237                        01            .byte	1
00665 0238                        04            .byte	4
00666 0239                      B000            .word	$B000
00667 023B                        FF            .byte	$FF
00668 023C                        00            .byte	0
00669                                           ! 431  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 023D                        0D            .byte	$D
00671 023E                        01            .byte	1
00672 023F                        04            .byte	4
00673 0240                        04            .byte	4
00674 0241                      A000            .word	$A000
00675 0243                        FF            .byte	$FF
00676 0244                        01            .byte	1
00677                                           ! 432  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 0245                        0E            .byte	$E
00679 0246                        01            .byte	1
00680 0247                        04            .byte	4
00681 0248                        04            .byte	4
00682 0249                      A000            .word	$A000
00683 024B                        FF            .byte	$FF
00684 024C                        01            .byte	1
00685                                           ! 433  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 024D                        0F            .byte	$F
00687 024E                        01            .byte	1
00688 024F                        03            .byte	3
00689 0250                        01            .byte	1
00690 0251                      A000            .word	$A000
00691 0253                        FF            .byte	$FF
00692 0254                        00            .byte	0
00693                                           ! 434  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 0255                        10            .byte	$10
00695 0256                        01            .byte	1
00696 0257                        04            .byte	4
00697 0258                        04            .byte	4
00698 0259                      A000            .word	$A000
00699 025B                        FF            .byte	$FF
00700 025C                        02            .byte	2
00701                                           ! 435  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 025D                        11            .byte	$11
00703 025E                        01            .byte	1
00704 025F                        03            .byte	3
00705 0260                        01            .byte	1
00706 0261                      A000            .word	$A000
00707 0263                        FF            .byte	$FF
00708 0264                        02            .byte	2
00709                                           ! 436  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 0265                        12            .byte	$12
00711 0266                        01            .byte	1
00712 0267                        04            .byte	4
00713 0268                        04            .byte	4
00714 0269                      A000            .word	$A000
00715 026B                        FF            .byte	$FF
00716 026C                        02            .byte	2
00717                                           ! 437  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 026D                        13            .byte	$13
00719 026E                        01            .byte	1
00720 026F                        05            .byte	5
00721 0270                        08            .byte	8
00722 0271                      A000            .word	$A000
00723 0273                        FF            .byte	$FF
00724 0274                        03            .byte	3
00725                                           ! 438  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 0275                        6A            .byte	$6A
00727 0276                        01            .byte	1
00728 0277                        04            .byte	4
00729 0278                        04            .byte	4
00730 0279                      A000            .word	$A000
00731 027B                        FF            .byte	$FF
00732 027C                        02            .byte	2
00733                                           ! 439 };
00734                                           !BCC_EOS
00735                                           ! 440 static Bit8u line_to_vpti[15 +1]={
00736                       0000027D            _line_to_vpti:
00737                                           ! 441     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 027D                        17            .byte	$17
00739 027E                        17            .byte	$17
00740 027F                        18            .byte	$18
00741 0280                        18            .byte	$18
00742 0281                        04            .byte	4
00743 0282                        05            .byte	5
00744 0283                        06            .byte	6
00745 0284                        07            .byte	7
00746                                           ! 442     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 0285                        0D            .byte	$D
00748 0286                        0E            .byte	$E
00749 0287                        11            .byte	$11
00750 0288                        12            .byte	$12
00751 0289                        1A            .byte	$1A
00752 028A                        1B            .byte	$1B
00753 028B                        1C            .byte	$1C
00754 028C                        1D            .byte	$1D
00755                                           ! 443 };
00756                                           !BCC_EOS
00757                                           ! 444 static Bit8u dac_regs[3 +1]=
00758                                           ! 445 {0x3f,0x3f,0x3f,0xff};
00759                       0000028D            _dac_regs:
00760 028D                        3F            .byte	$3F
00761 028E                        3F            .byte	$3F
00762 028F                        3F            .byte	$3F
00763 0290                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 446 typedef struct {
00766                                           ! 447     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 448     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 449     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 450     Bit8u slength_l;
00773                                           !BCC_EOS
00774                                           ! 451     Bit8u slength_h;
00775                                           !BCC_EOS
00776                                           ! 452     Bit8u sequ_regs[4];
00777                                           !BCC_EOS
00778                                           ! 453     Bit8u miscreg;
00779                                           !BCC_EOS
00780                                           ! 454     Bit8u crtc_regs[25];
00781                                           !BCC_EOS
00782                                           ! 455    
00783                                           ! 455  Bit8u actl_regs[20];
00784                                           !BCC_EOS
00785                                           ! 456     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 457 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 458 static VideoParamTableEntry video_param_table[30] = {
00790                       00000291            _video_param_table:
00791                                           ! 459 {
00792                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 0291                        00            .byte	0
00794 0292                        00            .byte	0
00795 0293                        00            .byte	0
00796 0294                        00            .byte	0
00797 0295                        00            .byte	0
00798 0296                        00            .byte	0
00799 0297                        00            .byte	0
00800 0298                        00            .byte	0
00801                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 0299                        00            .byte	0
00803 029A                        00            .byte	0
00804 029B                        00            .byte	0
00805 029C                        00            .byte	0
00806 029D                        00            .byte	0
00807 029E                        00            .byte	0
00808 029F                        00            .byte	0
00809 02A0                        00            .byte	0
00810                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 02A1                        00            .byte	0
00812 02A2                        00            .byte	0
00813 02A3                        00            .byte	0
00814 02A4                        00            .byte	0
00815 02A5                        00            .byte	0
00816 02A6                        00            .byte	0
00817 02A7                        00            .byte	0
00818 02A8                        00            .byte	0
00819                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02A9                        00            .byte	0
00821 02AA                        00            .byte	0
00822 02AB                        00            .byte	0
00823 02AC                        00            .byte	0
00824 02AD                        00            .byte	0
00825 02AE                        00            .byte	0
00826 02AF                        00            .byte	0
00827 02B0                        00            .byte	0
00828                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02B1                        00            .byte	0
00830 02B2                        00            .byte	0
00831 02B3                        00            .byte	0
00832 02B4                        00            .byte	0
00833 02B5                        00            .byte	0
00834 02B6                        00            .byte	0
00835 02B7                        00            .byte	0
00836 02B8                        00            .byte	0
00837                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02B9                        00            .byte	0
00839 02BA                        00            .byte	0
00840 02BB                        00            .byte	0
00841 02BC                        00            .byte	0
00842 02BD                        00            .byte	0
00843 02BE                        00            .byte	0
00844 02BF                        00            .byte	0
00845 02C0                        00            .byte	0
00846                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02C1                        00            .byte	0
00848 02C2                        00            .byte	0
00849 02C3                        00            .byte	0
00850 02C4                        00            .byte	0
00851 02C5                        00            .byte	0
00852 02C6                        00            .byte	0
00853 02C7                        00            .byte	0
00854 02C8                        00            .byte	0
00855                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02C9                        00            .byte	0
00857 02CA                        00            .byte	0
00858 02CB                        00            .byte	0
00859 02CC                        00            .byte	0
00860 02CD                        00            .byte	0
00861 02CE                        00            .byte	0
00862 02CF                        00            .byte	0
00863 02D0                        00            .byte	0
00864                                           ! 468 },
00865                                           ! 469 {
00866                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02D1                        00            .byte	0
00868 02D2                        00            .byte	0
00869 02D3                        00            .byte	0
00870 02D4                        00            .byte	0
00871 02D5                        00            .byte	0
00872 02D6                        00            .byte	0
00873 02D7                        00            .byte	0
00874 02D8                        00            .byte	0
00875                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02D9                        00            .byte	0
00877 02DA                        00            .byte	0
00878 02DB                        00            .byte	0
00879 02DC                        00            .byte	0
00880 02DD                        00            .byte	0
00881 02DE                        00            .byte	0
00882 02DF                        00            .byte	0
00883 02E0                        00            .byte	0
00884                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02E1                        00            .byte	0
00886 02E2                        00            .byte	0
00887 02E3                        00            .byte	0
00888 02E4                        00            .byte	0
00889 02E5                        00            .byte	0
00890 02E6                        00            .byte	0
00891 02E7                        00            .byte	0
00892 02E8                        00            .byte	0
00893                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02E9                        00            .byte	0
00895 02EA                        00            .byte	0
00896 02EB                        00            .byte	0
00897 02EC                        00            .byte	0
00898 02ED                        00            .byte	0
00899 02EE                        00            .byte	0
00900 02EF                        00            .byte	0
00901 02F0                        00            .byte	0
00902                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02F1                        00            .byte	0
00904 02F2                        00            .byte	0
00905 02F3                        00            .byte	0
00906 02F4                        00            .byte	0
00907 02F5                        00            .byte	0
00908 02F6                        00            .byte	0
00909 02F7                        00            .byte	0
00910 02F8                        00            .byte	0
00911                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 02F9                        00            .byte	0
00913 02FA                        00            .byte	0
00914 02FB                        00            .byte	0
00915 02FC                        00            .byte	0
00916 02FD                        00            .byte	0
00917 02FE                        00            .byte	0
00918 02FF                        00            .byte	0
00919 0300                        00            .byte	0
00920                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 0301                        00            .byte	0
00922 0302                        00            .byte	0
00923 0303                        00            .byte	0
00924 0304                        00            .byte	0
00925 0305                        00            .byte	0
00926 0306                        00            .byte	0
00927 0307                        00            .byte	0
00928 0308                        00            .byte	0
00929                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0309                        00            .byte	0
00931 030A                        00            .byte	0
00932 030B                        00            .byte	0
00933 030C                        00            .byte	0
00934 030D                        00            .byte	0
00935 030E                        00            .byte	0
00936 030F                        00            .byte	0
00937 0310                        00            .byte	0
00938                                           ! 478 },
00939                                           ! 479 {
00940                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 0311                        00            .byte	0
00942 0312                        00            .byte	0
00943 0313                        00            .byte	0
00944 0314                        00            .byte	0
00945 0315                        00            .byte	0
00946 0316                        00            .byte	0
00947 0317                        00            .byte	0
00948 0318                        00            .byte	0
00949                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0319                        00            .byte	0
00951 031A                        00            .byte	0
00952 031B                        00            .byte	0
00953 031C                        00            .byte	0
00954 031D                        00            .byte	0
00955 031E                        00            .byte	0
00956 031F                        00            .byte	0
00957 0320                        00            .byte	0
00958                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 0321                        00            .byte	0
00960 0322                        00            .byte	0
00961 0323                        00            .byte	0
00962 0324                        00            .byte	0
00963 0325                        00            .byte	0
00964 0326                        00            .byte	0
00965 0327                        00            .byte	0
00966 0328                        00            .byte	0
00967                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0329                        00            .byte	0
00969 032A                        00            .byte	0
00970 032B                        00            .byte	0
00971 032C                        00            .byte	0
00972 032D                        00            .byte	0
00973 032E                        00            .byte	0
00974 032F                        00            .byte	0
00975 0330                        00            .byte	0
00976                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 0331                        00            .byte	0
00978 0332                        00            .byte	0
00979 0333                        00            .byte	0
00980 0334                        00            .byte	0
00981 0335                        00            .byte	0
00982 0336                        00            .byte	0
00983 0337                        00            .byte	0
00984 0338                        00            .byte	0
00985                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0339                        00            .byte	0
00987 033A                        00            .byte	0
00988 033B                        00            .byte	0
00989 033C                        00            .byte	0
00990 033D                        00            .byte	0
00991 033E                        00            .byte	0
00992 033F                        00            .byte	0
00993 0340                        00            .byte	0
00994                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 0341                        00            .byte	0
00996 0342                        00            .byte	0
00997 0343                        00            .byte	0
00998 0344                        00            .byte	0
00999 0345                        00            .byte	0
01000 0346                        00            .byte	0
01001 0347                        00            .byte	0
01002 0348                        00            .byte	0
01003                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0349                        00            .byte	0
01005 034A                        00            .byte	0
01006 034B                        00            .byte	0
01007 034C                        00            .byte	0
01008 034D                        00            .byte	0
01009 034E                        00            .byte	0
01010 034F                        00            .byte	0
01011 0350                        00            .byte	0
01012                                           ! 488 },
01013                                           ! 489 {
01014                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 0351                        00            .byte	0
01016 0352                        00            .byte	0
01017 0353                        00            .byte	0
01018 0354                        00            .byte	0
01019 0355                        00            .byte	0
01020 0356                        00            .byte	0
01021 0357                        00            .byte	0
01022 0358                        00            .byte	0
01023                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0359                        00            .byte	0
01025 035A                        00            .byte	0
01026 035B                        00            .byte	0
01027 035C                        00            .byte	0
01028 035D                        00            .byte	0
01029 035E                        00            .byte	0
01030 035F                        00            .byte	0
01031 0360                        00            .byte	0
01032                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 0361                        00            .byte	0
01034 0362                        00            .byte	0
01035 0363                        00            .byte	0
01036 0364                        00            .byte	0
01037 0365                        00            .byte	0
01038 0366                        00            .byte	0
01039 0367                        00            .byte	0
01040 0368                        00            .byte	0
01041                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0369                        00            .byte	0
01043 036A                        00            .byte	0
01044 036B                        00            .byte	0
01045 036C                        00            .byte	0
01046 036D                        00            .byte	0
01047 036E                        00            .byte	0
01048 036F                        00            .byte	0
01049 0370                        00            .byte	0
01050                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 0371                        00            .byte	0
01052 0372                        00            .byte	0
01053 0373                        00            .byte	0
01054 0374                        00            .byte	0
01055 0375                        00            .byte	0
01056 0376                        00            .byte	0
01057 0377                        00            .byte	0
01058 0378                        00            .byte	0
01059                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0379                        00            .byte	0
01061 037A                        00            .byte	0
01062 037B                        00            .byte	0
01063 037C                        00            .byte	0
01064 037D                        00            .byte	0
01065 037E                        00            .byte	0
01066 037F                        00            .byte	0
01067 0380                        00            .byte	0
01068                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 0381                        00            .byte	0
01070 0382                        00            .byte	0
01071 0383                        00            .byte	0
01072 0384                        00            .byte	0
01073 0385                        00            .byte	0
01074 0386                        00            .byte	0
01075 0387                        00            .byte	0
01076 0388                        00            .byte	0
01077                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0389                        00            .byte	0
01079 038A                        00            .byte	0
01080 038B                        00            .byte	0
01081 038C                        00            .byte	0
01082 038D                        00            .byte	0
01083 038E                        00            .byte	0
01084 038F                        00            .byte	0
01085 0390                        00            .byte	0
01086                                           ! 498 },
01087                                           ! 499 {
01088                                           ! 500  40, 24, 8, 0x00, 0x08,
01089 0391                        28            .byte	$28
01090 0392                        18            .byte	$18
01091 0393                        08            .byte	8
01092 0394                        00            .byte	0
01093 0395                        08            .byte	8
01094                                           ! 501  0x09, 0x03, 0x00, 0x02,
01095 0396                        09            .byte	9
01096 0397                        03            .byte	3
01097 0398                        00            .byte	0
01098 0399                        02            .byte	2
01099                                           ! 502  0x63,
01100 039A                        63            .byte	$63
01101                                           ! 503  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 039B                        2D            .byte	$2D
01103 039C                        27            .byte	$27
01104 039D                        28            .byte	$28
01105 039E                        90            .byte	$90
01106 039F                        2B            .byte	$2B
01107 03A0                        80            .byte	$80
01108 03A1                        BF            .byte	$BF
01109 03A2                        1F            .byte	$1F
01110                                           ! 504  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 03A3                        00            .byte	0
01112 03A4                        C1            .byte	$C1
01113 03A5                        00            .byte	0
01114 03A6                        00            .byte	0
01115 03A7                        00            .byte	0
01116 03A8                        00            .byte	0
01117 03A9                        00            .byte	0
01118 03AA                        00            .byte	0
01119                                           ! 505  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03AB                        9C            .byte	$9C
01121 03AC                        8E            .byte	$8E
01122 03AD                        8F            .byte	$8F
01123 03AE                        14            .byte	$14
01124 03AF                        00            .byte	0
01125 03B0                        96            .byte	$96
01126 03B1                        B9            .byte	$B9
01127 03B2                        A2            .byte	$A2
01128                                           ! 506  0xff,
01129 03B3                        FF            .byte	$FF
01130                                           ! 507  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01131 03B4                        00            .byte	0
01132 03B5                        13            .byte	$13
01133 03B6                        15            .byte	$15
01134 03B7                        17            .byte	$17
01135 03B8                        02            .byte	2
01136 03B9                        04            .byte	4
01137 03BA                        06            .byte	6
01138 03BB                        07            .byte	7
01139                                           ! 508  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01140 03BC                        10            .byte	$10
01141 03BD                        11            .byte	$11
01142 03BE                        12            .byte	$12
01143 03BF                        13            .byte	$13
01144 03C0                        14            .byte	$14
01145 03C1                        15            .byte	$15
01146 03C2                        16            .byte	$16
01147 03C3                        17            .byte	$17
01148                                           ! 509  0x01, 0x00, 0x03, 0x00,
01149 03C4                        01            .byte	1
01150 03C5                        00            .byte	0
01151 03C6                        03            .byte	3
01152 03C7                        00            .byte	0
01153                                           ! 510  
01154                                           ! 510 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01155 03C8                        00            .byte	0
01156 03C9                        00            .byte	0
01157 03CA                        00            .byte	0
01158 03CB                        00            .byte	0
01159 03CC                        00            .byte	0
01160 03CD                        30            .byte	$30
01161 03CE                        0F            .byte	$F
01162 03CF                        0F            .byte	$F
01163 03D0                        FF            .byte	$FF
01164                                           ! 511 },
01165                                           ! 512 {
01166                                           ! 513  40, 24, 8, 0x00, 0x08,
01167 03D1                        28            .byte	$28
01168 03D2                        18            .byte	$18
01169 03D3                        08            .byte	8
01170 03D4                        00            .byte	0
01171 03D5                        08            .byte	8
01172                                           ! 514  0x09, 0x03, 0x00, 0x02,
01173 03D6                        09            .byte	9
01174 03D7                        03            .byte	3
01175 03D8                        00            .byte	0
01176 03D9                        02            .byte	2
01177                                           ! 515  0x63,
01178 03DA                        63            .byte	$63
01179                                           ! 516  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03DB                        2D            .byte	$2D
01181 03DC                        27            .byte	$27
01182 03DD                        28            .byte	$28
01183 03DE                        90            .byte	$90
01184 03DF                        2B            .byte	$2B
01185 03E0                        80            .byte	$80
01186 03E1                        BF            .byte	$BF
01187 03E2                        1F            .byte	$1F
01188                                           ! 517  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03E3                        00            .byte	0
01190 03E4                        C1            .byte	$C1
01191 03E5                        00            .byte	0
01192 03E6                        00            .byte	0
01193 03E7                        00            .byte	0
01194 03E8                        00            .byte	0
01195 03E9                        00            .byte	0
01196 03EA                        00            .byte	0
01197                                           ! 518  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03EB                        9C            .byte	$9C
01199 03EC                        8E            .byte	$8E
01200 03ED                        8F            .byte	$8F
01201 03EE                        14            .byte	$14
01202 03EF                        00            .byte	0
01203 03F0                        96            .byte	$96
01204 03F1                        B9            .byte	$B9
01205 03F2                        A2            .byte	$A2
01206                                           ! 519  0xff,
01207 03F3                        FF            .byte	$FF
01208                                           ! 520  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 03F4                        00            .byte	0
01210 03F5                        13            .byte	$13
01211 03F6                        15            .byte	$15
01212 03F7                        17            .byte	$17
01213 03F8                        02            .byte	2
01214 03F9                        04            .byte	4
01215 03FA                        06            .byte	6
01216 03FB                        07            .byte	7
01217                                           ! 521  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 03FC                        10            .byte	$10
01219 03FD                        11            .byte	$11
01220 03FE                        12            .byte	$12
01221 03FF                        13            .byte	$13
01222 0400                        14            .byte	$14
01223 0401                        15            .byte	$15
01224 0402                        16            .byte	$16
01225 0403                        17            .byte	$17
01226                                           ! 522  0x01, 0x00, 0x03, 0x00,
01227 0404                        01            .byte	1
01228 0405                        00            .byte	0
01229 0406                        03            .byte	3
01230 0407                        00            .byte	0
01231                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 0408                        00            .byte	0
01233 0409                        00            .byte	0
01234 040A                        00            .byte	0
01235 040B                        00            .byte	0
01236 040C                        00            .byte	0
01237 040D                        30            .byte	$30
01238 040E                        0F            .byte	$F
01239 040F                        0F            .byte	$F
01240 0410                        FF            .byte	$FF
01241                                           ! 524 },
01242                                           ! 525 {
01243                                           ! 526  80, 24, 8, 0x00, 0x10,
01244 0411                        50            .byte	$50
01245 0412                        18            .byte	$18
01246 0413                        08            .byte	8
01247 0414                        00            .byte	0
01248 0415                        10            .byte	$10
01249                                           ! 527  0x01, 0x01, 0x00, 0x06,
01250 0416                        01            .byte	1
01251 0417                        01            .byte	1
01252 0418                        00            .byte	0
01253 0419                        06            .byte	6
01254                                           ! 528  0x63,
01255 041A                        63            .byte	$63
01256                                           ! 529  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 041B                        5F            .byte	$5F
01258 041C                        4F            .byte	$4F
01259 041D                        50            .byte	$50
01260 041E                        82            .byte	$82
01261 041F                        54            .byte	$54
01262 0420                        80            .byte	$80
01263 0421                        BF            .byte	$BF
01264 0422                        1F            .byte	$1F
01265                                           ! 530  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 0423                        00            .byte	0
01267 0424                        C1            .byte	$C1
01268 0425                        00            .byte	0
01269 0426                        00            .byte	0
01270 0427                        00            .byte	0
01271 0428                        00            .byte	0
01272 0429                        00            .byte	0
01273 042A                        00            .byte	0
01274                                           ! 531  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 042B                        9C            .byte	$9C
01276 042C                        8E            .byte	$8E
01277 042D                        8F            .byte	$8F
01278 042E                        28            .byte	$28
01279 042F                        00            .byte	0
01280 0430                        96            .byte	$96
01281 0431                        B9            .byte	$B9
01282 0432                        C2            .byte	$C2
01283                                           ! 532  0xff,
01284 0433                        FF            .byte	$FF
01285                                           ! 533  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 0434                        00            .byte	0
01287 0435                        17            .byte	$17
01288 0436                        17            .byte	$17
01289 0437                        17            .byte	$17
01290 0438                        17            .byte	$17
01291 0439                        17            .byte	$17
01292 043A                        17            .byte	$17
01293 043B                        17            .byte	$17
01294                                           ! 534  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 043C                        17            .byte	$17
01296 043D                        17            .byte	$17
01297 043E                        17            .byte	$17
01298 043F                        17            .byte	$17
01299 0440                        17            .byte	$17
01300 0441                        17            .byte	$17
01301 0442                        17            .byte	$17
01302 0443                        17            .byte	$17
01303                                           ! 535  0x01, 0x00, 0x01, 0x00,
01304 0444                        01            .byte	1
01305 0445                        00            .byte	0
01306 0446                        01            .byte	1
01307 0447                        00            .byte	0
01308                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 0448                        00            .byte	0
01310 0449                        00            .byte	0
01311 044A                        00            .byte	0
01312 044B                        00            .byte	0
01313 044C                        00            .byte	0
01314 044D                        00            .byte	0
01315 044E                        0D            .byte	$D
01316 044F                        0F            .byte	$F
01317 0450                        FF            .byte	$FF
01318                                           ! 537 },
01319                                           ! 538 {
01320                                           ! 539  80, 24, 16, 0x00, 0x10,
01321 0451                        50            .byte	$50
01322 0452                        18            .byte	$18
01323 0453                        10            .byte	$10
01324 0454                        00            .byte	0
01325 0455                        10            .byte	$10
01326                                           ! 540  0x00, 0x03, 0x00, 0x02,
01327 0456                        00            .byte	0
01328 0457                        03            .byte	3
01329 0458                        00            .byte	0
01330 0459                        02            .byte	2
01331                                           ! 541  0x66,
01332 045A                        66            .byte	$66
01333                                           ! 542  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 045B                        5F            .byte	$5F
01335 045C                        4F            .byte	$4F
01336 045D                        50            .byte	$50
01337 045E                        82            .byte	$82
01338 045F                        55            .byte	$55
01339 0460                        81            .byte	$81
01340 0461                        BF            .byte	$BF
01341 0462                        1F            .byte	$1F
01342                                           ! 543  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 0463                        00            .byte	0
01344 0464                        4F            .byte	$4F
01345 0465                        0D            .byte	$D
01346 0466                        0E            .byte	$E
01347 0467                        00            .byte	0
01348 0468                        00            .byte	0
01349 0469                        00            .byte	0
01350 046A                        00            .byte	0
01351                                           ! 544  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 046B                        9C            .byte	$9C
01353 046C                        8E            .byte	$8E
01354 046D                        8F            .byte	$8F
01355 046E                        28            .byte	$28
01356 046F                        0F            .byte	$F
01357 0470                        96            .byte	$96
01358 0471                        B9            .byte	$B9
01359 0472                        A3            .byte	$A3
01360                                           ! 545  0xff,
01361 0473                        FF            .byte	$FF
01362                                           ! 546  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 0474                        00            .byte	0
01364 0475                        08            .byte	8
01365 0476                        08            .byte	8
01366 0477                        08            .byte	8
01367 0478                        08            .byte	8
01368 0479                        08            .byte	8
01369 047A                        08            .byte	8
01370 047B                        08            .byte	8
01371                                           ! 547  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 047C                        10            .byte	$10
01373 047D                        18            .byte	$18
01374 047E                        18            .byte	$18
01375 047F                        18            .byte	$18
01376 0480                        18            .byte	$18
01377 0481                        18            .byte	$18
01378 0482                        18            .byte	$18
01379 0483                        18            .byte	$18
01380                                           ! 548  0x0e, 0x00, 0x0f, 0x08,
01381 0484                        0E            .byte	$E
01382 0485                        00            .byte	0
01383 0486                        0F            .byte	$F
01384 0487                        08            .byte	8
01385                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 0488                        00            .byte	0
01387 0489                        00            .byte	0
01388 048A                        00            .byte	0
01389 048B                        00            .byte	0
01390 048C                        00            .byte	0
01391 048D                        10            .byte	$10
01392 048E                        0A            .byte	$A
01393 048F                        0F            .byte	$F
01394 0490                        FF            .byte	$FF
01395                                           ! 550 },
01396                                           ! 551 {
01397                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 0491                        00            .byte	0
01399 0492                        00            .byte	0
01400 0493                        00            .byte	0
01401 0494                        00            .byte	0
01402 0495                        00            .byte	0
01403 0496                        00            .byte	0
01404 0497                        00            .byte	0
01405 0498                        00            .byte	0
01406                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 0499                        00            .byte	0
01408 049A                        00            .byte	0
01409 049B                        00            .byte	0
01410 049C                        00            .byte	0
01411 049D                        00            .byte	0
01412 049E                        00            .byte	0
01413 049F                        00            .byte	0
01414 04A0                        00            .byte	0
01415                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 04A1                        00            .byte	0
01417 04A2                        00            .byte	0
01418 04A3                        00            .byte	0
01419 04A4                        00            .byte	0
01420 04A5                        00            .byte	0
01421 04A6                        00            .byte	0
01422 04A7                        00            .byte	0
01423 04A8                        00            .byte	0
01424                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04A9                        00            .byte	0
01426 04AA                        00            .byte	0
01427 04AB                        00            .byte	0
01428 04AC                        00            .byte	0
01429 04AD                        00            .byte	0
01430 04AE                        00            .byte	0
01431 04AF                        00            .byte	0
01432 04B0                        00            .byte	0
01433                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04B1                        00            .byte	0
01435 04B2                        00            .byte	0
01436 04B3                        00            .byte	0
01437 04B4                        00            .byte	0
01438 04B5                        00            .byte	0
01439 04B6                        00            .byte	0
01440 04B7                        00            .byte	0
01441 04B8                        00            .byte	0
01442                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04B9                        00            .byte	0
01444 04BA                        00            .byte	0
01445 04BB                        00            .byte	0
01446 04BC                        00            .byte	0
01447 04BD                        00            .byte	0
01448 04BE                        00            .byte	0
01449 04BF                        00            .byte	0
01450 04C0                        00            .byte	0
01451                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04C1                        00            .byte	0
01453 04C2                        00            .byte	0
01454 04C3                        00            .byte	0
01455 04C4                        00            .byte	0
01456 04C5                        00            .byte	0
01457 04C6                        00            .byte	0
01458 04C7                        00            .byte	0
01459 04C8                        00            .byte	0
01460                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04C9                        00            .byte	0
01462 04CA                        00            .byte	0
01463 04CB                        00            .byte	0
01464 04CC                        00            .byte	0
01465 04CD                        00            .byte	0
01466 04CE                        00            .byte	0
01467 04CF                        00            .byte	0
01468 04D0                        00            .byte	0
01469                                           ! 560 },
01470                                           ! 561 {
01471                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04D1                        00            .byte	0
01473 04D2                        00            .byte	0
01474 04D3                        00            .byte	0
01475 04D4                        00            .byte	0
01476 04D5                        00            .byte	0
01477 04D6                        00            .byte	0
01478 04D7                        00            .byte	0
01479 04D8                        00            .byte	0
01480                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04D9                        00            .byte	0
01482 04DA                        00            .byte	0
01483 04DB                        00            .byte	0
01484 04DC                        00            .byte	0
01485 04DD                        00            .byte	0
01486 04DE                        00            .byte	0
01487 04DF                        00            .byte	0
01488 04E0                        00            .byte	0
01489                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04E1                        00            .byte	0
01491 04E2                        00            .byte	0
01492 04E3                        00            .byte	0
01493 04E4                        00            .byte	0
01494 04E5                        00            .byte	0
01495 04E6                        00            .byte	0
01496 04E7                        00            .byte	0
01497 04E8                        00            .byte	0
01498                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04E9                        00            .byte	0
01500 04EA                        00            .byte	0
01501 04EB                        00            .byte	0
01502 04EC                        00            .byte	0
01503 04ED                        00            .byte	0
01504 04EE                        00            .byte	0
01505 04EF                        00            .byte	0
01506 04F0                        00            .byte	0
01507                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04F1                        00            .byte	0
01509 04F2                        00            .byte	0
01510 04F3                        00            .byte	0
01511 04F4                        00            .byte	0
01512 04F5                        00            .byte	0
01513 04F6                        00            .byte	0
01514 04F7                        00            .byte	0
01515 04F8                        00            .byte	0
01516                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 04F9                        00            .byte	0
01518 04FA                        00            .byte	0
01519 04FB                        00            .byte	0
01520 04FC                        00            .byte	0
01521 04FD                        00            .byte	0
01522 04FE                        00            .byte	0
01523 04FF                        00            .byte	0
01524 0500                        00            .byte	0
01525                                           ! 568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 0501                        00            .byte	0
01527 0502                        00            .byte	0
01528 0503                        00            .byte	0
01529 0504                        00            .byte	0
01530 0505                        00            .byte	0
01531 0506                        00            .byte	0
01532 0507                        00            .byte	0
01533 0508                        00            .byte	0
01534                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0509                        00            .byte	0
01536 050A                        00            .byte	0
01537 050B                        00            .byte	0
01538 050C                        00            .byte	0
01539 050D                        00            .byte	0
01540 050E                        00            .byte	0
01541 050F                        00            .byte	0
01542 0510                        00            .byte	0
01543                                           ! 570 },
01544                                           ! 571 {
01545                                           ! 572  0x00, 0x00, 0x
01546 0511                        00            .byte	0
01547 0512                        00            .byte	0
01548                                           ! 572 00, 0x00, 0x00, 0x00, 0x00, 0x00,
01549 0513                        00            .byte	0
01550 0514                        00            .byte	0
01551 0515                        00            .byte	0
01552 0516                        00            .byte	0
01553 0517                        00            .byte	0
01554 0518                        00            .byte	0
01555                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0519                        00            .byte	0
01557 051A                        00            .byte	0
01558 051B                        00            .byte	0
01559 051C                        00            .byte	0
01560 051D                        00            .byte	0
01561 051E                        00            .byte	0
01562 051F                        00            .byte	0
01563 0520                        00            .byte	0
01564                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 0521                        00            .byte	0
01566 0522                        00            .byte	0
01567 0523                        00            .byte	0
01568 0524                        00            .byte	0
01569 0525                        00            .byte	0
01570 0526                        00            .byte	0
01571 0527                        00            .byte	0
01572 0528                        00            .byte	0
01573                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0529                        00            .byte	0
01575 052A                        00            .byte	0
01576 052B                        00            .byte	0
01577 052C                        00            .byte	0
01578 052D                        00            .byte	0
01579 052E                        00            .byte	0
01580 052F                        00            .byte	0
01581 0530                        00            .byte	0
01582                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 0531                        00            .byte	0
01584 0532                        00            .byte	0
01585 0533                        00            .byte	0
01586 0534                        00            .byte	0
01587 0535                        00            .byte	0
01588 0536                        00            .byte	0
01589 0537                        00            .byte	0
01590 0538                        00            .byte	0
01591                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0539                        00            .byte	0
01593 053A                        00            .byte	0
01594 053B                        00            .byte	0
01595 053C                        00            .byte	0
01596 053D                        00            .byte	0
01597 053E                        00            .byte	0
01598 053F                        00            .byte	0
01599 0540                        00            .byte	0
01600                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 0541                        00            .byte	0
01602 0542                        00            .byte	0
01603 0543                        00            .byte	0
01604 0544                        00            .byte	0
01605 0545                        00            .byte	0
01606 0546                        00            .byte	0
01607 0547                        00            .byte	0
01608 0548                        00            .byte	0
01609                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0549                        00            .byte	0
01611 054A                        00            .byte	0
01612 054B                        00            .byte	0
01613 054C                        00            .byte	0
01614 054D                        00            .byte	0
01615 054E                        00            .byte	0
01616 054F                        00            .byte	0
01617 0550                        00            .byte	0
01618                                           ! 580 },
01619                                           ! 581 {
01620                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 0551                        00            .byte	0
01622 0552                        00            .byte	0
01623 0553                        00            .byte	0
01624 0554                        00            .byte	0
01625 0555                        00            .byte	0
01626 0556                        00            .byte	0
01627 0557                        00            .byte	0
01628 0558                        00            .byte	0
01629                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0559                        00            .byte	0
01631 055A                        00            .byte	0
01632 055B                        00            .byte	0
01633 055C                        00            .byte	0
01634 055D                        00            .byte	0
01635 055E                        00            .byte	0
01636 055F                        00            .byte	0
01637 0560                        00            .byte	0
01638                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 0561                        00            .byte	0
01640 0562                        00            .byte	0
01641 0563                        00            .byte	0
01642 0564                        00            .byte	0
01643 0565                        00            .byte	0
01644 0566                        00            .byte	0
01645 0567                        00            .byte	0
01646 0568                        00            .byte	0
01647                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0569                        00            .byte	0
01649 056A                        00            .byte	0
01650 056B                        00            .byte	0
01651 056C                        00            .byte	0
01652 056D                        00            .byte	0
01653 056E                        00            .byte	0
01654 056F                        00            .byte	0
01655 0570                        00            .byte	0
01656                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 0571                        00            .byte	0
01658 0572                        00            .byte	0
01659 0573                        00            .byte	0
01660 0574                        00            .byte	0
01661 0575                        00            .byte	0
01662 0576                        00            .byte	0
01663 0577                        00            .byte	0
01664 0578                        00            .byte	0
01665                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0579                        00            .byte	0
01667 057A                        00            .byte	0
01668 057B                        00            .byte	0
01669 057C                        00            .byte	0
01670 057D                        00            .byte	0
01671 057E                        00            .byte	0
01672 057F                        00            .byte	0
01673 0580                        00            .byte	0
01674                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 0581                        00            .byte	0
01676 0582                        00            .byte	0
01677 0583                        00            .byte	0
01678 0584                        00            .byte	0
01679 0585                        00            .byte	0
01680 0586                        00            .byte	0
01681 0587                        00            .byte	0
01682 0588                        00            .byte	0
01683                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0589                        00            .byte	0
01685 058A                        00            .byte	0
01686 058B                        00            .byte	0
01687 058C                        00            .byte	0
01688 058D                        00            .byte	0
01689 058E                        00            .byte	0
01690 058F                        00            .byte	0
01691 0590                        00            .byte	0
01692                                           ! 590 },
01693                                           ! 591 {
01694                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 0591                        00            .byte	0
01696 0592                        00            .byte	0
01697 0593                        00            .byte	0
01698 0594                        00            .byte	0
01699 0595                        00            .byte	0
01700 0596                        00            .byte	0
01701 0597                        00            .byte	0
01702 0598                        00            .byte	0
01703                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 0599                        00            .byte	0
01705 059A                        00            .byte	0
01706 059B                        00            .byte	0
01707 059C                        00            .byte	0
01708 059D                        00            .byte	0
01709 059E                        00            .byte	0
01710 059F                        00            .byte	0
01711 05A0                        00            .byte	0
01712                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 05A1                        00            .byte	0
01714 05A2                        00            .byte	0
01715 05A3                        00            .byte	0
01716 05A4                        00            .byte	0
01717 05A5                        00            .byte	0
01718 05A6                        00            .byte	0
01719 05A7                        00            .byte	0
01720 05A8                        00            .byte	0
01721                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05A9                        00            .byte	0
01723 05AA                        00            .byte	0
01724 05AB                        00            .byte	0
01725 05AC                        00            .byte	0
01726 05AD                        00            .byte	0
01727 05AE                        00            .byte	0
01728 05AF                        00            .byte	0
01729 05B0                        00            .byte	0
01730                                           ! 596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05B1                        00            .byte	0
01732 05B2                        00            .byte	0
01733 05B3                        00            .byte	0
01734 05B4                        00            .byte	0
01735 05B5                        00            .byte	0
01736 05B6                        00            .byte	0
01737 05B7                        00            .byte	0
01738 05B8                        00            .byte	0
01739                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05B9                        00            .byte	0
01741 05BA                        00            .byte	0
01742 05BB                        00            .byte	0
01743 05BC                        00            .byte	0
01744 05BD                        00            .byte	0
01745 05BE                        00            .byte	0
01746 05BF                        00            .byte	0
01747 05C0                        00            .byte	0
01748                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05C1                        00            .byte	0
01750 05C2                        00            .byte	0
01751 05C3                        00            .byte	0
01752 05C4                        00            .byte	0
01753 05C5                        00            .byte	0
01754 05C6                        00            .byte	0
01755 05C7                        00            .byte	0
01756 05C8                        00            .byte	0
01757                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05C9                        00            .byte	0
01759 05CA                        00            .byte	0
01760 05CB                        00            .byte	0
01761 05CC                        00            .byte	0
01762 05CD                        00            .byte	0
01763 05CE                        00            .byte	0
01764 05CF                        00            .byte	0
01765 05D0                        00            .byte	0
01766                                           ! 600 },
01767                                           ! 601 {
01768                                           ! 602  40, 24, 8, 0x00, 0x20,
01769 05D1                        28            .byte	$28
01770 05D2                        18            .byte	$18
01771 05D3                        08            .byte	8
01772 05D4                        00            .byte	0
01773 05D5                        20            .byte	$20
01774                                           ! 603  0x09, 0x0f, 0x00, 0x06,
01775 05D6                        09            .byte	9
01776 05D7                        0F            .byte	$F
01777 05D8                        00            .byte	0
01778 05D9                        06            .byte	6
01779                                           ! 604  0x63,
01780 05DA                        63            .byte	$63
01781                                           ! 605  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05DB                        2D            .byte	$2D
01783 05DC                        27            .byte	$27
01784 05DD                        28            .byte	$28
01785 05DE                        90            .byte	$90
01786 05DF                        2B            .byte	$2B
01787 05E0                        80            .byte	$80
01788 05E1                        BF            .byte	$BF
01789 05E2                        1F            .byte	$1F
01790                                           ! 606  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05E3                        00            .byte	0
01792 05E4                        C0            .byte	$C0
01793 05E5                        00            .byte	0
01794 05E6                        00            .byte	0
01795 05E7                        00            .byte	0
01796 05E8                        00            .byte	0
01797 05E9                        00            .byte	0
01798 05EA                        00            .byte	0
01799                                           ! 607  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05EB                        9C            .byte	$9C
01801 05EC                        8E            .byte	$8E
01802 05ED                        8F            .byte	$8F
01803 05EE                        14            .byte	$14
01804 05EF                        00            .byte	0
01805 05F0                        96            .byte	$96
01806 05F1                        B9            .byte	$B9
01807 05F2                        E3            .byte	$E3
01808                                           ! 608  0xff,
01809 05F3                        FF            .byte	$FF
01810                                           ! 609  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 05F4                        00            .byte	0
01812 05F5                        01            .byte	1
01813 05F6                        02            .byte	2
01814 05F7                        03            .byte	3
01815 05F8                        04            .byte	4
01816 05F9                        05            .byte	5
01817 05FA                        06            .byte	6
01818 05FB                        07            .byte	7
01819                                           ! 610  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 05FC                        10            .byte	$10
01821 05FD                        11            .byte	$11
01822 05FE                        12            .byte	$12
01823 05FF                        13            .byte	$13
01824 0600                        14            .byte	$14
01825 0601                        15            .byte	$15
01826 0602                        16            .byte	$16
01827 0603                        17            .byte	$17
01828                                           ! 611  0x01, 0x00, 0x0f, 0x00,
01829 0604                        01            .byte	1
01830 0605                        00            .byte	0
01831 0606                        0F            .byte	$F
01832 0607                        00            .byte	0
01833                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 0608                        00            .byte	0
01835 0609                        00            .byte	0
01836 060A                        00            .byte	0
01837 060B                        00            .byte	0
01838 060C                        00            .byte	0
01839 060D                        00            .byte	0
01840 060E                        05            .byte	5
01841 060F                        0F            .byte	$F
01842 0610                        FF            .byte	$FF
01843                                           ! 613 },
01844                                           ! 614 {
01845                                           ! 615  80, 24, 8, 0x00, 0x40,
01846 0611                        50            .byte	$50
01847 0612                        18            .byte	$18
01848 0613                        08            .byte	8
01849 0614                        00            .byte	0
01850 0615                        40            .byte	$40
01851                                           ! 616  0x01, 0x0f, 0x00, 0x06,
01852 0616                        01            .byte	1
01853 0617                        0F            .byte	$F
01854 0618                        00            .byte	0
01855 0619                        06            .byte	6
01856                                           ! 617  0x63,
01857 061A                        63            .byte	$63
01858                                           ! 618  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 061B                        5F            .byte	$5F
01860 061C                        4F            .byte	$4F
01861 061D                        50            .byte	$50
01862 061E                        82            .byte	$82
01863 061F                        54            .byte	$54
01864 0620                        80            .byte	$80
01865 0621                        BF            .byte	$BF
01866 0622                        1F            .byte	$1F
01867                                           ! 619  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 0623                        00            .byte	0
01869 0624                        C0            .byte	$C0
01870 0625                        00            .byte	0
01871 0626                        00            .byte	0
01872 0627                        00            .byte	0
01873 0628                        00            .byte	0
01874 0629                        00            .byte	0
01875 062A                        00            .byte	0
01876                                           ! 620  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 062B                        9C            .byte	$9C
01878 062C                        8E            .byte	$8E
01879 062D                        8F            .byte	$8F
01880 062E                        28            .byte	$28
01881 062F                        00            .byte	0
01882 0630                        96            .byte	$96
01883 0631                        B9            .byte	$B9
01884 0632                        E3            .byte	$E3
01885                                           ! 621  0xff,
01886 0633                        FF            .byte	$FF
01887                                           ! 622  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 0634                        00            .byte	0
01889 0635                        01            .byte	1
01890 0636                        02            .byte	2
01891 0637                        03            .byte	3
01892 0638                        04            .byte	4
01893 0639                        05            .byte	5
01894 063A                        06            .byte	6
01895 063B                        07            .byte	7
01896                                           ! 623  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 063C                        10            .byte	$10
01898 063D                        11            .byte	$11
01899 063E                        12            .byte	$12
01900 063F                        13            .byte	$13
01901 0640                        14            .byte	$14
01902 0641                        15            .byte	$15
01903 0642                        16            .byte	$16
01904 0643                        17            .byte	$17
01905                                           ! 624  0x01, 0x00, 0x0f, 0x00,
01906 0644                        01            .byte	1
01907 0645                        00            .byte	0
01908 0646                        0F            .byte	$F
01909 0647                        00            .byte	0
01910                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01911 0648                        00            .byte	0
01912 0649                        00            .byte	0
01913 064A                        00            .byte	0
01914 064B                        00            .byte	0
01915 064C                        00            .byte	0
01916 064D                        00            .byte	0
01917 064E                        05            .byte	5
01918 064F                        0F            .byte	$F
01919 0650                        FF            .byte	$FF
01920                                           ! 626 },
01921                                           ! 627 {
01922                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01923 0651                        00            .byte	0
01924 0652                        00            .byte	0
01925 0653                        00            .byte	0
01926 0654                        00            .byte	0
01927 0655                        00            .byte	0
01928 0656                        00            .byte	0
01929 0657                        00            .byte	0
01930 0658                        00            .byte	0
01931                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
01932 0659                        00            .byte	0
01933 065A                        00            .byte	0
01934 065B                        00            .byte	0
01935 065C                        00            .byte	0
01936 065D                        00            .byte	0
01937 065E                        00            .byte	0
01938                                           ! 629 0x00, 0x00,
01939 065F                        00            .byte	0
01940 0660                        00            .byte	0
01941                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 0661                        00            .byte	0
01943 0662                        00            .byte	0
01944 0663                        00            .byte	0
01945 0664                        00            .byte	0
01946 0665                        00            .byte	0
01947 0666                        00            .byte	0
01948 0667                        00            .byte	0
01949 0668                        00            .byte	0
01950                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0669                        00            .byte	0
01952 066A                        00            .byte	0
01953 066B                        00            .byte	0
01954 066C                        00            .byte	0
01955 066D                        00            .byte	0
01956 066E                        00            .byte	0
01957 066F                        00            .byte	0
01958 0670                        00            .byte	0
01959                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 0671                        00            .byte	0
01961 0672                        00            .byte	0
01962 0673                        00            .byte	0
01963 0674                        00            .byte	0
01964 0675                        00            .byte	0
01965 0676                        00            .byte	0
01966 0677                        00            .byte	0
01967 0678                        00            .byte	0
01968                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0679                        00            .byte	0
01970 067A                        00            .byte	0
01971 067B                        00            .byte	0
01972 067C                        00            .byte	0
01973 067D                        00            .byte	0
01974 067E                        00            .byte	0
01975 067F                        00            .byte	0
01976 0680                        00            .byte	0
01977                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 0681                        00            .byte	0
01979 0682                        00            .byte	0
01980 0683                        00            .byte	0
01981 0684                        00            .byte	0
01982 0685                        00            .byte	0
01983 0686                        00            .byte	0
01984 0687                        00            .byte	0
01985 0688                        00            .byte	0
01986                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0689                        00            .byte	0
01988 068A                        00            .byte	0
01989 068B                        00            .byte	0
01990 068C                        00            .byte	0
01991 068D                        00            .byte	0
01992 068E                        00            .byte	0
01993 068F                        00            .byte	0
01994 0690                        00            .byte	0
01995                                           ! 636 },
01996                                           ! 637 {
01997                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 0691                        00            .byte	0
01999 0692                        00            .byte	0
02000 0693                        00            .byte	0
02001 0694                        00            .byte	0
02002 0695                        00            .byte	0
02003 0696                        00            .byte	0
02004 0697                        00            .byte	0
02005 0698                        00            .byte	0
02006                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0699                        00            .byte	0
02008 069A                        00            .byte	0
02009 069B                        00            .byte	0
02010 069C                        00            .byte	0
02011 069D                        00            .byte	0
02012 069E                        00            .byte	0
02013 069F                        00            .byte	0
02014 06A0                        00            .byte	0
02015                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 06A1                        00            .byte	0
02017 06A2                        00            .byte	0
02018 06A3                        00            .byte	0
02019 06A4                        00            .byte	0
02020 06A5                        00            .byte	0
02021 06A6                        00            .byte	0
02022 06A7                        00            .byte	0
02023 06A8                        00            .byte	0
02024                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06A9                        00            .byte	0
02026 06AA                        00            .byte	0
02027 06AB                        00            .byte	0
02028 06AC                        00            .byte	0
02029 06AD                        00            .byte	0
02030 06AE                        00            .byte	0
02031 06AF                        00            .byte	0
02032 06B0                        00            .byte	0
02033                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06B1                        00            .byte	0
02035 06B2                        00            .byte	0
02036 06B3                        00            .byte	0
02037 06B4                        00            .byte	0
02038 06B5                        00            .byte	0
02039 06B6                        00            .byte	0
02040 06B7                        00            .byte	0
02041 06B8                        00            .byte	0
02042                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06B9                        00            .byte	0
02044 06BA                        00            .byte	0
02045 06BB                        00            .byte	0
02046 06BC                        00            .byte	0
02047 06BD                        00            .byte	0
02048 06BE                        00            .byte	0
02049 06BF                        00            .byte	0
02050 06C0                        00            .byte	0
02051                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06C1                        00            .byte	0
02053 06C2                        00            .byte	0
02054 06C3                        00            .byte	0
02055 06C4                        00            .byte	0
02056 06C5                        00            .byte	0
02057 06C6                        00            .byte	0
02058 06C7                        00            .byte	0
02059 06C8                        00            .byte	0
02060                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06C9                        00            .byte	0
02062 06CA                        00            .byte	0
02063 06CB                        00            .byte	0
02064 06CC                        00            .byte	0
02065 06CD                        00            .byte	0
02066 06CE                        00            .byte	0
02067 06CF                        00            .byte	0
02068 06D0                        00            .byte	0
02069                                           ! 646 },
02070                                           ! 647 {
02071                                           ! 648  80, 24, 14, 0x00, 0x80,
02072 06D1                        50            .byte	$50
02073 06D2                        18            .byte	$18
02074 06D3                        0E            .byte	$E
02075 06D4                        00            .byte	0
02076 06D5                        80            .byte	$80
02077                                           ! 649  0x01, 0x0f, 0x00, 0x06,
02078 06D6                        01            .byte	1
02079 06D7                        0F            .byte	$F
02080 06D8                        00            .byte	0
02081 06D9                        06            .byte	6
02082                                           ! 650  0xa3,
02083 06DA                        A3            .byte	$A3
02084                                           ! 651  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06DB                        5F            .byte	$5F
02086 06DC                        4F            .byte	$4F
02087 06DD                        50            .byte	$50
02088 06DE                        82            .byte	$82
02089 06DF                        54            .byte	$54
02090 06E0                        80            .byte	$80
02091 06E1                        BF            .byte	$BF
02092 06E2                        1F            .byte	$1F
02093                                           ! 652  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06E3                        00            .byte	0
02095 06E4                        40            .byte	$40
02096 06E5                        00            .byte	0
02097 06E6                        00            .byte	0
02098 06E7                        00            .byte	0
02099 06E8                        00            .byte	0
02100 06E9                        00            .byte	0
02101 06EA                        00            .byte	0
02102                                           ! 653  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06EB                        83            .byte	$83
02104 06EC                        85            .byte	$85
02105 06ED                        5D            .byte	$5D
02106 06EE                        28            .byte	$28
02107 06EF                        0F            .byte	$F
02108 06F0                        63            .byte	$63
02109 06F1                        BA            .byte	$BA
02110 06F2                        E3            .byte	$E3
02111                                           ! 654  0xff,
02112 06F3                        FF            .byte	$FF
02113                                           ! 655  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 06F4                        00            .byte	0
02115 06F5                        08            .byte	8
02116 06F6                        00            .byte	0
02117 06F7                        00            .byte	0
02118 06F8                        18            .byte	$18
02119 06F9                        18            .byte	$18
02120 06FA                        00            .byte	0
02121 06FB                        00            .byte	0
02122                                           ! 656  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 06FC                        00            .byte	0
02124 06FD                        08            .byte	8
02125 06FE                        00            .byte	0
02126 06FF                        00            .byte	0
02127 0700                        00            .byte	0
02128 0701                        18            .byte	$18
02129 0702                        00            .byte	0
02130 0703                        00            .byte	0
02131                                           ! 657  0x01, 0x00, 0x01, 0x00,
02132 0704                        01            .byte	1
02133 0705                        00            .byte	0
02134 0706                        01            .byte	1
02135 0707                        00            .byte	0
02136                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 0708                        00            .byte	0
02138 0709                        00            .byte	0
02139 070A                        00            .byte	0
02140 070B                        00            .byte	0
02141 070C                        00            .byte	0
02142 070D                        00            .byte	0
02143 070E                        05            .byte	5
02144 070F                        0F            .byte	$F
02145 0710                        FF            .byte	$FF
02146                                           ! 659 },
02147                                           ! 660 {
02148                                           ! 661  80, 24, 14, 0x00, 0x80,
02149 0711                        50            .byte	$50
02150 0712                        18            .byte	$18
02151 0713                        0E            .byte	$E
02152 0714                        00            .byte	0
02153 0715                        80            .byte	$80
02154                                           ! 662  0x01, 0x0f, 0x00, 0x06,
02155 0716                        01            .byte	1
02156 0717                        0F            .byte	$F
02157 0718                        00            .byte	0
02158 0719                        06            .byte	6
02159                                           ! 663  0xa3,
02160 071A                        A3            .byte	$A3
02161                                           ! 664  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 071B                        5F            .byte	$5F
02163 071C                        4F            .byte	$4F
02164 071D                        50            .byte	$50
02165 071E                        82            .byte	$82
02166 071F                        54            .byte	$54
02167 0720                        80            .byte	$80
02168 0721                        BF            .byte	$BF
02169 0722                        1F            .byte	$1F
02170                                           ! 665  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 0723                        00            .byte	0
02172 0724                        40            .byte	$40
02173 0725                        00            .byte	0
02174 0726                        00            .byte	0
02175 0727                        00            .byte	0
02176 0728                        00            .byte	0
02177 0729                        00            .byte	0
02178 072A                        00            .byte	0
02179                                           ! 666  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 072B                        83            .byte	$83
02181 072C                        85            .byte	$85
02182 072D                        5D            .byte	$5D
02183 072E                        28            .byte	$28
02184 072F                        0F            .byte	$F
02185 0730                        63            .byte	$63
02186 0731                        BA            .byte	$BA
02187 0732                        E3            .byte	$E3
02188                                           ! 667  0xff,
02189 0733                        FF            .byte	$FF
02190                                           ! 668  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 0734                        00            .byte	0
02192 0735                        01            .byte	1
02193 0736                        02            .byte	2
02194 0737                        03            .byte	3
02195 0738                        04            .byte	4
02196 0739                        05            .byte	5
02197 073A                        14            .byte	$14
02198 073B                        07            .byte	7
02199                                           ! 669  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 073C                        38            .byte	$38
02201 073D                        39            .byte	$39
02202 073E                        3A            .byte	$3A
02203 073F                        3B            .byte	$3B
02204 0740                        3C            .byte	$3C
02205 0741                        3D            .byte	$3D
02206 0742                        3E            .byte	$3E
02207 0743                        3F            .byte	$3F
02208                                           ! 670  0x01, 0x00, 0x0f, 0x00,
02209 0744                        01            .byte	1
02210 0745                        00            .byte	0
02211 0746                        0F            .byte	$F
02212 0747                        00            .byte	0
02213                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 0748                        00            .byte	0
02215 0749                        00            .byte	0
02216 074A                        00            .byte	0
02217 074B                        00            .byte	0
02218 074C                        00            .byte	0
02219 074D                        00            .byte	0
02220 074E                        05            .byte	5
02221 074F                        0F            .byte	$F
02222 0750                        FF            .byte	$FF
02223                                           ! 672 },
02224                                           ! 673 {
02225                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 0751                        00            .byte	0
02227 0752                        00            .byte	0
02228 0753                        00            .byte	0
02229 0754                        00            .byte	0
02230 0755                        00            .byte	0
02231 0756                        00            .byte	0
02232 0757                        00            .byte	0
02233 0758                        00            .byte	0
02234                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0759                        00            .byte	0
02236 075A                        00            .byte	0
02237 075B                        00            .byte	0
02238 075C                        00            .byte	0
02239 075D                        00            .byte	0
02240 075E                        00            .byte	0
02241 075F                        00            .byte	0
02242 0760                        00            .byte	0
02243                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 0761                        00            .byte	0
02245 0762                        00            .byte	0
02246 0763                        00            .byte	0
02247 0764                        00            .byte	0
02248 0765                        00            .byte	0
02249 0766                        00            .byte	0
02250 0767                        00            .byte	0
02251 0768                        00            .byte	0
02252                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0769                        00            .byte	0
02254 076A                        00            .byte	0
02255 076B                        00            .byte	0
02256 076C                        00            .byte	0
02257 076D                        00            .byte	0
02258 076E                        00            .byte	0
02259 076F                        00            .byte	0
02260 0770                        00            .byte	0
02261                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 0771                        00            .byte	0
02263 0772                        00            .byte	0
02264 0773                        00            .byte	0
02265 0774                        00            .byte	0
02266 0775                        00            .byte	0
02267 0776                        00            .byte	0
02268 0777                        00            .byte	0
02269 0778                        00            .byte	0
02270                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0779                        00            .byte	0
02272 077A                        00            .byte	0
02273 077B                        00            .byte	0
02274 077C                        00            .byte	0
02275 077D                        00            .byte	0
02276 077E                        00            .byte	0
02277 077F                        00            .byte	0
02278 0780                        00            .byte	0
02279                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 0781                        00            .byte	0
02281 0782                        00            .byte	0
02282 0783                        00            .byte	0
02283 0784                        00            .byte	0
02284 0785                        00            .byte	0
02285 0786                        00            .byte	0
02286 0787                        00            .byte	0
02287 0788                        00            .byte	0
02288                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0789                        00            .byte	0
02290 078A                        00            .byte	0
02291 078B                        00            .byte	0
02292 078C                        00            .byte	0
02293 078D                        00            .byte	0
02294 078E                        00            .byte	0
02295 078F                        00            .byte	0
02296 0790                        00            .byte	0
02297                                           ! 682 },
02298                                           ! 683 {
02299                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 0791                        00            .byte	0
02301 0792                        00            .byte	0
02302 0793                        00            .byte	0
02303 0794                        00            .byte	0
02304 0795                        00            .byte	0
02305 0796                        00            .byte	0
02306 0797                        00            .byte	0
02307 0798                        00            .byte	0
02308                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02309 0799                        00            .byte	0
02310 079A                        00            .byte	0
02311 079B                        00            .byte	0
02312 079C                        00            .byte	0
02313 079D                        00            .byte	0
02314 079E                        00            .byte	0
02315 079F                        00            .byte	0
02316 07A0                        00            .byte	0
02317                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02318 07A1                        00            .byte	0
02319 07A2                        00            .byte	0
02320 07A3                        00            .byte	0
02321 07A4                        00            .byte	0
02322 07A5                        00            .byte	0
02323 07A6                        00            .byte	0
02324 07A7                        00            .byte	0
02325 07A8                        00            .byte	0
02326                                           ! 687  0x00, 0
02327 07A9                        00            .byte	0
02328                                           ! 687 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02329 07AA                        00            .byte	0
02330 07AB                        00            .byte	0
02331 07AC                        00            .byte	0
02332 07AD                        00            .byte	0
02333 07AE                        00            .byte	0
02334 07AF                        00            .byte	0
02335 07B0                        00            .byte	0
02336                                           ! 688  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07B1                        00            .byte	0
02338 07B2                        00            .byte	0
02339 07B3                        00            .byte	0
02340 07B4                        00            .byte	0
02341 07B5                        00            .byte	0
02342 07B6                        00            .byte	0
02343 07B7                        00            .byte	0
02344 07B8                        00            .byte	0
02345                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07B9                        00            .byte	0
02347 07BA                        00            .byte	0
02348 07BB                        00            .byte	0
02349 07BC                        00            .byte	0
02350 07BD                        00            .byte	0
02351 07BE                        00            .byte	0
02352 07BF                        00            .byte	0
02353 07C0                        00            .byte	0
02354                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07C1                        00            .byte	0
02356 07C2                        00            .byte	0
02357 07C3                        00            .byte	0
02358 07C4                        00            .byte	0
02359 07C5                        00            .byte	0
02360 07C6                        00            .byte	0
02361 07C7                        00            .byte	0
02362 07C8                        00            .byte	0
02363                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07C9                        00            .byte	0
02365 07CA                        00            .byte	0
02366 07CB                        00            .byte	0
02367 07CC                        00            .byte	0
02368 07CD                        00            .byte	0
02369 07CE                        00            .byte	0
02370 07CF                        00            .byte	0
02371 07D0                        00            .byte	0
02372                                           ! 692 },
02373                                           ! 693 {
02374                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07D1                        00            .byte	0
02376 07D2                        00            .byte	0
02377 07D3                        00            .byte	0
02378 07D4                        00            .byte	0
02379 07D5                        00            .byte	0
02380 07D6                        00            .byte	0
02381 07D7                        00            .byte	0
02382 07D8                        00            .byte	0
02383                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07D9                        00            .byte	0
02385 07DA                        00            .byte	0
02386 07DB                        00            .byte	0
02387 07DC                        00            .byte	0
02388 07DD                        00            .byte	0
02389 07DE                        00            .byte	0
02390 07DF                        00            .byte	0
02391 07E0                        00            .byte	0
02392                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07E1                        00            .byte	0
02394 07E2                        00            .byte	0
02395 07E3                        00            .byte	0
02396 07E4                        00            .byte	0
02397 07E5                        00            .byte	0
02398 07E6                        00            .byte	0
02399 07E7                        00            .byte	0
02400 07E8                        00            .byte	0
02401                                           ! 697  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07E9                        00            .byte	0
02403 07EA                        00            .byte	0
02404 07EB                        00            .byte	0
02405 07EC                        00            .byte	0
02406 07ED                        00            .byte	0
02407 07EE                        00            .byte	0
02408 07EF                        00            .byte	0
02409 07F0                        00            .byte	0
02410                                           ! 698  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07F1                        00            .byte	0
02412 07F2                        00            .byte	0
02413 07F3                        00            .byte	0
02414 07F4                        00            .byte	0
02415 07F5                        00            .byte	0
02416 07F6                        00            .byte	0
02417 07F7                        00            .byte	0
02418 07F8                        00            .byte	0
02419                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 07F9                        00            .byte	0
02421 07FA                        00            .byte	0
02422 07FB                        00            .byte	0
02423 07FC                        00            .byte	0
02424 07FD                        00            .byte	0
02425 07FE                        00            .byte	0
02426 07FF                        00            .byte	0
02427 0800                        00            .byte	0
02428                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 0801                        00            .byte	0
02430 0802                        00            .byte	0
02431 0803                        00            .byte	0
02432 0804                        00            .byte	0
02433 0805                        00            .byte	0
02434 0806                        00            .byte	0
02435 0807                        00            .byte	0
02436 0808                        00            .byte	0
02437                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0809                        00            .byte	0
02439 080A                        00            .byte	0
02440 080B                        00            .byte	0
02441 080C                        00            .byte	0
02442 080D                        00            .byte	0
02443 080E                        00            .byte	0
02444 080F                        00            .byte	0
02445 0810                        00            .byte	0
02446                                           ! 702 },
02447                                           ! 703 {
02448                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 0811                        00            .byte	0
02450 0812                        00            .byte	0
02451 0813                        00            .byte	0
02452 0814                        00            .byte	0
02453 0815                        00            .byte	0
02454 0816                        00            .byte	0
02455 0817                        00            .byte	0
02456 0818                        00            .byte	0
02457                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0819                        00            .byte	0
02459 081A                        00            .byte	0
02460 081B                        00            .byte	0
02461 081C                        00            .byte	0
02462 081D                        00            .byte	0
02463 081E                        00            .byte	0
02464 081F                        00            .byte	0
02465 0820                        00            .byte	0
02466                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 0821                        00            .byte	0
02468 0822                        00            .byte	0
02469 0823                        00            .byte	0
02470 0824                        00            .byte	0
02471 0825                        00            .byte	0
02472 0826                        00            .byte	0
02473 0827                        00            .byte	0
02474 0828                        00            .byte	0
02475                                           ! 707  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0829                        00            .byte	0
02477 082A                        00            .byte	0
02478 082B                        00            .byte	0
02479 082C                        00            .byte	0
02480 082D                        00            .byte	0
02481 082E                        00            .byte	0
02482 082F                        00            .byte	0
02483 0830                        00            .byte	0
02484                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 0831                        00            .byte	0
02486 0832                        00            .byte	0
02487 0833                        00            .byte	0
02488 0834                        00            .byte	0
02489 0835                        00            .byte	0
02490 0836                        00            .byte	0
02491 0837                        00            .byte	0
02492 0838                        00            .byte	0
02493                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0839                        00            .byte	0
02495 083A                        00            .byte	0
02496 083B                        00            .byte	0
02497 083C                        00            .byte	0
02498 083D                        00            .byte	0
02499 083E                        00            .byte	0
02500 083F                        00            .byte	0
02501 0840                        00            .byte	0
02502                                           ! 710  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 0841                        00            .byte	0
02504 0842                        00            .byte	0
02505 0843                        00            .byte	0
02506 0844                        00            .byte	0
02507 0845                        00            .byte	0
02508 0846                        00            .byte	0
02509 0847                        00            .byte	0
02510 0848                        00            .byte	0
02511                                           ! 711  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0849                        00            .byte	0
02513 084A                        00            .byte	0
02514 084B                        00            .byte	0
02515 084C                        00            .byte	0
02516 084D                        00            .byte	0
02517 084E                        00            .byte	0
02518 084F                        00            .byte	0
02519 0850                        00            .byte	0
02520                                           ! 712 },
02521                                           ! 713 {
02522                                           ! 714  40, 24, 16, 0x00, 0x08,
02523 0851                        28            .byte	$28
02524 0852                        18            .byte	$18
02525 0853                        10            .byte	$10
02526 0854                        00            .byte	0
02527 0855                        08            .byte	8
02528                                           ! 715  0x08, 0x03, 0x00, 0x02,
02529 0856                        08            .byte	8
02530 0857                        03            .byte	3
02531 0858                        00            .byte	0
02532 0859                        02            .byte	2
02533                                           ! 716  0x67,
02534 085A                        67            .byte	$67
02535                                           ! 717  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 085B                        2D            .byte	$2D
02537 085C                        27            .byte	$27
02538 085D                        28            .byte	$28
02539 085E                        90            .byte	$90
02540 085F                        2B            .byte	$2B
02541 0860                        A0            .byte	$A0
02542 0861                        BF            .byte	$BF
02543 0862                        1F            .byte	$1F
02544                                           ! 718  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 0863                        00            .byte	0
02546 0864                        4F            .byte	$4F
02547 0865                        0D            .byte	$D
02548 0866                        0E            .byte	$E
02549 0867                        00            .byte	0
02550 0868                        00            .byte	0
02551 0869                        00            .byte	0
02552 086A                        00            .byte	0
02553                                           ! 719  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 086B                        9C            .byte	$9C
02555 086C                        8E            .byte	$8E
02556 086D                        8F            .byte	$8F
02557 086E                        14            .byte	$14
02558 086F                        1F            .byte	$1F
02559 0870                        96            .byte	$96
02560 0871                        B9            .byte	$B9
02561 0872                        A3            .byte	$A3
02562                                           ! 720  0xff,
02563 0873                        FF            .byte	$FF
02564                                           ! 721  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 0874                        00            .byte	0
02566 0875                        01            .byte	1
02567 0876                        02            .byte	2
02568 0877                        03            .byte	3
02569 0878                        04            .byte	4
02570 0879                        05            .byte	5
02571 087A                        14            .byte	$14
02572 087B                        07            .byte	7
02573                                           ! 722  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 087C                        38            .byte	$38
02575 087D                        39            .byte	$39
02576 087E                        3A            .byte	$3A
02577 087F                        3B            .byte	$3B
02578 0880                        3C            .byte	$3C
02579 0881                        3D            .byte	$3D
02580 0882                        3E            .byte	$3E
02581 0883                        3F            .byte	$3F
02582                                           ! 723  0x0c, 0x00, 0x0f, 0x08,
02583 0884                        0C            .byte	$C
02584 0885                        00            .byte	0
02585 0886                        0F            .byte	$F
02586 0887                        08            .byte	8
02587                                           ! 724  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 0888                        00            .byte	0
02589 0889                        00            .byte	0
02590 088A                        00            .byte	0
02591 088B                        00            .byte	0
02592 088C                        00            .byte	0
02593 088D                        10            .byte	$10
02594 088E                        0E            .byte	$E
02595 088F                        0F            .byte	$F
02596 0890                        FF            .byte	$FF
02597                                           ! 725 },
02598                                           ! 726 {
02599                                           ! 727  80, 24, 16, 0x00, 0x10,
02600 0891                        50            .byte	$50
02601 0892                        18            .byte	$18
02602 0893                        10            .byte	$10
02603 0894                        00            .byte	0
02604 0895                        10            .byte	$10
02605                                           ! 728  0x00, 0x03, 0x00, 0x02,
02606 0896                        00            .byte	0
02607 0897                        03            .byte	3
02608 0898                        00            .byte	0
02609 0899                        02            .byte	2
02610                                           ! 729  0x67,
02611 089A                        67            .byte	$67
02612                                           ! 730  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 089B                        5F            .byte	$5F
02614 089C                        4F            .byte	$4F
02615 089D                        50            .byte	$50
02616 089E                        82            .byte	$82
02617 089F                        55            .byte	$55
02618 08A0                        81            .byte	$81
02619 08A1                        BF            .byte	$BF
02620 08A2                        1F            .byte	$1F
02621                                           ! 731  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 08A3                        00            .byte	0
02623 08A4                        4F            .byte	$4F
02624 08A5                        0D            .byte	$D
02625 08A6                        0E            .byte	$E
02626 08A7                        00            .byte	0
02627 08A8                        00            .byte	0
02628 08A9                        00            .byte	0
02629 08AA                        00            .byte	0
02630                                           ! 732  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08AB                        9C            .byte	$9C
02632 08AC                        8E            .byte	$8E
02633 08AD                        8F            .byte	$8F
02634 08AE                        28            .byte	$28
02635 08AF                        1F            .byte	$1F
02636 08B0                        96            .byte	$96
02637 08B1                        B9            .byte	$B9
02638 08B2                        A3            .byte	$A3
02639                                           ! 733  0xff,
02640 08B3                        FF            .byte	$FF
02641                                           ! 734  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08B4                        00            .byte	0
02643 08B5                        01            .byte	1
02644 08B6                        02            .byte	2
02645 08B7                        03            .byte	3
02646 08B8                        04            .byte	4
02647 08B9                        05            .byte	5
02648 08BA                        14            .byte	$14
02649 08BB                        07            .byte	7
02650                                           ! 735  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08BC                        38            .byte	$38
02652 08BD                        39            .byte	$39
02653 08BE                        3A            .byte	$3A
02654 08BF                        3B            .byte	$3B
02655 08C0                        3C            .byte	$3C
02656 08C1                        3D            .byte	$3D
02657 08C2                        3E            .byte	$3E
02658 08C3                        3F            .byte	$3F
02659                                           ! 736  0x0c, 0x00, 0x0f, 0x08,
02660 08C4                        0C            .byte	$C
02661 08C5                        00            .byte	0
02662 08C6                        0F            .byte	$F
02663 08C7                        08            .byte	8
02664                                           ! 737  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08C8                        00            .byte	0
02666 08C9                        00            .byte	0
02667 08CA                        00            .byte	0
02668 08CB                        00            .byte	0
02669 08CC                        00            .byte	0
02670 08CD                        10            .byte	$10
02671 08CE                        0E            .byte	$E
02672 08CF                        0F            .byte	$F
02673 08D0                        FF            .byte	$FF
02674                                           ! 738 },
02675                                           ! 739 {
02676                                           ! 740  80, 24, 16, 0x00, 0x10,
02677 08D1                        50            .byte	$50
02678 08D2                        18            .byte	$18
02679 08D3                        10            .byte	$10
02680 08D4                        00            .byte	0
02681 08D5                        10            .byte	$10
02682                                           ! 741  0x00, 0x03, 0x00, 0x02,
02683 08D6                        00            .byte	0
02684 08D7                        03            .byte	3
02685 08D8                        00            .byte	0
02686 08D9                        02            .byte	2
02687                                           ! 742  0x66,
02688 08DA                        66            .byte	$66
02689                                           ! 743  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08DB                        5F            .byte	$5F
02691 08DC                        4F            .byte	$4F
02692 08DD                        50            .byte	$50
02693 08DE                        82            .byte	$82
02694 08DF                        55            .byte	$55
02695 08E0                        81            .byte	$81
02696 08E1                        BF            .byte	$BF
02697 08E2                        1F            .byte	$1F
02698                                           ! 744  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02699 08E3                        00            .byte	0
02700 08E4                        4F            .byte	$4F
02701 08E5                        0D            .byte	$D
02702 08E6                        0E            .byte	$E
02703 08E7                        00            .byte	0
02704 08E8                        00            .byte	0
02705 08E9                        00            .byte	0
02706 08EA                        00            .byte	0
02707                                           ! 745  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02708 08EB                        9C            .byte	$9C
02709 08EC                        8E            .byte	$8E
02710 08ED                        8F            .byte	$8F
02711 08EE                        28            .byte	$28
02712 08EF                        0F            .byte	$F
02713 08F0                        96            .byte	$96
02714 08F1                        B9            .byte	$B9
02715 08F2                        A3            .byte	$A3
02716                                           ! 746  0xff,
02717 08F3                        FF            .byte	$FF
02718                                           ! 747  0x00, 0x08, 
02719 08F4                        00            .byte	0
02720 08F5                        08            .byte	8
02721                                           ! 747 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02722 08F6                        08            .byte	8
02723 08F7                        08            .byte	8
02724 08F8                        08            .byte	8
02725 08F9                        08            .byte	8
02726 08FA                        08            .byte	8
02727 08FB                        08            .byte	8
02728                                           ! 748  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 08FC                        10            .byte	$10
02730 08FD                        18            .byte	$18
02731 08FE                        18            .byte	$18
02732 08FF                        18            .byte	$18
02733 0900                        18            .byte	$18
02734 0901                        18            .byte	$18
02735 0902                        18            .byte	$18
02736 0903                        18            .byte	$18
02737                                           ! 749  0x0e, 0x00, 0x0f, 0x08,
02738 0904                        0E            .byte	$E
02739 0905                        00            .byte	0
02740 0906                        0F            .byte	$F
02741 0907                        08            .byte	8
02742                                           ! 750  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 0908                        00            .byte	0
02744 0909                        00            .byte	0
02745 090A                        00            .byte	0
02746 090B                        00            .byte	0
02747 090C                        00            .byte	0
02748 090D                        10            .byte	$10
02749 090E                        0A            .byte	$A
02750 090F                        0F            .byte	$F
02751 0910                        FF            .byte	$FF
02752                                           ! 751 },
02753                                           ! 752 {
02754                                           ! 753  80, 29, 16, 0x00, 0x00,
02755 0911                        50            .byte	$50
02756 0912                        1D            .byte	$1D
02757 0913                        10            .byte	$10
02758 0914                        00            .byte	0
02759 0915                        00            .byte	0
02760                                           ! 754  0x01, 0x0f, 0x00, 0x06,
02761 0916                        01            .byte	1
02762 0917                        0F            .byte	$F
02763 0918                        00            .byte	0
02764 0919                        06            .byte	6
02765                                           ! 755  0xe3,
02766 091A                        E3            .byte	$E3
02767                                           ! 756  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 091B                        5F            .byte	$5F
02769 091C                        4F            .byte	$4F
02770 091D                        50            .byte	$50
02771 091E                        82            .byte	$82
02772 091F                        54            .byte	$54
02773 0920                        80            .byte	$80
02774 0921                        0B            .byte	$B
02775 0922                        3E            .byte	$3E
02776                                           ! 757  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 0923                        00            .byte	0
02778 0924                        40            .byte	$40
02779 0925                        00            .byte	0
02780 0926                        00            .byte	0
02781 0927                        00            .byte	0
02782 0928                        00            .byte	0
02783 0929                        00            .byte	0
02784 092A                        00            .byte	0
02785                                           ! 758  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 092B                        EA            .byte	$EA
02787 092C                        8C            .byte	$8C
02788 092D                        DF            .byte	$DF
02789 092E                        28            .byte	$28
02790 092F                        00            .byte	0
02791 0930                        E7            .byte	$E7
02792 0931                        04            .byte	4
02793 0932                        E3            .byte	$E3
02794                                           ! 759  0xff,
02795 0933                        FF            .byte	$FF
02796                                           ! 760  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 0934                        00            .byte	0
02798 0935                        3F            .byte	$3F
02799 0936                        00            .byte	0
02800 0937                        3F            .byte	$3F
02801 0938                        00            .byte	0
02802 0939                        3F            .byte	$3F
02803 093A                        00            .byte	0
02804 093B                        3F            .byte	$3F
02805                                           ! 761  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 093C                        00            .byte	0
02807 093D                        3F            .byte	$3F
02808 093E                        00            .byte	0
02809 093F                        3F            .byte	$3F
02810 0940                        00            .byte	0
02811 0941                        3F            .byte	$3F
02812 0942                        00            .byte	0
02813 0943                        3F            .byte	$3F
02814                                           ! 762  0x01, 0x00, 0x0f, 0x00,
02815 0944                        01            .byte	1
02816 0945                        00            .byte	0
02817 0946                        0F            .byte	$F
02818 0947                        00            .byte	0
02819                                           ! 763  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 0948                        00            .byte	0
02821 0949                        00            .byte	0
02822 094A                        00            .byte	0
02823 094B                        00            .byte	0
02824 094C                        00            .byte	0
02825 094D                        00            .byte	0
02826 094E                        05            .byte	5
02827 094F                        0F            .byte	$F
02828 0950                        FF            .byte	$FF
02829                                           ! 764 },
02830                                           ! 765 {
02831                                           ! 766  80, 29, 16, 0x00, 0x00,
02832 0951                        50            .byte	$50
02833 0952                        1D            .byte	$1D
02834 0953                        10            .byte	$10
02835 0954                        00            .byte	0
02836 0955                        00            .byte	0
02837                                           ! 767  0x01, 0x0f, 0x00, 0x06,
02838 0956                        01            .byte	1
02839 0957                        0F            .byte	$F
02840 0958                        00            .byte	0
02841 0959                        06            .byte	6
02842                                           ! 768  0xe3,
02843 095A                        E3            .byte	$E3
02844                                           ! 769  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 095B                        5F            .byte	$5F
02846 095C                        4F            .byte	$4F
02847 095D                        50            .byte	$50
02848 095E                        82            .byte	$82
02849 095F                        54            .byte	$54
02850 0960                        80            .byte	$80
02851 0961                        0B            .byte	$B
02852 0962                        3E            .byte	$3E
02853                                           ! 770  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 0963                        00            .byte	0
02855 0964                        40            .byte	$40
02856 0965                        00            .byte	0
02857 0966                        00            .byte	0
02858 0967                        00            .byte	0
02859 0968                        00            .byte	0
02860 0969                        00            .byte	0
02861 096A                        00            .byte	0
02862                                           ! 771  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 096B                        EA            .byte	$EA
02864 096C                        8C            .byte	$8C
02865 096D                        DF            .byte	$DF
02866 096E                        28            .byte	$28
02867 096F                        00            .byte	0
02868 0970                        E7            .byte	$E7
02869 0971                        04            .byte	4
02870 0972                        E3            .byte	$E3
02871                                           ! 772  0xff,
02872 0973                        FF            .byte	$FF
02873                                           ! 773  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 0974                        00            .byte	0
02875 0975                        01            .byte	1
02876 0976                        02            .byte	2
02877 0977                        03            .byte	3
02878 0978                        04            .byte	4
02879 0979                        05            .byte	5
02880 097A                        14            .byte	$14
02881 097B                        07            .byte	7
02882                                           ! 774  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 097C                        38            .byte	$38
02884 097D                        39            .byte	$39
02885 097E                        3A            .byte	$3A
02886 097F                        3B            .byte	$3B
02887 0980                        3C            .byte	$3C
02888 0981                        3D            .byte	$3D
02889 0982                        3E            .byte	$3E
02890 0983                        3F            .byte	$3F
02891                                           ! 775  0x01, 0x00, 0x0f, 0x00,
02892 0984                        01            .byte	1
02893 0985                        00            .byte	0
02894 0986                        0F            .byte	$F
02895 0987                        00            .byte	0
02896                                           ! 776  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 0988                        00            .byte	0
02898 0989                        00            .byte	0
02899 098A                        00            .byte	0
02900 098B                        00            .byte	0
02901 098C                        00            .byte	0
02902 098D                        00            .byte	0
02903 098E                        05            .byte	5
02904 098F                        0F            .byte	$F
02905 0990                        FF            .byte	$FF
02906                                           ! 777 },
02907                                           ! 778 {
02908                                           ! 779  40, 24, 8, 0x00, 0x00,
02909 0991                        28            .byte	$28
02910 0992                        18            .byte	$18
02911 0993                        08            .byte	8
02912 0994                        00            .byte	0
02913 0995                        00            .byte	0
02914                                           ! 780  0x01, 0x0f, 0x00, 0x0e,
02915 0996                        01            .byte	1
02916 0997                        0F            .byte	$F
02917 0998                        00            .byte	0
02918 0999                        0E            .byte	$E
02919                                           ! 781  0x63,
02920 099A                        63            .byte	$63
02921                                           ! 782  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 099B                        5F            .byte	$5F
02923 099C                        4F            .byte	$4F
02924 099D                        50            .byte	$50
02925 099E                        82            .byte	$82
02926 099F                        54            .byte	$54
02927 09A0                        80            .byte	$80
02928 09A1                        BF            .byte	$BF
02929 09A2                        1F            .byte	$1F
02930                                           ! 783  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 09A3                        00            .byte	0
02932 09A4                        41            .byte	$41
02933 09A5                        00            .byte	0
02934 09A6                        00            .byte	0
02935 09A7                        00            .byte	0
02936 09A8                        00            .byte	0
02937 09A9                        00            .byte	0
02938 09AA                        00            .byte	0
02939                                           ! 784  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09AB                        9C            .byte	$9C
02941 09AC                        8E            .byte	$8E
02942 09AD                        8F            .byte	$8F
02943 09AE                        28            .byte	$28
02944 09AF                        40            .byte	$40
02945 09B0                        96            .byte	$96
02946 09B1                        B9            .byte	$B9
02947 09B2                        A3            .byte	$A3
02948                                           ! 785  0xff,
02949 09B3                        FF            .byte	$FF
02950                                           ! 786  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09B4                        00            .byte	0
02952 09B5                        01            .byte	1
02953 09B6                        02            .byte	2
02954 09B7                        03            .byte	3
02955 09B8                        04            .byte	4
02956 09B9                        05            .byte	5
02957 09BA                        06            .byte	6
02958 09BB                        07            .byte	7
02959                                           ! 787  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09BC                        08            .byte	8
02961 09BD                        09            .byte	9
02962 09BE                        0A            .byte	$A
02963 09BF                        0B            .byte	$B
02964 09C0                        0C            .byte	$C
02965 09C1                        0D            .byte	$D
02966 09C2                        0E            .byte	$E
02967 09C3                        0F            .byte	$F
02968                                           ! 788  0x41, 0x00, 0x0f, 0x00,
02969 09C4                        41            .byte	$41
02970 09C5                        00            .byte	0
02971 09C6                        0F            .byte	$F
02972 09C7                        00            .byte	0
02973                                           ! 789  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09C8                        00            .byte	0
02975 09C9                        00            .byte	0
02976 09CA                        00            .byte	0
02977 09CB                        00            .byte	0
02978 09CC                        00            .byte	0
02979 09CD                        40            .byte	$40
02980 09CE                        05            .byte	5
02981 09CF                        0F            .byte	$F
02982 09D0                        FF            .byte	$FF
02983                                           ! 790 },
02984                                           ! 791 {
02985                                           ! 792  100, 36, 16, 0x00, 0x00,
02986 09D1                        64            .byte	$64
02987 09D2                        24            .byte	$24
02988 09D3                        10            .byte	$10
02989 09D4                        00            .byte	0
02990 09D5                        00            .byte	0
02991                                           ! 793  0x01, 0x0f, 0x00, 0x06,
02992 09D6                        01            .byte	1
02993 09D7                        0F            .byte	$F
02994 09D8                        00            .byte	0
02995 09D9                        06            .byte	6
02996                                           ! 794  0xe3,
02997 09DA                        E3            .byte	$E3
02998                                           ! 795  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09DB                        7F            .byte	$7F
03000 09DC                        63            .byte	$63
03001 09DD                        63            .byte	$63
03002 09DE                        83            .byte	$83
03003 09DF                        6B            .byte	$6B
03004 09E0                        1B            .byte	$1B
03005 09E1                        72            .byte	$72
03006 09E2                        F0            .byte	$F0
03007                                           ! 796  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09E3                        00            .byte	0
03009 09E4                        60            .byte	$60
03010 09E5                        00            .byte	0
03011 09E6                        00            .byte	0
03012 09E7                        00            .byte	0
03013 09E8                        00            .byte	0
03014 09E9                        00            .byte	0
03015 09EA                        00            .byte	0
03016                                           ! 797  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09EB                        59            .byte	$59
03018 09EC                        8D            .byte	$8D
03019 09ED                        57            .byte	$57
03020 09EE                        32            .byte	$32
03021 09EF                        00            .byte	0
03022 09F0                        57            .byte	$57
03023 09F1                        73            .byte	$73
03024 09F2                        E3            .byte	$E3
03025                                           ! 798  0xff,
03026 09F3                        FF            .byte	$FF
03027                                           ! 799  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 09F4                        00            .byte	0
03029 09F5                        01            .byte	1
03030 09F6                        02            .byte	2
03031 09F7                        03            .byte	3
03032 09F8                        04            .byte	4
03033 09F9                        05            .byte	5
03034 09FA                        14            .byte	$14
03035 09FB                        07            .byte	7
03036                                           ! 800  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 09FC                        38            .byte	$38
03038 09FD                        39            .byte	$39
03039 09FE                        3A            .byte	$3A
03040 09FF                        3B            .byte	$3B
03041 0A00                        3C            .byte	$3C
03042 0A01                        3D            .byte	$3D
03043 0A02                        3E            .byte	$3E
03044 0A03                        3F            .byte	$3F
03045                                           ! 801  0x01, 0x00, 0x0f, 0x00,
03046 0A04                        01            .byte	1
03047 0A05                        00            .byte	0
03048 0A06                        0F            .byte	$F
03049 0A07                        00            .byte	0
03050                                           ! 802  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A08                        00            .byte	0
03052 0A09                        00            .byte	0
03053 0A0A                        00            .byte	0
03054 0A0B                        00            .byte	0
03055 0A0C                        00            .byte	0
03056 0A0D                        00            .byte	0
03057 0A0E                        05            .byte	5
03058 0A0F                        0F            .byte	$F
03059 0A10                        FF            .byte	$FF
03060                                           ! 803 },
03061                                           ! 804 };
03062                                           !BCC_EOS
03063                                           ! 805 static Bit8u palette0[63+1][3]=
03064                                           ! 806 {
03065                       00000A11            _palette0:
03066                                           ! 807   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A11                        00            .byte	0
03068 0A12                        00            .byte	0
03069 0A13                        00            .byte	0
03070 0A14                        00            .byte	0
03071 0A15                        00            .byte	0
03072 0A16                        00            .byte	0
03073 0A17                        00            .byte	0
03074 0A18                        00            .byte	0
03075 0A19                        00            .byte	0
03076 0A1A                        00            .byte	0
03077 0A1B                        00            .byte	0
03078 0A1C                        00            .byte	0
03079 0A1D                        00            .byte	0
03080 0A1E                        00            .byte	0
03081 0A1F                        00            .byte	0
03082 0A20                        00            .byte	0
03083 0A21                        00            .byte	0
03084 0A22                        00            .byte	0
03085 0A23                        00            .byte	0
03086 0A24                        00            .byte	0
03087 0A25                        00            .byte	0
03088 0A26                        00            .byte	0
03089 0A27                        00            .byte	0
03090 0A28                        00            .byte	0
03091                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03092 0A29                        2A            .byte	$2A
03093 0A2A                        2A            .byte	$2A
03094 0A2B                        2A            .byte	$2A
03095 0A2C                        2A            .byte	$2A
03096 0A2D                        2A            .byte	$2A
03097 0A2E                        2A            .byte	$2A
03098 0A2F                        2A            .byte	$2A
03099 0A30                        2A            .byte	$2A
03100 0A31                        2A            .byte	$2A
03101 0A32                        2A            .byte	$2A
03102 0A33                        2A            .byte	$2A
03103 0A34                        2A            .byte	$2A
03104 0A35                        2A            .byte	$2A
03105 0A36                        2A            .byte	$2A
03106 0A37                        2A            .byte	$2A
03107 0A38                        2A            .byte	$2A
03108 0A39                        2A            .byte	$2A
03109 0A3A                        2A            .byte	$2A
03110 0A3B                        2A            .byte	$2A
03111 0A3C                        2A            .byte	$2A
03112 0A3D                        2A            .byte	$2A
03113 0A3E                        2A            .byte	$2A
03114 0A3F                        2A            .byte	$2A
03115 0A40                        2A            .byte	$2A
03116                                           ! 809   0x2a,
03117                                           ! 809 0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03118 0A41                        2A            .byte	$2A
03119 0A42                        2A            .byte	$2A
03120 0A43                        2A            .byte	$2A
03121 0A44                        2A            .byte	$2A
03122 0A45                        2A            .byte	$2A
03123 0A46                        2A            .byte	$2A
03124 0A47                        2A            .byte	$2A
03125 0A48                        2A            .byte	$2A
03126 0A49                        2A            .byte	$2A
03127 0A4A                        2A            .byte	$2A
03128 0A4B                        2A            .byte	$2A
03129 0A4C                        2A            .byte	$2A
03130 0A4D                        2A            .byte	$2A
03131 0A4E                        2A            .byte	$2A
03132 0A4F                        2A            .byte	$2A
03133 0A50                        2A            .byte	$2A
03134 0A51                        2A            .byte	$2A
03135 0A52                        2A            .byte	$2A
03136 0A53                        2A            .byte	$2A
03137 0A54                        2A            .byte	$2A
03138 0A55                        2A            .byte	$2A
03139 0A56                        2A            .byte	$2A
03140 0A57                        2A            .byte	$2A
03141 0A58                        2A            .byte	$2A
03142                                           ! 810   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A59                        3F            .byte	$3F
03144 0A5A                        3F            .byte	$3F
03145 0A5B                        3F            .byte	$3F
03146 0A5C                        3F            .byte	$3F
03147 0A5D                        3F            .byte	$3F
03148 0A5E                        3F            .byte	$3F
03149 0A5F                        3F            .byte	$3F
03150 0A60                        3F            .byte	$3F
03151 0A61                        3F            .byte	$3F
03152 0A62                        3F            .byte	$3F
03153 0A63                        3F            .byte	$3F
03154 0A64                        3F            .byte	$3F
03155 0A65                        3F            .byte	$3F
03156 0A66                        3F            .byte	$3F
03157 0A67                        3F            .byte	$3F
03158 0A68                        3F            .byte	$3F
03159 0A69                        3F            .byte	$3F
03160 0A6A                        3F            .byte	$3F
03161 0A6B                        3F            .byte	$3F
03162 0A6C                        3F            .byte	$3F
03163 0A6D                        3F            .byte	$3F
03164 0A6E                        3F            .byte	$3F
03165 0A6F                        3F            .byte	$3F
03166 0A70                        3F            .byte	$3F
03167                                           ! 811   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A71                        00            .byte	0
03169 0A72                        00            .byte	0
03170 0A73                        00            .byte	0
03171 0A74                        00            .byte	0
03172 0A75                        00            .byte	0
03173 0A76                        00            .byte	0
03174 0A77                        00            .byte	0
03175 0A78                        00            .byte	0
03176 0A79                        00            .byte	0
03177 0A7A                        00            .byte	0
03178 0A7B                        00            .byte	0
03179 0A7C                        00            .byte	0
03180 0A7D                        00            .byte	0
03181 0A7E                        00            .byte	0
03182 0A7F                        00            .byte	0
03183 0A80                        00            .byte	0
03184 0A81                        00            .byte	0
03185 0A82                        00            .byte	0
03186 0A83                        00            .byte	0
03187 0A84                        00            .byte	0
03188 0A85                        00            .byte	0
03189 0A86                        00            .byte	0
03190 0A87                        00            .byte	0
03191 0A88                        00            .byte	0
03192                                           ! 812   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A89                        2A            .byte	$2A
03194 0A8A                        2A            .byte	$2A
03195 0A8B                        2A            .byte	$2A
03196 0A8C                        2A            .byte	$2A
03197 0A8D                        2A            .byte	$2A
03198 0A8E                        2A            .byte	$2A
03199 0A8F                        2A            .byte	$2A
03200 0A90                        2A            .byte	$2A
03201 0A91                        2A            .byte	$2A
03202 0A92                        2A            .byte	$2A
03203 0A93                        2A            .byte	$2A
03204 0A94                        2A            .byte	$2A
03205 0A95                        2A            .byte	$2A
03206 0A96                        2A            .byte	$2A
03207 0A97                        2A            .byte	$2A
03208 0A98                        2A            .byte	$2A
03209 0A99                        2A            .byte	$2A
03210 0A9A                        2A            .byte	$2A
03211 0A9B                        2A            .byte	$2A
03212 0A9C                        2A            .byte	$2A
03213 0A9D                        2A            .byte	$2A
03214 0A9E                        2A            .byte	$2A
03215 0A9F                        2A            .byte	$2A
03216 0AA0                        2A            .byte	$2A
03217                                           ! 813   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0AA1                        2A            .byte	$2A
03219 0AA2                        2A            .byte	$2A
03220 0AA3                        2A            .byte	$2A
03221 0AA4                        2A            .byte	$2A
03222 0AA5                        2A            .byte	$2A
03223 0AA6                        2A            .byte	$2A
03224 0AA7                        2A            .byte	$2A
03225 0AA8                        2A            .byte	$2A
03226 0AA9                        2A            .byte	$2A
03227 0AAA                        2A            .byte	$2A
03228 0AAB                        2A            .byte	$2A
03229 0AAC                        2A            .byte	$2A
03230 0AAD                        2A            .byte	$2A
03231 0AAE                        2A            .byte	$2A
03232 0AAF                        2A            .byte	$2A
03233 0AB0                        2A            .byte	$2A
03234 0AB1                        2A            .byte	$2A
03235 0AB2                        2A            .byte	$2A
03236 0AB3                        2A            .byte	$2A
03237 0AB4                        2A            .byte	$2A
03238 0AB5                        2A            .byte	$2A
03239 0AB6                        2A            .byte	$2A
03240 0AB7                        2A            .byte	$2A
03241 0AB8                        2A            .byte	$2A
03242                                           ! 814   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AB9                        3F            .byte	$3F
03244 0ABA                        3F            .byte	$3F
03245 0ABB                        3F            .byte	$3F
03246 0ABC                        3F            .byte	$3F
03247 0ABD                        3F            .byte	$3F
03248 0ABE                        3F            .byte	$3F
03249 0ABF                        3F            .byte	$3F
03250 0AC0                        3F            .byte	$3F
03251 0AC1                        3F            .byte	$3F
03252 0AC2                        3F            .byte	$3F
03253 0AC3                        3F            .byte	$3F
03254 0AC4                        3F            .byte	$3F
03255 0AC5                        3F            .byte	$3F
03256 0AC6                        3F            .byte	$3F
03257 0AC7                        3F            .byte	$3F
03258 0AC8                        3F            .byte	$3F
03259 0AC9                        3F            .byte	$3F
03260 0ACA                        3F            .byte	$3F
03261 0ACB                        3F            .byte	$3F
03262 0ACC                        3F            .byte	$3F
03263 0ACD                        3F            .byte	$3F
03264 0ACE                        3F            .byte	$3F
03265 0ACF                        3F            .byte	$3F
03266                                           ! 815 };
03267 0AD0                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 816 static Bit8u palette1[63+1][3]=
03270                                           ! 817 {
03271                       00000AD1            _palette1:
03272                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0AD1                        00            .byte	0
03274 0AD2                        00            .byte	0
03275 0AD3                        00            .byte	0
03276 0AD4                        00            .byte	0
03277 0AD5                        00            .byte	0
03278 0AD6                        2A            .byte	$2A
03279 0AD7                        00            .byte	0
03280 0AD8                        2A            .byte	$2A
03281 0AD9                        00            .byte	0
03282 0ADA                        00            .byte	0
03283 0ADB                        2A            .byte	$2A
03284 0ADC                        2A            .byte	$2A
03285 0ADD                        2A            .byte	$2A
03286 0ADE                        00            .byte	0
03287 0ADF                        00            .byte	0
03288 0AE0                        2A            .byte	$2A
03289 0AE1                        00            .byte	0
03290 0AE2                        2A            .byte	$2A
03291 0AE3                        2A            .byte	$2A
03292 0AE4                        15            .byte	$15
03293 0AE5                        00            .byte	0
03294 0AE6                        2A            .byte	$2A
03295 0AE7                        2A            .byte	$2A
03296 0AE8                        2A            .byte	$2A
03297                                           ! 819   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AE9                        00            .byte	0
03299 0AEA                        00            .byte	0
03300 0AEB                        00            .byte	0
03301 0AEC                        00            .byte	0
03302 0AED                        00            .byte	0
03303 0AEE                        2A            .byte	$2A
03304 0AEF                        00            .byte	0
03305 0AF0                        2A            .byte	$2A
03306 0AF1                        00            .byte	0
03307 0AF2                        00            .byte	0
03308 0AF3                        2A            .byte	$2A
03309 0AF4                        2A            .byte	$2A
03310 0AF5                        2A            .byte	$2A
03311 0AF6                        00            .byte	0
03312 0AF7                        00            .byte	0
03313 0AF8                        2A            .byte	$2A
03314 0AF9                        00            .byte	0
03315 0AFA                        2A            .byte	$2A
03316 0AFB                        2A            .byte	$2A
03317 0AFC                        15            .byte	$15
03318 0AFD                        00            .byte	0
03319 0AFE                        2A            .byte	$2A
03320 0AFF                        2A            .byte	$2A
03321 0B00                        2A            .byte	$2A
03322                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0B01                        15            .byte	$15
03324 0B02                        15            .byte	$15
03325 0B03                        15            .byte	$15
03326 0B04                        15            .byte	$15
03327 0B05                        15            .byte	$15
03328 0B06                        3F            .byte	$3F
03329 0B07                        15            .byte	$15
03330 0B08                        3F            .byte	$3F
03331 0B09                        15            .byte	$15
03332 0B0A                        15            .byte	$15
03333 0B0B                        3F            .byte	$3F
03334 0B0C                        3F            .byte	$3F
03335 0B0D                        3F            .byte	$3F
03336 0B0E                        15            .byte	$15
03337 0B0F                        15            .byte	$15
03338 0B10                        3F            .byte	$3F
03339 0B11                        15            .byte	$15
03340 0B12                        3F            .byte	$3F
03341 0B13                        3F            .byte	$3F
03342 0B14                        3F            .byte	$3F
03343 0B15                        15            .byte	$15
03344 0B16                        3F            .byte	$3F
03345 0B17                        3F            .byte	$3F
03346 0B18                        3F            .byte	$3F
03347                                           ! 821   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B19                        15            .byte	$15
03349 0B1A                        15            .byte	$15
03350 0B1B                        15            .byte	$15
03351 0B1C                        15            .byte	$15
03352 0B1D                        15            .byte	$15
03353 0B1E                        3F            .byte	$3F
03354 0B1F                        15            .byte	$15
03355 0B20                        3F            .byte	$3F
03356 0B21                        15            .byte	$15
03357 0B22                        15            .byte	$15
03358 0B23                        3F            .byte	$3F
03359 0B24                        3F            .byte	$3F
03360 0B25                        3F            .byte	$3F
03361 0B26                        15            .byte	$15
03362 0B27                        15            .byte	$15
03363 0B28                        3F            .byte	$3F
03364 0B29                        15            .byte	$15
03365 0B2A                        3F            .byte	$3F
03366 0B2B                        3F            .byte	$3F
03367 0B2C                        3F            .byte	$3F
03368 0B2D                        15            .byte	$15
03369 0B2E                        3F            .byte	$3F
03370 0B2F                        3F            .byte	$3F
03371 0B30                        3F            .byte	$3F
03372                                           ! 822   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B31                        00            .byte	0
03374 0B32                        00            .byte	0
03375 0B33                        00            .byte	0
03376 0B34                        00            .byte	0
03377 0B35                        00            .byte	0
03378 0B36                        2A            .byte	$2A
03379 0B37                        00            .byte	0
03380 0B38                        2A            .byte	$2A
03381 0B39                        00            .byte	0
03382 0B3A                        00            .byte	0
03383 0B3B                        2A            .byte	$2A
03384 0B3C                        2A            .byte	$2A
03385 0B3D                        2A            .byte	$2A
03386 0B3E                        00            .byte	0
03387 0B3F                        00            .byte	0
03388 0B40                        2A            .byte	$2A
03389 0B41                        00            .byte	0
03390 0B42                        2A            .byte	$2A
03391 0B43                        2A            .byte	$2A
03392 0B44                        15            .byte	$15
03393 0B45                        00            .byte	0
03394 0B46                        2A            .byte	$2A
03395 0B47                        2A            .byte	$2A
03396 0B48                        2A            .byte	$2A
03397                                           ! 823   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B49                        00            .byte	0
03399 0B4A                        00            .byte	0
03400 0B4B                        00            .byte	0
03401 0B4C                        00            .byte	0
03402 0B4D                        00            .byte	0
03403 0B4E                        2A            .byte	$2A
03404 0B4F                        00            .byte	0
03405 0B50                        2A            .byte	$2A
03406 0B51                        00            .byte	0
03407 0B52                        00            .byte	0
03408 0B53                        2A            .byte	$2A
03409 0B54                        2A            .byte	$2A
03410 0B55                        2A            .byte	$2A
03411 0B56                        00            .byte	0
03412 0B57                        00            .byte	0
03413 0B58                        2A            .byte	$2A
03414 0B59                        00            .byte	0
03415 0B5A                        2A            .byte	$2A
03416 0B5B                        2A            .byte	$2A
03417 0B5C                        15            .byte	$15
03418 0B5D                        00            .byte	0
03419 0B5E                        2A            .byte	$2A
03420 0B5F                        2A            .byte	$2A
03421 0B60                        2A            .byte	$2A
03422                                           ! 824   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B61                        15            .byte	$15
03424 0B62                        15            .byte	$15
03425 0B63                        15            .byte	$15
03426 0B64                        15            .byte	$15
03427 0B65                        15            .byte	$15
03428 0B66                        3F            .byte	$3F
03429 0B67                        15            .byte	$15
03430 0B68                        3F            .byte	$3F
03431 0B69                        15            .byte	$15
03432 0B6A                        15            .byte	$15
03433 0B6B                        3F            .byte	$3F
03434 0B6C                        3F            .byte	$3F
03435 0B6D                        3F            .byte	$3F
03436 0B6E                        15            .byte	$15
03437 0B6F                        15            .byte	$15
03438 0B70                        3F            .byte	$3F
03439 0B71                        15            .byte	$15
03440 0B72                        3F            .byte	$3F
03441 0B73                        3F            .byte	$3F
03442 0B74                        3F            .byte	$3F
03443 0B75                        15            .byte	$15
03444 0B76                        3F            .byte	$3F
03445 0B77                        3F            .byte	$3F
03446 0B78                        3F            .byte	$3F
03447                                           ! 825   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B79                        15            .byte	$15
03449 0B7A                        15            .byte	$15
03450 0B7B                        15            .byte	$15
03451 0B7C                        15            .byte	$15
03452 0B7D                        15            .byte	$15
03453 0B7E                        3F            .byte	$3F
03454 0B7F                        15            .byte	$15
03455 0B80                        3F            .byte	$3F
03456 0B81                        15            .byte	$15
03457 0B82                        15            .byte	$15
03458 0B83                        3F            .byte	$3F
03459 0B84                        3F            .byte	$3F
03460 0B85                        3F            .byte	$3F
03461 0B86                        15            .byte	$15
03462 0B87                        15            .byte	$15
03463 0B88                        3F            .byte	$3F
03464 0B89                        15            .byte	$15
03465 0B8A                        3F            .byte	$3F
03466 0B8B                        3F            .byte	$3F
03467 0B8C                        3F            .byte	$3F
03468 0B8D                        15            .byte	$15
03469 0B8E                        3F            .byte	$3F
03470 0B8F                        3F            .byte	$3F
03471                                           ! 826 };
03472 0B90                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 827 static Bit8u palette2[63+1][3]=
03475                                           ! 828 {
03476                       00000B91            _palette2:
03477                                           ! 829   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03478 0B91                        00            .byte	0
03479 0B92                        00            .byte	0
03480 0B93                        00            .byte	0
03481 0B94                        00            .byte	0
03482 0B95                        00            .byte	0
03483 0B96                        2A            .byte	$2A
03484 0B97                        00            .byte	0
03485 0B98                        2A            .byte	$2A
03486 0B99                        00            .byte	0
03487 0B9A                        00            .byte	0
03488 0B9B                        2A            .byte	$2A
03489 0B9C                        2A            .byte	$2A
03490 0B9D                        2A            .byte	$2A
03491 0B9E                        00            .byte	0
03492 0B9F                        00            .byte	0
03493 0BA0                        2A            .byte	$2A
03494 0BA1                        00            .byte	0
03495 0BA2                        2A            .byte	$2A
03496 0BA3                        2A            .byte	$2A
03497 0BA4                        2A            .byte	$2A
03498 0BA5                        00            .byte	0
03499 0BA6                        2A            .byte	$2A
03500 0BA7                        2A            .byte	$2A
03501 0BA8                        2A            .byte	$2A
03502                                           ! 830   0x00,0x00,0x15, 0x00,0x00,0x3f,
03503 0BA9                        00            .byte	0
03504 0BAA                        00            .byte	0
03505 0BAB                        15            .byte	$15
03506 0BAC                        00            .byte	0
03507 0BAD                        00            .byte	0
03508                                           ! 830  0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03509 0BAE                        3F            .byte	$3F
03510 0BAF                        00            .byte	0
03511 0BB0                        2A            .byte	$2A
03512 0BB1                        15            .byte	$15
03513 0BB2                        00            .byte	0
03514 0BB3                        2A            .byte	$2A
03515 0BB4                        3F            .byte	$3F
03516 0BB5                        2A            .byte	$2A
03517 0BB6                        00            .byte	0
03518 0BB7                        15            .byte	$15
03519 0BB8                        2A            .byte	$2A
03520 0BB9                        00            .byte	0
03521 0BBA                        3F            .byte	$3F
03522 0BBB                        2A            .byte	$2A
03523 0BBC                        2A            .byte	$2A
03524 0BBD                        15            .byte	$15
03525 0BBE                        2A            .byte	$2A
03526 0BBF                        2A            .byte	$2A
03527 0BC0                        3F            .byte	$3F
03528                                           ! 831   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BC1                        00            .byte	0
03530 0BC2                        15            .byte	$15
03531 0BC3                        00            .byte	0
03532 0BC4                        00            .byte	0
03533 0BC5                        15            .byte	$15
03534 0BC6                        2A            .byte	$2A
03535 0BC7                        00            .byte	0
03536 0BC8                        3F            .byte	$3F
03537 0BC9                        00            .byte	0
03538 0BCA                        00            .byte	0
03539 0BCB                        3F            .byte	$3F
03540 0BCC                        2A            .byte	$2A
03541 0BCD                        2A            .byte	$2A
03542 0BCE                        15            .byte	$15
03543 0BCF                        00            .byte	0
03544 0BD0                        2A            .byte	$2A
03545 0BD1                        15            .byte	$15
03546 0BD2                        2A            .byte	$2A
03547 0BD3                        2A            .byte	$2A
03548 0BD4                        3F            .byte	$3F
03549 0BD5                        00            .byte	0
03550 0BD6                        2A            .byte	$2A
03551 0BD7                        3F            .byte	$3F
03552 0BD8                        2A            .byte	$2A
03553                                           ! 832   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BD9                        00            .byte	0
03555 0BDA                        15            .byte	$15
03556 0BDB                        15            .byte	$15
03557 0BDC                        00            .byte	0
03558 0BDD                        15            .byte	$15
03559 0BDE                        3F            .byte	$3F
03560 0BDF                        00            .byte	0
03561 0BE0                        3F            .byte	$3F
03562 0BE1                        15            .byte	$15
03563 0BE2                        00            .byte	0
03564 0BE3                        3F            .byte	$3F
03565 0BE4                        3F            .byte	$3F
03566 0BE5                        2A            .byte	$2A
03567 0BE6                        15            .byte	$15
03568 0BE7                        15            .byte	$15
03569 0BE8                        2A            .byte	$2A
03570 0BE9                        15            .byte	$15
03571 0BEA                        3F            .byte	$3F
03572 0BEB                        2A            .byte	$2A
03573 0BEC                        3F            .byte	$3F
03574 0BED                        15            .byte	$15
03575 0BEE                        2A            .byte	$2A
03576 0BEF                        3F            .byte	$3F
03577 0BF0                        3F            .byte	$3F
03578                                           ! 833   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BF1                        15            .byte	$15
03580 0BF2                        00            .byte	0
03581 0BF3                        00            .byte	0
03582 0BF4                        15            .byte	$15
03583 0BF5                        00            .byte	0
03584 0BF6                        2A            .byte	$2A
03585 0BF7                        15            .byte	$15
03586 0BF8                        2A            .byte	$2A
03587 0BF9                        00            .byte	0
03588 0BFA                        15            .byte	$15
03589 0BFB                        2A            .byte	$2A
03590 0BFC                        2A            .byte	$2A
03591 0BFD                        3F            .byte	$3F
03592 0BFE                        00            .byte	0
03593 0BFF                        00            .byte	0
03594 0C00                        3F            .byte	$3F
03595 0C01                        00            .byte	0
03596 0C02                        2A            .byte	$2A
03597 0C03                        3F            .byte	$3F
03598 0C04                        2A            .byte	$2A
03599 0C05                        00            .byte	0
03600 0C06                        3F            .byte	$3F
03601 0C07                        2A            .byte	$2A
03602 0C08                        2A            .byte	$2A
03603                                           ! 834   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C09                        15            .byte	$15
03605 0C0A                        00            .byte	0
03606 0C0B                        15            .byte	$15
03607 0C0C                        15            .byte	$15
03608 0C0D                        00            .byte	0
03609 0C0E                        3F            .byte	$3F
03610 0C0F                        15            .byte	$15
03611 0C10                        2A            .byte	$2A
03612 0C11                        15            .byte	$15
03613 0C12                        15            .byte	$15
03614 0C13                        2A            .byte	$2A
03615 0C14                        3F            .byte	$3F
03616 0C15                        3F            .byte	$3F
03617 0C16                        00            .byte	0
03618 0C17                        15            .byte	$15
03619 0C18                        3F            .byte	$3F
03620 0C19                        00            .byte	0
03621 0C1A                        3F            .byte	$3F
03622 0C1B                        3F            .byte	$3F
03623 0C1C                        2A            .byte	$2A
03624 0C1D                        15            .byte	$15
03625 0C1E                        3F            .byte	$3F
03626 0C1F                        2A            .byte	$2A
03627 0C20                        3F            .byte	$3F
03628                                           ! 835   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C21                        15            .byte	$15
03630 0C22                        15            .byte	$15
03631 0C23                        00            .byte	0
03632 0C24                        15            .byte	$15
03633 0C25                        15            .byte	$15
03634 0C26                        2A            .byte	$2A
03635 0C27                        15            .byte	$15
03636 0C28                        3F            .byte	$3F
03637 0C29                        00            .byte	0
03638 0C2A                        15            .byte	$15
03639 0C2B                        3F            .byte	$3F
03640 0C2C                        2A            .byte	$2A
03641 0C2D                        3F            .byte	$3F
03642 0C2E                        15            .byte	$15
03643 0C2F                        00            .byte	0
03644 0C30                        3F            .byte	$3F
03645 0C31                        15            .byte	$15
03646 0C32                        2A            .byte	$2A
03647 0C33                        3F            .byte	$3F
03648 0C34                        3F            .byte	$3F
03649 0C35                        00            .byte	0
03650 0C36                        3F            .byte	$3F
03651 0C37                        3F            .byte	$3F
03652 0C38                        2A            .byte	$2A
03653                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C39                        15            .byte	$15
03655 0C3A                        15            .byte	$15
03656 0C3B                        15            .byte	$15
03657 0C3C                        15            .byte	$15
03658 0C3D                        15            .byte	$15
03659 0C3E                        3F            .byte	$3F
03660 0C3F                        15            .byte	$15
03661 0C40                        3F            .byte	$3F
03662 0C41                        15            .byte	$15
03663 0C42                        15            .byte	$15
03664 0C43                        3F            .byte	$3F
03665 0C44                        3F            .byte	$3F
03666 0C45                        3F            .byte	$3F
03667 0C46                        15            .byte	$15
03668 0C47                        15            .byte	$15
03669 0C48                        3F            .byte	$3F
03670 0C49                        15            .byte	$15
03671 0C4A                        3F            .byte	$3F
03672 0C4B                        3F            .byte	$3F
03673 0C4C                        3F            .byte	$3F
03674 0C4D                        15            .byte	$15
03675 0C4E                        3F            .byte	$3F
03676 0C4F                        3F            .byte	$3F
03677                                           ! 837 };
03678 0C50                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 838 static Bit8u palette3[256][3]=
03681                                           ! 839 {
03682                       00000C51            _palette3:
03683                                           ! 840   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C51                        00            .byte	0
03685 0C52                        00            .byte	0
03686 0C53                        00            .byte	0
03687 0C54                        00            .byte	0
03688 0C55                        00            .byte	0
03689 0C56                        2A            .byte	$2A
03690 0C57                        00            .byte	0
03691 0C58                        2A            .byte	$2A
03692 0C59                        00            .byte	0
03693 0C5A                        00            .byte	0
03694 0C5B                        2A            .byte	$2A
03695 0C5C                        2A            .byte	$2A
03696 0C5D                        2A            .byte	$2A
03697 0C5E                        00            .byte	0
03698 0C5F                        00            .byte	0
03699 0C60                        2A            .byte	$2A
03700 0C61                        00            .byte	0
03701 0C62                        2A            .byte	$2A
03702 0C63                        2A            .byte	$2A
03703 0C64                        15            .byte	$15
03704 0C65                        00            .byte	0
03705 0C66                        2A            .byte	$2A
03706 0C67                        2A            .byte	$2A
03707 0C68                        2A            .byte	$2A
03708                                           ! 841   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C69                        15            .byte	$15
03710 0C6A                        15            .byte	$15
03711 0C6B                        15            .byte	$15
03712 0C6C                        15            .byte	$15
03713 0C6D                        15            .byte	$15
03714 0C6E                        3F            .byte	$3F
03715 0C6F                        15            .byte	$15
03716 0C70                        3F            .byte	$3F
03717 0C71                        15            .byte	$15
03718 0C72                        15            .byte	$15
03719 0C73                        3F            .byte	$3F
03720 0C74                        3F            .byte	$3F
03721 0C75                        3F            .byte	$3F
03722 0C76                        15            .byte	$15
03723 0C77                        15            .byte	$15
03724 0C78                        3F            .byte	$3F
03725 0C79                        15            .byte	$15
03726 0C7A                        3F            .byte	$3F
03727 0C7B                        3F            .byte	$3F
03728 0C7C                        3F            .byte	$3F
03729 0C7D                        15            .byte	$15
03730 0C7E                        3F            .byte	$3F
03731 0C7F                        3F            .byte	$3F
03732 0C80                        3F            .byte	$3F
03733                                           ! 842   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C81                        00            .byte	0
03735 0C82                        00            .byte	0
03736 0C83                        00            .byte	0
03737 0C84                        05            .byte	5
03738 0C85                        05            .byte	5
03739 0C86                        05            .byte	5
03740 0C87                        08            .byte	8
03741 0C88                        08            .byte	8
03742 0C89                        08            .byte	8
03743 0C8A                        0B            .byte	$B
03744 0C8B                        0B            .byte	$B
03745 0C8C                        0B            .byte	$B
03746 0C8D                        0E            .byte	$E
03747 0C8E                        0E            .byte	$E
03748 0C8F                        0E            .byte	$E
03749 0C90                        11            .byte	$11
03750 0C91                        11            .byte	$11
03751 0C92                        11            .byte	$11
03752 0C93                        14            .byte	$14
03753 0C94                        14            .byte	$14
03754 0C95                        14            .byte	$14
03755 0C96                        18            .byte	$18
03756 0C97                        18            .byte	$18
03757 0C98                        18            .byte	$18
03758                                           ! 843   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0C99                        1C            .byte	$1C
03760 0C9A                        1C            .byte	$1C
03761 0C9B                        1C            .byte	$1C
03762 0C9C                        20            .byte	$20
03763 0C9D                        20            .byte	$20
03764 0C9E                        20            .byte	$20
03765 0C9F                        24            .byte	$24
03766 0CA0                        24            .byte	$24
03767 0CA1                        24            .byte	$24
03768 0CA2                        28            .byte	$28
03769 0CA3                        28            .byte	$28
03770 0CA4                        28            .byte	$28
03771 0CA5                        2D            .byte	$2D
03772 0CA6                        2D            .byte	$2D
03773 0CA7                        2D            .byte	$2D
03774 0CA8                        32            .byte	$32
03775 0CA9                        32            .byte	$32
03776 0CAA                        32            .byte	$32
03777 0CAB                        38            .byte	$38
03778 0CAC                        38            .byte	$38
03779 0CAD                        38            .byte	$38
03780 0CAE                        3F            .byte	$3F
03781 0CAF                        3F            .byte	$3F
03782 0CB0                        3F            .byte	$3F
03783                                           ! 844   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CB1                        00            .byte	0
03785 0CB2                        00            .byte	0
03786 0CB3                        3F            .byte	$3F
03787 0CB4                        10            .byte	$10
03788 0CB5                        00            .byte	0
03789 0CB6                        3F            .byte	$3F
03790 0CB7                        1F            .byte	$1F
03791 0CB8                        00            .byte	0
03792 0CB9                        3F            .byte	$3F
03793 0CBA                        2F            .byte	$2F
03794 0CBB                        00            .byte	0
03795 0CBC                        3F            .byte	$3F
03796 0CBD                        3F            .byte	$3F
03797 0CBE                        00            .byte	0
03798 0CBF                        3F            .byte	$3F
03799 0CC0                        3F            .byte	$3F
03800 0CC1                        00            .byte	0
03801 0CC2                        2F            .byte	$2F
03802 0CC3                        3F            .byte	$3F
03803 0CC4                        00            .byte	0
03804 0CC5                        1F            .byte	$1F
03805 0CC6                        3F            .byte	$3F
03806 0CC7                        00            .byte	0
03807 0CC8                        10            .byte	$10
03808                                           ! 845   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CC9                        3F            .byte	$3F
03810 0CCA                        00            .byte	0
03811 0CCB                        00            .byte	0
03812 0CCC                        3F            .byte	$3F
03813 0CCD                        10            .byte	$10
03814 0CCE                        00            .byte	0
03815 0CCF                        3F            .byte	$3F
03816 0CD0                        1F            .byte	$1F
03817 0CD1                        00            .byte	0
03818 0CD2                        3F            .byte	$3F
03819 0CD3                        2F            .byte	$2F
03820 0CD4                        00            .byte	0
03821 0CD5                        3F            .byte	$3F
03822 0CD6                        3F            .byte	$3F
03823 0CD7                        00            .byte	0
03824 0CD8                        2F            .byte	$2F
03825 0CD9                        3F            .byte	$3F
03826 0CDA                        00            .byte	0
03827 0CDB                        1F            .byte	$1F
03828 0CDC                        3F            .byte	$3F
03829 0CDD                        00            .byte	0
03830 0CDE                        10            .byte	$10
03831 0CDF                        3F            .byte	$3F
03832 0CE0                        00            .byte	0
03833                                           ! 846   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CE1                        00            .byte	0
03835 0CE2                        3F            .byte	$3F
03836 0CE3                        00            .byte	0
03837 0CE4                        00            .byte	0
03838 0CE5                        3F            .byte	$3F
03839 0CE6                        10            .byte	$10
03840 0CE7                        00            .byte	0
03841 0CE8                        3F            .byte	$3F
03842 0CE9                        1F            .byte	$1F
03843 0CEA                        00            .byte	0
03844 0CEB                        3F            .byte	$3F
03845 0CEC                        2F            .byte	$2F
03846 0CED                        00            .byte	0
03847 0CEE                        3F            .byte	$3F
03848 0CEF                        3F            .byte	$3F
03849 0CF0                        00            .byte	0
03850 0CF1                        2F            .byte	$2F
03851 0CF2                        3F            .byte	$3F
03852 0CF3                        00            .byte	0
03853 0CF4                        1F            .byte	$1F
03854 0CF5                        3F            .byte	$3F
03855 0CF6                        00            .byte	0
03856 0CF7                        10            .byte	$10
03857 0CF8                        3F            .byte	$3F
03858                                           ! 847   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03859 0CF9                        1F            .byte	$1F
03860 0CFA                        1F            .byte	$1F
03861 0CFB                        3F            .byte	$3F
03862 0CFC                        27            .byte	$27
03863 0CFD                        1F            .byte	$1F
03864 0CFE                        3F            .byte	$3F
03865 0CFF                        2F            .byte	$2F
03866 0D00                        1F            .byte	$1F
03867 0D01                        3F            .byte	$3F
03868 0D02                        37            .byte	$37
03869 0D03                        1F            .byte	$1F
03870 0D04                        3F            .byte	$3F
03871 0D05                        3F            .byte	$3F
03872 0D06                        1F            .byte	$1F
03873 0D07                        3F            .byte	$3F
03874 0D08                        3F            .byte	$3F
03875 0D09                        1F            .byte	$1F
03876 0D0A                        37            .byte	$37
03877 0D0B                        3F            .byte	$3F
03878 0D0C                        1F            .byte	$1F
03879 0D0D                        2F            .byte	$2F
03880 0D0E                        3F            .byte	$3F
03881 0D0F                        1F            .byte	$1F
03882 0D10                        27            .byte	$27
03883                                           ! 848   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f
03884 0D11                        3F            .byte	$3F
03885 0D12                        1F            .byte	$1F
03886 0D13                        1F            .byte	$1F
03887 0D14                        3F            .byte	$3F
03888 0D15                        27            .byte	$27
03889 0D16                        1F            .byte	$1F
03890 0D17                        3F            .byte	$3F
03891 0D18                        2F            .byte	$2F
03892 0D19                        1F            .byte	$1F
03893 0D1A                        3F            .byte	$3F
03894 0D1B                        37            .byte	$37
03895 0D1C                        1F            .byte	$1F
03896 0D1D                        3F            .byte	$3F
03897 0D1E                        3F            .byte	$3F
03898 0D1F                        1F            .byte	$1F
03899 0D20                        37            .byte	$37
03900 0D21                        3F            .byte	$3F
03901                                           ! 848 , 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03902 0D22                        1F            .byte	$1F
03903 0D23                        2F            .byte	$2F
03904 0D24                        3F            .byte	$3F
03905 0D25                        1F            .byte	$1F
03906 0D26                        27            .byte	$27
03907 0D27                        3F            .byte	$3F
03908 0D28                        1F            .byte	$1F
03909                                           ! 849   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D29                        1F            .byte	$1F
03911 0D2A                        3F            .byte	$3F
03912 0D2B                        1F            .byte	$1F
03913 0D2C                        1F            .byte	$1F
03914 0D2D                        3F            .byte	$3F
03915 0D2E                        27            .byte	$27
03916 0D2F                        1F            .byte	$1F
03917 0D30                        3F            .byte	$3F
03918 0D31                        2F            .byte	$2F
03919 0D32                        1F            .byte	$1F
03920 0D33                        3F            .byte	$3F
03921 0D34                        37            .byte	$37
03922 0D35                        1F            .byte	$1F
03923 0D36                        3F            .byte	$3F
03924 0D37                        3F            .byte	$3F
03925 0D38                        1F            .byte	$1F
03926 0D39                        37            .byte	$37
03927 0D3A                        3F            .byte	$3F
03928 0D3B                        1F            .byte	$1F
03929 0D3C                        2F            .byte	$2F
03930 0D3D                        3F            .byte	$3F
03931 0D3E                        1F            .byte	$1F
03932 0D3F                        27            .byte	$27
03933 0D40                        3F            .byte	$3F
03934                                           ! 850   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D41                        2D            .byte	$2D
03936 0D42                        2D            .byte	$2D
03937 0D43                        3F            .byte	$3F
03938 0D44                        31            .byte	$31
03939 0D45                        2D            .byte	$2D
03940 0D46                        3F            .byte	$3F
03941 0D47                        36            .byte	$36
03942 0D48                        2D            .byte	$2D
03943 0D49                        3F            .byte	$3F
03944 0D4A                        3A            .byte	$3A
03945 0D4B                        2D            .byte	$2D
03946 0D4C                        3F            .byte	$3F
03947 0D4D                        3F            .byte	$3F
03948 0D4E                        2D            .byte	$2D
03949 0D4F                        3F            .byte	$3F
03950 0D50                        3F            .byte	$3F
03951 0D51                        2D            .byte	$2D
03952 0D52                        3A            .byte	$3A
03953 0D53                        3F            .byte	$3F
03954 0D54                        2D            .byte	$2D
03955 0D55                        36            .byte	$36
03956 0D56                        3F            .byte	$3F
03957 0D57                        2D            .byte	$2D
03958 0D58                        31            .byte	$31
03959                                           ! 851   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D59                        3F            .byte	$3F
03961 0D5A                        2D            .byte	$2D
03962 0D5B                        2D            .byte	$2D
03963 0D5C                        3F            .byte	$3F
03964 0D5D                        31            .byte	$31
03965 0D5E                        2D            .byte	$2D
03966 0D5F                        3F            .byte	$3F
03967 0D60                        36            .byte	$36
03968 0D61                        2D            .byte	$2D
03969 0D62                        3F            .byte	$3F
03970 0D63                        3A            .byte	$3A
03971 0D64                        2D            .byte	$2D
03972 0D65                        3F            .byte	$3F
03973 0D66                        3F            .byte	$3F
03974 0D67                        2D            .byte	$2D
03975 0D68                        3A            .byte	$3A
03976 0D69                        3F            .byte	$3F
03977 0D6A                        2D            .byte	$2D
03978 0D6B                        36            .byte	$36
03979 0D6C                        3F            .byte	$3F
03980 0D6D                        2D            .byte	$2D
03981 0D6E                        31            .byte	$31
03982 0D6F                        3F            .byte	$3F
03983 0D70                        2D            .byte	$2D
03984                                           ! 852   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D71                        2D            .byte	$2D
03986 0D72                        3F            .byte	$3F
03987 0D73                        2D            .byte	$2D
03988 0D74                        2D            .byte	$2D
03989 0D75                        3F            .byte	$3F
03990 0D76                        31            .byte	$31
03991 0D77                        2D            .byte	$2D
03992 0D78                        3F            .byte	$3F
03993 0D79                        36            .byte	$36
03994 0D7A                        2D            .byte	$2D
03995 0D7B                        3F            .byte	$3F
03996 0D7C                        3A            .byte	$3A
03997 0D7D                        2D            .byte	$2D
03998 0D7E                        3F            .byte	$3F
03999 0D7F                        3F            .byte	$3F
04000 0D80                        2D            .byte	$2D
04001 0D81                        3A            .byte	$3A
04002 0D82                        3F            .byte	$3F
04003 0D83                        2D            .byte	$2D
04004 0D84                        36            .byte	$36
04005 0D85                        3F            .byte	$3F
04006 0D86                        2D            .byte	$2D
04007 0D87                        31            .byte	$31
04008 0D88                        3F            .byte	$3F
04009                                           ! 853   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D89                        00            .byte	0
04011 0D8A                        00            .byte	0
04012 0D8B                        1C            .byte	$1C
04013 0D8C                        07            .byte	7
04014 0D8D                        00            .byte	0
04015 0D8E                        1C            .byte	$1C
04016 0D8F                        0E            .byte	$E
04017 0D90                        00            .byte	0
04018 0D91                        1C            .byte	$1C
04019 0D92                        15            .byte	$15
04020 0D93                        00            .byte	0
04021 0D94                        1C            .byte	$1C
04022 0D95                        1C            .byte	$1C
04023 0D96                        00            .byte	0
04024 0D97                        1C            .byte	$1C
04025 0D98                        1C            .byte	$1C
04026 0D99                        00            .byte	0
04027 0D9A                        15            .byte	$15
04028 0D9B                        1C            .byte	$1C
04029 0D9C                        00            .byte	0
04030 0D9D                        0E            .byte	$E
04031 0D9E                        1C            .byte	$1C
04032 0D9F                        00            .byte	0
04033 0DA0                        07            .byte	7
04034                                           ! 854   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0DA1                        1C            .byte	$1C
04036 0DA2                        00            .byte	0
04037 0DA3                        00            .byte	0
04038 0DA4                        1C            .byte	$1C
04039 0DA5                        07            .byte	7
04040 0DA6                        00            .byte	0
04041 0DA7                        1C            .byte	$1C
04042 0DA8                        0E            .byte	$E
04043 0DA9                        00            .byte	0
04044 0DAA                        1C            .byte	$1C
04045 0DAB                        15            .byte	$15
04046 0DAC                        00            .byte	0
04047 0DAD                        1C            .byte	$1C
04048 0DAE                        1C            .byte	$1C
04049 0DAF                        00            .byte	0
04050 0DB0                        15            .byte	$15
04051 0DB1                        1C            .byte	$1C
04052 0DB2                        00            .byte	0
04053 0DB3                        0E            .byte	$E
04054 0DB4                        1C            .byte	$1C
04055 0DB5                        00            .byte	0
04056 0DB6                        07            .byte	7
04057 0DB7                        1C            .byte	$1C
04058 0DB8                        00            .byte	0
04059                                           ! 855   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DB9                        00            .byte	0
04061 0DBA                        1C            .byte	$1C
04062 0DBB                        00            .byte	0
04063 0DBC                        00            .byte	0
04064 0DBD                        1C            .byte	$1C
04065 0DBE                        07            .byte	7
04066 0DBF                        00            .byte	0
04067 0DC0                        1C            .byte	$1C
04068 0DC1                        0E            .byte	$E
04069 0DC2                        00            .byte	0
04070 0DC3                        1C            .byte	$1C
04071 0DC4                        15            .byte	$15
04072 0DC5                        00            .byte	0
04073 0DC6                        1C            .byte	$1C
04074 0DC7                        1C            .byte	$1C
04075 0DC8                        00            .byte	0
04076 0DC9                        15            .byte	$15
04077 0DCA                        1C            .byte	$1C
04078 0DCB                        00            .byte	0
04079 0DCC                        0E            .byte	$E
04080 0DCD                        1C            .byte	$1C
04081 0DCE                        00            .byte	0
04082 0DCF                        07            .byte	7
04083 0DD0                        1C            .byte	$1C
04084                                           ! 856   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DD1                        0E            .byte	$E
04086 0DD2                        0E            .byte	$E
04087 0DD3                        1C            .byte	$1C
04088 0DD4                        11            .byte	$11
04089 0DD5                        0E            .byte	$E
04090 0DD6                        1C            .byte	$1C
04091 0DD7                        15            .byte	$15
04092 0DD8                        0E            .byte	$E
04093 0DD9                        1C            .byte	$1C
04094 0DDA                        18            .byte	$18
04095 0DDB                        0E            .byte	$E
04096 0DDC                        1C            .byte	$1C
04097 0DDD                        1C            .byte	$1C
04098 0DDE                        0E            .byte	$E
04099 0DDF                        1C            .byte	$1C
04100 0DE0                        1C            .byte	$1C
04101 0DE1                        0E            .byte	$E
04102 0DE2                        18            .byte	$18
04103 0DE3                        1C            .byte	$1C
04104 0DE4                        0E            .byte	$E
04105 0DE5                        15            .byte	$15
04106 0DE6                        1C            .byte	$1C
04107 0DE7                        0E            .byte	$E
04108 0DE8                        11            .byte	$11
04109                                           ! 857   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DE9                        1C            .byte	$1C
04111 0DEA                        0E            .byte	$E
04112 0DEB                        0E            .byte	$E
04113 0DEC                        1C            .byte	$1C
04114 0DED                        11            .byte	$11
04115 0DEE                        0E            .byte	$E
04116 0DEF                        1C            .byte	$1C
04117 0DF0                        15            .byte	$15
04118 0DF1                        0E            .byte	$E
04119 0DF2                        1C            .byte	$1C
04120 0DF3                        18            .byte	$18
04121 0DF4                        0E            .byte	$E
04122 0DF5                        1C            .byte	$1C
04123 0DF6                        1C            .byte	$1C
04124 0DF7                        0E            .byte	$E
04125 0DF8                        18            .byte	$18
04126 0DF9                        1C            .byte	$1C
04127 0DFA                        0E            .byte	$E
04128 0DFB                        15            .byte	$15
04129 0DFC                        1C            .byte	$1C
04130 0DFD                        0E            .byte	$E
04131 0DFE                        11            .byte	$11
04132 0DFF                        1C            .byte	$1C
04133 0E00                        0E            .byte	$E
04134                                           ! 858   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0E01                        0E            .byte	$E
04136 0E02                        1C            .byte	$1C
04137 0E03                        0E            .byte	$E
04138 0E04                        0E            .byte	$E
04139 0E05                        1C            .byte	$1C
04140 0E06                        11            .byte	$11
04141 0E07                        0E            .byte	$E
04142 0E08                        1C            .byte	$1C
04143 0E09                        15            .byte	$15
04144 0E0A                        0E            .byte	$E
04145 0E0B                        1C            .byte	$1C
04146 0E0C                        18            .byte	$18
04147 0E0D                        0E            .byte	$E
04148 0E0E                        1C            .byte	$1C
04149 0E0F                        1C            .byte	$1C
04150 0E10                        0E            .byte	$E
04151 0E11                        18            .byte	$18
04152 0E12                        1C            .byte	$1C
04153 0E13                        0E            .byte	$E
04154 0E14                        15            .byte	$15
04155 0E15                        1C            .byte	$1C
04156 0E16                        0E            .byte	$E
04157 0E17                        11            .byte	$11
04158 0E18                        1C            .byte	$1C
04159                                           ! 859   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E19                        14            .byte	$14
04161 0E1A                        14            .byte	$14
04162 0E1B                        1C            .byte	$1C
04163 0E1C                        16            .byte	$16
04164 0E1D                        14            .byte	$14
04165 0E1E                        1C            .byte	$1C
04166 0E1F                        18            .byte	$18
04167 0E20                        14            .byte	$14
04168 0E21                        1C            .byte	$1C
04169 0E22                        1A            .byte	$1A
04170 0E23                        14            .byte	$14
04171 0E24                        1C            .byte	$1C
04172 0E25                        1C            .byte	$1C
04173 0E26                        14            .byte	$14
04174 0E27                        1C            .byte	$1C
04175 0E28                        1C            .byte	$1C
04176 0E29                        14            .byte	$14
04177 0E2A                        1A            .byte	$1A
04178 0E2B                        1C            .byte	$1C
04179 0E2C                        14            .byte	$14
04180 0E2D                        18            .byte	$18
04181 0E2E                        1C            .byte	$1C
04182 0E2F                        14            .byte	$14
04183 0E30                        16            .byte	$16
04184                                           ! 860   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E31                        1C            .byte	$1C
04186 0E32                        14            .byte	$14
04187 0E33                        14            .byte	$14
04188 0E34                        1C            .byte	$1C
04189 0E35                        16            .byte	$16
04190 0E36                        14            .byte	$14
04191 0E37                        1C            .byte	$1C
04192 0E38                        18            .byte	$18
04193 0E39                        14            .byte	$14
04194 0E3A                        1C            .byte	$1C
04195 0E3B                        1A            .byte	$1A
04196 0E3C                        14            .byte	$14
04197 0E3D                        1C            .byte	$1C
04198 0E3E                        1C            .byte	$1C
04199 0E3F                        14            .byte	$14
04200 0E40                        1A            .byte	$1A
04201 0E41                        1C            .byte	$1C
04202 0E42                        14            .byte	$14
04203 0E43                        18            .byte	$18
04204 0E44                        1C            .byte	$1C
04205 0E45                        14            .byte	$14
04206 0E46                        16            .byte	$16
04207 0E47                        1C            .byte	$1C
04208 0E48                        14            .byte	$14
04209                                           ! 861   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E49                        14            .byte	$14
04211 0E4A                        1C            .byte	$1C
04212 0E4B                        14            .byte	$14
04213 0E4C                        14            .byte	$14
04214 0E4D                        1C            .byte	$1C
04215 0E4E                        16            .byte	$16
04216 0E4F                        14            .byte	$14
04217 0E50                        1C            .byte	$1C
04218 0E51                        18            .byte	$18
04219 0E52                        14            .byte	$14
04220 0E53                        1C            .byte	$1C
04221 0E54                        1A            .byte	$1A
04222 0E55                        14            .byte	$14
04223 0E56                        1C            .byte	$1C
04224 0E57                        1C            .byte	$1C
04225 0E58                        14            .byte	$14
04226 0E59                        1A            .byte	$1A
04227 0E5A                        1C            .byte	$1C
04228 0E5B                        14            .byte	$14
04229 0E5C                        18            .byte	$18
04230 0E5D                        1C            .byte	$1C
04231 0E5E                        14            .byte	$14
04232 0E5F                        16            .byte	$16
04233 0E60                        1C            .byte	$1C
04234                                           ! 862   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E61                        00            .byte	0
04236 0E62                        00            .byte	0
04237 0E63                        10            .byte	$10
04238 0E64                        04            .byte	4
04239 0E65                        00            .byte	0
04240 0E66                        10            .byte	$10
04241 0E67                        08            .byte	8
04242 0E68                        00            .byte	0
04243 0E69                        10            .byte	$10
04244 0E6A                        0C            .byte	$C
04245 0E6B                        00            .byte	0
04246 0E6C                        10            .byte	$10
04247 0E6D                        10            .byte	$10
04248 0E6E                        00            .byte	0
04249 0E6F                        10            .byte	$10
04250 0E70                        10            .byte	$10
04251 0E71                        00            .byte	0
04252 0E72                        0C            .byte	$C
04253 0E73                        10            .byte	$10
04254 0E74                        00            .byte	0
04255 0E75                        08            .byte	8
04256 0E76                        10            .byte	$10
04257 0E77                        00            .byte	0
04258 0E78                        04            .byte	4
04259                                           ! 863   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04260 0E79                        10            .byte	$10
04261 0E7A                        00            .byte	0
04262 0E7B                        00            .byte	0
04263 0E7C                        10            .byte	$10
04264 0E7D                        04            .byte	4
04265 0E7E                        00            .byte	0
04266 0E7F                        10            .byte	$10
04267 0E80                        08            .byte	8
04268 0E81                        00            .byte	0
04269 0E82                        10            .byte	$10
04270 0E83                        0C            .byte	$C
04271 0E84                        00            .byte	0
04272 0E85                        10            .byte	$10
04273 0E86                        10            .byte	$10
04274 0E87                        00            .byte	0
04275 0E88                        0C            .byte	$C
04276 0E89                        10            .byte	$10
04277 0E8A                        00            .byte	0
04278 0E8B                        08            .byte	8
04279 0E8C                        10            .byte	$10
04280 0E8D                        00            .byte	0
04281 0E8E                        04            .byte	4
04282 0E8F                        10            .byte	$10
04283 0E90                        00            .byte	0
04284                                           ! 864   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c
04285 0E91                        00            .byte	0
04286 0E92                        10            .byte	$10
04287 0E93                        00            .byte	0
04288 0E94                        00            .byte	0
04289 0E95                        10            .byte	$10
04290 0E96                        04            .byte	4
04291 0E97                        00            .byte	0
04292 0E98                        10            .byte	$10
04293 0E99                        08            .byte	8
04294 0E9A                        00            .byte	0
04295 0E9B                        10            .byte	$10
04296                                           ! 864 , 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04297 0E9C                        0C            .byte	$C
04298 0E9D                        00            .byte	0
04299 0E9E                        10            .byte	$10
04300 0E9F                        10            .byte	$10
04301 0EA0                        00            .byte	0
04302 0EA1                        0C            .byte	$C
04303 0EA2                        10            .byte	$10
04304 0EA3                        00            .byte	0
04305 0EA4                        08            .byte	8
04306 0EA5                        10            .byte	$10
04307 0EA6                        00            .byte	0
04308 0EA7                        04            .byte	4
04309 0EA8                        10            .byte	$10
04310                                           ! 865   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EA9                        08            .byte	8
04312 0EAA                        08            .byte	8
04313 0EAB                        10            .byte	$10
04314 0EAC                        0A            .byte	$A
04315 0EAD                        08            .byte	8
04316 0EAE                        10            .byte	$10
04317 0EAF                        0C            .byte	$C
04318 0EB0                        08            .byte	8
04319 0EB1                        10            .byte	$10
04320 0EB2                        0E            .byte	$E
04321 0EB3                        08            .byte	8
04322 0EB4                        10            .byte	$10
04323 0EB5                        10            .byte	$10
04324 0EB6                        08            .byte	8
04325 0EB7                        10            .byte	$10
04326 0EB8                        10            .byte	$10
04327 0EB9                        08            .byte	8
04328 0EBA                        0E            .byte	$E
04329 0EBB                        10            .byte	$10
04330 0EBC                        08            .byte	8
04331 0EBD                        0C            .byte	$C
04332 0EBE                        10            .byte	$10
04333 0EBF                        08            .byte	8
04334 0EC0                        0A            .byte	$A
04335                                           ! 866   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0EC1                        10            .byte	$10
04337 0EC2                        08            .byte	8
04338 0EC3                        08            .byte	8
04339 0EC4                        10            .byte	$10
04340 0EC5                        0A            .byte	$A
04341 0EC6                        08            .byte	8
04342 0EC7                        10            .byte	$10
04343 0EC8                        0C            .byte	$C
04344 0EC9                        08            .byte	8
04345 0ECA                        10            .byte	$10
04346 0ECB                        0E            .byte	$E
04347 0ECC                        08            .byte	8
04348 0ECD                        10            .byte	$10
04349 0ECE                        10            .byte	$10
04350 0ECF                        08            .byte	8
04351 0ED0                        0E            .byte	$E
04352 0ED1                        10            .byte	$10
04353 0ED2                        08            .byte	8
04354 0ED3                        0C            .byte	$C
04355 0ED4                        10            .byte	$10
04356 0ED5                        08            .byte	8
04357 0ED6                        0A            .byte	$A
04358 0ED7                        10            .byte	$10
04359 0ED8                        08            .byte	8
04360                                           ! 867   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0ED9                        08            .byte	8
04362 0EDA                        10            .byte	$10
04363 0EDB                        08            .byte	8
04364 0EDC                        08            .byte	8
04365 0EDD                        10            .byte	$10
04366 0EDE                        0A            .byte	$A
04367 0EDF                        08            .byte	8
04368 0EE0                        10            .byte	$10
04369 0EE1                        0C            .byte	$C
04370 0EE2                        08            .byte	8
04371 0EE3                        10            .byte	$10
04372 0EE4                        0E            .byte	$E
04373 0EE5                        08            .byte	8
04374 0EE6                        10            .byte	$10
04375 0EE7                        10            .byte	$10
04376 0EE8                        08            .byte	8
04377 0EE9                        0E            .byte	$E
04378 0EEA                        10            .byte	$10
04379 0EEB                        08            .byte	8
04380 0EEC                        0C            .byte	$C
04381 0EED                        10            .byte	$10
04382 0EEE                        08            .byte	8
04383 0EEF                        0A            .byte	$A
04384 0EF0                        10            .byte	$10
04385                                           ! 868   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EF1                        0B            .byte	$B
04387 0EF2                        0B            .byte	$B
04388 0EF3                        10            .byte	$10
04389 0EF4                        0C            .byte	$C
04390 0EF5                        0B            .byte	$B
04391 0EF6                        10            .byte	$10
04392 0EF7                        0D            .byte	$D
04393 0EF8                        0B            .byte	$B
04394 0EF9                        10            .byte	$10
04395 0EFA                        0F            .byte	$F
04396 0EFB                        0B            .byte	$B
04397 0EFC                        10            .byte	$10
04398 0EFD                        10            .byte	$10
04399 0EFE                        0B            .byte	$B
04400 0EFF                        10            .byte	$10
04401 0F00                        10            .byte	$10
04402 0F01                        0B            .byte	$B
04403 0F02                        0F            .byte	$F
04404 0F03                        10            .byte	$10
04405 0F04                        0B            .byte	$B
04406 0F05                        0D            .byte	$D
04407 0F06                        10            .byte	$10
04408 0F07                        0B            .byte	$B
04409 0F08                        0C            .byte	$C
04410                                           ! 869   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F09                        10            .byte	$10
04412 0F0A                        0B            .byte	$B
04413 0F0B                        0B            .byte	$B
04414 0F0C                        10            .byte	$10
04415 0F0D                        0C            .byte	$C
04416 0F0E                        0B            .byte	$B
04417 0F0F                        10            .byte	$10
04418 0F10                        0D            .byte	$D
04419 0F11                        0B            .byte	$B
04420 0F12                        10            .byte	$10
04421 0F13                        0F            .byte	$F
04422 0F14                        0B            .byte	$B
04423 0F15                        10            .byte	$10
04424 0F16                        10            .byte	$10
04425 0F17                        0B            .byte	$B
04426 0F18                        0F            .byte	$F
04427 0F19                        10            .byte	$10
04428 0F1A                        0B            .byte	$B
04429 0F1B                        0D            .byte	$D
04430 0F1C                        10            .byte	$10
04431 0F1D                        0B            .byte	$B
04432 0F1E                        0C            .byte	$C
04433 0F1F                        10            .byte	$10
04434 0F20                        0B            .byte	$B
04435                                           ! 870   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F21                        0B            .byte	$B
04437 0F22                        10            .byte	$10
04438 0F23                        0B            .byte	$B
04439 0F24                        0B            .byte	$B
04440 0F25                        10            .byte	$10
04441 0F26                        0C            .byte	$C
04442 0F27                        0B            .byte	$B
04443 0F28                        10            .byte	$10
04444 0F29                        0D            .byte	$D
04445 0F2A                        0B            .byte	$B
04446 0F2B                        10            .byte	$10
04447 0F2C                        0F            .byte	$F
04448 0F2D                        0B            .byte	$B
04449 0F2E                        10            .byte	$10
04450 0F2F                        10            .byte	$10
04451 0F30                        0B            .byte	$B
04452 0F31                        0F            .byte	$F
04453 0F32                        10            .byte	$10
04454 0F33                        0B            .byte	$B
04455 0F34                        0D            .byte	$D
04456 0F35                        10            .byte	$10
04457 0F36                        0B            .byte	$B
04458 0F37                        0C            .byte	$C
04459 0F38                        10            .byte	$10
04460                                           ! 871   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F39                        00            .byte	0
04462 0F3A                        00            .byte	0
04463 0F3B                        00            .byte	0
04464 0F3C                        00            .byte	0
04465 0F3D                        00            .byte	0
04466 0F3E                        00            .byte	0
04467 0F3F                        00            .byte	0
04468 0F40                        00            .byte	0
04469 0F41                        00            .byte	0
04470 0F42                        00            .byte	0
04471 0F43                        00            .byte	0
04472 0F44                        00            .byte	0
04473 0F45                        00            .byte	0
04474 0F46                        00            .byte	0
04475 0F47                        00            .byte	0
04476 0F48                        00            .byte	0
04477 0F49                        00            .byte	0
04478 0F4A                        00            .byte	0
04479 0F4B                        00            .byte	0
04480 0F4C                        00            .byte	0
04481 0F4D                        00            .byte	0
04482 0F4E                        00            .byte	0
04483 0F4F                        00            .byte	0
04484                                           ! 872 };
04485 0F50                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 873 static Bit8u static_functionality[0x10]=
04488                                           ! 874 {
04489                       00000F51            _static_functionality:
04490                                           ! 875          0xff,
04491 0F51                        FF            .byte	$FF
04492                                           ! 876          0xe0,
04493 0F52                        E0            .byte	$E0
04494                                           ! 877          0x0f,
04495 0F53                        0F            .byte	$F
04496                                           ! 878          0x00, 0x00, 0x00, 0x00,
04497 0F54                        00            .byte	0
04498 0F55                        00            .byte	0
04499 0F56                        00            .byte	0
04500 0F57                        00            .byte	0
04501                                           ! 879          0x07,
04502 0F58                        07            .byte	7
04503                                           ! 880          0x02,
04504 0F59                        02            .byte	2
04505                                           ! 881          0x08,
04506 0F5A                        08            .byte	8
04507                                           ! 882          0xe7,
04508 0F5B                        E7            .byte	$E7
04509                                           ! 883          0x0c,
04510 0F5C                        0C            .byte	$C
04511                                           ! 884          0x00,
04512 0F5D                        00            .byte	0
04513                                           ! 885          0x00,
04514 0F5E                        00            .byte	0
04515                                           ! 886          0x00,
04516 0F5F                        00            .byte	0
04517                                           ! 887          0x00
04518                                           ! 888 };
04519 0F60                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 889 static Bit8u vgafont8[256*8]=
04522                                           ! 890 {
04523                       00000F61            _vgafont8:
04524                                           ! 891  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F61                        00            .byte	0
04526 0F62                        00            .byte	0
04527 0F63                        00            .byte	0
04528 0F64                        00            .byte	0
04529 0F65                        00            .byte	0
04530 0F66                        00            .byte	0
04531 0F67                        00            .byte	0
04532 0F68                        00            .byte	0
04533                                           ! 892  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F69                        7E            .byte	$7E
04535 0F6A                        81            .byte	$81
04536 0F6B                        A5            .byte	$A5
04537 0F6C                        81            .byte	$81
04538 0F6D                        BD            .byte	$BD
04539 0F6E                        99            .byte	$99
04540 0F6F                        81            .byte	$81
04541 0F70                        7E            .byte	$7E
04542                                           ! 893  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F71                        7E            .byte	$7E
04544 0F72                        FF            .byte	$FF
04545 0F73                        DB            .byte	$DB
04546 0F74                        FF            .byte	$FF
04547 0F75                        C3            .byte	$C3
04548 0F76                        E7            .byte	$E7
04549 0F77                        FF            .byte	$FF
04550 0F78                        7E            .byte	$7E
04551                                           ! 894  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F79                        6C            .byte	$6C
04553 0F7A                        FE            .byte	$FE
04554 0F7B                        FE            .byte	$FE
04555 0F7C                        FE            .byte	$FE
04556 0F7D                        7C            .byte	$7C
04557 0F7E                        38            .byte	$38
04558 0F7F                        10            .byte	$10
04559 0F80                        00            .byte	0
04560                                           ! 895  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F81                        10            .byte	$10
04562 0F82                        38            .byte	$38
04563 0F83                        7C            .byte	$7C
04564 0F84                        FE            .byte	$FE
04565 0F85                        7C            .byte	$7C
04566 0F86                        38            .byte	$38
04567 0F87                        10            .byte	$10
04568 0F88                        00            .byte	0
04569                                           ! 896  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F89                        38            .byte	$38
04571 0F8A                        7C            .byte	$7C
04572 0F8B                        38            .byte	$38
04573 0F8C                        FE            .byte	$FE
04574 0F8D                        FE            .byte	$FE
04575 0F8E                        7C            .byte	$7C
04576 0F8F                        38            .byte	$38
04577 0F90                        7C            .byte	$7C
04578                                           ! 897  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F91                        10            .byte	$10
04580 0F92                        10            .byte	$10
04581 0F93                        38            .byte	$38
04582 0F94                        7C            .byte	$7C
04583 0F95                        FE            .byte	$FE
04584 0F96                        7C            .byte	$7C
04585 0F97                        38            .byte	$38
04586 0F98                        7C            .byte	$7C
04587                                           ! 898  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0F99                        00            .byte	0
04589 0F9A                        00            .byte	0
04590 0F9B                        18            .byte	$18
04591 0F9C                        3C            .byte	$3C
04592 0F9D                        3C            .byte	$3C
04593 0F9E                        18            .byte	$18
04594 0F9F                        00            .byte	0
04595 0FA0                        00            .byte	0
04596                                           ! 899  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0FA1                        FF            .byte	$FF
04598 0FA2                        FF            .byte	$FF
04599 0FA3                        E7            .byte	$E7
04600 0FA4                        C3            .byte	$C3
04601 0FA5                        C3            .byte	$C3
04602 0FA6                        E7            .byte	$E7
04603 0FA7                        FF            .byte	$FF
04604 0FA8                        FF            .byte	$FF
04605                                           ! 900  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FA9                        00            .byte	0
04607 0FAA                        3C            .byte	$3C
04608 0FAB                        66            .byte	$66
04609 0FAC                        42            .byte	$42
04610 0FAD                        42            .byte	$42
04611 0FAE                        66            .byte	$66
04612 0FAF                        3C            .byte	$3C
04613 0FB0                        00            .byte	0
04614                                           ! 901  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FB1                        FF            .byte	$FF
04616 0FB2                        C3            .byte	$C3
04617 0FB3                        99            .byte	$99
04618 0FB4                        BD            .byte	$BD
04619 0FB5                        BD            .byte	$BD
04620 0FB6                        99            .byte	$99
04621 0FB7                        C3            .byte	$C3
04622 0FB8                        FF            .byte	$FF
04623                                           ! 902  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FB9                        0F            .byte	$F
04625 0FBA                        07            .byte	7
04626 0FBB                        0F            .byte	$F
04627 0FBC                        7D            .byte	$7D
04628 0FBD                        CC            .byte	$CC
04629 0FBE                        CC            .byte	$CC
04630 0FBF                        CC            .byte	$CC
04631 0FC0                        78            .byte	$78
04632                                           ! 903  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FC1                        3C            .byte	$3C
04634 0FC2                        66            .byte	$66
04635 0FC3                        66            .byte	$66
04636 0FC4                        66            .byte	$66
04637 0FC5                        3C            .byte	$3C
04638 0FC6                        18            .byte	$18
04639 0FC7                        7E            .byte	$7E
04640 0FC8                        18            .byte	$18
04641                                           ! 904  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04642 0FC9                        3F            .byte	$3F
04643 0FCA                        33            .byte	$33
04644 0FCB                        3F            .byte	$3F
04645 0FCC                        30            .byte	$30
04646 0FCD                        30            .byte	$30
04647 0FCE                        70            .byte	$70
04648 0FCF                        F0            .byte	$F0
04649 0FD0                        E0            .byte	$E0
04650                                           ! 905  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04651 0FD1                        7F            .byte	$7F
04652 0FD2                        63            .byte	$63
04653 0FD3                        7F            .byte	$7F
04654 0FD4                        63            .byte	$63
04655 0FD5                        63            .byte	$63
04656 0FD6                        67            .byte	$67
04657 0FD7                        E6            .byte	$E6
04658 0FD8                        C0            .byte	$C0
04659                                           ! 906  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x
04660 0FD9                        99            .byte	$99
04661 0FDA                        5A            .byte	$5A
04662 0FDB                        3C            .byte	$3C
04663 0FDC                        E7            .byte	$E7
04664 0FDD                        E7            .byte	$E7
04665 0FDE                        3C            .byte	$3C
04666 0FDF                        5A            .byte	$5A
04667                                           ! 906 99,
04668 0FE0                        99            .byte	$99
04669                                           ! 907  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04670 0FE1                        80            .byte	$80
04671 0FE2                        E0            .byte	$E0
04672 0FE3                        F8            .byte	$F8
04673 0FE4                        FE            .byte	$FE
04674 0FE5                        F8            .byte	$F8
04675 0FE6                        E0            .byte	$E0
04676 0FE7                        80            .byte	$80
04677 0FE8                        00            .byte	0
04678                                           ! 908  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FE9                        02            .byte	2
04680 0FEA                        0E            .byte	$E
04681 0FEB                        3E            .byte	$3E
04682 0FEC                        FE            .byte	$FE
04683 0FED                        3E            .byte	$3E
04684 0FEE                        0E            .byte	$E
04685 0FEF                        02            .byte	2
04686 0FF0                        00            .byte	0
04687                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FF1                        18            .byte	$18
04689 0FF2                        3C            .byte	$3C
04690 0FF3                        7E            .byte	$7E
04691 0FF4                        18            .byte	$18
04692 0FF5                        18            .byte	$18
04693 0FF6                        7E            .byte	$7E
04694 0FF7                        3C            .byte	$3C
04695 0FF8                        18            .byte	$18
04696                                           ! 910  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 0FF9                        66            .byte	$66
04698 0FFA                        66            .byte	$66
04699 0FFB                        66            .byte	$66
04700 0FFC                        66            .byte	$66
04701 0FFD                        66            .byte	$66
04702 0FFE                        00            .byte	0
04703 0FFF                        66            .byte	$66
04704 1000                        00            .byte	0
04705                                           ! 911  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 1001                        7F            .byte	$7F
04707 1002                        DB            .byte	$DB
04708 1003                        DB            .byte	$DB
04709 1004                        7B            .byte	$7B
04710 1005                        1B            .byte	$1B
04711 1006                        1B            .byte	$1B
04712 1007                        1B            .byte	$1B
04713 1008                        00            .byte	0
04714                                           ! 912  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1009                        3E            .byte	$3E
04716 100A                        63            .byte	$63
04717 100B                        38            .byte	$38
04718 100C                        6C            .byte	$6C
04719 100D                        6C            .byte	$6C
04720 100E                        38            .byte	$38
04721 100F                        CC            .byte	$CC
04722 1010                        78            .byte	$78
04723                                           ! 913  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 1011                        00            .byte	0
04725 1012                        00            .byte	0
04726 1013                        00            .byte	0
04727 1014                        00            .byte	0
04728 1015                        7E            .byte	$7E
04729 1016                        7E            .byte	$7E
04730 1017                        7E            .byte	$7E
04731 1018                        00            .byte	0
04732                                           ! 914  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1019                        18            .byte	$18
04734 101A                        3C            .byte	$3C
04735 101B                        7E            .byte	$7E
04736 101C                        18            .byte	$18
04737 101D                        7E            .byte	$7E
04738 101E                        3C            .byte	$3C
04739 101F                        18            .byte	$18
04740 1020                        FF            .byte	$FF
04741                                           ! 915  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 1021                        18            .byte	$18
04743 1022                        3C            .byte	$3C
04744 1023                        7E            .byte	$7E
04745 1024                        18            .byte	$18
04746 1025                        18            .byte	$18
04747 1026                        18            .byte	$18
04748 1027                        18            .byte	$18
04749 1028                        00            .byte	0
04750                                           ! 916  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1029                        18            .byte	$18
04752 102A                        18            .byte	$18
04753 102B                        18            .byte	$18
04754 102C                        18            .byte	$18
04755 102D                        7E            .byte	$7E
04756 102E                        3C            .byte	$3C
04757 102F                        18            .byte	$18
04758 1030                        00            .byte	0
04759                                           ! 917  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 1031                        00            .byte	0
04761 1032                        18            .byte	$18
04762 1033                        0C            .byte	$C
04763 1034                        FE            .byte	$FE
04764 1035                        0C            .byte	$C
04765 1036                        18            .byte	$18
04766 1037                        00            .byte	0
04767 1038                        00            .byte	0
04768                                           ! 918  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1039                        00            .byte	0
04770 103A                        30            .byte	$30
04771 103B                        60            .byte	$60
04772 103C                        FE            .byte	$FE
04773 103D                        60            .byte	$60
04774 103E                        30            .byte	$30
04775 103F                        00            .byte	0
04776 1040                        00            .byte	0
04777                                           ! 919  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 1041                        00            .byte	0
04779 1042                        00            .byte	0
04780 1043                        C0            .byte	$C0
04781 1044                        C0            .byte	$C0
04782 1045                        C0            .byte	$C0
04783 1046                        FE            .byte	$FE
04784 1047                        00            .byte	0
04785 1048                        00            .byte	0
04786                                           ! 920  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1049                        00            .byte	0
04788 104A                        24            .byte	$24
04789 104B                        66            .byte	$66
04790 104C                        FF            .byte	$FF
04791 104D                        66            .byte	$66
04792 104E                        24            .byte	$24
04793 104F                        00            .byte	0
04794 1050                        00            .byte	0
04795                                           ! 921  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 1051                        00            .byte	0
04797 1052                        18            .byte	$18
04798 1053                        3C            .byte	$3C
04799 1054                        7E            .byte	$7E
04800 1055                        FF            .byte	$FF
04801 1056                        FF            .byte	$FF
04802 1057                        00            .byte	0
04803 1058                        00            .byte	0
04804                                           ! 922  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1059                        00            .byte	0
04806 105A                        FF            .byte	$FF
04807 105B                        FF            .byte	$FF
04808 105C                        7E            .byte	$7E
04809 105D                        3C            .byte	$3C
04810 105E                        18            .byte	$18
04811 105F                        00            .byte	0
04812 1060                        00            .byte	0
04813                                           ! 923  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 1061                        00            .byte	0
04815 1062                        00            .byte	0
04816 1063                        00            .byte	0
04817 1064                        00            .byte	0
04818 1065                        00            .byte	0
04819 1066                        00            .byte	0
04820 1067                        00            .byte	0
04821 1068                        00            .byte	0
04822                                           ! 924  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1069                        30            .byte	$30
04824 106A                        78            .byte	$78
04825 106B                        78            .byte	$78
04826 106C                        30            .byte	$30
04827 106D                        30            .byte	$30
04828 106E                        00            .byte	0
04829 106F                        30            .byte	$30
04830 1070                        00            .byte	0
04831                                           ! 925  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 1071                        6C            .byte	$6C
04833 1072                        6C            .byte	$6C
04834 1073                        6C            .byte	$6C
04835 1074                        00            .byte	0
04836 1075                        00            .byte	0
04837 1076                        00            .byte	0
04838 1077                        00            .byte	0
04839 1078                        00            .byte	0
04840                                           ! 926  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1079                        6C            .byte	$6C
04842 107A                        6C            .byte	$6C
04843 107B                        FE            .byte	$FE
04844 107C                        6C            .byte	$6C
04845 107D                        FE            .byte	$FE
04846 107E                        6C            .byte	$6C
04847 107F                        6C            .byte	$6C
04848 1080                        00            .byte	0
04849                                           ! 927  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 1081                        30            .byte	$30
04851 1082                        7C            .byte	$7C
04852 1083                        C0            .byte	$C0
04853 1084                        78            .byte	$78
04854 1085                        0C            .byte	$C
04855 1086                        F8            .byte	$F8
04856 1087                        30            .byte	$30
04857 1088                        00            .byte	0
04858                                           ! 928  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1089                        00            .byte	0
04860 108A                        C6            .byte	$C6
04861 108B                        CC            .byte	$CC
04862 108C                        18            .byte	$18
04863 108D                        30            .byte	$30
04864 108E                        66            .byte	$66
04865 108F                        C6            .byte	$C6
04866 1090                        00            .byte	0
04867                                           ! 929  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 1091                        38            .byte	$38
04869 1092                        6C            .byte	$6C
04870 1093                        38            .byte	$38
04871 1094                        76            .byte	$76
04872 1095                        DC            .byte	$DC
04873 1096                        CC            .byte	$CC
04874 1097                        76            .byte	$76
04875 1098                        00            .byte	0
04876                                           ! 930  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 1099                        60            .byte	$60
04878 109A                        60            .byte	$60
04879 109B                        C0            .byte	$C0
04880 109C                        00            .byte	0
04881 109D                        00            .byte	0
04882 109E                        00            .byte	0
04883 109F                        00            .byte	0
04884 10A0                        00            .byte	0
04885                                           ! 931  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 10A1                        18            .byte	$18
04887 10A2                        30            .byte	$30
04888 10A3                        60            .byte	$60
04889 10A4                        60            .byte	$60
04890 10A5                        60            .byte	$60
04891 10A6                        30            .byte	$30
04892 10A7                        18            .byte	$18
04893 10A8                        00            .byte	0
04894                                           ! 932  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10A9                        60            .byte	$60
04896 10AA                        30            .byte	$30
04897 10AB                        18            .byte	$18
04898 10AC                        18            .byte	$18
04899 10AD                        18            .byte	$18
04900 10AE                        30            .byte	$30
04901 10AF                        60            .byte	$60
04902 10B0                        00            .byte	0
04903                                           ! 933  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10B1                        00            .byte	0
04905 10B2                        66            .byte	$66
04906 10B3                        3C            .byte	$3C
04907 10B4                        FF            .byte	$FF
04908 10B5                        3C            .byte	$3C
04909 10B6                        66            .byte	$66
04910 10B7                        00            .byte	0
04911 10B8                        00            .byte	0
04912                                           ! 934  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10B9                        00            .byte	0
04914 10BA                        30            .byte	$30
04915 10BB                        30            .byte	$30
04916 10BC                        FC            .byte	$FC
04917 10BD                        30            .byte	$30
04918 10BE                        30            .byte	$30
04919 10BF                        00            .byte	0
04920 10C0                        00            .byte	0
04921                                           ! 935  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10C1                        00            .byte	0
04923 10C2                        00            .byte	0
04924 10C3                        00            .byte	0
04925 10C4                        00            .byte	0
04926 10C5                        00            .byte	0
04927 10C6                        30            .byte	$30
04928 10C7                        30            .byte	$30
04929 10C8                        60            .byte	$60
04930                                           ! 936  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10C9                        00            .byte	0
04932 10CA                        00            .byte	0
04933 10CB                        00            .byte	0
04934 10CC                        FC            .byte	$FC
04935 10CD                        00            .byte	0
04936 10CE                        00            .byte	0
04937 10CF                        00            .byte	0
04938 10D0                        00            .byte	0
04939                                           ! 937  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10D1                        00            .byte	0
04941 10D2                        00            .byte	0
04942 10D3                        00            .byte	0
04943 10D4                        00            .byte	0
04944 10D5                        00            .byte	0
04945 10D6                        30            .byte	$30
04946 10D7                        30            .byte	$30
04947 10D8                        00            .byte	0
04948                                           ! 938  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10D9                        06            .byte	6
04950 10DA                        0C            .byte	$C
04951 10DB                        18            .byte	$18
04952 10DC                        30            .byte	$30
04953 10DD                        60            .byte	$60
04954 10DE                        C0            .byte	$C0
04955 10DF                        80            .byte	$80
04956 10E0                        00            .byte	0
04957                                           ! 939  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10E1                        7C            .byte	$7C
04959 10E2                        C6            .byte	$C6
04960 10E3                        CE            .byte	$CE
04961 10E4                        DE            .byte	$DE
04962 10E5                        F6            .byte	$F6
04963 10E6                        E6            .byte	$E6
04964 10E7                        7C            .byte	$7C
04965 10E8                        00            .byte	0
04966                                           ! 940  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10E9                        30            .byte	$30
04968 10EA                        70            .byte	$70
04969 10EB                        30            .byte	$30
04970 10EC                        30            .byte	$30
04971 10ED                        30            .byte	$30
04972 10EE                        30            .byte	$30
04973 10EF                        FC            .byte	$FC
04974 10F0                        00            .byte	0
04975                                           ! 941  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10F1                        78            .byte	$78
04977 10F2                        CC            .byte	$CC
04978 10F3                        0C            .byte	$C
04979 10F4                        38            .byte	$38
04980 10F5                        60            .byte	$60
04981 10F6                        CC            .byte	$CC
04982 10F7                        FC            .byte	$FC
04983 10F8                        00            .byte	0
04984                                           ! 942  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 10F9                        78            .byte	$78
04986 10FA                        CC            .byte	$CC
04987 10FB                        0C            .byte	$C
04988 10FC                        38            .byte	$38
04989 10FD                        0C            .byte	$C
04990 10FE                        CC            .byte	$CC
04991 10FF                        78            .byte	$78
04992 1100                        00            .byte	0
04993                                           ! 943  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 1101                        1C            .byte	$1C
04995 1102                        3C            .byte	$3C
04996 1103                        6C            .byte	$6C
04997 1104                        CC            .byte	$CC
04998 1105                        FE            .byte	$FE
04999 1106                        0C            .byte	$C
05000 1107                        1E            .byte	$1E
05001 1108                        00            .byte	0
05002                                           ! 944  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1109                        FC            .byte	$FC
05004 110A                        C0            .byte	$C0
05005 110B                        F8            .byte	$F8
05006 110C                        0C            .byte	$C
05007 110D                        0C            .byte	$C
05008 110E                        CC            .byte	$CC
05009 110F                        78            .byte	$78
05010 1110                        00            .byte	0
05011                                           ! 945  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 1111                        38            .byte	$38
05013 1112                        60            .byte	$60
05014 1113                        C0            .byte	$C0
05015 1114                        F8            .byte	$F8
05016 1115                        CC            .byte	$CC
05017 1116                        CC            .byte	$CC
05018 1117                        78            .byte	$78
05019 1118                        00            .byte	0
05020                                           ! 946  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05021 1119                        FC            .byte	$FC
05022 111A                        CC            .byte	$CC
05023 111B                        0C            .byte	$C
05024 111C                        18            .byte	$18
05025 111D                        30            .byte	$30
05026 111E                        30            .byte	$30
05027 111F                        30            .byte	$30
05028 1120                        00            .byte	0
05029                                           ! 947  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05030 1121                        78            .byte	$78
05031 1122                        CC            .byte	$CC
05032 1123                        CC            .byte	$CC
05033 1124                        78            .byte	$78
05034 1125                        CC            .byte	$CC
05035 1126                        CC            .byte	$CC
05036 1127                        78            .byte	$78
05037 1128                        00            .byte	0
05038                                           ! 948  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18
05039 1129                        78            .byte	$78
05040 112A                        CC            .byte	$CC
05041 112B                        CC            .byte	$CC
05042 112C                        7C            .byte	$7C
05043 112D                        0C            .byte	$C
05044                                           ! 948 , 0x70, 0x00,
05045 112E                        18            .byte	$18
05046 112F                        70            .byte	$70
05047 1130                        00            .byte	0
05048                                           ! 949  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 1131                        00            .byte	0
05050 1132                        30            .byte	$30
05051 1133                        30            .byte	$30
05052 1134                        00            .byte	0
05053 1135                        00            .byte	0
05054 1136                        30            .byte	$30
05055 1137                        30            .byte	$30
05056 1138                        00            .byte	0
05057                                           ! 950  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1139                        00            .byte	0
05059 113A                        30            .byte	$30
05060 113B                        30            .byte	$30
05061 113C                        00            .byte	0
05062 113D                        00            .byte	0
05063 113E                        30            .byte	$30
05064 113F                        30            .byte	$30
05065 1140                        60            .byte	$60
05066                                           ! 951  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 1141                        18            .byte	$18
05068 1142                        30            .byte	$30
05069 1143                        60            .byte	$60
05070 1144                        C0            .byte	$C0
05071 1145                        60            .byte	$60
05072 1146                        30            .byte	$30
05073 1147                        18            .byte	$18
05074 1148                        00            .byte	0
05075                                           ! 952  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1149                        00            .byte	0
05077 114A                        00            .byte	0
05078 114B                        FC            .byte	$FC
05079 114C                        00            .byte	0
05080 114D                        00            .byte	0
05081 114E                        FC            .byte	$FC
05082 114F                        00            .byte	0
05083 1150                        00            .byte	0
05084                                           ! 953  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 1151                        60            .byte	$60
05086 1152                        30            .byte	$30
05087 1153                        18            .byte	$18
05088 1154                        0C            .byte	$C
05089 1155                        18            .byte	$18
05090 1156                        30            .byte	$30
05091 1157                        60            .byte	$60
05092 1158                        00            .byte	0
05093                                           ! 954  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1159                        78            .byte	$78
05095 115A                        CC            .byte	$CC
05096 115B                        0C            .byte	$C
05097 115C                        18            .byte	$18
05098 115D                        30            .byte	$30
05099 115E                        00            .byte	0
05100 115F                        30            .byte	$30
05101 1160                        00            .byte	0
05102                                           ! 955  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 1161                        7C            .byte	$7C
05104 1162                        C6            .byte	$C6
05105 1163                        DE            .byte	$DE
05106 1164                        DE            .byte	$DE
05107 1165                        DE            .byte	$DE
05108 1166                        C0            .byte	$C0
05109 1167                        78            .byte	$78
05110 1168                        00            .byte	0
05111                                           ! 956  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1169                        30            .byte	$30
05113 116A                        78            .byte	$78
05114 116B                        CC            .byte	$CC
05115 116C                        CC            .byte	$CC
05116 116D                        FC            .byte	$FC
05117 116E                        CC            .byte	$CC
05118 116F                        CC            .byte	$CC
05119 1170                        00            .byte	0
05120                                           ! 957  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 1171                        FC            .byte	$FC
05122 1172                        66            .byte	$66
05123 1173                        66            .byte	$66
05124 1174                        7C            .byte	$7C
05125 1175                        66            .byte	$66
05126 1176                        66            .byte	$66
05127 1177                        FC            .byte	$FC
05128 1178                        00            .byte	0
05129                                           ! 958  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1179                        3C            .byte	$3C
05131 117A                        66            .byte	$66
05132 117B                        C0            .byte	$C0
05133 117C                        C0            .byte	$C0
05134 117D                        C0            .byte	$C0
05135 117E                        66            .byte	$66
05136 117F                        3C            .byte	$3C
05137 1180                        00            .byte	0
05138                                           ! 959  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 1181                        F8            .byte	$F8
05140 1182                        6C            .byte	$6C
05141 1183                        66            .byte	$66
05142 1184                        66            .byte	$66
05143 1185                        66            .byte	$66
05144 1186                        6C            .byte	$6C
05145 1187                        F8            .byte	$F8
05146 1188                        00            .byte	0
05147                                           ! 960  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1189                        FE            .byte	$FE
05149 118A                        62            .byte	$62
05150 118B                        68            .byte	$68
05151 118C                        78            .byte	$78
05152 118D                        68            .byte	$68
05153 118E                        62            .byte	$62
05154 118F                        FE            .byte	$FE
05155 1190                        00            .byte	0
05156                                           ! 961  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 1191                        FE            .byte	$FE
05158 1192                        62            .byte	$62
05159 1193                        68            .byte	$68
05160 1194                        78            .byte	$78
05161 1195                        68            .byte	$68
05162 1196                        60            .byte	$60
05163 1197                        F0            .byte	$F0
05164 1198                        00            .byte	0
05165                                           ! 962  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 1199                        3C            .byte	$3C
05167 119A                        66            .byte	$66
05168 119B                        C0            .byte	$C0
05169 119C                        C0            .byte	$C0
05170 119D                        CE            .byte	$CE
05171 119E                        66            .byte	$66
05172 119F                        3E            .byte	$3E
05173 11A0                        00            .byte	0
05174                                           ! 963  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 11A1                        CC            .byte	$CC
05176 11A2                        CC            .byte	$CC
05177 11A3                        CC            .byte	$CC
05178 11A4                        FC            .byte	$FC
05179 11A5                        CC            .byte	$CC
05180 11A6                        CC            .byte	$CC
05181 11A7                        CC            .byte	$CC
05182 11A8                        00            .byte	0
05183                                           ! 964  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11A9                        78            .byte	$78
05185 11AA                        30            .byte	$30
05186 11AB                        30            .byte	$30
05187 11AC                        30            .byte	$30
05188 11AD                        30            .byte	$30
05189 11AE                        30            .byte	$30
05190 11AF                        78            .byte	$78
05191 11B0                        00            .byte	0
05192                                           ! 965  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11B1                        1E            .byte	$1E
05194 11B2                        0C            .byte	$C
05195 11B3                        0C            .byte	$C
05196 11B4                        0C            .byte	$C
05197 11B5                        CC            .byte	$CC
05198 11B6                        CC            .byte	$CC
05199 11B7                        78            .byte	$78
05200 11B8                        00            .byte	0
05201                                           ! 966  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11B9                        E6            .byte	$E6
05203 11BA                        66            .byte	$66
05204 11BB                        6C            .byte	$6C
05205 11BC                        78            .byte	$78
05206 11BD                        6C            .byte	$6C
05207 11BE                        66            .byte	$66
05208 11BF                        E6            .byte	$E6
05209 11C0                        00            .byte	0
05210                                           ! 967  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11C1                        F0            .byte	$F0
05212 11C2                        60            .byte	$60
05213 11C3                        60            .byte	$60
05214 11C4                        60            .byte	$60
05215 11C5                        62            .byte	$62
05216 11C6                        66            .byte	$66
05217 11C7                        FE            .byte	$FE
05218 11C8                        00            .byte	0
05219                                           ! 968  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11C9                        C6            .byte	$C6
05221 11CA                        EE            .byte	$EE
05222 11CB                        FE            .byte	$FE
05223 11CC                        FE            .byte	$FE
05224 11CD                        D6            .byte	$D6
05225 11CE                        C6            .byte	$C6
05226 11CF                        C6            .byte	$C6
05227 11D0                        00            .byte	0
05228                                           ! 969  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11D1                        C6            .byte	$C6
05230 11D2                        E6            .byte	$E6
05231 11D3                        F6            .byte	$F6
05232 11D4                        DE            .byte	$DE
05233 11D5                        CE            .byte	$CE
05234 11D6                        C6            .byte	$C6
05235 11D7                        C6            .byte	$C6
05236 11D8                        00            .byte	0
05237                                           ! 970  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11D9                        38            .byte	$38
05239 11DA                        6C            .byte	$6C
05240 11DB                        C6            .byte	$C6
05241 11DC                        C6            .byte	$C6
05242 11DD                        C6            .byte	$C6
05243 11DE                        6C            .byte	$6C
05244 11DF                        38            .byte	$38
05245 11E0                        00            .byte	0
05246                                           ! 971  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11E1                        FC            .byte	$FC
05248 11E2                        66            .byte	$66
05249 11E3                        66            .byte	$66
05250 11E4                        7C            .byte	$7C
05251 11E5                        60            .byte	$60
05252 11E6                        60            .byte	$60
05253 11E7                        F0            .byte	$F0
05254 11E8                        00            .byte	0
05255                                           ! 972  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11E9                        78            .byte	$78
05257 11EA                        CC            .byte	$CC
05258 11EB                        CC            .byte	$CC
05259 11EC                        CC            .byte	$CC
05260 11ED                        DC            .byte	$DC
05261 11EE                        78            .byte	$78
05262 11EF                        1C            .byte	$1C
05263 11F0                        00            .byte	0
05264                                           ! 973  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11F1                        FC            .byte	$FC
05266 11F2                        66            .byte	$66
05267 11F3                        66            .byte	$66
05268 11F4                        7C            .byte	$7C
05269 11F5                        6C            .byte	$6C
05270 11F6                        66            .byte	$66
05271 11F7                        E6            .byte	$E6
05272 11F8                        00            .byte	0
05273                                           ! 974  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 11F9                        78            .byte	$78
05275 11FA                        CC            .byte	$CC
05276 11FB                        E0            .byte	$E0
05277 11FC                        70            .byte	$70
05278 11FD                        1C            .byte	$1C
05279 11FE                        CC            .byte	$CC
05280 11FF                        78            .byte	$78
05281 1200                        00            .byte	0
05282                                           ! 975  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 1201                        FC            .byte	$FC
05284 1202                        B4            .byte	$B4
05285 1203                        30            .byte	$30
05286 1204                        30            .byte	$30
05287 1205                        30            .byte	$30
05288 1206                        30            .byte	$30
05289 1207                        78            .byte	$78
05290 1208                        00            .byte	0
05291                                           ! 976  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1209                        CC            .byte	$CC
05293 120A                        CC            .byte	$CC
05294 120B                        CC            .byte	$CC
05295 120C                        CC            .byte	$CC
05296 120D                        CC            .byte	$CC
05297 120E                        CC            .byte	$CC
05298 120F                        FC            .byte	$FC
05299 1210                        00            .byte	0
05300                                           ! 977  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 1211                        CC            .byte	$CC
05302 1212                        CC            .byte	$CC
05303 1213                        CC            .byte	$CC
05304 1214                        CC            .byte	$CC
05305 1215                        CC            .byte	$CC
05306 1216                        78            .byte	$78
05307 1217                        30            .byte	$30
05308 1218                        00            .byte	0
05309                                           ! 978  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1219                        C6            .byte	$C6
05311 121A                        C6            .byte	$C6
05312 121B                        C6            .byte	$C6
05313 121C                        D6            .byte	$D6
05314 121D                        FE            .byte	$FE
05315 121E                        EE            .byte	$EE
05316 121F                        C6            .byte	$C6
05317 1220                        00            .byte	0
05318                                           ! 979  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 1221                        C6            .byte	$C6
05320 1222                        C6            .byte	$C6
05321 1223                        6C            .byte	$6C
05322 1224                        38            .byte	$38
05323 1225                        38            .byte	$38
05324 1226                        6C            .byte	$6C
05325 1227                        C6            .byte	$C6
05326 1228                        00            .byte	0
05327                                           ! 980  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1229                        CC            .byte	$CC
05329 122A                        CC            .byte	$CC
05330 122B                        CC            .byte	$CC
05331 122C                        78            .byte	$78
05332 122D                        30            .byte	$30
05333 122E                        30            .byte	$30
05334 122F                        78            .byte	$78
05335 1230                        00            .byte	0
05336                                           ! 981  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 1231                        FE            .byte	$FE
05338 1232                        C6            .byte	$C6
05339 1233                        8C            .byte	$8C
05340 1234                        18            .byte	$18
05341 1235                        32            .byte	$32
05342 1236                        66            .byte	$66
05343 1237                        FE            .byte	$FE
05344 1238                        00            .byte	0
05345                                           ! 982  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1239                        78            .byte	$78
05347 123A                        60            .byte	$60
05348 123B                        60            .byte	$60
05349 123C                        60            .byte	$60
05350 123D                        60            .byte	$60
05351 123E                        60            .byte	$60
05352 123F                        78            .byte	$78
05353 1240                        00            .byte	0
05354                                           ! 983  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 1241                        C0            .byte	$C0
05356 1242                        60            .byte	$60
05357 1243                        30            .byte	$30
05358 1244                        18            .byte	$18
05359 1245                        0C            .byte	$C
05360 1246                        06            .byte	6
05361 1247                        02            .byte	2
05362 1248                        00            .byte	0
05363                                           ! 984  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1249                        78            .byte	$78
05365 124A                        18            .byte	$18
05366 124B                        18            .byte	$18
05367 124C                        18            .byte	$18
05368 124D                        18            .byte	$18
05369 124E                        18            .byte	$18
05370 124F                        78            .byte	$78
05371 1250                        00            .byte	0
05372                                           ! 985  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 1251                        10            .byte	$10
05374 1252                        38            .byte	$38
05375 1253                        6C            .byte	$6C
05376 1254                        C6            .byte	$C6
05377 1255                        00            .byte	0
05378 1256                        00            .byte	0
05379 1257                        00            .byte	0
05380 1258                        00            .byte	0
05381                                           ! 986  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1259                        00            .byte	0
05383 125A                        00            .byte	0
05384 125B                        00            .byte	0
05385 125C                        00            .byte	0
05386 125D                        00            .byte	0
05387 125E                        00            .byte	0
05388 125F                        00            .byte	0
05389 1260                        FF            .byte	$FF
05390                                           ! 987  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 1261                        30            .byte	$30
05392 1262                        30            .byte	$30
05393 1263                        18            .byte	$18
05394 1264                        00            .byte	0
05395 1265                        00            .byte	0
05396 1266                        00            .byte	0
05397 1267                        00            .byte	0
05398 1268                        00            .byte	0
05399                                           ! 988  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05400 1269                        00            .byte	0
05401 126A                        00            .byte	0
05402 126B                        78            .byte	$78
05403 126C                        0C            .byte	$C
05404 126D                        7C            .byte	$7C
05405 126E                        CC            .byte	$CC
05406 126F                        76            .byte	$76
05407 1270                        00            .byte	0
05408                                           ! 989  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05409 1271                        E0            .byte	$E0
05410 1272                        60            .byte	$60
05411 1273                        60            .byte	$60
05412 1274                        7C            .byte	$7C
05413 1275                        66            .byte	$66
05414 1276                        66            .byte	$66
05415 1277                        DC            .byte	$DC
05416 1278                        00            .byte	0
05417                                           ! 990  0x00, 0x00, 0x78, 0xcc, 
05418 1279                        00            .byte	0
05419 127A                        00            .byte	0
05420 127B                        78            .byte	$78
05421 127C                        CC            .byte	$CC
05422                                           ! 990 0xc0, 0xcc, 0x78, 0x00,
05423 127D                        C0            .byte	$C0
05424 127E                        CC            .byte	$CC
05425 127F                        78            .byte	$78
05426 1280                        00            .byte	0
05427                                           ! 991  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 1281                        1C            .byte	$1C
05429 1282                        0C            .byte	$C
05430 1283                        0C            .byte	$C
05431 1284                        7C            .byte	$7C
05432 1285                        CC            .byte	$CC
05433 1286                        CC            .byte	$CC
05434 1287                        76            .byte	$76
05435 1288                        00            .byte	0
05436                                           ! 992  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1289                        00            .byte	0
05438 128A                        00            .byte	0
05439 128B                        78            .byte	$78
05440 128C                        CC            .byte	$CC
05441 128D                        FC            .byte	$FC
05442 128E                        C0            .byte	$C0
05443 128F                        78            .byte	$78
05444 1290                        00            .byte	0
05445                                           ! 993  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 1291                        38            .byte	$38
05447 1292                        6C            .byte	$6C
05448 1293                        60            .byte	$60
05449 1294                        F0            .byte	$F0
05450 1295                        60            .byte	$60
05451 1296                        60            .byte	$60
05452 1297                        F0            .byte	$F0
05453 1298                        00            .byte	0
05454                                           ! 994  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 1299                        00            .byte	0
05456 129A                        00            .byte	0
05457 129B                        76            .byte	$76
05458 129C                        CC            .byte	$CC
05459 129D                        CC            .byte	$CC
05460 129E                        7C            .byte	$7C
05461 129F                        0C            .byte	$C
05462 12A0                        F8            .byte	$F8
05463                                           ! 995  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 12A1                        E0            .byte	$E0
05465 12A2                        60            .byte	$60
05466 12A3                        6C            .byte	$6C
05467 12A4                        76            .byte	$76
05468 12A5                        66            .byte	$66
05469 12A6                        66            .byte	$66
05470 12A7                        E6            .byte	$E6
05471 12A8                        00            .byte	0
05472                                           ! 996  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12A9                        30            .byte	$30
05474 12AA                        00            .byte	0
05475 12AB                        70            .byte	$70
05476 12AC                        30            .byte	$30
05477 12AD                        30            .byte	$30
05478 12AE                        30            .byte	$30
05479 12AF                        78            .byte	$78
05480 12B0                        00            .byte	0
05481                                           ! 997  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12B1                        0C            .byte	$C
05483 12B2                        00            .byte	0
05484 12B3                        0C            .byte	$C
05485 12B4                        0C            .byte	$C
05486 12B5                        0C            .byte	$C
05487 12B6                        CC            .byte	$CC
05488 12B7                        CC            .byte	$CC
05489 12B8                        78            .byte	$78
05490                                           ! 998  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12B9                        E0            .byte	$E0
05492 12BA                        60            .byte	$60
05493 12BB                        66            .byte	$66
05494 12BC                        6C            .byte	$6C
05495 12BD                        78            .byte	$78
05496 12BE                        6C            .byte	$6C
05497 12BF                        E6            .byte	$E6
05498 12C0                        00            .byte	0
05499                                           ! 999  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12C1                        70            .byte	$70
05501 12C2                        30            .byte	$30
05502 12C3                        30            .byte	$30
05503 12C4                        30            .byte	$30
05504 12C5                        30            .byte	$30
05505 12C6                        30            .byte	$30
05506 12C7                        78            .byte	$78
05507 12C8                        00            .byte	0
05508                                           ! 1000  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12C9                        00            .byte	0
05510 12CA                        00            .byte	0
05511 12CB                        CC            .byte	$CC
05512 12CC                        FE            .byte	$FE
05513 12CD                        FE            .byte	$FE
05514 12CE                        D6            .byte	$D6
05515 12CF                        C6            .byte	$C6
05516 12D0                        00            .byte	0
05517                                           ! 1001  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12D1                        00            .byte	0
05519 12D2                        00            .byte	0
05520 12D3                        F8            .byte	$F8
05521 12D4                        CC            .byte	$CC
05522 12D5                        CC            .byte	$CC
05523 12D6                        CC            .byte	$CC
05524 12D7                        CC            .byte	$CC
05525 12D8                        00            .byte	0
05526                                           ! 1002  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12D9                        00            .byte	0
05528 12DA                        00            .byte	0
05529 12DB                        78            .byte	$78
05530 12DC                        CC            .byte	$CC
05531 12DD                        CC            .byte	$CC
05532 12DE                        CC            .byte	$CC
05533 12DF                        78            .byte	$78
05534 12E0                        00            .byte	0
05535                                           ! 1003  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12E1                        00            .byte	0
05537 12E2                        00            .byte	0
05538 12E3                        DC            .byte	$DC
05539 12E4                        66            .byte	$66
05540 12E5                        66            .byte	$66
05541 12E6                        7C            .byte	$7C
05542 12E7                        60            .byte	$60
05543 12E8                        F0            .byte	$F0
05544                                           ! 1004  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12E9                        00            .byte	0
05546 12EA                        00            .byte	0
05547 12EB                        76            .byte	$76
05548 12EC                        CC            .byte	$CC
05549 12ED                        CC            .byte	$CC
05550 12EE                        7C            .byte	$7C
05551 12EF                        0C            .byte	$C
05552 12F0                        1E            .byte	$1E
05553                                           ! 1005  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12F1                        00            .byte	0
05555 12F2                        00            .byte	0
05556 12F3                        DC            .byte	$DC
05557 12F4                        76            .byte	$76
05558 12F5                        66            .byte	$66
05559 12F6                        60            .byte	$60
05560 12F7                        F0            .byte	$F0
05561 12F8                        00            .byte	0
05562                                           ! 1006  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 12F9                        00            .byte	0
05564 12FA                        00            .byte	0
05565 12FB                        7C            .byte	$7C
05566 12FC                        C0            .byte	$C0
05567 12FD                        78            .byte	$78
05568 12FE                        0C            .byte	$C
05569 12FF                        F8            .byte	$F8
05570 1300                        00            .byte	0
05571                                           ! 1007  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 1301                        10            .byte	$10
05573 1302                        30            .byte	$30
05574 1303                        7C            .byte	$7C
05575 1304                        30            .byte	$30
05576 1305                        30            .byte	$30
05577 1306                        34            .byte	$34
05578 1307                        18            .byte	$18
05579 1308                        00            .byte	0
05580                                           ! 1008  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1309                        00            .byte	0
05582 130A                        00            .byte	0
05583 130B                        CC            .byte	$CC
05584 130C                        CC            .byte	$CC
05585 130D                        CC            .byte	$CC
05586 130E                        CC            .byte	$CC
05587 130F                        76            .byte	$76
05588 1310                        00            .byte	0
05589                                           ! 1009  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 1311                        00            .byte	0
05591 1312                        00            .byte	0
05592 1313                        CC            .byte	$CC
05593 1314                        CC            .byte	$CC
05594 1315                        CC            .byte	$CC
05595 1316                        78            .byte	$78
05596 1317                        30            .byte	$30
05597 1318                        00            .byte	0
05598                                           ! 1010  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1319                        00            .byte	0
05600 131A                        00            .byte	0
05601 131B                        C6            .byte	$C6
05602 131C                        D6            .byte	$D6
05603 131D                        FE            .byte	$FE
05604 131E                        FE            .byte	$FE
05605 131F                        6C            .byte	$6C
05606 1320                        00            .byte	0
05607                                           ! 1011  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 1321                        00            .byte	0
05609 1322                        00            .byte	0
05610 1323                        C6            .byte	$C6
05611 1324                        6C            .byte	$6C
05612 1325                        38            .byte	$38
05613 1326                        6C            .byte	$6C
05614 1327                        C6            .byte	$C6
05615 1328                        00            .byte	0
05616                                           ! 1012  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1329                        00            .byte	0
05618 132A                        00            .byte	0
05619 132B                        CC            .byte	$CC
05620 132C                        CC            .byte	$CC
05621 132D                        CC            .byte	$CC
05622 132E                        7C            .byte	$7C
05623 132F                        0C            .byte	$C
05624 1330                        F8            .byte	$F8
05625                                           ! 1013  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 1331                        00            .byte	0
05627 1332                        00            .byte	0
05628 1333                        FC            .byte	$FC
05629 1334                        98            .byte	$98
05630 1335                        30            .byte	$30
05631 1336                        64            .byte	$64
05632 1337                        FC            .byte	$FC
05633 1338                        00            .byte	0
05634                                           ! 1014  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1339                        1C            .byte	$1C
05636 133A                        30            .byte	$30
05637 133B                        30            .byte	$30
05638 133C                        E0            .byte	$E0
05639 133D                        30            .byte	$30
05640 133E                        30            .byte	$30
05641 133F                        1C            .byte	$1C
05642 1340                        00            .byte	0
05643                                           ! 1015  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 1341                        18            .byte	$18
05645 1342                        18            .byte	$18
05646 1343                        18            .byte	$18
05647 1344                        00            .byte	0
05648 1345                        18            .byte	$18
05649 1346                        18            .byte	$18
05650 1347                        18            .byte	$18
05651 1348                        00            .byte	0
05652                                           ! 1016  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1349                        E0            .byte	$E0
05654 134A                        30            .byte	$30
05655 134B                        30            .byte	$30
05656 134C                        1C            .byte	$1C
05657 134D                        30            .byte	$30
05658 134E                        30            .byte	$30
05659 134F                        E0            .byte	$E0
05660 1350                        00            .byte	0
05661                                           ! 1017  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 1351                        76            .byte	$76
05663 1352                        DC            .byte	$DC
05664 1353                        00            .byte	0
05665 1354                        00            .byte	0
05666 1355                        00            .byte	0
05667 1356                        00            .byte	0
05668 1357                        00            .byte	0
05669 1358                        00            .byte	0
05670                                           ! 1018  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1359                        00            .byte	0
05672 135A                        10            .byte	$10
05673 135B                        38            .byte	$38
05674 135C                        6C            .byte	$6C
05675 135D                        C6            .byte	$C6
05676 135E                        C6            .byte	$C6
05677 135F                        FE            .byte	$FE
05678 1360                        00            .byte	0
05679                                           ! 1019  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 1361                        78            .byte	$78
05681 1362                        CC            .byte	$CC
05682 1363                        C0            .byte	$C0
05683 1364                        CC            .byte	$CC
05684 1365                        78            .byte	$78
05685 1366                        18            .byte	$18
05686 1367                        0C            .byte	$C
05687 1368                        78            .byte	$78
05688                                           ! 1020  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1369                        00            .byte	0
05690 136A                        CC            .byte	$CC
05691 136B                        00            .byte	0
05692 136C                        CC            .byte	$CC
05693 136D                        CC            .byte	$CC
05694 136E                        CC            .byte	$CC
05695 136F                        7E            .byte	$7E
05696 1370                        00            .byte	0
05697                                           ! 1021  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 1371                        1C            .byte	$1C
05699 1372                        00            .byte	0
05700 1373                        78            .byte	$78
05701 1374                        CC            .byte	$CC
05702 1375                        FC            .byte	$FC
05703 1376                        C0            .byte	$C0
05704 1377                        78            .byte	$78
05705 1378                        00            .byte	0
05706                                           ! 1022  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1379                        7E            .byte	$7E
05708 137A                        C3            .byte	$C3
05709 137B                        3C            .byte	$3C
05710 137C                        06            .byte	6
05711 137D                        3E            .byte	$3E
05712 137E                        66            .byte	$66
05713 137F                        3F            .byte	$3F
05714 1380                        00            .byte	0
05715                                           ! 1023  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 1381                        CC            .byte	$CC
05717 1382                        00            .byte	0
05718 1383                        78            .byte	$78
05719 1384                        0C            .byte	$C
05720 1385                        7C            .byte	$7C
05721 1386                        CC            .byte	$CC
05722 1387                        7E            .byte	$7E
05723 1388                        00            .byte	0
05724                                           ! 1024  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1389                        E0            .byte	$E0
05726 138A                        00            .byte	0
05727 138B                        78            .byte	$78
05728 138C                        0C            .byte	$C
05729 138D                        7C            .byte	$7C
05730 138E                        CC            .byte	$CC
05731 138F                        7E            .byte	$7E
05732 1390                        00            .byte	0
05733                                           ! 1025  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 1391                        30            .byte	$30
05735 1392                        30            .byte	$30
05736 1393                        78            .byte	$78
05737 1394                        0C            .byte	$C
05738 1395                        7C            .byte	$7C
05739 1396                        CC            .byte	$CC
05740 1397                        7E            .byte	$7E
05741 1398                        00            .byte	0
05742                                           ! 1026  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 1399                        00            .byte	0
05744 139A                        00            .byte	0
05745 139B                        78            .byte	$78
05746 139C                        C0            .byte	$C0
05747 139D                        C0            .byte	$C0
05748 139E                        78            .byte	$78
05749 139F                        0C            .byte	$C
05750 13A0                        38            .byte	$38
05751                                           ! 1027  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 13A1                        7E            .byte	$7E
05753 13A2                        C3            .byte	$C3
05754 13A3                        3C            .byte	$3C
05755 13A4                        66            .byte	$66
05756 13A5                        7E            .byte	$7E
05757 13A6                        60            .byte	$60
05758 13A7                        3C            .byte	$3C
05759 13A8                        00            .byte	0
05760                                           ! 1028  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13A9                        CC            .byte	$CC
05762 13AA                        00            .byte	0
05763 13AB                        78            .byte	$78
05764 13AC                        CC            .byte	$CC
05765 13AD                        FC            .byte	$FC
05766 13AE                        C0            .byte	$C0
05767 13AF                        78            .byte	$78
05768 13B0                        00            .byte	0
05769                                           ! 1029  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13B1                        E0            .byte	$E0
05771 13B2                        00            .byte	0
05772 13B3                        78            .byte	$78
05773 13B4                        CC            .byte	$CC
05774 13B5                        FC            .byte	$FC
05775 13B6                        C0            .byte	$C0
05776 13B7                        78            .byte	$78
05777 13B8                        00            .byte	0
05778                                           ! 1030  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05779 13B9                        CC            .byte	$CC
05780 13BA                        00            .byte	0
05781 13BB                        70            .byte	$70
05782 13BC                        30            .byte	$30
05783 13BD                        30            .byte	$30
05784 13BE                        30            .byte	$30
05785 13BF                        78            .byte	$78
05786 13C0                        00            .byte	0
05787                                           ! 1031  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05788 13C1                        7C            .byte	$7C
05789 13C2                        C6            .byte	$C6
05790 13C3                        38            .byte	$38
05791 13C4                        18            .byte	$18
05792 13C5                        18            .byte	$18
05793 13C6                        18            .byte	$18
05794 13C7                        3C            .byte	$3C
05795 13C8                        00            .byte	0
05796                                           ! 1032  0xe0, 0x00, 0x
05797 13C9                        E0            .byte	$E0
05798 13CA                        00            .byte	0
05799                                           ! 1032 70, 0x30, 0x30, 0x30, 0x78, 0x00,
05800 13CB                        70            .byte	$70
05801 13CC                        30            .byte	$30
05802 13CD                        30            .byte	$30
05803 13CE                        30            .byte	$30
05804 13CF                        78            .byte	$78
05805 13D0                        00            .byte	0
05806                                           ! 1033  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13D1                        C6            .byte	$C6
05808 13D2                        38            .byte	$38
05809 13D3                        6C            .byte	$6C
05810 13D4                        C6            .byte	$C6
05811 13D5                        FE            .byte	$FE
05812 13D6                        C6            .byte	$C6
05813 13D7                        C6            .byte	$C6
05814 13D8                        00            .byte	0
05815                                           ! 1034  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13D9                        30            .byte	$30
05817 13DA                        30            .byte	$30
05818 13DB                        00            .byte	0
05819 13DC                        78            .byte	$78
05820 13DD                        CC            .byte	$CC
05821 13DE                        FC            .byte	$FC
05822 13DF                        CC            .byte	$CC
05823 13E0                        00            .byte	0
05824                                           ! 1035  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13E1                        1C            .byte	$1C
05826 13E2                        00            .byte	0
05827 13E3                        FC            .byte	$FC
05828 13E4                        60            .byte	$60
05829 13E5                        78            .byte	$78
05830 13E6                        60            .byte	$60
05831 13E7                        FC            .byte	$FC
05832 13E8                        00            .byte	0
05833                                           ! 1036  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13E9                        00            .byte	0
05835 13EA                        00            .byte	0
05836 13EB                        7F            .byte	$7F
05837 13EC                        0C            .byte	$C
05838 13ED                        7F            .byte	$7F
05839 13EE                        CC            .byte	$CC
05840 13EF                        7F            .byte	$7F
05841 13F0                        00            .byte	0
05842                                           ! 1037  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13F1                        3E            .byte	$3E
05844 13F2                        6C            .byte	$6C
05845 13F3                        CC            .byte	$CC
05846 13F4                        FE            .byte	$FE
05847 13F5                        CC            .byte	$CC
05848 13F6                        CC            .byte	$CC
05849 13F7                        CE            .byte	$CE
05850 13F8                        00            .byte	0
05851                                           ! 1038  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 13F9                        78            .byte	$78
05853 13FA                        CC            .byte	$CC
05854 13FB                        00            .byte	0
05855 13FC                        78            .byte	$78
05856 13FD                        CC            .byte	$CC
05857 13FE                        CC            .byte	$CC
05858 13FF                        78            .byte	$78
05859 1400                        00            .byte	0
05860                                           ! 1039  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 1401                        00            .byte	0
05862 1402                        CC            .byte	$CC
05863 1403                        00            .byte	0
05864 1404                        78            .byte	$78
05865 1405                        CC            .byte	$CC
05866 1406                        CC            .byte	$CC
05867 1407                        78            .byte	$78
05868 1408                        00            .byte	0
05869                                           ! 1040  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1409                        00            .byte	0
05871 140A                        E0            .byte	$E0
05872 140B                        00            .byte	0
05873 140C                        78            .byte	$78
05874 140D                        CC            .byte	$CC
05875 140E                        CC            .byte	$CC
05876 140F                        78            .byte	$78
05877 1410                        00            .byte	0
05878                                           ! 1041  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 1411                        78            .byte	$78
05880 1412                        CC            .byte	$CC
05881 1413                        00            .byte	0
05882 1414                        CC            .byte	$CC
05883 1415                        CC            .byte	$CC
05884 1416                        CC            .byte	$CC
05885 1417                        7E            .byte	$7E
05886 1418                        00            .byte	0
05887                                           ! 1042  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1419                        00            .byte	0
05889 141A                        E0            .byte	$E0
05890 141B                        00            .byte	0
05891 141C                        CC            .byte	$CC
05892 141D                        CC            .byte	$CC
05893 141E                        CC            .byte	$CC
05894 141F                        7E            .byte	$7E
05895 1420                        00            .byte	0
05896                                           ! 1043  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 1421                        00            .byte	0
05898 1422                        CC            .byte	$CC
05899 1423                        00            .byte	0
05900 1424                        CC            .byte	$CC
05901 1425                        CC            .byte	$CC
05902 1426                        7C            .byte	$7C
05903 1427                        0C            .byte	$C
05904 1428                        F8            .byte	$F8
05905                                           ! 1044  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1429                        C3            .byte	$C3
05907 142A                        18            .byte	$18
05908 142B                        3C            .byte	$3C
05909 142C                        66            .byte	$66
05910 142D                        66            .byte	$66
05911 142E                        3C            .byte	$3C
05912 142F                        18            .byte	$18
05913 1430                        00            .byte	0
05914                                           ! 1045  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 1431                        CC            .byte	$CC
05916 1432                        00            .byte	0
05917 1433                        CC            .byte	$CC
05918 1434                        CC            .byte	$CC
05919 1435                        CC            .byte	$CC
05920 1436                        CC            .byte	$CC
05921 1437                        78            .byte	$78
05922 1438                        00            .byte	0
05923                                           ! 1046  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1439                        18            .byte	$18
05925 143A                        18            .byte	$18
05926 143B                        7E            .byte	$7E
05927 143C                        C0            .byte	$C0
05928 143D                        C0            .byte	$C0
05929 143E                        7E            .byte	$7E
05930 143F                        18            .byte	$18
05931 1440                        18            .byte	$18
05932                                           ! 1047  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 1441                        38            .byte	$38
05934 1442                        6C            .byte	$6C
05935 1443                        64            .byte	$64
05936 1444                        F0            .byte	$F0
05937 1445                        60            .byte	$60
05938 1446                        E6            .byte	$E6
05939 1447                        FC            .byte	$FC
05940 1448                        00            .byte	0
05941                                           ! 1048  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1449                        CC            .byte	$CC
05943 144A                        CC            .byte	$CC
05944 144B                        78            .byte	$78
05945 144C                        FC            .byte	$FC
05946 144D                        30            .byte	$30
05947 144E                        FC            .byte	$FC
05948 144F                        30            .byte	$30
05949 1450                        30            .byte	$30
05950                                           ! 1049  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 1451                        F8            .byte	$F8
05952 1452                        CC            .byte	$CC
05953 1453                        CC            .byte	$CC
05954 1454                        FA            .byte	$FA
05955 1455                        C6            .byte	$C6
05956 1456                        CF            .byte	$CF
05957 1457                        C6            .byte	$C6
05958 1458                        C7            .byte	$C7
05959                                           ! 1050  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1459                        0E            .byte	$E
05961 145A                        1B            .byte	$1B
05962 145B                        18            .byte	$18
05963 145C                        3C            .byte	$3C
05964 145D                        18            .byte	$18
05965 145E                        18            .byte	$18
05966 145F                        D8            .byte	$D8
05967 1460                        70            .byte	$70
05968                                           ! 1051  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 1461                        1C            .byte	$1C
05970 1462                        00            .byte	0
05971 1463                        78            .byte	$78
05972 1464                        0C            .byte	$C
05973 1465                        7C            .byte	$7C
05974 1466                        CC            .byte	$CC
05975 1467                        7E            .byte	$7E
05976 1468                        00            .byte	0
05977                                           ! 1052  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1469                        38            .byte	$38
05979 146A                        00            .byte	0
05980 146B                        70            .byte	$70
05981 146C                        30            .byte	$30
05982 146D                        30            .byte	$30
05983 146E                        30            .byte	$30
05984 146F                        78            .byte	$78
05985 1470                        00            .byte	0
05986                                           ! 1053  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 1471                        00            .byte	0
05988 1472                        1C            .byte	$1C
05989 1473                        00            .byte	0
05990 1474                        78            .byte	$78
05991 1475                        CC            .byte	$CC
05992 1476                        CC            .byte	$CC
05993 1477                        78            .byte	$78
05994 1478                        00            .byte	0
05995                                           ! 1054  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1479                        00            .byte	0
05997 147A                        1C            .byte	$1C
05998 147B                        00            .byte	0
05999 147C                        CC            .byte	$CC
06000 147D                        CC            .byte	$CC
06001 147E                        CC            .byte	$CC
06002 147F                        7E            .byte	$7E
06003 1480                        00            .byte	0
06004                                           ! 1055  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 1481                        00            .byte	0
06006 1482                        F8            .byte	$F8
06007 1483                        00            .byte	0
06008 1484                        F8            .byte	$F8
06009 1485                        CC            .byte	$CC
06010 1486                        CC            .byte	$CC
06011 1487                        CC            .byte	$CC
06012 1488                        00            .byte	0
06013                                           ! 1056  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1489                        FC            .byte	$FC
06015 148A                        00            .byte	0
06016 148B                        CC            .byte	$CC
06017 148C                        EC            .byte	$EC
06018 148D                        FC            .byte	$FC
06019 148E                        DC            .byte	$DC
06020 148F                        CC            .byte	$CC
06021 1490                        00            .byte	0
06022                                           ! 1057  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 1491                        3C            .byte	$3C
06024 1492                        6C            .byte	$6C
06025 1493                        6C            .byte	$6C
06026 1494                        3E            .byte	$3E
06027 1495                        00            .byte	0
06028 1496                        7E            .byte	$7E
06029 1497                        00            .byte	0
06030 1498                        00            .byte	0
06031                                           ! 1058  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 1499                        38            .byte	$38
06033 149A                        6C            .byte	$6C
06034 149B                        6C            .byte	$6C
06035 149C                        38            .byte	$38
06036 149D                        00            .byte	0
06037 149E                        7C            .byte	$7C
06038 149F                        00            .byte	0
06039 14A0                        00            .byte	0
06040                                           ! 1059  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 14A1                        30            .byte	$30
06042 14A2                        00            .byte	0
06043 14A3                        30            .byte	$30
06044 14A4                        60            .byte	$60
06045 14A5                        C0            .byte	$C0
06046 14A6                        CC            .byte	$CC
06047 14A7                        78            .byte	$78
06048 14A8                        00            .byte	0
06049                                           ! 1060  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14A9                        00            .byte	0
06051 14AA                        00            .byte	0
06052 14AB                        00            .byte	0
06053 14AC                        FC            .byte	$FC
06054 14AD                        C0            .byte	$C0
06055 14AE                        C0            .byte	$C0
06056 14AF                        00            .byte	0
06057 14B0                        00            .byte	0
06058                                           ! 1061  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14B1                        00            .byte	0
06060 14B2                        00            .byte	0
06061 14B3                        00            .byte	0
06062 14B4                        FC            .byte	$FC
06063 14B5                        0C            .byte	$C
06064 14B6                        0C            .byte	$C
06065 14B7                        00            .byte	0
06066 14B8                        00            .byte	0
06067                                           ! 1062  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14B9                        C3            .byte	$C3
06069 14BA                        C6            .byte	$C6
06070 14BB                        CC            .byte	$CC
06071 14BC                        DE            .byte	$DE
06072 14BD                        33            .byte	$33
06073 14BE                        66            .byte	$66
06074 14BF                        CC            .byte	$CC
06075 14C0                        0F            .byte	$F
06076                                           ! 1063  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14C1                        C3            .byte	$C3
06078 14C2                        C6            .byte	$C6
06079 14C3                        CC            .byte	$CC
06080 14C4                        DB            .byte	$DB
06081 14C5                        37            .byte	$37
06082 14C6                        6F            .byte	$6F
06083 14C7                        CF            .byte	$CF
06084 14C8                        03            .byte	3
06085                                           ! 1064  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14C9                        18            .byte	$18
06087 14CA                        18            .byte	$18
06088 14CB                        00            .byte	0
06089 14CC                        18            .byte	$18
06090 14CD                        18            .byte	$18
06091 14CE                        18            .byte	$18
06092 14CF                        18            .byte	$18
06093 14D0                        00            .byte	0
06094                                           ! 1065  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14D1                        00            .byte	0
06096 14D2                        33            .byte	$33
06097 14D3                        66            .byte	$66
06098 14D4                        CC            .byte	$CC
06099 14D5                        66            .byte	$66
06100 14D6                        33            .byte	$33
06101 14D7                        00            .byte	0
06102 14D8                        00            .byte	0
06103                                           ! 1066  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14D9                        00            .byte	0
06105 14DA                        CC            .byte	$CC
06106 14DB                        66            .byte	$66
06107 14DC                        33            .byte	$33
06108 14DD                        66            .byte	$66
06109 14DE                        CC            .byte	$CC
06110 14DF                        00            .byte	0
06111 14E0                        00            .byte	0
06112                                           ! 1067  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14E1                        22            .byte	$22
06114 14E2                        88            .byte	$88
06115 14E3                        22            .byte	$22
06116 14E4                        88            .byte	$88
06117 14E5                        22            .byte	$22
06118 14E6                        88            .byte	$88
06119 14E7                        22            .byte	$22
06120 14E8                        88            .byte	$88
06121                                           ! 1068  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14E9                        55            .byte	$55
06123 14EA                        AA            .byte	$AA
06124 14EB                        55            .byte	$55
06125 14EC                        AA            .byte	$AA
06126 14ED                        55            .byte	$55
06127 14EE                        AA            .byte	$AA
06128 14EF                        55            .byte	$55
06129 14F0                        AA            .byte	$AA
06130                                           ! 1069  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14F1                        DB            .byte	$DB
06132 14F2                        77            .byte	$77
06133 14F3                        DB            .byte	$DB
06134 14F4                        EE            .byte	$EE
06135 14F5                        DB            .byte	$DB
06136 14F6                        77            .byte	$77
06137 14F7                        DB            .byte	$DB
06138 14F8                        EE            .byte	$EE
06139                                           ! 1070  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 14F9                        18            .byte	$18
06141 14FA                        18            .byte	$18
06142 14FB                        18            .byte	$18
06143 14FC                        18            .byte	$18
06144 14FD                        18            .byte	$18
06145 14FE                        18            .byte	$18
06146 14FF                        18            .byte	$18
06147 1500                        18            .byte	$18
06148                                           ! 1071  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 1501                        18            .byte	$18
06150 1502                        18            .byte	$18
06151 1503                        18            .byte	$18
06152 1504                        18            .byte	$18
06153 1505                        F8            .byte	$F8
06154 1506                        18            .byte	$18
06155 1507                        18            .byte	$18
06156 1508                        18            .byte	$18
06157                                           ! 1072  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06158 1509                        18            .byte	$18
06159 150A                        18            .byte	$18
06160 150B                        F8            .byte	$F8
06161 150C                        18            .byte	$18
06162 150D                        F8            .byte	$F8
06163 150E                        18            .byte	$18
06164 150F                        18            .byte	$18
06165 1510                        18            .byte	$18
06166                                           ! 1073  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06167 1511                        36            .byte	$36
06168 1512                        36            .byte	$36
06169 1513                        36            .byte	$36
06170 1514                        36            .byte	$36
06171 1515                        F6            .byte	$F6
06172 1516                        36            .byte	$36
06173 1517                        36            .byte	$36
06174 1518                        36            .byte	$36
06175                                           ! 1074  0x00
06176                                           ! 1074 , 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06177 1519                        00            .byte	0
06178 151A                        00            .byte	0
06179 151B                        00            .byte	0
06180 151C                        00            .byte	0
06181 151D                        FE            .byte	$FE
06182 151E                        36            .byte	$36
06183 151F                        36            .byte	$36
06184 1520                        36            .byte	$36
06185                                           ! 1075  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 1521                        00            .byte	0
06187 1522                        00            .byte	0
06188 1523                        F8            .byte	$F8
06189 1524                        18            .byte	$18
06190 1525                        F8            .byte	$F8
06191 1526                        18            .byte	$18
06192 1527                        18            .byte	$18
06193 1528                        18            .byte	$18
06194                                           ! 1076  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1529                        36            .byte	$36
06196 152A                        36            .byte	$36
06197 152B                        F6            .byte	$F6
06198 152C                        06            .byte	6
06199 152D                        F6            .byte	$F6
06200 152E                        36            .byte	$36
06201 152F                        36            .byte	$36
06202 1530                        36            .byte	$36
06203                                           ! 1077  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 1531                        36            .byte	$36
06205 1532                        36            .byte	$36
06206 1533                        36            .byte	$36
06207 1534                        36            .byte	$36
06208 1535                        36            .byte	$36
06209 1536                        36            .byte	$36
06210 1537                        36            .byte	$36
06211 1538                        36            .byte	$36
06212                                           ! 1078  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1539                        00            .byte	0
06214 153A                        00            .byte	0
06215 153B                        FE            .byte	$FE
06216 153C                        06            .byte	6
06217 153D                        F6            .byte	$F6
06218 153E                        36            .byte	$36
06219 153F                        36            .byte	$36
06220 1540                        36            .byte	$36
06221                                           ! 1079  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 1541                        36            .byte	$36
06223 1542                        36            .byte	$36
06224 1543                        F6            .byte	$F6
06225 1544                        06            .byte	6
06226 1545                        FE            .byte	$FE
06227 1546                        00            .byte	0
06228 1547                        00            .byte	0
06229 1548                        00            .byte	0
06230                                           ! 1080  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1549                        36            .byte	$36
06232 154A                        36            .byte	$36
06233 154B                        36            .byte	$36
06234 154C                        36            .byte	$36
06235 154D                        FE            .byte	$FE
06236 154E                        00            .byte	0
06237 154F                        00            .byte	0
06238 1550                        00            .byte	0
06239                                           ! 1081  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 1551                        18            .byte	$18
06241 1552                        18            .byte	$18
06242 1553                        F8            .byte	$F8
06243 1554                        18            .byte	$18
06244 1555                        F8            .byte	$F8
06245 1556                        00            .byte	0
06246 1557                        00            .byte	0
06247 1558                        00            .byte	0
06248                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1559                        00            .byte	0
06250 155A                        00            .byte	0
06251 155B                        00            .byte	0
06252 155C                        00            .byte	0
06253 155D                        F8            .byte	$F8
06254 155E                        18            .byte	$18
06255 155F                        18            .byte	$18
06256 1560                        18            .byte	$18
06257                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 1561                        18            .byte	$18
06259 1562                        18            .byte	$18
06260 1563                        18            .byte	$18
06261 1564                        18            .byte	$18
06262 1565                        1F            .byte	$1F
06263 1566                        00            .byte	0
06264 1567                        00            .byte	0
06265 1568                        00            .byte	0
06266                                           ! 1084  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1569                        18            .byte	$18
06268 156A                        18            .byte	$18
06269 156B                        18            .byte	$18
06270 156C                        18            .byte	$18
06271 156D                        FF            .byte	$FF
06272 156E                        00            .byte	0
06273 156F                        00            .byte	0
06274 1570                        00            .byte	0
06275                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 1571                        00            .byte	0
06277 1572                        00            .byte	0
06278 1573                        00            .byte	0
06279 1574                        00            .byte	0
06280 1575                        FF            .byte	$FF
06281 1576                        18            .byte	$18
06282 1577                        18            .byte	$18
06283 1578                        18            .byte	$18
06284                                           ! 1086  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1579                        18            .byte	$18
06286 157A                        18            .byte	$18
06287 157B                        18            .byte	$18
06288 157C                        18            .byte	$18
06289 157D                        1F            .byte	$1F
06290 157E                        18            .byte	$18
06291 157F                        18            .byte	$18
06292 1580                        18            .byte	$18
06293                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 1581                        00            .byte	0
06295 1582                        00            .byte	0
06296 1583                        00            .byte	0
06297 1584                        00            .byte	0
06298 1585                        FF            .byte	$FF
06299 1586                        00            .byte	0
06300 1587                        00            .byte	0
06301 1588                        00            .byte	0
06302                                           ! 1088  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1589                        18            .byte	$18
06304 158A                        18            .byte	$18
06305 158B                        18            .byte	$18
06306 158C                        18            .byte	$18
06307 158D                        FF            .byte	$FF
06308 158E                        18            .byte	$18
06309 158F                        18            .byte	$18
06310 1590                        18            .byte	$18
06311                                           ! 1089  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 1591                        18            .byte	$18
06313 1592                        18            .byte	$18
06314 1593                        1F            .byte	$1F
06315 1594                        18            .byte	$18
06316 1595                        1F            .byte	$1F
06317 1596                        18            .byte	$18
06318 1597                        18            .byte	$18
06319 1598                        18            .byte	$18
06320                                           ! 1090  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 1599                        36            .byte	$36
06322 159A                        36            .byte	$36
06323 159B                        36            .byte	$36
06324 159C                        36            .byte	$36
06325 159D                        37            .byte	$37
06326 159E                        36            .byte	$36
06327 159F                        36            .byte	$36
06328 15A0                        36            .byte	$36
06329                                           ! 1091  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 15A1                        36            .byte	$36
06331 15A2                        36            .byte	$36
06332 15A3                        37            .byte	$37
06333 15A4                        30            .byte	$30
06334 15A5                        3F            .byte	$3F
06335 15A6                        00            .byte	0
06336 15A7                        00            .byte	0
06337 15A8                        00            .byte	0
06338                                           ! 1092  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15A9                        00            .byte	0
06340 15AA                        00            .byte	0
06341 15AB                        3F            .byte	$3F
06342 15AC                        30            .byte	$30
06343 15AD                        37            .byte	$37
06344 15AE                        36            .byte	$36
06345 15AF                        36            .byte	$36
06346 15B0                        36            .byte	$36
06347                                           ! 1093  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15B1                        36            .byte	$36
06349 15B2                        36            .byte	$36
06350 15B3                        F7            .byte	$F7
06351 15B4                        00            .byte	0
06352 15B5                        FF            .byte	$FF
06353 15B6                        00            .byte	0
06354 15B7                        00            .byte	0
06355 15B8                        00            .byte	0
06356                                           ! 1094  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15B9                        00            .byte	0
06358 15BA                        00            .byte	0
06359 15BB                        FF            .byte	$FF
06360 15BC                        00            .byte	0
06361 15BD                        F7            .byte	$F7
06362 15BE                        36            .byte	$36
06363 15BF                        36            .byte	$36
06364 15C0                        36            .byte	$36
06365                                           ! 1095  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15C1                        36            .byte	$36
06367 15C2                        36            .byte	$36
06368 15C3                        37            .byte	$37
06369 15C4                        30            .byte	$30
06370 15C5                        37            .byte	$37
06371 15C6                        36            .byte	$36
06372 15C7                        36            .byte	$36
06373 15C8                        36            .byte	$36
06374                                           ! 1096  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15C9                        00            .byte	0
06376 15CA                        00            .byte	0
06377 15CB                        FF            .byte	$FF
06378 15CC                        00            .byte	0
06379 15CD                        FF            .byte	$FF
06380 15CE                        00            .byte	0
06381 15CF                        00            .byte	0
06382 15D0                        00            .byte	0
06383                                           ! 1097  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15D1                        36            .byte	$36
06385 15D2                        36            .byte	$36
06386 15D3                        F7            .byte	$F7
06387 15D4                        00            .byte	0
06388 15D5                        F7            .byte	$F7
06389 15D6                        36            .byte	$36
06390 15D7                        36            .byte	$36
06391 15D8                        36            .byte	$36
06392                                           ! 1098  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15D9                        18            .byte	$18
06394 15DA                        18            .byte	$18
06395 15DB                        FF            .byte	$FF
06396 15DC                        00            .byte	0
06397 15DD                        FF            .byte	$FF
06398 15DE                        00            .byte	0
06399 15DF                        00            .byte	0
06400 15E0                        00            .byte	0
06401                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15E1                        36            .byte	$36
06403 15E2                        36            .byte	$36
06404 15E3                        36            .byte	$36
06405 15E4                        36            .byte	$36
06406 15E5                        FF            .byte	$FF
06407 15E6                        00            .byte	0
06408 15E7                        00            .byte	0
06409 15E8                        00            .byte	0
06410                                           ! 1100  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15E9                        00            .byte	0
06412 15EA                        00            .byte	0
06413 15EB                        FF            .byte	$FF
06414 15EC                        00            .byte	0
06415 15ED                        FF            .byte	$FF
06416 15EE                        18            .byte	$18
06417 15EF                        18            .byte	$18
06418 15F0                        18            .byte	$18
06419                                           ! 1101  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15F1                        00            .byte	0
06421 15F2                        00            .byte	0
06422 15F3                        00            .byte	0
06423 15F4                        00            .byte	0
06424 15F5                        FF            .byte	$FF
06425 15F6                        36            .byte	$36
06426 15F7                        36            .byte	$36
06427 15F8                        36            .byte	$36
06428                                           ! 1102  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 15F9                        36            .byte	$36
06430 15FA                        36            .byte	$36
06431 15FB                        36            .byte	$36
06432 15FC                        36            .byte	$36
06433 15FD                        3F            .byte	$3F
06434 15FE                        00            .byte	0
06435 15FF                        00            .byte	0
06436 1600                        00            .byte	0
06437                                           ! 1103  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 1601                        18            .byte	$18
06439 1602                        18            .byte	$18
06440 1603                        1F            .byte	$1F
06441 1604                        18            .byte	$18
06442 1605                        1F            .byte	$1F
06443 1606                        00            .byte	0
06444 1607                        00            .byte	0
06445 1608                        00            .byte	0
06446                                           ! 1104  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1609                        00            .byte	0
06448 160A                        00            .byte	0
06449 160B                        1F            .byte	$1F
06450 160C                        18            .byte	$18
06451 160D                        1F            .byte	$1F
06452 160E                        18            .byte	$18
06453 160F                        18            .byte	$18
06454 1610                        18            .byte	$18
06455                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 1611                        00            .byte	0
06457 1612                        00            .byte	0
06458 1613                        00            .byte	0
06459 1614                        00            .byte	0
06460 1615                        3F            .byte	$3F
06461 1616                        36            .byte	$36
06462 1617                        36            .byte	$36
06463 1618                        36            .byte	$36
06464                                           ! 1106  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1619                        36            .byte	$36
06466 161A                        36            .byte	$36
06467 161B                        36            .byte	$36
06468 161C                        36            .byte	$36
06469 161D                        FF            .byte	$FF
06470 161E                        36            .byte	$36
06471 161F                        36            .byte	$36
06472 1620                        36            .byte	$36
06473                                           ! 1107  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 1621                        18            .byte	$18
06475 1622                        18            .byte	$18
06476 1623                        FF            .byte	$FF
06477 1624                        18            .byte	$18
06478 1625                        FF            .byte	$FF
06479 1626                        18            .byte	$18
06480 1627                        18            .byte	$18
06481 1628                        18            .byte	$18
06482                                           ! 1108  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1629                        18            .byte	$18
06484 162A                        18            .byte	$18
06485 162B                        18            .byte	$18
06486 162C                        18            .byte	$18
06487 162D                        F8            .byte	$F8
06488 162E                        00            .byte	0
06489 162F                        00            .byte	0
06490 1630                        00            .byte	0
06491                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 1631                        00            .byte	0
06493 1632                        00            .byte	0
06494 1633                        00            .byte	0
06495 1634                        00            .byte	0
06496 1635                        1F            .byte	$1F
06497 1636                        18            .byte	$18
06498 1637                        18            .byte	$18
06499 1638                        18            .byte	$18
06500                                           ! 1110  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1639                        FF            .byte	$FF
06502 163A                        FF            .byte	$FF
06503 163B                        FF            .byte	$FF
06504 163C                        FF            .byte	$FF
06505 163D                        FF            .byte	$FF
06506 163E                        FF            .byte	$FF
06507 163F                        FF            .byte	$FF
06508 1640                        FF            .byte	$FF
06509                                           ! 1111  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 1641                        00            .byte	0
06511 1642                        00            .byte	0
06512 1643                        00            .byte	0
06513 1644                        00            .byte	0
06514 1645                        FF            .byte	$FF
06515 1646                        FF            .byte	$FF
06516 1647                        FF            .byte	$FF
06517 1648                        FF            .byte	$FF
06518                                           ! 1112  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1649                        F0            .byte	$F0
06520 164A                        F0            .byte	$F0
06521 164B                        F0            .byte	$F0
06522 164C                        F0            .byte	$F0
06523 164D                        F0            .byte	$F0
06524 164E                        F0            .byte	$F0
06525 164F                        F0            .byte	$F0
06526 1650                        F0            .byte	$F0
06527                                           ! 1113  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06528 1651                        0F            .byte	$F
06529 1652                        0F            .byte	$F
06530 1653                        0F            .byte	$F
06531 1654                        0F            .byte	$F
06532 1655                        0F            .byte	$F
06533 1656                        0F            .byte	$F
06534 1657                        0F            .byte	$F
06535 1658                        0F            .byte	$F
06536                                           ! 1114  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06537 1659                        FF            .byte	$FF
06538 165A                        FF            .byte	$FF
06539 165B                        FF            .byte	$FF
06540 165C                        FF            .byte	$FF
06541 165D                        00            .byte	0
06542 165E                        00            .byte	0
06543 165F                        00            .byte	0
06544 1660                        00            .byte	0
06545                                           ! 1115  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0
06546 1661                        00            .byte	0
06547 1662                        00            .byte	0
06548 1663                        76            .byte	$76
06549 1664                        DC            .byte	$DC
06550 1665                        C8            .byte	$C8
06551 1666                        DC            .byte	$DC
06552 1667                        76            .byte	$76
06553                                           ! 1115 x00,
06554 1668                        00            .byte	0
06555                                           ! 1116  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06556 1669                        00            .byte	0
06557 166A                        78            .byte	$78
06558 166B                        CC            .byte	$CC
06559 166C                        F8            .byte	$F8
06560 166D                        CC            .byte	$CC
06561 166E                        F8            .byte	$F8
06562 166F                        C0            .byte	$C0
06563 1670                        C0            .byte	$C0
06564                                           ! 1117  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 1671                        00            .byte	0
06566 1672                        FC            .byte	$FC
06567 1673                        CC            .byte	$CC
06568 1674                        C0            .byte	$C0
06569 1675                        C0            .byte	$C0
06570 1676                        C0            .byte	$C0
06571 1677                        C0            .byte	$C0
06572 1678                        00            .byte	0
06573                                           ! 1118  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1679                        00            .byte	0
06575 167A                        FE            .byte	$FE
06576 167B                        6C            .byte	$6C
06577 167C                        6C            .byte	$6C
06578 167D                        6C            .byte	$6C
06579 167E                        6C            .byte	$6C
06580 167F                        6C            .byte	$6C
06581 1680                        00            .byte	0
06582                                           ! 1119  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 1681                        FC            .byte	$FC
06584 1682                        CC            .byte	$CC
06585 1683                        60            .byte	$60
06586 1684                        30            .byte	$30
06587 1685                        60            .byte	$60
06588 1686                        CC            .byte	$CC
06589 1687                        FC            .byte	$FC
06590 1688                        00            .byte	0
06591                                           ! 1120  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1689                        00            .byte	0
06593 168A                        00            .byte	0
06594 168B                        7E            .byte	$7E
06595 168C                        D8            .byte	$D8
06596 168D                        D8            .byte	$D8
06597 168E                        D8            .byte	$D8
06598 168F                        70            .byte	$70
06599 1690                        00            .byte	0
06600                                           ! 1121  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 1691                        00            .byte	0
06602 1692                        66            .byte	$66
06603 1693                        66            .byte	$66
06604 1694                        66            .byte	$66
06605 1695                        66            .byte	$66
06606 1696                        7C            .byte	$7C
06607 1697                        60            .byte	$60
06608 1698                        C0            .byte	$C0
06609                                           ! 1122  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 1699                        00            .byte	0
06611 169A                        76            .byte	$76
06612 169B                        DC            .byte	$DC
06613 169C                        18            .byte	$18
06614 169D                        18            .byte	$18
06615 169E                        18            .byte	$18
06616 169F                        18            .byte	$18
06617 16A0                        00            .byte	0
06618                                           ! 1123  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 16A1                        FC            .byte	$FC
06620 16A2                        30            .byte	$30
06621 16A3                        78            .byte	$78
06622 16A4                        CC            .byte	$CC
06623 16A5                        CC            .byte	$CC
06624 16A6                        78            .byte	$78
06625 16A7                        30            .byte	$30
06626 16A8                        FC            .byte	$FC
06627                                           ! 1124  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16A9                        38            .byte	$38
06629 16AA                        6C            .byte	$6C
06630 16AB                        C6            .byte	$C6
06631 16AC                        FE            .byte	$FE
06632 16AD                        C6            .byte	$C6
06633 16AE                        6C            .byte	$6C
06634 16AF                        38            .byte	$38
06635 16B0                        00            .byte	0
06636                                           ! 1125  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16B1                        38            .byte	$38
06638 16B2                        6C            .byte	$6C
06639 16B3                        C6            .byte	$C6
06640 16B4                        C6            .byte	$C6
06641 16B5                        6C            .byte	$6C
06642 16B6                        6C            .byte	$6C
06643 16B7                        EE            .byte	$EE
06644 16B8                        00            .byte	0
06645                                           ! 1126  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16B9                        1C            .byte	$1C
06647 16BA                        30            .byte	$30
06648 16BB                        18            .byte	$18
06649 16BC                        7C            .byte	$7C
06650 16BD                        CC            .byte	$CC
06651 16BE                        CC            .byte	$CC
06652 16BF                        78            .byte	$78
06653 16C0                        00            .byte	0
06654                                           ! 1127  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16C1                        00            .byte	0
06656 16C2                        00            .byte	0
06657 16C3                        7E            .byte	$7E
06658 16C4                        DB            .byte	$DB
06659 16C5                        DB            .byte	$DB
06660 16C6                        7E            .byte	$7E
06661 16C7                        00            .byte	0
06662 16C8                        00            .byte	0
06663                                           ! 1128  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16C9                        06            .byte	6
06665 16CA                        0C            .byte	$C
06666 16CB                        7E            .byte	$7E
06667 16CC                        DB            .byte	$DB
06668 16CD                        DB            .byte	$DB
06669 16CE                        7E            .byte	$7E
06670 16CF                        60            .byte	$60
06671 16D0                        C0            .byte	$C0
06672                                           ! 1129  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16D1                        38            .byte	$38
06674 16D2                        60            .byte	$60
06675 16D3                        C0            .byte	$C0
06676 16D4                        F8            .byte	$F8
06677 16D5                        C0            .byte	$C0
06678 16D6                        60            .byte	$60
06679 16D7                        38            .byte	$38
06680 16D8                        00            .byte	0
06681                                           ! 1130  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16D9                        78            .byte	$78
06683 16DA                        CC            .byte	$CC
06684 16DB                        CC            .byte	$CC
06685 16DC                        CC            .byte	$CC
06686 16DD                        CC            .byte	$CC
06687 16DE                        CC            .byte	$CC
06688 16DF                        CC            .byte	$CC
06689 16E0                        00            .byte	0
06690                                           ! 1131  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16E1                        00            .byte	0
06692 16E2                        FC            .byte	$FC
06693 16E3                        00            .byte	0
06694 16E4                        FC            .byte	$FC
06695 16E5                        00            .byte	0
06696 16E6                        FC            .byte	$FC
06697 16E7                        00            .byte	0
06698 16E8                        00            .byte	0
06699                                           ! 1132  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16E9                        30            .byte	$30
06701 16EA                        30            .byte	$30
06702 16EB                        FC            .byte	$FC
06703 16EC                        30            .byte	$30
06704 16ED                        30            .byte	$30
06705 16EE                        00            .byte	0
06706 16EF                        FC            .byte	$FC
06707 16F0                        00            .byte	0
06708                                           ! 1133  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16F1                        60            .byte	$60
06710 16F2                        30            .byte	$30
06711 16F3                        18            .byte	$18
06712 16F4                        30            .byte	$30
06713 16F5                        60            .byte	$60
06714 16F6                        00            .byte	0
06715 16F7                        FC            .byte	$FC
06716 16F8                        00            .byte	0
06717                                           ! 1134  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 16F9                        18            .byte	$18
06719 16FA                        30            .byte	$30
06720 16FB                        60            .byte	$60
06721 16FC                        30            .byte	$30
06722 16FD                        18            .byte	$18
06723 16FE                        00            .byte	0
06724 16FF                        FC            .byte	$FC
06725 1700                        00            .byte	0
06726                                           ! 1135  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 1701                        0E            .byte	$E
06728 1702                        1B            .byte	$1B
06729 1703                        1B            .byte	$1B
06730 1704                        18            .byte	$18
06731 1705                        18            .byte	$18
06732 1706                        18            .byte	$18
06733 1707                        18            .byte	$18
06734 1708                        18            .byte	$18
06735                                           ! 1136  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1709                        18            .byte	$18
06737 170A                        18            .byte	$18
06738 170B                        18            .byte	$18
06739 170C                        18            .byte	$18
06740 170D                        18            .byte	$18
06741 170E                        D8            .byte	$D8
06742 170F                        D8            .byte	$D8
06743 1710                        70            .byte	$70
06744                                           ! 1137  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 1711                        30            .byte	$30
06746 1712                        30            .byte	$30
06747 1713                        00            .byte	0
06748 1714                        FC            .byte	$FC
06749 1715                        00            .byte	0
06750 1716                        30            .byte	$30
06751 1717                        30            .byte	$30
06752 1718                        00            .byte	0
06753                                           ! 1138  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1719                        00            .byte	0
06755 171A                        76            .byte	$76
06756 171B                        DC            .byte	$DC
06757 171C                        00            .byte	0
06758 171D                        76            .byte	$76
06759 171E                        DC            .byte	$DC
06760 171F                        00            .byte	0
06761 1720                        00            .byte	0
06762                                           ! 1139  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 1721                        38            .byte	$38
06764 1722                        6C            .byte	$6C
06765 1723                        6C            .byte	$6C
06766 1724                        38            .byte	$38
06767 1725                        00            .byte	0
06768 1726                        00            .byte	0
06769 1727                        00            .byte	0
06770 1728                        00            .byte	0
06771                                           ! 1140  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1729                        00            .byte	0
06773 172A                        00            .byte	0
06774 172B                        00            .byte	0
06775 172C                        18            .byte	$18
06776 172D                        18            .byte	$18
06777 172E                        00            .byte	0
06778 172F                        00            .byte	0
06779 1730                        00            .byte	0
06780                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 1731                        00            .byte	0
06782 1732                        00            .byte	0
06783 1733                        00            .byte	0
06784 1734                        00            .byte	0
06785 1735                        18            .byte	$18
06786 1736                        00            .byte	0
06787 1737                        00            .byte	0
06788 1738                        00            .byte	0
06789                                           ! 1142  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1739                        0F            .byte	$F
06791 173A                        0C            .byte	$C
06792 173B                        0C            .byte	$C
06793 173C                        0C            .byte	$C
06794 173D                        EC            .byte	$EC
06795 173E                        6C            .byte	$6C
06796 173F                        3C            .byte	$3C
06797 1740                        1C            .byte	$1C
06798                                           ! 1143  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 1741                        78            .byte	$78
06800 1742                        6C            .byte	$6C
06801 1743                        6C            .byte	$6C
06802 1744                        6C            .byte	$6C
06803 1745                        6C            .byte	$6C
06804 1746                        00            .byte	0
06805 1747                        00            .byte	0
06806 1748                        00            .byte	0
06807                                           ! 1144  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1749                        70            .byte	$70
06809 174A                        18            .byte	$18
06810 174B                        30            .byte	$30
06811 174C                        60            .byte	$60
06812 174D                        78            .byte	$78
06813 174E                        00            .byte	0
06814 174F                        00            .byte	0
06815 1750                        00            .byte	0
06816                                           ! 1145  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 1751                        00            .byte	0
06818 1752                        00            .byte	0
06819 1753                        3C            .byte	$3C
06820 1754                        3C            .byte	$3C
06821 1755                        3C            .byte	$3C
06822 1756                        3C            .byte	$3C
06823 1757                        00            .byte	0
06824 1758                        00            .byte	0
06825                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1759                        00            .byte	0
06827 175A                        00            .byte	0
06828 175B                        00            .byte	0
06829 175C                        00            .byte	0
06830 175D                        00            .byte	0
06831 175E                        00            .byte	0
06832 175F                        00            .byte	0
06833                                           ! 1147 };
06834 1760                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1148 static Bit8u vgafont14[256*14]=
06837                                           ! 1149 {
06838                       00001761            _vgafont14:
06839                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 1761                        00            .byte	0
06841 1762                        00            .byte	0
06842 1763                        00            .byte	0
06843 1764                        00            .byte	0
06844 1765                        00            .byte	0
06845 1766                        00            .byte	0
06846 1767                        00            .byte	0
06847 1768                        00            .byte	0
06848 1769                        00            .byte	0
06849 176A                        00            .byte	0
06850 176B                        00            .byte	0
06851 176C                        00            .byte	0
06852 176D                        00            .byte	0
06853 176E                        00            .byte	0
06854                                           ! 1151  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 176F                        00            .byte	0
06856 1770                        00            .byte	0
06857 1771                        7E            .byte	$7E
06858 1772                        81            .byte	$81
06859 1773                        A5            .byte	$A5
06860 1774                        81            .byte	$81
06861 1775                        81            .byte	$81
06862 1776                        BD            .byte	$BD
06863 1777                        99            .byte	$99
06864 1778                        81            .byte	$81
06865 1779                        7E            .byte	$7E
06866 177A                        00            .byte	0
06867 177B                        00            .byte	0
06868 177C                        00            .byte	0
06869                                           ! 1152  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 177D                        00            .byte	0
06871 177E                        00            .byte	0
06872 177F                        7E            .byte	$7E
06873 1780                        FF            .byte	$FF
06874 1781                        DB            .byte	$DB
06875 1782                        FF            .byte	$FF
06876 1783                        FF            .byte	$FF
06877 1784                        C3            .byte	$C3
06878 1785                        E7            .byte	$E7
06879 1786                        FF            .byte	$FF
06880 1787                        7E            .byte	$7E
06881 1788                        00            .byte	0
06882 1789                        00            .byte	0
06883 178A                        00            .byte	0
06884                                           ! 1153  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 178B                        00            .byte	0
06886 178C                        00            .byte	0
06887 178D                        00            .byte	0
06888 178E                        6C            .byte	$6C
06889 178F                        FE            .byte	$FE
06890 1790                        FE            .byte	$FE
06891 1791                        FE            .byte	$FE
06892 1792                        FE            .byte	$FE
06893 1793                        7C            .byte	$7C
06894 1794                        38            .byte	$38
06895 1795                        10            .byte	$10
06896 1796                        00            .byte	0
06897 1797                        00            .byte	0
06898 1798                        00            .byte	0
06899                                           ! 1154  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06900 1799                        00            .byte	0
06901 179A                        00            .byte	0
06902 179B                        00            .byte	0
06903 179C                        10            .byte	$10
06904 179D                        38            .byte	$38
06905 179E                        7C            .byte	$7C
06906 179F                        FE            .byte	$FE
06907 17A0                        7C            .byte	$7C
06908 17A1                        38            .byte	$38
06909 17A2                        10            .byte	$10
06910 17A3                        00            .byte	0
06911 17A4                        00            .byte	0
06912 17A5                        00            .byte	0
06913 17A6                        00            .byte	0
06914                                           ! 1155  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x
06915 17A7                        00            .byte	0
06916 17A8                        00            .byte	0
06917 17A9                        18            .byte	$18
06918 17AA                        3C            .byte	$3C
06919 17AB                        3C            .byte	$3C
06920 17AC                        E7            .byte	$E7
06921 17AD                        E7            .byte	$E7
06922 17AE                        E7            .byte	$E7
06923 17AF                        18            .byte	$18
06924 17B0                        18            .byte	$18
06925                                           ! 1155 3c, 0x00, 0x00, 0x00,
06926 17B1                        3C            .byte	$3C
06927 17B2                        00            .byte	0
06928 17B3                        00            .byte	0
06929 17B4                        00            .byte	0
06930                                           ! 1156  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17B5                        00            .byte	0
06932 17B6                        00            .byte	0
06933 17B7                        18            .byte	$18
06934 17B8                        3C            .byte	$3C
06935 17B9                        7E            .byte	$7E
06936 17BA                        FF            .byte	$FF
06937 17BB                        FF            .byte	$FF
06938 17BC                        7E            .byte	$7E
06939 17BD                        18            .byte	$18
06940 17BE                        18            .byte	$18
06941 17BF                        3C            .byte	$3C
06942 17C0                        00            .byte	0
06943 17C1                        00            .byte	0
06944 17C2                        00            .byte	0
06945                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17C3                        00            .byte	0
06947 17C4                        00            .byte	0
06948 17C5                        00            .byte	0
06949 17C6                        00            .byte	0
06950 17C7                        00            .byte	0
06951 17C8                        18            .byte	$18
06952 17C9                        3C            .byte	$3C
06953 17CA                        3C            .byte	$3C
06954 17CB                        18            .byte	$18
06955 17CC                        00            .byte	0
06956 17CD                        00            .byte	0
06957 17CE                        00            .byte	0
06958 17CF                        00            .byte	0
06959 17D0                        00            .byte	0
06960                                           ! 1158  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17D1                        FF            .byte	$FF
06962 17D2                        FF            .byte	$FF
06963 17D3                        FF            .byte	$FF
06964 17D4                        FF            .byte	$FF
06965 17D5                        FF            .byte	$FF
06966 17D6                        E7            .byte	$E7
06967 17D7                        C3            .byte	$C3
06968 17D8                        C3            .byte	$C3
06969 17D9                        E7            .byte	$E7
06970 17DA                        FF            .byte	$FF
06971 17DB                        FF            .byte	$FF
06972 17DC                        FF            .byte	$FF
06973 17DD                        FF            .byte	$FF
06974 17DE                        FF            .byte	$FF
06975                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17DF                        00            .byte	0
06977 17E0                        00            .byte	0
06978 17E1                        00            .byte	0
06979 17E2                        00            .byte	0
06980 17E3                        3C            .byte	$3C
06981 17E4                        66            .byte	$66
06982 17E5                        42            .byte	$42
06983 17E6                        42            .byte	$42
06984 17E7                        66            .byte	$66
06985 17E8                        3C            .byte	$3C
06986 17E9                        00            .byte	0
06987 17EA                        00            .byte	0
06988 17EB                        00            .byte	0
06989 17EC                        00            .byte	0
06990                                           ! 1160  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17ED                        FF            .byte	$FF
06992 17EE                        FF            .byte	$FF
06993 17EF                        FF            .byte	$FF
06994 17F0                        FF            .byte	$FF
06995 17F1                        C3            .byte	$C3
06996 17F2                        99            .byte	$99
06997 17F3                        BD            .byte	$BD
06998 17F4                        BD            .byte	$BD
06999 17F5                        99            .byte	$99
07000 17F6                        C3            .byte	$C3
07001 17F7                        FF            .byte	$FF
07002 17F8                        FF            .byte	$FF
07003 17F9                        FF            .byte	$FF
07004 17FA                        FF            .byte	$FF
07005                                           ! 1161  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 17FB                        00            .byte	0
07007 17FC                        00            .byte	0
07008 17FD                        1E            .byte	$1E
07009 17FE                        0E            .byte	$E
07010 17FF                        1A            .byte	$1A
07011 1800                        32            .byte	$32
07012 1801                        78            .byte	$78
07013 1802                        CC            .byte	$CC
07014 1803                        CC            .byte	$CC
07015 1804                        CC            .byte	$CC
07016 1805                        78            .byte	$78
07017 1806                        00            .byte	0
07018 1807                        00            .byte	0
07019 1808                        00            .byte	0
07020                                           ! 1162  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1809                        00            .byte	0
07022 180A                        00            .byte	0
07023 180B                        3C            .byte	$3C
07024 180C                        66            .byte	$66
07025 180D                        66            .byte	$66
07026 180E                        66            .byte	$66
07027 180F                        3C            .byte	$3C
07028 1810                        18            .byte	$18
07029 1811                        7E            .byte	$7E
07030 1812                        18            .byte	$18
07031 1813                        18            .byte	$18
07032 1814                        00            .byte	0
07033 1815                        00            .byte	0
07034 1816                        00            .byte	0
07035                                           ! 1163  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 1817                        00            .byte	0
07037 1818                        00            .byte	0
07038 1819                        3F            .byte	$3F
07039 181A                        33            .byte	$33
07040 181B                        3F            .byte	$3F
07041 181C                        30            .byte	$30
07042 181D                        30            .byte	$30
07043 181E                        30            .byte	$30
07044 181F                        70            .byte	$70
07045 1820                        F0            .byte	$F0
07046 1821                        E0            .byte	$E0
07047 1822                        00            .byte	0
07048 1823                        00            .byte	0
07049 1824                        00            .byte	0
07050                                           ! 1164  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 1825                        00            .byte	0
07052 1826                        00            .byte	0
07053 1827                        7F            .byte	$7F
07054 1828                        63            .byte	$63
07055 1829                        7F            .byte	$7F
07056 182A                        63            .byte	$63
07057 182B                        63            .byte	$63
07058 182C                        63            .byte	$63
07059 182D                        67            .byte	$67
07060 182E                        E7            .byte	$E7
07061 182F                        E6            .byte	$E6
07062 1830                        C0            .byte	$C0
07063 1831                        00            .byte	0
07064 1832                        00            .byte	0
07065                                           ! 1165  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 1833                        00            .byte	0
07067 1834                        00            .byte	0
07068 1835                        18            .byte	$18
07069 1836                        18            .byte	$18
07070 1837                        DB            .byte	$DB
07071 1838                        3C            .byte	$3C
07072 1839                        E7            .byte	$E7
07073 183A                        3C            .byte	$3C
07074 183B                        DB            .byte	$DB
07075 183C                        18            .byte	$18
07076 183D                        18            .byte	$18
07077 183E                        00            .byte	0
07078 183F                        00            .byte	0
07079 1840                        00            .byte	0
07080                                           ! 1166  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 1841                        00            .byte	0
07082 1842                        00            .byte	0
07083 1843                        80            .byte	$80
07084 1844                        C0            .byte	$C0
07085 1845                        E0            .byte	$E0
07086 1846                        F8            .byte	$F8
07087 1847                        FE            .byte	$FE
07088 1848                        F8            .byte	$F8
07089 1849                        E0            .byte	$E0
07090 184A                        C0            .byte	$C0
07091 184B                        80            .byte	$80
07092 184C                        00            .byte	0
07093 184D                        00            .byte	0
07094 184E                        00            .byte	0
07095                                           ! 1167  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 184F                        00            .byte	0
07097 1850                        00            .byte	0
07098 1851                        02            .byte	2
07099 1852                        06            .byte	6
07100 1853                        0E            .byte	$E
07101 1854                        3E            .byte	$3E
07102 1855                        FE            .byte	$FE
07103 1856                        3E            .byte	$3E
07104 1857                        0E            .byte	$E
07105 1858                        06            .byte	6
07106 1859                        02            .byte	2
07107 185A                        00            .byte	0
07108 185B                        00            .byte	0
07109 185C                        00            .byte	0
07110                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 185D                        00            .byte	0
07112 185E                        00            .byte	0
07113 185F                        18            .byte	$18
07114 1860                        3C            .byte	$3C
07115 1861                        7E            .byte	$7E
07116 1862                        18            .byte	$18
07117 1863                        18            .byte	$18
07118 1864                        18            .byte	$18
07119 1865                        7E            .byte	$7E
07120 1866                        3C            .byte	$3C
07121 1867                        18            .byte	$18
07122 1868                        00            .byte	0
07123 1869                        00            .byte	0
07124 186A                        00            .byte	0
07125                                           ! 1169  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 186B                        00            .byte	0
07127 186C                        00            .byte	0
07128 186D                        66            .byte	$66
07129 186E                        66            .byte	$66
07130 186F                        66            .byte	$66
07131 1870                        66            .byte	$66
07132 1871                        66            .byte	$66
07133 1872                        66            .byte	$66
07134 1873                        00            .byte	0
07135 1874                        66            .byte	$66
07136 1875                        66            .byte	$66
07137 1876                        00            .byte	0
07138 1877                        00            .byte	0
07139 1878                        00            .byte	0
07140                                           ! 1170  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1879                        00            .byte	0
07142 187A                        00            .byte	0
07143 187B                        7F            .byte	$7F
07144 187C                        DB            .byte	$DB
07145 187D                        DB            .byte	$DB
07146 187E                        DB            .byte	$DB
07147 187F                        7B            .byte	$7B
07148 1880                        1B            .byte	$1B
07149 1881                        1B            .byte	$1B
07150 1882                        1B            .byte	$1B
07151 1883                        1B            .byte	$1B
07152 1884                        00            .byte	0
07153 1885                        00            .byte	0
07154 1886                        00            .byte	0
07155                                           ! 1171  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 1887                        00            .byte	0
07157 1888                        7C            .byte	$7C
07158 1889                        C6            .byte	$C6
07159 188A                        60            .byte	$60
07160 188B                        38            .byte	$38
07161 188C                        6C            .byte	$6C
07162 188D                        C6            .byte	$C6
07163 188E                        C6            .byte	$C6
07164 188F                        6C            .byte	$6C
07165 1890                        38            .byte	$38
07166 1891                        0C            .byte	$C
07167 1892                        C6            .byte	$C6
07168 1893                        7C            .byte	$7C
07169 1894                        00            .byte	0
07170                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 1895                        00            .byte	0
07172 1896                        00            .byte	0
07173 1897                        00            .byte	0
07174 1898                        00            .byte	0
07175 1899                        00            .byte	0
07176 189A                        00            .byte	0
07177 189B                        00            .byte	0
07178 189C                        00            .byte	0
07179 189D                        FE            .byte	$FE
07180 189E                        FE            .byte	$FE
07181 189F                        FE            .byte	$FE
07182 18A0                        00            .byte	0
07183 18A1                        00            .byte	0
07184 18A2                        00            .byte	0
07185                                           ! 1173  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 18A3                        00            .byte	0
07187 18A4                        00            .byte	0
07188 18A5                        18            .byte	$18
07189 18A6                        3C            .byte	$3C
07190 18A7                        7E            .byte	$7E
07191 18A8                        18            .byte	$18
07192 18A9                        18            .byte	$18
07193 18AA                        18            .byte	$18
07194 18AB                        7E            .byte	$7E
07195 18AC                        3C            .byte	$3C
07196 18AD                        18            .byte	$18
07197 18AE                        7E            .byte	$7E
07198 18AF                        00            .byte	0
07199 18B0                        00            .byte	0
07200                                           ! 1174  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18B1                        00            .byte	0
07202 18B2                        00            .byte	0
07203 18B3                        18            .byte	$18
07204 18B4                        3C            .byte	$3C
07205 18B5                        7E            .byte	$7E
07206 18B6                        18            .byte	$18
07207 18B7                        18            .byte	$18
07208 18B8                        18            .byte	$18
07209 18B9                        18            .byte	$18
07210 18BA                        18            .byte	$18
07211 18BB                        18            .byte	$18
07212 18BC                        00            .byte	0
07213 18BD                        00            .byte	0
07214 18BE                        00            .byte	0
07215                                           ! 1175  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18BF                        00            .byte	0
07217 18C0                        00            .byte	0
07218 18C1                        18            .byte	$18
07219 18C2                        18            .byte	$18
07220 18C3                        18            .byte	$18
07221 18C4                        18            .byte	$18
07222 18C5                        18            .byte	$18
07223 18C6                        18            .byte	$18
07224 18C7                        7E            .byte	$7E
07225 18C8                        3C            .byte	$3C
07226 18C9                        18            .byte	$18
07227 18CA                        00            .byte	0
07228 18CB                        00            .byte	0
07229 18CC                        00            .byte	0
07230                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18CD                        00            .byte	0
07232 18CE                        00            .byte	0
07233 18CF                        00            .byte	0
07234 18D0                        00            .byte	0
07235 18D1                        18            .byte	$18
07236 18D2                        0C            .byte	$C
07237 18D3                        FE            .byte	$FE
07238 18D4                        0C            .byte	$C
07239 18D5                        18            .byte	$18
07240 18D6                        00            .byte	0
07241 18D7                        00            .byte	0
07242 18D8                        00            .byte	0
07243 18D9                        00            .byte	0
07244 18DA                        00            .byte	0
07245                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18DB                        00            .byte	0
07247 18DC                        00            .byte	0
07248 18DD                        00            .byte	0
07249 18DE                        00            .byte	0
07250 18DF                        30            .byte	$30
07251 18E0                        60            .byte	$60
07252 18E1                        FE            .byte	$FE
07253 18E2                        60            .byte	$60
07254 18E3                        30            .byte	$30
07255 18E4                        00            .byte	0
07256 18E5                        00            .byte	0
07257 18E6                        00            .byte	0
07258 18E7                        00            .byte	0
07259 18E8                        00            .byte	0
07260                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07261 18E9                        00            .byte	0
07262 18EA                        00            .byte	0
07263 18EB                        00            .byte	0
07264 18EC                        00            .byte	0
07265 18ED                        00            .byte	0
07266 18EE                        C0            .byte	$C0
07267 18EF                        C0            .byte	$C0
07268 18F0                        C0            .byte	$C0
07269 18F1                        FE            .byte	$FE
07270 18F2                        00            .byte	0
07271 18F3                        00            .byte	0
07272 18F4                        00            .byte	0
07273 18F5                        00            .byte	0
07274 18F6                        00            .byte	0
07275                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00
07276 18F7                        00            .byte	0
07277 18F8                        00            .byte	0
07278 18F9                        00            .byte	0
07279 18FA                        00            .byte	0
07280 18FB                        28            .byte	$28
07281 18FC                        6C            .byte	$6C
07282 18FD                        FE            .byte	$FE
07283 18FE                        6C            .byte	$6C
07284 18FF                        28            .byte	$28
07285 1900                        00            .byte	0
07286 1901                        00            .byte	0
07287                                           ! 1179 , 0x00, 0x00,
07288 1902                        00            .byte	0
07289 1903                        00            .byte	0
07290 1904                        00            .byte	0
07291                                           ! 1180  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 1905                        00            .byte	0
07293 1906                        00            .byte	0
07294 1907                        00            .byte	0
07295 1908                        10            .byte	$10
07296 1909                        38            .byte	$38
07297 190A                        38            .byte	$38
07298 190B                        7C            .byte	$7C
07299 190C                        7C            .byte	$7C
07300 190D                        FE            .byte	$FE
07301 190E                        FE            .byte	$FE
07302 190F                        00            .byte	0
07303 1910                        00            .byte	0
07304 1911                        00            .byte	0
07305 1912                        00            .byte	0
07306                                           ! 1181  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 1913                        00            .byte	0
07308 1914                        00            .byte	0
07309 1915                        00            .byte	0
07310 1916                        FE            .byte	$FE
07311 1917                        FE            .byte	$FE
07312 1918                        7C            .byte	$7C
07313 1919                        7C            .byte	$7C
07314 191A                        38            .byte	$38
07315 191B                        38            .byte	$38
07316 191C                        10            .byte	$10
07317 191D                        00            .byte	0
07318 191E                        00            .byte	0
07319 191F                        00            .byte	0
07320 1920                        00            .byte	0
07321                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 1921                        00            .byte	0
07323 1922                        00            .byte	0
07324 1923                        00            .byte	0
07325 1924                        00            .byte	0
07326 1925                        00            .byte	0
07327 1926                        00            .byte	0
07328 1927                        00            .byte	0
07329 1928                        00            .byte	0
07330 1929                        00            .byte	0
07331 192A                        00            .byte	0
07332 192B                        00            .byte	0
07333 192C                        00            .byte	0
07334 192D                        00            .byte	0
07335 192E                        00            .byte	0
07336                                           ! 1183  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 192F                        00            .byte	0
07338 1930                        00            .byte	0
07339 1931                        18            .byte	$18
07340 1932                        3C            .byte	$3C
07341 1933                        3C            .byte	$3C
07342 1934                        3C            .byte	$3C
07343 1935                        18            .byte	$18
07344 1936                        18            .byte	$18
07345 1937                        00            .byte	0
07346 1938                        18            .byte	$18
07347 1939                        18            .byte	$18
07348 193A                        00            .byte	0
07349 193B                        00            .byte	0
07350 193C                        00            .byte	0
07351                                           ! 1184  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 193D                        00            .byte	0
07353 193E                        66            .byte	$66
07354 193F                        66            .byte	$66
07355 1940                        66            .byte	$66
07356 1941                        24            .byte	$24
07357 1942                        00            .byte	0
07358 1943                        00            .byte	0
07359 1944                        00            .byte	0
07360 1945                        00            .byte	0
07361 1946                        00            .byte	0
07362 1947                        00            .byte	0
07363 1948                        00            .byte	0
07364 1949                        00            .byte	0
07365 194A                        00            .byte	0
07366                                           ! 1185  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 194B                        00            .byte	0
07368 194C                        00            .byte	0
07369 194D                        6C            .byte	$6C
07370 194E                        6C            .byte	$6C
07371 194F                        FE            .byte	$FE
07372 1950                        6C            .byte	$6C
07373 1951                        6C            .byte	$6C
07374 1952                        6C            .byte	$6C
07375 1953                        FE            .byte	$FE
07376 1954                        6C            .byte	$6C
07377 1955                        6C            .byte	$6C
07378 1956                        00            .byte	0
07379 1957                        00            .byte	0
07380 1958                        00            .byte	0
07381                                           ! 1186  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1959                        18            .byte	$18
07383 195A                        18            .byte	$18
07384 195B                        7C            .byte	$7C
07385 195C                        C6            .byte	$C6
07386 195D                        C2            .byte	$C2
07387 195E                        C0            .byte	$C0
07388 195F                        7C            .byte	$7C
07389 1960                        06            .byte	6
07390 1961                        86            .byte	$86
07391 1962                        C6            .byte	$C6
07392 1963                        7C            .byte	$7C
07393 1964                        18            .byte	$18
07394 1965                        18            .byte	$18
07395 1966                        00            .byte	0
07396                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 1967                        00            .byte	0
07398 1968                        00            .byte	0
07399 1969                        00            .byte	0
07400 196A                        00            .byte	0
07401 196B                        C2            .byte	$C2
07402 196C                        C6            .byte	$C6
07403 196D                        0C            .byte	$C
07404 196E                        18            .byte	$18
07405 196F                        30            .byte	$30
07406 1970                        66            .byte	$66
07407 1971                        C6            .byte	$C6
07408 1972                        00            .byte	0
07409 1973                        00            .byte	0
07410 1974                        00            .byte	0
07411                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 1975                        00            .byte	0
07413 1976                        00            .byte	0
07414 1977                        38            .byte	$38
07415 1978                        6C            .byte	$6C
07416 1979                        6C            .byte	$6C
07417 197A                        38            .byte	$38
07418 197B                        76            .byte	$76
07419 197C                        DC            .byte	$DC
07420 197D                        CC            .byte	$CC
07421 197E                        CC            .byte	$CC
07422 197F                        76            .byte	$76
07423 1980                        00            .byte	0
07424 1981                        00            .byte	0
07425 1982                        00            .byte	0
07426                                           ! 1189  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 1983                        00            .byte	0
07428 1984                        30            .byte	$30
07429 1985                        30            .byte	$30
07430 1986                        30            .byte	$30
07431 1987                        60            .byte	$60
07432 1988                        00            .byte	0
07433 1989                        00            .byte	0
07434 198A                        00            .byte	0
07435 198B                        00            .byte	0
07436 198C                        00            .byte	0
07437 198D                        00            .byte	0
07438 198E                        00            .byte	0
07439 198F                        00            .byte	0
07440 1990                        00            .byte	0
07441                                           ! 1190  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 1991                        00            .byte	0
07443 1992                        00            .byte	0
07444 1993                        0C            .byte	$C
07445 1994                        18            .byte	$18
07446 1995                        30            .byte	$30
07447 1996                        30            .byte	$30
07448 1997                        30            .byte	$30
07449 1998                        30            .byte	$30
07450 1999                        30            .byte	$30
07451 199A                        18            .byte	$18
07452 199B                        0C            .byte	$C
07453 199C                        00            .byte	0
07454 199D                        00            .byte	0
07455 199E                        00            .byte	0
07456                                           ! 1191  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 199F                        00            .byte	0
07458 19A0                        00            .byte	0
07459 19A1                        30            .byte	$30
07460 19A2                        18            .byte	$18
07461 19A3                        0C            .byte	$C
07462 19A4                        0C            .byte	$C
07463 19A5                        0C            .byte	$C
07464 19A6                        0C            .byte	$C
07465 19A7                        0C            .byte	$C
07466 19A8                        18            .byte	$18
07467 19A9                        30            .byte	$30
07468 19AA                        00            .byte	0
07469 19AB                        00            .byte	0
07470 19AC                        00            .byte	0
07471                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19AD                        00            .byte	0
07473 19AE                        00            .byte	0
07474 19AF                        00            .byte	0
07475 19B0                        00            .byte	0
07476 19B1                        66            .byte	$66
07477 19B2                        3C            .byte	$3C
07478 19B3                        FF            .byte	$FF
07479 19B4                        3C            .byte	$3C
07480 19B5                        66            .byte	$66
07481 19B6                        00            .byte	0
07482 19B7                        00            .byte	0
07483 19B8                        00            .byte	0
07484 19B9                        00            .byte	0
07485 19BA                        00            .byte	0
07486                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19BB                        00            .byte	0
07488 19BC                        00            .byte	0
07489 19BD                        00            .byte	0
07490 19BE                        00            .byte	0
07491 19BF                        18            .byte	$18
07492 19C0                        18            .byte	$18
07493 19C1                        7E            .byte	$7E
07494 19C2                        18            .byte	$18
07495 19C3                        18            .byte	$18
07496 19C4                        00            .byte	0
07497 19C5                        00            .byte	0
07498 19C6                        00            .byte	0
07499 19C7                        00            .byte	0
07500 19C8                        00            .byte	0
07501                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19C9                        00            .byte	0
07503 19CA                        00            .byte	0
07504 19CB                        00            .byte	0
07505 19CC                        00            .byte	0
07506 19CD                        00            .byte	0
07507 19CE                        00            .byte	0
07508 19CF                        00            .byte	0
07509 19D0                        00            .byte	0
07510 19D1                        18            .byte	$18
07511 19D2                        18            .byte	$18
07512 19D3                        18            .byte	$18
07513 19D4                        30            .byte	$30
07514 19D5                        00            .byte	0
07515 19D6                        00            .byte	0
07516                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19D7                        00            .byte	0
07518 19D8                        00            .byte	0
07519 19D9                        00            .byte	0
07520 19DA                        00            .byte	0
07521 19DB                        00            .byte	0
07522 19DC                        00            .byte	0
07523 19DD                        FE            .byte	$FE
07524 19DE                        00            .byte	0
07525 19DF                        00            .byte	0
07526 19E0                        00            .byte	0
07527 19E1                        00            .byte	0
07528 19E2                        00            .byte	0
07529 19E3                        00            .byte	0
07530 19E4                        00            .byte	0
07531                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19E5                        00            .byte	0
07533 19E6                        00            .byte	0
07534 19E7                        00            .byte	0
07535 19E8                        00            .byte	0
07536 19E9                        00            .byte	0
07537 19EA                        00            .byte	0
07538 19EB                        00            .byte	0
07539 19EC                        00            .byte	0
07540 19ED                        00            .byte	0
07541 19EE                        18            .byte	$18
07542 19EF                        18            .byte	$18
07543 19F0                        00            .byte	0
07544 19F1                        00            .byte	0
07545 19F2                        00            .byte	0
07546                                           ! 1197  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 19F3                        00            .byte	0
07548 19F4                        00            .byte	0
07549 19F5                        02            .byte	2
07550 19F6                        06            .byte	6
07551 19F7                        0C            .byte	$C
07552 19F8                        18            .byte	$18
07553 19F9                        30            .byte	$30
07554 19FA                        60            .byte	$60
07555 19FB                        C0            .byte	$C0
07556 19FC                        80            .byte	$80
07557 19FD                        00            .byte	0
07558 19FE                        00            .byte	0
07559 19FF                        00            .byte	0
07560 1A00                        00            .byte	0
07561                                           ! 1198  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 1A01                        00            .byte	0
07563 1A02                        00            .byte	0
07564 1A03                        7C            .byte	$7C
07565 1A04                        C6            .byte	$C6
07566 1A05                        CE            .byte	$CE
07567 1A06                        DE            .byte	$DE
07568 1A07                        F6            .byte	$F6
07569 1A08                        E6            .byte	$E6
07570 1A09                        C6            .byte	$C6
07571 1A0A                        C6            .byte	$C6
07572 1A0B                        7C            .byte	$7C
07573 1A0C                        00            .byte	0
07574 1A0D                        00            .byte	0
07575 1A0E                        00            .byte	0
07576                                           ! 1199  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A0F                        00            .byte	0
07578 1A10                        00            .byte	0
07579 1A11                        18            .byte	$18
07580 1A12                        38            .byte	$38
07581 1A13                        78            .byte	$78
07582 1A14                        18            .byte	$18
07583 1A15                        18            .byte	$18
07584 1A16                        18            .byte	$18
07585 1A17                        18            .byte	$18
07586 1A18                        18            .byte	$18
07587 1A19                        7E            .byte	$7E
07588 1A1A                        00            .byte	0
07589 1A1B                        00            .byte	0
07590 1A1C                        00            .byte	0
07591                                           ! 1200  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A1D                        00            .byte	0
07593 1A1E                        00            .byte	0
07594 1A1F                        7C            .byte	$7C
07595 1A20                        C6            .byte	$C6
07596 1A21                        06            .byte	6
07597 1A22                        0C            .byte	$C
07598 1A23                        18            .byte	$18
07599 1A24                        30            .byte	$30
07600 1A25                        60            .byte	$60
07601 1A26                        C6            .byte	$C6
07602 1A27                        FE            .byte	$FE
07603 1A28                        00            .byte	0
07604 1A29                        00            .byte	0
07605 1A2A                        00            .byte	0
07606                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A2B                        00            .byte	0
07608 1A2C                        00            .byte	0
07609 1A2D                        7C            .byte	$7C
07610 1A2E                        C6            .byte	$C6
07611 1A2F                        06            .byte	6
07612 1A30                        06            .byte	6
07613 1A31                        3C            .byte	$3C
07614 1A32                        06            .byte	6
07615 1A33                        06            .byte	6
07616 1A34                        C6            .byte	$C6
07617 1A35                        7C            .byte	$7C
07618 1A36                        00            .byte	0
07619 1A37                        00            .byte	0
07620 1A38                        00            .byte	0
07621                                           ! 1202  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07622 1A39                        00            .byte	0
07623 1A3A                        00            .byte	0
07624 1A3B                        0C            .byte	$C
07625 1A3C                        1C            .byte	$1C
07626 1A3D                        3C            .byte	$3C
07627 1A3E                        6C            .byte	$6C
07628 1A3F                        CC            .byte	$CC
07629 1A40                        FE            .byte	$FE
07630 1A41                        0C            .byte	$C
07631 1A42                        0C            .byte	$C
07632 1A43                        1E            .byte	$1E
07633 1A44                        00            .byte	0
07634 1A45                        00            .byte	0
07635 1A46                        00            .byte	0
07636                                           ! 1203  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 
07637 1A47                        00            .byte	0
07638 1A48                        00            .byte	0
07639 1A49                        FE            .byte	$FE
07640 1A4A                        C0            .byte	$C0
07641 1A4B                        C0            .byte	$C0
07642 1A4C                        C0            .byte	$C0
07643 1A4D                        FC            .byte	$FC
07644 1A4E                        06            .byte	6
07645 1A4F                        06            .byte	6
07646 1A50                        C6            .byte	$C6
07647 1A51                        7C            .byte	$7C
07648 1A52                        00            .byte	0
07649 1A53                        00            .byte	0
07650                                           ! 1203 0x00,
07651 1A54                        00            .byte	0
07652                                           ! 1204  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A55                        00            .byte	0
07654 1A56                        00            .byte	0
07655 1A57                        38            .byte	$38
07656 1A58                        60            .byte	$60
07657 1A59                        C0            .byte	$C0
07658 1A5A                        C0            .byte	$C0
07659 1A5B                        FC            .byte	$FC
07660 1A5C                        C6            .byte	$C6
07661 1A5D                        C6            .byte	$C6
07662 1A5E                        C6            .byte	$C6
07663 1A5F                        7C            .byte	$7C
07664 1A60                        00            .byte	0
07665 1A61                        00            .byte	0
07666 1A62                        00            .byte	0
07667                                           ! 1205  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A63                        00            .byte	0
07669 1A64                        00            .byte	0
07670 1A65                        FE            .byte	$FE
07671 1A66                        C6            .byte	$C6
07672 1A67                        06            .byte	6
07673 1A68                        0C            .byte	$C
07674 1A69                        18            .byte	$18
07675 1A6A                        30            .byte	$30
07676 1A6B                        30            .byte	$30
07677 1A6C                        30            .byte	$30
07678 1A6D                        30            .byte	$30
07679 1A6E                        00            .byte	0
07680 1A6F                        00            .byte	0
07681 1A70                        00            .byte	0
07682                                           ! 1206  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A71                        00            .byte	0
07684 1A72                        00            .byte	0
07685 1A73                        7C            .byte	$7C
07686 1A74                        C6            .byte	$C6
07687 1A75                        C6            .byte	$C6
07688 1A76                        C6            .byte	$C6
07689 1A77                        7C            .byte	$7C
07690 1A78                        C6            .byte	$C6
07691 1A79                        C6            .byte	$C6
07692 1A7A                        C6            .byte	$C6
07693 1A7B                        7C            .byte	$7C
07694 1A7C                        00            .byte	0
07695 1A7D                        00            .byte	0
07696 1A7E                        00            .byte	0
07697                                           ! 1207  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A7F                        00            .byte	0
07699 1A80                        00            .byte	0
07700 1A81                        7C            .byte	$7C
07701 1A82                        C6            .byte	$C6
07702 1A83                        C6            .byte	$C6
07703 1A84                        C6            .byte	$C6
07704 1A85                        7E            .byte	$7E
07705 1A86                        06            .byte	6
07706 1A87                        06            .byte	6
07707 1A88                        0C            .byte	$C
07708 1A89                        78            .byte	$78
07709 1A8A                        00            .byte	0
07710 1A8B                        00            .byte	0
07711 1A8C                        00            .byte	0
07712                                           ! 1208  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A8D                        00            .byte	0
07714 1A8E                        00            .byte	0
07715 1A8F                        00            .byte	0
07716 1A90                        18            .byte	$18
07717 1A91                        18            .byte	$18
07718 1A92                        00            .byte	0
07719 1A93                        00            .byte	0
07720 1A94                        00            .byte	0
07721 1A95                        18            .byte	$18
07722 1A96                        18            .byte	$18
07723 1A97                        00            .byte	0
07724 1A98                        00            .byte	0
07725 1A99                        00            .byte	0
07726 1A9A                        00            .byte	0
07727                                           ! 1209  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1A9B                        00            .byte	0
07729 1A9C                        00            .byte	0
07730 1A9D                        00            .byte	0
07731 1A9E                        18            .byte	$18
07732 1A9F                        18            .byte	$18
07733 1AA0                        00            .byte	0
07734 1AA1                        00            .byte	0
07735 1AA2                        00            .byte	0
07736 1AA3                        18            .byte	$18
07737 1AA4                        18            .byte	$18
07738 1AA5                        30            .byte	$30
07739 1AA6                        00            .byte	0
07740 1AA7                        00            .byte	0
07741 1AA8                        00            .byte	0
07742                                           ! 1210  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AA9                        00            .byte	0
07744 1AAA                        00            .byte	0
07745 1AAB                        06            .byte	6
07746 1AAC                        0C            .byte	$C
07747 1AAD                        18            .byte	$18
07748 1AAE                        30            .byte	$30
07749 1AAF                        60            .byte	$60
07750 1AB0                        30            .byte	$30
07751 1AB1                        18            .byte	$18
07752 1AB2                        0C            .byte	$C
07753 1AB3                        06            .byte	6
07754 1AB4                        00            .byte	0
07755 1AB5                        00            .byte	0
07756 1AB6                        00            .byte	0
07757                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1AB7                        00            .byte	0
07759 1AB8                        00            .byte	0
07760 1AB9                        00            .byte	0
07761 1ABA                        00            .byte	0
07762 1ABB                        00            .byte	0
07763 1ABC                        7E            .byte	$7E
07764 1ABD                        00            .byte	0
07765 1ABE                        00            .byte	0
07766 1ABF                        7E            .byte	$7E
07767 1AC0                        00            .byte	0
07768 1AC1                        00            .byte	0
07769 1AC2                        00            .byte	0
07770 1AC3                        00            .byte	0
07771 1AC4                        00            .byte	0
07772                                           ! 1212  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1AC5                        00            .byte	0
07774 1AC6                        00            .byte	0
07775 1AC7                        60            .byte	$60
07776 1AC8                        30            .byte	$30
07777 1AC9                        18            .byte	$18
07778 1ACA                        0C            .byte	$C
07779 1ACB                        06            .byte	6
07780 1ACC                        0C            .byte	$C
07781 1ACD                        18            .byte	$18
07782 1ACE                        30            .byte	$30
07783 1ACF                        60            .byte	$60
07784 1AD0                        00            .byte	0
07785 1AD1                        00            .byte	0
07786 1AD2                        00            .byte	0
07787                                           ! 1213  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1AD3                        00            .byte	0
07789 1AD4                        00            .byte	0
07790 1AD5                        7C            .byte	$7C
07791 1AD6                        C6            .byte	$C6
07792 1AD7                        C6            .byte	$C6
07793 1AD8                        0C            .byte	$C
07794 1AD9                        18            .byte	$18
07795 1ADA                        18            .byte	$18
07796 1ADB                        00            .byte	0
07797 1ADC                        18            .byte	$18
07798 1ADD                        18            .byte	$18
07799 1ADE                        00            .byte	0
07800 1ADF                        00            .byte	0
07801 1AE0                        00            .byte	0
07802                                           ! 1214  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1AE1                        00            .byte	0
07804 1AE2                        00            .byte	0
07805 1AE3                        7C            .byte	$7C
07806 1AE4                        C6            .byte	$C6
07807 1AE5                        C6            .byte	$C6
07808 1AE6                        DE            .byte	$DE
07809 1AE7                        DE            .byte	$DE
07810 1AE8                        DE            .byte	$DE
07811 1AE9                        DC            .byte	$DC
07812 1AEA                        C0            .byte	$C0
07813 1AEB                        7C            .byte	$7C
07814 1AEC                        00            .byte	0
07815 1AED                        00            .byte	0
07816 1AEE                        00            .byte	0
07817                                           ! 1215  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AEF                        00            .byte	0
07819 1AF0                        00            .byte	0
07820 1AF1                        10            .byte	$10
07821 1AF2                        38            .byte	$38
07822 1AF3                        6C            .byte	$6C
07823 1AF4                        C6            .byte	$C6
07824 1AF5                        C6            .byte	$C6
07825 1AF6                        FE            .byte	$FE
07826 1AF7                        C6            .byte	$C6
07827 1AF8                        C6            .byte	$C6
07828 1AF9                        C6            .byte	$C6
07829 1AFA                        00            .byte	0
07830 1AFB                        00            .byte	0
07831 1AFC                        00            .byte	0
07832                                           ! 1216  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1AFD                        00            .byte	0
07834 1AFE                        00            .byte	0
07835 1AFF                        FC            .byte	$FC
07836 1B00                        66            .byte	$66
07837 1B01                        66            .byte	$66
07838 1B02                        66            .byte	$66
07839 1B03                        7C            .byte	$7C
07840 1B04                        66            .byte	$66
07841 1B05                        66            .byte	$66
07842 1B06                        66            .byte	$66
07843 1B07                        FC            .byte	$FC
07844 1B08                        00            .byte	0
07845 1B09                        00            .byte	0
07846 1B0A                        00            .byte	0
07847                                           ! 1217  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B0B                        00            .byte	0
07849 1B0C                        00            .byte	0
07850 1B0D                        3C            .byte	$3C
07851 1B0E                        66            .byte	$66
07852 1B0F                        C2            .byte	$C2
07853 1B10                        C0            .byte	$C0
07854 1B11                        C0            .byte	$C0
07855 1B12                        C0            .byte	$C0
07856 1B13                        C2            .byte	$C2
07857 1B14                        66            .byte	$66
07858 1B15                        3C            .byte	$3C
07859 1B16                        00            .byte	0
07860 1B17                        00            .byte	0
07861 1B18                        00            .byte	0
07862                                           ! 1218  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B19                        00            .byte	0
07864 1B1A                        00            .byte	0
07865 1B1B                        F8            .byte	$F8
07866 1B1C                        6C            .byte	$6C
07867 1B1D                        66            .byte	$66
07868 1B1E                        66            .byte	$66
07869 1B1F                        66            .byte	$66
07870 1B20                        66            .byte	$66
07871 1B21                        66            .byte	$66
07872 1B22                        6C            .byte	$6C
07873 1B23                        F8            .byte	$F8
07874 1B24                        00            .byte	0
07875 1B25                        00            .byte	0
07876 1B26                        00            .byte	0
07877                                           ! 1219  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B27                        00            .byte	0
07879 1B28                        00            .byte	0
07880 1B29                        FE            .byte	$FE
07881 1B2A                        66            .byte	$66
07882 1B2B                        62            .byte	$62
07883 1B2C                        68            .byte	$68
07884 1B2D                        78            .byte	$78
07885 1B2E                        68            .byte	$68
07886 1B2F                        62            .byte	$62
07887 1B30                        66            .byte	$66
07888 1B31                        FE            .byte	$FE
07889 1B32                        00            .byte	0
07890 1B33                        00            .byte	0
07891 1B34                        00            .byte	0
07892                                           ! 1220  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B35                        00            .byte	0
07894 1B36                        00            .byte	0
07895 1B37                        FE            .byte	$FE
07896 1B38                        66            .byte	$66
07897 1B39                        62            .byte	$62
07898 1B3A                        68            .byte	$68
07899 1B3B                        78            .byte	$78
07900 1B3C                        68            .byte	$68
07901 1B3D                        60            .byte	$60
07902 1B3E                        60            .byte	$60
07903 1B3F                        F0            .byte	$F0
07904 1B40                        00            .byte	0
07905 1B41                        00            .byte	0
07906 1B42                        00            .byte	0
07907                                           ! 1221  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B43                        00            .byte	0
07909 1B44                        00            .byte	0
07910 1B45                        3C            .byte	$3C
07911 1B46                        66            .byte	$66
07912 1B47                        C2            .byte	$C2
07913 1B48                        C0            .byte	$C0
07914 1B49                        C0            .byte	$C0
07915 1B4A                        DE            .byte	$DE
07916 1B4B                        C6            .byte	$C6
07917 1B4C                        66            .byte	$66
07918 1B4D                        3A            .byte	$3A
07919 1B4E                        00            .byte	0
07920 1B4F                        00            .byte	0
07921 1B50                        00            .byte	0
07922                                           ! 1222  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B51                        00            .byte	0
07924 1B52                        00            .byte	0
07925 1B53                        C6            .byte	$C6
07926 1B54                        C6            .byte	$C6
07927 1B55                        C6            .byte	$C6
07928 1B56                        C6            .byte	$C6
07929 1B57                        FE            .byte	$FE
07930 1B58                        C6            .byte	$C6
07931 1B59                        C6            .byte	$C6
07932 1B5A                        C6            .byte	$C6
07933 1B5B                        C6            .byte	$C6
07934 1B5C                        00            .byte	0
07935 1B5D                        00            .byte	0
07936 1B5E                        00            .byte	0
07937                                           ! 1223  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B5F                        00            .byte	0
07939 1B60                        00            .byte	0
07940 1B61                        3C            .byte	$3C
07941 1B62                        18            .byte	$18
07942 1B63                        18            .byte	$18
07943 1B64                        18            .byte	$18
07944 1B65                        18            .byte	$18
07945 1B66                        18            .byte	$18
07946 1B67                        18            .byte	$18
07947 1B68                        18            .byte	$18
07948 1B69                        3C            .byte	$3C
07949 1B6A                        00            .byte	0
07950 1B6B                        00            .byte	0
07951 1B6C                        00            .byte	0
07952                                           ! 1224  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B6D                        00            .byte	0
07954 1B6E                        00            .byte	0
07955 1B6F                        1E            .byte	$1E
07956 1B70                        0C            .byte	$C
07957 1B71                        0C            .byte	$C
07958 1B72                        0C            .byte	$C
07959 1B73                        0C            .byte	$C
07960 1B74                        0C            .byte	$C
07961 1B75                        CC            .byte	$CC
07962 1B76                        CC            .byte	$CC
07963 1B77                        78            .byte	$78
07964 1B78                        00            .byte	0
07965 1B79                        00            .byte	0
07966 1B7A                        00            .byte	0
07967                                           ! 1225  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B7B                        00            .byte	0
07969 1B7C                        00            .byte	0
07970 1B7D                        E6            .byte	$E6
07971 1B7E                        66            .byte	$66
07972 1B7F                        6C            .byte	$6C
07973 1B80                        6C            .byte	$6C
07974 1B81                        78            .byte	$78
07975 1B82                        6C            .byte	$6C
07976 1B83                        6C            .byte	$6C
07977 1B84                        66            .byte	$66
07978 1B85                        E6            .byte	$E6
07979 1B86                        00            .byte	0
07980 1B87                        00            .byte	0
07981 1B88                        00            .byte	0
07982                                           ! 1226  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07983 1B89                        00            .byte	0
07984 1B8A                        00            .byte	0
07985 1B8B                        F0            .byte	$F0
07986 1B8C                        60            .byte	$60
07987 1B8D                        60            .byte	$60
07988 1B8E                        60            .byte	$60
07989 1B8F                        60            .byte	$60
07990 1B90                        60            .byte	$60
07991 1B91                        62            .byte	$62
07992 1B92                        66            .byte	$66
07993 1B93                        FE            .byte	$FE
07994 1B94                        00            .byte	0
07995 1B95                        00            .byte	0
07996 1B96                        00            .byte	0
07997                                           ! 1227  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07998 1B97                        00            .byte	0
07999 1B98                        00            .byte	0
08000 1B99                        C6            .byte	$C6
08001 1B9A                        EE            .byte	$EE
08002 1B9B                        FE            .byte	$FE
08003 1B9C                        FE            .byte	$FE
08004 1B9D                        D6            .byte	$D6
08005 1B9E                        C6            .byte	$C6
08006 1B9F                        C6            .byte	$C6
08007 1BA0                        C6            .byte	$C6
08008 1BA1                        C6            .byte	$C6
08009 1BA2                        00            .byte	0
08010 1BA3                        00            .byte	0
08011 1BA4                        00            .byte	0
08012                                           ! 1228  0
08013                                           ! 1228 x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08014 1BA5                        00            .byte	0
08015 1BA6                        00            .byte	0
08016 1BA7                        C6            .byte	$C6
08017 1BA8                        E6            .byte	$E6
08018 1BA9                        F6            .byte	$F6
08019 1BAA                        FE            .byte	$FE
08020 1BAB                        DE            .byte	$DE
08021 1BAC                        CE            .byte	$CE
08022 1BAD                        C6            .byte	$C6
08023 1BAE                        C6            .byte	$C6
08024 1BAF                        C6            .byte	$C6
08025 1BB0                        00            .byte	0
08026 1BB1                        00            .byte	0
08027 1BB2                        00            .byte	0
08028                                           ! 1229  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BB3                        00            .byte	0
08030 1BB4                        00            .byte	0
08031 1BB5                        38            .byte	$38
08032 1BB6                        6C            .byte	$6C
08033 1BB7                        C6            .byte	$C6
08034 1BB8                        C6            .byte	$C6
08035 1BB9                        C6            .byte	$C6
08036 1BBA                        C6            .byte	$C6
08037 1BBB                        C6            .byte	$C6
08038 1BBC                        6C            .byte	$6C
08039 1BBD                        38            .byte	$38
08040 1BBE                        00            .byte	0
08041 1BBF                        00            .byte	0
08042 1BC0                        00            .byte	0
08043                                           ! 1230  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BC1                        00            .byte	0
08045 1BC2                        00            .byte	0
08046 1BC3                        FC            .byte	$FC
08047 1BC4                        66            .byte	$66
08048 1BC5                        66            .byte	$66
08049 1BC6                        66            .byte	$66
08050 1BC7                        7C            .byte	$7C
08051 1BC8                        60            .byte	$60
08052 1BC9                        60            .byte	$60
08053 1BCA                        60            .byte	$60
08054 1BCB                        F0            .byte	$F0
08055 1BCC                        00            .byte	0
08056 1BCD                        00            .byte	0
08057 1BCE                        00            .byte	0
08058                                           ! 1231  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BCF                        00            .byte	0
08060 1BD0                        00            .byte	0
08061 1BD1                        7C            .byte	$7C
08062 1BD2                        C6            .byte	$C6
08063 1BD3                        C6            .byte	$C6
08064 1BD4                        C6            .byte	$C6
08065 1BD5                        C6            .byte	$C6
08066 1BD6                        D6            .byte	$D6
08067 1BD7                        DE            .byte	$DE
08068 1BD8                        7C            .byte	$7C
08069 1BD9                        0C            .byte	$C
08070 1BDA                        0E            .byte	$E
08071 1BDB                        00            .byte	0
08072 1BDC                        00            .byte	0
08073                                           ! 1232  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BDD                        00            .byte	0
08075 1BDE                        00            .byte	0
08076 1BDF                        FC            .byte	$FC
08077 1BE0                        66            .byte	$66
08078 1BE1                        66            .byte	$66
08079 1BE2                        66            .byte	$66
08080 1BE3                        7C            .byte	$7C
08081 1BE4                        6C            .byte	$6C
08082 1BE5                        66            .byte	$66
08083 1BE6                        66            .byte	$66
08084 1BE7                        E6            .byte	$E6
08085 1BE8                        00            .byte	0
08086 1BE9                        00            .byte	0
08087 1BEA                        00            .byte	0
08088                                           ! 1233  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BEB                        00            .byte	0
08090 1BEC                        00            .byte	0
08091 1BED                        7C            .byte	$7C
08092 1BEE                        C6            .byte	$C6
08093 1BEF                        C6            .byte	$C6
08094 1BF0                        60            .byte	$60
08095 1BF1                        38            .byte	$38
08096 1BF2                        0C            .byte	$C
08097 1BF3                        C6            .byte	$C6
08098 1BF4                        C6            .byte	$C6
08099 1BF5                        7C            .byte	$7C
08100 1BF6                        00            .byte	0
08101 1BF7                        00            .byte	0
08102 1BF8                        00            .byte	0
08103                                           ! 1234  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1BF9                        00            .byte	0
08105 1BFA                        00            .byte	0
08106 1BFB                        7E            .byte	$7E
08107 1BFC                        7E            .byte	$7E
08108 1BFD                        5A            .byte	$5A
08109 1BFE                        18            .byte	$18
08110 1BFF                        18            .byte	$18
08111 1C00                        18            .byte	$18
08112 1C01                        18            .byte	$18
08113 1C02                        18            .byte	$18
08114 1C03                        3C            .byte	$3C
08115 1C04                        00            .byte	0
08116 1C05                        00            .byte	0
08117 1C06                        00            .byte	0
08118                                           ! 1235  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C07                        00            .byte	0
08120 1C08                        00            .byte	0
08121 1C09                        C6            .byte	$C6
08122 1C0A                        C6            .byte	$C6
08123 1C0B                        C6            .byte	$C6
08124 1C0C                        C6            .byte	$C6
08125 1C0D                        C6            .byte	$C6
08126 1C0E                        C6            .byte	$C6
08127 1C0F                        C6            .byte	$C6
08128 1C10                        C6            .byte	$C6
08129 1C11                        7C            .byte	$7C
08130 1C12                        00            .byte	0
08131 1C13                        00            .byte	0
08132 1C14                        00            .byte	0
08133                                           ! 1236  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C15                        00            .byte	0
08135 1C16                        00            .byte	0
08136 1C17                        C6            .byte	$C6
08137 1C18                        C6            .byte	$C6
08138 1C19                        C6            .byte	$C6
08139 1C1A                        C6            .byte	$C6
08140 1C1B                        C6            .byte	$C6
08141 1C1C                        C6            .byte	$C6
08142 1C1D                        6C            .byte	$6C
08143 1C1E                        38            .byte	$38
08144 1C1F                        10            .byte	$10
08145 1C20                        00            .byte	0
08146 1C21                        00            .byte	0
08147 1C22                        00            .byte	0
08148                                           ! 1237  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C23                        00            .byte	0
08150 1C24                        00            .byte	0
08151 1C25                        C6            .byte	$C6
08152 1C26                        C6            .byte	$C6
08153 1C27                        C6            .byte	$C6
08154 1C28                        C6            .byte	$C6
08155 1C29                        D6            .byte	$D6
08156 1C2A                        D6            .byte	$D6
08157 1C2B                        FE            .byte	$FE
08158 1C2C                        7C            .byte	$7C
08159 1C2D                        6C            .byte	$6C
08160 1C2E                        00            .byte	0
08161 1C2F                        00            .byte	0
08162 1C30                        00            .byte	0
08163                                           ! 1238  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C31                        00            .byte	0
08165 1C32                        00            .byte	0
08166 1C33                        C6            .byte	$C6
08167 1C34                        C6            .byte	$C6
08168 1C35                        6C            .byte	$6C
08169 1C36                        38            .byte	$38
08170 1C37                        38            .byte	$38
08171 1C38                        38            .byte	$38
08172 1C39                        6C            .byte	$6C
08173 1C3A                        C6            .byte	$C6
08174 1C3B                        C6            .byte	$C6
08175 1C3C                        00            .byte	0
08176 1C3D                        00            .byte	0
08177 1C3E                        00            .byte	0
08178                                           ! 1239  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C3F                        00            .byte	0
08180 1C40                        00            .byte	0
08181 1C41                        66            .byte	$66
08182 1C42                        66            .byte	$66
08183 1C43                        66            .byte	$66
08184 1C44                        66            .byte	$66
08185 1C45                        3C            .byte	$3C
08186 1C46                        18            .byte	$18
08187 1C47                        18            .byte	$18
08188 1C48                        18            .byte	$18
08189 1C49                        3C            .byte	$3C
08190 1C4A                        00            .byte	0
08191 1C4B                        00            .byte	0
08192 1C4C                        00            .byte	0
08193                                           ! 1240  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C4D                        00            .byte	0
08195 1C4E                        00            .byte	0
08196 1C4F                        FE            .byte	$FE
08197 1C50                        C6            .byte	$C6
08198 1C51                        8C            .byte	$8C
08199 1C52                        18            .byte	$18
08200 1C53                        30            .byte	$30
08201 1C54                        60            .byte	$60
08202 1C55                        C2            .byte	$C2
08203 1C56                        C6            .byte	$C6
08204 1C57                        FE            .byte	$FE
08205 1C58                        00            .byte	0
08206 1C59                        00            .byte	0
08207 1C5A                        00            .byte	0
08208                                           ! 1241  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C5B                        00            .byte	0
08210 1C5C                        00            .byte	0
08211 1C5D                        3C            .byte	$3C
08212 1C5E                        30            .byte	$30
08213 1C5F                        30            .byte	$30
08214 1C60                        30            .byte	$30
08215 1C61                        30            .byte	$30
08216 1C62                        30            .byte	$30
08217 1C63                        30            .byte	$30
08218 1C64                        30            .byte	$30
08219 1C65                        3C            .byte	$3C
08220 1C66                        00            .byte	0
08221 1C67                        00            .byte	0
08222 1C68                        00            .byte	0
08223                                           ! 1242  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C69                        00            .byte	0
08225 1C6A                        00            .byte	0
08226 1C6B                        80            .byte	$80
08227 1C6C                        C0            .byte	$C0
08228 1C6D                        E0            .byte	$E0
08229 1C6E                        70            .byte	$70
08230 1C6F                        38            .byte	$38
08231 1C70                        1C            .byte	$1C
08232 1C71                        0E            .byte	$E
08233 1C72                        06            .byte	6
08234 1C73                        02            .byte	2
08235 1C74                        00            .byte	0
08236 1C75                        00            .byte	0
08237 1C76                        00            .byte	0
08238                                           ! 1243  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C77                        00            .byte	0
08240 1C78                        00            .byte	0
08241 1C79                        3C            .byte	$3C
08242 1C7A                        0C            .byte	$C
08243 1C7B                        0C            .byte	$C
08244 1C7C                        0C            .byte	$C
08245 1C7D                        0C            .byte	$C
08246 1C7E                        0C            .byte	$C
08247 1C7F                        0C            .byte	$C
08248 1C80                        0C            .byte	$C
08249 1C81                        3C            .byte	$3C
08250 1C82                        00            .byte	0
08251 1C83                        00            .byte	0
08252 1C84                        00            .byte	0
08253                                           ! 1244  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C85                        10            .byte	$10
08255 1C86                        38            .byte	$38
08256 1C87                        6C            .byte	$6C
08257 1C88                        C6            .byte	$C6
08258 1C89                        00            .byte	0
08259 1C8A                        00            .byte	0
08260 1C8B                        00            .byte	0
08261 1C8C                        00            .byte	0
08262 1C8D                        00            .byte	0
08263 1C8E                        00            .byte	0
08264 1C8F                        00            .byte	0
08265 1C90                        00            .byte	0
08266 1C91                        00            .byte	0
08267 1C92                        00            .byte	0
08268                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1C93                        00            .byte	0
08270 1C94                        00            .byte	0
08271 1C95                        00            .byte	0
08272 1C96                        00            .byte	0
08273 1C97                        00            .byte	0
08274 1C98                        00            .byte	0
08275 1C99                        00            .byte	0
08276 1C9A                        00            .byte	0
08277 1C9B                        00            .byte	0
08278 1C9C                        00            .byte	0
08279 1C9D                        00            .byte	0
08280 1C9E                        00            .byte	0
08281 1C9F                        FF            .byte	$FF
08282 1CA0                        00            .byte	0
08283                                           ! 1246  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1CA1                        30            .byte	$30
08285 1CA2                        30            .byte	$30
08286 1CA3                        18            .byte	$18
08287 1CA4                        00            .byte	0
08288 1CA5                        00            .byte	0
08289 1CA6                        00            .byte	0
08290 1CA7                        00            .byte	0
08291 1CA8                        00            .byte	0
08292 1CA9                        00            .byte	0
08293 1CAA                        00            .byte	0
08294 1CAB                        00            .byte	0
08295 1CAC                        00            .byte	0
08296 1CAD                        00            .byte	0
08297 1CAE                        00            .byte	0
08298                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CAF                        00            .byte	0
08300 1CB0                        00            .byte	0
08301 1CB1                        00            .byte	0
08302 1CB2                        00            .byte	0
08303 1CB3                        00            .byte	0
08304 1CB4                        78            .byte	$78
08305 1CB5                        0C            .byte	$C
08306 1CB6                        7C            .byte	$7C
08307 1CB7                        CC            .byte	$CC
08308 1CB8                        CC            .byte	$CC
08309 1CB9                        76            .byte	$76
08310 1CBA                        00            .byte	0
08311 1CBB                        00            .byte	0
08312 1CBC                        00            .byte	0
08313                                           ! 1248  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CBD                        00            .byte	0
08315 1CBE                        00            .byte	0
08316 1CBF                        E0            .byte	$E0
08317 1CC0                        60            .byte	$60
08318 1CC1                        60            .byte	$60
08319 1CC2                        78            .byte	$78
08320 1CC3                        6C            .byte	$6C
08321 1CC4                        66            .byte	$66
08322 1CC5                        66            .byte	$66
08323 1CC6                        66            .byte	$66
08324 1CC7                        7C            .byte	$7C
08325 1CC8                        00            .byte	0
08326 1CC9                        00            .byte	0
08327 1CCA                        00            .byte	0
08328                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CCB                        00            .byte	0
08330 1CCC                        00            .byte	0
08331 1CCD                        00            .byte	0
08332 1CCE                        00            .byte	0
08333 1CCF                        00            .byte	0
08334 1CD0                        7C            .byte	$7C
08335 1CD1                        C6            .byte	$C6
08336 1CD2                        C0            .byte	$C0
08337 1CD3                        C0            .byte	$C0
08338 1CD4                        C6            .byte	$C6
08339 1CD5                        7C            .byte	$7C
08340 1CD6                        00            .byte	0
08341 1CD7                        00            .byte	0
08342 1CD8                        00            .byte	0
08343                                           ! 1250  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08344 1CD9                        00            .byte	0
08345 1CDA                        00            .byte	0
08346 1CDB                        1C            .byte	$1C
08347 1CDC                        0C            .byte	$C
08348 1CDD                        0C            .byte	$C
08349 1CDE                        3C            .byte	$3C
08350 1CDF                        6C            .byte	$6C
08351 1CE0                        CC            .byte	$CC
08352 1CE1                        CC            .byte	$CC
08353 1CE2                        CC            .byte	$CC
08354 1CE3                        76            .byte	$76
08355 1CE4                        00            .byte	0
08356 1CE5                        00            .byte	0
08357 1CE6                        00            .byte	0
08358                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08359 1CE7                        00            .byte	0
08360 1CE8                        00            .byte	0
08361 1CE9                        00            .byte	0
08362 1CEA                        00            .byte	0
08363 1CEB                        00            .byte	0
08364 1CEC                        7C            .byte	$7C
08365 1CED                        C6            .byte	$C6
08366 1CEE                        FE            .byte	$FE
08367 1CEF                        C0            .byte	$C0
08368 1CF0                        C6            .byte	$C6
08369 1CF1                        7C            .byte	$7C
08370 1CF2                        00            .byte	0
08371 1CF3                        00            .byte	0
08372 1CF4                        00            .byte	0
08373                                           ! 1252  0x00, 0x0
08374 1CF5                        00            .byte	0
08375                                           ! 1252 0, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08376 1CF6                        00            .byte	0
08377 1CF7                        38            .byte	$38
08378 1CF8                        6C            .byte	$6C
08379 1CF9                        64            .byte	$64
08380 1CFA                        60            .byte	$60
08381 1CFB                        F0            .byte	$F0
08382 1CFC                        60            .byte	$60
08383 1CFD                        60            .byte	$60
08384 1CFE                        60            .byte	$60
08385 1CFF                        F0            .byte	$F0
08386 1D00                        00            .byte	0
08387 1D01                        00            .byte	0
08388 1D02                        00            .byte	0
08389                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1D03                        00            .byte	0
08391 1D04                        00            .byte	0
08392 1D05                        00            .byte	0
08393 1D06                        00            .byte	0
08394 1D07                        00            .byte	0
08395 1D08                        76            .byte	$76
08396 1D09                        CC            .byte	$CC
08397 1D0A                        CC            .byte	$CC
08398 1D0B                        CC            .byte	$CC
08399 1D0C                        7C            .byte	$7C
08400 1D0D                        0C            .byte	$C
08401 1D0E                        CC            .byte	$CC
08402 1D0F                        78            .byte	$78
08403 1D10                        00            .byte	0
08404                                           ! 1254  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D11                        00            .byte	0
08406 1D12                        00            .byte	0
08407 1D13                        E0            .byte	$E0
08408 1D14                        60            .byte	$60
08409 1D15                        60            .byte	$60
08410 1D16                        6C            .byte	$6C
08411 1D17                        76            .byte	$76
08412 1D18                        66            .byte	$66
08413 1D19                        66            .byte	$66
08414 1D1A                        66            .byte	$66
08415 1D1B                        E6            .byte	$E6
08416 1D1C                        00            .byte	0
08417 1D1D                        00            .byte	0
08418 1D1E                        00            .byte	0
08419                                           ! 1255  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D1F                        00            .byte	0
08421 1D20                        00            .byte	0
08422 1D21                        18            .byte	$18
08423 1D22                        18            .byte	$18
08424 1D23                        00            .byte	0
08425 1D24                        38            .byte	$38
08426 1D25                        18            .byte	$18
08427 1D26                        18            .byte	$18
08428 1D27                        18            .byte	$18
08429 1D28                        18            .byte	$18
08430 1D29                        3C            .byte	$3C
08431 1D2A                        00            .byte	0
08432 1D2B                        00            .byte	0
08433 1D2C                        00            .byte	0
08434                                           ! 1256  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D2D                        00            .byte	0
08436 1D2E                        00            .byte	0
08437 1D2F                        06            .byte	6
08438 1D30                        06            .byte	6
08439 1D31                        00            .byte	0
08440 1D32                        0E            .byte	$E
08441 1D33                        06            .byte	6
08442 1D34                        06            .byte	6
08443 1D35                        06            .byte	6
08444 1D36                        06            .byte	6
08445 1D37                        66            .byte	$66
08446 1D38                        66            .byte	$66
08447 1D39                        3C            .byte	$3C
08448 1D3A                        00            .byte	0
08449                                           ! 1257  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D3B                        00            .byte	0
08451 1D3C                        00            .byte	0
08452 1D3D                        E0            .byte	$E0
08453 1D3E                        60            .byte	$60
08454 1D3F                        60            .byte	$60
08455 1D40                        66            .byte	$66
08456 1D41                        6C            .byte	$6C
08457 1D42                        78            .byte	$78
08458 1D43                        6C            .byte	$6C
08459 1D44                        66            .byte	$66
08460 1D45                        E6            .byte	$E6
08461 1D46                        00            .byte	0
08462 1D47                        00            .byte	0
08463 1D48                        00            .byte	0
08464                                           ! 1258  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D49                        00            .byte	0
08466 1D4A                        00            .byte	0
08467 1D4B                        38            .byte	$38
08468 1D4C                        18            .byte	$18
08469 1D4D                        18            .byte	$18
08470 1D4E                        18            .byte	$18
08471 1D4F                        18            .byte	$18
08472 1D50                        18            .byte	$18
08473 1D51                        18            .byte	$18
08474 1D52                        18            .byte	$18
08475 1D53                        3C            .byte	$3C
08476 1D54                        00            .byte	0
08477 1D55                        00            .byte	0
08478 1D56                        00            .byte	0
08479                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D57                        00            .byte	0
08481 1D58                        00            .byte	0
08482 1D59                        00            .byte	0
08483 1D5A                        00            .byte	0
08484 1D5B                        00            .byte	0
08485 1D5C                        EC            .byte	$EC
08486 1D5D                        FE            .byte	$FE
08487 1D5E                        D6            .byte	$D6
08488 1D5F                        D6            .byte	$D6
08489 1D60                        D6            .byte	$D6
08490 1D61                        C6            .byte	$C6
08491 1D62                        00            .byte	0
08492 1D63                        00            .byte	0
08493 1D64                        00            .byte	0
08494                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D65                        00            .byte	0
08496 1D66                        00            .byte	0
08497 1D67                        00            .byte	0
08498 1D68                        00            .byte	0
08499 1D69                        00            .byte	0
08500 1D6A                        DC            .byte	$DC
08501 1D6B                        66            .byte	$66
08502 1D6C                        66            .byte	$66
08503 1D6D                        66            .byte	$66
08504 1D6E                        66            .byte	$66
08505 1D6F                        66            .byte	$66
08506 1D70                        00            .byte	0
08507 1D71                        00            .byte	0
08508 1D72                        00            .byte	0
08509                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D73                        00            .byte	0
08511 1D74                        00            .byte	0
08512 1D75                        00            .byte	0
08513 1D76                        00            .byte	0
08514 1D77                        00            .byte	0
08515 1D78                        7C            .byte	$7C
08516 1D79                        C6            .byte	$C6
08517 1D7A                        C6            .byte	$C6
08518 1D7B                        C6            .byte	$C6
08519 1D7C                        C6            .byte	$C6
08520 1D7D                        7C            .byte	$7C
08521 1D7E                        00            .byte	0
08522 1D7F                        00            .byte	0
08523 1D80                        00            .byte	0
08524                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D81                        00            .byte	0
08526 1D82                        00            .byte	0
08527 1D83                        00            .byte	0
08528 1D84                        00            .byte	0
08529 1D85                        00            .byte	0
08530 1D86                        DC            .byte	$DC
08531 1D87                        66            .byte	$66
08532 1D88                        66            .byte	$66
08533 1D89                        66            .byte	$66
08534 1D8A                        7C            .byte	$7C
08535 1D8B                        60            .byte	$60
08536 1D8C                        60            .byte	$60
08537 1D8D                        F0            .byte	$F0
08538 1D8E                        00            .byte	0
08539                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D8F                        00            .byte	0
08541 1D90                        00            .byte	0
08542 1D91                        00            .byte	0
08543 1D92                        00            .byte	0
08544 1D93                        00            .byte	0
08545 1D94                        76            .byte	$76
08546 1D95                        CC            .byte	$CC
08547 1D96                        CC            .byte	$CC
08548 1D97                        CC            .byte	$CC
08549 1D98                        7C            .byte	$7C
08550 1D99                        0C            .byte	$C
08551 1D9A                        0C            .byte	$C
08552 1D9B                        1E            .byte	$1E
08553 1D9C                        00            .byte	0
08554                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1D9D                        00            .byte	0
08556 1D9E                        00            .byte	0
08557 1D9F                        00            .byte	0
08558 1DA0                        00            .byte	0
08559 1DA1                        00            .byte	0
08560 1DA2                        DC            .byte	$DC
08561 1DA3                        76            .byte	$76
08562 1DA4                        66            .byte	$66
08563 1DA5                        60            .byte	$60
08564 1DA6                        60            .byte	$60
08565 1DA7                        F0            .byte	$F0
08566 1DA8                        00            .byte	0
08567 1DA9                        00            .byte	0
08568 1DAA                        00            .byte	0
08569                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DAB                        00            .byte	0
08571 1DAC                        00            .byte	0
08572 1DAD                        00            .byte	0
08573 1DAE                        00            .byte	0
08574 1DAF                        00            .byte	0
08575 1DB0                        7C            .byte	$7C
08576 1DB1                        C6            .byte	$C6
08577 1DB2                        70            .byte	$70
08578 1DB3                        1C            .byte	$1C
08579 1DB4                        C6            .byte	$C6
08580 1DB5                        7C            .byte	$7C
08581 1DB6                        00            .byte	0
08582 1DB7                        00            .byte	0
08583 1DB8                        00            .byte	0
08584                                           ! 1266  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DB9                        00            .byte	0
08586 1DBA                        00            .byte	0
08587 1DBB                        10            .byte	$10
08588 1DBC                        30            .byte	$30
08589 1DBD                        30            .byte	$30
08590 1DBE                        FC            .byte	$FC
08591 1DBF                        30            .byte	$30
08592 1DC0                        30            .byte	$30
08593 1DC1                        30            .byte	$30
08594 1DC2                        36            .byte	$36
08595 1DC3                        1C            .byte	$1C
08596 1DC4                        00            .byte	0
08597 1DC5                        00            .byte	0
08598 1DC6                        00            .byte	0
08599                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DC7                        00            .byte	0
08601 1DC8                        00            .byte	0
08602 1DC9                        00            .byte	0
08603 1DCA                        00            .byte	0
08604 1DCB                        00            .byte	0
08605 1DCC                        CC            .byte	$CC
08606 1DCD                        CC            .byte	$CC
08607 1DCE                        CC            .byte	$CC
08608 1DCF                        CC            .byte	$CC
08609 1DD0                        CC            .byte	$CC
08610 1DD1                        76            .byte	$76
08611 1DD2                        00            .byte	0
08612 1DD3                        00            .byte	0
08613 1DD4                        00            .byte	0
08614                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DD5                        00            .byte	0
08616 1DD6                        00            .byte	0
08617 1DD7                        00            .byte	0
08618 1DD8                        00            .byte	0
08619 1DD9                        00            .byte	0
08620 1DDA                        66            .byte	$66
08621 1DDB                        66            .byte	$66
08622 1DDC                        66            .byte	$66
08623 1DDD                        66            .byte	$66
08624 1DDE                        3C            .byte	$3C
08625 1DDF                        18            .byte	$18
08626 1DE0                        00            .byte	0
08627 1DE1                        00            .byte	0
08628 1DE2                        00            .byte	0
08629                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DE3                        00            .byte	0
08631 1DE4                        00            .byte	0
08632 1DE5                        00            .byte	0
08633 1DE6                        00            .byte	0
08634 1DE7                        00            .byte	0
08635 1DE8                        C6            .byte	$C6
08636 1DE9                        C6            .byte	$C6
08637 1DEA                        D6            .byte	$D6
08638 1DEB                        D6            .byte	$D6
08639 1DEC                        FE            .byte	$FE
08640 1DED                        6C            .byte	$6C
08641 1DEE                        00            .byte	0
08642 1DEF                        00            .byte	0
08643 1DF0                        00            .byte	0
08644                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DF1                        00            .byte	0
08646 1DF2                        00            .byte	0
08647 1DF3                        00            .byte	0
08648 1DF4                        00            .byte	0
08649 1DF5                        00            .byte	0
08650 1DF6                        C6            .byte	$C6
08651 1DF7                        6C            .byte	$6C
08652 1DF8                        38            .byte	$38
08653 1DF9                        38            .byte	$38
08654 1DFA                        6C            .byte	$6C
08655 1DFB                        C6            .byte	$C6
08656 1DFC                        00            .byte	0
08657 1DFD                        00            .byte	0
08658 1DFE                        00            .byte	0
08659                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1DFF                        00            .byte	0
08661 1E00                        00            .byte	0
08662 1E01                        00            .byte	0
08663 1E02                        00            .byte	0
08664 1E03                        00            .byte	0
08665 1E04                        C6            .byte	$C6
08666 1E05                        C6            .byte	$C6
08667 1E06                        C6            .byte	$C6
08668 1E07                        C6            .byte	$C6
08669 1E08                        7E            .byte	$7E
08670 1E09                        06            .byte	6
08671 1E0A                        0C            .byte	$C
08672 1E0B                        F8            .byte	$F8
08673 1E0C                        00            .byte	0
08674                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E0D                        00            .byte	0
08676 1E0E                        00            .byte	0
08677 1E0F                        00            .byte	0
08678 1E10                        00            .byte	0
08679 1E11                        00            .byte	0
08680 1E12                        FE            .byte	$FE
08681 1E13                        CC            .byte	$CC
08682 1E14                        18            .byte	$18
08683 1E15                        30            .byte	$30
08684 1E16                        66            .byte	$66
08685 1E17                        FE            .byte	$FE
08686 1E18                        00            .byte	0
08687 1E19                        00            .byte	0
08688 1E1A                        00            .byte	0
08689                                           ! 1273  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E1B                        00            .byte	0
08691 1E1C                        00            .byte	0
08692 1E1D                        0E            .byte	$E
08693 1E1E                        18            .byte	$18
08694 1E1F                        18            .byte	$18
08695 1E20                        18            .byte	$18
08696 1E21                        70            .byte	$70
08697 1E22                        18            .byte	$18
08698 1E23                        18            .byte	$18
08699 1E24                        18            .byte	$18
08700 1E25                        0E            .byte	$E
08701 1E26                        00            .byte	0
08702 1E27                        00            .byte	0
08703 1E28                        00            .byte	0
08704                                           ! 1274  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E29                        00            .byte	0
08706 1E2A                        00            .byte	0
08707 1E2B                        18            .byte	$18
08708 1E2C                        18            .byte	$18
08709 1E2D                        18            .byte	$18
08710 1E2E                        18            .byte	$18
08711 1E2F                        00            .byte	0
08712 1E30                        18            .byte	$18
08713 1E31                        18            .byte	$18
08714 1E32                        18            .byte	$18
08715 1E33                        18            .byte	$18
08716 1E34                        00            .byte	0
08717 1E35                        00            .byte	0
08718 1E36                        00            .byte	0
08719                                           ! 1275  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08720 1E37                        00            .byte	0
08721 1E38                        00            .byte	0
08722 1E39                        70            .byte	$70
08723 1E3A                        18            .byte	$18
08724 1E3B                        18            .byte	$18
08725 1E3C                        18            .byte	$18
08726 1E3D                        0E            .byte	$E
08727 1E3E                        18            .byte	$18
08728 1E3F                        18            .byte	$18
08729 1E40                        18            .byte	$18
08730 1E41                        70            .byte	$70
08731 1E42                        00            .byte	0
08732 1E43                        00            .byte	0
08733 1E44                        00            .byte	0
08734                                           ! 1276  0x00, 0x00, 0x76,
08735 1E45                        00            .byte	0
08736 1E46                        00            .byte	0
08737                                           ! 1276  0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08738 1E47                        76            .byte	$76
08739 1E48                        DC            .byte	$DC
08740 1E49                        00            .byte	0
08741 1E4A                        00            .byte	0
08742 1E4B                        00            .byte	0
08743 1E4C                        00            .byte	0
08744 1E4D                        00            .byte	0
08745 1E4E                        00            .byte	0
08746 1E4F                        00            .byte	0
08747 1E50                        00            .byte	0
08748 1E51                        00            .byte	0
08749 1E52                        00            .byte	0
08750                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E53                        00            .byte	0
08752 1E54                        00            .byte	0
08753 1E55                        00            .byte	0
08754 1E56                        00            .byte	0
08755 1E57                        10            .byte	$10
08756 1E58                        38            .byte	$38
08757 1E59                        6C            .byte	$6C
08758 1E5A                        C6            .byte	$C6
08759 1E5B                        C6            .byte	$C6
08760 1E5C                        FE            .byte	$FE
08761 1E5D                        00            .byte	0
08762 1E5E                        00            .byte	0
08763 1E5F                        00            .byte	0
08764 1E60                        00            .byte	0
08765                                           ! 1278  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E61                        00            .byte	0
08767 1E62                        00            .byte	0
08768 1E63                        3C            .byte	$3C
08769 1E64                        66            .byte	$66
08770 1E65                        C2            .byte	$C2
08771 1E66                        C0            .byte	$C0
08772 1E67                        C0            .byte	$C0
08773 1E68                        C2            .byte	$C2
08774 1E69                        66            .byte	$66
08775 1E6A                        3C            .byte	$3C
08776 1E6B                        0C            .byte	$C
08777 1E6C                        06            .byte	6
08778 1E6D                        7C            .byte	$7C
08779 1E6E                        00            .byte	0
08780                                           ! 1279  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E6F                        00            .byte	0
08782 1E70                        00            .byte	0
08783 1E71                        CC            .byte	$CC
08784 1E72                        CC            .byte	$CC
08785 1E73                        00            .byte	0
08786 1E74                        CC            .byte	$CC
08787 1E75                        CC            .byte	$CC
08788 1E76                        CC            .byte	$CC
08789 1E77                        CC            .byte	$CC
08790 1E78                        CC            .byte	$CC
08791 1E79                        76            .byte	$76
08792 1E7A                        00            .byte	0
08793 1E7B                        00            .byte	0
08794 1E7C                        00            .byte	0
08795                                           ! 1280  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E7D                        00            .byte	0
08797 1E7E                        0C            .byte	$C
08798 1E7F                        18            .byte	$18
08799 1E80                        30            .byte	$30
08800 1E81                        00            .byte	0
08801 1E82                        7C            .byte	$7C
08802 1E83                        C6            .byte	$C6
08803 1E84                        FE            .byte	$FE
08804 1E85                        C0            .byte	$C0
08805 1E86                        C6            .byte	$C6
08806 1E87                        7C            .byte	$7C
08807 1E88                        00            .byte	0
08808 1E89                        00            .byte	0
08809 1E8A                        00            .byte	0
08810                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E8B                        00            .byte	0
08812 1E8C                        10            .byte	$10
08813 1E8D                        38            .byte	$38
08814 1E8E                        6C            .byte	$6C
08815 1E8F                        00            .byte	0
08816 1E90                        78            .byte	$78
08817 1E91                        0C            .byte	$C
08818 1E92                        7C            .byte	$7C
08819 1E93                        CC            .byte	$CC
08820 1E94                        CC            .byte	$CC
08821 1E95                        76            .byte	$76
08822 1E96                        00            .byte	0
08823 1E97                        00            .byte	0
08824 1E98                        00            .byte	0
08825                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1E99                        00            .byte	0
08827 1E9A                        00            .byte	0
08828 1E9B                        CC            .byte	$CC
08829 1E9C                        CC            .byte	$CC
08830 1E9D                        00            .byte	0
08831 1E9E                        78            .byte	$78
08832 1E9F                        0C            .byte	$C
08833 1EA0                        7C            .byte	$7C
08834 1EA1                        CC            .byte	$CC
08835 1EA2                        CC            .byte	$CC
08836 1EA3                        76            .byte	$76
08837 1EA4                        00            .byte	0
08838 1EA5                        00            .byte	0
08839 1EA6                        00            .byte	0
08840                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EA7                        00            .byte	0
08842 1EA8                        60            .byte	$60
08843 1EA9                        30            .byte	$30
08844 1EAA                        18            .byte	$18
08845 1EAB                        00            .byte	0
08846 1EAC                        78            .byte	$78
08847 1EAD                        0C            .byte	$C
08848 1EAE                        7C            .byte	$7C
08849 1EAF                        CC            .byte	$CC
08850 1EB0                        CC            .byte	$CC
08851 1EB1                        76            .byte	$76
08852 1EB2                        00            .byte	0
08853 1EB3                        00            .byte	0
08854 1EB4                        00            .byte	0
08855                                           ! 1284  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EB5                        00            .byte	0
08857 1EB6                        38            .byte	$38
08858 1EB7                        6C            .byte	$6C
08859 1EB8                        38            .byte	$38
08860 1EB9                        00            .byte	0
08861 1EBA                        78            .byte	$78
08862 1EBB                        0C            .byte	$C
08863 1EBC                        7C            .byte	$7C
08864 1EBD                        CC            .byte	$CC
08865 1EBE                        CC            .byte	$CC
08866 1EBF                        76            .byte	$76
08867 1EC0                        00            .byte	0
08868 1EC1                        00            .byte	0
08869 1EC2                        00            .byte	0
08870                                           ! 1285  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1EC3                        00            .byte	0
08872 1EC4                        00            .byte	0
08873 1EC5                        00            .byte	0
08874 1EC6                        00            .byte	0
08875 1EC7                        3C            .byte	$3C
08876 1EC8                        66            .byte	$66
08877 1EC9                        60            .byte	$60
08878 1ECA                        66            .byte	$66
08879 1ECB                        3C            .byte	$3C
08880 1ECC                        0C            .byte	$C
08881 1ECD                        06            .byte	6
08882 1ECE                        3C            .byte	$3C
08883 1ECF                        00            .byte	0
08884 1ED0                        00            .byte	0
08885                                           ! 1286  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1ED1                        00            .byte	0
08887 1ED2                        10            .byte	$10
08888 1ED3                        38            .byte	$38
08889 1ED4                        6C            .byte	$6C
08890 1ED5                        00            .byte	0
08891 1ED6                        7C            .byte	$7C
08892 1ED7                        C6            .byte	$C6
08893 1ED8                        FE            .byte	$FE
08894 1ED9                        C0            .byte	$C0
08895 1EDA                        C6            .byte	$C6
08896 1EDB                        7C            .byte	$7C
08897 1EDC                        00            .byte	0
08898 1EDD                        00            .byte	0
08899 1EDE                        00            .byte	0
08900                                           ! 1287  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1EDF                        00            .byte	0
08902 1EE0                        00            .byte	0
08903 1EE1                        CC            .byte	$CC
08904 1EE2                        CC            .byte	$CC
08905 1EE3                        00            .byte	0
08906 1EE4                        7C            .byte	$7C
08907 1EE5                        C6            .byte	$C6
08908 1EE6                        FE            .byte	$FE
08909 1EE7                        C0            .byte	$C0
08910 1EE8                        C6            .byte	$C6
08911 1EE9                        7C            .byte	$7C
08912 1EEA                        00            .byte	0
08913 1EEB                        00            .byte	0
08914 1EEC                        00            .byte	0
08915                                           ! 1288  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EED                        00            .byte	0
08917 1EEE                        60            .byte	$60
08918 1EEF                        30            .byte	$30
08919 1EF0                        18            .byte	$18
08920 1EF1                        00            .byte	0
08921 1EF2                        7C            .byte	$7C
08922 1EF3                        C6            .byte	$C6
08923 1EF4                        FE            .byte	$FE
08924 1EF5                        C0            .byte	$C0
08925 1EF6                        C6            .byte	$C6
08926 1EF7                        7C            .byte	$7C
08927 1EF8                        00            .byte	0
08928 1EF9                        00            .byte	0
08929 1EFA                        00            .byte	0
08930                                           ! 1289  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1EFB                        00            .byte	0
08932 1EFC                        00            .byte	0
08933 1EFD                        66            .byte	$66
08934 1EFE                        66            .byte	$66
08935 1EFF                        00            .byte	0
08936 1F00                        38            .byte	$38
08937 1F01                        18            .byte	$18
08938 1F02                        18            .byte	$18
08939 1F03                        18            .byte	$18
08940 1F04                        18            .byte	$18
08941 1F05                        3C            .byte	$3C
08942 1F06                        00            .byte	0
08943 1F07                        00            .byte	0
08944 1F08                        00            .byte	0
08945                                           ! 1290  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F09                        00            .byte	0
08947 1F0A                        18            .byte	$18
08948 1F0B                        3C            .byte	$3C
08949 1F0C                        66            .byte	$66
08950 1F0D                        00            .byte	0
08951 1F0E                        38            .byte	$38
08952 1F0F                        18            .byte	$18
08953 1F10                        18            .byte	$18
08954 1F11                        18            .byte	$18
08955 1F12                        18            .byte	$18
08956 1F13                        3C            .byte	$3C
08957 1F14                        00            .byte	0
08958 1F15                        00            .byte	0
08959 1F16                        00            .byte	0
08960                                           ! 1291  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F17                        00            .byte	0
08962 1F18                        60            .byte	$60
08963 1F19                        30            .byte	$30
08964 1F1A                        18            .byte	$18
08965 1F1B                        00            .byte	0
08966 1F1C                        38            .byte	$38
08967 1F1D                        18            .byte	$18
08968 1F1E                        18            .byte	$18
08969 1F1F                        18            .byte	$18
08970 1F20                        18            .byte	$18
08971 1F21                        3C            .byte	$3C
08972 1F22                        00            .byte	0
08973 1F23                        00            .byte	0
08974 1F24                        00            .byte	0
08975                                           ! 1292  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F25                        00            .byte	0
08977 1F26                        C6            .byte	$C6
08978 1F27                        C6            .byte	$C6
08979 1F28                        10            .byte	$10
08980 1F29                        38            .byte	$38
08981 1F2A                        6C            .byte	$6C
08982 1F2B                        C6            .byte	$C6
08983 1F2C                        C6            .byte	$C6
08984 1F2D                        FE            .byte	$FE
08985 1F2E                        C6            .byte	$C6
08986 1F2F                        C6            .byte	$C6
08987 1F30                        00            .byte	0
08988 1F31                        00            .byte	0
08989 1F32                        00            .byte	0
08990                                           ! 1293  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F33                        38            .byte	$38
08992 1F34                        6C            .byte	$6C
08993 1F35                        38            .byte	$38
08994 1F36                        00            .byte	0
08995 1F37                        38            .byte	$38
08996 1F38                        6C            .byte	$6C
08997 1F39                        C6            .byte	$C6
08998 1F3A                        C6            .byte	$C6
08999 1F3B                        FE            .byte	$FE
09000 1F3C                        C6            .byte	$C6
09001 1F3D                        C6            .byte	$C6
09002 1F3E                        00            .byte	0
09003 1F3F                        00            .byte	0
09004 1F40                        00            .byte	0
09005                                           ! 1294  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F41                        18            .byte	$18
09007 1F42                        30            .byte	$30
09008 1F43                        60            .byte	$60
09009 1F44                        00            .byte	0
09010 1F45                        FE            .byte	$FE
09011 1F46                        66            .byte	$66
09012 1F47                        60            .byte	$60
09013 1F48                        7C            .byte	$7C
09014 1F49                        60            .byte	$60
09015 1F4A                        66            .byte	$66
09016 1F4B                        FE            .byte	$FE
09017 1F4C                        00            .byte	0
09018 1F4D                        00            .byte	0
09019 1F4E                        00            .byte	0
09020                                           ! 1295  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F4F                        00            .byte	0
09022 1F50                        00            .byte	0
09023 1F51                        00            .byte	0
09024 1F52                        00            .byte	0
09025 1F53                        CC            .byte	$CC
09026 1F54                        76            .byte	$76
09027 1F55                        36            .byte	$36
09028 1F56                        7E            .byte	$7E
09029 1F57                        D8            .byte	$D8
09030 1F58                        D8            .byte	$D8
09031 1F59                        6E            .byte	$6E
09032 1F5A                        00            .byte	0
09033 1F5B                        00            .byte	0
09034 1F5C                        00            .byte	0
09035                                           ! 1296  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F5D                        00            .byte	0
09037 1F5E                        00            .byte	0
09038 1F5F                        3E            .byte	$3E
09039 1F60                        6C            .byte	$6C
09040 1F61                        CC            .byte	$CC
09041 1F62                        CC            .byte	$CC
09042 1F63                        FE            .byte	$FE
09043 1F64                        CC            .byte	$CC
09044 1F65                        CC            .byte	$CC
09045 1F66                        CC            .byte	$CC
09046 1F67                        CE            .byte	$CE
09047 1F68                        00            .byte	0
09048 1F69                        00            .byte	0
09049 1F6A                        00            .byte	0
09050                                           ! 1297  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F6B                        00            .byte	0
09052 1F6C                        10            .byte	$10
09053 1F6D                        38            .byte	$38
09054 1F6E                        6C            .byte	$6C
09055 1F6F                        00            .byte	0
09056 1F70                        7C            .byte	$7C
09057 1F71                        C6            .byte	$C6
09058 1F72                        C6            .byte	$C6
09059 1F73                        C6            .byte	$C6
09060 1F74                        C6            .byte	$C6
09061 1F75                        7C            .byte	$7C
09062 1F76                        00            .byte	0
09063 1F77                        00            .byte	0
09064 1F78                        00            .byte	0
09065                                           ! 1298  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F79                        00            .byte	0
09067 1F7A                        00            .byte	0
09068 1F7B                        C6            .byte	$C6
09069 1F7C                        C6            .byte	$C6
09070 1F7D                        00            .byte	0
09071 1F7E                        7C            .byte	$7C
09072 1F7F                        C6            .byte	$C6
09073 1F80                        C6            .byte	$C6
09074 1F81                        C6            .byte	$C6
09075 1F82                        C6            .byte	$C6
09076 1F83                        7C            .byte	$7C
09077 1F84                        00            .byte	0
09078 1F85                        00            .byte	0
09079 1F86                        00            .byte	0
09080                                           ! 1299  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09081 1F87                        00            .byte	0
09082 1F88                        60            .byte	$60
09083 1F89                        30            .byte	$30
09084 1F8A                        18            .byte	$18
09085 1F8B                        00            .byte	0
09086 1F8C                        7C            .byte	$7C
09087 1F8D                        C6            .byte	$C6
09088 1F8E                        C6            .byte	$C6
09089 1F8F                        C6            .byte	$C6
09090 1F90                        C6            .byte	$C6
09091 1F91                        7C            .byte	$7C
09092 1F92                        00            .byte	0
09093 1F93                        00            .byte	0
09094 1F94                        00            .byte	0
09095                                           ! 1300  0x00, 0x30, 0x78, 0xcc, 0
09096 1F95                        00            .byte	0
09097 1F96                        30            .byte	$30
09098 1F97                        78            .byte	$78
09099 1F98                        CC            .byte	$CC
09100                                           ! 1300 x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09101 1F99                        00            .byte	0
09102 1F9A                        CC            .byte	$CC
09103 1F9B                        CC            .byte	$CC
09104 1F9C                        CC            .byte	$CC
09105 1F9D                        CC            .byte	$CC
09106 1F9E                        CC            .byte	$CC
09107 1F9F                        76            .byte	$76
09108 1FA0                        00            .byte	0
09109 1FA1                        00            .byte	0
09110 1FA2                        00            .byte	0
09111                                           ! 1301  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1FA3                        00            .byte	0
09113 1FA4                        60            .byte	$60
09114 1FA5                        30            .byte	$30
09115 1FA6                        18            .byte	$18
09116 1FA7                        00            .byte	0
09117 1FA8                        CC            .byte	$CC
09118 1FA9                        CC            .byte	$CC
09119 1FAA                        CC            .byte	$CC
09120 1FAB                        CC            .byte	$CC
09121 1FAC                        CC            .byte	$CC
09122 1FAD                        76            .byte	$76
09123 1FAE                        00            .byte	0
09124 1FAF                        00            .byte	0
09125 1FB0                        00            .byte	0
09126                                           ! 1302  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FB1                        00            .byte	0
09128 1FB2                        00            .byte	0
09129 1FB3                        C6            .byte	$C6
09130 1FB4                        C6            .byte	$C6
09131 1FB5                        00            .byte	0
09132 1FB6                        C6            .byte	$C6
09133 1FB7                        C6            .byte	$C6
09134 1FB8                        C6            .byte	$C6
09135 1FB9                        C6            .byte	$C6
09136 1FBA                        7E            .byte	$7E
09137 1FBB                        06            .byte	6
09138 1FBC                        0C            .byte	$C
09139 1FBD                        78            .byte	$78
09140 1FBE                        00            .byte	0
09141                                           ! 1303  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FBF                        00            .byte	0
09143 1FC0                        C6            .byte	$C6
09144 1FC1                        C6            .byte	$C6
09145 1FC2                        38            .byte	$38
09146 1FC3                        6C            .byte	$6C
09147 1FC4                        C6            .byte	$C6
09148 1FC5                        C6            .byte	$C6
09149 1FC6                        C6            .byte	$C6
09150 1FC7                        C6            .byte	$C6
09151 1FC8                        6C            .byte	$6C
09152 1FC9                        38            .byte	$38
09153 1FCA                        00            .byte	0
09154 1FCB                        00            .byte	0
09155 1FCC                        00            .byte	0
09156                                           ! 1304  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FCD                        00            .byte	0
09158 1FCE                        C6            .byte	$C6
09159 1FCF                        C6            .byte	$C6
09160 1FD0                        00            .byte	0
09161 1FD1                        C6            .byte	$C6
09162 1FD2                        C6            .byte	$C6
09163 1FD3                        C6            .byte	$C6
09164 1FD4                        C6            .byte	$C6
09165 1FD5                        C6            .byte	$C6
09166 1FD6                        C6            .byte	$C6
09167 1FD7                        7C            .byte	$7C
09168 1FD8                        00            .byte	0
09169 1FD9                        00            .byte	0
09170 1FDA                        00            .byte	0
09171                                           ! 1305  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FDB                        00            .byte	0
09173 1FDC                        18            .byte	$18
09174 1FDD                        18            .byte	$18
09175 1FDE                        3C            .byte	$3C
09176 1FDF                        66            .byte	$66
09177 1FE0                        60            .byte	$60
09178 1FE1                        60            .byte	$60
09179 1FE2                        66            .byte	$66
09180 1FE3                        3C            .byte	$3C
09181 1FE4                        18            .byte	$18
09182 1FE5                        18            .byte	$18
09183 1FE6                        00            .byte	0
09184 1FE7                        00            .byte	0
09185 1FE8                        00            .byte	0
09186                                           ! 1306  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FE9                        00            .byte	0
09188 1FEA                        38            .byte	$38
09189 1FEB                        6C            .byte	$6C
09190 1FEC                        64            .byte	$64
09191 1FED                        60            .byte	$60
09192 1FEE                        F0            .byte	$F0
09193 1FEF                        60            .byte	$60
09194 1FF0                        60            .byte	$60
09195 1FF1                        60            .byte	$60
09196 1FF2                        E6            .byte	$E6
09197 1FF3                        FC            .byte	$FC
09198 1FF4                        00            .byte	0
09199 1FF5                        00            .byte	0
09200 1FF6                        00            .byte	0
09201                                           ! 1307  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 1FF7                        00            .byte	0
09203 1FF8                        00            .byte	0
09204 1FF9                        66            .byte	$66
09205 1FFA                        66            .byte	$66
09206 1FFB                        3C            .byte	$3C
09207 1FFC                        18            .byte	$18
09208 1FFD                        7E            .byte	$7E
09209 1FFE                        18            .byte	$18
09210 1FFF                        7E            .byte	$7E
09211 2000                        18            .byte	$18
09212 2001                        18            .byte	$18
09213 2002                        00            .byte	0
09214 2003                        00            .byte	0
09215 2004                        00            .byte	0
09216                                           ! 1308  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 2005                        00            .byte	0
09218 2006                        F8            .byte	$F8
09219 2007                        CC            .byte	$CC
09220 2008                        CC            .byte	$CC
09221 2009                        F8            .byte	$F8
09222 200A                        C4            .byte	$C4
09223 200B                        CC            .byte	$CC
09224 200C                        DE            .byte	$DE
09225 200D                        CC            .byte	$CC
09226 200E                        CC            .byte	$CC
09227 200F                        C6            .byte	$C6
09228 2010                        00            .byte	0
09229 2011                        00            .byte	0
09230 2012                        00            .byte	0
09231                                           ! 1309  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 2013                        00            .byte	0
09233 2014                        0E            .byte	$E
09234 2015                        1B            .byte	$1B
09235 2016                        18            .byte	$18
09236 2017                        18            .byte	$18
09237 2018                        18            .byte	$18
09238 2019                        7E            .byte	$7E
09239 201A                        18            .byte	$18
09240 201B                        18            .byte	$18
09241 201C                        18            .byte	$18
09242 201D                        18            .byte	$18
09243 201E                        D8            .byte	$D8
09244 201F                        70            .byte	$70
09245 2020                        00            .byte	0
09246                                           ! 1310  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 2021                        00            .byte	0
09248 2022                        18            .byte	$18
09249 2023                        30            .byte	$30
09250 2024                        60            .byte	$60
09251 2025                        00            .byte	0
09252 2026                        78            .byte	$78
09253 2027                        0C            .byte	$C
09254 2028                        7C            .byte	$7C
09255 2029                        CC            .byte	$CC
09256 202A                        CC            .byte	$CC
09257 202B                        76            .byte	$76
09258 202C                        00            .byte	0
09259 202D                        00            .byte	0
09260 202E                        00            .byte	0
09261                                           ! 1311  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 202F                        00            .byte	0
09263 2030                        0C            .byte	$C
09264 2031                        18            .byte	$18
09265 2032                        30            .byte	$30
09266 2033                        00            .byte	0
09267 2034                        38            .byte	$38
09268 2035                        18            .byte	$18
09269 2036                        18            .byte	$18
09270 2037                        18            .byte	$18
09271 2038                        18            .byte	$18
09272 2039                        3C            .byte	$3C
09273 203A                        00            .byte	0
09274 203B                        00            .byte	0
09275 203C                        00            .byte	0
09276                                           ! 1312  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 203D                        00            .byte	0
09278 203E                        18            .byte	$18
09279 203F                        30            .byte	$30
09280 2040                        60            .byte	$60
09281 2041                        00            .byte	0
09282 2042                        7C            .byte	$7C
09283 2043                        C6            .byte	$C6
09284 2044                        C6            .byte	$C6
09285 2045                        C6            .byte	$C6
09286 2046                        C6            .byte	$C6
09287 2047                        7C            .byte	$7C
09288 2048                        00            .byte	0
09289 2049                        00            .byte	0
09290 204A                        00            .byte	0
09291                                           ! 1313  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 204B                        00            .byte	0
09293 204C                        18            .byte	$18
09294 204D                        30            .byte	$30
09295 204E                        60            .byte	$60
09296 204F                        00            .byte	0
09297 2050                        CC            .byte	$CC
09298 2051                        CC            .byte	$CC
09299 2052                        CC            .byte	$CC
09300 2053                        CC            .byte	$CC
09301 2054                        CC            .byte	$CC
09302 2055                        76            .byte	$76
09303 2056                        00            .byte	0
09304 2057                        00            .byte	0
09305 2058                        00            .byte	0
09306                                           ! 1314  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2059                        00            .byte	0
09308 205A                        00            .byte	0
09309 205B                        76            .byte	$76
09310 205C                        DC            .byte	$DC
09311 205D                        00            .byte	0
09312 205E                        DC            .byte	$DC
09313 205F                        66            .byte	$66
09314 2060                        66            .byte	$66
09315 2061                        66            .byte	$66
09316 2062                        66            .byte	$66
09317 2063                        66            .byte	$66
09318 2064                        00            .byte	0
09319 2065                        00            .byte	0
09320 2066                        00            .byte	0
09321                                           ! 1315  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 2067                        76            .byte	$76
09323 2068                        DC            .byte	$DC
09324 2069                        00            .byte	0
09325 206A                        C6            .byte	$C6
09326 206B                        E6            .byte	$E6
09327 206C                        F6            .byte	$F6
09328 206D                        FE            .byte	$FE
09329 206E                        DE            .byte	$DE
09330 206F                        CE            .byte	$CE
09331 2070                        C6            .byte	$C6
09332 2071                        C6            .byte	$C6
09333 2072                        00            .byte	0
09334 2073                        00            .byte	0
09335 2074                        00            .byte	0
09336                                           ! 1316  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 2075                        00            .byte	0
09338 2076                        3C            .byte	$3C
09339 2077                        6C            .byte	$6C
09340 2078                        6C            .byte	$6C
09341 2079                        3E            .byte	$3E
09342 207A                        00            .byte	0
09343 207B                        7E            .byte	$7E
09344 207C                        00            .byte	0
09345 207D                        00            .byte	0
09346 207E                        00            .byte	0
09347 207F                        00            .byte	0
09348 2080                        00            .byte	0
09349 2081                        00            .byte	0
09350 2082                        00            .byte	0
09351                                           ! 1317  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 2083                        00            .byte	0
09353 2084                        38            .byte	$38
09354 2085                        6C            .byte	$6C
09355 2086                        6C            .byte	$6C
09356 2087                        38            .byte	$38
09357 2088                        00            .byte	0
09358 2089                        7C            .byte	$7C
09359 208A                        00            .byte	0
09360 208B                        00            .byte	0
09361 208C                        00            .byte	0
09362 208D                        00            .byte	0
09363 208E                        00            .byte	0
09364 208F                        00            .byte	0
09365 2090                        00            .byte	0
09366                                           ! 1318  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 2091                        00            .byte	0
09368 2092                        00            .byte	0
09369 2093                        30            .byte	$30
09370 2094                        30            .byte	$30
09371 2095                        00            .byte	0
09372 2096                        30            .byte	$30
09373 2097                        30            .byte	$30
09374 2098                        60            .byte	$60
09375 2099                        C6            .byte	$C6
09376 209A                        C6            .byte	$C6
09377 209B                        7C            .byte	$7C
09378 209C                        00            .byte	0
09379 209D                        00            .byte	0
09380 209E                        00            .byte	0
09381                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 209F                        00            .byte	0
09383 20A0                        00            .byte	0
09384 20A1                        00            .byte	0
09385 20A2                        00            .byte	0
09386 20A3                        00            .byte	0
09387 20A4                        00            .byte	0
09388 20A5                        FE            .byte	$FE
09389 20A6                        C0            .byte	$C0
09390 20A7                        C0            .byte	$C0
09391 20A8                        C0            .byte	$C0
09392 20A9                        00            .byte	0
09393 20AA                        00            .byte	0
09394 20AB                        00            .byte	0
09395 20AC                        00            .byte	0
09396                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20AD                        00            .byte	0
09398 20AE                        00            .byte	0
09399 20AF                        00            .byte	0
09400 20B0                        00            .byte	0
09401 20B1                        00            .byte	0
09402 20B2                        00            .byte	0
09403 20B3                        FE            .byte	$FE
09404 20B4                        06            .byte	6
09405 20B5                        06            .byte	6
09406 20B6                        06            .byte	6
09407 20B7                        00            .byte	0
09408 20B8                        00            .byte	0
09409 20B9                        00            .byte	0
09410 20BA                        00            .byte	0
09411                                           ! 1321  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20BB                        00            .byte	0
09413 20BC                        C0            .byte	$C0
09414 20BD                        C0            .byte	$C0
09415 20BE                        C6            .byte	$C6
09416 20BF                        CC            .byte	$CC
09417 20C0                        D8            .byte	$D8
09418 20C1                        30            .byte	$30
09419 20C2                        60            .byte	$60
09420 20C3                        DC            .byte	$DC
09421 20C4                        86            .byte	$86
09422 20C5                        0C            .byte	$C
09423 20C6                        18            .byte	$18
09424 20C7                        3E            .byte	$3E
09425 20C8                        00            .byte	0
09426                                           ! 1322  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20C9                        00            .byte	0
09428 20CA                        C0            .byte	$C0
09429 20CB                        C0            .byte	$C0
09430 20CC                        C6            .byte	$C6
09431 20CD                        CC            .byte	$CC
09432 20CE                        D8            .byte	$D8
09433 20CF                        30            .byte	$30
09434 20D0                        66            .byte	$66
09435 20D1                        CE            .byte	$CE
09436 20D2                        9E            .byte	$9E
09437 20D3                        3E            .byte	$3E
09438 20D4                        06            .byte	6
09439 20D5                        06            .byte	6
09440 20D6                        00            .byte	0
09441                                           ! 1323  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09442 20D7                        00            .byte	0
09443 20D8                        00            .byte	0
09444 20D9                        18            .byte	$18
09445 20DA                        18            .byte	$18
09446 20DB                        00            .byte	0
09447 20DC                        18            .byte	$18
09448 20DD                        18            .byte	$18
09449 20DE                        3C            .byte	$3C
09450 20DF                        3C            .byte	$3C
09451 20E0                        3C            .byte	$3C
09452 20E1                        18            .byte	$18
09453 20E2                        00            .byte	0
09454 20E3                        00            .byte	0
09455 20E4                        00            .byte	0
09456                                           ! 1324  0x00, 0x00, 0x00, 0x00, 0x36, 0x6
09457 20E5                        00            .byte	0
09458 20E6                        00            .byte	0
09459 20E7                        00            .byte	0
09460 20E8                        00            .byte	0
09461 20E9                        36            .byte	$36
09462                                           ! 1324 c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09463 20EA                        6C            .byte	$6C
09464 20EB                        D8            .byte	$D8
09465 20EC                        6C            .byte	$6C
09466 20ED                        36            .byte	$36
09467 20EE                        00            .byte	0
09468 20EF                        00            .byte	0
09469 20F0                        00            .byte	0
09470 20F1                        00            .byte	0
09471 20F2                        00            .byte	0
09472                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 20F3                        00            .byte	0
09474 20F4                        00            .byte	0
09475 20F5                        00            .byte	0
09476 20F6                        00            .byte	0
09477 20F7                        D8            .byte	$D8
09478 20F8                        6C            .byte	$6C
09479 20F9                        36            .byte	$36
09480 20FA                        6C            .byte	$6C
09481 20FB                        D8            .byte	$D8
09482 20FC                        00            .byte	0
09483 20FD                        00            .byte	0
09484 20FE                        00            .byte	0
09485 20FF                        00            .byte	0
09486 2100                        00            .byte	0
09487                                           ! 1326  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 2101                        11            .byte	$11
09489 2102                        44            .byte	$44
09490 2103                        11            .byte	$11
09491 2104                        44            .byte	$44
09492 2105                        11            .byte	$11
09493 2106                        44            .byte	$44
09494 2107                        11            .byte	$11
09495 2108                        44            .byte	$44
09496 2109                        11            .byte	$11
09497 210A                        44            .byte	$44
09498 210B                        11            .byte	$11
09499 210C                        44            .byte	$44
09500 210D                        11            .byte	$11
09501 210E                        44            .byte	$44
09502                                           ! 1327  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 210F                        55            .byte	$55
09504 2110                        AA            .byte	$AA
09505 2111                        55            .byte	$55
09506 2112                        AA            .byte	$AA
09507 2113                        55            .byte	$55
09508 2114                        AA            .byte	$AA
09509 2115                        55            .byte	$55
09510 2116                        AA            .byte	$AA
09511 2117                        55            .byte	$55
09512 2118                        AA            .byte	$AA
09513 2119                        55            .byte	$55
09514 211A                        AA            .byte	$AA
09515 211B                        55            .byte	$55
09516 211C                        AA            .byte	$AA
09517                                           ! 1328  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 211D                        DD            .byte	$DD
09519 211E                        77            .byte	$77
09520 211F                        DD            .byte	$DD
09521 2120                        77            .byte	$77
09522 2121                        DD            .byte	$DD
09523 2122                        77            .byte	$77
09524 2123                        DD            .byte	$DD
09525 2124                        77            .byte	$77
09526 2125                        DD            .byte	$DD
09527 2126                        77            .byte	$77
09528 2127                        DD            .byte	$DD
09529 2128                        77            .byte	$77
09530 2129                        DD            .byte	$DD
09531 212A                        77            .byte	$77
09532                                           ! 1329  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 212B                        18            .byte	$18
09534 212C                        18            .byte	$18
09535 212D                        18            .byte	$18
09536 212E                        18            .byte	$18
09537 212F                        18            .byte	$18
09538 2130                        18            .byte	$18
09539 2131                        18            .byte	$18
09540 2132                        18            .byte	$18
09541 2133                        18            .byte	$18
09542 2134                        18            .byte	$18
09543 2135                        18            .byte	$18
09544 2136                        18            .byte	$18
09545 2137                        18            .byte	$18
09546 2138                        18            .byte	$18
09547                                           ! 1330  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2139                        18            .byte	$18
09549 213A                        18            .byte	$18
09550 213B                        18            .byte	$18
09551 213C                        18            .byte	$18
09552 213D                        18            .byte	$18
09553 213E                        18            .byte	$18
09554 213F                        18            .byte	$18
09555 2140                        F8            .byte	$F8
09556 2141                        18            .byte	$18
09557 2142                        18            .byte	$18
09558 2143                        18            .byte	$18
09559 2144                        18            .byte	$18
09560 2145                        18            .byte	$18
09561 2146                        18            .byte	$18
09562                                           ! 1331  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 2147                        18            .byte	$18
09564 2148                        18            .byte	$18
09565 2149                        18            .byte	$18
09566 214A                        18            .byte	$18
09567 214B                        18            .byte	$18
09568 214C                        F8            .byte	$F8
09569 214D                        18            .byte	$18
09570 214E                        F8            .byte	$F8
09571 214F                        18            .byte	$18
09572 2150                        18            .byte	$18
09573 2151                        18            .byte	$18
09574 2152                        18            .byte	$18
09575 2153                        18            .byte	$18
09576 2154                        18            .byte	$18
09577                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 2155                        36            .byte	$36
09579 2156                        36            .byte	$36
09580 2157                        36            .byte	$36
09581 2158                        36            .byte	$36
09582 2159                        36            .byte	$36
09583 215A                        36            .byte	$36
09584 215B                        36            .byte	$36
09585 215C                        F6            .byte	$F6
09586 215D                        36            .byte	$36
09587 215E                        36            .byte	$36
09588 215F                        36            .byte	$36
09589 2160                        36            .byte	$36
09590 2161                        36            .byte	$36
09591 2162                        36            .byte	$36
09592                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 2163                        00            .byte	0
09594 2164                        00            .byte	0
09595 2165                        00            .byte	0
09596 2166                        00            .byte	0
09597 2167                        00            .byte	0
09598 2168                        00            .byte	0
09599 2169                        00            .byte	0
09600 216A                        FE            .byte	$FE
09601 216B                        36            .byte	$36
09602 216C                        36            .byte	$36
09603 216D                        36            .byte	$36
09604 216E                        36            .byte	$36
09605 216F                        36            .byte	$36
09606 2170                        36            .byte	$36
09607                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 2171                        00            .byte	0
09609 2172                        00            .byte	0
09610 2173                        00            .byte	0
09611 2174                        00            .byte	0
09612 2175                        00            .byte	0
09613 2176                        F8            .byte	$F8
09614 2177                        18            .byte	$18
09615 2178                        F8            .byte	$F8
09616 2179                        18            .byte	$18
09617 217A                        18            .byte	$18
09618 217B                        18            .byte	$18
09619 217C                        18            .byte	$18
09620 217D                        18            .byte	$18
09621 217E                        18            .byte	$18
09622                                           ! 1335  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 217F                        36            .byte	$36
09624 2180                        36            .byte	$36
09625 2181                        36            .byte	$36
09626 2182                        36            .byte	$36
09627 2183                        36            .byte	$36
09628 2184                        F6            .byte	$F6
09629 2185                        06            .byte	6
09630 2186                        F6            .byte	$F6
09631 2187                        36            .byte	$36
09632 2188                        36            .byte	$36
09633 2189                        36            .byte	$36
09634 218A                        36            .byte	$36
09635 218B                        36            .byte	$36
09636 218C                        36            .byte	$36
09637                                           ! 1336  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 218D                        36            .byte	$36
09639 218E                        36            .byte	$36
09640 218F                        36            .byte	$36
09641 2190                        36            .byte	$36
09642 2191                        36            .byte	$36
09643 2192                        36            .byte	$36
09644 2193                        36            .byte	$36
09645 2194                        36            .byte	$36
09646 2195                        36            .byte	$36
09647 2196                        36            .byte	$36
09648 2197                        36            .byte	$36
09649 2198                        36            .byte	$36
09650 2199                        36            .byte	$36
09651 219A                        36            .byte	$36
09652                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 219B                        00            .byte	0
09654 219C                        00            .byte	0
09655 219D                        00            .byte	0
09656 219E                        00            .byte	0
09657 219F                        00            .byte	0
09658 21A0                        FE            .byte	$FE
09659 21A1                        06            .byte	6
09660 21A2                        F6            .byte	$F6
09661 21A3                        36            .byte	$36
09662 21A4                        36            .byte	$36
09663 21A5                        36            .byte	$36
09664 21A6                        36            .byte	$36
09665 21A7                        36            .byte	$36
09666 21A8                        36            .byte	$36
09667                                           ! 1338  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21A9                        36            .byte	$36
09669 21AA                        36            .byte	$36
09670 21AB                        36            .byte	$36
09671 21AC                        36            .byte	$36
09672 21AD                        36            .byte	$36
09673 21AE                        F6            .byte	$F6
09674 21AF                        06            .byte	6
09675 21B0                        FE            .byte	$FE
09676 21B1                        00            .byte	0
09677 21B2                        00            .byte	0
09678 21B3                        00            .byte	0
09679 21B4                        00            .byte	0
09680 21B5                        00            .byte	0
09681 21B6                        00            .byte	0
09682                                           ! 1339  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21B7                        36            .byte	$36
09684 21B8                        36            .byte	$36
09685 21B9                        36            .byte	$36
09686 21BA                        36            .byte	$36
09687 21BB                        36            .byte	$36
09688 21BC                        36            .byte	$36
09689 21BD                        36            .byte	$36
09690 21BE                        FE            .byte	$FE
09691 21BF                        00            .byte	0
09692 21C0                        00            .byte	0
09693 21C1                        00            .byte	0
09694 21C2                        00            .byte	0
09695 21C3                        00            .byte	0
09696 21C4                        00            .byte	0
09697                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21C5                        18            .byte	$18
09699 21C6                        18            .byte	$18
09700 21C7                        18            .byte	$18
09701 21C8                        18            .byte	$18
09702 21C9                        18            .byte	$18
09703 21CA                        F8            .byte	$F8
09704 21CB                        18            .byte	$18
09705 21CC                        F8            .byte	$F8
09706 21CD                        00            .byte	0
09707 21CE                        00            .byte	0
09708 21CF                        00            .byte	0
09709 21D0                        00            .byte	0
09710 21D1                        00            .byte	0
09711 21D2                        00            .byte	0
09712                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21D3                        00            .byte	0
09714 21D4                        00            .byte	0
09715 21D5                        00            .byte	0
09716 21D6                        00            .byte	0
09717 21D7                        00            .byte	0
09718 21D8                        00            .byte	0
09719 21D9                        00            .byte	0
09720 21DA                        F8            .byte	$F8
09721 21DB                        18            .byte	$18
09722 21DC                        18            .byte	$18
09723 21DD                        18            .byte	$18
09724 21DE                        18            .byte	$18
09725 21DF                        18            .byte	$18
09726 21E0                        18            .byte	$18
09727                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21E1                        18            .byte	$18
09729 21E2                        18            .byte	$18
09730 21E3                        18            .byte	$18
09731 21E4                        18            .byte	$18
09732 21E5                        18            .byte	$18
09733 21E6                        18            .byte	$18
09734 21E7                        18            .byte	$18
09735 21E8                        1F            .byte	$1F
09736 21E9                        00            .byte	0
09737 21EA                        00            .byte	0
09738 21EB                        00            .byte	0
09739 21EC                        00            .byte	0
09740 21ED                        00            .byte	0
09741 21EE                        00            .byte	0
09742                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21EF                        18            .byte	$18
09744 21F0                        18            .byte	$18
09745 21F1                        18            .byte	$18
09746 21F2                        18            .byte	$18
09747 21F3                        18            .byte	$18
09748 21F4                        18            .byte	$18
09749 21F5                        18            .byte	$18
09750 21F6                        FF            .byte	$FF
09751 21F7                        00            .byte	0
09752 21F8                        00            .byte	0
09753 21F9                        00            .byte	0
09754 21FA                        00            .byte	0
09755 21FB                        00            .byte	0
09756 21FC                        00            .byte	0
09757                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 21FD                        00            .byte	0
09759 21FE                        00            .byte	0
09760 21FF                        00            .byte	0
09761 2200                        00            .byte	0
09762 2201                        00            .byte	0
09763 2202                        00            .byte	0
09764 2203                        00            .byte	0
09765 2204                        FF            .byte	$FF
09766 2205                        18            .byte	$18
09767 2206                        18            .byte	$18
09768 2207                        18            .byte	$18
09769 2208                        18            .byte	$18
09770 2209                        18            .byte	$18
09771 220A                        18            .byte	$18
09772                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 220B                        18            .byte	$18
09774 220C                        18            .byte	$18
09775 220D                        18            .byte	$18
09776 220E                        18            .byte	$18
09777 220F                        18            .byte	$18
09778 2210                        18            .byte	$18
09779 2211                        18            .byte	$18
09780 2212                        1F            .byte	$1F
09781 2213                        18            .byte	$18
09782 2214                        18            .byte	$18
09783 2215                        18            .byte	$18
09784 2216                        18            .byte	$18
09785 2217                        18            .byte	$18
09786 2218                        18            .byte	$18
09787                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2219                        00            .byte	0
09789 221A                        00            .byte	0
09790 221B                        00            .byte	0
09791 221C                        00            .byte	0
09792 221D                        00            .byte	0
09793 221E                        00            .byte	0
09794 221F                        00            .byte	0
09795 2220                        FF            .byte	$FF
09796 2221                        00            .byte	0
09797 2222                        00            .byte	0
09798 2223                        00            .byte	0
09799 2224                        00            .byte	0
09800 2225                        00            .byte	0
09801 2226                        00            .byte	0
09802                                           ! 1347  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09803 2227                        18            .byte	$18
09804 2228                        18            .byte	$18
09805 2229                        18            .byte	$18
09806 222A                        18            .byte	$18
09807 222B                        18            .byte	$18
09808 222C                        18            .byte	$18
09809 222D                        18            .byte	$18
09810 222E                        FF            .byte	$FF
09811 222F                        18            .byte	$18
09812 2230                        18            .byte	$18
09813 2231                        18            .byte	$18
09814 2232                        18            .byte	$18
09815 2233                        18            .byte	$18
09816 2234                        18            .byte	$18
09817                                           ! 1348  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18,
09818 2235                        18            .byte	$18
09819 2236                        18            .byte	$18
09820 2237                        18            .byte	$18
09821 2238                        18            .byte	$18
09822 2239                        18            .byte	$18
09823 223A                        1F            .byte	$1F
09824                                           ! 1348  0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09825 223B                        18            .byte	$18
09826 223C                        1F            .byte	$1F
09827 223D                        18            .byte	$18
09828 223E                        18            .byte	$18
09829 223F                        18            .byte	$18
09830 2240                        18            .byte	$18
09831 2241                        18            .byte	$18
09832 2242                        18            .byte	$18
09833                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 2243                        36            .byte	$36
09835 2244                        36            .byte	$36
09836 2245                        36            .byte	$36
09837 2246                        36            .byte	$36
09838 2247                        36            .byte	$36
09839 2248                        36            .byte	$36
09840 2249                        36            .byte	$36
09841 224A                        37            .byte	$37
09842 224B                        36            .byte	$36
09843 224C                        36            .byte	$36
09844 224D                        36            .byte	$36
09845 224E                        36            .byte	$36
09846 224F                        36            .byte	$36
09847 2250                        36            .byte	$36
09848                                           ! 1350  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 2251                        36            .byte	$36
09850 2252                        36            .byte	$36
09851 2253                        36            .byte	$36
09852 2254                        36            .byte	$36
09853 2255                        36            .byte	$36
09854 2256                        37            .byte	$37
09855 2257                        30            .byte	$30
09856 2258                        3F            .byte	$3F
09857 2259                        00            .byte	0
09858 225A                        00            .byte	0
09859 225B                        00            .byte	0
09860 225C                        00            .byte	0
09861 225D                        00            .byte	0
09862 225E                        00            .byte	0
09863                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 225F                        00            .byte	0
09865 2260                        00            .byte	0
09866 2261                        00            .byte	0
09867 2262                        00            .byte	0
09868 2263                        00            .byte	0
09869 2264                        3F            .byte	$3F
09870 2265                        30            .byte	$30
09871 2266                        37            .byte	$37
09872 2267                        36            .byte	$36
09873 2268                        36            .byte	$36
09874 2269                        36            .byte	$36
09875 226A                        36            .byte	$36
09876 226B                        36            .byte	$36
09877 226C                        36            .byte	$36
09878                                           ! 1352  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 226D                        36            .byte	$36
09880 226E                        36            .byte	$36
09881 226F                        36            .byte	$36
09882 2270                        36            .byte	$36
09883 2271                        36            .byte	$36
09884 2272                        F7            .byte	$F7
09885 2273                        00            .byte	0
09886 2274                        FF            .byte	$FF
09887 2275                        00            .byte	0
09888 2276                        00            .byte	0
09889 2277                        00            .byte	0
09890 2278                        00            .byte	0
09891 2279                        00            .byte	0
09892 227A                        00            .byte	0
09893                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 227B                        00            .byte	0
09895 227C                        00            .byte	0
09896 227D                        00            .byte	0
09897 227E                        00            .byte	0
09898 227F                        00            .byte	0
09899 2280                        FF            .byte	$FF
09900 2281                        00            .byte	0
09901 2282                        F7            .byte	$F7
09902 2283                        36            .byte	$36
09903 2284                        36            .byte	$36
09904 2285                        36            .byte	$36
09905 2286                        36            .byte	$36
09906 2287                        36            .byte	$36
09907 2288                        36            .byte	$36
09908                                           ! 1354  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2289                        36            .byte	$36
09910 228A                        36            .byte	$36
09911 228B                        36            .byte	$36
09912 228C                        36            .byte	$36
09913 228D                        36            .byte	$36
09914 228E                        37            .byte	$37
09915 228F                        30            .byte	$30
09916 2290                        37            .byte	$37
09917 2291                        36            .byte	$36
09918 2292                        36            .byte	$36
09919 2293                        36            .byte	$36
09920 2294                        36            .byte	$36
09921 2295                        36            .byte	$36
09922 2296                        36            .byte	$36
09923                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 2297                        00            .byte	0
09925 2298                        00            .byte	0
09926 2299                        00            .byte	0
09927 229A                        00            .byte	0
09928 229B                        00            .byte	0
09929 229C                        FF            .byte	$FF
09930 229D                        00            .byte	0
09931 229E                        FF            .byte	$FF
09932 229F                        00            .byte	0
09933 22A0                        00            .byte	0
09934 22A1                        00            .byte	0
09935 22A2                        00            .byte	0
09936 22A3                        00            .byte	0
09937 22A4                        00            .byte	0
09938                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 22A5                        36            .byte	$36
09940 22A6                        36            .byte	$36
09941 22A7                        36            .byte	$36
09942 22A8                        36            .byte	$36
09943 22A9                        36            .byte	$36
09944 22AA                        F7            .byte	$F7
09945 22AB                        00            .byte	0
09946 22AC                        F7            .byte	$F7
09947 22AD                        36            .byte	$36
09948 22AE                        36            .byte	$36
09949 22AF                        36            .byte	$36
09950 22B0                        36            .byte	$36
09951 22B1                        36            .byte	$36
09952 22B2                        36            .byte	$36
09953                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22B3                        18            .byte	$18
09955 22B4                        18            .byte	$18
09956 22B5                        18            .byte	$18
09957 22B6                        18            .byte	$18
09958 22B7                        18            .byte	$18
09959 22B8                        FF            .byte	$FF
09960 22B9                        00            .byte	0
09961 22BA                        FF            .byte	$FF
09962 22BB                        00            .byte	0
09963 22BC                        00            .byte	0
09964 22BD                        00            .byte	0
09965 22BE                        00            .byte	0
09966 22BF                        00            .byte	0
09967 22C0                        00            .byte	0
09968                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22C1                        36            .byte	$36
09970 22C2                        36            .byte	$36
09971 22C3                        36            .byte	$36
09972 22C4                        36            .byte	$36
09973 22C5                        36            .byte	$36
09974 22C6                        36            .byte	$36
09975 22C7                        36            .byte	$36
09976 22C8                        FF            .byte	$FF
09977 22C9                        00            .byte	0
09978 22CA                        00            .byte	0
09979 22CB                        00            .byte	0
09980 22CC                        00            .byte	0
09981 22CD                        00            .byte	0
09982 22CE                        00            .byte	0
09983                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22CF                        00            .byte	0
09985 22D0                        00            .byte	0
09986 22D1                        00            .byte	0
09987 22D2                        00            .byte	0
09988 22D3                        00            .byte	0
09989 22D4                        FF            .byte	$FF
09990 22D5                        00            .byte	0
09991 22D6                        FF            .byte	$FF
09992 22D7                        18            .byte	$18
09993 22D8                        18            .byte	$18
09994 22D9                        18            .byte	$18
09995 22DA                        18            .byte	$18
09996 22DB                        18            .byte	$18
09997 22DC                        18            .byte	$18
09998                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22DD                        00            .byte	0
10000 22DE                        00            .byte	0
10001 22DF                        00            .byte	0
10002 22E0                        00            .byte	0
10003 22E1                        00            .byte	0
10004 22E2                        00            .byte	0
10005 22E3                        00            .byte	0
10006 22E4                        FF            .byte	$FF
10007 22E5                        36            .byte	$36
10008 22E6                        36            .byte	$36
10009 22E7                        36            .byte	$36
10010 22E8                        36            .byte	$36
10011 22E9                        36            .byte	$36
10012 22EA                        36            .byte	$36
10013                                           ! 1361  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22EB                        36            .byte	$36
10015 22EC                        36            .byte	$36
10016 22ED                        36            .byte	$36
10017 22EE                        36            .byte	$36
10018 22EF                        36            .byte	$36
10019 22F0                        36            .byte	$36
10020 22F1                        36            .byte	$36
10021 22F2                        3F            .byte	$3F
10022 22F3                        00            .byte	0
10023 22F4                        00            .byte	0
10024 22F5                        00            .byte	0
10025 22F6                        00            .byte	0
10026 22F7                        00            .byte	0
10027 22F8                        00            .byte	0
10028                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 22F9                        18            .byte	$18
10030 22FA                        18            .byte	$18
10031 22FB                        18            .byte	$18
10032 22FC                        18            .byte	$18
10033 22FD                        18            .byte	$18
10034 22FE                        1F            .byte	$1F
10035 22FF                        18            .byte	$18
10036 2300                        1F            .byte	$1F
10037 2301                        00            .byte	0
10038 2302                        00            .byte	0
10039 2303                        00            .byte	0
10040 2304                        00            .byte	0
10041 2305                        00            .byte	0
10042 2306                        00            .byte	0
10043                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 2307                        00            .byte	0
10045 2308                        00            .byte	0
10046 2309                        00            .byte	0
10047 230A                        00            .byte	0
10048 230B                        00            .byte	0
10049 230C                        1F            .byte	$1F
10050 230D                        18            .byte	$18
10051 230E                        1F            .byte	$1F
10052 230F                        18            .byte	$18
10053 2310                        18            .byte	$18
10054 2311                        18            .byte	$18
10055 2312                        18            .byte	$18
10056 2313                        18            .byte	$18
10057 2314                        18            .byte	$18
10058                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 2315                        00            .byte	0
10060 2316                        00            .byte	0
10061 2317                        00            .byte	0
10062 2318                        00            .byte	0
10063 2319                        00            .byte	0
10064 231A                        00            .byte	0
10065 231B                        00            .byte	0
10066 231C                        3F            .byte	$3F
10067 231D                        36            .byte	$36
10068 231E                        36            .byte	$36
10069 231F                        36            .byte	$36
10070 2320                        36            .byte	$36
10071 2321                        36            .byte	$36
10072 2322                        36            .byte	$36
10073                                           ! 1365  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 2323                        36            .byte	$36
10075 2324                        36            .byte	$36
10076 2325                        36            .byte	$36
10077 2326                        36            .byte	$36
10078 2327                        36            .byte	$36
10079 2328                        36            .byte	$36
10080 2329                        36            .byte	$36
10081 232A                        FF            .byte	$FF
10082 232B                        36            .byte	$36
10083 232C                        36            .byte	$36
10084 232D                        36            .byte	$36
10085 232E                        36            .byte	$36
10086 232F                        36            .byte	$36
10087 2330                        36            .byte	$36
10088                                           ! 1366  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 2331                        18            .byte	$18
10090 2332                        18            .byte	$18
10091 2333                        18            .byte	$18
10092 2334                        18            .byte	$18
10093 2335                        18            .byte	$18
10094 2336                        FF            .byte	$FF
10095 2337                        18            .byte	$18
10096 2338                        FF            .byte	$FF
10097 2339                        18            .byte	$18
10098 233A                        18            .byte	$18
10099 233B                        18            .byte	$18
10100 233C                        18            .byte	$18
10101 233D                        18            .byte	$18
10102 233E                        18            .byte	$18
10103                                           ! 1367  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 233F                        18            .byte	$18
10105 2340                        18            .byte	$18
10106 2341                        18            .byte	$18
10107 2342                        18            .byte	$18
10108 2343                        18            .byte	$18
10109 2344                        18            .byte	$18
10110 2345                        18            .byte	$18
10111 2346                        F8            .byte	$F8
10112 2347                        00            .byte	0
10113 2348                        00            .byte	0
10114 2349                        00            .byte	0
10115 234A                        00            .byte	0
10116 234B                        00            .byte	0
10117 234C                        00            .byte	0
10118                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 234D                        00            .byte	0
10120 234E                        00            .byte	0
10121 234F                        00            .byte	0
10122 2350                        00            .byte	0
10123 2351                        00            .byte	0
10124 2352                        00            .byte	0
10125 2353                        00            .byte	0
10126 2354                        1F            .byte	$1F
10127 2355                        18            .byte	$18
10128 2356                        18            .byte	$18
10129 2357                        18            .byte	$18
10130 2358                        18            .byte	$18
10131 2359                        18            .byte	$18
10132 235A                        18            .byte	$18
10133                                           ! 1369  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 235B                        FF            .byte	$FF
10135 235C                        FF            .byte	$FF
10136 235D                        FF            .byte	$FF
10137 235E                        FF            .byte	$FF
10138 235F                        FF            .byte	$FF
10139 2360                        FF            .byte	$FF
10140 2361                        FF            .byte	$FF
10141 2362                        FF            .byte	$FF
10142 2363                        FF            .byte	$FF
10143 2364                        FF            .byte	$FF
10144 2365                        FF            .byte	$FF
10145 2366                        FF            .byte	$FF
10146 2367                        FF            .byte	$FF
10147 2368                        FF            .byte	$FF
10148                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2369                        00            .byte	0
10150 236A                        00            .byte	0
10151 236B                        00            .byte	0
10152 236C                        00            .byte	0
10153 236D                        00            .byte	0
10154 236E                        00            .byte	0
10155 236F                        00            .byte	0
10156 2370                        FF            .byte	$FF
10157 2371                        FF            .byte	$FF
10158 2372                        FF            .byte	$FF
10159 2373                        FF            .byte	$FF
10160 2374                        FF            .byte	$FF
10161 2375                        FF            .byte	$FF
10162 2376                        FF            .byte	$FF
10163                                           ! 1371  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10164 2377                        F0            .byte	$F0
10165 2378                        F0            .byte	$F0
10166 2379                        F0            .byte	$F0
10167 237A                        F0            .byte	$F0
10168 237B                        F0            .byte	$F0
10169 237C                        F0            .byte	$F0
10170 237D                        F0            .byte	$F0
10171 237E                        F0            .byte	$F0
10172 237F                        F0            .byte	$F0
10173 2380                        F0            .byte	$F0
10174 2381                        F0            .byte	$F0
10175 2382                        F0            .byte	$F0
10176 2383                        F0            .byte	$F0
10177 2384                        F0            .byte	$F0
10178                                           ! 1372  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
10179 2385                        0F            .byte	$F
10180 2386                        0F            .byte	$F
10181 2387                        0F            .byte	$F
10182 2388                        0F            .byte	$F
10183 2389                        0F            .byte	$F
10184 238A                        0F            .byte	$F
10185 238B                        0F            .byte	$F
10186 238C                        0F            .byte	$F
10187                                           ! 1372 x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10188 238D                        0F            .byte	$F
10189 238E                        0F            .byte	$F
10190 238F                        0F            .byte	$F
10191 2390                        0F            .byte	$F
10192 2391                        0F            .byte	$F
10193 2392                        0F            .byte	$F
10194                                           ! 1373  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 2393                        FF            .byte	$FF
10196 2394                        FF            .byte	$FF
10197 2395                        FF            .byte	$FF
10198 2396                        FF            .byte	$FF
10199 2397                        FF            .byte	$FF
10200 2398                        FF            .byte	$FF
10201 2399                        FF            .byte	$FF
10202 239A                        00            .byte	0
10203 239B                        00            .byte	0
10204 239C                        00            .byte	0
10205 239D                        00            .byte	0
10206 239E                        00            .byte	0
10207 239F                        00            .byte	0
10208 23A0                        00            .byte	0
10209                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 23A1                        00            .byte	0
10211 23A2                        00            .byte	0
10212 23A3                        00            .byte	0
10213 23A4                        00            .byte	0
10214 23A5                        00            .byte	0
10215 23A6                        76            .byte	$76
10216 23A7                        DC            .byte	$DC
10217 23A8                        D8            .byte	$D8
10218 23A9                        D8            .byte	$D8
10219 23AA                        DC            .byte	$DC
10220 23AB                        76            .byte	$76
10221 23AC                        00            .byte	0
10222 23AD                        00            .byte	0
10223 23AE                        00            .byte	0
10224                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23AF                        00            .byte	0
10226 23B0                        00            .byte	0
10227 23B1                        00            .byte	0
10228 23B2                        00            .byte	0
10229 23B3                        7C            .byte	$7C
10230 23B4                        C6            .byte	$C6
10231 23B5                        FC            .byte	$FC
10232 23B6                        C6            .byte	$C6
10233 23B7                        C6            .byte	$C6
10234 23B8                        FC            .byte	$FC
10235 23B9                        C0            .byte	$C0
10236 23BA                        C0            .byte	$C0
10237 23BB                        40            .byte	$40
10238 23BC                        00            .byte	0
10239                                           ! 1376  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23BD                        00            .byte	0
10241 23BE                        00            .byte	0
10242 23BF                        FE            .byte	$FE
10243 23C0                        C6            .byte	$C6
10244 23C1                        C6            .byte	$C6
10245 23C2                        C0            .byte	$C0
10246 23C3                        C0            .byte	$C0
10247 23C4                        C0            .byte	$C0
10248 23C5                        C0            .byte	$C0
10249 23C6                        C0            .byte	$C0
10250 23C7                        C0            .byte	$C0
10251 23C8                        00            .byte	0
10252 23C9                        00            .byte	0
10253 23CA                        00            .byte	0
10254                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23CB                        00            .byte	0
10256 23CC                        00            .byte	0
10257 23CD                        00            .byte	0
10258 23CE                        00            .byte	0
10259 23CF                        FE            .byte	$FE
10260 23D0                        6C            .byte	$6C
10261 23D1                        6C            .byte	$6C
10262 23D2                        6C            .byte	$6C
10263 23D3                        6C            .byte	$6C
10264 23D4                        6C            .byte	$6C
10265 23D5                        6C            .byte	$6C
10266 23D6                        00            .byte	0
10267 23D7                        00            .byte	0
10268 23D8                        00            .byte	0
10269                                           ! 1378  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23D9                        00            .byte	0
10271 23DA                        00            .byte	0
10272 23DB                        FE            .byte	$FE
10273 23DC                        C6            .byte	$C6
10274 23DD                        60            .byte	$60
10275 23DE                        30            .byte	$30
10276 23DF                        18            .byte	$18
10277 23E0                        30            .byte	$30
10278 23E1                        60            .byte	$60
10279 23E2                        C6            .byte	$C6
10280 23E3                        FE            .byte	$FE
10281 23E4                        00            .byte	0
10282 23E5                        00            .byte	0
10283 23E6                        00            .byte	0
10284                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23E7                        00            .byte	0
10286 23E8                        00            .byte	0
10287 23E9                        00            .byte	0
10288 23EA                        00            .byte	0
10289 23EB                        00            .byte	0
10290 23EC                        7E            .byte	$7E
10291 23ED                        D8            .byte	$D8
10292 23EE                        D8            .byte	$D8
10293 23EF                        D8            .byte	$D8
10294 23F0                        D8            .byte	$D8
10295 23F1                        70            .byte	$70
10296 23F2                        00            .byte	0
10297 23F3                        00            .byte	0
10298 23F4                        00            .byte	0
10299                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 23F5                        00            .byte	0
10301 23F6                        00            .byte	0
10302 23F7                        00            .byte	0
10303 23F8                        00            .byte	0
10304 23F9                        66            .byte	$66
10305 23FA                        66            .byte	$66
10306 23FB                        66            .byte	$66
10307 23FC                        66            .byte	$66
10308 23FD                        7C            .byte	$7C
10309 23FE                        60            .byte	$60
10310 23FF                        60            .byte	$60
10311 2400                        C0            .byte	$C0
10312 2401                        00            .byte	0
10313 2402                        00            .byte	0
10314                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 2403                        00            .byte	0
10316 2404                        00            .byte	0
10317 2405                        00            .byte	0
10318 2406                        00            .byte	0
10319 2407                        76            .byte	$76
10320 2408                        DC            .byte	$DC
10321 2409                        18            .byte	$18
10322 240A                        18            .byte	$18
10323 240B                        18            .byte	$18
10324 240C                        18            .byte	$18
10325 240D                        18            .byte	$18
10326 240E                        00            .byte	0
10327 240F                        00            .byte	0
10328 2410                        00            .byte	0
10329                                           ! 1382  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 2411                        00            .byte	0
10331 2412                        00            .byte	0
10332 2413                        7E            .byte	$7E
10333 2414                        18            .byte	$18
10334 2415                        3C            .byte	$3C
10335 2416                        66            .byte	$66
10336 2417                        66            .byte	$66
10337 2418                        66            .byte	$66
10338 2419                        3C            .byte	$3C
10339 241A                        18            .byte	$18
10340 241B                        7E            .byte	$7E
10341 241C                        00            .byte	0
10342 241D                        00            .byte	0
10343 241E                        00            .byte	0
10344                                           ! 1383  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 241F                        00            .byte	0
10346 2420                        00            .byte	0
10347 2421                        38            .byte	$38
10348 2422                        6C            .byte	$6C
10349 2423                        C6            .byte	$C6
10350 2424                        C6            .byte	$C6
10351 2425                        FE            .byte	$FE
10352 2426                        C6            .byte	$C6
10353 2427                        C6            .byte	$C6
10354 2428                        6C            .byte	$6C
10355 2429                        38            .byte	$38
10356 242A                        00            .byte	0
10357 242B                        00            .byte	0
10358 242C                        00            .byte	0
10359                                           ! 1384  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 242D                        00            .byte	0
10361 242E                        00            .byte	0
10362 242F                        38            .byte	$38
10363 2430                        6C            .byte	$6C
10364 2431                        C6            .byte	$C6
10365 2432                        C6            .byte	$C6
10366 2433                        C6            .byte	$C6
10367 2434                        6C            .byte	$6C
10368 2435                        6C            .byte	$6C
10369 2436                        6C            .byte	$6C
10370 2437                        EE            .byte	$EE
10371 2438                        00            .byte	0
10372 2439                        00            .byte	0
10373 243A                        00            .byte	0
10374                                           ! 1385  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 243B                        00            .byte	0
10376 243C                        00            .byte	0
10377 243D                        1E            .byte	$1E
10378 243E                        30            .byte	$30
10379 243F                        18            .byte	$18
10380 2440                        0C            .byte	$C
10381 2441                        3E            .byte	$3E
10382 2442                        66            .byte	$66
10383 2443                        66            .byte	$66
10384 2444                        66            .byte	$66
10385 2445                        3C            .byte	$3C
10386 2446                        00            .byte	0
10387 2447                        00            .byte	0
10388 2448                        00            .byte	0
10389                                           ! 1386  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2449                        00            .byte	0
10391 244A                        00            .byte	0
10392 244B                        00            .byte	0
10393 244C                        00            .byte	0
10394 244D                        00            .byte	0
10395 244E                        7E            .byte	$7E
10396 244F                        DB            .byte	$DB
10397 2450                        DB            .byte	$DB
10398 2451                        7E            .byte	$7E
10399 2452                        00            .byte	0
10400 2453                        00            .byte	0
10401 2454                        00            .byte	0
10402 2455                        00            .byte	0
10403 2456                        00            .byte	0
10404                                           ! 1387  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 2457                        00            .byte	0
10406 2458                        00            .byte	0
10407 2459                        03            .byte	3
10408 245A                        06            .byte	6
10409 245B                        7E            .byte	$7E
10410 245C                        DB            .byte	$DB
10411 245D                        DB            .byte	$DB
10412 245E                        F3            .byte	$F3
10413 245F                        7E            .byte	$7E
10414 2460                        60            .byte	$60
10415 2461                        C0            .byte	$C0
10416 2462                        00            .byte	0
10417 2463                        00            .byte	0
10418 2464                        00            .byte	0
10419                                           ! 1388  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 2465                        00            .byte	0
10421 2466                        00            .byte	0
10422 2467                        1C            .byte	$1C
10423 2468                        30            .byte	$30
10424 2469                        60            .byte	$60
10425 246A                        60            .byte	$60
10426 246B                        7C            .byte	$7C
10427 246C                        60            .byte	$60
10428 246D                        60            .byte	$60
10429 246E                        30            .byte	$30
10430 246F                        1C            .byte	$1C
10431 2470                        00            .byte	0
10432 2471                        00            .byte	0
10433 2472                        00            .byte	0
10434                                           ! 1389  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 2473                        00            .byte	0
10436 2474                        00            .byte	0
10437 2475                        00            .byte	0
10438 2476                        7C            .byte	$7C
10439 2477                        C6            .byte	$C6
10440 2478                        C6            .byte	$C6
10441 2479                        C6            .byte	$C6
10442 247A                        C6            .byte	$C6
10443 247B                        C6            .byte	$C6
10444 247C                        C6            .byte	$C6
10445 247D                        C6            .byte	$C6
10446 247E                        00            .byte	0
10447 247F                        00            .byte	0
10448 2480                        00            .byte	0
10449                                           ! 1390  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 2481                        00            .byte	0
10451 2482                        00            .byte	0
10452 2483                        00            .byte	0
10453 2484                        FE            .byte	$FE
10454 2485                        00            .byte	0
10455 2486                        00            .byte	0
10456 2487                        FE            .byte	$FE
10457 2488                        00            .byte	0
10458 2489                        00            .byte	0
10459 248A                        FE            .byte	$FE
10460 248B                        00            .byte	0
10461 248C                        00            .byte	0
10462 248D                        00            .byte	0
10463 248E                        00            .byte	0
10464                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 248F                        00            .byte	0
10466 2490                        00            .byte	0
10467 2491                        00            .byte	0
10468 2492                        18            .byte	$18
10469 2493                        18            .byte	$18
10470 2494                        7E            .byte	$7E
10471 2495                        18            .byte	$18
10472 2496                        18            .byte	$18
10473 2497                        00            .byte	0
10474 2498                        00            .byte	0
10475 2499                        FF            .byte	$FF
10476 249A                        00            .byte	0
10477 249B                        00            .byte	0
10478 249C                        00            .byte	0
10479                                           ! 1392  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 249D                        00            .byte	0
10481 249E                        00            .byte	0
10482 249F                        30            .byte	$30
10483 24A0                        18            .byte	$18
10484 24A1                        0C            .byte	$C
10485 24A2                        06            .byte	6
10486 24A3                        0C            .byte	$C
10487 24A4                        18            .byte	$18
10488 24A5                        30            .byte	$30
10489 24A6                        00            .byte	0
10490 24A7                        7E            .byte	$7E
10491 24A8                        00            .byte	0
10492 24A9                        00            .byte	0
10493 24AA                        00            .byte	0
10494                                           ! 1393  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24AB                        00            .byte	0
10496 24AC                        00            .byte	0
10497 24AD                        0C            .byte	$C
10498 24AE                        18            .byte	$18
10499 24AF                        30            .byte	$30
10500 24B0                        60            .byte	$60
10501 24B1                        30            .byte	$30
10502 24B2                        18            .byte	$18
10503 24B3                        0C            .byte	$C
10504 24B4                        00            .byte	0
10505 24B5                        7E            .byte	$7E
10506 24B6                        00            .byte	0
10507 24B7                        00            .byte	0
10508 24B8                        00            .byte	0
10509                                           ! 1394  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24B9                        00            .byte	0
10511 24BA                        00            .byte	0
10512 24BB                        0E            .byte	$E
10513 24BC                        1B            .byte	$1B
10514 24BD                        1B            .byte	$1B
10515 24BE                        18            .byte	$18
10516 24BF                        18            .byte	$18
10517 24C0                        18            .byte	$18
10518 24C1                        18            .byte	$18
10519 24C2                        18            .byte	$18
10520 24C3                        18            .byte	$18
10521 24C4                        18            .byte	$18
10522 24C5                        18            .byte	$18
10523 24C6                        18            .byte	$18
10524                                           ! 1395  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10525 24C7                        18            .byte	$18
10526 24C8                        18            .byte	$18
10527 24C9                        18            .byte	$18
10528 24CA                        18            .byte	$18
10529 24CB                        18            .byte	$18
10530 24CC                        18            .byte	$18
10531 24CD                        18            .byte	$18
10532 24CE                        18            .byte	$18
10533 24CF                        D8            .byte	$D8
10534 24D0                        D8            .byte	$D8
10535 24D1                        70            .byte	$70
10536 24D2                        00            .byte	0
10537 24D3                        00            .byte	0
10538 24D4                        00            .byte	0
10539                                           ! 1396  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x1
10540 24D5                        00            .byte	0
10541 24D6                        00            .byte	0
10542 24D7                        00            .byte	0
10543 24D8                        18            .byte	$18
10544 24D9                        18            .byte	$18
10545 24DA                        00            .byte	0
10546 24DB                        7E            .byte	$7E
10547 24DC                        00            .byte	0
10548 24DD                        18            .byte	$18
10549                                           ! 1396 8, 0x00, 0x00, 0x00, 0x00,
10550 24DE                        18            .byte	$18
10551 24DF                        00            .byte	0
10552 24E0                        00            .byte	0
10553 24E1                        00            .byte	0
10554 24E2                        00            .byte	0
10555                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24E3                        00            .byte	0
10557 24E4                        00            .byte	0
10558 24E5                        00            .byte	0
10559 24E6                        00            .byte	0
10560 24E7                        76            .byte	$76
10561 24E8                        DC            .byte	$DC
10562 24E9                        00            .byte	0
10563 24EA                        76            .byte	$76
10564 24EB                        DC            .byte	$DC
10565 24EC                        00            .byte	0
10566 24ED                        00            .byte	0
10567 24EE                        00            .byte	0
10568 24EF                        00            .byte	0
10569 24F0                        00            .byte	0
10570                                           ! 1398  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24F1                        00            .byte	0
10572 24F2                        38            .byte	$38
10573 24F3                        6C            .byte	$6C
10574 24F4                        6C            .byte	$6C
10575 24F5                        38            .byte	$38
10576 24F6                        00            .byte	0
10577 24F7                        00            .byte	0
10578 24F8                        00            .byte	0
10579 24F9                        00            .byte	0
10580 24FA                        00            .byte	0
10581 24FB                        00            .byte	0
10582 24FC                        00            .byte	0
10583 24FD                        00            .byte	0
10584 24FE                        00            .byte	0
10585                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 24FF                        00            .byte	0
10587 2500                        00            .byte	0
10588 2501                        00            .byte	0
10589 2502                        00            .byte	0
10590 2503                        00            .byte	0
10591 2504                        00            .byte	0
10592 2505                        18            .byte	$18
10593 2506                        18            .byte	$18
10594 2507                        00            .byte	0
10595 2508                        00            .byte	0
10596 2509                        00            .byte	0
10597 250A                        00            .byte	0
10598 250B                        00            .byte	0
10599 250C                        00            .byte	0
10600                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 250D                        00            .byte	0
10602 250E                        00            .byte	0
10603 250F                        00            .byte	0
10604 2510                        00            .byte	0
10605 2511                        00            .byte	0
10606 2512                        00            .byte	0
10607 2513                        00            .byte	0
10608 2514                        18            .byte	$18
10609 2515                        00            .byte	0
10610 2516                        00            .byte	0
10611 2517                        00            .byte	0
10612 2518                        00            .byte	0
10613 2519                        00            .byte	0
10614 251A                        00            .byte	0
10615                                           ! 1401  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 251B                        00            .byte	0
10617 251C                        0F            .byte	$F
10618 251D                        0C            .byte	$C
10619 251E                        0C            .byte	$C
10620 251F                        0C            .byte	$C
10621 2520                        0C            .byte	$C
10622 2521                        0C            .byte	$C
10623 2522                        EC            .byte	$EC
10624 2523                        6C            .byte	$6C
10625 2524                        3C            .byte	$3C
10626 2525                        1C            .byte	$1C
10627 2526                        00            .byte	0
10628 2527                        00            .byte	0
10629 2528                        00            .byte	0
10630                                           ! 1402  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2529                        00            .byte	0
10632 252A                        D8            .byte	$D8
10633 252B                        6C            .byte	$6C
10634 252C                        6C            .byte	$6C
10635 252D                        6C            .byte	$6C
10636 252E                        6C            .byte	$6C
10637 252F                        6C            .byte	$6C
10638 2530                        00            .byte	0
10639 2531                        00            .byte	0
10640 2532                        00            .byte	0
10641 2533                        00            .byte	0
10642 2534                        00            .byte	0
10643 2535                        00            .byte	0
10644 2536                        00            .byte	0
10645                                           ! 1403  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 2537                        00            .byte	0
10647 2538                        70            .byte	$70
10648 2539                        D8            .byte	$D8
10649 253A                        30            .byte	$30
10650 253B                        60            .byte	$60
10651 253C                        C8            .byte	$C8
10652 253D                        F8            .byte	$F8
10653 253E                        00            .byte	0
10654 253F                        00            .byte	0
10655 2540                        00            .byte	0
10656 2541                        00            .byte	0
10657 2542                        00            .byte	0
10658 2543                        00            .byte	0
10659 2544                        00            .byte	0
10660                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 2545                        00            .byte	0
10662 2546                        00            .byte	0
10663 2547                        00            .byte	0
10664 2548                        00            .byte	0
10665 2549                        7C            .byte	$7C
10666 254A                        7C            .byte	$7C
10667 254B                        7C            .byte	$7C
10668 254C                        7C            .byte	$7C
10669 254D                        7C            .byte	$7C
10670 254E                        7C            .byte	$7C
10671 254F                        00            .byte	0
10672 2550                        00            .byte	0
10673 2551                        00            .byte	0
10674 2552                        00            .byte	0
10675                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 2553                        00            .byte	0
10677 2554                        00            .byte	0
10678 2555                        00            .byte	0
10679 2556                        00            .byte	0
10680 2557                        00            .byte	0
10681 2558                        00            .byte	0
10682 2559                        00            .byte	0
10683 255A                        00            .byte	0
10684 255B                        00            .byte	0
10685 255C                        00            .byte	0
10686 255D                        00            .byte	0
10687 255E                        00            .byte	0
10688 255F                        00            .byte	0
10689                                           ! 1406 };
10690 2560                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1407 static Bit8u vgafont16[256*16]=
10693                                           ! 1408 {
10694                       00002561            _vgafont16:
10695                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 2561                        00            .byte	0
10697 2562                        00            .byte	0
10698 2563                        00            .byte	0
10699 2564                        00            .byte	0
10700 2565                        00            .byte	0
10701 2566                        00            .byte	0
10702 2567                        00            .byte	0
10703 2568                        00            .byte	0
10704 2569                        00            .byte	0
10705 256A                        00            .byte	0
10706 256B                        00            .byte	0
10707 256C                        00            .byte	0
10708 256D                        00            .byte	0
10709 256E                        00            .byte	0
10710 256F                        00            .byte	0
10711 2570                        00            .byte	0
10712                                           ! 1410  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 2571                        00            .byte	0
10714 2572                        00            .byte	0
10715 2573                        7E            .byte	$7E
10716 2574                        81            .byte	$81
10717 2575                        A5            .byte	$A5
10718 2576                        81            .byte	$81
10719 2577                        81            .byte	$81
10720 2578                        BD            .byte	$BD
10721 2579                        99            .byte	$99
10722 257A                        81            .byte	$81
10723 257B                        81            .byte	$81
10724 257C                        7E            .byte	$7E
10725 257D                        00            .byte	0
10726 257E                        00            .byte	0
10727 257F                        00            .byte	0
10728 2580                        00            .byte	0
10729                                           ! 1411  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 2581                        00            .byte	0
10731 2582                        00            .byte	0
10732 2583                        7E            .byte	$7E
10733 2584                        FF            .byte	$FF
10734 2585                        DB            .byte	$DB
10735 2586                        FF            .byte	$FF
10736 2587                        FF            .byte	$FF
10737 2588                        C3            .byte	$C3
10738 2589                        E7            .byte	$E7
10739 258A                        FF            .byte	$FF
10740 258B                        FF            .byte	$FF
10741 258C                        7E            .byte	$7E
10742 258D                        00            .byte	0
10743 258E                        00            .byte	0
10744 258F                        00            .byte	0
10745 2590                        00            .byte	0
10746                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 2591                        00            .byte	0
10748 2592                        00            .byte	0
10749 2593                        00            .byte	0
10750 2594                        00            .byte	0
10751 2595                        6C            .byte	$6C
10752 2596                        FE            .byte	$FE
10753 2597                        FE            .byte	$FE
10754 2598                        FE            .byte	$FE
10755 2599                        FE            .byte	$FE
10756 259A                        7C            .byte	$7C
10757 259B                        38            .byte	$38
10758 259C                        10            .byte	$10
10759 259D                        00            .byte	0
10760 259E                        00            .byte	0
10761 259F                        00            .byte	0
10762 25A0                        00            .byte	0
10763                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 25A1                        00            .byte	0
10765 25A2                        00            .byte	0
10766 25A3                        00            .byte	0
10767 25A4                        00            .byte	0
10768 25A5                        10            .byte	$10
10769 25A6                        38            .byte	$38
10770 25A7                        7C            .byte	$7C
10771 25A8                        FE            .byte	$FE
10772 25A9                        7C            .byte	$7C
10773 25AA                        38            .byte	$38
10774 25AB                        10            .byte	$10
10775 25AC                        00            .byte	0
10776 25AD                        00            .byte	0
10777 25AE                        00            .byte	0
10778 25AF                        00            .byte	0
10779 25B0                        00            .byte	0
10780                                           ! 1414  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25B1                        00            .byte	0
10782 25B2                        00            .byte	0
10783 25B3                        00            .byte	0
10784 25B4                        18            .byte	$18
10785 25B5                        3C            .byte	$3C
10786 25B6                        3C            .byte	$3C
10787 25B7                        E7            .byte	$E7
10788 25B8                        E7            .byte	$E7
10789 25B9                        E7            .byte	$E7
10790 25BA                        18            .byte	$18
10791 25BB                        18            .byte	$18
10792 25BC                        3C            .byte	$3C
10793 25BD                        00            .byte	0
10794 25BE                        00            .byte	0
10795 25BF                        00            .byte	0
10796 25C0                        00            .byte	0
10797                                           ! 1415  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25C1                        00            .byte	0
10799 25C2                        00            .byte	0
10800 25C3                        00            .byte	0
10801 25C4                        18            .byte	$18
10802 25C5                        3C            .byte	$3C
10803 25C6                        7E            .byte	$7E
10804 25C7                        FF            .byte	$FF
10805 25C8                        FF            .byte	$FF
10806 25C9                        7E            .byte	$7E
10807 25CA                        18            .byte	$18
10808 25CB                        18            .byte	$18
10809 25CC                        3C            .byte	$3C
10810 25CD                        00            .byte	0
10811 25CE                        00            .byte	0
10812 25CF                        00            .byte	0
10813 25D0                        00            .byte	0
10814                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25D1                        00            .byte	0
10816 25D2                        00            .byte	0
10817 25D3                        00            .byte	0
10818 25D4                        00            .byte	0
10819 25D5                        00            .byte	0
10820 25D6                        00            .byte	0
10821 25D7                        18            .byte	$18
10822 25D8                        3C            .byte	$3C
10823 25D9                        3C            .byte	$3C
10824 25DA                        18            .byte	$18
10825 25DB                        00            .byte	0
10826 25DC                        00            .byte	0
10827 25DD                        00            .byte	0
10828 25DE                        00            .byte	0
10829 25DF                        00            .byte	0
10830 25E0                        00            .byte	0
10831                                           ! 1417  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25E1                        FF            .byte	$FF
10833 25E2                        FF            .byte	$FF
10834 25E3                        FF            .byte	$FF
10835 25E4                        FF            .byte	$FF
10836 25E5                        FF            .byte	$FF
10837 25E6                        FF            .byte	$FF
10838 25E7                        E7            .byte	$E7
10839 25E8                        C3            .byte	$C3
10840 25E9                        C3            .byte	$C3
10841 25EA                        E7            .byte	$E7
10842 25EB                        FF            .byte	$FF
10843 25EC                        FF            .byte	$FF
10844 25ED                        FF            .byte	$FF
10845 25EE                        FF            .byte	$FF
10846 25EF                        FF            .byte	$FF
10847 25F0                        FF            .byte	$FF
10848                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25F1                        00            .byte	0
10850 25F2                        00            .byte	0
10851 25F3                        00            .byte	0
10852 25F4                        00            .byte	0
10853 25F5                        00            .byte	0
10854 25F6                        3C            .byte	$3C
10855 25F7                        66            .byte	$66
10856 25F8                        42            .byte	$42
10857 25F9                        42            .byte	$42
10858 25FA                        66            .byte	$66
10859 25FB                        3C            .byte	$3C
10860 25FC                        00            .byte	0
10861 25FD                        00            .byte	0
10862 25FE                        00            .byte	0
10863 25FF                        00            .byte	0
10864 2600                        00            .byte	0
10865                                           ! 1419  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 2601                        FF            .byte	$FF
10867 2602                        FF            .byte	$FF
10868 2603                        FF            .byte	$FF
10869 2604                        FF            .byte	$FF
10870 2605                        FF            .byte	$FF
10871 2606                        C3            .byte	$C3
10872 2607                        99            .byte	$99
10873 2608                        BD            .byte	$BD
10874 2609                        BD            .byte	$BD
10875 260A                        99            .byte	$99
10876 260B                        C3            .byte	$C3
10877 260C                        FF            .byte	$FF
10878 260D                        FF            .byte	$FF
10879 260E                        FF            .byte	$FF
10880 260F                        FF            .byte	$FF
10881 2610                        FF            .byte	$FF
10882                                           ! 1420  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10883 2611                        00            .byte	0
10884 2612                        00            .byte	0
10885 2613                        1E            .byte	$1E
10886 2614                        0E            .byte	$E
10887 2615                        1A            .byte	$1A
10888 2616                        32            .byte	$32
10889 2617                        78            .byte	$78
10890 2618                        CC            .byte	$CC
10891 2619                        CC            .byte	$CC
10892 261A                        CC            .byte	$CC
10893 261B                        CC            .byte	$CC
10894 261C                        78            .byte	$78
10895 261D                        00            .byte	0
10896 261E                        00            .byte	0
10897 261F                        00            .byte	0
10898 2620                        00            .byte	0
10899                                           ! 1421  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0
10900 2621                        00            .byte	0
10901 2622                        00            .byte	0
10902 2623                        3C            .byte	$3C
10903 2624                        66            .byte	$66
10904 2625                        66            .byte	$66
10905 2626                        66            .byte	$66
10906 2627                        66            .byte	$66
10907 2628                        3C            .byte	$3C
10908 2629                        18            .byte	$18
10909                                           ! 1421 x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10910 262A                        7E            .byte	$7E
10911 262B                        18            .byte	$18
10912 262C                        18            .byte	$18
10913 262D                        00            .byte	0
10914 262E                        00            .byte	0
10915 262F                        00            .byte	0
10916 2630                        00            .byte	0
10917                                           ! 1422  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 2631                        00            .byte	0
10919 2632                        00            .byte	0
10920 2633                        3F            .byte	$3F
10921 2634                        33            .byte	$33
10922 2635                        3F            .byte	$3F
10923 2636                        30            .byte	$30
10924 2637                        30            .byte	$30
10925 2638                        30            .byte	$30
10926 2639                        30            .byte	$30
10927 263A                        70            .byte	$70
10928 263B                        F0            .byte	$F0
10929 263C                        E0            .byte	$E0
10930 263D                        00            .byte	0
10931 263E                        00            .byte	0
10932 263F                        00            .byte	0
10933 2640                        00            .byte	0
10934                                           ! 1423  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 2641                        00            .byte	0
10936 2642                        00            .byte	0
10937 2643                        7F            .byte	$7F
10938 2644                        63            .byte	$63
10939 2645                        7F            .byte	$7F
10940 2646                        63            .byte	$63
10941 2647                        63            .byte	$63
10942 2648                        63            .byte	$63
10943 2649                        63            .byte	$63
10944 264A                        67            .byte	$67
10945 264B                        E7            .byte	$E7
10946 264C                        E6            .byte	$E6
10947 264D                        C0            .byte	$C0
10948 264E                        00            .byte	0
10949 264F                        00            .byte	0
10950 2650                        00            .byte	0
10951                                           ! 1424  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 2651                        00            .byte	0
10953 2652                        00            .byte	0
10954 2653                        00            .byte	0
10955 2654                        18            .byte	$18
10956 2655                        18            .byte	$18
10957 2656                        DB            .byte	$DB
10958 2657                        3C            .byte	$3C
10959 2658                        E7            .byte	$E7
10960 2659                        3C            .byte	$3C
10961 265A                        DB            .byte	$DB
10962 265B                        18            .byte	$18
10963 265C                        18            .byte	$18
10964 265D                        00            .byte	0
10965 265E                        00            .byte	0
10966 265F                        00            .byte	0
10967 2660                        00            .byte	0
10968                                           ! 1425  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 2661                        00            .byte	0
10970 2662                        80            .byte	$80
10971 2663                        C0            .byte	$C0
10972 2664                        E0            .byte	$E0
10973 2665                        F0            .byte	$F0
10974 2666                        F8            .byte	$F8
10975 2667                        FE            .byte	$FE
10976 2668                        F8            .byte	$F8
10977 2669                        F0            .byte	$F0
10978 266A                        E0            .byte	$E0
10979 266B                        C0            .byte	$C0
10980 266C                        80            .byte	$80
10981 266D                        00            .byte	0
10982 266E                        00            .byte	0
10983 266F                        00            .byte	0
10984 2670                        00            .byte	0
10985                                           ! 1426  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 2671                        00            .byte	0
10987 2672                        02            .byte	2
10988 2673                        06            .byte	6
10989 2674                        0E            .byte	$E
10990 2675                        1E            .byte	$1E
10991 2676                        3E            .byte	$3E
10992 2677                        FE            .byte	$FE
10993 2678                        3E            .byte	$3E
10994 2679                        1E            .byte	$1E
10995 267A                        0E            .byte	$E
10996 267B                        06            .byte	6
10997 267C                        02            .byte	2
10998 267D                        00            .byte	0
10999 267E                        00            .byte	0
11000 267F                        00            .byte	0
11001 2680                        00            .byte	0
11002                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 2681                        00            .byte	0
11004 2682                        00            .byte	0
11005 2683                        18            .byte	$18
11006 2684                        3C            .byte	$3C
11007 2685                        7E            .byte	$7E
11008 2686                        18            .byte	$18
11009 2687                        18            .byte	$18
11010 2688                        18            .byte	$18
11011 2689                        7E            .byte	$7E
11012 268A                        3C            .byte	$3C
11013 268B                        18            .byte	$18
11014 268C                        00            .byte	0
11015 268D                        00            .byte	0
11016 268E                        00            .byte	0
11017 268F                        00            .byte	0
11018 2690                        00            .byte	0
11019                                           ! 1428  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 2691                        00            .byte	0
11021 2692                        00            .byte	0
11022 2693                        66            .byte	$66
11023 2694                        66            .byte	$66
11024 2695                        66            .byte	$66
11025 2696                        66            .byte	$66
11026 2697                        66            .byte	$66
11027 2698                        66            .byte	$66
11028 2699                        66            .byte	$66
11029 269A                        00            .byte	0
11030 269B                        66            .byte	$66
11031 269C                        66            .byte	$66
11032 269D                        00            .byte	0
11033 269E                        00            .byte	0
11034 269F                        00            .byte	0
11035 26A0                        00            .byte	0
11036                                           ! 1429  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 26A1                        00            .byte	0
11038 26A2                        00            .byte	0
11039 26A3                        7F            .byte	$7F
11040 26A4                        DB            .byte	$DB
11041 26A5                        DB            .byte	$DB
11042 26A6                        DB            .byte	$DB
11043 26A7                        7B            .byte	$7B
11044 26A8                        1B            .byte	$1B
11045 26A9                        1B            .byte	$1B
11046 26AA                        1B            .byte	$1B
11047 26AB                        1B            .byte	$1B
11048 26AC                        1B            .byte	$1B
11049 26AD                        00            .byte	0
11050 26AE                        00            .byte	0
11051 26AF                        00            .byte	0
11052 26B0                        00            .byte	0
11053                                           ! 1430  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26B1                        00            .byte	0
11055 26B2                        7C            .byte	$7C
11056 26B3                        C6            .byte	$C6
11057 26B4                        60            .byte	$60
11058 26B5                        38            .byte	$38
11059 26B6                        6C            .byte	$6C
11060 26B7                        C6            .byte	$C6
11061 26B8                        C6            .byte	$C6
11062 26B9                        6C            .byte	$6C
11063 26BA                        38            .byte	$38
11064 26BB                        0C            .byte	$C
11065 26BC                        C6            .byte	$C6
11066 26BD                        7C            .byte	$7C
11067 26BE                        00            .byte	0
11068 26BF                        00            .byte	0
11069 26C0                        00            .byte	0
11070                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26C1                        00            .byte	0
11072 26C2                        00            .byte	0
11073 26C3                        00            .byte	0
11074 26C4                        00            .byte	0
11075 26C5                        00            .byte	0
11076 26C6                        00            .byte	0
11077 26C7                        00            .byte	0
11078 26C8                        00            .byte	0
11079 26C9                        FE            .byte	$FE
11080 26CA                        FE            .byte	$FE
11081 26CB                        FE            .byte	$FE
11082 26CC                        FE            .byte	$FE
11083 26CD                        00            .byte	0
11084 26CE                        00            .byte	0
11085 26CF                        00            .byte	0
11086 26D0                        00            .byte	0
11087                                           ! 1432  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26D1                        00            .byte	0
11089 26D2                        00            .byte	0
11090 26D3                        18            .byte	$18
11091 26D4                        3C            .byte	$3C
11092 26D5                        7E            .byte	$7E
11093 26D6                        18            .byte	$18
11094 26D7                        18            .byte	$18
11095 26D8                        18            .byte	$18
11096 26D9                        7E            .byte	$7E
11097 26DA                        3C            .byte	$3C
11098 26DB                        18            .byte	$18
11099 26DC                        7E            .byte	$7E
11100 26DD                        00            .byte	0
11101 26DE                        00            .byte	0
11102 26DF                        00            .byte	0
11103 26E0                        00            .byte	0
11104                                           ! 1433  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26E1                        00            .byte	0
11106 26E2                        00            .byte	0
11107 26E3                        18            .byte	$18
11108 26E4                        3C            .byte	$3C
11109 26E5                        7E            .byte	$7E
11110 26E6                        18            .byte	$18
11111 26E7                        18            .byte	$18
11112 26E8                        18            .byte	$18
11113 26E9                        18            .byte	$18
11114 26EA                        18            .byte	$18
11115 26EB                        18            .byte	$18
11116 26EC                        18            .byte	$18
11117 26ED                        00            .byte	0
11118 26EE                        00            .byte	0
11119 26EF                        00            .byte	0
11120 26F0                        00            .byte	0
11121                                           ! 1434  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26F1                        00            .byte	0
11123 26F2                        00            .byte	0
11124 26F3                        18            .byte	$18
11125 26F4                        18            .byte	$18
11126 26F5                        18            .byte	$18
11127 26F6                        18            .byte	$18
11128 26F7                        18            .byte	$18
11129 26F8                        18            .byte	$18
11130 26F9                        18            .byte	$18
11131 26FA                        7E            .byte	$7E
11132 26FB                        3C            .byte	$3C
11133 26FC                        18            .byte	$18
11134 26FD                        00            .byte	0
11135 26FE                        00            .byte	0
11136 26FF                        00            .byte	0
11137 2700                        00            .byte	0
11138                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 2701                        00            .byte	0
11140 2702                        00            .byte	0
11141 2703                        00            .byte	0
11142 2704                        00            .byte	0
11143 2705                        00            .byte	0
11144 2706                        18            .byte	$18
11145 2707                        0C            .byte	$C
11146 2708                        FE            .byte	$FE
11147 2709                        0C            .byte	$C
11148 270A                        18            .byte	$18
11149 270B                        00            .byte	0
11150 270C                        00            .byte	0
11151 270D                        00            .byte	0
11152 270E                        00            .byte	0
11153 270F                        00            .byte	0
11154 2710                        00            .byte	0
11155                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 2711                        00            .byte	0
11157 2712                        00            .byte	0
11158 2713                        00            .byte	0
11159 2714                        00            .byte	0
11160 2715                        00            .byte	0
11161 2716                        30            .byte	$30
11162 2717                        60            .byte	$60
11163 2718                        FE            .byte	$FE
11164 2719                        60            .byte	$60
11165 271A                        30            .byte	$30
11166 271B                        00            .byte	0
11167 271C                        00            .byte	0
11168 271D                        00            .byte	0
11169 271E                        00            .byte	0
11170 271F                        00            .byte	0
11171 2720                        00            .byte	0
11172                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 2721                        00            .byte	0
11174 2722                        00            .byte	0
11175 2723                        00            .byte	0
11176 2724                        00            .byte	0
11177 2725                        00            .byte	0
11178 2726                        00            .byte	0
11179 2727                        C0            .byte	$C0
11180 2728                        C0            .byte	$C0
11181 2729                        C0            .byte	$C0
11182 272A                        FE            .byte	$FE
11183 272B                        00            .byte	0
11184 272C                        00            .byte	0
11185 272D                        00            .byte	0
11186 272E                        00            .byte	0
11187 272F                        00            .byte	0
11188 2730                        00            .byte	0
11189                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 2731                        00            .byte	0
11191 2732                        00            .byte	0
11192 2733                        00            .byte	0
11193 2734                        00            .byte	0
11194 2735                        00            .byte	0
11195 2736                        24            .byte	$24
11196 2737                        66            .byte	$66
11197 2738                        FF            .byte	$FF
11198 2739                        66            .byte	$66
11199 273A                        24            .byte	$24
11200 273B                        00            .byte	0
11201 273C                        00            .byte	0
11202 273D                        00            .byte	0
11203 273E                        00            .byte	0
11204 273F                        00            .byte	0
11205 2740                        00            .byte	0
11206                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 2741                        00            .byte	0
11208 2742                        00            .byte	0
11209 2743                        00            .byte	0
11210 2744                        00            .byte	0
11211 2745                        10            .byte	$10
11212 2746                        38            .byte	$38
11213 2747                        38            .byte	$38
11214 2748                        7C            .byte	$7C
11215 2749                        7C            .byte	$7C
11216 274A                        FE            .byte	$FE
11217 274B                        FE            .byte	$FE
11218 274C                        00            .byte	0
11219 274D                        00            .byte	0
11220 274E                        00            .byte	0
11221 274F                        00            .byte	0
11222 2750                        00            .byte	0
11223                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 2751                        00            .byte	0
11225 2752                        00            .byte	0
11226 2753                        00            .byte	0
11227 2754                        00            .byte	0
11228 2755                        FE            .byte	$FE
11229 2756                        FE            .byte	$FE
11230 2757                        7C            .byte	$7C
11231 2758                        7C            .byte	$7C
11232 2759                        38            .byte	$38
11233 275A                        38            .byte	$38
11234 275B                        10            .byte	$10
11235 275C                        00            .byte	0
11236 275D                        00            .byte	0
11237 275E                        00            .byte	0
11238 275F                        00            .byte	0
11239 2760                        00            .byte	0
11240                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11241 2761                        00            .byte	0
11242 2762                        00            .byte	0
11243 2763                        00            .byte	0
11244 2764                        00            .byte	0
11245 2765                        00            .byte	0
11246 2766                        00            .byte	0
11247 2767                        00            .byte	0
11248 2768                        00            .byte	0
11249 2769                        00            .byte	0
11250 276A                        00            .byte	0
11251 276B                        00            .byte	0
11252 276C                        00            .byte	0
11253 276D                        00            .byte	0
11254 276E                        00            .byte	0
11255 276F                        00            .byte	0
11256 2770                        00            .byte	0
11257                                           ! 1442  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 
11258 2771                        00            .byte	0
11259 2772                        00            .byte	0
11260 2773                        18            .byte	$18
11261 2774                        3C            .byte	$3C
11262 2775                        3C            .byte	$3C
11263 2776                        3C            .byte	$3C
11264 2777                        18            .byte	$18
11265 2778                        18            .byte	$18
11266 2779                        18            .byte	$18
11267 277A                        00            .byte	0
11268 277B                        18            .byte	$18
11269                                           ! 1442 0x18, 0x00, 0x00, 0x00, 0x00,
11270 277C                        18            .byte	$18
11271 277D                        00            .byte	0
11272 277E                        00            .byte	0
11273 277F                        00            .byte	0
11274 2780                        00            .byte	0
11275                                           ! 1443  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 2781                        00            .byte	0
11277 2782                        66            .byte	$66
11278 2783                        66            .byte	$66
11279 2784                        66            .byte	$66
11280 2785                        24            .byte	$24
11281 2786                        00            .byte	0
11282 2787                        00            .byte	0
11283 2788                        00            .byte	0
11284 2789                        00            .byte	0
11285 278A                        00            .byte	0
11286 278B                        00            .byte	0
11287 278C                        00            .byte	0
11288 278D                        00            .byte	0
11289 278E                        00            .byte	0
11290 278F                        00            .byte	0
11291 2790                        00            .byte	0
11292                                           ! 1444  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 2791                        00            .byte	0
11294 2792                        00            .byte	0
11295 2793                        00            .byte	0
11296 2794                        6C            .byte	$6C
11297 2795                        6C            .byte	$6C
11298 2796                        FE            .byte	$FE
11299 2797                        6C            .byte	$6C
11300 2798                        6C            .byte	$6C
11301 2799                        6C            .byte	$6C
11302 279A                        FE            .byte	$FE
11303 279B                        6C            .byte	$6C
11304 279C                        6C            .byte	$6C
11305 279D                        00            .byte	0
11306 279E                        00            .byte	0
11307 279F                        00            .byte	0
11308 27A0                        00            .byte	0
11309                                           ! 1445  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 27A1                        18            .byte	$18
11311 27A2                        18            .byte	$18
11312 27A3                        7C            .byte	$7C
11313 27A4                        C6            .byte	$C6
11314 27A5                        C2            .byte	$C2
11315 27A6                        C0            .byte	$C0
11316 27A7                        7C            .byte	$7C
11317 27A8                        06            .byte	6
11318 27A9                        06            .byte	6
11319 27AA                        86            .byte	$86
11320 27AB                        C6            .byte	$C6
11321 27AC                        7C            .byte	$7C
11322 27AD                        18            .byte	$18
11323 27AE                        18            .byte	$18
11324 27AF                        00            .byte	0
11325 27B0                        00            .byte	0
11326                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27B1                        00            .byte	0
11328 27B2                        00            .byte	0
11329 27B3                        00            .byte	0
11330 27B4                        00            .byte	0
11331 27B5                        C2            .byte	$C2
11332 27B6                        C6            .byte	$C6
11333 27B7                        0C            .byte	$C
11334 27B8                        18            .byte	$18
11335 27B9                        30            .byte	$30
11336 27BA                        60            .byte	$60
11337 27BB                        C6            .byte	$C6
11338 27BC                        86            .byte	$86
11339 27BD                        00            .byte	0
11340 27BE                        00            .byte	0
11341 27BF                        00            .byte	0
11342 27C0                        00            .byte	0
11343                                           ! 1447  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27C1                        00            .byte	0
11345 27C2                        00            .byte	0
11346 27C3                        38            .byte	$38
11347 27C4                        6C            .byte	$6C
11348 27C5                        6C            .byte	$6C
11349 27C6                        38            .byte	$38
11350 27C7                        76            .byte	$76
11351 27C8                        DC            .byte	$DC
11352 27C9                        CC            .byte	$CC
11353 27CA                        CC            .byte	$CC
11354 27CB                        CC            .byte	$CC
11355 27CC                        76            .byte	$76
11356 27CD                        00            .byte	0
11357 27CE                        00            .byte	0
11358 27CF                        00            .byte	0
11359 27D0                        00            .byte	0
11360                                           ! 1448  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27D1                        00            .byte	0
11362 27D2                        30            .byte	$30
11363 27D3                        30            .byte	$30
11364 27D4                        30            .byte	$30
11365 27D5                        60            .byte	$60
11366 27D6                        00            .byte	0
11367 27D7                        00            .byte	0
11368 27D8                        00            .byte	0
11369 27D9                        00            .byte	0
11370 27DA                        00            .byte	0
11371 27DB                        00            .byte	0
11372 27DC                        00            .byte	0
11373 27DD                        00            .byte	0
11374 27DE                        00            .byte	0
11375 27DF                        00            .byte	0
11376 27E0                        00            .byte	0
11377                                           ! 1449  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27E1                        00            .byte	0
11379 27E2                        00            .byte	0
11380 27E3                        0C            .byte	$C
11381 27E4                        18            .byte	$18
11382 27E5                        30            .byte	$30
11383 27E6                        30            .byte	$30
11384 27E7                        30            .byte	$30
11385 27E8                        30            .byte	$30
11386 27E9                        30            .byte	$30
11387 27EA                        30            .byte	$30
11388 27EB                        18            .byte	$18
11389 27EC                        0C            .byte	$C
11390 27ED                        00            .byte	0
11391 27EE                        00            .byte	0
11392 27EF                        00            .byte	0
11393 27F0                        00            .byte	0
11394                                           ! 1450  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27F1                        00            .byte	0
11396 27F2                        00            .byte	0
11397 27F3                        30            .byte	$30
11398 27F4                        18            .byte	$18
11399 27F5                        0C            .byte	$C
11400 27F6                        0C            .byte	$C
11401 27F7                        0C            .byte	$C
11402 27F8                        0C            .byte	$C
11403 27F9                        0C            .byte	$C
11404 27FA                        0C            .byte	$C
11405 27FB                        18            .byte	$18
11406 27FC                        30            .byte	$30
11407 27FD                        00            .byte	0
11408 27FE                        00            .byte	0
11409 27FF                        00            .byte	0
11410 2800                        00            .byte	0
11411                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 2801                        00            .byte	0
11413 2802                        00            .byte	0
11414 2803                        00            .byte	0
11415 2804                        00            .byte	0
11416 2805                        00            .byte	0
11417 2806                        66            .byte	$66
11418 2807                        3C            .byte	$3C
11419 2808                        FF            .byte	$FF
11420 2809                        3C            .byte	$3C
11421 280A                        66            .byte	$66
11422 280B                        00            .byte	0
11423 280C                        00            .byte	0
11424 280D                        00            .byte	0
11425 280E                        00            .byte	0
11426 280F                        00            .byte	0
11427 2810                        00            .byte	0
11428                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 2811                        00            .byte	0
11430 2812                        00            .byte	0
11431 2813                        00            .byte	0
11432 2814                        00            .byte	0
11433 2815                        00            .byte	0
11434 2816                        18            .byte	$18
11435 2817                        18            .byte	$18
11436 2818                        7E            .byte	$7E
11437 2819                        18            .byte	$18
11438 281A                        18            .byte	$18
11439 281B                        00            .byte	0
11440 281C                        00            .byte	0
11441 281D                        00            .byte	0
11442 281E                        00            .byte	0
11443 281F                        00            .byte	0
11444 2820                        00            .byte	0
11445                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 2821                        00            .byte	0
11447 2822                        00            .byte	0
11448 2823                        00            .byte	0
11449 2824                        00            .byte	0
11450 2825                        00            .byte	0
11451 2826                        00            .byte	0
11452 2827                        00            .byte	0
11453 2828                        00            .byte	0
11454 2829                        00            .byte	0
11455 282A                        18            .byte	$18
11456 282B                        18            .byte	$18
11457 282C                        18            .byte	$18
11458 282D                        30            .byte	$30
11459 282E                        00            .byte	0
11460 282F                        00            .byte	0
11461 2830                        00            .byte	0
11462                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 2831                        00            .byte	0
11464 2832                        00            .byte	0
11465 2833                        00            .byte	0
11466 2834                        00            .byte	0
11467 2835                        00            .byte	0
11468 2836                        00            .byte	0
11469 2837                        00            .byte	0
11470 2838                        FE            .byte	$FE
11471 2839                        00            .byte	0
11472 283A                        00            .byte	0
11473 283B                        00            .byte	0
11474 283C                        00            .byte	0
11475 283D                        00            .byte	0
11476 283E                        00            .byte	0
11477 283F                        00            .byte	0
11478 2840                        00            .byte	0
11479                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 2841                        00            .byte	0
11481 2842                        00            .byte	0
11482 2843                        00            .byte	0
11483 2844                        00            .byte	0
11484 2845                        00            .byte	0
11485 2846                        00            .byte	0
11486 2847                        00            .byte	0
11487 2848                        00            .byte	0
11488 2849                        00            .byte	0
11489 284A                        00            .byte	0
11490 284B                        18            .byte	$18
11491 284C                        18            .byte	$18
11492 284D                        00            .byte	0
11493 284E                        00            .byte	0
11494 284F                        00            .byte	0
11495 2850                        00            .byte	0
11496                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 2851                        00            .byte	0
11498 2852                        00            .byte	0
11499 2853                        00            .byte	0
11500 2854                        00            .byte	0
11501 2855                        02            .byte	2
11502 2856                        06            .byte	6
11503 2857                        0C            .byte	$C
11504 2858                        18            .byte	$18
11505 2859                        30            .byte	$30
11506 285A                        60            .byte	$60
11507 285B                        C0            .byte	$C0
11508 285C                        80            .byte	$80
11509 285D                        00            .byte	0
11510 285E                        00            .byte	0
11511 285F                        00            .byte	0
11512 2860                        00            .byte	0
11513                                           ! 1457  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 2861                        00            .byte	0
11515 2862                        00            .byte	0
11516 2863                        3C            .byte	$3C
11517 2864                        66            .byte	$66
11518 2865                        C3            .byte	$C3
11519 2866                        C3            .byte	$C3
11520 2867                        DB            .byte	$DB
11521 2868                        DB            .byte	$DB
11522 2869                        C3            .byte	$C3
11523 286A                        C3            .byte	$C3
11524 286B                        66            .byte	$66
11525 286C                        3C            .byte	$3C
11526 286D                        00            .byte	0
11527 286E                        00            .byte	0
11528 286F                        00            .byte	0
11529 2870                        00            .byte	0
11530                                           ! 1458  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 2871                        00            .byte	0
11532 2872                        00            .byte	0
11533 2873                        18            .byte	$18
11534 2874                        38            .byte	$38
11535 2875                        78            .byte	$78
11536 2876                        18            .byte	$18
11537 2877                        18            .byte	$18
11538 2878                        18            .byte	$18
11539 2879                        18            .byte	$18
11540 287A                        18            .byte	$18
11541 287B                        18            .byte	$18
11542 287C                        7E            .byte	$7E
11543 287D                        00            .byte	0
11544 287E                        00            .byte	0
11545 287F                        00            .byte	0
11546 2880                        00            .byte	0
11547                                           ! 1459  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 2881                        00            .byte	0
11549 2882                        00            .byte	0
11550 2883                        7C            .byte	$7C
11551 2884                        C6            .byte	$C6
11552 2885                        06            .byte	6
11553 2886                        0C            .byte	$C
11554 2887                        18            .byte	$18
11555 2888                        30            .byte	$30
11556 2889                        60            .byte	$60
11557 288A                        C0            .byte	$C0
11558 288B                        C6            .byte	$C6
11559 288C                        FE            .byte	$FE
11560 288D                        00            .byte	0
11561 288E                        00            .byte	0
11562 288F                        00            .byte	0
11563 2890                        00            .byte	0
11564                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 2891                        00            .byte	0
11566 2892                        00            .byte	0
11567 2893                        7C            .byte	$7C
11568 2894                        C6            .byte	$C6
11569 2895                        06            .byte	6
11570 2896                        06            .byte	6
11571 2897                        3C            .byte	$3C
11572 2898                        06            .byte	6
11573 2899                        06            .byte	6
11574 289A                        06            .byte	6
11575 289B                        C6            .byte	$C6
11576 289C                        7C            .byte	$7C
11577 289D                        00            .byte	0
11578 289E                        00            .byte	0
11579 289F                        00            .byte	0
11580 28A0                        00            .byte	0
11581                                           ! 1461  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 28A1                        00            .byte	0
11583 28A2                        00            .byte	0
11584 28A3                        0C            .byte	$C
11585 28A4                        1C            .byte	$1C
11586 28A5                        3C            .byte	$3C
11587 28A6                        6C            .byte	$6C
11588 28A7                        CC            .byte	$CC
11589 28A8                        FE            .byte	$FE
11590 28A9                        0C            .byte	$C
11591 28AA                        0C            .byte	$C
11592 28AB                        0C            .byte	$C
11593 28AC                        1E            .byte	$1E
11594 28AD                        00            .byte	0
11595 28AE                        00            .byte	0
11596 28AF                        00            .byte	0
11597 28B0                        00            .byte	0
11598                                           ! 1462  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11599 28B1                        00            .byte	0
11600 28B2                        00            .byte	0
11601 28B3                        FE            .byte	$FE
11602 28B4                        C0            .byte	$C0
11603 28B5                        C0            .byte	$C0
11604 28B6                        C0            .byte	$C0
11605 28B7                        FC            .byte	$FC
11606 28B8                        06            .byte	6
11607 28B9                        06            .byte	6
11608 28BA                        06            .byte	6
11609 28BB                        C6            .byte	$C6
11610 28BC                        7C            .byte	$7C
11611 28BD                        00            .byte	0
11612 28BE                        00            .byte	0
11613 28BF                        00            .byte	0
11614 28C0                        00            .byte	0
11615                                           ! 1463  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
11616 28C1                        00            .byte	0
11617 28C2                        00            .byte	0
11618 28C3                        38            .byte	$38
11619 28C4                        60            .byte	$60
11620 28C5                        C0            .byte	$C0
11621 28C6                        C0            .byte	$C0
11622 28C7                        FC            .byte	$FC
11623 28C8                        C6            .byte	$C6
11624 28C9                        C6            .byte	$C6
11625 28CA                        C6            .byte	$C6
11626 28CB                        C6            .byte	$C6
11627 28CC                        7C            .byte	$7C
11628                                           ! 1463  0x00, 0x00, 0x00,
11629 28CD                        00            .byte	0
11630 28CE                        00            .byte	0
11631 28CF                        00            .byte	0
11632 28D0                        00            .byte	0
11633                                           ! 1464  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28D1                        00            .byte	0
11635 28D2                        00            .byte	0
11636 28D3                        FE            .byte	$FE
11637 28D4                        C6            .byte	$C6
11638 28D5                        06            .byte	6
11639 28D6                        06            .byte	6
11640 28D7                        0C            .byte	$C
11641 28D8                        18            .byte	$18
11642 28D9                        30            .byte	$30
11643 28DA                        30            .byte	$30
11644 28DB                        30            .byte	$30
11645 28DC                        30            .byte	$30
11646 28DD                        00            .byte	0
11647 28DE                        00            .byte	0
11648 28DF                        00            .byte	0
11649 28E0                        00            .byte	0
11650                                           ! 1465  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28E1                        00            .byte	0
11652 28E2                        00            .byte	0
11653 28E3                        7C            .byte	$7C
11654 28E4                        C6            .byte	$C6
11655 28E5                        C6            .byte	$C6
11656 28E6                        C6            .byte	$C6
11657 28E7                        7C            .byte	$7C
11658 28E8                        C6            .byte	$C6
11659 28E9                        C6            .byte	$C6
11660 28EA                        C6            .byte	$C6
11661 28EB                        C6            .byte	$C6
11662 28EC                        7C            .byte	$7C
11663 28ED                        00            .byte	0
11664 28EE                        00            .byte	0
11665 28EF                        00            .byte	0
11666 28F0                        00            .byte	0
11667                                           ! 1466  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28F1                        00            .byte	0
11669 28F2                        00            .byte	0
11670 28F3                        7C            .byte	$7C
11671 28F4                        C6            .byte	$C6
11672 28F5                        C6            .byte	$C6
11673 28F6                        C6            .byte	$C6
11674 28F7                        7E            .byte	$7E
11675 28F8                        06            .byte	6
11676 28F9                        06            .byte	6
11677 28FA                        06            .byte	6
11678 28FB                        0C            .byte	$C
11679 28FC                        78            .byte	$78
11680 28FD                        00            .byte	0
11681 28FE                        00            .byte	0
11682 28FF                        00            .byte	0
11683 2900                        00            .byte	0
11684                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 2901                        00            .byte	0
11686 2902                        00            .byte	0
11687 2903                        00            .byte	0
11688 2904                        00            .byte	0
11689 2905                        18            .byte	$18
11690 2906                        18            .byte	$18
11691 2907                        00            .byte	0
11692 2908                        00            .byte	0
11693 2909                        00            .byte	0
11694 290A                        18            .byte	$18
11695 290B                        18            .byte	$18
11696 290C                        00            .byte	0
11697 290D                        00            .byte	0
11698 290E                        00            .byte	0
11699 290F                        00            .byte	0
11700 2910                        00            .byte	0
11701                                           ! 1468  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 2911                        00            .byte	0
11703 2912                        00            .byte	0
11704 2913                        00            .byte	0
11705 2914                        00            .byte	0
11706 2915                        18            .byte	$18
11707 2916                        18            .byte	$18
11708 2917                        00            .byte	0
11709 2918                        00            .byte	0
11710 2919                        00            .byte	0
11711 291A                        18            .byte	$18
11712 291B                        18            .byte	$18
11713 291C                        30            .byte	$30
11714 291D                        00            .byte	0
11715 291E                        00            .byte	0
11716 291F                        00            .byte	0
11717 2920                        00            .byte	0
11718                                           ! 1469  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 2921                        00            .byte	0
11720 2922                        00            .byte	0
11721 2923                        00            .byte	0
11722 2924                        06            .byte	6
11723 2925                        0C            .byte	$C
11724 2926                        18            .byte	$18
11725 2927                        30            .byte	$30
11726 2928                        60            .byte	$60
11727 2929                        30            .byte	$30
11728 292A                        18            .byte	$18
11729 292B                        0C            .byte	$C
11730 292C                        06            .byte	6
11731 292D                        00            .byte	0
11732 292E                        00            .byte	0
11733 292F                        00            .byte	0
11734 2930                        00            .byte	0
11735                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 2931                        00            .byte	0
11737 2932                        00            .byte	0
11738 2933                        00            .byte	0
11739 2934                        00            .byte	0
11740 2935                        00            .byte	0
11741 2936                        7E            .byte	$7E
11742 2937                        00            .byte	0
11743 2938                        00            .byte	0
11744 2939                        7E            .byte	$7E
11745 293A                        00            .byte	0
11746 293B                        00            .byte	0
11747 293C                        00            .byte	0
11748 293D                        00            .byte	0
11749 293E                        00            .byte	0
11750 293F                        00            .byte	0
11751 2940                        00            .byte	0
11752                                           ! 1471  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 2941                        00            .byte	0
11754 2942                        00            .byte	0
11755 2943                        00            .byte	0
11756 2944                        60            .byte	$60
11757 2945                        30            .byte	$30
11758 2946                        18            .byte	$18
11759 2947                        0C            .byte	$C
11760 2948                        06            .byte	6
11761 2949                        0C            .byte	$C
11762 294A                        18            .byte	$18
11763 294B                        30            .byte	$30
11764 294C                        60            .byte	$60
11765 294D                        00            .byte	0
11766 294E                        00            .byte	0
11767 294F                        00            .byte	0
11768 2950                        00            .byte	0
11769                                           ! 1472  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 2951                        00            .byte	0
11771 2952                        00            .byte	0
11772 2953                        7C            .byte	$7C
11773 2954                        C6            .byte	$C6
11774 2955                        C6            .byte	$C6
11775 2956                        0C            .byte	$C
11776 2957                        18            .byte	$18
11777 2958                        18            .byte	$18
11778 2959                        18            .byte	$18
11779 295A                        00            .byte	0
11780 295B                        18            .byte	$18
11781 295C                        18            .byte	$18
11782 295D                        00            .byte	0
11783 295E                        00            .byte	0
11784 295F                        00            .byte	0
11785 2960                        00            .byte	0
11786                                           ! 1473  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 2961                        00            .byte	0
11788 2962                        00            .byte	0
11789 2963                        00            .byte	0
11790 2964                        7C            .byte	$7C
11791 2965                        C6            .byte	$C6
11792 2966                        C6            .byte	$C6
11793 2967                        DE            .byte	$DE
11794 2968                        DE            .byte	$DE
11795 2969                        DE            .byte	$DE
11796 296A                        DC            .byte	$DC
11797 296B                        C0            .byte	$C0
11798 296C                        7C            .byte	$7C
11799 296D                        00            .byte	0
11800 296E                        00            .byte	0
11801 296F                        00            .byte	0
11802 2970                        00            .byte	0
11803                                           ! 1474  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 2971                        00            .byte	0
11805 2972                        00            .byte	0
11806 2973                        10            .byte	$10
11807 2974                        38            .byte	$38
11808 2975                        6C            .byte	$6C
11809 2976                        C6            .byte	$C6
11810 2977                        C6            .byte	$C6
11811 2978                        FE            .byte	$FE
11812 2979                        C6            .byte	$C6
11813 297A                        C6            .byte	$C6
11814 297B                        C6            .byte	$C6
11815 297C                        C6            .byte	$C6
11816 297D                        00            .byte	0
11817 297E                        00            .byte	0
11818 297F                        00            .byte	0
11819 2980                        00            .byte	0
11820                                           ! 1475  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 2981                        00            .byte	0
11822 2982                        00            .byte	0
11823 2983                        FC            .byte	$FC
11824 2984                        66            .byte	$66
11825 2985                        66            .byte	$66
11826 2986                        66            .byte	$66
11827 2987                        7C            .byte	$7C
11828 2988                        66            .byte	$66
11829 2989                        66            .byte	$66
11830 298A                        66            .byte	$66
11831 298B                        66            .byte	$66
11832 298C                        FC            .byte	$FC
11833 298D                        00            .byte	0
11834 298E                        00            .byte	0
11835 298F                        00            .byte	0
11836 2990                        00            .byte	0
11837                                           ! 1476  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 2991                        00            .byte	0
11839 2992                        00            .byte	0
11840 2993                        3C            .byte	$3C
11841 2994                        66            .byte	$66
11842 2995                        C2            .byte	$C2
11843 2996                        C0            .byte	$C0
11844 2997                        C0            .byte	$C0
11845 2998                        C0            .byte	$C0
11846 2999                        C0            .byte	$C0
11847 299A                        C2            .byte	$C2
11848 299B                        66            .byte	$66
11849 299C                        3C            .byte	$3C
11850 299D                        00            .byte	0
11851 299E                        00            .byte	0
11852 299F                        00            .byte	0
11853 29A0                        00            .byte	0
11854                                           ! 1477  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 29A1                        00            .byte	0
11856 29A2                        00            .byte	0
11857 29A3                        F8            .byte	$F8
11858 29A4                        6C            .byte	$6C
11859 29A5                        66            .byte	$66
11860 29A6                        66            .byte	$66
11861 29A7                        66            .byte	$66
11862 29A8                        66            .byte	$66
11863 29A9                        66            .byte	$66
11864 29AA                        66            .byte	$66
11865 29AB                        6C            .byte	$6C
11866 29AC                        F8            .byte	$F8
11867 29AD                        00            .byte	0
11868 29AE                        00            .byte	0
11869 29AF                        00            .byte	0
11870 29B0                        00            .byte	0
11871                                           ! 1478  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29B1                        00            .byte	0
11873 29B2                        00            .byte	0
11874 29B3                        FE            .byte	$FE
11875 29B4                        66            .byte	$66
11876 29B5                        62            .byte	$62
11877 29B6                        68            .byte	$68
11878 29B7                        78            .byte	$78
11879 29B8                        68            .byte	$68
11880 29B9                        60            .byte	$60
11881 29BA                        62            .byte	$62
11882 29BB                        66            .byte	$66
11883 29BC                        FE            .byte	$FE
11884 29BD                        00            .byte	0
11885 29BE                        00            .byte	0
11886 29BF                        00            .byte	0
11887 29C0                        00            .byte	0
11888                                           ! 1479  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29C1                        00            .byte	0
11890 29C2                        00            .byte	0
11891 29C3                        FE            .byte	$FE
11892 29C4                        66            .byte	$66
11893 29C5                        62            .byte	$62
11894 29C6                        68            .byte	$68
11895 29C7                        78            .byte	$78
11896 29C8                        68            .byte	$68
11897 29C9                        60            .byte	$60
11898 29CA                        60            .byte	$60
11899 29CB                        60            .byte	$60
11900 29CC                        F0            .byte	$F0
11901 29CD                        00            .byte	0
11902 29CE                        00            .byte	0
11903 29CF                        00            .byte	0
11904 29D0                        00            .byte	0
11905                                           ! 1480  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29D1                        00            .byte	0
11907 29D2                        00            .byte	0
11908 29D3                        3C            .byte	$3C
11909 29D4                        66            .byte	$66
11910 29D5                        C2            .byte	$C2
11911 29D6                        C0            .byte	$C0
11912 29D7                        C0            .byte	$C0
11913 29D8                        DE            .byte	$DE
11914 29D9                        C6            .byte	$C6
11915 29DA                        C6            .byte	$C6
11916 29DB                        66            .byte	$66
11917 29DC                        3A            .byte	$3A
11918 29DD                        00            .byte	0
11919 29DE                        00            .byte	0
11920 29DF                        00            .byte	0
11921 29E0                        00            .byte	0
11922                                           ! 1481  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29E1                        00            .byte	0
11924 29E2                        00            .byte	0
11925 29E3                        C6            .byte	$C6
11926 29E4                        C6            .byte	$C6
11927 29E5                        C6            .byte	$C6
11928 29E6                        C6            .byte	$C6
11929 29E7                        FE            .byte	$FE
11930 29E8                        C6            .byte	$C6
11931 29E9                        C6            .byte	$C6
11932 29EA                        C6            .byte	$C6
11933 29EB                        C6            .byte	$C6
11934 29EC                        C6            .byte	$C6
11935 29ED                        00            .byte	0
11936 29EE                        00            .byte	0
11937 29EF                        00            .byte	0
11938 29F0                        00            .byte	0
11939                                           ! 1482  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29F1                        00            .byte	0
11941 29F2                        00            .byte	0
11942 29F3                        3C            .byte	$3C
11943 29F4                        18            .byte	$18
11944 29F5                        18            .byte	$18
11945 29F6                        18            .byte	$18
11946 29F7                        18            .byte	$18
11947 29F8                        18            .byte	$18
11948 29F9                        18            .byte	$18
11949 29FA                        18            .byte	$18
11950 29FB                        18            .byte	$18
11951 29FC                        3C            .byte	$3C
11952 29FD                        00            .byte	0
11953 29FE                        00            .byte	0
11954 29FF                        00            .byte	0
11955 2A00                        00            .byte	0
11956                                           ! 1483  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11957 2A01                        00            .byte	0
11958 2A02                        00            .byte	0
11959 2A03                        1E            .byte	$1E
11960 2A04                        0C            .byte	$C
11961 2A05                        0C            .byte	$C
11962 2A06                        0C            .byte	$C
11963 2A07                        0C            .byte	$C
11964 2A08                        0C            .byte	$C
11965 2A09                        CC            .byte	$CC
11966 2A0A                        CC            .byte	$CC
11967 2A0B                        CC            .byte	$CC
11968 2A0C                        78            .byte	$78
11969 2A0D                        00            .byte	0
11970 2A0E                        00            .byte	0
11971 2A0F                        00            .byte	0
11972 2A10                        00            .byte	0
11973                                           ! 1484  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00
11974 2A11                        00            .byte	0
11975 2A12                        00            .byte	0
11976 2A13                        E6            .byte	$E6
11977 2A14                        66            .byte	$66
11978 2A15                        66            .byte	$66
11979 2A16                        6C            .byte	$6C
11980 2A17                        78            .byte	$78
11981 2A18                        78            .byte	$78
11982 2A19                        6C            .byte	$6C
11983 2A1A                        66            .byte	$66
11984 2A1B                        66            .byte	$66
11985 2A1C                        E6            .byte	$E6
11986 2A1D                        00            .byte	0
11987 2A1E                        00            .byte	0
11988                                           ! 1484 , 0x00,
11989 2A1F                        00            .byte	0
11990 2A20                        00            .byte	0
11991                                           ! 1485  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A21                        00            .byte	0
11993 2A22                        00            .byte	0
11994 2A23                        F0            .byte	$F0
11995 2A24                        60            .byte	$60
11996 2A25                        60            .byte	$60
11997 2A26                        60            .byte	$60
11998 2A27                        60            .byte	$60
11999 2A28                        60            .byte	$60
12000 2A29                        60            .byte	$60
12001 2A2A                        62            .byte	$62
12002 2A2B                        66            .byte	$66
12003 2A2C                        FE            .byte	$FE
12004 2A2D                        00            .byte	0
12005 2A2E                        00            .byte	0
12006 2A2F                        00            .byte	0
12007 2A30                        00            .byte	0
12008                                           ! 1486  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A31                        00            .byte	0
12010 2A32                        00            .byte	0
12011 2A33                        C3            .byte	$C3
12012 2A34                        E7            .byte	$E7
12013 2A35                        FF            .byte	$FF
12014 2A36                        FF            .byte	$FF
12015 2A37                        DB            .byte	$DB
12016 2A38                        C3            .byte	$C3
12017 2A39                        C3            .byte	$C3
12018 2A3A                        C3            .byte	$C3
12019 2A3B                        C3            .byte	$C3
12020 2A3C                        C3            .byte	$C3
12021 2A3D                        00            .byte	0
12022 2A3E                        00            .byte	0
12023 2A3F                        00            .byte	0
12024 2A40                        00            .byte	0
12025                                           ! 1487  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A41                        00            .byte	0
12027 2A42                        00            .byte	0
12028 2A43                        C6            .byte	$C6
12029 2A44                        E6            .byte	$E6
12030 2A45                        F6            .byte	$F6
12031 2A46                        FE            .byte	$FE
12032 2A47                        DE            .byte	$DE
12033 2A48                        CE            .byte	$CE
12034 2A49                        C6            .byte	$C6
12035 2A4A                        C6            .byte	$C6
12036 2A4B                        C6            .byte	$C6
12037 2A4C                        C6            .byte	$C6
12038 2A4D                        00            .byte	0
12039 2A4E                        00            .byte	0
12040 2A4F                        00            .byte	0
12041 2A50                        00            .byte	0
12042                                           ! 1488  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A51                        00            .byte	0
12044 2A52                        00            .byte	0
12045 2A53                        7C            .byte	$7C
12046 2A54                        C6            .byte	$C6
12047 2A55                        C6            .byte	$C6
12048 2A56                        C6            .byte	$C6
12049 2A57                        C6            .byte	$C6
12050 2A58                        C6            .byte	$C6
12051 2A59                        C6            .byte	$C6
12052 2A5A                        C6            .byte	$C6
12053 2A5B                        C6            .byte	$C6
12054 2A5C                        7C            .byte	$7C
12055 2A5D                        00            .byte	0
12056 2A5E                        00            .byte	0
12057 2A5F                        00            .byte	0
12058 2A60                        00            .byte	0
12059                                           ! 1489  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A61                        00            .byte	0
12061 2A62                        00            .byte	0
12062 2A63                        FC            .byte	$FC
12063 2A64                        66            .byte	$66
12064 2A65                        66            .byte	$66
12065 2A66                        66            .byte	$66
12066 2A67                        7C            .byte	$7C
12067 2A68                        60            .byte	$60
12068 2A69                        60            .byte	$60
12069 2A6A                        60            .byte	$60
12070 2A6B                        60            .byte	$60
12071 2A6C                        F0            .byte	$F0
12072 2A6D                        00            .byte	0
12073 2A6E                        00            .byte	0
12074 2A6F                        00            .byte	0
12075 2A70                        00            .byte	0
12076                                           ! 1490  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A71                        00            .byte	0
12078 2A72                        00            .byte	0
12079 2A73                        7C            .byte	$7C
12080 2A74                        C6            .byte	$C6
12081 2A75                        C6            .byte	$C6
12082 2A76                        C6            .byte	$C6
12083 2A77                        C6            .byte	$C6
12084 2A78                        C6            .byte	$C6
12085 2A79                        C6            .byte	$C6
12086 2A7A                        D6            .byte	$D6
12087 2A7B                        DE            .byte	$DE
12088 2A7C                        7C            .byte	$7C
12089 2A7D                        0C            .byte	$C
12090 2A7E                        0E            .byte	$E
12091 2A7F                        00            .byte	0
12092 2A80                        00            .byte	0
12093                                           ! 1491  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A81                        00            .byte	0
12095 2A82                        00            .byte	0
12096 2A83                        FC            .byte	$FC
12097 2A84                        66            .byte	$66
12098 2A85                        66            .byte	$66
12099 2A86                        66            .byte	$66
12100 2A87                        7C            .byte	$7C
12101 2A88                        6C            .byte	$6C
12102 2A89                        66            .byte	$66
12103 2A8A                        66            .byte	$66
12104 2A8B                        66            .byte	$66
12105 2A8C                        E6            .byte	$E6
12106 2A8D                        00            .byte	0
12107 2A8E                        00            .byte	0
12108 2A8F                        00            .byte	0
12109 2A90                        00            .byte	0
12110                                           ! 1492  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A91                        00            .byte	0
12112 2A92                        00            .byte	0
12113 2A93                        7C            .byte	$7C
12114 2A94                        C6            .byte	$C6
12115 2A95                        C6            .byte	$C6
12116 2A96                        60            .byte	$60
12117 2A97                        38            .byte	$38
12118 2A98                        0C            .byte	$C
12119 2A99                        06            .byte	6
12120 2A9A                        C6            .byte	$C6
12121 2A9B                        C6            .byte	$C6
12122 2A9C                        7C            .byte	$7C
12123 2A9D                        00            .byte	0
12124 2A9E                        00            .byte	0
12125 2A9F                        00            .byte	0
12126 2AA0                        00            .byte	0
12127                                           ! 1493  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2AA1                        00            .byte	0
12129 2AA2                        00            .byte	0
12130 2AA3                        FF            .byte	$FF
12131 2AA4                        DB            .byte	$DB
12132 2AA5                        99            .byte	$99
12133 2AA6                        18            .byte	$18
12134 2AA7                        18            .byte	$18
12135 2AA8                        18            .byte	$18
12136 2AA9                        18            .byte	$18
12137 2AAA                        18            .byte	$18
12138 2AAB                        18            .byte	$18
12139 2AAC                        3C            .byte	$3C
12140 2AAD                        00            .byte	0
12141 2AAE                        00            .byte	0
12142 2AAF                        00            .byte	0
12143 2AB0                        00            .byte	0
12144                                           ! 1494  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2AB1                        00            .byte	0
12146 2AB2                        00            .byte	0
12147 2AB3                        C6            .byte	$C6
12148 2AB4                        C6            .byte	$C6
12149 2AB5                        C6            .byte	$C6
12150 2AB6                        C6            .byte	$C6
12151 2AB7                        C6            .byte	$C6
12152 2AB8                        C6            .byte	$C6
12153 2AB9                        C6            .byte	$C6
12154 2ABA                        C6            .byte	$C6
12155 2ABB                        C6            .byte	$C6
12156 2ABC                        7C            .byte	$7C
12157 2ABD                        00            .byte	0
12158 2ABE                        00            .byte	0
12159 2ABF                        00            .byte	0
12160 2AC0                        00            .byte	0
12161                                           ! 1495  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2AC1                        00            .byte	0
12163 2AC2                        00            .byte	0
12164 2AC3                        C3            .byte	$C3
12165 2AC4                        C3            .byte	$C3
12166 2AC5                        C3            .byte	$C3
12167 2AC6                        C3            .byte	$C3
12168 2AC7                        C3            .byte	$C3
12169 2AC8                        C3            .byte	$C3
12170 2AC9                        C3            .byte	$C3
12171 2ACA                        66            .byte	$66
12172 2ACB                        3C            .byte	$3C
12173 2ACC                        18            .byte	$18
12174 2ACD                        00            .byte	0
12175 2ACE                        00            .byte	0
12176 2ACF                        00            .byte	0
12177 2AD0                        00            .byte	0
12178                                           ! 1496  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2AD1                        00            .byte	0
12180 2AD2                        00            .byte	0
12181 2AD3                        C3            .byte	$C3
12182 2AD4                        C3            .byte	$C3
12183 2AD5                        C3            .byte	$C3
12184 2AD6                        C3            .byte	$C3
12185 2AD7                        C3            .byte	$C3
12186 2AD8                        DB            .byte	$DB
12187 2AD9                        DB            .byte	$DB
12188 2ADA                        FF            .byte	$FF
12189 2ADB                        66            .byte	$66
12190 2ADC                        66            .byte	$66
12191 2ADD                        00            .byte	0
12192 2ADE                        00            .byte	0
12193 2ADF                        00            .byte	0
12194 2AE0                        00            .byte	0
12195                                           ! 1497  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2AE1                        00            .byte	0
12197 2AE2                        00            .byte	0
12198 2AE3                        C3            .byte	$C3
12199 2AE4                        C3            .byte	$C3
12200 2AE5                        66            .byte	$66
12201 2AE6                        3C            .byte	$3C
12202 2AE7                        18            .byte	$18
12203 2AE8                        18            .byte	$18
12204 2AE9                        3C            .byte	$3C
12205 2AEA                        66            .byte	$66
12206 2AEB                        C3            .byte	$C3
12207 2AEC                        C3            .byte	$C3
12208 2AED                        00            .byte	0
12209 2AEE                        00            .byte	0
12210 2AEF                        00            .byte	0
12211 2AF0                        00            .byte	0
12212                                           ! 1498  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AF1                        00            .byte	0
12214 2AF2                        00            .byte	0
12215 2AF3                        C3            .byte	$C3
12216 2AF4                        C3            .byte	$C3
12217 2AF5                        C3            .byte	$C3
12218 2AF6                        66            .byte	$66
12219 2AF7                        3C            .byte	$3C
12220 2AF8                        18            .byte	$18
12221 2AF9                        18            .byte	$18
12222 2AFA                        18            .byte	$18
12223 2AFB                        18            .byte	$18
12224 2AFC                        3C            .byte	$3C
12225 2AFD                        00            .byte	0
12226 2AFE                        00            .byte	0
12227 2AFF                        00            .byte	0
12228 2B00                        00            .byte	0
12229                                           ! 1499  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2B01                        00            .byte	0
12231 2B02                        00            .byte	0
12232 2B03                        FF            .byte	$FF
12233 2B04                        C3            .byte	$C3
12234 2B05                        86            .byte	$86
12235 2B06                        0C            .byte	$C
12236 2B07                        18            .byte	$18
12237 2B08                        30            .byte	$30
12238 2B09                        60            .byte	$60
12239 2B0A                        C1            .byte	$C1
12240 2B0B                        C3            .byte	$C3
12241 2B0C                        FF            .byte	$FF
12242 2B0D                        00            .byte	0
12243 2B0E                        00            .byte	0
12244 2B0F                        00            .byte	0
12245 2B10                        00            .byte	0
12246                                           ! 1500  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B11                        00            .byte	0
12248 2B12                        00            .byte	0
12249 2B13                        3C            .byte	$3C
12250 2B14                        30            .byte	$30
12251 2B15                        30            .byte	$30
12252 2B16                        30            .byte	$30
12253 2B17                        30            .byte	$30
12254 2B18                        30            .byte	$30
12255 2B19                        30            .byte	$30
12256 2B1A                        30            .byte	$30
12257 2B1B                        30            .byte	$30
12258 2B1C                        3C            .byte	$3C
12259 2B1D                        00            .byte	0
12260 2B1E                        00            .byte	0
12261 2B1F                        00            .byte	0
12262 2B20                        00            .byte	0
12263                                           ! 1501  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B21                        00            .byte	0
12265 2B22                        00            .byte	0
12266 2B23                        00            .byte	0
12267 2B24                        80            .byte	$80
12268 2B25                        C0            .byte	$C0
12269 2B26                        E0            .byte	$E0
12270 2B27                        70            .byte	$70
12271 2B28                        38            .byte	$38
12272 2B29                        1C            .byte	$1C
12273 2B2A                        0E            .byte	$E
12274 2B2B                        06            .byte	6
12275 2B2C                        02            .byte	2
12276 2B2D                        00            .byte	0
12277 2B2E                        00            .byte	0
12278 2B2F                        00            .byte	0
12279 2B30                        00            .byte	0
12280                                           ! 1502  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B31                        00            .byte	0
12282 2B32                        00            .byte	0
12283 2B33                        3C            .byte	$3C
12284 2B34                        0C            .byte	$C
12285 2B35                        0C            .byte	$C
12286 2B36                        0C            .byte	$C
12287 2B37                        0C            .byte	$C
12288 2B38                        0C            .byte	$C
12289 2B39                        0C            .byte	$C
12290 2B3A                        0C            .byte	$C
12291 2B3B                        0C            .byte	$C
12292 2B3C                        3C            .byte	$3C
12293 2B3D                        00            .byte	0
12294 2B3E                        00            .byte	0
12295 2B3F                        00            .byte	0
12296 2B40                        00            .byte	0
12297                                           ! 1503  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B41                        10            .byte	$10
12299 2B42                        38            .byte	$38
12300 2B43                        6C            .byte	$6C
12301 2B44                        C6            .byte	$C6
12302 2B45                        00            .byte	0
12303 2B46                        00            .byte	0
12304 2B47                        00            .byte	0
12305 2B48                        00            .byte	0
12306 2B49                        00            .byte	0
12307 2B4A                        00            .byte	0
12308 2B4B                        00            .byte	0
12309 2B4C                        00            .byte	0
12310 2B4D                        00            .byte	0
12311 2B4E                        00            .byte	0
12312 2B4F                        00            .byte	0
12313 2B50                        00            .byte	0
12314                                           ! 1504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B51                        00            .byte	0
12316 2B52                        00            .byte	0
12317 2B53                        00            .byte	0
12318 2B54                        00            .byte	0
12319 2B55                        00            .byte	0
12320 2B56                        00            .byte	0
12321 2B57                        00            .byte	0
12322 2B58                        00            .byte	0
12323 2B59                        00            .byte	0
12324 2B5A                        00            .byte	0
12325 2B5B                        00            .byte	0
12326 2B5C                        00            .byte	0
12327 2B5D                        00            .byte	0
12328 2B5E                        FF            .byte	$FF
12329 2B5F                        00            .byte	0
12330 2B60                        00            .byte	0
12331                                           ! 1505  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12332 2B61                        30            .byte	$30
12333 2B62                        30            .byte	$30
12334 2B63                        18            .byte	$18
12335 2B64                        00            .byte	0
12336 2B65                        00            .byte	0
12337 2B66                        00            .byte	0
12338 2B67                        00            .byte	0
12339 2B68                        00            .byte	0
12340 2B69                        00            .byte	0
12341 2B6A                        00            .byte	0
12342 2B6B                        00            .byte	0
12343 2B6C                        00            .byte	0
12344 2B6D                        00            .byte	0
12345 2B6E                        00            .byte	0
12346 2B6F                        00            .byte	0
12347 2B70                        00            .byte	0
12348                                           ! 1506  0x
12349                                           ! 1506 00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12350 2B71                        00            .byte	0
12351 2B72                        00            .byte	0
12352 2B73                        00            .byte	0
12353 2B74                        00            .byte	0
12354 2B75                        00            .byte	0
12355 2B76                        78            .byte	$78
12356 2B77                        0C            .byte	$C
12357 2B78                        7C            .byte	$7C
12358 2B79                        CC            .byte	$CC
12359 2B7A                        CC            .byte	$CC
12360 2B7B                        CC            .byte	$CC
12361 2B7C                        76            .byte	$76
12362 2B7D                        00            .byte	0
12363 2B7E                        00            .byte	0
12364 2B7F                        00            .byte	0
12365 2B80                        00            .byte	0
12366                                           ! 1507  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B81                        00            .byte	0
12368 2B82                        00            .byte	0
12369 2B83                        E0            .byte	$E0
12370 2B84                        60            .byte	$60
12371 2B85                        60            .byte	$60
12372 2B86                        78            .byte	$78
12373 2B87                        6C            .byte	$6C
12374 2B88                        66            .byte	$66
12375 2B89                        66            .byte	$66
12376 2B8A                        66            .byte	$66
12377 2B8B                        66            .byte	$66
12378 2B8C                        7C            .byte	$7C
12379 2B8D                        00            .byte	0
12380 2B8E                        00            .byte	0
12381 2B8F                        00            .byte	0
12382 2B90                        00            .byte	0
12383                                           ! 1508  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B91                        00            .byte	0
12385 2B92                        00            .byte	0
12386 2B93                        00            .byte	0
12387 2B94                        00            .byte	0
12388 2B95                        00            .byte	0
12389 2B96                        7C            .byte	$7C
12390 2B97                        C6            .byte	$C6
12391 2B98                        C0            .byte	$C0
12392 2B99                        C0            .byte	$C0
12393 2B9A                        C0            .byte	$C0
12394 2B9B                        C6            .byte	$C6
12395 2B9C                        7C            .byte	$7C
12396 2B9D                        00            .byte	0
12397 2B9E                        00            .byte	0
12398 2B9F                        00            .byte	0
12399 2BA0                        00            .byte	0
12400                                           ! 1509  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2BA1                        00            .byte	0
12402 2BA2                        00            .byte	0
12403 2BA3                        1C            .byte	$1C
12404 2BA4                        0C            .byte	$C
12405 2BA5                        0C            .byte	$C
12406 2BA6                        3C            .byte	$3C
12407 2BA7                        6C            .byte	$6C
12408 2BA8                        CC            .byte	$CC
12409 2BA9                        CC            .byte	$CC
12410 2BAA                        CC            .byte	$CC
12411 2BAB                        CC            .byte	$CC
12412 2BAC                        76            .byte	$76
12413 2BAD                        00            .byte	0
12414 2BAE                        00            .byte	0
12415 2BAF                        00            .byte	0
12416 2BB0                        00            .byte	0
12417                                           ! 1510  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BB1                        00            .byte	0
12419 2BB2                        00            .byte	0
12420 2BB3                        00            .byte	0
12421 2BB4                        00            .byte	0
12422 2BB5                        00            .byte	0
12423 2BB6                        7C            .byte	$7C
12424 2BB7                        C6            .byte	$C6
12425 2BB8                        FE            .byte	$FE
12426 2BB9                        C0            .byte	$C0
12427 2BBA                        C0            .byte	$C0
12428 2BBB                        C6            .byte	$C6
12429 2BBC                        7C            .byte	$7C
12430 2BBD                        00            .byte	0
12431 2BBE                        00            .byte	0
12432 2BBF                        00            .byte	0
12433 2BC0                        00            .byte	0
12434                                           ! 1511  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BC1                        00            .byte	0
12436 2BC2                        00            .byte	0
12437 2BC3                        38            .byte	$38
12438 2BC4                        6C            .byte	$6C
12439 2BC5                        64            .byte	$64
12440 2BC6                        60            .byte	$60
12441 2BC7                        F0            .byte	$F0
12442 2BC8                        60            .byte	$60
12443 2BC9                        60            .byte	$60
12444 2BCA                        60            .byte	$60
12445 2BCB                        60            .byte	$60
12446 2BCC                        F0            .byte	$F0
12447 2BCD                        00            .byte	0
12448 2BCE                        00            .byte	0
12449 2BCF                        00            .byte	0
12450 2BD0                        00            .byte	0
12451                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BD1                        00            .byte	0
12453 2BD2                        00            .byte	0
12454 2BD3                        00            .byte	0
12455 2BD4                        00            .byte	0
12456 2BD5                        00            .byte	0
12457 2BD6                        76            .byte	$76
12458 2BD7                        CC            .byte	$CC
12459 2BD8                        CC            .byte	$CC
12460 2BD9                        CC            .byte	$CC
12461 2BDA                        CC            .byte	$CC
12462 2BDB                        CC            .byte	$CC
12463 2BDC                        7C            .byte	$7C
12464 2BDD                        0C            .byte	$C
12465 2BDE                        CC            .byte	$CC
12466 2BDF                        78            .byte	$78
12467 2BE0                        00            .byte	0
12468                                           ! 1513  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BE1                        00            .byte	0
12470 2BE2                        00            .byte	0
12471 2BE3                        E0            .byte	$E0
12472 2BE4                        60            .byte	$60
12473 2BE5                        60            .byte	$60
12474 2BE6                        6C            .byte	$6C
12475 2BE7                        76            .byte	$76
12476 2BE8                        66            .byte	$66
12477 2BE9                        66            .byte	$66
12478 2BEA                        66            .byte	$66
12479 2BEB                        66            .byte	$66
12480 2BEC                        E6            .byte	$E6
12481 2BED                        00            .byte	0
12482 2BEE                        00            .byte	0
12483 2BEF                        00            .byte	0
12484 2BF0                        00            .byte	0
12485                                           ! 1514  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BF1                        00            .byte	0
12487 2BF2                        00            .byte	0
12488 2BF3                        18            .byte	$18
12489 2BF4                        18            .byte	$18
12490 2BF5                        00            .byte	0
12491 2BF6                        38            .byte	$38
12492 2BF7                        18            .byte	$18
12493 2BF8                        18            .byte	$18
12494 2BF9                        18            .byte	$18
12495 2BFA                        18            .byte	$18
12496 2BFB                        18            .byte	$18
12497 2BFC                        3C            .byte	$3C
12498 2BFD                        00            .byte	0
12499 2BFE                        00            .byte	0
12500 2BFF                        00            .byte	0
12501 2C00                        00            .byte	0
12502                                           ! 1515  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2C01                        00            .byte	0
12504 2C02                        00            .byte	0
12505 2C03                        06            .byte	6
12506 2C04                        06            .byte	6
12507 2C05                        00            .byte	0
12508 2C06                        0E            .byte	$E
12509 2C07                        06            .byte	6
12510 2C08                        06            .byte	6
12511 2C09                        06            .byte	6
12512 2C0A                        06            .byte	6
12513 2C0B                        06            .byte	6
12514 2C0C                        06            .byte	6
12515 2C0D                        66            .byte	$66
12516 2C0E                        66            .byte	$66
12517 2C0F                        3C            .byte	$3C
12518 2C10                        00            .byte	0
12519                                           ! 1516  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C11                        00            .byte	0
12521 2C12                        00            .byte	0
12522 2C13                        E0            .byte	$E0
12523 2C14                        60            .byte	$60
12524 2C15                        60            .byte	$60
12525 2C16                        66            .byte	$66
12526 2C17                        6C            .byte	$6C
12527 2C18                        78            .byte	$78
12528 2C19                        78            .byte	$78
12529 2C1A                        6C            .byte	$6C
12530 2C1B                        66            .byte	$66
12531 2C1C                        E6            .byte	$E6
12532 2C1D                        00            .byte	0
12533 2C1E                        00            .byte	0
12534 2C1F                        00            .byte	0
12535 2C20                        00            .byte	0
12536                                           ! 1517  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C21                        00            .byte	0
12538 2C22                        00            .byte	0
12539 2C23                        38            .byte	$38
12540 2C24                        18            .byte	$18
12541 2C25                        18            .byte	$18
12542 2C26                        18            .byte	$18
12543 2C27                        18            .byte	$18
12544 2C28                        18            .byte	$18
12545 2C29                        18            .byte	$18
12546 2C2A                        18            .byte	$18
12547 2C2B                        18            .byte	$18
12548 2C2C                        3C            .byte	$3C
12549 2C2D                        00            .byte	0
12550 2C2E                        00            .byte	0
12551 2C2F                        00            .byte	0
12552 2C30                        00            .byte	0
12553                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C31                        00            .byte	0
12555 2C32                        00            .byte	0
12556 2C33                        00            .byte	0
12557 2C34                        00            .byte	0
12558 2C35                        00            .byte	0
12559 2C36                        E6            .byte	$E6
12560 2C37                        FF            .byte	$FF
12561 2C38                        DB            .byte	$DB
12562 2C39                        DB            .byte	$DB
12563 2C3A                        DB            .byte	$DB
12564 2C3B                        DB            .byte	$DB
12565 2C3C                        DB            .byte	$DB
12566 2C3D                        00            .byte	0
12567 2C3E                        00            .byte	0
12568 2C3F                        00            .byte	0
12569 2C40                        00            .byte	0
12570                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C41                        00            .byte	0
12572 2C42                        00            .byte	0
12573 2C43                        00            .byte	0
12574 2C44                        00            .byte	0
12575 2C45                        00            .byte	0
12576 2C46                        DC            .byte	$DC
12577 2C47                        66            .byte	$66
12578 2C48                        66            .byte	$66
12579 2C49                        66            .byte	$66
12580 2C4A                        66            .byte	$66
12581 2C4B                        66            .byte	$66
12582 2C4C                        66            .byte	$66
12583 2C4D                        00            .byte	0
12584 2C4E                        00            .byte	0
12585 2C4F                        00            .byte	0
12586 2C50                        00            .byte	0
12587                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C51                        00            .byte	0
12589 2C52                        00            .byte	0
12590 2C53                        00            .byte	0
12591 2C54                        00            .byte	0
12592 2C55                        00            .byte	0
12593 2C56                        7C            .byte	$7C
12594 2C57                        C6            .byte	$C6
12595 2C58                        C6            .byte	$C6
12596 2C59                        C6            .byte	$C6
12597 2C5A                        C6            .byte	$C6
12598 2C5B                        C6            .byte	$C6
12599 2C5C                        7C            .byte	$7C
12600 2C5D                        00            .byte	0
12601 2C5E                        00            .byte	0
12602 2C5F                        00            .byte	0
12603 2C60                        00            .byte	0
12604                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C61                        00            .byte	0
12606 2C62                        00            .byte	0
12607 2C63                        00            .byte	0
12608 2C64                        00            .byte	0
12609 2C65                        00            .byte	0
12610 2C66                        DC            .byte	$DC
12611 2C67                        66            .byte	$66
12612 2C68                        66            .byte	$66
12613 2C69                        66            .byte	$66
12614 2C6A                        66            .byte	$66
12615 2C6B                        66            .byte	$66
12616 2C6C                        7C            .byte	$7C
12617 2C6D                        60            .byte	$60
12618 2C6E                        60            .byte	$60
12619 2C6F                        F0            .byte	$F0
12620 2C70                        00            .byte	0
12621                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C71                        00            .byte	0
12623 2C72                        00            .byte	0
12624 2C73                        00            .byte	0
12625 2C74                        00            .byte	0
12626 2C75                        00            .byte	0
12627 2C76                        76            .byte	$76
12628 2C77                        CC            .byte	$CC
12629 2C78                        CC            .byte	$CC
12630 2C79                        CC            .byte	$CC
12631 2C7A                        CC            .byte	$CC
12632 2C7B                        CC            .byte	$CC
12633 2C7C                        7C            .byte	$7C
12634 2C7D                        0C            .byte	$C
12635 2C7E                        0C            .byte	$C
12636 2C7F                        1E            .byte	$1E
12637 2C80                        00            .byte	0
12638                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C81                        00            .byte	0
12640 2C82                        00            .byte	0
12641 2C83                        00            .byte	0
12642 2C84                        00            .byte	0
12643 2C85                        00            .byte	0
12644 2C86                        DC            .byte	$DC
12645 2C87                        76            .byte	$76
12646 2C88                        66            .byte	$66
12647 2C89                        60            .byte	$60
12648 2C8A                        60            .byte	$60
12649 2C8B                        60            .byte	$60
12650 2C8C                        F0            .byte	$F0
12651 2C8D                        00            .byte	0
12652 2C8E                        00            .byte	0
12653 2C8F                        00            .byte	0
12654 2C90                        00            .byte	0
12655                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C91                        00            .byte	0
12657 2C92                        00            .byte	0
12658 2C93                        00            .byte	0
12659 2C94                        00            .byte	0
12660 2C95                        00            .byte	0
12661 2C96                        7C            .byte	$7C
12662 2C97                        C6            .byte	$C6
12663 2C98                        60            .byte	$60
12664 2C99                        38            .byte	$38
12665 2C9A                        0C            .byte	$C
12666 2C9B                        C6            .byte	$C6
12667 2C9C                        7C            .byte	$7C
12668 2C9D                        00            .byte	0
12669 2C9E                        00            .byte	0
12670 2C9F                        00            .byte	0
12671 2CA0                        00            .byte	0
12672                                           ! 1525  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2CA1                        00            .byte	0
12674 2CA2                        00            .byte	0
12675 2CA3                        10            .byte	$10
12676 2CA4                        30            .byte	$30
12677 2CA5                        30            .byte	$30
12678 2CA6                        FC            .byte	$FC
12679 2CA7                        30            .byte	$30
12680 2CA8                        30            .byte	$30
12681 2CA9                        30            .byte	$30
12682 2CAA                        30            .byte	$30
12683 2CAB                        36            .byte	$36
12684 2CAC                        1C            .byte	$1C
12685 2CAD                        00            .byte	0
12686 2CAE                        00            .byte	0
12687 2CAF                        00            .byte	0
12688 2CB0                        00            .byte	0
12689                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12690 2CB1                        00            .byte	0
12691 2CB2                        00            .byte	0
12692 2CB3                        00            .byte	0
12693 2CB4                        00            .byte	0
12694 2CB5                        00            .byte	0
12695 2CB6                        CC            .byte	$CC
12696 2CB7                        CC            .byte	$CC
12697 2CB8                        CC            .byte	$CC
12698 2CB9                        CC            .byte	$CC
12699 2CBA                        CC            .byte	$CC
12700 2CBB                        CC            .byte	$CC
12701 2CBC                        76            .byte	$76
12702 2CBD                        00            .byte	0
12703 2CBE                        00            .byte	0
12704 2CBF                        00            .byte	0
12705 2CC0                        00            .byte	0
12706                                           ! 1527  0x00, 0x00, 0
12707 2CC1                        00            .byte	0
12708 2CC2                        00            .byte	0
12709                                           ! 1527 x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12710 2CC3                        00            .byte	0
12711 2CC4                        00            .byte	0
12712 2CC5                        00            .byte	0
12713 2CC6                        C3            .byte	$C3
12714 2CC7                        C3            .byte	$C3
12715 2CC8                        C3            .byte	$C3
12716 2CC9                        C3            .byte	$C3
12717 2CCA                        66            .byte	$66
12718 2CCB                        3C            .byte	$3C
12719 2CCC                        18            .byte	$18
12720 2CCD                        00            .byte	0
12721 2CCE                        00            .byte	0
12722 2CCF                        00            .byte	0
12723 2CD0                        00            .byte	0
12724                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CD1                        00            .byte	0
12726 2CD2                        00            .byte	0
12727 2CD3                        00            .byte	0
12728 2CD4                        00            .byte	0
12729 2CD5                        00            .byte	0
12730 2CD6                        C3            .byte	$C3
12731 2CD7                        C3            .byte	$C3
12732 2CD8                        C3            .byte	$C3
12733 2CD9                        DB            .byte	$DB
12734 2CDA                        DB            .byte	$DB
12735 2CDB                        FF            .byte	$FF
12736 2CDC                        66            .byte	$66
12737 2CDD                        00            .byte	0
12738 2CDE                        00            .byte	0
12739 2CDF                        00            .byte	0
12740 2CE0                        00            .byte	0
12741                                           ! 1529  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CE1                        00            .byte	0
12743 2CE2                        00            .byte	0
12744 2CE3                        00            .byte	0
12745 2CE4                        00            .byte	0
12746 2CE5                        00            .byte	0
12747 2CE6                        C3            .byte	$C3
12748 2CE7                        66            .byte	$66
12749 2CE8                        3C            .byte	$3C
12750 2CE9                        18            .byte	$18
12751 2CEA                        3C            .byte	$3C
12752 2CEB                        66            .byte	$66
12753 2CEC                        C3            .byte	$C3
12754 2CED                        00            .byte	0
12755 2CEE                        00            .byte	0
12756 2CEF                        00            .byte	0
12757 2CF0                        00            .byte	0
12758                                           ! 1530  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CF1                        00            .byte	0
12760 2CF2                        00            .byte	0
12761 2CF3                        00            .byte	0
12762 2CF4                        00            .byte	0
12763 2CF5                        00            .byte	0
12764 2CF6                        C6            .byte	$C6
12765 2CF7                        C6            .byte	$C6
12766 2CF8                        C6            .byte	$C6
12767 2CF9                        C6            .byte	$C6
12768 2CFA                        C6            .byte	$C6
12769 2CFB                        C6            .byte	$C6
12770 2CFC                        7E            .byte	$7E
12771 2CFD                        06            .byte	6
12772 2CFE                        0C            .byte	$C
12773 2CFF                        F8            .byte	$F8
12774 2D00                        00            .byte	0
12775                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2D01                        00            .byte	0
12777 2D02                        00            .byte	0
12778 2D03                        00            .byte	0
12779 2D04                        00            .byte	0
12780 2D05                        00            .byte	0
12781 2D06                        FE            .byte	$FE
12782 2D07                        CC            .byte	$CC
12783 2D08                        18            .byte	$18
12784 2D09                        30            .byte	$30
12785 2D0A                        60            .byte	$60
12786 2D0B                        C6            .byte	$C6
12787 2D0C                        FE            .byte	$FE
12788 2D0D                        00            .byte	0
12789 2D0E                        00            .byte	0
12790 2D0F                        00            .byte	0
12791 2D10                        00            .byte	0
12792                                           ! 1532  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D11                        00            .byte	0
12794 2D12                        00            .byte	0
12795 2D13                        0E            .byte	$E
12796 2D14                        18            .byte	$18
12797 2D15                        18            .byte	$18
12798 2D16                        18            .byte	$18
12799 2D17                        70            .byte	$70
12800 2D18                        18            .byte	$18
12801 2D19                        18            .byte	$18
12802 2D1A                        18            .byte	$18
12803 2D1B                        18            .byte	$18
12804 2D1C                        0E            .byte	$E
12805 2D1D                        00            .byte	0
12806 2D1E                        00            .byte	0
12807 2D1F                        00            .byte	0
12808 2D20                        00            .byte	0
12809                                           ! 1533  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D21                        00            .byte	0
12811 2D22                        00            .byte	0
12812 2D23                        18            .byte	$18
12813 2D24                        18            .byte	$18
12814 2D25                        18            .byte	$18
12815 2D26                        18            .byte	$18
12816 2D27                        00            .byte	0
12817 2D28                        18            .byte	$18
12818 2D29                        18            .byte	$18
12819 2D2A                        18            .byte	$18
12820 2D2B                        18            .byte	$18
12821 2D2C                        18            .byte	$18
12822 2D2D                        00            .byte	0
12823 2D2E                        00            .byte	0
12824 2D2F                        00            .byte	0
12825 2D30                        00            .byte	0
12826                                           ! 1534  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D31                        00            .byte	0
12828 2D32                        00            .byte	0
12829 2D33                        70            .byte	$70
12830 2D34                        18            .byte	$18
12831 2D35                        18            .byte	$18
12832 2D36                        18            .byte	$18
12833 2D37                        0E            .byte	$E
12834 2D38                        18            .byte	$18
12835 2D39                        18            .byte	$18
12836 2D3A                        18            .byte	$18
12837 2D3B                        18            .byte	$18
12838 2D3C                        70            .byte	$70
12839 2D3D                        00            .byte	0
12840 2D3E                        00            .byte	0
12841 2D3F                        00            .byte	0
12842 2D40                        00            .byte	0
12843                                           ! 1535  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D41                        00            .byte	0
12845 2D42                        00            .byte	0
12846 2D43                        76            .byte	$76
12847 2D44                        DC            .byte	$DC
12848 2D45                        00            .byte	0
12849 2D46                        00            .byte	0
12850 2D47                        00            .byte	0
12851 2D48                        00            .byte	0
12852 2D49                        00            .byte	0
12853 2D4A                        00            .byte	0
12854 2D4B                        00            .byte	0
12855 2D4C                        00            .byte	0
12856 2D4D                        00            .byte	0
12857 2D4E                        00            .byte	0
12858 2D4F                        00            .byte	0
12859 2D50                        00            .byte	0
12860                                           ! 1536  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D51                        00            .byte	0
12862 2D52                        00            .byte	0
12863 2D53                        00            .byte	0
12864 2D54                        00            .byte	0
12865 2D55                        10            .byte	$10
12866 2D56                        38            .byte	$38
12867 2D57                        6C            .byte	$6C
12868 2D58                        C6            .byte	$C6
12869 2D59                        C6            .byte	$C6
12870 2D5A                        C6            .byte	$C6
12871 2D5B                        FE            .byte	$FE
12872 2D5C                        00            .byte	0
12873 2D5D                        00            .byte	0
12874 2D5E                        00            .byte	0
12875 2D5F                        00            .byte	0
12876 2D60                        00            .byte	0
12877                                           ! 1537  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D61                        00            .byte	0
12879 2D62                        00            .byte	0
12880 2D63                        3C            .byte	$3C
12881 2D64                        66            .byte	$66
12882 2D65                        C2            .byte	$C2
12883 2D66                        C0            .byte	$C0
12884 2D67                        C0            .byte	$C0
12885 2D68                        C0            .byte	$C0
12886 2D69                        C2            .byte	$C2
12887 2D6A                        66            .byte	$66
12888 2D6B                        3C            .byte	$3C
12889 2D6C                        0C            .byte	$C
12890 2D6D                        06            .byte	6
12891 2D6E                        7C            .byte	$7C
12892 2D6F                        00            .byte	0
12893 2D70                        00            .byte	0
12894                                           ! 1538  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D71                        00            .byte	0
12896 2D72                        00            .byte	0
12897 2D73                        CC            .byte	$CC
12898 2D74                        00            .byte	0
12899 2D75                        00            .byte	0
12900 2D76                        CC            .byte	$CC
12901 2D77                        CC            .byte	$CC
12902 2D78                        CC            .byte	$CC
12903 2D79                        CC            .byte	$CC
12904 2D7A                        CC            .byte	$CC
12905 2D7B                        CC            .byte	$CC
12906 2D7C                        76            .byte	$76
12907 2D7D                        00            .byte	0
12908 2D7E                        00            .byte	0
12909 2D7F                        00            .byte	0
12910 2D80                        00            .byte	0
12911                                           ! 1539  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D81                        00            .byte	0
12913 2D82                        0C            .byte	$C
12914 2D83                        18            .byte	$18
12915 2D84                        30            .byte	$30
12916 2D85                        00            .byte	0
12917 2D86                        7C            .byte	$7C
12918 2D87                        C6            .byte	$C6
12919 2D88                        FE            .byte	$FE
12920 2D89                        C0            .byte	$C0
12921 2D8A                        C0            .byte	$C0
12922 2D8B                        C6            .byte	$C6
12923 2D8C                        7C            .byte	$7C
12924 2D8D                        00            .byte	0
12925 2D8E                        00            .byte	0
12926 2D8F                        00            .byte	0
12927 2D90                        00            .byte	0
12928                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D91                        00            .byte	0
12930 2D92                        10            .byte	$10
12931 2D93                        38            .byte	$38
12932 2D94                        6C            .byte	$6C
12933 2D95                        00            .byte	0
12934 2D96                        78            .byte	$78
12935 2D97                        0C            .byte	$C
12936 2D98                        7C            .byte	$7C
12937 2D99                        CC            .byte	$CC
12938 2D9A                        CC            .byte	$CC
12939 2D9B                        CC            .byte	$CC
12940 2D9C                        76            .byte	$76
12941 2D9D                        00            .byte	0
12942 2D9E                        00            .byte	0
12943 2D9F                        00            .byte	0
12944 2DA0                        00            .byte	0
12945                                           ! 1541  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2DA1                        00            .byte	0
12947 2DA2                        00            .byte	0
12948 2DA3                        CC            .byte	$CC
12949 2DA4                        00            .byte	0
12950 2DA5                        00            .byte	0
12951 2DA6                        78            .byte	$78
12952 2DA7                        0C            .byte	$C
12953 2DA8                        7C            .byte	$7C
12954 2DA9                        CC            .byte	$CC
12955 2DAA                        CC            .byte	$CC
12956 2DAB                        CC            .byte	$CC
12957 2DAC                        76            .byte	$76
12958 2DAD                        00            .byte	0
12959 2DAE                        00            .byte	0
12960 2DAF                        00            .byte	0
12961 2DB0                        00            .byte	0
12962                                           ! 1542  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DB1                        00            .byte	0
12964 2DB2                        60            .byte	$60
12965 2DB3                        30            .byte	$30
12966 2DB4                        18            .byte	$18
12967 2DB5                        00            .byte	0
12968 2DB6                        78            .byte	$78
12969 2DB7                        0C            .byte	$C
12970 2DB8                        7C            .byte	$7C
12971 2DB9                        CC            .byte	$CC
12972 2DBA                        CC            .byte	$CC
12973 2DBB                        CC            .byte	$CC
12974 2DBC                        76            .byte	$76
12975 2DBD                        00            .byte	0
12976 2DBE                        00            .byte	0
12977 2DBF                        00            .byte	0
12978 2DC0                        00            .byte	0
12979                                           ! 1543  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DC1                        00            .byte	0
12981 2DC2                        38            .byte	$38
12982 2DC3                        6C            .byte	$6C
12983 2DC4                        38            .byte	$38
12984 2DC5                        00            .byte	0
12985 2DC6                        78            .byte	$78
12986 2DC7                        0C            .byte	$C
12987 2DC8                        7C            .byte	$7C
12988 2DC9                        CC            .byte	$CC
12989 2DCA                        CC            .byte	$CC
12990 2DCB                        CC            .byte	$CC
12991 2DCC                        76            .byte	$76
12992 2DCD                        00            .byte	0
12993 2DCE                        00            .byte	0
12994 2DCF                        00            .byte	0
12995 2DD0                        00            .byte	0
12996                                           ! 1544  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DD1                        00            .byte	0
12998 2DD2                        00            .byte	0
12999 2DD3                        00            .byte	0
13000 2DD4                        00            .byte	0
13001 2DD5                        3C            .byte	$3C
13002 2DD6                        66            .byte	$66
13003 2DD7                        60            .byte	$60
13004 2DD8                        60            .byte	$60
13005 2DD9                        66            .byte	$66
13006 2DDA                        3C            .byte	$3C
13007 2DDB                        0C            .byte	$C
13008 2DDC                        06            .byte	6
13009 2DDD                        3C            .byte	$3C
13010 2DDE                        00            .byte	0
13011 2DDF                        00            .byte	0
13012 2DE0                        00            .byte	0
13013                                           ! 1545  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DE1                        00            .byte	0
13015 2DE2                        10            .byte	$10
13016 2DE3                        38            .byte	$38
13017 2DE4                        6C            .byte	$6C
13018 2DE5                        00            .byte	0
13019 2DE6                        7C            .byte	$7C
13020 2DE7                        C6            .byte	$C6
13021 2DE8                        FE            .byte	$FE
13022 2DE9                        C0            .byte	$C0
13023 2DEA                        C0            .byte	$C0
13024 2DEB                        C6            .byte	$C6
13025 2DEC                        7C            .byte	$7C
13026 2DED                        00            .byte	0
13027 2DEE                        00            .byte	0
13028 2DEF                        00            .byte	0
13029 2DF0                        00            .byte	0
13030                                           ! 1546  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DF1                        00            .byte	0
13032 2DF2                        00            .byte	0
13033 2DF3                        C6            .byte	$C6
13034 2DF4                        00            .byte	0
13035 2DF5                        00            .byte	0
13036 2DF6                        7C            .byte	$7C
13037 2DF7                        C6            .byte	$C6
13038 2DF8                        FE            .byte	$FE
13039 2DF9                        C0            .byte	$C0
13040 2DFA                        C0            .byte	$C0
13041 2DFB                        C6            .byte	$C6
13042 2DFC                        7C            .byte	$7C
13043 2DFD                        00            .byte	0
13044 2DFE                        00            .byte	0
13045 2DFF                        00            .byte	0
13046 2E00                        00            .byte	0
13047                                           ! 1547  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13048 2E01                        00            .byte	0
13049 2E02                        60            .byte	$60
13050 2E03                        30            .byte	$30
13051 2E04                        18            .byte	$18
13052 2E05                        00            .byte	0
13053 2E06                        7C            .byte	$7C
13054 2E07                        C6            .byte	$C6
13055 2E08                        FE            .byte	$FE
13056 2E09                        C0            .byte	$C0
13057 2E0A                        C0            .byte	$C0
13058 2E0B                        C6            .byte	$C6
13059 2E0C                        7C            .byte	$7C
13060 2E0D                        00            .byte	0
13061 2E0E                        00            .byte	0
13062 2E0F                        00            .byte	0
13063 2E10                        00            .byte	0
13064                                           ! 1548  0x00, 0x00, 0x66, 0x00, 
13065 2E11                        00            .byte	0
13066 2E12                        00            .byte	0
13067 2E13                        66            .byte	$66
13068 2E14                        00            .byte	0
13069                                           ! 1548 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E15                        00            .byte	0
13071 2E16                        38            .byte	$38
13072 2E17                        18            .byte	$18
13073 2E18                        18            .byte	$18
13074 2E19                        18            .byte	$18
13075 2E1A                        18            .byte	$18
13076 2E1B                        18            .byte	$18
13077 2E1C                        3C            .byte	$3C
13078 2E1D                        00            .byte	0
13079 2E1E                        00            .byte	0
13080 2E1F                        00            .byte	0
13081 2E20                        00            .byte	0
13082                                           ! 1549  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E21                        00            .byte	0
13084 2E22                        18            .byte	$18
13085 2E23                        3C            .byte	$3C
13086 2E24                        66            .byte	$66
13087 2E25                        00            .byte	0
13088 2E26                        38            .byte	$38
13089 2E27                        18            .byte	$18
13090 2E28                        18            .byte	$18
13091 2E29                        18            .byte	$18
13092 2E2A                        18            .byte	$18
13093 2E2B                        18            .byte	$18
13094 2E2C                        3C            .byte	$3C
13095 2E2D                        00            .byte	0
13096 2E2E                        00            .byte	0
13097 2E2F                        00            .byte	0
13098 2E30                        00            .byte	0
13099                                           ! 1550  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E31                        00            .byte	0
13101 2E32                        60            .byte	$60
13102 2E33                        30            .byte	$30
13103 2E34                        18            .byte	$18
13104 2E35                        00            .byte	0
13105 2E36                        38            .byte	$38
13106 2E37                        18            .byte	$18
13107 2E38                        18            .byte	$18
13108 2E39                        18            .byte	$18
13109 2E3A                        18            .byte	$18
13110 2E3B                        18            .byte	$18
13111 2E3C                        3C            .byte	$3C
13112 2E3D                        00            .byte	0
13113 2E3E                        00            .byte	0
13114 2E3F                        00            .byte	0
13115 2E40                        00            .byte	0
13116                                           ! 1551  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E41                        00            .byte	0
13118 2E42                        C6            .byte	$C6
13119 2E43                        00            .byte	0
13120 2E44                        10            .byte	$10
13121 2E45                        38            .byte	$38
13122 2E46                        6C            .byte	$6C
13123 2E47                        C6            .byte	$C6
13124 2E48                        C6            .byte	$C6
13125 2E49                        FE            .byte	$FE
13126 2E4A                        C6            .byte	$C6
13127 2E4B                        C6            .byte	$C6
13128 2E4C                        C6            .byte	$C6
13129 2E4D                        00            .byte	0
13130 2E4E                        00            .byte	0
13131 2E4F                        00            .byte	0
13132 2E50                        00            .byte	0
13133                                           ! 1552  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E51                        38            .byte	$38
13135 2E52                        6C            .byte	$6C
13136 2E53                        38            .byte	$38
13137 2E54                        00            .byte	0
13138 2E55                        38            .byte	$38
13139 2E56                        6C            .byte	$6C
13140 2E57                        C6            .byte	$C6
13141 2E58                        C6            .byte	$C6
13142 2E59                        FE            .byte	$FE
13143 2E5A                        C6            .byte	$C6
13144 2E5B                        C6            .byte	$C6
13145 2E5C                        C6            .byte	$C6
13146 2E5D                        00            .byte	0
13147 2E5E                        00            .byte	0
13148 2E5F                        00            .byte	0
13149 2E60                        00            .byte	0
13150                                           ! 1553  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E61                        18            .byte	$18
13152 2E62                        30            .byte	$30
13153 2E63                        60            .byte	$60
13154 2E64                        00            .byte	0
13155 2E65                        FE            .byte	$FE
13156 2E66                        66            .byte	$66
13157 2E67                        60            .byte	$60
13158 2E68                        7C            .byte	$7C
13159 2E69                        60            .byte	$60
13160 2E6A                        60            .byte	$60
13161 2E6B                        66            .byte	$66
13162 2E6C                        FE            .byte	$FE
13163 2E6D                        00            .byte	0
13164 2E6E                        00            .byte	0
13165 2E6F                        00            .byte	0
13166 2E70                        00            .byte	0
13167                                           ! 1554  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E71                        00            .byte	0
13169 2E72                        00            .byte	0
13170 2E73                        00            .byte	0
13171 2E74                        00            .byte	0
13172 2E75                        00            .byte	0
13173 2E76                        6E            .byte	$6E
13174 2E77                        3B            .byte	$3B
13175 2E78                        1B            .byte	$1B
13176 2E79                        7E            .byte	$7E
13177 2E7A                        D8            .byte	$D8
13178 2E7B                        DC            .byte	$DC
13179 2E7C                        77            .byte	$77
13180 2E7D                        00            .byte	0
13181 2E7E                        00            .byte	0
13182 2E7F                        00            .byte	0
13183 2E80                        00            .byte	0
13184                                           ! 1555  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E81                        00            .byte	0
13186 2E82                        00            .byte	0
13187 2E83                        3E            .byte	$3E
13188 2E84                        6C            .byte	$6C
13189 2E85                        CC            .byte	$CC
13190 2E86                        CC            .byte	$CC
13191 2E87                        FE            .byte	$FE
13192 2E88                        CC            .byte	$CC
13193 2E89                        CC            .byte	$CC
13194 2E8A                        CC            .byte	$CC
13195 2E8B                        CC            .byte	$CC
13196 2E8C                        CE            .byte	$CE
13197 2E8D                        00            .byte	0
13198 2E8E                        00            .byte	0
13199 2E8F                        00            .byte	0
13200 2E90                        00            .byte	0
13201                                           ! 1556  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E91                        00            .byte	0
13203 2E92                        10            .byte	$10
13204 2E93                        38            .byte	$38
13205 2E94                        6C            .byte	$6C
13206 2E95                        00            .byte	0
13207 2E96                        7C            .byte	$7C
13208 2E97                        C6            .byte	$C6
13209 2E98                        C6            .byte	$C6
13210 2E99                        C6            .byte	$C6
13211 2E9A                        C6            .byte	$C6
13212 2E9B                        C6            .byte	$C6
13213 2E9C                        7C            .byte	$7C
13214 2E9D                        00            .byte	0
13215 2E9E                        00            .byte	0
13216 2E9F                        00            .byte	0
13217 2EA0                        00            .byte	0
13218                                           ! 1557  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2EA1                        00            .byte	0
13220 2EA2                        00            .byte	0
13221 2EA3                        C6            .byte	$C6
13222 2EA4                        00            .byte	0
13223 2EA5                        00            .byte	0
13224 2EA6                        7C            .byte	$7C
13225 2EA7                        C6            .byte	$C6
13226 2EA8                        C6            .byte	$C6
13227 2EA9                        C6            .byte	$C6
13228 2EAA                        C6            .byte	$C6
13229 2EAB                        C6            .byte	$C6
13230 2EAC                        7C            .byte	$7C
13231 2EAD                        00            .byte	0
13232 2EAE                        00            .byte	0
13233 2EAF                        00            .byte	0
13234 2EB0                        00            .byte	0
13235                                           ! 1558  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EB1                        00            .byte	0
13237 2EB2                        60            .byte	$60
13238 2EB3                        30            .byte	$30
13239 2EB4                        18            .byte	$18
13240 2EB5                        00            .byte	0
13241 2EB6                        7C            .byte	$7C
13242 2EB7                        C6            .byte	$C6
13243 2EB8                        C6            .byte	$C6
13244 2EB9                        C6            .byte	$C6
13245 2EBA                        C6            .byte	$C6
13246 2EBB                        C6            .byte	$C6
13247 2EBC                        7C            .byte	$7C
13248 2EBD                        00            .byte	0
13249 2EBE                        00            .byte	0
13250 2EBF                        00            .byte	0
13251 2EC0                        00            .byte	0
13252                                           ! 1559  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2EC1                        00            .byte	0
13254 2EC2                        30            .byte	$30
13255 2EC3                        78            .byte	$78
13256 2EC4                        CC            .byte	$CC
13257 2EC5                        00            .byte	0
13258 2EC6                        CC            .byte	$CC
13259 2EC7                        CC            .byte	$CC
13260 2EC8                        CC            .byte	$CC
13261 2EC9                        CC            .byte	$CC
13262 2ECA                        CC            .byte	$CC
13263 2ECB                        CC            .byte	$CC
13264 2ECC                        76            .byte	$76
13265 2ECD                        00            .byte	0
13266 2ECE                        00            .byte	0
13267 2ECF                        00            .byte	0
13268 2ED0                        00            .byte	0
13269                                           ! 1560  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2ED1                        00            .byte	0
13271 2ED2                        60            .byte	$60
13272 2ED3                        30            .byte	$30
13273 2ED4                        18            .byte	$18
13274 2ED5                        00            .byte	0
13275 2ED6                        CC            .byte	$CC
13276 2ED7                        CC            .byte	$CC
13277 2ED8                        CC            .byte	$CC
13278 2ED9                        CC            .byte	$CC
13279 2EDA                        CC            .byte	$CC
13280 2EDB                        CC            .byte	$CC
13281 2EDC                        76            .byte	$76
13282 2EDD                        00            .byte	0
13283 2EDE                        00            .byte	0
13284 2EDF                        00            .byte	0
13285 2EE0                        00            .byte	0
13286                                           ! 1561  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EE1                        00            .byte	0
13288 2EE2                        00            .byte	0
13289 2EE3                        C6            .byte	$C6
13290 2EE4                        00            .byte	0
13291 2EE5                        00            .byte	0
13292 2EE6                        C6            .byte	$C6
13293 2EE7                        C6            .byte	$C6
13294 2EE8                        C6            .byte	$C6
13295 2EE9                        C6            .byte	$C6
13296 2EEA                        C6            .byte	$C6
13297 2EEB                        C6            .byte	$C6
13298 2EEC                        7E            .byte	$7E
13299 2EED                        06            .byte	6
13300 2EEE                        0C            .byte	$C
13301 2EEF                        78            .byte	$78
13302 2EF0                        00            .byte	0
13303                                           ! 1562  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EF1                        00            .byte	0
13305 2EF2                        C6            .byte	$C6
13306 2EF3                        00            .byte	0
13307 2EF4                        7C            .byte	$7C
13308 2EF5                        C6            .byte	$C6
13309 2EF6                        C6            .byte	$C6
13310 2EF7                        C6            .byte	$C6
13311 2EF8                        C6            .byte	$C6
13312 2EF9                        C6            .byte	$C6
13313 2EFA                        C6            .byte	$C6
13314 2EFB                        C6            .byte	$C6
13315 2EFC                        7C            .byte	$7C
13316 2EFD                        00            .byte	0
13317 2EFE                        00            .byte	0
13318 2EFF                        00            .byte	0
13319 2F00                        00            .byte	0
13320                                           ! 1563  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2F01                        00            .byte	0
13322 2F02                        C6            .byte	$C6
13323 2F03                        00            .byte	0
13324 2F04                        C6            .byte	$C6
13325 2F05                        C6            .byte	$C6
13326 2F06                        C6            .byte	$C6
13327 2F07                        C6            .byte	$C6
13328 2F08                        C6            .byte	$C6
13329 2F09                        C6            .byte	$C6
13330 2F0A                        C6            .byte	$C6
13331 2F0B                        C6            .byte	$C6
13332 2F0C                        7C            .byte	$7C
13333 2F0D                        00            .byte	0
13334 2F0E                        00            .byte	0
13335 2F0F                        00            .byte	0
13336 2F10                        00            .byte	0
13337                                           ! 1564  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F11                        00            .byte	0
13339 2F12                        18            .byte	$18
13340 2F13                        18            .byte	$18
13341 2F14                        7E            .byte	$7E
13342 2F15                        C3            .byte	$C3
13343 2F16                        C0            .byte	$C0
13344 2F17                        C0            .byte	$C0
13345 2F18                        C0            .byte	$C0
13346 2F19                        C3            .byte	$C3
13347 2F1A                        7E            .byte	$7E
13348 2F1B                        18            .byte	$18
13349 2F1C                        18            .byte	$18
13350 2F1D                        00            .byte	0
13351 2F1E                        00            .byte	0
13352 2F1F                        00            .byte	0
13353 2F20                        00            .byte	0
13354                                           ! 1565  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F21                        00            .byte	0
13356 2F22                        38            .byte	$38
13357 2F23                        6C            .byte	$6C
13358 2F24                        64            .byte	$64
13359 2F25                        60            .byte	$60
13360 2F26                        F0            .byte	$F0
13361 2F27                        60            .byte	$60
13362 2F28                        60            .byte	$60
13363 2F29                        60            .byte	$60
13364 2F2A                        60            .byte	$60
13365 2F2B                        E6            .byte	$E6
13366 2F2C                        FC            .byte	$FC
13367 2F2D                        00            .byte	0
13368 2F2E                        00            .byte	0
13369 2F2F                        00            .byte	0
13370 2F30                        00            .byte	0
13371                                           ! 1566  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F31                        00            .byte	0
13373 2F32                        00            .byte	0
13374 2F33                        C3            .byte	$C3
13375 2F34                        66            .byte	$66
13376 2F35                        3C            .byte	$3C
13377 2F36                        18            .byte	$18
13378 2F37                        FF            .byte	$FF
13379 2F38                        18            .byte	$18
13380 2F39                        FF            .byte	$FF
13381 2F3A                        18            .byte	$18
13382 2F3B                        18            .byte	$18
13383 2F3C                        18            .byte	$18
13384 2F3D                        00            .byte	0
13385 2F3E                        00            .byte	0
13386 2F3F                        00            .byte	0
13387 2F40                        00            .byte	0
13388                                           ! 1567  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F41                        00            .byte	0
13390 2F42                        FC            .byte	$FC
13391 2F43                        66            .byte	$66
13392 2F44                        66            .byte	$66
13393 2F45                        7C            .byte	$7C
13394 2F46                        62            .byte	$62
13395 2F47                        66            .byte	$66
13396 2F48                        6F            .byte	$6F
13397 2F49                        66            .byte	$66
13398 2F4A                        66            .byte	$66
13399 2F4B                        66            .byte	$66
13400 2F4C                        F3            .byte	$F3
13401 2F4D                        00            .byte	0
13402 2F4E                        00            .byte	0
13403 2F4F                        00            .byte	0
13404 2F50                        00            .byte	0
13405                                           ! 1568  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13406 2F51                        00            .byte	0
13407 2F52                        0E            .byte	$E
13408 2F53                        1B            .byte	$1B
13409 2F54                        18            .byte	$18
13410 2F55                        18            .byte	$18
13411 2F56                        18            .byte	$18
13412 2F57                        7E            .byte	$7E
13413 2F58                        18            .byte	$18
13414 2F59                        18            .byte	$18
13415 2F5A                        18            .byte	$18
13416 2F5B                        18            .byte	$18
13417 2F5C                        18            .byte	$18
13418 2F5D                        D8            .byte	$D8
13419 2F5E                        70            .byte	$70
13420 2F5F                        00            .byte	0
13421 2F60                        00            .byte	0
13422                                           ! 1569  0x00, 0x18, 0x30, 0x60, 0x00, 0x78,
13423 2F61                        00            .byte	0
13424 2F62                        18            .byte	$18
13425 2F63                        30            .byte	$30
13426 2F64                        60            .byte	$60
13427 2F65                        00            .byte	0
13428                                           ! 1569  0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13429 2F66                        78            .byte	$78
13430 2F67                        0C            .byte	$C
13431 2F68                        7C            .byte	$7C
13432 2F69                        CC            .byte	$CC
13433 2F6A                        CC            .byte	$CC
13434 2F6B                        CC            .byte	$CC
13435 2F6C                        76            .byte	$76
13436 2F6D                        00            .byte	0
13437 2F6E                        00            .byte	0
13438 2F6F                        00            .byte	0
13439 2F70                        00            .byte	0
13440                                           ! 1570  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F71                        00            .byte	0
13442 2F72                        0C            .byte	$C
13443 2F73                        18            .byte	$18
13444 2F74                        30            .byte	$30
13445 2F75                        00            .byte	0
13446 2F76                        38            .byte	$38
13447 2F77                        18            .byte	$18
13448 2F78                        18            .byte	$18
13449 2F79                        18            .byte	$18
13450 2F7A                        18            .byte	$18
13451 2F7B                        18            .byte	$18
13452 2F7C                        3C            .byte	$3C
13453 2F7D                        00            .byte	0
13454 2F7E                        00            .byte	0
13455 2F7F                        00            .byte	0
13456 2F80                        00            .byte	0
13457                                           ! 1571  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F81                        00            .byte	0
13459 2F82                        18            .byte	$18
13460 2F83                        30            .byte	$30
13461 2F84                        60            .byte	$60
13462 2F85                        00            .byte	0
13463 2F86                        7C            .byte	$7C
13464 2F87                        C6            .byte	$C6
13465 2F88                        C6            .byte	$C6
13466 2F89                        C6            .byte	$C6
13467 2F8A                        C6            .byte	$C6
13468 2F8B                        C6            .byte	$C6
13469 2F8C                        7C            .byte	$7C
13470 2F8D                        00            .byte	0
13471 2F8E                        00            .byte	0
13472 2F8F                        00            .byte	0
13473 2F90                        00            .byte	0
13474                                           ! 1572  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F91                        00            .byte	0
13476 2F92                        18            .byte	$18
13477 2F93                        30            .byte	$30
13478 2F94                        60            .byte	$60
13479 2F95                        00            .byte	0
13480 2F96                        CC            .byte	$CC
13481 2F97                        CC            .byte	$CC
13482 2F98                        CC            .byte	$CC
13483 2F99                        CC            .byte	$CC
13484 2F9A                        CC            .byte	$CC
13485 2F9B                        CC            .byte	$CC
13486 2F9C                        76            .byte	$76
13487 2F9D                        00            .byte	0
13488 2F9E                        00            .byte	0
13489 2F9F                        00            .byte	0
13490 2FA0                        00            .byte	0
13491                                           ! 1573  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2FA1                        00            .byte	0
13493 2FA2                        00            .byte	0
13494 2FA3                        76            .byte	$76
13495 2FA4                        DC            .byte	$DC
13496 2FA5                        00            .byte	0
13497 2FA6                        DC            .byte	$DC
13498 2FA7                        66            .byte	$66
13499 2FA8                        66            .byte	$66
13500 2FA9                        66            .byte	$66
13501 2FAA                        66            .byte	$66
13502 2FAB                        66            .byte	$66
13503 2FAC                        66            .byte	$66
13504 2FAD                        00            .byte	0
13505 2FAE                        00            .byte	0
13506 2FAF                        00            .byte	0
13507 2FB0                        00            .byte	0
13508                                           ! 1574  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FB1                        76            .byte	$76
13510 2FB2                        DC            .byte	$DC
13511 2FB3                        00            .byte	0
13512 2FB4                        C6            .byte	$C6
13513 2FB5                        E6            .byte	$E6
13514 2FB6                        F6            .byte	$F6
13515 2FB7                        FE            .byte	$FE
13516 2FB8                        DE            .byte	$DE
13517 2FB9                        CE            .byte	$CE
13518 2FBA                        C6            .byte	$C6
13519 2FBB                        C6            .byte	$C6
13520 2FBC                        C6            .byte	$C6
13521 2FBD                        00            .byte	0
13522 2FBE                        00            .byte	0
13523 2FBF                        00            .byte	0
13524 2FC0                        00            .byte	0
13525                                           ! 1575  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FC1                        00            .byte	0
13527 2FC2                        3C            .byte	$3C
13528 2FC3                        6C            .byte	$6C
13529 2FC4                        6C            .byte	$6C
13530 2FC5                        3E            .byte	$3E
13531 2FC6                        00            .byte	0
13532 2FC7                        7E            .byte	$7E
13533 2FC8                        00            .byte	0
13534 2FC9                        00            .byte	0
13535 2FCA                        00            .byte	0
13536 2FCB                        00            .byte	0
13537 2FCC                        00            .byte	0
13538 2FCD                        00            .byte	0
13539 2FCE                        00            .byte	0
13540 2FCF                        00            .byte	0
13541 2FD0                        00            .byte	0
13542                                           ! 1576  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FD1                        00            .byte	0
13544 2FD2                        38            .byte	$38
13545 2FD3                        6C            .byte	$6C
13546 2FD4                        6C            .byte	$6C
13547 2FD5                        38            .byte	$38
13548 2FD6                        00            .byte	0
13549 2FD7                        7C            .byte	$7C
13550 2FD8                        00            .byte	0
13551 2FD9                        00            .byte	0
13552 2FDA                        00            .byte	0
13553 2FDB                        00            .byte	0
13554 2FDC                        00            .byte	0
13555 2FDD                        00            .byte	0
13556 2FDE                        00            .byte	0
13557 2FDF                        00            .byte	0
13558 2FE0                        00            .byte	0
13559                                           ! 1577  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FE1                        00            .byte	0
13561 2FE2                        00            .byte	0
13562 2FE3                        30            .byte	$30
13563 2FE4                        30            .byte	$30
13564 2FE5                        00            .byte	0
13565 2FE6                        30            .byte	$30
13566 2FE7                        30            .byte	$30
13567 2FE8                        60            .byte	$60
13568 2FE9                        C0            .byte	$C0
13569 2FEA                        C6            .byte	$C6
13570 2FEB                        C6            .byte	$C6
13571 2FEC                        7C            .byte	$7C
13572 2FED                        00            .byte	0
13573 2FEE                        00            .byte	0
13574 2FEF                        00            .byte	0
13575 2FF0                        00            .byte	0
13576                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FF1                        00            .byte	0
13578 2FF2                        00            .byte	0
13579 2FF3                        00            .byte	0
13580 2FF4                        00            .byte	0
13581 2FF5                        00            .byte	0
13582 2FF6                        00            .byte	0
13583 2FF7                        FE            .byte	$FE
13584 2FF8                        C0            .byte	$C0
13585 2FF9                        C0            .byte	$C0
13586 2FFA                        C0            .byte	$C0
13587 2FFB                        C0            .byte	$C0
13588 2FFC                        00            .byte	0
13589 2FFD                        00            .byte	0
13590 2FFE                        00            .byte	0
13591 2FFF                        00            .byte	0
13592 3000                        00            .byte	0
13593                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 3001                        00            .byte	0
13595 3002                        00            .byte	0
13596 3003                        00            .byte	0
13597 3004                        00            .byte	0
13598 3005                        00            .byte	0
13599 3006                        00            .byte	0
13600 3007                        FE            .byte	$FE
13601 3008                        06            .byte	6
13602 3009                        06            .byte	6
13603 300A                        06            .byte	6
13604 300B                        06            .byte	6
13605 300C                        00            .byte	0
13606 300D                        00            .byte	0
13607 300E                        00            .byte	0
13608 300F                        00            .byte	0
13609 3010                        00            .byte	0
13610                                           ! 1580  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 3011                        00            .byte	0
13612 3012                        C0            .byte	$C0
13613 3013                        C0            .byte	$C0
13614 3014                        C2            .byte	$C2
13615 3015                        C6            .byte	$C6
13616 3016                        CC            .byte	$CC
13617 3017                        18            .byte	$18
13618 3018                        30            .byte	$30
13619 3019                        60            .byte	$60
13620 301A                        CE            .byte	$CE
13621 301B                        9B            .byte	$9B
13622 301C                        06            .byte	6
13623 301D                        0C            .byte	$C
13624 301E                        1F            .byte	$1F
13625 301F                        00            .byte	0
13626 3020                        00            .byte	0
13627                                           ! 1581  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 3021                        00            .byte	0
13629 3022                        C0            .byte	$C0
13630 3023                        C0            .byte	$C0
13631 3024                        C2            .byte	$C2
13632 3025                        C6            .byte	$C6
13633 3026                        CC            .byte	$CC
13634 3027                        18            .byte	$18
13635 3028                        30            .byte	$30
13636 3029                        66            .byte	$66
13637 302A                        CE            .byte	$CE
13638 302B                        96            .byte	$96
13639 302C                        3E            .byte	$3E
13640 302D                        06            .byte	6
13641 302E                        06            .byte	6
13642 302F                        00            .byte	0
13643 3030                        00            .byte	0
13644                                           ! 1582  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 3031                        00            .byte	0
13646 3032                        00            .byte	0
13647 3033                        18            .byte	$18
13648 3034                        18            .byte	$18
13649 3035                        00            .byte	0
13650 3036                        18            .byte	$18
13651 3037                        18            .byte	$18
13652 3038                        18            .byte	$18
13653 3039                        3C            .byte	$3C
13654 303A                        3C            .byte	$3C
13655 303B                        3C            .byte	$3C
13656 303C                        18            .byte	$18
13657 303D                        00            .byte	0
13658 303E                        00            .byte	0
13659 303F                        00            .byte	0
13660 3040                        00            .byte	0
13661                                           ! 1583  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 3041                        00            .byte	0
13663 3042                        00            .byte	0
13664 3043                        00            .byte	0
13665 3044                        00            .byte	0
13666 3045                        00            .byte	0
13667 3046                        36            .byte	$36
13668 3047                        6C            .byte	$6C
13669 3048                        D8            .byte	$D8
13670 3049                        6C            .byte	$6C
13671 304A                        36            .byte	$36
13672 304B                        00            .byte	0
13673 304C                        00            .byte	0
13674 304D                        00            .byte	0
13675 304E                        00            .byte	0
13676 304F                        00            .byte	0
13677 3050                        00            .byte	0
13678                                           ! 1584  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 3051                        00            .byte	0
13680 3052                        00            .byte	0
13681 3053                        00            .byte	0
13682 3054                        00            .byte	0
13683 3055                        00            .byte	0
13684 3056                        D8            .byte	$D8
13685 3057                        6C            .byte	$6C
13686 3058                        36            .byte	$36
13687 3059                        6C            .byte	$6C
13688 305A                        D8            .byte	$D8
13689 305B                        00            .byte	0
13690 305C                        00            .byte	0
13691 305D                        00            .byte	0
13692 305E                        00            .byte	0
13693 305F                        00            .byte	0
13694 3060                        00            .byte	0
13695                                           ! 1585  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 3061                        11            .byte	$11
13697 3062                        44            .byte	$44
13698 3063                        11            .byte	$11
13699 3064                        44            .byte	$44
13700 3065                        11            .byte	$11
13701 3066                        44            .byte	$44
13702 3067                        11            .byte	$11
13703 3068                        44            .byte	$44
13704 3069                        11            .byte	$11
13705 306A                        44            .byte	$44
13706 306B                        11            .byte	$11
13707 306C                        44            .byte	$44
13708 306D                        11            .byte	$11
13709 306E                        44            .byte	$44
13710 306F                        11            .byte	$11
13711 3070                        44            .byte	$44
13712                                           ! 1586  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 3071                        55            .byte	$55
13714 3072                        AA            .byte	$AA
13715 3073                        55            .byte	$55
13716 3074                        AA            .byte	$AA
13717 3075                        55            .byte	$55
13718 3076                        AA            .byte	$AA
13719 3077                        55            .byte	$55
13720 3078                        AA            .byte	$AA
13721 3079                        55            .byte	$55
13722 307A                        AA            .byte	$AA
13723 307B                        55            .byte	$55
13724 307C                        AA            .byte	$AA
13725 307D                        55            .byte	$55
13726 307E                        AA            .byte	$AA
13727 307F                        55            .byte	$55
13728 3080                        AA            .byte	$AA
13729                                           ! 1587  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 3081                        DD            .byte	$DD
13731 3082                        77            .byte	$77
13732 3083                        DD            .byte	$DD
13733 3084                        77            .byte	$77
13734 3085                        DD            .byte	$DD
13735 3086                        77            .byte	$77
13736 3087                        DD            .byte	$DD
13737 3088                        77            .byte	$77
13738 3089                        DD            .byte	$DD
13739 308A                        77            .byte	$77
13740 308B                        DD            .byte	$DD
13741 308C                        77            .byte	$77
13742 308D                        DD            .byte	$DD
13743 308E                        77            .byte	$77
13744 308F                        DD            .byte	$DD
13745 3090                        77            .byte	$77
13746                                           ! 1588  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 3091                        18            .byte	$18
13748 3092                        18            .byte	$18
13749 3093                        18            .byte	$18
13750 3094                        18            .byte	$18
13751 3095                        18            .byte	$18
13752 3096                        18            .byte	$18
13753 3097                        18            .byte	$18
13754 3098                        18            .byte	$18
13755 3099                        18            .byte	$18
13756 309A                        18            .byte	$18
13757 309B                        18            .byte	$18
13758 309C                        18            .byte	$18
13759 309D                        18            .byte	$18
13760 309E                        18            .byte	$18
13761 309F                        18            .byte	$18
13762 30A0                        18            .byte	$18
13763                                           ! 1589  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13764 30A1                        18            .byte	$18
13765 30A2                        18            .byte	$18
13766 30A3                        18            .byte	$18
13767 30A4                        18            .byte	$18
13768 30A5                        18            .byte	$18
13769 30A6                        18            .byte	$18
13770 30A7                        18            .byte	$18
13771 30A8                        F8            .byte	$F8
13772 30A9                        18            .byte	$18
13773 30AA                        18            .byte	$18
13774 30AB                        18            .byte	$18
13775 30AC                        18            .byte	$18
13776 30AD                        18            .byte	$18
13777 30AE                        18            .byte	$18
13778 30AF                        18            .byte	$18
13779 30B0                        18            .byte	$18
13780                                           ! 1590  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8
13781 30B1                        18            .byte	$18
13782 30B2                        18            .byte	$18
13783 30B3                        18            .byte	$18
13784 30B4                        18            .byte	$18
13785 30B5                        18            .byte	$18
13786 30B6                        F8            .byte	$F8
13787 30B7                        18            .byte	$18
13788                                           ! 1590 , 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13789 30B8                        F8            .byte	$F8
13790 30B9                        18            .byte	$18
13791 30BA                        18            .byte	$18
13792 30BB                        18            .byte	$18
13793 30BC                        18            .byte	$18
13794 30BD                        18            .byte	$18
13795 30BE                        18            .byte	$18
13796 30BF                        18            .byte	$18
13797 30C0                        18            .byte	$18
13798                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30C1                        36            .byte	$36
13800 30C2                        36            .byte	$36
13801 30C3                        36            .byte	$36
13802 30C4                        36            .byte	$36
13803 30C5                        36            .byte	$36
13804 30C6                        36            .byte	$36
13805 30C7                        36            .byte	$36
13806 30C8                        F6            .byte	$F6
13807 30C9                        36            .byte	$36
13808 30CA                        36            .byte	$36
13809 30CB                        36            .byte	$36
13810 30CC                        36            .byte	$36
13811 30CD                        36            .byte	$36
13812 30CE                        36            .byte	$36
13813 30CF                        36            .byte	$36
13814 30D0                        36            .byte	$36
13815                                           ! 1592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30D1                        00            .byte	0
13817 30D2                        00            .byte	0
13818 30D3                        00            .byte	0
13819 30D4                        00            .byte	0
13820 30D5                        00            .byte	0
13821 30D6                        00            .byte	0
13822 30D7                        00            .byte	0
13823 30D8                        FE            .byte	$FE
13824 30D9                        36            .byte	$36
13825 30DA                        36            .byte	$36
13826 30DB                        36            .byte	$36
13827 30DC                        36            .byte	$36
13828 30DD                        36            .byte	$36
13829 30DE                        36            .byte	$36
13830 30DF                        36            .byte	$36
13831 30E0                        36            .byte	$36
13832                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30E1                        00            .byte	0
13834 30E2                        00            .byte	0
13835 30E3                        00            .byte	0
13836 30E4                        00            .byte	0
13837 30E5                        00            .byte	0
13838 30E6                        F8            .byte	$F8
13839 30E7                        18            .byte	$18
13840 30E8                        F8            .byte	$F8
13841 30E9                        18            .byte	$18
13842 30EA                        18            .byte	$18
13843 30EB                        18            .byte	$18
13844 30EC                        18            .byte	$18
13845 30ED                        18            .byte	$18
13846 30EE                        18            .byte	$18
13847 30EF                        18            .byte	$18
13848 30F0                        18            .byte	$18
13849                                           ! 1594  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30F1                        36            .byte	$36
13851 30F2                        36            .byte	$36
13852 30F3                        36            .byte	$36
13853 30F4                        36            .byte	$36
13854 30F5                        36            .byte	$36
13855 30F6                        F6            .byte	$F6
13856 30F7                        06            .byte	6
13857 30F8                        F6            .byte	$F6
13858 30F9                        36            .byte	$36
13859 30FA                        36            .byte	$36
13860 30FB                        36            .byte	$36
13861 30FC                        36            .byte	$36
13862 30FD                        36            .byte	$36
13863 30FE                        36            .byte	$36
13864 30FF                        36            .byte	$36
13865 3100                        36            .byte	$36
13866                                           ! 1595  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 3101                        36            .byte	$36
13868 3102                        36            .byte	$36
13869 3103                        36            .byte	$36
13870 3104                        36            .byte	$36
13871 3105                        36            .byte	$36
13872 3106                        36            .byte	$36
13873 3107                        36            .byte	$36
13874 3108                        36            .byte	$36
13875 3109                        36            .byte	$36
13876 310A                        36            .byte	$36
13877 310B                        36            .byte	$36
13878 310C                        36            .byte	$36
13879 310D                        36            .byte	$36
13880 310E                        36            .byte	$36
13881 310F                        36            .byte	$36
13882 3110                        36            .byte	$36
13883                                           ! 1596  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 3111                        00            .byte	0
13885 3112                        00            .byte	0
13886 3113                        00            .byte	0
13887 3114                        00            .byte	0
13888 3115                        00            .byte	0
13889 3116                        FE            .byte	$FE
13890 3117                        06            .byte	6
13891 3118                        F6            .byte	$F6
13892 3119                        36            .byte	$36
13893 311A                        36            .byte	$36
13894 311B                        36            .byte	$36
13895 311C                        36            .byte	$36
13896 311D                        36            .byte	$36
13897 311E                        36            .byte	$36
13898 311F                        36            .byte	$36
13899 3120                        36            .byte	$36
13900                                           ! 1597  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 3121                        36            .byte	$36
13902 3122                        36            .byte	$36
13903 3123                        36            .byte	$36
13904 3124                        36            .byte	$36
13905 3125                        36            .byte	$36
13906 3126                        F6            .byte	$F6
13907 3127                        06            .byte	6
13908 3128                        FE            .byte	$FE
13909 3129                        00            .byte	0
13910 312A                        00            .byte	0
13911 312B                        00            .byte	0
13912 312C                        00            .byte	0
13913 312D                        00            .byte	0
13914 312E                        00            .byte	0
13915 312F                        00            .byte	0
13916 3130                        00            .byte	0
13917                                           ! 1598  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 3131                        36            .byte	$36
13919 3132                        36            .byte	$36
13920 3133                        36            .byte	$36
13921 3134                        36            .byte	$36
13922 3135                        36            .byte	$36
13923 3136                        36            .byte	$36
13924 3137                        36            .byte	$36
13925 3138                        FE            .byte	$FE
13926 3139                        00            .byte	0
13927 313A                        00            .byte	0
13928 313B                        00            .byte	0
13929 313C                        00            .byte	0
13930 313D                        00            .byte	0
13931 313E                        00            .byte	0
13932 313F                        00            .byte	0
13933 3140                        00            .byte	0
13934                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 3141                        18            .byte	$18
13936 3142                        18            .byte	$18
13937 3143                        18            .byte	$18
13938 3144                        18            .byte	$18
13939 3145                        18            .byte	$18
13940 3146                        F8            .byte	$F8
13941 3147                        18            .byte	$18
13942 3148                        F8            .byte	$F8
13943 3149                        00            .byte	0
13944 314A                        00            .byte	0
13945 314B                        00            .byte	0
13946 314C                        00            .byte	0
13947 314D                        00            .byte	0
13948 314E                        00            .byte	0
13949 314F                        00            .byte	0
13950 3150                        00            .byte	0
13951                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 3151                        00            .byte	0
13953 3152                        00            .byte	0
13954 3153                        00            .byte	0
13955 3154                        00            .byte	0
13956 3155                        00            .byte	0
13957 3156                        00            .byte	0
13958 3157                        00            .byte	0
13959 3158                        F8            .byte	$F8
13960 3159                        18            .byte	$18
13961 315A                        18            .byte	$18
13962 315B                        18            .byte	$18
13963 315C                        18            .byte	$18
13964 315D                        18            .byte	$18
13965 315E                        18            .byte	$18
13966 315F                        18            .byte	$18
13967 3160                        18            .byte	$18
13968                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 3161                        18            .byte	$18
13970 3162                        18            .byte	$18
13971 3163                        18            .byte	$18
13972 3164                        18            .byte	$18
13973 3165                        18            .byte	$18
13974 3166                        18            .byte	$18
13975 3167                        18            .byte	$18
13976 3168                        1F            .byte	$1F
13977 3169                        00            .byte	0
13978 316A                        00            .byte	0
13979 316B                        00            .byte	0
13980 316C                        00            .byte	0
13981 316D                        00            .byte	0
13982 316E                        00            .byte	0
13983 316F                        00            .byte	0
13984 3170                        00            .byte	0
13985                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 3171                        18            .byte	$18
13987 3172                        18            .byte	$18
13988 3173                        18            .byte	$18
13989 3174                        18            .byte	$18
13990 3175                        18            .byte	$18
13991 3176                        18            .byte	$18
13992 3177                        18            .byte	$18
13993 3178                        FF            .byte	$FF
13994 3179                        00            .byte	0
13995 317A                        00            .byte	0
13996 317B                        00            .byte	0
13997 317C                        00            .byte	0
13998 317D                        00            .byte	0
13999 317E                        00            .byte	0
14000 317F                        00            .byte	0
14001 3180                        00            .byte	0
14002                                           ! 1603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 3181                        00            .byte	0
14004 3182                        00            .byte	0
14005 3183                        00            .byte	0
14006 3184                        00            .byte	0
14007 3185                        00            .byte	0
14008 3186                        00            .byte	0
14009 3187                        00            .byte	0
14010 3188                        FF            .byte	$FF
14011 3189                        18            .byte	$18
14012 318A                        18            .byte	$18
14013 318B                        18            .byte	$18
14014 318C                        18            .byte	$18
14015 318D                        18            .byte	$18
14016 318E                        18            .byte	$18
14017 318F                        18            .byte	$18
14018 3190                        18            .byte	$18
14019                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 3191                        18            .byte	$18
14021 3192                        18            .byte	$18
14022 3193                        18            .byte	$18
14023 3194                        18            .byte	$18
14024 3195                        18            .byte	$18
14025 3196                        18            .byte	$18
14026 3197                        18            .byte	$18
14027 3198                        1F            .byte	$1F
14028 3199                        18            .byte	$18
14029 319A                        18            .byte	$18
14030 319B                        18            .byte	$18
14031 319C                        18            .byte	$18
14032 319D                        18            .byte	$18
14033 319E                        18            .byte	$18
14034 319F                        18            .byte	$18
14035 31A0                        18            .byte	$18
14036                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 31A1                        00            .byte	0
14038 31A2                        00            .byte	0
14039 31A3                        00            .byte	0
14040 31A4                        00            .byte	0
14041 31A5                        00            .byte	0
14042 31A6                        00            .byte	0
14043 31A7                        00            .byte	0
14044 31A8                        FF            .byte	$FF
14045 31A9                        00            .byte	0
14046 31AA                        00            .byte	0
14047 31AB                        00            .byte	0
14048 31AC                        00            .byte	0
14049 31AD                        00            .byte	0
14050 31AE                        00            .byte	0
14051 31AF                        00            .byte	0
14052 31B0                        00            .byte	0
14053                                           ! 1606  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31B1                        18            .byte	$18
14055 31B2                        18            .byte	$18
14056 31B3                        18            .byte	$18
14057 31B4                        18            .byte	$18
14058 31B5                        18            .byte	$18
14059 31B6                        18            .byte	$18
14060 31B7                        18            .byte	$18
14061 31B8                        FF            .byte	$FF
14062 31B9                        18            .byte	$18
14063 31BA                        18            .byte	$18
14064 31BB                        18            .byte	$18
14065 31BC                        18            .byte	$18
14066 31BD                        18            .byte	$18
14067 31BE                        18            .byte	$18
14068 31BF                        18            .byte	$18
14069 31C0                        18            .byte	$18
14070                                           ! 1607  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31C1                        18            .byte	$18
14072 31C2                        18            .byte	$18
14073 31C3                        18            .byte	$18
14074 31C4                        18            .byte	$18
14075 31C5                        18            .byte	$18
14076 31C6                        1F            .byte	$1F
14077 31C7                        18            .byte	$18
14078 31C8                        1F            .byte	$1F
14079 31C9                        18            .byte	$18
14080 31CA                        18            .byte	$18
14081 31CB                        18            .byte	$18
14082 31CC                        18            .byte	$18
14083 31CD                        18            .byte	$18
14084 31CE                        18            .byte	$18
14085 31CF                        18            .byte	$18
14086 31D0                        18            .byte	$18
14087                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31D1                        36            .byte	$36
14089 31D2                        36            .byte	$36
14090 31D3                        36            .byte	$36
14091 31D4                        36            .byte	$36
14092 31D5                        36            .byte	$36
14093 31D6                        36            .byte	$36
14094 31D7                        36            .byte	$36
14095 31D8                        37            .byte	$37
14096 31D9                        36            .byte	$36
14097 31DA                        36            .byte	$36
14098 31DB                        36            .byte	$36
14099 31DC                        36            .byte	$36
14100 31DD                        36            .byte	$36
14101 31DE                        36            .byte	$36
14102 31DF                        36            .byte	$36
14103 31E0                        36            .byte	$36
14104                                           ! 1609  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31E1                        36            .byte	$36
14106 31E2                        36            .byte	$36
14107 31E3                        36            .byte	$36
14108 31E4                        36            .byte	$36
14109 31E5                        36            .byte	$36
14110 31E6                        37            .byte	$37
14111 31E7                        30            .byte	$30
14112 31E8                        3F            .byte	$3F
14113 31E9                        00            .byte	0
14114 31EA                        00            .byte	0
14115 31EB                        00            .byte	0
14116 31EC                        00            .byte	0
14117 31ED                        00            .byte	0
14118 31EE                        00            .byte	0
14119 31EF                        00            .byte	0
14120 31F0                        00            .byte	0
14121                                           ! 1610  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14122 31F1                        00            .byte	0
14123 31F2                        00            .byte	0
14124 31F3                        00            .byte	0
14125 31F4                        00            .byte	0
14126 31F5                        00            .byte	0
14127 31F6                        3F            .byte	$3F
14128 31F7                        30            .byte	$30
14129 31F8                        37            .byte	$37
14130 31F9                        36            .byte	$36
14131 31FA                        36            .byte	$36
14132 31FB                        36            .byte	$36
14133 31FC                        36            .byte	$36
14134 31FD                        36            .byte	$36
14135 31FE                        36            .byte	$36
14136 31FF                        36            .byte	$36
14137 3200                        36            .byte	$36
14138                                           ! 1611  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x0
14139 3201                        36            .byte	$36
14140 3202                        36            .byte	$36
14141 3203                        36            .byte	$36
14142 3204                        36            .byte	$36
14143 3205                        36            .byte	$36
14144 3206                        F7            .byte	$F7
14145 3207                        00            .byte	0
14146 3208                        FF            .byte	$FF
14147 3209                        00            .byte	0
14148                                           ! 1611 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14149 320A                        00            .byte	0
14150 320B                        00            .byte	0
14151 320C                        00            .byte	0
14152 320D                        00            .byte	0
14153 320E                        00            .byte	0
14154 320F                        00            .byte	0
14155 3210                        00            .byte	0
14156                                           ! 1612  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 3211                        00            .byte	0
14158 3212                        00            .byte	0
14159 3213                        00            .byte	0
14160 3214                        00            .byte	0
14161 3215                        00            .byte	0
14162 3216                        FF            .byte	$FF
14163 3217                        00            .byte	0
14164 3218                        F7            .byte	$F7
14165 3219                        36            .byte	$36
14166 321A                        36            .byte	$36
14167 321B                        36            .byte	$36
14168 321C                        36            .byte	$36
14169 321D                        36            .byte	$36
14170 321E                        36            .byte	$36
14171 321F                        36            .byte	$36
14172 3220                        36            .byte	$36
14173                                           ! 1613  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 3221                        36            .byte	$36
14175 3222                        36            .byte	$36
14176 3223                        36            .byte	$36
14177 3224                        36            .byte	$36
14178 3225                        36            .byte	$36
14179 3226                        37            .byte	$37
14180 3227                        30            .byte	$30
14181 3228                        37            .byte	$37
14182 3229                        36            .byte	$36
14183 322A                        36            .byte	$36
14184 322B                        36            .byte	$36
14185 322C                        36            .byte	$36
14186 322D                        36            .byte	$36
14187 322E                        36            .byte	$36
14188 322F                        36            .byte	$36
14189 3230                        36            .byte	$36
14190                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 3231                        00            .byte	0
14192 3232                        00            .byte	0
14193 3233                        00            .byte	0
14194 3234                        00            .byte	0
14195 3235                        00            .byte	0
14196 3236                        FF            .byte	$FF
14197 3237                        00            .byte	0
14198 3238                        FF            .byte	$FF
14199 3239                        00            .byte	0
14200 323A                        00            .byte	0
14201 323B                        00            .byte	0
14202 323C                        00            .byte	0
14203 323D                        00            .byte	0
14204 323E                        00            .byte	0
14205 323F                        00            .byte	0
14206 3240                        00            .byte	0
14207                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 3241                        36            .byte	$36
14209 3242                        36            .byte	$36
14210 3243                        36            .byte	$36
14211 3244                        36            .byte	$36
14212 3245                        36            .byte	$36
14213 3246                        F7            .byte	$F7
14214 3247                        00            .byte	0
14215 3248                        F7            .byte	$F7
14216 3249                        36            .byte	$36
14217 324A                        36            .byte	$36
14218 324B                        36            .byte	$36
14219 324C                        36            .byte	$36
14220 324D                        36            .byte	$36
14221 324E                        36            .byte	$36
14222 324F                        36            .byte	$36
14223 3250                        36            .byte	$36
14224                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 3251                        18            .byte	$18
14226 3252                        18            .byte	$18
14227 3253                        18            .byte	$18
14228 3254                        18            .byte	$18
14229 3255                        18            .byte	$18
14230 3256                        FF            .byte	$FF
14231 3257                        00            .byte	0
14232 3258                        FF            .byte	$FF
14233 3259                        00            .byte	0
14234 325A                        00            .byte	0
14235 325B                        00            .byte	0
14236 325C                        00            .byte	0
14237 325D                        00            .byte	0
14238 325E                        00            .byte	0
14239 325F                        00            .byte	0
14240 3260                        00            .byte	0
14241                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 3261                        36            .byte	$36
14243 3262                        36            .byte	$36
14244 3263                        36            .byte	$36
14245 3264                        36            .byte	$36
14246 3265                        36            .byte	$36
14247 3266                        36            .byte	$36
14248 3267                        36            .byte	$36
14249 3268                        FF            .byte	$FF
14250 3269                        00            .byte	0
14251 326A                        00            .byte	0
14252 326B                        00            .byte	0
14253 326C                        00            .byte	0
14254 326D                        00            .byte	0
14255 326E                        00            .byte	0
14256 326F                        00            .byte	0
14257 3270                        00            .byte	0
14258                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 3271                        00            .byte	0
14260 3272                        00            .byte	0
14261 3273                        00            .byte	0
14262 3274                        00            .byte	0
14263 3275                        00            .byte	0
14264 3276                        FF            .byte	$FF
14265 3277                        00            .byte	0
14266 3278                        FF            .byte	$FF
14267 3279                        18            .byte	$18
14268 327A                        18            .byte	$18
14269 327B                        18            .byte	$18
14270 327C                        18            .byte	$18
14271 327D                        18            .byte	$18
14272 327E                        18            .byte	$18
14273 327F                        18            .byte	$18
14274 3280                        18            .byte	$18
14275                                           ! 1619  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 3281                        00            .byte	0
14277 3282                        00            .byte	0
14278 3283                        00            .byte	0
14279 3284                        00            .byte	0
14280 3285                        00            .byte	0
14281 3286                        00            .byte	0
14282 3287                        00            .byte	0
14283 3288                        FF            .byte	$FF
14284 3289                        36            .byte	$36
14285 328A                        36            .byte	$36
14286 328B                        36            .byte	$36
14287 328C                        36            .byte	$36
14288 328D                        36            .byte	$36
14289 328E                        36            .byte	$36
14290 328F                        36            .byte	$36
14291 3290                        36            .byte	$36
14292                                           ! 1620  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 3291                        36            .byte	$36
14294 3292                        36            .byte	$36
14295 3293                        36            .byte	$36
14296 3294                        36            .byte	$36
14297 3295                        36            .byte	$36
14298 3296                        36            .byte	$36
14299 3297                        36            .byte	$36
14300 3298                        3F            .byte	$3F
14301 3299                        00            .byte	0
14302 329A                        00            .byte	0
14303 329B                        00            .byte	0
14304 329C                        00            .byte	0
14305 329D                        00            .byte	0
14306 329E                        00            .byte	0
14307 329F                        00            .byte	0
14308 32A0                        00            .byte	0
14309                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 32A1                        18            .byte	$18
14311 32A2                        18            .byte	$18
14312 32A3                        18            .byte	$18
14313 32A4                        18            .byte	$18
14314 32A5                        18            .byte	$18
14315 32A6                        1F            .byte	$1F
14316 32A7                        18            .byte	$18
14317 32A8                        1F            .byte	$1F
14318 32A9                        00            .byte	0
14319 32AA                        00            .byte	0
14320 32AB                        00            .byte	0
14321 32AC                        00            .byte	0
14322 32AD                        00            .byte	0
14323 32AE                        00            .byte	0
14324 32AF                        00            .byte	0
14325 32B0                        00            .byte	0
14326                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32B1                        00            .byte	0
14328 32B2                        00            .byte	0
14329 32B3                        00            .byte	0
14330 32B4                        00            .byte	0
14331 32B5                        00            .byte	0
14332 32B6                        1F            .byte	$1F
14333 32B7                        18            .byte	$18
14334 32B8                        1F            .byte	$1F
14335 32B9                        18            .byte	$18
14336 32BA                        18            .byte	$18
14337 32BB                        18            .byte	$18
14338 32BC                        18            .byte	$18
14339 32BD                        18            .byte	$18
14340 32BE                        18            .byte	$18
14341 32BF                        18            .byte	$18
14342 32C0                        18            .byte	$18
14343                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32C1                        00            .byte	0
14345 32C2                        00            .byte	0
14346 32C3                        00            .byte	0
14347 32C4                        00            .byte	0
14348 32C5                        00            .byte	0
14349 32C6                        00            .byte	0
14350 32C7                        00            .byte	0
14351 32C8                        3F            .byte	$3F
14352 32C9                        36            .byte	$36
14353 32CA                        36            .byte	$36
14354 32CB                        36            .byte	$36
14355 32CC                        36            .byte	$36
14356 32CD                        36            .byte	$36
14357 32CE                        36            .byte	$36
14358 32CF                        36            .byte	$36
14359 32D0                        36            .byte	$36
14360                                           ! 1624  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32D1                        36            .byte	$36
14362 32D2                        36            .byte	$36
14363 32D3                        36            .byte	$36
14364 32D4                        36            .byte	$36
14365 32D5                        36            .byte	$36
14366 32D6                        36            .byte	$36
14367 32D7                        36            .byte	$36
14368 32D8                        FF            .byte	$FF
14369 32D9                        36            .byte	$36
14370 32DA                        36            .byte	$36
14371 32DB                        36            .byte	$36
14372 32DC                        36            .byte	$36
14373 32DD                        36            .byte	$36
14374 32DE                        36            .byte	$36
14375 32DF                        36            .byte	$36
14376 32E0                        36            .byte	$36
14377                                           ! 1625  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32E1                        18            .byte	$18
14379 32E2                        18            .byte	$18
14380 32E3                        18            .byte	$18
14381 32E4                        18            .byte	$18
14382 32E5                        18            .byte	$18
14383 32E6                        FF            .byte	$FF
14384 32E7                        18            .byte	$18
14385 32E8                        FF            .byte	$FF
14386 32E9                        18            .byte	$18
14387 32EA                        18            .byte	$18
14388 32EB                        18            .byte	$18
14389 32EC                        18            .byte	$18
14390 32ED                        18            .byte	$18
14391 32EE                        18            .byte	$18
14392 32EF                        18            .byte	$18
14393 32F0                        18            .byte	$18
14394                                           ! 1626  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32F1                        18            .byte	$18
14396 32F2                        18            .byte	$18
14397 32F3                        18            .byte	$18
14398 32F4                        18            .byte	$18
14399 32F5                        18            .byte	$18
14400 32F6                        18            .byte	$18
14401 32F7                        18            .byte	$18
14402 32F8                        F8            .byte	$F8
14403 32F9                        00            .byte	0
14404 32FA                        00            .byte	0
14405 32FB                        00            .byte	0
14406 32FC                        00            .byte	0
14407 32FD                        00            .byte	0
14408 32FE                        00            .byte	0
14409 32FF                        00            .byte	0
14410 3300                        00            .byte	0
14411                                           ! 1627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 3301                        00            .byte	0
14413 3302                        00            .byte	0
14414 3303                        00            .byte	0
14415 3304                        00            .byte	0
14416 3305                        00            .byte	0
14417 3306                        00            .byte	0
14418 3307                        00            .byte	0
14419 3308                        1F            .byte	$1F
14420 3309                        18            .byte	$18
14421 330A                        18            .byte	$18
14422 330B                        18            .byte	$18
14423 330C                        18            .byte	$18
14424 330D                        18            .byte	$18
14425 330E                        18            .byte	$18
14426 330F                        18            .byte	$18
14427 3310                        18            .byte	$18
14428                                           ! 1628  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 3311                        FF            .byte	$FF
14430 3312                        FF            .byte	$FF
14431 3313                        FF            .byte	$FF
14432 3314                        FF            .byte	$FF
14433 3315                        FF            .byte	$FF
14434 3316                        FF            .byte	$FF
14435 3317                        FF            .byte	$FF
14436 3318                        FF            .byte	$FF
14437 3319                        FF            .byte	$FF
14438 331A                        FF            .byte	$FF
14439 331B                        FF            .byte	$FF
14440 331C                        FF            .byte	$FF
14441 331D                        FF            .byte	$FF
14442 331E                        FF            .byte	$FF
14443 331F                        FF            .byte	$FF
14444 3320                        FF            .byte	$FF
14445                                           ! 1629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 3321                        00            .byte	0
14447 3322                        00            .byte	0
14448 3323                        00            .byte	0
14449 3324                        00            .byte	0
14450 3325                        00            .byte	0
14451 3326                        00            .byte	0
14452 3327                        00            .byte	0
14453 3328                        FF            .byte	$FF
14454 3329                        FF            .byte	$FF
14455 332A                        FF            .byte	$FF
14456 332B                        FF            .byte	$FF
14457 332C                        FF            .byte	$FF
14458 332D                        FF            .byte	$FF
14459 332E                        FF            .byte	$FF
14460 332F                        FF            .byte	$FF
14461 3330                        FF            .byte	$FF
14462                                           ! 1630  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 3331                        F0            .byte	$F0
14464 3332                        F0            .byte	$F0
14465 3333                        F0            .byte	$F0
14466 3334                        F0            .byte	$F0
14467 3335                        F0            .byte	$F0
14468 3336                        F0            .byte	$F0
14469 3337                        F0            .byte	$F0
14470 3338                        F0            .byte	$F0
14471 3339                        F0            .byte	$F0
14472 333A                        F0            .byte	$F0
14473 333B                        F0            .byte	$F0
14474 333C                        F0            .byte	$F0
14475 333D                        F0            .byte	$F0
14476 333E                        F0            .byte	$F0
14477 333F                        F0            .byte	$F0
14478 3340                        F0            .byte	$F0
14479                                           ! 1631  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14480 3341                        0F            .byte	$F
14481 3342                        0F            .byte	$F
14482 3343                        0F            .byte	$F
14483 3344                        0F            .byte	$F
14484 3345                        0F            .byte	$F
14485 3346                        0F            .byte	$F
14486 3347                        0F            .byte	$F
14487 3348                        0F            .byte	$F
14488 3349                        0F            .byte	$F
14489 334A                        0F            .byte	$F
14490 334B                        0F            .byte	$F
14491 334C                        0F            .byte	$F
14492 334D                        0F            .byte	$F
14493 334E                        0F            .byte	$F
14494 334F                        0F            .byte	$F
14495 3350                        0F            .byte	$F
14496                                           ! 1632  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x
14497 3351                        FF            .byte	$FF
14498 3352                        FF            .byte	$FF
14499 3353                        FF            .byte	$FF
14500 3354                        FF            .byte	$FF
14501 3355                        FF            .byte	$FF
14502 3356                        FF            .byte	$FF
14503 3357                        FF            .byte	$FF
14504 3358                        00            .byte	0
14505 3359                        00            .byte	0
14506 335A                        00            .byte	0
14507 335B                        00            .byte	0
14508                                           ! 1632 00, 0x00, 0x00, 0x00, 0x00,
14509 335C                        00            .byte	0
14510 335D                        00            .byte	0
14511 335E                        00            .byte	0
14512 335F                        00            .byte	0
14513 3360                        00            .byte	0
14514                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 3361                        00            .byte	0
14516 3362                        00            .byte	0
14517 3363                        00            .byte	0
14518 3364                        00            .byte	0
14519 3365                        00            .byte	0
14520 3366                        76            .byte	$76
14521 3367                        DC            .byte	$DC
14522 3368                        D8            .byte	$D8
14523 3369                        D8            .byte	$D8
14524 336A                        D8            .byte	$D8
14525 336B                        DC            .byte	$DC
14526 336C                        76            .byte	$76
14527 336D                        00            .byte	0
14528 336E                        00            .byte	0
14529 336F                        00            .byte	0
14530 3370                        00            .byte	0
14531                                           ! 1634  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 3371                        00            .byte	0
14533 3372                        00            .byte	0
14534 3373                        78            .byte	$78
14535 3374                        CC            .byte	$CC
14536 3375                        CC            .byte	$CC
14537 3376                        CC            .byte	$CC
14538 3377                        D8            .byte	$D8
14539 3378                        CC            .byte	$CC
14540 3379                        C6            .byte	$C6
14541 337A                        C6            .byte	$C6
14542 337B                        C6            .byte	$C6
14543 337C                        CC            .byte	$CC
14544 337D                        00            .byte	0
14545 337E                        00            .byte	0
14546 337F                        00            .byte	0
14547 3380                        00            .byte	0
14548                                           ! 1635  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 3381                        00            .byte	0
14550 3382                        00            .byte	0
14551 3383                        FE            .byte	$FE
14552 3384                        C6            .byte	$C6
14553 3385                        C6            .byte	$C6
14554 3386                        C0            .byte	$C0
14555 3387                        C0            .byte	$C0
14556 3388                        C0            .byte	$C0
14557 3389                        C0            .byte	$C0
14558 338A                        C0            .byte	$C0
14559 338B                        C0            .byte	$C0
14560 338C                        C0            .byte	$C0
14561 338D                        00            .byte	0
14562 338E                        00            .byte	0
14563 338F                        00            .byte	0
14564 3390                        00            .byte	0
14565                                           ! 1636  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 3391                        00            .byte	0
14567 3392                        00            .byte	0
14568 3393                        00            .byte	0
14569 3394                        00            .byte	0
14570 3395                        FE            .byte	$FE
14571 3396                        6C            .byte	$6C
14572 3397                        6C            .byte	$6C
14573 3398                        6C            .byte	$6C
14574 3399                        6C            .byte	$6C
14575 339A                        6C            .byte	$6C
14576 339B                        6C            .byte	$6C
14577 339C                        6C            .byte	$6C
14578 339D                        00            .byte	0
14579 339E                        00            .byte	0
14580 339F                        00            .byte	0
14581 33A0                        00            .byte	0
14582                                           ! 1637  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 33A1                        00            .byte	0
14584 33A2                        00            .byte	0
14585 33A3                        00            .byte	0
14586 33A4                        FE            .byte	$FE
14587 33A5                        C6            .byte	$C6
14588 33A6                        60            .byte	$60
14589 33A7                        30            .byte	$30
14590 33A8                        18            .byte	$18
14591 33A9                        30            .byte	$30
14592 33AA                        60            .byte	$60
14593 33AB                        C6            .byte	$C6
14594 33AC                        FE            .byte	$FE
14595 33AD                        00            .byte	0
14596 33AE                        00            .byte	0
14597 33AF                        00            .byte	0
14598 33B0                        00            .byte	0
14599                                           ! 1638  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33B1                        00            .byte	0
14601 33B2                        00            .byte	0
14602 33B3                        00            .byte	0
14603 33B4                        00            .byte	0
14604 33B5                        00            .byte	0
14605 33B6                        7E            .byte	$7E
14606 33B7                        D8            .byte	$D8
14607 33B8                        D8            .byte	$D8
14608 33B9                        D8            .byte	$D8
14609 33BA                        D8            .byte	$D8
14610 33BB                        D8            .byte	$D8
14611 33BC                        70            .byte	$70
14612 33BD                        00            .byte	0
14613 33BE                        00            .byte	0
14614 33BF                        00            .byte	0
14615 33C0                        00            .byte	0
14616                                           ! 1639  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33C1                        00            .byte	0
14618 33C2                        00            .byte	0
14619 33C3                        00            .byte	0
14620 33C4                        00            .byte	0
14621 33C5                        66            .byte	$66
14622 33C6                        66            .byte	$66
14623 33C7                        66            .byte	$66
14624 33C8                        66            .byte	$66
14625 33C9                        66            .byte	$66
14626 33CA                        7C            .byte	$7C
14627 33CB                        60            .byte	$60
14628 33CC                        60            .byte	$60
14629 33CD                        C0            .byte	$C0
14630 33CE                        00            .byte	0
14631 33CF                        00            .byte	0
14632 33D0                        00            .byte	0
14633                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33D1                        00            .byte	0
14635 33D2                        00            .byte	0
14636 33D3                        00            .byte	0
14637 33D4                        00            .byte	0
14638 33D5                        76            .byte	$76
14639 33D6                        DC            .byte	$DC
14640 33D7                        18            .byte	$18
14641 33D8                        18            .byte	$18
14642 33D9                        18            .byte	$18
14643 33DA                        18            .byte	$18
14644 33DB                        18            .byte	$18
14645 33DC                        18            .byte	$18
14646 33DD                        00            .byte	0
14647 33DE                        00            .byte	0
14648 33DF                        00            .byte	0
14649 33E0                        00            .byte	0
14650                                           ! 1641  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33E1                        00            .byte	0
14652 33E2                        00            .byte	0
14653 33E3                        00            .byte	0
14654 33E4                        7E            .byte	$7E
14655 33E5                        18            .byte	$18
14656 33E6                        3C            .byte	$3C
14657 33E7                        66            .byte	$66
14658 33E8                        66            .byte	$66
14659 33E9                        66            .byte	$66
14660 33EA                        3C            .byte	$3C
14661 33EB                        18            .byte	$18
14662 33EC                        7E            .byte	$7E
14663 33ED                        00            .byte	0
14664 33EE                        00            .byte	0
14665 33EF                        00            .byte	0
14666 33F0                        00            .byte	0
14667                                           ! 1642  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33F1                        00            .byte	0
14669 33F2                        00            .byte	0
14670 33F3                        00            .byte	0
14671 33F4                        38            .byte	$38
14672 33F5                        6C            .byte	$6C
14673 33F6                        C6            .byte	$C6
14674 33F7                        C6            .byte	$C6
14675 33F8                        FE            .byte	$FE
14676 33F9                        C6            .byte	$C6
14677 33FA                        C6            .byte	$C6
14678 33FB                        6C            .byte	$6C
14679 33FC                        38            .byte	$38
14680 33FD                        00            .byte	0
14681 33FE                        00            .byte	0
14682 33FF                        00            .byte	0
14683 3400                        00            .byte	0
14684                                           ! 1643  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 3401                        00            .byte	0
14686 3402                        00            .byte	0
14687 3403                        38            .byte	$38
14688 3404                        6C            .byte	$6C
14689 3405                        C6            .byte	$C6
14690 3406                        C6            .byte	$C6
14691 3407                        C6            .byte	$C6
14692 3408                        6C            .byte	$6C
14693 3409                        6C            .byte	$6C
14694 340A                        6C            .byte	$6C
14695 340B                        6C            .byte	$6C
14696 340C                        EE            .byte	$EE
14697 340D                        00            .byte	0
14698 340E                        00            .byte	0
14699 340F                        00            .byte	0
14700 3410                        00            .byte	0
14701                                           ! 1644  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 3411                        00            .byte	0
14703 3412                        00            .byte	0
14704 3413                        1E            .byte	$1E
14705 3414                        30            .byte	$30
14706 3415                        18            .byte	$18
14707 3416                        0C            .byte	$C
14708 3417                        3E            .byte	$3E
14709 3418                        66            .byte	$66
14710 3419                        66            .byte	$66
14711 341A                        66            .byte	$66
14712 341B                        66            .byte	$66
14713 341C                        3C            .byte	$3C
14714 341D                        00            .byte	0
14715 341E                        00            .byte	0
14716 341F                        00            .byte	0
14717 3420                        00            .byte	0
14718                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 3421                        00            .byte	0
14720 3422                        00            .byte	0
14721 3423                        00            .byte	0
14722 3424                        00            .byte	0
14723 3425                        00            .byte	0
14724 3426                        7E            .byte	$7E
14725 3427                        DB            .byte	$DB
14726 3428                        DB            .byte	$DB
14727 3429                        DB            .byte	$DB
14728 342A                        7E            .byte	$7E
14729 342B                        00            .byte	0
14730 342C                        00            .byte	0
14731 342D                        00            .byte	0
14732 342E                        00            .byte	0
14733 342F                        00            .byte	0
14734 3430                        00            .byte	0
14735                                           ! 1646  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 3431                        00            .byte	0
14737 3432                        00            .byte	0
14738 3433                        00            .byte	0
14739 3434                        03            .byte	3
14740 3435                        06            .byte	6
14741 3436                        7E            .byte	$7E
14742 3437                        DB            .byte	$DB
14743 3438                        DB            .byte	$DB
14744 3439                        F3            .byte	$F3
14745 343A                        7E            .byte	$7E
14746 343B                        60            .byte	$60
14747 343C                        C0            .byte	$C0
14748 343D                        00            .byte	0
14749 343E                        00            .byte	0
14750 343F                        00            .byte	0
14751 3440                        00            .byte	0
14752                                           ! 1647  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 3441                        00            .byte	0
14754 3442                        00            .byte	0
14755 3443                        1C            .byte	$1C
14756 3444                        30            .byte	$30
14757 3445                        60            .byte	$60
14758 3446                        60            .byte	$60
14759 3447                        7C            .byte	$7C
14760 3448                        60            .byte	$60
14761 3449                        60            .byte	$60
14762 344A                        60            .byte	$60
14763 344B                        30            .byte	$30
14764 344C                        1C            .byte	$1C
14765 344D                        00            .byte	0
14766 344E                        00            .byte	0
14767 344F                        00            .byte	0
14768 3450                        00            .byte	0
14769                                           ! 1648  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 3451                        00            .byte	0
14771 3452                        00            .byte	0
14772 3453                        00            .byte	0
14773 3454                        7C            .byte	$7C
14774 3455                        C6            .byte	$C6
14775 3456                        C6            .byte	$C6
14776 3457                        C6            .byte	$C6
14777 3458                        C6            .byte	$C6
14778 3459                        C6            .byte	$C6
14779 345A                        C6            .byte	$C6
14780 345B                        C6            .byte	$C6
14781 345C                        C6            .byte	$C6
14782 345D                        00            .byte	0
14783 345E                        00            .byte	0
14784 345F                        00            .byte	0
14785 3460                        00            .byte	0
14786                                           ! 1649  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 3461                        00            .byte	0
14788 3462                        00            .byte	0
14789 3463                        00            .byte	0
14790 3464                        00            .byte	0
14791 3465                        FE            .byte	$FE
14792 3466                        00            .byte	0
14793 3467                        00            .byte	0
14794 3468                        FE            .byte	$FE
14795 3469                        00            .byte	0
14796 346A                        00            .byte	0
14797 346B                        FE            .byte	$FE
14798 346C                        00            .byte	0
14799 346D                        00            .byte	0
14800 346E                        00            .byte	0
14801 346F                        00            .byte	0
14802 3470                        00            .byte	0
14803                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 3471                        00            .byte	0
14805 3472                        00            .byte	0
14806 3473                        00            .byte	0
14807 3474                        00            .byte	0
14808 3475                        18            .byte	$18
14809 3476                        18            .byte	$18
14810 3477                        7E            .byte	$7E
14811 3478                        18            .byte	$18
14812 3479                        18            .byte	$18
14813 347A                        00            .byte	0
14814 347B                        00            .byte	0
14815 347C                        FF            .byte	$FF
14816 347D                        00            .byte	0
14817 347E                        00            .byte	0
14818 347F                        00            .byte	0
14819 3480                        00            .byte	0
14820                                           ! 1651  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 3481                        00            .byte	0
14822 3482                        00            .byte	0
14823 3483                        00            .byte	0
14824 3484                        30            .byte	$30
14825 3485                        18            .byte	$18
14826 3486                        0C            .byte	$C
14827 3487                        06            .byte	6
14828 3488                        0C            .byte	$C
14829 3489                        18            .byte	$18
14830 348A                        30            .byte	$30
14831 348B                        00            .byte	0
14832 348C                        7E            .byte	$7E
14833 348D                        00            .byte	0
14834 348E                        00            .byte	0
14835 348F                        00            .byte	0
14836 3490                        00            .byte	0
14837                                           ! 1652  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14838 3491                        00            .byte	0
14839 3492                        00            .byte	0
14840 3493                        00            .byte	0
14841 3494                        0C            .byte	$C
14842 3495                        18            .byte	$18
14843 3496                        30            .byte	$30
14844 3497                        60            .byte	$60
14845 3498                        30            .byte	$30
14846 3499                        18            .byte	$18
14847 349A                        0C            .byte	$C
14848 349B                        00            .byte	0
14849 349C                        7E            .byte	$7E
14850 349D                        00            .byte	0
14851 349E                        00            .byte	0
14852 349F                        00            .byte	0
14853 34A0                        00            .byte	0
14854                                           ! 1653  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0
14855 34A1                        00            .byte	0
14856 34A2                        00            .byte	0
14857 34A3                        0E            .byte	$E
14858 34A4                        1B            .byte	$1B
14859 34A5                        1B            .byte	$1B
14860 34A6                        18            .byte	$18
14861 34A7                        18            .byte	$18
14862 34A8                        18            .byte	$18
14863 34A9                        18            .byte	$18
14864 34AA                        18            .byte	$18
14865 34AB                        18            .byte	$18
14866 34AC                        18            .byte	$18
14867 34AD                        18            .byte	$18
14868                                           ! 1653 x18, 0x18, 0x18,
14869 34AE                        18            .byte	$18
14870 34AF                        18            .byte	$18
14871 34B0                        18            .byte	$18
14872                                           ! 1654  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34B1                        18            .byte	$18
14874 34B2                        18            .byte	$18
14875 34B3                        18            .byte	$18
14876 34B4                        18            .byte	$18
14877 34B5                        18            .byte	$18
14878 34B6                        18            .byte	$18
14879 34B7                        18            .byte	$18
14880 34B8                        18            .byte	$18
14881 34B9                        D8            .byte	$D8
14882 34BA                        D8            .byte	$D8
14883 34BB                        D8            .byte	$D8
14884 34BC                        70            .byte	$70
14885 34BD                        00            .byte	0
14886 34BE                        00            .byte	0
14887 34BF                        00            .byte	0
14888 34C0                        00            .byte	0
14889                                           ! 1655  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34C1                        00            .byte	0
14891 34C2                        00            .byte	0
14892 34C3                        00            .byte	0
14893 34C4                        00            .byte	0
14894 34C5                        18            .byte	$18
14895 34C6                        18            .byte	$18
14896 34C7                        00            .byte	0
14897 34C8                        7E            .byte	$7E
14898 34C9                        00            .byte	0
14899 34CA                        18            .byte	$18
14900 34CB                        18            .byte	$18
14901 34CC                        00            .byte	0
14902 34CD                        00            .byte	0
14903 34CE                        00            .byte	0
14904 34CF                        00            .byte	0
14905 34D0                        00            .byte	0
14906                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34D1                        00            .byte	0
14908 34D2                        00            .byte	0
14909 34D3                        00            .byte	0
14910 34D4                        00            .byte	0
14911 34D5                        00            .byte	0
14912 34D6                        76            .byte	$76
14913 34D7                        DC            .byte	$DC
14914 34D8                        00            .byte	0
14915 34D9                        76            .byte	$76
14916 34DA                        DC            .byte	$DC
14917 34DB                        00            .byte	0
14918 34DC                        00            .byte	0
14919 34DD                        00            .byte	0
14920 34DE                        00            .byte	0
14921 34DF                        00            .byte	0
14922 34E0                        00            .byte	0
14923                                           ! 1657  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34E1                        00            .byte	0
14925 34E2                        38            .byte	$38
14926 34E3                        6C            .byte	$6C
14927 34E4                        6C            .byte	$6C
14928 34E5                        38            .byte	$38
14929 34E6                        00            .byte	0
14930 34E7                        00            .byte	0
14931 34E8                        00            .byte	0
14932 34E9                        00            .byte	0
14933 34EA                        00            .byte	0
14934 34EB                        00            .byte	0
14935 34EC                        00            .byte	0
14936 34ED                        00            .byte	0
14937 34EE                        00            .byte	0
14938 34EF                        00            .byte	0
14939 34F0                        00            .byte	0
14940                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34F1                        00            .byte	0
14942 34F2                        00            .byte	0
14943 34F3                        00            .byte	0
14944 34F4                        00            .byte	0
14945 34F5                        00            .byte	0
14946 34F6                        00            .byte	0
14947 34F7                        00            .byte	0
14948 34F8                        18            .byte	$18
14949 34F9                        18            .byte	$18
14950 34FA                        00            .byte	0
14951 34FB                        00            .byte	0
14952 34FC                        00            .byte	0
14953 34FD                        00            .byte	0
14954 34FE                        00            .byte	0
14955 34FF                        00            .byte	0
14956 3500                        00            .byte	0
14957                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 3501                        00            .byte	0
14959 3502                        00            .byte	0
14960 3503                        00            .byte	0
14961 3504                        00            .byte	0
14962 3505                        00            .byte	0
14963 3506                        00            .byte	0
14964 3507                        00            .byte	0
14965 3508                        00            .byte	0
14966 3509                        18            .byte	$18
14967 350A                        00            .byte	0
14968 350B                        00            .byte	0
14969 350C                        00            .byte	0
14970 350D                        00            .byte	0
14971 350E                        00            .byte	0
14972 350F                        00            .byte	0
14973 3510                        00            .byte	0
14974                                           ! 1660  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 3511                        00            .byte	0
14976 3512                        0F            .byte	$F
14977 3513                        0C            .byte	$C
14978 3514                        0C            .byte	$C
14979 3515                        0C            .byte	$C
14980 3516                        0C            .byte	$C
14981 3517                        0C            .byte	$C
14982 3518                        EC            .byte	$EC
14983 3519                        6C            .byte	$6C
14984 351A                        6C            .byte	$6C
14985 351B                        3C            .byte	$3C
14986 351C                        1C            .byte	$1C
14987 351D                        00            .byte	0
14988 351E                        00            .byte	0
14989 351F                        00            .byte	0
14990 3520                        00            .byte	0
14991                                           ! 1661  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 3521                        00            .byte	0
14993 3522                        D8            .byte	$D8
14994 3523                        6C            .byte	$6C
14995 3524                        6C            .byte	$6C
14996 3525                        6C            .byte	$6C
14997 3526                        6C            .byte	$6C
14998 3527                        6C            .byte	$6C
14999 3528                        00            .byte	0
15000 3529                        00            .byte	0
15001 352A                        00            .byte	0
15002 352B                        00            .byte	0
15003 352C                        00            .byte	0
15004 352D                        00            .byte	0
15005 352E                        00            .byte	0
15006 352F                        00            .byte	0
15007 3530                        00            .byte	0
15008                                           ! 1662  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 3531                        00            .byte	0
15010 3532                        70            .byte	$70
15011 3533                        D8            .byte	$D8
15012 3534                        30            .byte	$30
15013 3535                        60            .byte	$60
15014 3536                        C8            .byte	$C8
15015 3537                        F8            .byte	$F8
15016 3538                        00            .byte	0
15017 3539                        00            .byte	0
15018 353A                        00            .byte	0
15019 353B                        00            .byte	0
15020 353C                        00            .byte	0
15021 353D                        00            .byte	0
15022 353E                        00            .byte	0
15023 353F                        00            .byte	0
15024 3540                        00            .byte	0
15025                                           ! 1663  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 3541                        00            .byte	0
15027 3542                        00            .byte	0
15028 3543                        00            .byte	0
15029 3544                        00            .byte	0
15030 3545                        7C            .byte	$7C
15031 3546                        7C            .byte	$7C
15032 3547                        7C            .byte	$7C
15033 3548                        7C            .byte	$7C
15034 3549                        7C            .byte	$7C
15035 354A                        7C            .byte	$7C
15036 354B                        7C            .byte	$7C
15037 354C                        00            .byte	0
15038 354D                        00            .byte	0
15039 354E                        00            .byte	0
15040 354F                        00            .byte	0
15041 3550                        00            .byte	0
15042                                           ! 1664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 3551                        00            .byte	0
15044 3552                        00            .byte	0
15045 3553                        00            .byte	0
15046 3554                        00            .byte	0
15047 3555                        00            .byte	0
15048 3556                        00            .byte	0
15049 3557                        00            .byte	0
15050 3558                        00            .byte	0
15051 3559                        00            .byte	0
15052 355A                        00            .byte	0
15053 355B                        00            .byte	0
15054 355C                        00            .byte	0
15055 355D                        00            .byte	0
15056 355E                        00            .byte	0
15057 355F                        00            .byte	0
15058                                           ! 1665 };
15059 3560                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1666 static Bit8u vgafont14alt[1]={0x00};
15062                       00003561            _vgafont14alt:
15063 3561                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1667 static Bit8u vgafont16alt[1]={0x00};
15066                       00003562            _vgafont16alt:
15067 3562                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1668 #asm
15070                                           !BCC_ASM
15071                       00003563            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 3563           BA                   03C2    mov dx, #0x3C2
15074 3566           B0                     C3    mov al, #0xC3
15075 3568           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3569           BA                   03C4    mov dx, #0x3C4
15078 356C           B0                     04    mov al, #0x04
15079 356E           EE                           outb dx,al
15080 356F           BA                   03C5    mov dx, #0x3C5
15081 3572           B0                     02    mov al, #0x02
15082 3574           EE                           outb dx,al
15083 3575           BB                   357F    mov bx, #msg_vga_init
15084 3578           53                           push bx
15085 3579           E8         46C4              call _printf
15086 357C           44                           inc sp
15087 357D           44                           inc sp
15088 357E           C3                           ret
15089                       0000357F            msg_vga_init:
15090 357F                        56            .ascii "VGABios $Id$"
15091 358B                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1690 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1691 #asm
15095                                           !BCC_ASM
15096                       0000358E            init_bios_area:
15097 358E           1E                           push ds
15098 358F           B8                   0040    mov ax, # 0x40
15099 3592           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 3594           BB                   0010    mov bx, # 0x10
15102 3597           8B07                         mov ax, [bx]
15103 3599           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 359C           0D                   0020    or ax, #0x0020
15106 359F           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 35A1           BB                   0085    mov bx, # 0x85
15110 35A4           B0                     10    mov al, #0x10
15111 35A6           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35A8           BB                   0087    mov bx, # 0x87
15114 35AB           B0                     60    mov al, #0x60
15115 35AD           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35AF           BB                   0088    mov bx, # 0x88
15118 35B2           B0                     F9    mov al, #0xf9
15119 35B4           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35B6           BB                   0089    mov bx, # 0x89
15122 35B9           B0                     51    mov al, #0x51
15123 35BB           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35BD           BB                   0065    mov bx, # 0x65
15126 35C0           B0                     09    mov al, #0x09
15127 35C2           8807                         mov [bx], al
15128 35C4           1F                           pop ds
15129 35C5           C3                           ret
15130                       000035C6            _video_save_pointer_table:
15131 35C6                      0291              .word _video_param_table
15132 35C8                      C000              .word 0xc000
15133 35CA                      0000              .word 0
15134 35CC                      0000              .word 0
15135 35CE                      0000              .word 0
15136 35D0                      0000              .word 0
15137 35D2                      0000              .word 0
15138 35D4                      0000              .word 0
15139 35D6                      0000              .word 0
15140 35D8                      0000              .word 0
15141 35DA                      0000              .word 0
15142 35DC                      0000              .word 0
15143 35DE                      0000              .word 0
15144 35E0                      0000              .word 0
15145                                           ! 1741 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1742 static void display_splash_screen()
15148                                           ! 1743 {
15149                                           
15150                       000035E2            _display_splash_screen:
15151                                           ! 1744 }
15152 35E2           C3                         ret
15153                                           ! 1745 static void display_info()
15154                                           ! 1746 {
15155                       000035E3            _display_info:
15156                                           ! 1747 #asm
15157                                           !BCC_ASM
15158 35E3           B8                   C000   mov ax,#0xc000
15159 35E6           8ED8                        mov ds,ax
15160 35E8           BE                   0022   mov si,#vgabios_name
15161 35EB           E8         0013             call _display_string
15162 35EE           BE                   0038   mov si,#vgabios_version
15163 35F1           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 35F4           BE                   007E   mov si,#vgabios_license
15169 35F7           E8         0007             call _display_string
15170 35FA           BE                   00B3   mov si,#vgabios_website
15171 35FD           E8         0001             call _display_string
15172                                           ! 1762 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1763 }
15175 3600           C3                         ret
15176                                           ! 1764 static void display_string()
15177                                           ! 1765 {
15178                       00003601            _display_string:
15179                                           ! 1766 #asm
15180                                           !BCC_ASM
15181 3601           8CD8                        mov ax,ds
15182 3603           8EC0                        mov es,ax
15183 3605           89F7                        mov di,si
15184 3607           31C9                        xor cx,cx
15185 3609           F7D1                        not cx
15186 360B           30C0                        xor al,al
15187 360D           FC                          cld
15188 360E           F2                          repne
15189 360F           AE                           scasb
15190 3610           F7D1                        not cx
15191 3612           49                          dec cx
15192 3613           51                          push cx
15193 3614           B8                   0300   mov ax,#0x0300
15194 3617           BB                   0000   mov bx,#0x0000
15195 361A           CD                     10   int #0x10
15196 361C           59                          pop cx
15197 361D           B8                   1301   mov ax,#0x1301
15198 3620           BB                   000B   mov bx,#0x000b
15199 3623           89F5                        mov bp,si
15200 3625           CD                     10   int #0x10
15201                                           ! 1787 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1788 }
15204 3627           C3                         ret
15205                                           ! 1789 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1790   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       00003628            _int10_func:
15208                                           !BCC_EOS
15209                                           ! 1791 {
15210                                           ! 1792  switch(( AX >> 8 ))
15211 3628           55                         push	bp
15212 3629           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 362B           8B46         12            mov	ax,$12[bp]
15215 362E           88E0                       mov	al,ah
15216 3630           30E4                       xor	ah,ah
15217                                           ! 1793   {
15218 3632           E9         04D7            br 	.3
15219                                           ! 1794    case 0x00:
15220                                           ! 1795      biosfn_set_video_mode(( AX & 0x00ff ));
15221                       00003635            .4:
15222                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15223 3635           8A46         12            mov	al,$12[bp]
15224                                           ! Debug: list unsigned char = al+0 (used reg = )
15225 3638           30E4                       xor	ah,ah
15226 363A           50                         push	ax
15227                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15228 363B           E8         0524            call	_biosfn_set_video_mode
15229 363E           44                         inc	sp
15230 363F           44                         inc	sp
15231                                           !BCC_EOS
15232                                           ! 1796      switch(( AX & 0x00ff )&0x7F)
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15234 3640           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15236 3643           24                     7F  and	al,*$7F
15237                                           ! 1797       {case 6:
15238 3645           EB           24            jmp .7
15239                                           ! 1798         AX = ((AX & 0xff00) | (0x3F));
15240                       00003647            .8:
15241                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15242 3647           8B46         12            mov	ax,$12[bp]
15243 364A           30C0                       xor	al,al
15244                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15245 364C           0C                     3F  or	al,*$3F
15246                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15247 364E           8946         12            mov	$12[bp],ax
15248                                           !BCC_EOS
15249                                           ! 1799         break;
15250 3651           EB           3D            jmp .5
15251                                           !BCC_EOS
15252                                           ! 1800        case 0:
15253                                           ! 1801        case 1:
15254                       00003653            .9:
15255                                           ! 1802        case 2:
15256                       00003653            .A:
15257                                           ! 1803        case 3:
15258                       00003653            .B:
15259                                           ! 1804        case 4:
15260                       00003653            .C:
15261                                           ! 1805        case 5:
15262                       00003653            .D:
15263                                           ! 1806        case 7:
15264                       00003653            .E:
15265                                           ! 1807         AX = ((AX & 0xff00) | (0x30));
15266                       00003653            .F:
15267                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15268 3653           8B46         12            mov	ax,$12[bp]
15269 3656           30C0                       xor	al,al
15270                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15271 3658           0C                     30  or	al,*$30
15272                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15273 365A           8946         12            mov	$12[bp],ax
15274                                           !BCC_EOS
15275                                           ! 1808         break;
15276 365D           EB           31            jmp .5
15277                                           !BCC_EOS
15278                                           ! 1809       default:
15279                                           ! 1810         AX = ((AX & 0xff00) | (0x20));
15280                       0000365F            .10:
15281                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15282 365F           8B46         12            mov	ax,$12[bp]
15283 3662           30C0                       xor	al,al
15284                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15285 3664           0C                     20  or	al,*$20
15286                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15287 3666           8946         12            mov	$12[bp],ax
15288                                           !BCC_EOS
15289                                           ! 1811       }
15290                                           ! 1812      break;
15291 3669           EB           25            jmp .5
15292                       0000366B            .7:
15293 366B           2C                     00  sub	al,*0
15294 366D           72           F0            jb 	.10
15295 366F           3C                     07  cmp	al,*7
15296 3671           77           1B            ja  	.11
15297 3673           30E4                       xor	ah,ah
15298 3675           D1E0                       shl	ax,*1
15299 3677           89C3                       mov	bx,ax
15300 3679           2E                         seg	cs
15301 367A           FFA7       367E            br	.12[bx]
15302                       0000367E            .12:
15303 367E                      3653            .word	.9
15304 3680                      3653            .word	.A
15305 3682                      3653            .word	.B
15306 3684                      3653            .word	.C
15307 3686                      3653            .word	.D
15308 3688                      3653            .word	.E
15309 368A                      3647            .word	.8
15310 368C                      3653            .word	.F
15311                       0000368E            .11:
15312 368E           EB           CF            jmp	.10
15313                       00003690            .5:
15314 3690           E9         04CD            br 	.1
15315                                           !BCC_EOS
15316                                           ! 1813    case 0x01:
15317                                           ! 1814      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15318                       00003693            .13:
15319                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15320 3693           8A46         10            mov	al,$10[bp]
15321                                           ! Debug: list unsigned char = al+0 (used reg = )
15322 3696           30E4                       xor	ah,ah
15323 3698           50                         push	ax
15324                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15325 3699           8B46         10            mov	ax,$10[bp]
15326 369C           88E0                       mov	al,ah
15327 369E           30E4                       xor	ah,ah
15328                                           ! Debug: list unsigned int = ax+0 (used reg = )
15329 36A0           50                         push	ax
15330                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15331 36A1           E8         0B56            call	_biosfn_set_cursor_shape
15332 36A4           83C4                   04  add	sp,*4
15333                                           !BCC_EOS
15334                                           ! 1815      break;
15335 36A7           E9         04B6            br 	.1
15336                                           !BCC_EOS
15337                                           ! 1816    case 0x02:
15338                                           ! 1817      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15339                       000036AA            .14:
15340                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15341 36AA           FF76         0E            push	$E[bp]
15342                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15343 36AD           8B46         0C            mov	ax,$C[bp]
15344 36B0           88E0                       mov	al,ah
15345 36B2           30E4                       xor	ah,ah
15346                                           ! Debug: list unsigned int = ax+0 (used reg = )
15347 36B4           50                         push	ax
15348                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15349 36B5           E8         0C5D            call	_biosfn_set_cursor_pos
15350 36B8           83C4                   04  add	sp,*4
15351                                           !BCC_EOS
15352                                           ! 1818      break;
15353 36BB           E9         04A2            br 	.1
15354                                           !BCC_EOS
15355                                           ! 1819    case 0x03:
15356                                           ! 1820      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15357                       000036BE            .15:
15358                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15359 36BE           8D5E         0E            lea	bx,$E[bp]
15360 36C1           53                         push	bx
15361                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15362 36C2           8D5E         10            lea	bx,$10[bp]
15363 36C5           53                         push	bx
15364                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15365 36C6           8B46         0C            mov	ax,$C[bp]
15366 36C9           88E0                       mov	al,ah
15367 36CB           30E4                       xor	ah,ah
15368                                           ! Debug: list unsigned int = ax+0 (used reg = )
15369 36CD           50                         push	ax
15370                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15371 36CE           E8         0D44            call	_biosfn_get_cursor_pos
15372 36D1           83C4                   06  add	sp,*6
15373                                           !BCC_EOS
15374                                           ! 1821      break;
15375 36D4           E9         0489            br 	.1
15376                                           !BCC_EOS
15377                                           ! 1822    case 0x04:
15378                                           ! 1823      AX=0x00;
15379                       000036D7            .16:
15380                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15381 36D7           31C0                       xor	ax,ax
15382 36D9           8946         12            mov	$12[bp],ax
15383                                           !BCC_EOS
15384                                           ! 1824      BX=0x00;
15385                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15386 36DC           31C0                       xor	ax,ax
15387 36DE           8946         0C            mov	$C[bp],ax
15388                                           !BCC_EOS
15389                                           ! 1825      CX=0x00;
15390                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15391 36E1           31C0                       xor	ax,ax
15392 36E3           8946         10            mov	$10[bp],ax
15393                                           !BCC_EOS
15394                                           ! 1826      DX=0x00;
15395                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15396 36E6           31C0                       xor	ax,ax
15397 36E8           8946         0E            mov	$E[bp],ax
15398                                           !BCC_EOS
15399                                           ! 1827      break;
15400 36EB           E9         0472            br 	.1
15401                                           !BCC_EOS
15402                                           ! 1828    case 0x05:
15403                                           ! 1829      biosfn_set_active_page(( AX & 0x00ff ));
15404                       000036EE            .17:
15405                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15406 36EE           8A46         12            mov	al,$12[bp]
15407                                           ! Debug: list unsigned char = al+0 (used reg = )
15408 36F1           30E4                       xor	ah,ah
15409 36F3           50                         push	ax
15410                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15411 36F4           E8         0D93            call	_biosfn_set_active_page
15412 36F7           44                         inc	sp
15413 36F8           44                         inc	sp
15414                                           !BCC_EOS
15415                                           ! 1830      break;
15416 36F9           E9         0464            br 	.1
15417                                           !BCC_EOS
15418                                           ! 1831    case 0x06:
15419                                           ! 1832      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),
15420                       000036FC            .18:
15421                                           ! 1832 0xFF,1);
15422                                           ! Debug: list int = const 1 (used reg = )
15423 36FC           B8                   0001  mov	ax,*1
15424 36FF           50                         push	ax
15425                                           ! Debug: list int = const $FF (used reg = )
15426 3700           B8                   00FF  mov	ax,#$FF
15427 3703           50                         push	ax
15428                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15429 3704           8A46         0E            mov	al,$E[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 3707           30E4                       xor	ah,ah
15432 3709           50                         push	ax
15433                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15434 370A           8B46         0E            mov	ax,$E[bp]
15435 370D           88E0                       mov	al,ah
15436 370F           30E4                       xor	ah,ah
15437                                           ! Debug: list unsigned int = ax+0 (used reg = )
15438 3711           50                         push	ax
15439                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15440 3712           8A46         10            mov	al,$10[bp]
15441                                           ! Debug: list unsigned char = al+0 (used reg = )
15442 3715           30E4                       xor	ah,ah
15443 3717           50                         push	ax
15444                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15445 3718           8B46         10            mov	ax,$10[bp]
15446 371B           88E0                       mov	al,ah
15447 371D           30E4                       xor	ah,ah
15448                                           ! Debug: list unsigned int = ax+0 (used reg = )
15449 371F           50                         push	ax
15450                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15451 3720           8B46         0C            mov	ax,$C[bp]
15452 3723           88E0                       mov	al,ah
15453 3725           30E4                       xor	ah,ah
15454                                           ! Debug: list unsigned int = ax+0 (used reg = )
15455 3727           50                         push	ax
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15457 3728           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 372B           30E4                       xor	ah,ah
15460 372D           50                         push	ax
15461                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15462 372E           E8         11DC            call	_biosfn_scroll
15463 3731           83C4                   10  add	sp,*$10
15464                                           !BCC_EOS
15465                                           ! 1833      break;
15466 3734           E9         0429            br 	.1
15467                                           !BCC_EOS
15468                                           ! 1834    case 0x07:
15469                                           ! 1835      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15470                       00003737            .19:
15471                                           ! Debug: list int = const 0 (used reg = )
15472 3737           31C0                       xor	ax,ax
15473 3739           50                         push	ax
15474                                           ! Debug: list int = const $FF (used reg = )
15475 373A           B8                   00FF  mov	ax,#$FF
15476 373D           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15478 373E           8A46         0E            mov	al,$E[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3741           30E4                       xor	ah,ah
15481 3743           50                         push	ax
15482                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15483 3744           8B46         0E            mov	ax,$E[bp]
15484 3747           88E0                       mov	al,ah
15485 3749           30E4                       xor	ah,ah
15486                                           ! Debug: list unsigned int = ax+0 (used reg = )
15487 374B           50                         push	ax
15488                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15489 374C           8A46         10            mov	al,$10[bp]
15490                                           ! Debug: list unsigned char = al+0 (used reg = )
15491 374F           30E4                       xor	ah,ah
15492 3751           50                         push	ax
15493                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15494 3752           8B46         10            mov	ax,$10[bp]
15495 3755           88E0                       mov	al,ah
15496 3757           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 3759           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15500 375A           8B46         0C            mov	ax,$C[bp]
15501 375D           88E0                       mov	al,ah
15502 375F           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 3761           50                         push	ax
15505                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15506 3762           8A46         12            mov	al,$12[bp]
15507                                           ! Debug: list unsigned char = al+0 (used reg = )
15508 3765           30E4                       xor	ah,ah
15509 3767           50                         push	ax
15510                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15511 3768           E8         11A2            call	_biosfn_scroll
15512 376B           83C4                   10  add	sp,*$10
15513                                           !BCC_EOS
15514                                           ! 1836      break;
15515 376E           E9         03EF            br 	.1
15516                                           !BCC_EOS
15517                                           ! 1837    case 0x08:
15518                                           ! 1838      biosfn_read_char_attr(( BX >> 8 ),&AX);
15519                       00003771            .1A:
15520                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15521 3771           8D5E         12            lea	bx,$12[bp]
15522 3774           53                         push	bx
15523                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15524 3775           8B46         0C            mov	ax,$C[bp]
15525 3778           88E0                       mov	al,ah
15526 377A           30E4                       xor	ah,ah
15527                                           ! Debug: list unsigned int = ax+0 (used reg = )
15528 377C           50                         push	ax
15529                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15530 377D           E8         1893            call	_biosfn_read_char_attr
15531 3780           83C4                   04  add	sp,*4
15532                                           !BCC_EOS
15533                                           ! 1839      break;
15534 3783           E9         03DA            br 	.1
15535                                           !BCC_EOS
15536                                           ! 1840    case 0x09:
15537                                           ! 1841      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15538                       00003786            .1B:
15539                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15540 3786           FF76         10            push	$10[bp]
15541                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15542 3789           8A46         0C            mov	al,$C[bp]
15543                                           ! Debug: list unsigned char = al+0 (used reg = )
15544 378C           30E4                       xor	ah,ah
15545 378E           50                         push	ax
15546                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15547 378F           8B46         0C            mov	ax,$C[bp]
15548 3792           88E0                       mov	al,ah
15549 3794           30E4                       xor	ah,ah
15550                                           ! Debug: list unsigned int = ax+0 (used reg = )
15551 3796           50                         push	ax
15552                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15553 3797           8A46         12            mov	al,$12[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 379A           30E4                       xor	ah,ah
15556 379C           50                         push	ax
15557                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15558 379D           E8         1DB8            call	_biosfn_write_char_attr
15559 37A0           83C4                   08  add	sp,*8
15560                                           !BCC_EOS
15561                                           ! 1842      break;
15562 37A3           E9         03BA            br 	.1
15563                                           !BCC_EOS
15564                                           ! 1843    case 0x0A:
15565                                           ! 1844      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15566                       000037A6            .1C:
15567                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15568 37A6           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15570 37A9           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 37AC           30E4                       xor	ah,ah
15573 37AE           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15575 37AF           8B46         0C            mov	ax,$C[bp]
15576 37B2           88E0                       mov	al,ah
15577 37B4           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 37B6           50                         push	ax
15580                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15581 37B7           8A46         12            mov	al,$12[bp]
15582                                           ! Debug: list unsigned char = al+0 (used reg = )
15583 37BA           30E4                       xor	ah,ah
15584 37BC           50                         push	ax
15585                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15586 37BD           E8         1F8A            call	_biosfn_write_char_only
15587 37C0           83C4                   08  add	sp,*8
15588                                           !BCC_EOS
15589                                           ! 1845      break;
15590 37C3           E9         039A            br 	.1
15591                                           !BCC_EOS
15592                                           ! 1846    case 0x0C:
15593                                           ! 1847      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15594                       000037C6            .1D:
15595                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15596 37C6           FF76         0E            push	$E[bp]
15597                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15598 37C9           FF76         10            push	$10[bp]
15599                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15600 37CC           8A46         12            mov	al,$12[bp]
15601                                           ! Debug: list unsigned char = al+0 (used reg = )
15602 37CF           30E4                       xor	ah,ah
15603 37D1           50                         push	ax
15604                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15605 37D2           8B46         0C            mov	ax,$C[bp]
15606 37D5           88E0                       mov	al,ah
15607 37D7           30E4                       xor	ah,ah
15608                                           ! Debug: list unsigned int = ax+0 (used reg = )
15609 37D9           50                         push	ax
15610                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15611 37DA           E8         21DB            call	_biosfn_write_pixel
15612 37DD           83C4                   08  add	sp,*8
15613                                           !BCC_EOS
15614                                           ! 1848      break;
15615 37E0           E9         037D            br 	.1
15616                                           !BCC_EOS
15617                                           ! 1849    case 0x0D:
15618                                           ! 1850      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15619                       000037E3            .1E:
15620                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15621 37E3           8D5E         12            lea	bx,$12[bp]
15622 37E6           53                         push	bx
15623                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15624 37E7           FF76         0E            push	$E[bp]
15625                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15626 37EA           FF76         10            push	$10[bp]
15627                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15628 37ED           8B46         0C            mov	ax,$C[bp]
15629 37F0           88E0                       mov	al,ah
15630 37F2           30E4                       xor	ah,ah
15631                                           ! Debug: list unsigned int = ax+0 (used reg = )
15632 37F4           50                         push	ax
15633                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15634 37F5           E8         245C            call	_biosfn_read_pixel
15635 37F8           83C4                   08  add	sp,*8
15636                                           !BCC_EOS
15637                                           ! 1851      break;
15638 37FB           E9         0362            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1852    case 0x0E:
15641                                           ! 1853      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15642                       000037FE            .1F:
15643                                           ! Debug: list int = const 2 (used reg = )
15644 37FE           B8                   0002  mov	ax,*2
15645 3801           50                         push	ax
15646                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15647 3802           8A46         0C            mov	al,$C[bp]
15648                                           ! Debug: list unsigned char = al+0 (used reg = )
15649 3805           30E4                       xor	ah,ah
15650 3807           50                         push	ax
15651                                           ! Debug: list int = const $FF (used reg = )
15652 3808           B8                   00FF  mov	ax,#$FF
15653 380B           50                         push	ax
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15655 380C           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 380F           30E4                       xor	ah,ah
15658 3811           50                         push	ax
15659                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15660 3812           E8         2645            call	_biosfn_write_teletype
15661 3815           83C4                   08  add	sp,*8
15662                                           !BCC_EOS
15663                                           ! 1854      break;
15664 3818           E9         0345            br 	.1
15665                                           !BCC_EOS
15666                                           ! 1855    case 0x10:
15667                                           ! 1856      biosfn_perform_gray_scale_summing(BX,CX);
15668                       0000381B            .20:
15669                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15670 381B           FF76         10            push	$10[bp]
15671                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15672 381E           FF76         0C            push	$C[bp]
15673                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15674 3821           E8         2C86            call	_biosfn_perform_gray_scale_summing
15675 3824           83C4                   04  add	sp,*4
15676                                           !BCC_EOS
15677                                           ! 1857      break;
15678 3827           E9         0336            br 	.1
15679                                           !BCC_EOS
15680                                           ! 1858    case 0x11:
15681                                           ! 1859      switch(( AX & 0x00ff ))
15682                       0000382A            .21:
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15684 382A           8A46         12            mov	al,$12[bp]
15685                                           ! 1860       {
15686 382D           E9         00E1            br 	.24
15687                                           ! 1861        case 0x00:
15688                                           ! 1862        case 0x10:
15689                       00003830            .25:
15690                                           ! 1863         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15691                       00003830            .26:
15692                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15693 3830           8B46         0C            mov	ax,$C[bp]
15694 3833           88E0                       mov	al,ah
15695 3835           30E4                       xor	ah,ah
15696                                           ! Debug: list unsigned int = ax+0 (used reg = )
15697 3837           50                         push	ax
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15699 3838           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 383B           30E4                       xor	ah,ah
15702 383D           50                         push	ax
15703                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15704 383E           FF76         0E            push	$E[bp]
15705                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15706 3841           FF76         10            push	$10[bp]
15707                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15708 3844           FF76         08            push	8[bp]
15709                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15710 3847           FF76         16            push	$16[bp]
15711                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15712 384A           8A46         12            mov	al,$12[bp]
15713                                           ! Debug: list unsigned char = al+0 (used reg = )
15714 384D           30E4                       xor	ah,ah
15715 384F           50                         push	ax
15716                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15717 3850           E8         2EFE            call	_biosfn_load_text_user_pat
15718 3853           83C4                   0E  add	sp,*$E
15719                                           !BCC_EOS
15720                                           ! 1864         break;
15721 3856           E9         010C            br 	.22
15722                                           !BCC_EOS
15723                                           ! 1865        case 0x01:
15724                                           ! 1866        case 0x11:
15725                       00003859            .27:
15726                                           ! 1867         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15727                       00003859            .28:
15728                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15729 3859           8A46         0C            mov	al,$C[bp]
15730                                           ! Debug: list unsigned char = al+0 (used reg = )
15731 385C           30E4                       xor	ah,ah
15732 385E           50                         push	ax
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15734 385F           8A46         12            mov	al,$12[bp]
15735                                           ! Debug: list unsigned char = al+0 (used reg = )
15736 3862           30E4                       xor	ah,ah
15737 3864           50                         push	ax
15738                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15739 3865           E8         2F85            call	_biosfn_load_text_8_14_pat
15740 3868           83C4                   04  add	sp,*4
15741                                           !BCC_EOS
15742                                           ! 1868         break;
15743 386B           E9         00F7            br 	.22
15744                                           !BCC_EOS
15745                                           ! 1869        case 0x02:
15746                                           ! 1870        case 0x12:
15747                       0000386E            .29:
15748                                           ! 1871         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15749                       0000386E            .2A:
15750                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15751 386E           8A46         0C            mov	al,$C[bp]
15752                                           ! Debug: list unsigned char = al+0 (used reg = )
15753 3871           30E4                       xor	ah,ah
15754 3873           50                         push	ax
15755                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15756 3874           8A46         12            mov	al,$12[bp]
15757                                           ! Debug: list unsigned char = al+0 (used reg = )
15758 3877           30E4                       xor	ah,ah
15759 3879           50                         push	ax
15760                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15761 387A           E8         3007            call	_biosfn_load_text_8_8_pat
15762 387D           83C4                   04  add	sp,*4
15763                                           !BCC_EOS
15764                                           ! 1872         break;
15765 3880           E9         00E2            br 	.22
15766                                           !BCC_EOS
15767                                           ! 1873        case 0x04:
15768                                           ! 1874        case 0x14:
15769                       00003883            .2B:
15770                                           ! 1875         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15771                       00003883            .2C:
15772                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15773 3883           8A46         0C            mov	al,$C[bp]
15774                                           ! Debug: list unsigned char = al+0 (used reg = )
15775 3886           30E4                       xor	ah,ah
15776 3888           50                         push	ax
15777                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15778 3889           8A46         12            mov	al,$12[bp]
15779                                           ! Debug: list unsigned char = al+0 (used reg = )
15780 388C           30E4                       xor	ah,ah
15781 388E           50                         push	ax
15782                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15783 388F           E8         3090            call	_biosfn_load_text_8_16_pat
15784 3892           83C4                   04  add	sp,*4
15785                                           !BCC_EOS
15786                                           ! 1876         break;
15787 3895           E9         00CD            br 	.22
15788                                           !BCC_EOS
15789                                           ! 1877        case 0x20:
15790                                           ! 1878         biosfn_load_gfx_8_8_chars(ES,BP);
15791                       00003898            .2D:
15792                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15793 3898           FF76         08            push	8[bp]
15794                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15795 389B           FF76         16            push	$16[bp]
15796                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15797 389E           E8         3112            call	_biosfn_load_gfx_8_8_chars
15798 38A1           83C4                   04  add	sp,*4
15799                                           !BCC_EOS
15800                                           ! 1879         break;
15801 38A4           E9         00BE            br 	.22
15802                                           !BCC_EOS
15803                                           ! 1880        case 0x21:
15804                                           ! 1881         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15805                       000038A7            .2E:
15806                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15807 38A7           8A46         0E            mov	al,$E[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 38AA           30E4                       xor	ah,ah
15810 38AC           50                         push	ax
15811                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15812 38AD           8A46         0C            mov	al,$C[bp]
15813                                           ! Debug: list unsigned char = al+0 (used reg = )
15814 38B0           30E4                       xor	ah,ah
15815 38B2           50                         push	ax
15816                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15817 38B3           FF76         10            push	$10[bp]
15818                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15819 38B6           FF76         08            push	8[bp]
15820                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15821 38B9           FF76         16            push	$16[bp]
15822                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15823 38BC           E8         30F5            call	_biosfn_load_gfx_user_chars
15824 38BF           83C4                   0A  add	sp,*$A
15825                                           !BCC_EOS
15826                                           ! 1882         break;
15827 38C2           E9         00A0            br 	.22
15828                                           !BCC_EOS
15829                                           ! 1883        case 0x22:
15830                                           ! 1884         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15831                       000038C5            .2F:
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15833 38C5           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38C8           30E4                       xor	ah,ah
15836 38CA           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15838 38CB           E8         30E7            call	_biosfn_load_gfx_8_14_chars
15839 38CE           44                         inc	sp
15840 38CF           44                         inc	sp
15841                                           !BCC_EOS
15842                                           ! 1885         break;
15843 38D0           E9         0092            br 	.22
15844                                           !BCC_EOS
15845                                           ! 1886        case 0x23:
15846                                           ! 1887         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15847                       000038D3            .30:
15848                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15849 38D3           8A46         0C            mov	al,$C[bp]
15850                                           ! Debug: list unsigned char = al+0 (used reg = )
15851 38D6           30E4                       xor	ah,ah
15852 38D8           50                         push	ax
15853                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15854 38D9           E8         30DA            call	_biosfn_load_gfx_8_8_dd_chars
15855 38DC           44                         inc	sp
15856 38DD           44                         inc	sp
15857                                           !BCC_EOS
15858                                           ! 1888         break;
15859 38DE           E9         0084            br 	.22
15860                                           !BCC_EOS
15861                                           ! 1889        case 0x24:
15862                                           ! 1890         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15863                       000038E1            .31:
15864                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15865 38E1           8A46         0C            mov	al,$C[bp]
15866                                           ! Debug: list unsigned char = al+0 (used reg = )
15867 38E4           30E4                       xor	ah,ah
15868 38E6           50                         push	ax
15869                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15870 38E7           E8         30CD            call	_biosfn_load_gfx_8_16_chars
15871 38EA           44                         inc	sp
15872 38EB           44                         inc	sp
15873                                           !BCC_EOS
15874                                           ! 1891         break;
15875 38EC           E9         0076            br 	.22
15876                                           !BCC_EOS
15877                                           ! 1892        case 0x30:
15878                                           ! 1893         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15879                       000038EF            .32:
15880                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15881 38EF           8D5E         0E            lea	bx,$E[bp]
15882 38F2           53                         push	bx
15883                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15884 38F3           8D5E         10            lea	bx,$10[bp]
15885 38F6           53                         push	bx
15886                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15887 38F7           8D5E         08            lea	bx,8[bp]
15888 38FA           53                         push	bx
15889                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15890 38FB           8D5E         16            lea	bx,$16[bp]
15891 38FE           53                         push	bx
15892                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15893 38FF           8B46         0C            mov	ax,$C[bp]
15894 3902           88E0                       mov	al,ah
15895 3904           30E4                       xor	ah,ah
15896                                           ! Debug: list unsigned int = ax+0 (used reg = )
15897 3906           50                         push	ax
15898                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15899 3907           E8         30AE            call	_biosfn_get_font_info
15900 390A           83C4                   0A  add	sp,*$A
15901                                           !BCC_EOS
15902                                           ! 1894         break;
15903 390D           EB           56            jmp .22
15904                                           !BCC_EOS
15905                                           ! 1895       }
15906                                           ! 1896      break;
15907 390F           EB           54            jmp .22
15908                       00003911            .24:
15909 3911           2C                     00  sub	al,*0
15910 3913         0F84         FF19            beq 	.25
15911 3917           2C                     01  sub	al,*1
15912 3919         0F84         FF3C            beq 	.27
15913 391D           2C                     01  sub	al,*1
15914 391F         0F84         FF4B            beq 	.29
15915 3923           2C                     02  sub	al,*2
15916 3925         0F84         FF5A            beq 	.2B
15917 3929           2C                     0C  sub	al,*$C
15918 392B         0F84         FF01            beq 	.26
15919 392F           2C                     01  sub	al,*1
15920 3931         0F84         FF24            beq 	.28
15921 3935           2C                     01  sub	al,*1
15922 3937         0F84         FF33            beq 	.2A
15923 393B           2C                     02  sub	al,*2
15924 393D         0F84         FF42            beq 	.2C
15925 3941           2C                     0C  sub	al,*$C
15926 3943         0F84         FF51            beq 	.2D
15927 3947           2C                     01  sub	al,*1
15928 3949         0F84         FF5A            beq 	.2E
15929 394D           2C                     01  sub	al,*1
15930 394F         0F84         FF72            beq 	.2F
15931 3953           2C                     01  sub	al,*1
15932 3955         0F84         FF7A            beq 	.30
15933 3959           2C                     01  sub	al,*1
15934 395B         0F84         FF82            beq 	.31
15935 395F           2C                     0C  sub	al,*$C
15936 3961         0F84         FF8A            beq 	.32
15937                       00003965            .22:
15938 3965           E9         01F8            br 	.1
15939                                           !BCC_EOS
15940                                           ! 1897    case 0x12:
15941                                           ! 1898      switch(( BX & 0x00ff ))
15942                       00003968            .33:
15943                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15944 3968           8A46         0C            mov	al,$C[bp]
15945                                           ! 1899       {
15946 396B           EB           3C            jmp .36
15947                                           ! 1900        case 0x20:
15948                                           ! 1901         biosfn_alternate_prtsc();
15949                       0000396D            .37:
15950                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15951 396D           E8         3222            call	_biosfn_alternate_prtsc
15952                                           !BCC_EOS
15953                                           ! 1902         break;
15954 3970           EB           43            jmp .34
15955                                           !BCC_EOS
15956                                           ! 1903        case 0x35:
15957                                           ! 1904         biosfn_switch_video_interface(( AX
15958                       00003972            .38:
15959                                           ! 1904  & 0x00ff ),ES,DX);
15960                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15961 3972           FF76         0E            push	$E[bp]
15962                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15963 3975           FF76         16            push	$16[bp]
15964                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15965 3978           8A46         12            mov	al,$12[bp]
15966                                           ! Debug: list unsigned char = al+0 (used reg = )
15967 397B           30E4                       xor	ah,ah
15968 397D           50                         push	ax
15969                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15970 397E           E8         32EB            call	_biosfn_switch_video_interface
15971 3981           83C4                   06  add	sp,*6
15972                                           !BCC_EOS
15973                                           ! 1905         AX = ((AX & 0xff00) | (0x12));
15974                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15975 3984           8B46         12            mov	ax,$12[bp]
15976 3987           30C0                       xor	al,al
15977                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15978 3989           0C                     12  or	al,*$12
15979                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15980 398B           8946         12            mov	$12[bp],ax
15981                                           !BCC_EOS
15982                                           ! 1906         break;
15983 398E           EB           25            jmp .34
15984                                           !BCC_EOS
15985                                           ! 1907        case 0x36:
15986                                           ! 1908         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15987                       00003990            .39:
15988                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15989 3990           8A46         12            mov	al,$12[bp]
15990                                           ! Debug: list unsigned char = al+0 (used reg = )
15991 3993           30E4                       xor	ah,ah
15992 3995           50                         push	ax
15993                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15994 3996           E8         32D4            call	_biosfn_enable_video_refresh_control
15995 3999           44                         inc	sp
15996 399A           44                         inc	sp
15997                                           !BCC_EOS
15998                                           ! 1909         AX = ((AX & 0xff00) | (0x12));
15999                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16000 399B           8B46         12            mov	ax,$12[bp]
16001 399E           30C0                       xor	al,al
16002                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16003 39A0           0C                     12  or	al,*$12
16004                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16005 39A2           8946         12            mov	$12[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1910         break;
16008 39A5           EB           0E            jmp .34
16009                                           !BCC_EOS
16010                                           ! 1911       }
16011                                           ! 1912      break;
16012 39A7           EB           0C            jmp .34
16013                       000039A9            .36:
16014 39A9           2C                     20  sub	al,*$20
16015 39AB           74           C0            je 	.37
16016 39AD           2C                     15  sub	al,*$15
16017 39AF           74           C1            je 	.38
16018 39B1           2C                     01  sub	al,*1
16019 39B3           74           DB            je 	.39
16020                       000039B5            .34:
16021 39B5           E9         01A8            br 	.1
16022                                           !BCC_EOS
16023                                           ! 1913    case 0x13:
16024                                           ! 1914      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16025                       000039B8            .3A:
16026                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16027 39B8           FF76         08            push	8[bp]
16028                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16029 39BB           FF76         16            push	$16[bp]
16030                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16031 39BE           8A46         0E            mov	al,$E[bp]
16032                                           ! Debug: list unsigned char = al+0 (used reg = )
16033 39C1           30E4                       xor	ah,ah
16034 39C3           50                         push	ax
16035                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16036 39C4           8B46         0E            mov	ax,$E[bp]
16037 39C7           88E0                       mov	al,ah
16038 39C9           30E4                       xor	ah,ah
16039                                           ! Debug: list unsigned int = ax+0 (used reg = )
16040 39CB           50                         push	ax
16041                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16042 39CC           FF76         10            push	$10[bp]
16043                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16044 39CF           8A46         0C            mov	al,$C[bp]
16045                                           ! Debug: list unsigned char = al+0 (used reg = )
16046 39D2           30E4                       xor	ah,ah
16047 39D4           50                         push	ax
16048                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16049 39D5           8B46         0C            mov	ax,$C[bp]
16050 39D8           88E0                       mov	al,ah
16051 39DA           30E4                       xor	ah,ah
16052                                           ! Debug: list unsigned int = ax+0 (used reg = )
16053 39DC           50                         push	ax
16054                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16055 39DD           8A46         12            mov	al,$12[bp]
16056                                           ! Debug: list unsigned char = al+0 (used reg = )
16057 39E0           30E4                       xor	ah,ah
16058 39E2           50                         push	ax
16059                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16060 39E3           E8         3288            call	_biosfn_write_string
16061 39E6           83C4                   10  add	sp,*$10
16062                                           !BCC_EOS
16063                                           ! 1915      break;
16064 39E9           E9         0174            br 	.1
16065                                           !BCC_EOS
16066                                           ! 1916    case 0x1B:
16067                                           ! 1917      biosfn_read_state_info(BX,ES,DI);
16068                       000039EC            .3B:
16069                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16070 39EC           FF76         04            push	4[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 39EF           FF76         16            push	$16[bp]
16073                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16074 39F2           FF76         0C            push	$C[bp]
16075                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16076 39F5           E8         3382            call	_biosfn_read_state_info
16077 39F8           83C4                   06  add	sp,*6
16078                                           !BCC_EOS
16079                                           ! 1918      AX = ((AX & 0xff00) | (0x1B));
16080                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16081 39FB           8B46         12            mov	ax,$12[bp]
16082 39FE           30C0                       xor	al,al
16083                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16084 3A00           0C                     1B  or	al,*$1B
16085                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16086 3A02           8946         12            mov	$12[bp],ax
16087                                           !BCC_EOS
16088                                           ! 1919      break;
16089 3A05           E9         0158            br 	.1
16090                                           !BCC_EOS
16091                                           ! 1920    case 0x1C:
16092                                           ! 1921      switch(( AX & 0x00ff ))
16093                       00003A08            .3C:
16094                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16095 3A08           8A46         12            mov	al,$12[bp]
16096                                           ! 1922       {
16097 3A0B           EB           33            jmp .3F
16098                                           ! 1923        case 0x00:
16099                                           ! 1924         biosfn_read_video_state_size(CX,&BX);
16100                       00003A0D            .40:
16101                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16102 3A0D           8D5E         0C            lea	bx,$C[bp]
16103 3A10           53                         push	bx
16104                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16105 3A11           FF76         10            push	$10[bp]
16106                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16107 3A14           E8         34E2            call	_biosfn_read_video_state_size
16108 3A17           83C4                   04  add	sp,*4
16109                                           !BCC_EOS
16110                                           ! 1925         break;
16111 3A1A           EB           30            jmp .3D
16112                                           !BCC_EOS
16113                                           ! 1926        case 0x01:
16114                                           ! 1927         biosfn_save_video_state(CX,ES,BX);
16115                       00003A1C            .41:
16116                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16117 3A1C           FF76         0C            push	$C[bp]
16118                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16119 3A1F           FF76         16            push	$16[bp]
16120                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16121 3A22           FF76         10            push	$10[bp]
16122                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16123 3A25           E8         34F5            call	_biosfn_save_video_state
16124 3A28           83C4                   06  add	sp,*6
16125                                           !BCC_EOS
16126                                           ! 1928         break;
16127 3A2B           EB           1F            jmp .3D
16128                                           !BCC_EOS
16129                                           ! 1929        case 0x02:
16130                                           ! 1930         biosfn_restore_video_state(CX,ES,BX);
16131                       00003A2D            .42:
16132                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16133 3A2D           FF76         0C            push	$C[bp]
16134                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16135 3A30           FF76         16            push	$16[bp]
16136                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16137 3A33           FF76         10            push	$10[bp]
16138                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16139 3A36           E8         3AAE            call	_biosfn_restore_video_state
16140 3A39           83C4                   06  add	sp,*6
16141                                           !BCC_EOS
16142                                           ! 1931         break;
16143 3A3C           EB           0E            jmp .3D
16144                                           !BCC_EOS
16145                                           ! 1932       }
16146                                           ! 1933      AX = ((AX & 0xff00) | (0x1C));
16147 3A3E           EB           0C            jmp .3D
16148                       00003A40            .3F:
16149 3A40           2C                     00  sub	al,*0
16150 3A42           74           C9            je 	.40
16151 3A44           2C                     01  sub	al,*1
16152 3A46           74           D4            je 	.41
16153 3A48           2C                     01  sub	al,*1
16154 3A4A           74           E1            je 	.42
16155                       00003A4C            .3D:
16156                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16157 3A4C           8B46         12            mov	ax,$12[bp]
16158 3A4F           30C0                       xor	al,al
16159                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16160 3A51           0C                     1C  or	al,*$1C
16161                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16162 3A53           8946         12            mov	$12[bp],ax
16163                                           !BCC_EOS
16164                                           ! 1934      break;
16165 3A56           E9         0107            br 	.1
16166                                           !BCC_EOS
16167                                           ! 1935    case 0x4f:
16168                                           ! 1936      if (vbe_has_vbe_display()) {
16169                       00003A59            .43:
16170                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16171 3A59           E8         5D9E            call	_vbe_has_vbe_display
16172 3A5C           85C0                       test	ax,ax
16173 3A5E         0F84         00A0            beq 	.44
16174                       00003A62            .45:
16175                                           ! 1937        switch(( AX & 0x00ff ))
16176                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16177 3A62           8A46         12            mov	al,$12[bp]
16178                                           ! 1938        {
16179 3A65           EB           6E            jmp .48
16180                                           ! 1939          case 0x00:
16181                                           ! 1940           vbe_biosfn_return_controller_information(&AX,ES,DI);
16182                       00003A67            .49:
16183                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16184 3A67           FF76         04            push	4[bp]
16185                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16186 3A6A           FF76         16            push	$16[bp]
16187                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16188 3A6D           8D5E         12            lea	bx,$12[bp]
16189 3A70           53                         push	bx
16190                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16191 3A71           E8         5DFD            call	_vbe_biosfn_return_controller_information
16192 3A74           83C4                   06  add	sp,*6
16193                                           !BCC_EOS
16194                                           ! 1941           break;
16195 3A77           E9         0086            br 	.46
16196                                           !BCC_EOS
16197                                           ! 1942          case 0x01:
16198                                           ! 1943           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16199                       00003A7A            .4A:
16200                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16201 3A7A           FF76         04            push	4[bp]
16202                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16203 3A7D           FF76         16            push	$16[bp]
16204                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16205 3A80           FF76         10            push	$10[bp]
16206                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16207 3A83           8D5E         12            lea	bx,$12[bp]
16208 3A86           53                         push	bx
16209                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16210 3A87           E8         603F            call	_vbe_biosfn_return_mode_information
16211 3A8A           83C4                   08  add	sp,*8
16212                                           !BCC_EOS
16213                                           ! 1944           break;
16214 3A8D           EB           71            jmp .46
16215                                           !BCC_EOS
16216                                           ! 1945          case 0x02:
16217                                           ! 1946           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16218                       00003A8F            .4B:
16219                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16220 3A8F           FF76         04            push	4[bp]
16221                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16222 3A92           FF76         16            push	$16[bp]
16223                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16224 3A95           FF76         0C            push	$C[bp]
16225                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16226 3A98           8D5E         12            lea	bx,$12[bp]
16227 3A9B           53                         push	bx
16228                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16229 3A9C           E8         6146            call	_vbe_biosfn_set_mode
16230 3A9F           83C4                   08  add	sp,*8
16231                                           !BCC_EOS
16232                                           ! 1947           break;
16233 3AA2           EB           5C            jmp .46
16234                                           !BCC_EOS
16235                                           ! 1948          case 0x04:
16236                                           ! 1949           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16237                       00003AA4            .4C:
16238                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16239 3AA4           8D5E         0C            lea	bx,$C[bp]
16240 3AA7           53                         push	bx
16241                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16242 3AA8           FF76         16            push	$16[bp]
16243                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16244 3AAB           FF76         0E            push	$E[bp]
16245                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16246 3AAE           FF76         10            push	$10[bp]
16247                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16248 3AB1           8D5E         12            lea	bx,$12[bp]
16249 3AB4           53                         push	bx
16250                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16251 3AB5           E8         6461            call	_vbe_biosfn_save_restore_state
16252 3AB8           83C4                   0A  add	sp,*$A
16253                                           !BCC_EOS
16254                                           ! 1950           break;
16255 3ABB           EB           43            jmp .46
16256                                           !BCC_EOS
16257                                           ! 1951          case 0x09:
16258                                           ! 1952           AX=0x100;
16259                       00003ABD            .4D:
16260                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16261 3ABD           B8                   0100  mov	ax,#$100
16262 3AC0           8946         12            mov	$12[bp],ax
16263                                           !BCC_EOS
16264                                           ! 1953           break;
16265 3AC3           EB           3B            jmp .46
16266                                           !BCC_EOS
16267                                           ! 1954          case 0x0A:
16268                                           ! 1955           AX=0x100;
16269                       00003AC5            .4E:
16270                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16271 3AC5           B8                   0100  mov	ax,#$100
16272 3AC8           8946         12            mov	$12[bp],ax
16273                                           !BCC_EOS
16274                                           ! 1956           break;
16275 3ACB           EB           33            jmp .46
16276                                           !BCC_EOS
16277                                           ! 1957          default:
16278                                           ! 1958           AX=0x100;
16279                       00003ACD            .4F:
16280                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16281 3ACD           B8                   0100  mov	ax,#$100
16282 3AD0           8946         12            mov	$12[bp],ax
16283                                           !BCC_EOS
16284                                           ! 1959           }
16285                                           ! 1960         }
16286 3AD3           EB           2B            jmp .46
16287                       00003AD5            .48:
16288 3AD5           2C                     00  sub	al,*0
16289 3AD7           72           F4            jb 	.4F
16290 3AD9           3C                     0A  cmp	al,*$A
16291 3ADB           77           21            ja  	.50
16292 3ADD           30E4                       xor	ah,ah
16293 3ADF           D1E0                       shl	ax,*1
16294 3AE1           89C3                       mov	bx,ax
16295 3AE3           2E                         seg	cs
16296 3AE4           FFA7       3AE8            br	.51[bx]
16297                       00003AE8            .51:
16298 3AE8                      3A67            .word	.49
16299 3AEA                      3A7A            .word	.4A
16300 3AEC                      3A8F            .word	.4B
16301 3AEE                      3ACD            .word	.4F
16302 3AF0                      3AA4            .word	.4C
16303 3AF2                      3ACD            .word	.4F
16304 3AF4                      3ACD            .word	.4F
16305 3AF6                      3ACD            .word	.4F
16306 3AF8                      3ACD            .word	.4F
16307 3AFA                      3ABD            .word	.4D
16308 3AFC                      3AC5            .word	.4E
16309                       00003AFE            .50:
16310 3AFE           EB           CD            jmp	.4F
16311                       00003B00            .46:
16312                                           ! 1961         else {
16313 3B00           EB           06            jmp .52
16314                       00003B02            .44:
16315                                           ! 1962           AX=0x0100;
16316                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16317 3B02           B8                   0100  mov	ax,#$100
16318 3B05           8946         12            mov	$12[bp],ax
16319                                           !BCC_EOS
16320                                           ! 1963           }
16321                                           ! 1964         break;
16322                       00003B08            .52:
16323 3B08           EB           56            jmp .1
16324                                           !BCC_EOS
16325                                           ! 1965   }
16326                                           ! 1966 }
16327 3B0A           EB           54            jmp .1
16328                       00003B0C            .3:
16329 3B0C           2D                   0000  sub	ax,*0
16330 3B0F           7C           4F            jl  	.1
16331 3B11           3D                   001C  cmp	ax,*$1C
16332 3B14           77           43            ja  	.53
16333 3B16           D1E0                       shl	ax,*1
16334 3B18           89C3                       mov	bx,ax
16335 3B1A           2E                         seg	cs
16336 3B1B           FFA7       3B1F            br	.54[bx]
16337                       00003B1F            .54:
16338 3B1F                      3635            .word	.4
16339 3B21                      3693            .word	.13
16340 3B23                      36AA            .word	.14
16341 3B25                      36BE            .word	.15
16342 3B27                      36D7            .word	.16
16343 3B29                      36EE            .word	.17
16344 3B2B                      36FC            .word	.18
16345 3B2D                      3737            .word	.19
16346 3B2F                      3771            .word	.1A
16347 3B31                      3786            .word	.1B
16348 3B33                      37A6            .word	.1C
16349 3B35                      3B60            .word	.1
16350 3B37                      37C6            .word	.1D
16351 3B39                      37E3            .word	.1E
16352 3B3B                      37FE            .word	.1F
16353 3B3D                      3B60            .word	.1
16354 3B3F                      381B            .word	.20
16355 3B41                      382A            .word	.21
16356 3B43                      3968            .word	.33
16357 3B45                      39B8            .word	.3A
16358 3B47                      3B60            .word	.1
16359 3B49                      3B60            .word	.1
16360 3B4B                      3B60            .word	.1
16361 3B4D                      3B60            .word	.1
16362 3B4F                      3B60            .word	.1
16363 3B51                      3B60            .word	.1
16364 3B53                      3B60            .word	.1
16365 3B55                      39EC            .word	.3B
16366 3B57                      3A08            .word	.3C
16367                       00003B59            .53:
16368 3B59           2D                   004F  sub	ax,*$4F
16369 3B5C         0F84         FEF9            beq 	.43
16370                       00003B60            .1:
16371                       FFFFFFFE            ..FFFF	=	-2
16372 3B60           5D                         pop	bp
16373 3B61           C3                         ret
16374                                           ! 1967 static void biosfn_set_video_mode(mode) Bit8u mode;
16375                                           ! Register BX used in function int10_func
16376                       00003B62            _biosfn_set_video_mode:
16377                                           !BCC_EOS
16378                                           ! 1968 {
16379                                           ! 1969  Bit8u noclearmem=mode&0x80;
16380 3B62           55                         push	bp
16381 3B63           89E5                       mov	bp,sp
16382 3B65           4C                         dec	sp
16383                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16384 3B66           8A46         04            mov	al,4[bp]
16385 3B69           24                     80  and	al,#$80
16386                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16387 3B6B           8846         FF            mov	-1[bp],al
16388                                           !BCC_EOS
16389                                           ! 1970  Bit8u line,mmask,*palette,vpti;
16390                                           !BCC_EOS
16391                                           ! 1971  Bit16u i,twidth,theightm1,cheight;
16392                                           !BCC_EOS
16393                                           ! 1972  Bit8u modeset_ctl,video_ctl,vga_switches;
16394                                           !BCC_EOS
16395                                           ! 1973  Bit16u crtc_addr;
16396                                           !BCC_EOS
16397                                           ! 1974  if (vbe_has_vbe_display()) {
16398 3B6E           83C4                   EB  add	sp,*-$15
16399                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16400 3B71           E8         5C86            call	_vbe_has_vbe_display
16401 3B74           85C0                       test	ax,ax
16402 3B76           74           08            je  	.55
16403                       00003B78            .56:
16404                                           ! 1975    dispi_set_enable(0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3B78           31C0                       xor	ax,ax
16407 3B7A           50                         push	ax
16408                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16409 3B7B           E8         5A49            call	_dispi_set_enable
16410 3B7E           44                         inc	sp
16411 3B7F           44                         inc	sp
16412                                           !BCC_EOS
16413                                           ! 1976   }
16414                                           ! 1977  mode=mode&0x7f;
16415                       00003B80            .55:
16416                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16417 3B80           8A46         04            mov	al,4[bp]
16418 3B83           24                     7F  and	al,*$7F
16419                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16420 3B85           8846         04            mov	4[bp],al
16421                                           !BCC_EOS
16422                                           ! 1978  line=find_vga_entry(mode);
16423                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16424 3B88           8A46         04            mov	al,4[bp]
16425 3B8B           30E4                       xor	ah,ah
16426 3B8D           50                         push	ax
16427                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16428 3B8E           E8         3F34            call	_find_vga_entry
16429 3B91           44                         inc	sp
16430 3B92           44                         inc	sp
16431                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16432 3B93           8846         FE            mov	-2[bp],al
16433                                           !BCC_EOS
16434                                           ! 1979  if(line==0xFF)
16435                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16436 3B96           8A46         FE            mov	al,-2[bp]
16437 3B99           3C                     FF  cmp	al,#$FF
16438 3B9B           75           04            jne 	.57
16439                       00003B9D            .58:
16440                                           ! 1980   return;
16441 3B9D           89EC                       mov	sp,bp
16442 3B9F           5D                         pop	bp
16443 3BA0           C3                         ret
16444                                           !BCC_EOS
16445                                           ! 1981  vpti=line_to_vpti[line];
16446                       00003BA1            .57:
16447                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16448 3BA1           8A46         FE            mov	al,-2[bp]
16449 3BA4           30E4                       xor	ah,ah
16450 3BA6           89C3                       mov	bx,ax
16451                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16452 3BA8           8A87       027D            mov	al,_line_to_vpti[bx]
16453 3BAC           8846         F9            mov	-7[bp],al
16454                                           !BCC_EOS
16455                                           ! 1982  twidth=video_param_table[vpti].twidth;
16456                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16457 3BAF           8A46         F9            mov	al,-7[bp]
16458 3BB2           30E4                       xor	ah,ah
16459 3BB4           B1                     06  mov	cl,*6
16460 3BB6           D3E0                       shl	ax,cl
16461 3BB8           89C3                       mov	bx,ax
16462                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16463 3BBA           8A87       0291            mov	al,_video_param_table[bx]
16464 3BBE           30E4                       xor	ah,ah
16465 3BC0           8946         F4            mov	-$C[bp],ax
16466                                           !BCC_EOS
16467                                           ! 1983  theightm1=video_param_table[vpti].theightm1;
16468                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16469 3BC3           8A46         F9            mov	al,-7[bp]
16470 3BC6           30E4                       xor	ah,ah
16471 3BC8           B1                     06  mov	cl,*6
16472 3BCA           D3E0                       shl	ax,cl
16473 3BCC           89C3                       mov	bx,ax
16474 3BCE           81C3                 0291  add	bx,#_video_param_table
16475                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16476 3BD2           8A47         01            mov	al,1[bx]
16477 3BD5           30E4                       xor	ah,ah
16478 3BD7           8946         F2            mov	-$E[bp],ax
16479                                           !BCC_EOS
16480                                           ! 1984  cheight=video_param_table[vpti].cheight;
16481                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16482 3BDA           8A46         F9            mov	al,-7[bp]
16483 3BDD           30E4                       xor	ah,ah
16484 3BDF           B1                     06  mov	cl,*6
16485 3BE1           D3E0                       shl	ax,cl
16486 3BE3           89C3                       mov	bx,ax
16487 3BE5           81C3                 0291  add	bx,#_video_param_table
16488                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16489 3BE9           8A47         02            mov	al,2[bx]
16490 3BEC           30E4                       xor	ah,ah
16491 3BEE           8946         F0            mov	-$10[bp],ax
16492                                           !BCC_EOS
16493                                           ! 1985  video_ctl=read_byte(0x40,0x87);
16494                                           ! Debug: list int = const $87 (used reg = )
16495 3BF1           B8                   0087  mov	ax,#$87
16496 3BF4           50                         push	ax
16497                                           ! Debug: list int = const $40 (used reg = )
16498 3BF5           B8                   0040  mov	ax,*$40
16499 3BF8           50                         push	ax
16500                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16501 3BF9           E8         3FB5            call	_read_byte
16502 3BFC           83C4                   04  add	sp,*4
16503                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16504 3BFF           8846         EE            mov	-$12[bp],al
16505                                           !BCC_EOS
16506                                           ! 1986  
16507                                           ! 1986 vga_switches=read_byte(0x40,0x88);
16508                                           ! Debug: list int = const $88 (used reg = )
16509 3C02           B8                   0088  mov	ax,#$88
16510 3C05           50                         push	ax
16511                                           ! Debug: list int = const $40 (used reg = )
16512 3C06           B8                   0040  mov	ax,*$40
16513 3C09           50                         push	ax
16514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16515 3C0A           E8         3FA4            call	_read_byte
16516 3C0D           83C4                   04  add	sp,*4
16517                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16518 3C10           8846         ED            mov	-$13[bp],al
16519                                           !BCC_EOS
16520                                           ! 1987  modeset_ctl=read_byte(0x40,0x89);
16521                                           ! Debug: list int = const $89 (used reg = )
16522 3C13           B8                   0089  mov	ax,#$89
16523 3C16           50                         push	ax
16524                                           ! Debug: list int = const $40 (used reg = )
16525 3C17           B8                   0040  mov	ax,*$40
16526 3C1A           50                         push	ax
16527                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16528 3C1B           E8         3F93            call	_read_byte
16529 3C1E           83C4                   04  add	sp,*4
16530                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16531 3C21           8846         EF            mov	-$11[bp],al
16532                                           !BCC_EOS
16533                                           ! 1988  if((modeset_ctl&0x08)==0)
16534                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16535 3C24           8A46         EF            mov	al,-$11[bp]
16536 3C27           24                     08  and	al,*8
16537                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16538 3C29           84C0                       test	al,al
16539 3C2B         0F85         0145            bne 	.59
16540                       00003C2F            .5A:
16541                                           ! 1989   {
16542                                           ! 1990    outb(0x3c6,vga_modes[line].pelmask);
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C2F           8A46         FE            mov	al,-2[bp]
16545 3C32           30E4                       xor	ah,ah
16546 3C34           B1                     03  mov	cl,*3
16547 3C36           D3E0                       shl	ax,cl
16548 3C38           89C3                       mov	bx,ax
16549 3C3A           81C3                 01FD  add	bx,#_vga_modes
16550                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16551 3C3E           8A47         06            mov	al,6[bx]
16552 3C41           30E4                       xor	ah,ah
16553 3C43           50                         push	ax
16554                                           ! Debug: list int = const $3C6 (used reg = )
16555 3C44           B8                   03C6  mov	ax,#$3C6
16556 3C47           50                         push	ax
16557                                           ! Debug: func () void = outb+0 (used reg = )
16558 3C48           E8         3FD2            call	_outb
16559 3C4B           83C4                   04  add	sp,*4
16560                                           !BCC_EOS
16561                                           ! 1991    outb(0x3c8,0x00);
16562                                           ! Debug: list int = const 0 (used reg = )
16563 3C4E           31C0                       xor	ax,ax
16564 3C50           50                         push	ax
16565                                           ! Debug: list int = const $3C8 (used reg = )
16566 3C51           B8                   03C8  mov	ax,#$3C8
16567 3C54           50                         push	ax
16568                                           ! Debug: func () void = outb+0 (used reg = )
16569 3C55           E8         3FC5            call	_outb
16570 3C58           83C4                   04  add	sp,*4
16571                                           !BCC_EOS
16572                                           ! 1992    switch(vga_modes[line].dacmodel)
16573                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16574 3C5B           8A46         FE            mov	al,-2[bp]
16575 3C5E           30E4                       xor	ah,ah
16576 3C60           B1                     03  mov	cl,*3
16577 3C62           D3E0                       shl	ax,cl
16578 3C64           89C3                       mov	bx,ax
16579 3C66           81C3                 01FD  add	bx,#_vga_modes
16580 3C6A           8A47         07            mov	al,7[bx]
16581                                           ! 1993     {case 0:
16582 3C6D           EB           22            jmp .5D
16583                                           ! 1994       palette=&palette0;
16584                       00003C6F            .5E:
16585                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3C6F           BB                   0A11  mov	bx,#_palette0
16587 3C72           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1995       break;
16590 3C75           EB           2A            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1996      case 1:
16593                                           ! 1997       palette=&palette1;
16594                       00003C77            .5F:
16595                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16596 3C77           BB                   0AD1  mov	bx,#_palette1
16597 3C7A           895E         FA            mov	-6[bp],bx
16598                                           !BCC_EOS
16599                                           ! 1998       break;
16600 3C7D           EB           22            jmp .5B
16601                                           !BCC_EOS
16602                                           ! 1999      case 2:
16603                                           ! 2000       palette=&palette2;
16604                       00003C7F            .60:
16605                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16606 3C7F           BB                   0B91  mov	bx,#_palette2
16607 3C82           895E         FA            mov	-6[bp],bx
16608                                           !BCC_EOS
16609                                           ! 2001       break;
16610 3C85           EB           1A            jmp .5B
16611                                           !BCC_EOS
16612                                           ! 2002      case 3:
16613                                           ! 2003       palette=&palette3;
16614                       00003C87            .61:
16615                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16616 3C87           BB                   0C51  mov	bx,#_palette3
16617 3C8A           895E         FA            mov	-6[bp],bx
16618                                           !BCC_EOS
16619                                           ! 2004       break;
16620 3C8D           EB           12            jmp .5B
16621                                           !BCC_EOS
16622                                           ! 2005     }
16623                                           ! 2006    for(i=0;i<0x0100;i++)
16624 3C8F           EB           10            jmp .5B
16625                       00003C91            .5D:
16626 3C91           2C                     00  sub	al,*0
16627 3C93           74           DA            je 	.5E
16628 3C95           2C                     01  sub	al,*1
16629 3C97           74           DE            je 	.5F
16630 3C99           2C                     01  sub	al,*1
16631 3C9B           74           E2            je 	.60
16632 3C9D           2C                     01  sub	al,*1
16633 3C9F           74           E6            je 	.61
16634                       00003CA1            .5B:
16635                       FFFFFFE8            ..FFFE	=	-$18
16636                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16637 3CA1           31C0                       xor	ax,ax
16638 3CA3           8946         F6            mov	-$A[bp],ax
16639                                           !BCC_EOS
16640                                           !BCC_EOS
16641                                           ! 2007     {if(i<=dac_regs[vga_modes[line].dacmodel])
16642 3CA6           E9         00AB            br 	.64
16643                       00003CA9            .65:
16644                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16645 3CA9           8A46         FE            mov	al,-2[bp]
16646 3CAC           30E4                       xor	ah,ah
16647 3CAE           B1                     03  mov	cl,*3
16648 3CB0           D3E0                       shl	ax,cl
16649 3CB2           89C3                       mov	bx,ax
16650 3CB4           81C3                 01FD  add	bx,#_vga_modes
16651                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16652 3CB8           8A47         07            mov	al,7[bx]
16653 3CBB           30E4                       xor	ah,ah
16654 3CBD           89C3                       mov	bx,ax
16655                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16656 3CBF           8A87       028D            mov	al,_dac_regs[bx]
16657 3CC3           30E4                       xor	ah,ah
16658 3CC5           3B46         F6            cmp	ax,-$A[bp]
16659 3CC8           72           5C            jb  	.66
16660                       00003CCA            .67:
16661                                           ! 2008       {outb(0x3c9,palette[(i*3)+0]);
16662                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16663 3CCA           8B46         F6            mov	ax,-$A[bp]
16664 3CCD           89C2                       mov	dx,ax
16665 3CCF           D1E0                       shl	ax,*1
16666 3CD1           01D0                       add	ax,dx
16667                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16668                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16669 3CD3           0346         FA            add	ax,-6[bp]
16670 3CD6           89C3                       mov	bx,ax
16671                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16672 3CD8           8A07                       mov	al,[bx]
16673 3CDA           30E4                       xor	ah,ah
16674 3CDC           50                         push	ax
16675                                           ! Debug: list int = const $3C9 (used reg = )
16676 3CDD           B8                   03C9  mov	ax,#$3C9
16677 3CE0           50                         push	ax
16678                                           ! Debug: func () void = outb+0 (used reg = )
16679 3CE1           E8         3F39            call	_outb
16680 3CE4           83C4                   04  add	sp,*4
16681                                           !BCC_EOS
16682                                           ! 2009        outb(0x3c9,palette[(i*3)+1]);
16683                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16684 3CE7           8B46         F6            mov	ax,-$A[bp]
16685 3CEA           89C2                       mov	dx,ax
16686 3CEC           D1E0                       shl	ax,*1
16687 3CEE           01D0                       add	ax,dx
16688                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16689                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16690 3CF0           40                         inc	ax
16691 3CF1           0346         FA            add	ax,-6[bp]
16692 3CF4           89C3                       mov	bx,ax
16693                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16694 3CF6           8A07                       mov	al,[bx]
16695 3CF8           30E4                       xor	ah,ah
16696 3CFA           50                         push	ax
16697                                           ! Debug: list int = const $3C9 (used reg = )
16698 3CFB           B8                   03C9  mov	ax,#$3C9
16699 3CFE           50                         push	ax
16700                                           ! Debug: func () void = outb+0 (used reg = )
16701 3CFF           E8         3F1B            call	_outb
16702 3D02           83C4                   04  add	sp,*4
16703                                           !BCC_EOS
16704                                           ! 2010        outb(0x3c9,palette[(i*3)+2]);
16705                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16706 3D05           8B46         F6            mov	ax,-$A[bp]
16707 3D08           89C2                       mov	dx,ax
16708 3D0A           D1E0                       shl	ax,*1
16709 3D0C           01D0                       add	ax,dx
16710                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16711                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D0E           40                         inc	ax
16713 3D0F           40                         inc	ax
16714 3D10           0346         FA            add	ax,-6[bp]
16715 3D13           89C3                       mov	bx,ax
16716                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16717 3D15           8A07                       mov	al,[bx]
16718 3D17           30E4                       xor	ah,ah
16719 3D19           50                         push	ax
16720                                           ! Debug: list int = const $3C9 (used reg = )
16721 3D1A           B8                   03C9  mov	ax,#$3C9
16722 3D1D           50                         push	ax
16723                                           ! Debug: func () void = outb+0 (used reg = )
16724 3D1E           E8         3EFC            call	_outb
16725 3D21           83C4                   04  add	sp,*4
16726                                           !BCC_EOS
16727                                           ! 2011       }
16728                                           ! 2012      else
16729                                           ! 2013       {outb(0x3c9,0);
16730 3D24           EB           27            jmp .68
16731                       00003D26            .66:
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3D26           31C0                       xor	ax,ax
16734 3D28           50                         push	ax
16735                                           ! Debug: list int = const $3C9 (used reg = )
16736 3D29           B8                   03C9  mov	ax,#$3C9
16737 3D2C           50                         push	ax
16738                                           ! Debug: func () void = outb+0 (used reg = )
16739 3D2D           E8         3EED            call	_outb
16740 3D30           83C4                   04  add	sp,*4
16741                                           !BCC_EOS
16742                                           ! 2014        outb(0x3c9,0);
16743                                           ! Debug: list int = const 0 (used reg = )
16744 3D33           31C0                       xor	ax,ax
16745 3D35           50                         push	ax
16746                                           ! Debug: list int = const $3C9 (used reg = )
16747 3D36           B8                   03C9  mov	ax,#$3C9
16748 3D39           50                         push	ax
16749                                           ! Debug: func () void = outb+0 (used reg = )
16750 3D3A           E8         3EE0            call	_outb
16751 3D3D           83C4                   04  add	sp,*4
16752                                           !BCC_EOS
16753                                           ! 2015        outb(0x3c9,0);
16754                                           ! Debug: list int = const 0 (used reg = )
16755 3D40           31C0                       xor	ax,ax
16756 3D42           50                         push	ax
16757                                           ! Debug: list int = const $3C9 (used reg = )
16758 3D43           B8                   03C9  mov	ax,#$3C9
16759 3D46           50                         push	ax
16760                                           ! Debug: func () void = outb+0 (used reg = )
16761 3D47           E8         3ED3            call	_outb
16762 3D4A           83C4                   04  add	sp,*4
16763                                           !BCC_EOS
16764                                           ! 2016       }
16765                                           ! 2017     }
16766                       00003D4D            .68:
16767                                           ! 2018    if((modeset_ctl&0x02)==0x02)
16768                       00003D4D            .63:
16769                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16770 3D4D           8B46         F6            mov	ax,-$A[bp]
16771 3D50           40                         inc	ax
16772 3D51           8946         F6            mov	-$A[bp],ax
16773                       00003D54            .64:
16774                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16775 3D54           8B46         F6            mov	ax,-$A[bp]
16776 3D57           3D                   0100  cmp	ax,#$100
16777 3D5A         0F82         FF4B            blo 	.65
16778                       00003D5E            .69:
16779                       00003D5E            .62:
16780                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16781 3D5E           8A46         EF            mov	al,-$11[bp]
16782 3D61           24                     02  and	al,*2
16783                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16784 3D63           3C                     02  cmp	al,*2
16785 3D65           75           0D            jne 	.6A
16786                       00003D67            .6B:
16787                                           ! 2019     {
16788                                           ! 2020      biosfn_perform_gray_scale_summing(0x00, 0x100);
16789                                           ! Debug: list int = const $100 (used reg = )
16790 3D67           B8                   0100  mov	ax,#$100
16791 3D6A           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3D6B           31C0                       xor	ax,ax
16794 3D6D           50                         push	ax
16795                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16796 3D6E           E8         2739            call	_biosfn_perform_gray_scale_summing
16797 3D71           83C4                   04  add	sp,*4
16798                                           !BCC_EOS
16799                                           ! 2021     }
16800                                           ! 2022   }
16801                       00003D74            .6A:
16802                                           ! 2023  inb(0x3da);
16803                       00003D74            .59:
16804                                           ! Debug: list int = const $3DA (used reg = )
16805 3D74           B8                   03DA  mov	ax,#$3DA
16806 3D77           50                         push	ax
16807                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16808 3D78           E8         3E8C            call	_inb
16809 3D7B           44                         inc	sp
16810 3D7C           44                         inc	sp
16811                                           !BCC_EOS
16812                                           ! 2024  for(i=0;i<=0x13;i++)
16813                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16814 3D7D           31C0                       xor	ax,ax
16815 3D7F           8946         F6            mov	-$A[bp],ax
16816                                           !BCC_EOS
16817                                           !BCC_EOS
16818                                           ! 2025   {outb(0x3c0,i);
16819 3D82           EB           38            jmp .6E
16820                       00003D84            .6F:
16821                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16822 3D84           FF76         F6            push	-$A[bp]
16823                                           ! Debug: list int = const $3C0 (used reg = )
16824 3D87           B8                   03C0  mov	ax,#$3C0
16825 3D8A           50                         push	ax
16826                                           ! Debug: func () void = outb+0 (used reg = )
16827 3D8B           E8         3E8F            call	_outb
16828 3D8E           83C4                   04  add	sp,*4
16829                                           !BCC_EOS
16830                                           ! 2026    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16831                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16832 3D91           8A46         F9            mov	al,-7[bp]
16833 3D94           30E4                       xor	ah,ah
16834 3D96           B1                     06  mov	cl,*6
16835 3D98           D3E0                       shl	ax,cl
16836 3D9A           89C3                       mov	bx,ax
16837 3D9C           81C3                 0291  add	bx,#_video_param_table
16838                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16839 3DA0           8B46         F6            mov	ax,-$A[bp]
16840 3DA3           01C3                       add	bx,ax
16841                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16842 3DA5           8A47         23            mov	al,$23[bx]
16843 3DA8           30E4                       xor	ah,ah
16844 3DAA           50                         push	ax
16845                                           ! Debug: list int = const $3C0 (used reg = )
16846 3DAB           B8                   03C0  mov	ax,#$3C0
16847 3DAE           50                         push	ax
16848                                           ! Debug: func () void = outb+0 (used reg = )
16849 3DAF           E8         3E6B            call	_outb
16850 3DB2           83C4                   04  add	sp,*4
16851                                           !BCC_EOS
16852                                           ! 2027   }
16853                                           ! 2028  outb(0x3c0,0x14);
16854                       00003DB5            .6D:
16855                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16856 3DB5           8B46         F6            mov	ax,-$A[bp]
16857 3DB8           40                         inc	ax
16858 3DB9           8946         F6            mov	-$A[bp],ax
16859                       00003DBC            .6E:
16860                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16861 3DBC           8B46         F6            mov	ax,-$A[bp]
16862 3DBF           3D                   0013  cmp	ax,*$13
16863 3DC2           76           C0            jbe	.6F
16864                       00003DC4            .70:
16865                       00003DC4            .6C:
16866                                           ! Debug: list int = const $14 (used reg = )
16867 3DC4           B8                   0014  mov	ax,*$14
16868 3DC7           50                         push	ax
16869                                           ! Debug: list int = const $3C0 (used reg = )
16870 3DC8           B8                   03C0  mov	ax,#$3C0
16871 3DCB           50                         push	ax
16872                                           ! Debug: func () void = outb+0 (used reg = )
16873 3DCC           E8         3E4E            call	_outb
16874 3DCF           83C4                   04  add	sp,*4
16875                                           !BCC_EOS
16876                                           ! 2029  outb(0x3c0,0x00);
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3DD2           31C0                       xor	ax,ax
16879 3DD4           50                         push	ax
16880                                           ! Debug: list int = const $3C0 (used reg = )
16881 3DD5           B8                   03C0  mov	ax,#$3C0
16882 3DD8           50                         push	ax
16883                                           ! Debug: func () void = outb+0 (used reg = )
16884 3DD9           E8         3E41            call	_outb
16885 3DDC           83C4                   04  add	sp,*4
16886                                           !BCC_EOS
16887                                           ! 2030  outb(0x3c4,0);
16888                                           ! Debug: list int = const 0 (used reg = )
16889 3DDF           31C0                       xor	ax,ax
16890 3DE1           50                         push	ax
16891                                           ! Debug: list int = const $3C4 (used reg = )
16892 3DE2           B8                   03C4  mov	ax,#$3C4
16893 3DE5           50                         push	ax
16894                                           ! Debug: func () void = outb+0 (used reg = )
16895 3DE6           E8         3E34            call	_outb
16896 3DE9           83C4                   04  add	sp,*4
16897                                           !BCC_EOS
16898                                           ! 2031  outb(0x3c5,0x03);
16899                                           ! Debug: list int = const 3 (used reg = )
16900 3DEC           B8                   0003  mov	ax,*3
16901 3DEF           50                         push	ax
16902                                           ! Debug: list int = const $3C5 (used reg = )
16903 3DF0           B8                   03C5  mov	ax,#$3C5
16904 3DF3           50                         push	ax
16905                                           ! Debug: func () void = outb+0 (used reg = )
16906 3DF4           E8         3E26            call	_outb
16907 3DF7           83C4                   04  add	sp,*4
16908                                           !BCC_EOS
16909                                           ! 2032  for(i=1;i<=4;i++)
16910                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16911 3DFA           B8                   0001  mov	ax,*1
16912 3DFD           8946         F6            mov	-$A[bp],ax
16913                                           !BCC_EOS
16914                                           !BCC_EOS
16915                                           ! 2033   {outb(0x3c4,i);
16916 3E00           EB           3F            jmp .73
16917                       00003E02            .74:
16918                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16919 3E02           FF76         F6            push	-$A[bp]
16920                                           ! Debug: list int = const $3C4 (used reg = )
16921 3E05           B8                   03C4  mov	ax,#$3C4
16922 3E08           50                         push	ax
16923                                           ! Debug: func () void = outb+0 (used reg = )
16924 3E09           E8         3E11            call	_outb
16925 3E0C           83C4                   04  add	sp,*4
16926                                           !BCC_EOS
16927                                           ! 2034    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16928                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16929 3E0F           8B46         F6            mov	ax,-$A[bp]
16930 3E12           48                         dec	ax
16931 3E13           50                         push	ax
16932                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16933 3E14           8A46         F9            mov	al,-7[bp]
16934 3E17           30E4                       xor	ah,ah
16935 3E19           B1                     06  mov	cl,*6
16936 3E1B           D3E0                       shl	ax,cl
16937 3E1D           89C3                       mov	bx,ax
16938 3E1F           81C3                 0291  add	bx,#_video_param_table
16939                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16940 3E23           8B46         E8            mov	ax,-$18[bp]
16941 3E26           01C3                       add	bx,ax
16942 3E28           44                         inc	sp
16943 3E29           44                         inc	sp
16944                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16945 3E2A           8A47         05            mov	al,5[bx]
16946 3E2D           30E4                       xor	ah,ah
16947 3E2F           50                         push	ax
16948                                           ! Debug: list int = const $3C5 (used reg = )
16949 3E30           B8                   03C5  mov	ax,#$3C5
16950 3E33           50                         push	ax
16951                                           ! Debug: func () void = outb+0 (used reg = )
16952 3E34           E8         3DE6            call	_outb
16953 3E37           83C4                   04  add	sp,*4
16954                                           !BCC_EOS
16955                                           ! 2035   }
16956                                           ! 2036  for(i=0;i<=8;i++)
16957                       00003E3A            .72:
16958                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16959 3E3A           8B46         F6            mov	ax,-$A[bp]
16960 3E3D           40                         inc	ax
16961 3E3E           8946         F6            mov	-$A[bp],ax
16962                       00003E41            .73:
16963                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16964 3E41           8B46         F6            mov	ax,-$A[bp]
16965 3E44           3D                   0004  cmp	ax,*4
16966 3E47           76           B9            jbe	.74
16967                       00003E49            .75:
16968                       00003E49            .71:
16969                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16970 3E49           31C0                       xor	ax,ax
16971 3E4B           8946         F6            mov	-$A[bp],ax
16972                                           !BCC_EOS
16973                                           !BCC_EOS
16974                                           ! 2037   {outb(0x3ce,i);
16975 3E4E           EB           38            jmp .78
16976                       00003E50            .79:
16977                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16978 3E50           FF76         F6            push	-$A[bp]
16979                                           ! Debug: list int = const $3CE (used reg = )
16980 3E53           B8                   03CE  mov	ax,#$3CE
16981 3E56           50                         push	ax
16982                                           ! Debug: func () void = outb+0 (used reg = )
16983 3E57           E8         3DC3            call	_outb
16984 3E5A           83C4                   04  add	sp,*4
16985                                           !BCC_EOS
16986                                           ! 2038    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16987                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16988 3E5D           8A46         F9            mov	al,-7[bp]
16989 3E60           30E4                       xor	ah,ah
16990 3E62           B1                     06  mov	cl,*6
16991 3E64           D3E0                       shl	ax,cl
16992 3E66           89C3                       mov	bx,ax
16993 3E68           81C3                 0291  add	bx,#_video_param_table
16994                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16995 3E6C           8B46         F6            mov	ax,-$A[bp]
16996 3E6F           01C3                       add	bx,ax
16997                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16998 3E71           8A47         37            mov	al,$37[bx]
16999 3E74           30E4                       xor	ah,ah
17000 3E76           50                         push	ax
17001                                           ! Debug: list int = const $3CF (used reg = )
17002 3E77           B8                   03CF  mov	ax,#$3CF
17003 3E7A           50                         push	ax
17004                                           ! Debug: func () void = outb+0 (used reg = )
17005 3E7B           E8         3D9F            call	_outb
17006 3E7E           83C4                   04  add	sp,*4
17007                                           !BCC_EOS
17008                                           ! 2039   }
17009                                           ! 2040  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17010                       00003E81            .77:
17011                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17012 3E81           8B46         F6            mov	ax,-$A[bp]
17013 3E84           40                         inc	ax
17014 3E85           8946         F6            mov	-$A[bp],ax
17015                       00003E88            .78:
17016                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17017 3E88           8B46         F6            mov	ax,-$A[bp]
17018 3E8B           3D                   0008  cmp	ax,*8
17019 3E8E           76           C0            jbe	.79
17020                       00003E90            .7A:
17021                       00003E90            .76:
17022                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17023 3E90           8A46         FE            mov	al,-2[bp]
17024 3E93           30E4                       xor	ah,ah
17025 3E95           B1                     03  mov	cl,*3
17026 3E97           D3E0                       shl	ax,cl
17027 3E99           89C3                       mov	bx,ax
17028 3E9B           81C3                 01FD  add	bx,#_vga_modes
17029                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17030 3E9F           8A47         02            mov	al,2[bx]
17031 3EA2           3C                     01  cmp	al,*1
17032 3EA4           75           05            jne 	.7B
17033                       00003EA6            .7C:
17034 3EA6           B8                   03B4  mov	ax,#$3B4
17035 3EA9           EB           03            jmp .7D
17036                       00003EAB            .7B:
17037 3EAB           B8                   03D4  mov	ax,#$3D4
17038                       00003EAE            .7D:
17039                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17040 3EAE           8946         EA            mov	-$16[bp],ax
17041                                           !BCC_EOS
17042                                           ! 2041  outw(crtc_addr,0x0011);
17043                                           ! Debug: list int = const $11 (used reg = )
17044 3EB1           B8                   0011  mov	ax,*$11
17045 3EB4           50                         push	ax
17046                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17047 3EB5           FF76         EA            push	-$16[bp]
17048                                           ! Debug: func () void = outw+0 (used reg = )
17049 3EB8           E8         3D72            call	_outw
17050 3EBB           83C4                   04  add	sp,*4
17051                                           !BCC_EOS
17052                                           ! 2042  for(i=0;i<=0x18;i++)
17053                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17054 3EBE           31C0                       xor	ax,ax
17055 3EC0           8946         F6            mov	-$A[bp],ax
17056                                           !BCC_EOS
17057                                           !BCC_EOS
17058                                           ! 2043   {outb(crtc_addr,i);
17059 3EC3           EB           38            jmp .80
17060                       00003EC5            .81:
17061                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17062 3EC5           FF76         F6            push	-$A[bp]
17063                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17064 3EC8           FF76         EA            push	-$16[bp]
17065                                           ! Debug: func () void = outb+0 (used reg = )
17066 3ECB           E8         3D4F            call	_outb
17067 3ECE           83C4                   04  add	sp,*4
17068                                           !BCC_EOS
17069                                           ! 2044    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17070                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17071 3ED1           8A46         F9            mov	al,-7[bp]
17072 3ED4           30E4                       xor	ah,ah
17073 3ED6           B1                     06  mov	cl,*6
17074 3ED8           D3E0                       shl	ax,cl
17075 3EDA           89C3                       mov	bx,ax
17076 3EDC           81C3                 0291  add	bx,#_video_param_table
17077                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17078 3EE0           8B46         F6            mov	ax,-$A[bp]
17079 3EE3           01C3                       add	bx,ax
17080                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17081 3EE5           8A47         0A            mov	al,$A[bx]
17082 3EE8           30E4                       xor	ah,ah
17083 3EEA           50                         push	ax
17084                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17085 3EEB           8B46         EA            mov	ax,-$16[bp]
17086                                           ! Debug: list unsigned int = ax+1 (used reg = )
17087 3EEE           40                         inc	ax
17088 3EEF           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3EF0           E8         3D2A            call	_outb
17091 3EF3           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2045   }
17094                                           ! 2046  outb(0x3c2,video_param_table[vpti].miscreg);
17095                       00003EF6            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3EF6           8B46         F6            mov	ax,-$A[bp]
17098 3EF9           40                         inc	ax
17099 3EFA           8946         F6            mov	-$A[bp],ax
17100                       00003EFD            .80:
17101                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17102 3EFD           8B46         F6            mov	ax,-$A[bp]
17103 3F00           3D                   0018  cmp	ax,*$18
17104 3F03           76           C0            jbe	.81
17105                       00003F05            .82:
17106                       00003F05            .7E:
17107                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17108 3F05           8A46         F9            mov	al,-7[bp]
17109 3F08           30E4                       xor	ah,ah
17110 3F0A           B1                     06  mov	cl,*6
17111 3F0C           D3E0                       shl	ax,cl
17112 3F0E           89C3                       mov	bx,ax
17113 3F10           81C3                 0291  add	bx,#_video_param_table
17114                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17115 3F14           8A47         09            mov	al,9[bx]
17116 3F17           30E4                       xor	ah,ah
17117 3F19           50                         push	ax
17118                                           ! Debug: list int = const $3C2 (used reg = )
17119 3F1A           B8                   03C2  mov	ax,#$3C2
17120 3F1D           50                         push	ax
17121                                           ! Debug: func () void = outb+0 (used reg = )
17122 3F1E           E8         3CFC            call	_outb
17123 3F21           83C4                   04  add	sp,*4
17124                                           !BCC_EOS
17125                                           ! 2047  outb(0x3c0,0x20);
17126                                           ! Debug: list int = const $20 (used reg = )
17127 3F24           B8                   0020  mov	ax,*$20
17128 3F27           50                         push	ax
17129                                           ! Debug: list int = const $3C0 (used reg = )
17130 3F28           B8                   03C0  mov	ax,#$3C0
17131 3F2B           50                         push	ax
17132                                           ! Debug: func () void = outb+0 (used reg = )
17133 3F2C           E8         3CEE            call	_outb
17134 3F2F           83C4                   04  add	sp,*4
17135                                           !BCC_EOS
17136                                           ! 2048  inb(0x3da);
17137                                           ! Debug: list int = const $3DA (used reg = )
17138 3F32           B8                   03DA  mov	ax,#$3DA
17139 3F35           50                         push	ax
17140                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17141 3F36           E8         3CCE            call	_inb
17142 3F39           44                         inc	sp
17143 3F3A           44                         inc	sp
17144                                           !BCC_EOS
17145                                           ! 2049  if(noclearmem==0x00)
17146                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17147 3F3B           8A46         FF            mov	al,-1[bp]
17148 3F3E           84C0                       test	al,al
17149 3F40         0F85         00C1            bne 	.83
17150                       00003F44            .84:
17151                                           ! 2050   {
17152                                           ! 2051    if(vga_modes[line].class==0x00)
17153                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17154 3F44           8A46         FE            mov	al,-2[bp]
17155 3F47           30E4                       xor	ah,ah
17156 3F49           B1                     03  mov	cl,*3
17157 3F4B           D3E0                       shl	ax,cl
17158 3F4D           89C3                       mov	bx,ax
17159 3F4F           81C3                 01FD  add	bx,#_vga_modes
17160                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17161 3F53           8A47         01            mov	al,1[bx]
17162 3F56           84C0                       test	al,al
17163 3F58           75           26            jne 	.85
17164                       00003F5A            .86:
17165                                           ! 2052     {
17166                                           ! 2053      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17167                                           ! Debug: list int = const $4000 (used reg = )
17168 3F5A           B8                   4000  mov	ax,#$4000
17169 3F5D           50                         push	ax
17170                                           ! Debug: list int = const $720 (used reg = )
17171 3F5E           B8                   0720  mov	ax,#$720
17172 3F61           50                         push	ax
17173                                           ! Debug: list int = const 0 (used reg = )
17174 3F62           31C0                       xor	ax,ax
17175 3F64           50                         push	ax
17176                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17177 3F65           8A46         FE            mov	al,-2[bp]
17178 3F68           30E4                       xor	ah,ah
17179 3F6A           B1                     03  mov	cl,*3
17180 3F6C           D3E0                       shl	ax,cl
17181 3F6E           89C3                       mov	bx,ax
17182 3F70           81C3                 01FD  add	bx,#_vga_modes
17183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17184 3F74           FF77         04            push	4[bx]
17185                                           ! Debug: func () void = memsetw+0 (used reg = )
17186 3F77           E8         3BB2            call	_memsetw
17187 3F7A           83C4                   08  add	sp,*8
17188                                           !BCC_EOS
17189                                           ! 2054     }
17190                                           ! 2055    else
17191                                           ! 2056     {
17192 3F7D           E9         0085            br 	.87
17193                       00003F80            .85:
17194                                           ! 2057      if(mode<0x0d)
17195                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17196 3F80           8A46         04            mov	al,4[bp]
17197 3F83           3C                     0D  cmp	al,*$D
17198 3F85           73           24            jae 	.88
17199                       00003F87            .89:
17200                                           ! 2058       {
17201                                           ! 2059        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17202                                           ! Debug: list int = const $4000 (used reg = )
17203 3F87           B8                   4000  mov	ax,#$4000
17204 3F8A           50                         push	ax
17205                                           ! Debug: list int = const 0 (used reg = )
17206 3F8B           31C0                       xor	ax,ax
17207 3F8D           50                         push	ax
17208                                           ! Debug: list int = const 0 (used reg = )
17209 3F8E           31C0                       xor	ax,ax
17210 3F90           50                         push	ax
17211                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17212 3F91           8A46         FE            mov	al,-2[bp]
17213 3F94           30E4                       xor	ah,ah
17214 3F96           B1                     03  mov	cl,*3
17215 3F98           D3E0                       shl	ax,cl
17216 3F9A           89C3                       mov	bx,ax
17217 3F9C           81C3                 01FD  add	bx,#_vga_modes
17218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17219 3FA0           FF77         04            push	4[bx]
17220                                           ! Debug: func () void = memsetw+0 (used reg = )
17221 3FA3           E8         3B86            call	_memsetw
17222 3FA6           83C4                   08  add	sp,*8
17223                                           !BCC_EOS
17224                                           ! 2060       }
17225                                           ! 2061      else
17226                                           ! 2062       {
17227 3FA9           EB           5A            jmp .8A
17228                       00003FAB            .88:
17229                                           ! 2063        outb( 0x3c4, 0x02 );
17230                                           ! Debug: list int = const 2 (used reg = )
17231 3FAB           B8                   0002  mov	ax,*2
17232 3FAE           50                         push	ax
17233                                           ! Debug: list int = const $3C4 (used reg = )
17234 3FAF           B8                   03C4  mov	ax,#$3C4
17235 3FB2           50                         push	ax
17236                                           ! Debug: func () void = outb+0 (used reg = )
17237 3FB3           E8         3C67            call	_outb
17238 3FB6           83C4                   04  add	sp,*4
17239                                           !BCC_EOS
17240                                           ! 2064        mmask = inb( 0x3c5 );
17241                                           ! Debug: list int = const $3C5 (used reg = )
17242 3FB9           B8                   03C5  mov	ax,#$3C5
17243 3FBC           50                         push	ax
17244                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17245 3FBD           E8         3C47            call	_inb
17246 3FC0           44                         inc	sp
17247 3FC1           44                         inc	sp
17248                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17249 3FC2           8846         FD            mov	-3[bp],al
17250                                           !BCC_EOS
17251                                           ! 2065        outb( 0x3c5, 0x0f );
17252                                           ! Debug: list int = const $F (used reg = )
17253 3FC5           B8                   000F  mov	ax,*$F
17254 3FC8           50                         push	ax
17255                                           ! Debug: list int = const $3C5 (used reg = )
17256 3FC9           B8                   03C5  mov	ax,#$3C5
17257 3FCC           50                         push	ax
17258                                           ! Debug: func () void = outb+0 (used reg = )
17259 3FCD           E8         3C4D            call	_outb
17260 3FD0           83C4                   04  add	sp,*4
17261                                           !BCC_EOS
17262                                           ! 2066        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17263                                           ! Debug: list unsigned int = const $8000 (used reg = )
17264 3FD3           B8                   8000  mov	ax,#$8000
17265 3FD6           50                         push	ax
17266                                           ! Debug: list int = const 0 (used reg = )
17267 3FD7           31C0                       xor	ax,ax
17268 3FD9           50                         push	ax
17269                                           ! Debug: list int = const 0 (used reg = )
17270 3FDA           31C0                       xor	ax,ax
17271 3FDC           50                         push	ax
17272                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17273 3FDD           8A46         FE            mov	al,-2[bp]
17274 3FE0           30E4                       xor	ah,ah
17275 3FE2           B1                     03  mov	cl,*3
17276 3FE4           D3E0                       shl	ax,cl
17277 3FE6           89C3                       mov	bx,ax
17278 3FE8           81C3                 01FD  add	bx,#_vga_modes
17279                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17280 3FEC           FF77         04            push	4[bx]
17281                                           ! Debug: func () void = memsetw+0 (used reg = )
17282 3FEF           E8         3B3A            call	_memsetw
17283 3FF2           83C4                   08  add	sp,*8
17284                                           !BCC_EOS
17285                                           ! 2067        outb( 0x3c5, mmask );
17286                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17287 3FF5           8A46         FD            mov	al,-3[bp]
17288 3FF8           30E4                       xor	ah,ah
17289 3FFA           50                         push	ax
17290                                           ! Debug: list int = const $3C5 (used reg = )
17291 3FFB           B8                   03C5  mov	ax,#$3C5
17292 3FFE           50                         push	ax
17293                                           ! Debug: func () void = outb+0 (used reg = )
17294 3FFF           E8         3C1B            call	_outb
17295 4002           83C4                   04  add	sp,*4
17296                                           !BCC_EOS
17297                                           ! 2068       }
17298                                           ! 2069     }
17299                       00004005            .8A:
17300                                           ! 2070   }
17301                       00004005            .87:
17302                                           ! 2071  write_byte(0x40,0x49,mode);
17303                       00004005            .83:
17304                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17305 4005           8A46         04            mov	al,4[bp]
17306 4008           30E4                       xor	ah,ah
17307 400A           50                         push	ax
17308                                           ! Debug: list int = const $49 (used reg = )
17309 400B           B8                   0049  mov	ax,*$49
17310 400E           50                         push	ax
17311                                           ! Debug: list int = const $40 (used reg = )
17312 400F           B8                   0040  mov	ax,*$40
17313 4012           50                         push	ax
17314                                           ! Debug: func () void = write_byte+0 (used reg = )
17315 4013           E8         3BC1            call	_write_byte
17316 4016           83C4                   06  add	sp,*6
17317                                           !BCC_EOS
17318                                           ! 2072  write_word(0x40,0x4A,twidth);
17319                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17320 4019           FF76         F4            push	-$C[bp]
17321                                           ! Debug: list int = const $4A (used reg = )
17322 401C           B8                   004A  mov	ax,*$4A
17323 401F           50                         push	ax
17324                                           ! Debug: list int = const $40 (used reg = )
17325 4020           B8                   0040  mov	ax,*$40
17326 4023           50                         push	ax
17327                                           ! Debug: func () void = write_word+0 (used reg = )
17328 4024           E8         3BC8            call	_write_word
17329 4027           83C4                   06  add	sp,*6
17330                                           !BCC_EOS
17331                                           ! 2073  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17332                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17333 402A           8A46         F9            mov	al,-7[bp]
17334 402D           30E4                       xor	ah,ah
17335 402F           B1                     06  mov	cl,*6
17336 4031           D3E0                       shl	ax,cl
17337 4033           89C3                       mov	bx,ax
17338 4035           81C3                 0291  add	bx,#_video_param_table
17339                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17340                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17341                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17342 4039           FF77         03            push	3[bx]
17343                                           ! Debug: list int = const $4C (used reg = )
17344 403C           B8                   004C  mov	ax,*$4C
17345 403F           50                         push	ax
17346                                           ! Debug: list int = const $40 (used reg = )
17347 4040           B8                   0040  mov	ax,*$40
17348 4043           50                         push	ax
17349                                           ! Debug: func () void = write_word+0 (used reg = )
17350 4044           E8         3BA8            call	_write_word
17351 4047           83C4                   06  add	sp,*6
17352                                           !BCC_EOS
17353                                           ! 2074  write_word(0x40,0x63,crtc_addr);
17354                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17355 404A           FF76         EA            push	-$16[bp]
17356                                           ! Debug: list int = const $63 (used reg = )
17357 404D           B8                   0063  mov	ax,*$63
17358 4050           50                         push	ax
17359                                           ! Debug: list int = const $40 (used reg = )
17360 4051           B8                   0040  mov	ax,*$40
17361 4054           50                         push	ax
17362                                           ! Debug: func () void = write_word+0 (used reg = )
17363 4055           E8         3B97            call	_write_word
17364 4058           83C4                   06  add	sp,*6
17365                                           !BCC_EOS
17366                                           ! 2075  write_byte(0x40
17367                                           ! 2075 ,0x84,theightm1);
17368                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17369 405B           FF76         F2            push	-$E[bp]
17370                                           ! Debug: list int = const $84 (used reg = )
17371 405E           B8                   0084  mov	ax,#$84
17372 4061           50                         push	ax
17373                                           ! Debug: list int = const $40 (used reg = )
17374 4062           B8                   0040  mov	ax,*$40
17375 4065           50                         push	ax
17376                                           ! Debug: func () void = write_byte+0 (used reg = )
17377 4066           E8         3B6E            call	_write_byte
17378 4069           83C4                   06  add	sp,*6
17379                                           !BCC_EOS
17380                                           ! 2076  write_word(0x40,0x85,cheight);
17381                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17382 406C           FF76         F0            push	-$10[bp]
17383                                           ! Debug: list int = const $85 (used reg = )
17384 406F           B8                   0085  mov	ax,#$85
17385 4072           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 4073           B8                   0040  mov	ax,*$40
17388 4076           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 4077           E8         3B75            call	_write_word
17391 407A           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 2077  write_byte(0x40,0x87,(0x60|noclearmem));
17394                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17395                                           ! Debug: expression subtree swapping
17396 407D           8A46         FF            mov	al,-1[bp]
17397 4080           0C                     60  or	al,*$60
17398                                           ! Debug: list unsigned char = al+0 (used reg = )
17399 4082           30E4                       xor	ah,ah
17400 4084           50                         push	ax
17401                                           ! Debug: list int = const $87 (used reg = )
17402 4085           B8                   0087  mov	ax,#$87
17403 4088           50                         push	ax
17404                                           ! Debug: list int = const $40 (used reg = )
17405 4089           B8                   0040  mov	ax,*$40
17406 408C           50                         push	ax
17407                                           ! Debug: func () void = write_byte+0 (used reg = )
17408 408D           E8         3B47            call	_write_byte
17409 4090           83C4                   06  add	sp,*6
17410                                           !BCC_EOS
17411                                           ! 2078  write_byte(0x40,0x88,0xF9);
17412                                           ! Debug: list int = const $F9 (used reg = )
17413 4093           B8                   00F9  mov	ax,#$F9
17414 4096           50                         push	ax
17415                                           ! Debug: list int = const $88 (used reg = )
17416 4097           B8                   0088  mov	ax,#$88
17417 409A           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 409B           B8                   0040  mov	ax,*$40
17420 409E           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 409F           E8         3B35            call	_write_byte
17423 40A2           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2079  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17426                                           ! Debug: list int = const $89 (used reg = )
17427 40A5           B8                   0089  mov	ax,#$89
17428 40A8           50                         push	ax
17429                                           ! Debug: list int = const $40 (used reg = )
17430 40A9           B8                   0040  mov	ax,*$40
17431 40AC           50                         push	ax
17432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17433 40AD           E8         3B01            call	_read_byte
17434 40B0           83C4                   04  add	sp,*4
17435                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17436 40B3           24                     7F  and	al,*$7F
17437                                           ! Debug: list unsigned char = al+0 (used reg = )
17438 40B5           30E4                       xor	ah,ah
17439 40B7           50                         push	ax
17440                                           ! Debug: list int = const $89 (used reg = )
17441 40B8           B8                   0089  mov	ax,#$89
17442 40BB           50                         push	ax
17443                                           ! Debug: list int = const $40 (used reg = )
17444 40BC           B8                   0040  mov	ax,*$40
17445 40BF           50                         push	ax
17446                                           ! Debug: func () void = write_byte+0 (used reg = )
17447 40C0           E8         3B14            call	_write_byte
17448 40C3           83C4                   06  add	sp,*6
17449                                           !BCC_EOS
17450                                           ! 2080  write_byte(0x40,0x8A,0x08);
17451                                           ! Debug: list int = const 8 (used reg = )
17452 40C6           B8                   0008  mov	ax,*8
17453 40C9           50                         push	ax
17454                                           ! Debug: list int = const $8A (used reg = )
17455 40CA           B8                   008A  mov	ax,#$8A
17456 40CD           50                         push	ax
17457                                           ! Debug: list int = const $40 (used reg = )
17458 40CE           B8                   0040  mov	ax,*$40
17459 40D1           50                         push	ax
17460                                           ! Debug: func () void = write_byte+0 (used reg = )
17461 40D2           E8         3B02            call	_write_byte
17462 40D5           83C4                   06  add	sp,*6
17463                                           !BCC_EOS
17464                                           ! 2081  write_word(0x40,0xA8, video_save_pointer_table);
17465                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17466 40D8           BB                   35C6  mov	bx,#_video_save_pointer_table
17467 40DB           53                         push	bx
17468                                           ! Debug: list int = const $A8 (used reg = )
17469 40DC           B8                   00A8  mov	ax,#$A8
17470 40DF           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 40E0           B8                   0040  mov	ax,*$40
17473 40E3           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 40E4           E8         3B08            call	_write_word
17476 40E7           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2082  write_word(0x40,0xA8 +2, 0xc000);
17479                                           ! Debug: list unsigned int = const $C000 (used reg = )
17480 40EA           B8                   C000  mov	ax,#$C000
17481 40ED           50                         push	ax
17482                                           ! Debug: list int = const $AA (used reg = )
17483 40EE           B8                   00AA  mov	ax,#$AA
17484 40F1           50                         push	ax
17485                                           ! Debug: list int = const $40 (used reg = )
17486 40F2           B8                   0040  mov	ax,*$40
17487 40F5           50                         push	ax
17488                                           ! Debug: func () void = write_word+0 (used reg = )
17489 40F6           E8         3AF6            call	_write_word
17490 40F9           83C4                   06  add	sp,*6
17491                                           !BCC_EOS
17492                                           ! 2083  write_byte(0x40,0x65,0x00);
17493                                           ! Debug: list int = const 0 (used reg = )
17494 40FC           31C0                       xor	ax,ax
17495 40FE           50                         push	ax
17496                                           ! Debug: list int = const $65 (used reg = )
17497 40FF           B8                   0065  mov	ax,*$65
17498 4102           50                         push	ax
17499                                           ! Debug: list int = const $40 (used reg = )
17500 4103           B8                   0040  mov	ax,*$40
17501 4106           50                         push	ax
17502                                           ! Debug: func () void = write_byte+0 (used reg = )
17503 4107           E8         3ACD            call	_write_byte
17504 410A           83C4                   06  add	sp,*6
17505                                           !BCC_EOS
17506                                           ! 2084  write_byte(0x40,0x66,0x00);
17507                                           ! Debug: list int = const 0 (used reg = )
17508 410D           31C0                       xor	ax,ax
17509 410F           50                         push	ax
17510                                           ! Debug: list int = const $66 (used reg = )
17511 4110           B8                   0066  mov	ax,*$66
17512 4113           50                         push	ax
17513                                           ! Debug: list int = const $40 (used reg = )
17514 4114           B8                   0040  mov	ax,*$40
17515 4117           50                         push	ax
17516                                           ! Debug: func () void = write_byte+0 (used reg = )
17517 4118           E8         3ABC            call	_write_byte
17518 411B           83C4                   06  add	sp,*6
17519                                           !BCC_EOS
17520                                           ! 2085  if(vga_modes[line].class==0x00)
17521                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17522 411E           8A46         FE            mov	al,-2[bp]
17523 4121           30E4                       xor	ah,ah
17524 4123           B1                     03  mov	cl,*3
17525 4125           D3E0                       shl	ax,cl
17526 4127           89C3                       mov	bx,ax
17527 4129           81C3                 01FD  add	bx,#_vga_modes
17528                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17529 412D           8A47         01            mov	al,1[bx]
17530 4130           84C0                       test	al,al
17531 4132           75           0E            jne 	.8B
17532                       00004134            .8C:
17533                                           ! 2086   {
17534                                           ! 2087    biosfn_set_cursor_shape(0x06,0x07);
17535                                           ! Debug: list int = const 7 (used reg = )
17536 4134           B8                   0007  mov	ax,*7
17537 4137           50                         push	ax
17538                                           ! Debug: list int = const 6 (used reg = )
17539 4138           B8                   0006  mov	ax,*6
17540 413B           50                         push	ax
17541                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17542 413C           E8         00BB            call	_biosfn_set_cursor_shape
17543 413F           83C4                   04  add	sp,*4
17544                                           !BCC_EOS
17545                                           ! 2088   }
17546                                           ! 2089  for(i=0;i<8;i++)
17547                       00004142            .8B:
17548                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17549 4142           31C0                       xor	ax,ax
17550 4144           8946         F6            mov	-$A[bp],ax
17551                                           !BCC_EOS
17552                                           !BCC_EOS
17553                                           ! 2090   biosfn_set_cursor_pos(i,0x0000);
17554 4147           EB           13            jmp .8F
17555                       00004149            .90:
17556                                           ! Debug: list int = const 0 (used reg = )
17557 4149           31C0                       xor	ax,ax
17558 414B           50                         push	ax
17559                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17560 414C           FF76         F6            push	-$A[bp]
17561                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17562 414F           E8         01C3            call	_biosfn_set_cursor_pos
17563 4152           83C4                   04  add	sp,*4
17564                                           !BCC_EOS
17565                                           ! 2091  biosfn_set_active_page(0x00);
17566                       00004155            .8E:
17567                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17568 4155           8B46         F6            mov	ax,-$A[bp]
17569 4158           40                         inc	ax
17570 4159           8946         F6            mov	-$A[bp],ax
17571                       0000415C            .8F:
17572                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17573 415C           8B46         F6            mov	ax,-$A[bp]
17574 415F           3D                   0008  cmp	ax,*8
17575 4162           72           E5            jb 	.90
17576                       00004164            .91:
17577                       00004164            .8D:
17578                                           ! Debug: list int = const 0 (used reg = )
17579 4164           31C0                       xor	ax,ax
17580 4166           50                         push	ax
17581                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17582 4167           E8         0320            call	_biosfn_set_active_page
17583 416A           44                         inc	sp
17584 416B           44                         inc	sp
17585                                           !BCC_EOS
17586                                           ! 2092  if(vga_modes[line].class==0x00)
17587                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17588 416C           8A46         FE            mov	al,-2[bp]
17589 416F           30E4                       xor	ah,ah
17590 4171           B1                     03  mov	cl,*3
17591 4173           D3E0                       shl	ax,cl
17592 4175           89C3                       mov	bx,ax
17593 4177           81C3                 01FD  add	bx,#_vga_modes
17594                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17595 417B           8A47         01            mov	al,1[bx]
17596 417E           84C0                       test	al,al
17597 4180           75           0E            jne 	.92
17598                       00004182            .93:
17599                                           ! 2093   {
17600                                           ! 2094 #asm
17601                                           !BCC_EOS
17602                                           !BCC_ASM
17603                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17604                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17605                       00000008            _biosfn_set_video_mode.theightm1	set	8
17606                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17607                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17608                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17609                       00000014            _biosfn_set_video_mode.line	set	$14
17610                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17611                       00000006            _biosfn_set_video_mode.cheight	set	6
17612                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17613                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17614                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17615                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17616                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17617                       0000000C            _biosfn_set_video_mode.i	set	$C
17618                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17619                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17620                       00000004            .biosfn_set_video_mode.mode	set	4
17621                       00000010            _biosfn_set_video_mode.palette	set	$10
17622                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17623                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17624                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17625                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17626                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17627                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17628                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17629                       00000013            _biosfn_set_video_mode.mmask	set	$13
17630                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17631                                             ;; copy and activate 8x16 font
17632 4182           B8                   1104    mov ax, #0x1104
17633 4185           B3                     00    mov bl, #0x00
17634 4187           CD                     10    int #0x10
17635 4189           B8                   1103    mov ax, #0x1103
17636 418C           B3                     00    mov bl, #0x00
17637 418E           CD                     10    int #0x10
17638                                           ! 2102 endasm
17639                                           !BCC_ENDASM
17640                                           !BCC_EOS
17641                                           ! 2103   }
17642                                           ! 2104 #asm
17643                       00004190            .92:
17644                                           !BCC_EOS
17645                                           !BCC_ASM
17646                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17647                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17648                       00000008            _biosfn_set_video_mode.theightm1	set	8
17649                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17650                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17651                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17652                       00000014            _biosfn_set_video_mode.line	set	$14
17653                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17654                       00000006            _biosfn_set_video_mode.cheight	set	6
17655                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17656                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17657                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17658                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17659                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17660                       0000000C            _biosfn_set_video_mode.i	set	$C
17661                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17662                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17663                       00000004            .biosfn_set_video_mode.mode	set	4
17664                       00000010            _biosfn_set_video_mode.palette	set	$10
17665                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17666                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17667                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17668                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17669                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17670                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17671                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17672                       00000013            _biosfn_set_video_mode.mmask	set	$13
17673                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17674                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4190           1E                           push ds
 +a   4191           31C0                         xor ax, ax
 +a   4193           8ED8                         mov ds, ax
 +a   4195           B8                   1361    mov ax,  #_vgafont8+128*8
 +a   4198           A3         007C              mov 0x1f*4, ax
 +a   419B           B8                   C000    mov ax,  #0xC000
 +a   419E           A3         007E              mov 0x1f*4+2, ax
 +a   41A1           1F                           pop ds
17675                                           ! 2106 endasm
17676                                           !BCC_ENDASM
17677                                           !BCC_EOS
17678                                           ! 2107   switch(cheight)
17679 41A2           8B46         F0            mov	ax,-$10[bp]
17680                                           ! 2108    {case 8:
17681 41A5           E9         003F            br 	.96
17682                                           ! 2109 #asm
17683                       000041A8            .97:
17684                                           !BCC_EOS
17685                                           !BCC_ASM
17686                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17687                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17688                       00000008            _biosfn_set_video_mode.theightm1	set	8
17689                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17690                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17691                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17692                       00000014            _biosfn_set_video_mode.line	set	$14
17693                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17694                       00000006            _biosfn_set_video_mode.cheight	set	6
17695                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17696                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17697                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17698                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17699                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17700                       0000000C            _biosfn_set_video_mode.i	set	$C
17701                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17702                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17703                       00000004            .biosfn_set_video_mode.mode	set	4
17704                       00000010            _biosfn_set_video_mode.palette	set	$10
17705                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17706                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17707                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17708                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17709                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17710                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17711                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17712                       00000013            _biosfn_set_video_mode.mmask	set	$13
17713                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17714                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41A8           1E                           push ds
 +a   41A9           31C0                         xor ax, ax
 +a   41AB           8ED8                         mov ds, ax
 +a   41AD           B8                   0F61    mov ax,  #_vgafont8
 +a   41B0           A3         010C              mov 0x43*4, ax
 +a   41B3           B8                   C000    mov ax,  #0xC000
 +a   41B6           A3         010E              mov 0x43*4+2, ax
 +a   41B9           1F                           pop ds
17715                                           ! 2111 endasm
17716                                           !BCC_ENDASM
17717                                           !BCC_EOS
17718                                           ! 2112      break;
17719 41BA           E9         0039            br 	.94
17720                                           !BCC_EOS
17721                                           ! 2113     case 14:
17722                                           ! 2114 #asm
17723                       000041BD            .98:
17724                                           !BCC_EOS
17725                                           !BCC_ASM
17726                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17727                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17728                       00000008            _biosfn_set_video_mode.theightm1	set	8
17729                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17730                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17731                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17732                       00000014            _biosfn_set_video_mode.line	set	$14
17733                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17734                       00000006            _biosfn_set_video_mode.cheight	set	6
17735                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17736                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17737                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17738                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17739                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17740                       0000000C            _biosfn_set_video_mode.i	set	$C
17741                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17742                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17743                       00000004            .biosfn_set_video_mode.mode	set	4
17744                       00000010            _biosfn_set_video_mode.palette	set	$10
17745                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17746                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17747                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17748                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17749                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17750                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17751                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17752                       00000013            _biosfn_set_video_mode.mmask	set	$13
17753                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17754                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41BD           1E                           push ds
 +a   41BE           31C0                         xor ax, ax
 +a   41C0           8ED8                         mov ds, ax
 +a   41C2           B8                   1761    mov ax,  #_vgafont14
 +a   41C5           A3         010C              mov 0x43*4, ax
 +a   41C8           B8                   C000    mov ax,  #0xC000
 +a   41CB           A3         010E              mov 0x43*4+2, ax
 +a   41CE           1F                           pop ds
17755                                           ! 2116 endasm
17756                                           !BCC_ENDASM
17757                                           !BCC_EOS
17758                                           ! 2117      break;
17759 41CF           EB           25            jmp .94
17760                                           !BCC_EOS
17761                                           ! 2118     case 16:
17762                                           ! 2119 #asm
17763                       000041D1            .99:
17764                                           !BCC_EOS
17765                                           !BCC_ASM
17766                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17767                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17768                       00000008            _biosfn_set_video_mode.theightm1	set	8
17769                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17770                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17771                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17772                       00000014            _biosfn_set_video_mode.line	set	$14
17773                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17774                       00000006            _biosfn_set_video_mode.cheight	set	6
17775                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17776                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17777                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17778                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17779                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17780                       0000000C            _biosfn_set_video_mode.i	set	$C
17781                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17782                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17783                       00000004            .biosfn_set_video_mode.mode	set	4
17784                       00000010            _biosfn_set_video_mode.palette	set	$10
17785                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17786                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17787                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17788                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17789                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17790                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17791                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17792                       00000013            _biosfn_set_video_mode.mmask	set	$13
17793                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17794                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   41D1           1E                           push ds
 +a   41D2           31C0                         xor ax, ax
 +a   41D4           8ED8                         mov ds, ax
 +a   41D6           B8                   2561    mov ax,  #_vgafont16
 +a   41D9           A3         010C              mov 0x43*4, ax
 +a   41DC           B8                   C000    mov ax,  #0xC000
 +a   41DF           A3         010E              mov 0x43*4+2, ax
 +a   41E2           1F                           pop ds
17795                                           ! 2121 endasm
17796                                           !BCC_ENDASM
17797                                           !BCC_EOS
17798                                           ! 2122      break;
17799 41E3           EB           11            jmp .94
17800                                           !BCC_EOS
17801                                           ! 2123    }
17802                                           ! 2124 }
17803 41E5           EB           0F            jmp .94
17804                       000041E7            .96:
17805 41E7           2D                   0008  sub	ax,*8
17806 41EA           74           BC            je 	.97
17807 41EC           2D                   0006  sub	ax,*6
17808 41EF           74           CC            je 	.98
17809 41F1           2D                   0002  sub	ax,*2
17810 41F4           74           DB            je 	.99
17811                       000041F6            .94:
17812                       FFFFFFE8            ..FFFD	=	-$18
17813 41F6           89EC                       mov	sp,bp
17814 41F8           5D                         pop	bp
17815 41F9           C3                         ret
17816                                           ! 2125 static void biosfn_set_cursor_shape (CH,CL)
17817                                           ! Register BX used in function biosfn_set_video_mode
17818                                           ! 2126 Bit8u CH;Bit8u CL;
17819                       000041FA            _biosfn_set_cursor_shape:
17820                                           !BCC_EOS
17821                                           !BCC_EOS
17822                                           ! 2127 {Bit16u cheight,curs,crtc_addr;
17823                                           !BCC_EOS
17824                                           ! 2128  Bit8u modeset_ctl;
17825                                           !BCC_EOS
17826                                           ! 2129  CH&=0x3f;
17827 41FA           55                         push	bp
17828 41FB           89E5                       mov	bp,sp
17829 41FD           83C4                   F8  add	sp,*-8
17830                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17831 4200           8A46         04            mov	al,4[bp]
17832 4203           24                     3F  and	al,*$3F
17833 4205           8846         04            mov	4[bp],al
17834                                           !BCC_EOS
17835                                           ! 2130  CL&=0x1f;
17836                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17837 4208           8A46         06            mov	al,6[bp]
17838 420B           24                     1F  and	al,*$1F
17839 420D           8846         06            mov	6[bp],al
17840                                           !BCC_EOS
17841                                           ! 2131  curs=(CH<<8)+CL;
17842                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17843 4210           8A46         04            mov	al,4[bp]
17844 4213           30E4                       xor	ah,ah
17845 4215           88C4                       mov	ah,al
17846 4217           30C0                       xor	al,al
17847                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17848 4219           0246         06            add	al,6[bp]
17849 421C           80D4                   00  adc	ah,*0
17850                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17851 421F           8946         FC            mov	-4[bp],ax
17852                                           !BCC_EOS
17853                                           ! 2132  write_word(0x40,0x60,curs);
17854                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17855 4222           FF76         FC            push	-4[bp]
17856                                           ! Debug: list int = const $60 (used reg = )
17857 4225           B8                   0060  mov	ax,*$60
17858 4228           50                         push	ax
17859                                           ! Debug: list int = const $40 (used reg = )
17860 4229           B8                   0040  mov	ax,*$40
17861 422C           50                         push	ax
17862                                           ! Debug: func () void = write_word+0 (used reg = )
17863 422D           E8         39BF            call	_write_word
17864 4230           83C4                   06  add	sp,*6
17865                                           !BCC_EOS
17866                                           ! 2133  modeset_ctl=read_byte(0x40,0x89);
17867                                           ! Debug: list int = const $89 (used reg = )
17868 4233           B8                   0089  mov	ax,#$89
17869 4236           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 4237           B8                   0040  mov	ax,*$40
17872 423A           50                         push	ax
17873                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17874 423B           E8         3973            call	_read_byte
17875 423E           83C4                   04  add	sp,*4
17876                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17877 4241           8846         F9            mov	-7[bp],al
17878                                           !BCC_EOS
17879                                           ! 2134  cheight = read_word(0x40,0x85);
17880                                           ! Debug: list int = const $85 (used reg = )
17881 4244           B8                   0085  mov	ax,#$85
17882 4247           50                         push	ax
17883                                           ! Debug: list int = const $40 (used reg = )
17884 4248           B8                   0040  mov	ax,*$40
17885 424B           50                         push	ax
17886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17887 424C           E8         3975            call	_read_word
17888 424F           83C4                   04  add	sp,*4
17889                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17890 4252           8946         FE            mov	-2[bp],ax
17891                                           !BCC_EOS
17892                                           ! 2135  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17893                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17894 4255           8A46         F9            mov	al,-7[bp]
17895 4258           24                     01  and	al,*1
17896 425A           84C0                       test	al,al
17897 425C           74           66            je  	.9A
17898                       0000425E            .9E:
17899                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17900 425E           8B46         FE            mov	ax,-2[bp]
17901 4261           3D                   0008  cmp	ax,*8
17902 4264           76           5E            jbe 	.9A
17903                       00004266            .9D:
17904                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17905 4266           8A46         06            mov	al,6[bp]
17906 4269           3C                     08  cmp	al,*8
17907 426B           73           57            jae 	.9A
17908                       0000426D            .9C:
17909                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17910 426D           8A46         04            mov	al,4[bp]
17911 4270           3C                     20  cmp	al,*$20
17912 4272           73           50            jae 	.9A
17913                       00004274            .9B:
17914                                           ! 2136   {
17915                                           ! 2137    if(CL!=(CH+1))
17916                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17917 4274           8A46         04            mov	al,4[bp]
17918 4277           30E4                       xor	ah,ah
17919                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17920                                           ! Debug: expression subtree swapping
17921 4279           40                         inc	ax
17922 427A           50                         push	ax
17923 427B           8A46         06            mov	al,6[bp]
17924 427E           30E4                       xor	ah,ah
17925 4280           3B46         F6            cmp	ax,-$A[bp]
17926 4283           8D66         F8            lea	sp,-8[bp]
17927 4286           74           15            je  	.9F
17928                       00004288            .A0:
17929                                           ! 2138     {
17930                                           ! 2139      CH = ((CH+1) * cheight / 8) -1;
17931                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17932 4288           8A46         04            mov	al,4[bp]
17933 428B           30E4                       xor	ah,ah
17934                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17935 428D           40                         inc	ax
17936 428E           8B4E         FE            mov	cx,-2[bp]
17937 4291           F7E9                       imul	cx
17938                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17939 4293           B1                     03  mov	cl,*3
17940 4295           D3E8                       shr	ax,cl
17941                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17942                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17943 4297           48                         dec	ax
17944 4298           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2140     }
17947                                           ! 2141    else
17948                                           ! 2142     {
17949 429B           EB           14            jmp .A1
17950                       0000429D            .9F:
17951                                           ! 2143      CH = ((CL+1) * cheight / 8) - 2;
17952                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17953 429D           8A46         06            mov	al,6[bp]
17954 42A0           30E4                       xor	ah,ah
17955                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17956 42A2           40                         inc	ax
17957 42A3           8B4E         FE            mov	cx,-2[bp]
17958 42A6           F7E9                       imul	cx
17959                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17960 42A8           B1                     03  mov	cl,*3
17961 42AA           D3E8                       shr	ax,cl
17962                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17963                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17964 42AC           48                         dec	ax
17965 42AD           48                         dec	ax
17966 42AE           8846         04            mov	4[bp],al
17967                                           !BCC_EOS
17968                                           ! 2144     }
17969                                           ! 2145    CL = ((CL+1) * cheight / 8) - 1;
17970                       000042B1            .A1:
17971                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17972 42B1           8A46         06            mov	al,6[bp]
17973 42B4           30E4                       xor	ah,ah
17974                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17975 42B6           40                         inc	ax
17976 42B7           8B4E         FE            mov	cx,-2[bp]
17977 42BA           F7E9                       imul	cx
17978                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17979 42BC           B1                     03  mov	cl,*3
17980 42BE           D3E8                       shr	ax,cl
17981                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17982                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17983 42C0           48                         dec	ax
17984 42C1           8846         06            mov	6[bp],al
17985                                           !BCC_EOS
17986                                           ! 2146   }
17987                                           ! 2147  crtc_addr=read_word(0x40,0x63);
17988                       000042C4            .9A:
17989                                           ! Debug: list int = const $63 (used reg = )
17990 42C4           B8                   0063  mov	ax,*$63
17991 42C7           50                         push	ax
17992                                           ! Debug: list int = const $40 (used reg = )
17993 42C8           B8                   0040  mov	ax,*$40
17994 42CB           50                         push	ax
17995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17996 42CC           E8         38F5            call	_read_word
17997 42CF           83C4                   04  add	sp,*4
17998                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17999 42D2           8946         FA            mov	-6[bp],ax
18000                                           !BCC_EOS
18001                                           ! 2148  outb(crtc_addr,0x0a);
18002                                           ! Debug: list int = const $A (used reg = )
18003 42D5           B8                   000A  mov	ax,*$A
18004 42D8           50                         push	ax
18005                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18006 42D9           FF76         FA            push	-6[bp]
18007                                           ! Debug: func () void = outb+0 (used reg = )
18008 42DC           E8         393E            call	_outb
18009 42DF           83C4                   04  add	sp,*4
18010                                           !BCC_EOS
18011                                           ! 2149  outb(crtc_addr+1,CH);
18012                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18013 42E2           8A46         04            mov	al,4[bp]
18014 42E5           30E4                       xor	ah,ah
18015 42E7           50                         push	ax
18016                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18017 42E8           8B46         FA            mov	ax,-6[bp]
18018                                           ! Debug: list unsigned int = ax+1 (used reg = )
18019 42EB           40                         inc	ax
18020 42EC           50                         push	ax
18021                                           ! Debug: func () void = outb+0 (used reg = )
18022 42ED           E8         392D            call	_outb
18023 42F0           83C4                   04  add	sp,*4
18024                                           !BCC_EOS
18025                                           ! 2150  outb(crtc_addr,0x0b);
18026                                           ! Debug: list int = const $B (used reg = )
18027 42F3           B8                   000B  mov	ax,*$B
18028 42F6           50                         push	ax
18029                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18030 42F7           FF76         FA            push	-6[bp]
18031                                           ! Debug: func () void = outb+0 (used reg = )
18032 42FA           E8         3920            call	_outb
18033 42FD           83C4                   04  add	sp,*4
18034                                           !BCC_EOS
18035                                           ! 2151  outb(crtc_addr+1,CL);
18036                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18037 4300           8A46         06            mov	al,6[bp]
18038 4303           30E4                       xor	ah,ah
18039 4305           50                         push	ax
18040                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18041 4306           8B46         FA            mov	ax,-6[bp]
18042                                           ! Debug: list unsigned int = ax+1 (used reg = )
18043 4309           40                         inc	ax
18044 430A           50                         push	ax
18045                                           ! Debug: func () void = outb+0 (used reg = )
18046 430B           E8         390F            call	_outb
18047 430E           83C4                   04  add	sp,*4
18048                                           !BCC_EOS
18049                                           ! 2152 }
18050 4311           89EC                       mov	sp,bp
18051 4313           5D                         pop	bp
18052 4314           C3                         ret
18053                                           ! 2153 static void biosfn_set_cursor_pos (page, cursor)
18054                                           ! 2154 Bit8u page;Bit16u cursor;
18055                       00004315            _biosfn_set_cursor_pos:
18056                                           !BCC_EOS
18057                                           !BCC_EOS
18058                                           ! 2155 {
18059                                           ! 2156  Bit8u xcurs,ycurs,current;
18060                                           !BCC_EOS
18061                                           ! 2157  Bit16u nbcols,nbrows,address,crtc_addr;
18062                                           !BCC_EOS
18063                                           ! 2158  if(page>7)return;
18064 4315           55                         push	bp
18065 4316           89E5                       mov	bp,sp
18066 4318           83C4                   F4  add	sp,*-$C
18067                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18068 431B           8A46         04            mov	al,4[bp]
18069 431E           3C                     07  cmp	al,*7
18070 4320           76           04            jbe 	.A2
18071                       00004322            .A3:
18072 4322           89EC                       mov	sp,bp
18073 4324           5D                         pop	bp
18074 4325           C3                         ret
18075                                           !BCC_EOS
18076                                           ! 2159  write_word(0x40, 0x50 +2*page, cursor);
18077                       00004326            .A2:
18078                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18079 4326           FF76         06            push	6[bp]
18080                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18081                                           ! Debug: expression subtree swapping
18082 4329           8A46         04            mov	al,4[bp]
18083 432C           30E4                       xor	ah,ah
18084 432E           D1E0                       shl	ax,*1
18085                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18086                                           ! Debug: expression subtree swapping
18087                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18088 4330           05                   0050  add	ax,*$50
18089 4333           50                         push	ax
18090                                           ! Debug: list int = const $40 (used reg = )
18091 4334           B8                   0040  mov	ax,*$40
18092 4337           50                         push	ax
18093                                           ! Debug: func () void = write_word+0 (used reg = )
18094 4338           E8         38B4            call	_write_word
18095 433B           83C4                   06  add	sp,*6
18096                                           !BCC_EOS
18097                                           ! 2160  current=read_byte(0x40,0x62);
18098                                           ! Debug: list int = const $62 (used reg = )
18099 433E           B8                   0062  mov	ax,*$62
18100 4341           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 4342           B8                   0040  mov	ax,*$40
18103 4345           50                         push	ax
18104                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18105 4346           E8         3868            call	_read_byte
18106 4349           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18108 434C           8846         FD            mov	-3[bp],al
18109                                           !BCC_EOS
18110                                           ! 2161  if(page==current)
18111                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18112 434F           8A46         04            mov	al,4[bp]
18113 4352           3A46         FD            cmp	al,-3[bp]
18114 4355         0F85         00B8            bne 	.A4
18115                       00004359            .A5:
18116                                           ! 2162   {
18117                                           ! 2163    nbcols=read_word(0x40,0x4A);
18118                                           ! Debug: list int = const $4A (used reg = )
18119 4359           B8                   004A  mov	ax,*$4A
18120 435C           50                         push	ax
18121                                           ! Debug: list int = const $40 (used reg = )
18122 435D           B8                   0040  mov	ax,*$40
18123 4360           50                         push	ax
18124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18125 4361           E8         3860            call	_read_word
18126 4364           83C4                   04  add	sp,*4
18127                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18128 4367           8946         FA            mov	-6[bp],ax
18129                                           !BCC_EOS
18130                                           ! 2164    nbrows=read_byte(0x40,0x84)+1;
18131                                           ! Debug: list int = const $84 (used reg = )
18132 436A           B8                   0084  mov	ax,#$84
18133 436D           50                         push	ax
18134                                           ! Debug: list int = const $40 (used reg = )
18135 436E           B8                   0040  mov	ax,*$40
18136 4371           50                         push	ax
18137                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18138 4372           E8         383C            call	_read_byte
18139 4375           83C4                   04  add	sp,*4
18140                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18141 4378           30E4                       xor	ah,ah
18142                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18143 437A           40                         inc	ax
18144 437B           8946         F8            mov	-8[bp],ax
18145                                           !BCC_EOS
18146                                           ! 2165    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18147                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18148 437E           8A46         06            mov	al,6[bp]
18149                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18150 4381           8846         FF            mov	-1[bp],al
18151                                           !BCC_EOS
18152                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18153 4384           8B46         06            mov	ax,6[bp]
18154 4387           30C0                       xor	al,al
18155                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18156 4389           88E0                       mov	al,ah
18157 438B           30E4                       xor	ah,ah
18158                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18159 438D           8846         FE            mov	-2[bp],al
18160                                           !BCC_EOS
18161                                           ! 2166    address=((((nbcols*nbrows)|0x00
18162                                           ! 2166 ff)+1)*page)+xcurs+ycurs*nbcols;
18163                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18164 4390           8A46         FE            mov	al,-2[bp]
18165 4393           30E4                       xor	ah,ah
18166 4395           8B4E         FA            mov	cx,-6[bp]
18167 4398           F7E9                       imul	cx
18168 439A           50                         push	ax
18169                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18170 439B           8B46         FA            mov	ax,-6[bp]
18171 439E           8B4E         F8            mov	cx,-8[bp]
18172 43A1           F7E9                       imul	cx
18173                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18174 43A3           0C                     FF  or	al,#$FF
18175                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18176                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18177 43A5           89C3                       mov	bx,ax
18178 43A7           8A46         04            mov	al,4[bp]
18179 43AA           30E4                       xor	ah,ah
18180 43AC           93                         xchg	ax,bx
18181 43AD           40                         inc	ax
18182 43AE           89D9                       mov	cx,bx
18183 43B0           F7E9                       imul	cx
18184                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18185 43B2           0246         FF            add	al,-1[bp]
18186 43B5           80D4                   00  adc	ah,*0
18187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18188 43B8           0346         F2            add	ax,-$E[bp]
18189 43BB           44                         inc	sp
18190 43BC           44                         inc	sp
18191                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18192 43BD           8946         F6            mov	-$A[bp],ax
18193                                           !BCC_EOS
18194                                           ! 2167    crtc_addr=read_word(0x40,0x63);
18195                                           ! Debug: list int = const $63 (used reg = )
18196 43C0           B8                   0063  mov	ax,*$63
18197 43C3           50                         push	ax
18198                                           ! Debug: list int = const $40 (used reg = )
18199 43C4           B8                   0040  mov	ax,*$40
18200 43C7           50                         push	ax
18201                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18202 43C8           E8         37F9            call	_read_word
18203 43CB           83C4                   04  add	sp,*4
18204                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18205 43CE           8946         F4            mov	-$C[bp],ax
18206                                           !BCC_EOS
18207                                           ! 2168    outb(crtc_addr,0x0e);
18208                                           ! Debug: list int = const $E (used reg = )
18209 43D1           B8                   000E  mov	ax,*$E
18210 43D4           50                         push	ax
18211                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18212 43D5           FF76         F4            push	-$C[bp]
18213                                           ! Debug: func () void = outb+0 (used reg = )
18214 43D8           E8         3842            call	_outb
18215 43DB           83C4                   04  add	sp,*4
18216                                           !BCC_EOS
18217                                           ! 2169    outb(crtc_addr+1,(address&0xff00)>>8);
18218                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18219 43DE           8B46         F6            mov	ax,-$A[bp]
18220 43E1           30C0                       xor	al,al
18221                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18222 43E3           88E0                       mov	al,ah
18223 43E5           30E4                       xor	ah,ah
18224                                           ! Debug: list unsigned int = ax+0 (used reg = )
18225 43E7           50                         push	ax
18226                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18227 43E8           8B46         F4            mov	ax,-$C[bp]
18228                                           ! Debug: list unsigned int = ax+1 (used reg = )
18229 43EB           40                         inc	ax
18230 43EC           50                         push	ax
18231                                           ! Debug: func () void = outb+0 (used reg = )
18232 43ED           E8         382D            call	_outb
18233 43F0           83C4                   04  add	sp,*4
18234                                           !BCC_EOS
18235                                           ! 2170    outb(crtc_addr,0x0f);
18236                                           ! Debug: list int = const $F (used reg = )
18237 43F3           B8                   000F  mov	ax,*$F
18238 43F6           50                         push	ax
18239                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18240 43F7           FF76         F4            push	-$C[bp]
18241                                           ! Debug: func () void = outb+0 (used reg = )
18242 43FA           E8         3820            call	_outb
18243 43FD           83C4                   04  add	sp,*4
18244                                           !BCC_EOS
18245                                           ! 2171    outb(crtc_addr+1,address&0x00ff);
18246                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18247 4400           8A46         F6            mov	al,-$A[bp]
18248                                           ! Debug: list unsigned char = al+0 (used reg = )
18249 4403           30E4                       xor	ah,ah
18250 4405           50                         push	ax
18251                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18252 4406           8B46         F4            mov	ax,-$C[bp]
18253                                           ! Debug: list unsigned int = ax+1 (used reg = )
18254 4409           40                         inc	ax
18255 440A           50                         push	ax
18256                                           ! Debug: func () void = outb+0 (used reg = )
18257 440B           E8         380F            call	_outb
18258 440E           83C4                   04  add	sp,*4
18259                                           !BCC_EOS
18260                                           ! 2172   }
18261                                           ! 2173 }
18262                       00004411            .A4:
18263 4411           89EC                       mov	sp,bp
18264 4413           5D                         pop	bp
18265 4414           C3                         ret
18266                                           ! 2174 static void biosfn_get_cursor_pos (page,shape, pos)
18267                                           ! Register BX used in function biosfn_set_cursor_pos
18268                                           ! 2175 Bit8u page;Bit16u *shape;Bit16u *pos;
18269                       00004415            _biosfn_get_cursor_pos:
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           !BCC_EOS
18273                                           ! 2176 {
18274                                           ! 2177  Bit16u ss=get_SS();
18275 4415           55                         push	bp
18276 4416           89E5                       mov	bp,sp
18277 4418           4C                         dec	sp
18278 4419           4C                         dec	sp
18279                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18280 441A           E8         3820            call	_get_SS
18281                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18282 441D           8946         FE            mov	-2[bp],ax
18283                                           !BCC_EOS
18284                                           ! 2178  write_word(ss, shape, 0);
18285                                           ! Debug: list int = const 0 (used reg = )
18286 4420           31C0                       xor	ax,ax
18287 4422           50                         push	ax
18288                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18289 4423           FF76         06            push	6[bp]
18290                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18291 4426           FF76         FE            push	-2[bp]
18292                                           ! Debug: func () void = write_word+0 (used reg = )
18293 4429           E8         37C3            call	_write_word
18294 442C           83C4                   06  add	sp,*6
18295                                           !BCC_EOS
18296                                           ! 2179  write_word(ss, pos, 0);
18297                                           ! Debug: list int = const 0 (used reg = )
18298 442F           31C0                       xor	ax,ax
18299 4431           50                         push	ax
18300                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18301 4432           FF76         08            push	8[bp]
18302                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18303 4435           FF76         FE            push	-2[bp]
18304                                           ! Debug: func () void = write_word+0 (used reg = )
18305 4438           E8         37B4            call	_write_word
18306 443B           83C4                   06  add	sp,*6
18307                                           !BCC_EOS
18308                                           ! 2180  if(page>7)return;
18309                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18310 443E           8A46         04            mov	al,4[bp]
18311 4441           3C                     07  cmp	al,*7
18312 4443           76           04            jbe 	.A6
18313                       00004445            .A7:
18314 4445           89EC                       mov	sp,bp
18315 4447           5D                         pop	bp
18316 4448           C3                         ret
18317                                           !BCC_EOS
18318                                           ! 2181  write_word(ss,shape,read_word(0x40,0x60));
18319                       00004449            .A6:
18320                                           ! Debug: list int = const $60 (used reg = )
18321 4449           B8                   0060  mov	ax,*$60
18322 444C           50                         push	ax
18323                                           ! Debug: list int = const $40 (used reg = )
18324 444D           B8                   0040  mov	ax,*$40
18325 4450           50                         push	ax
18326                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18327 4451           E8         3770            call	_read_word
18328 4454           83C4                   04  add	sp,*4
18329                                           ! Debug: list unsigned short = ax+0 (used reg = )
18330 4457           50                         push	ax
18331                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18332 4458           FF76         06            push	6[bp]
18333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18334 445B           FF76         FE            push	-2[bp]
18335                                           ! Debug: func () void = write_word+0 (used reg = )
18336 445E           E8         378E            call	_write_word
18337 4461           83C4                   06  add	sp,*6
18338                                           !BCC_EOS
18339                                           ! 2182  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18340                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18341 4464           8A46         04            mov	al,4[bp]
18342 4467           30E4                       xor	ah,ah
18343 4469           D1E0                       shl	ax,*1
18344                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18345                                           ! Debug: expression subtree swapping
18346                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18347 446B           05                   0050  add	ax,*$50
18348 446E           50                         push	ax
18349                                           ! Debug: list int = const $40 (used reg = )
18350 446F           B8                   0040  mov	ax,*$40
18351 4472           50                         push	ax
18352                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18353 4473           E8         374E            call	_read_word
18354 4476           83C4                   04  add	sp,*4
18355                                           ! Debug: list unsigned short = ax+0 (used reg = )
18356 4479           50                         push	ax
18357                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18358 447A           FF76         08            push	8[bp]
18359                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18360 447D           FF76         FE            push	-2[bp]
18361                                           ! Debug: func () void = write_word+0 (used reg = )
18362 4480           E8         376C            call	_write_word
18363 4483           83C4                   06  add	sp,*6
18364                                           !BCC_EOS
18365                                           ! 2183 }
18366 4486           89EC                       mov	sp,bp
18367 4488           5D                         pop	bp
18368 4489           C3                         ret
18369                                           ! 2184 static void biosfn_set_active_page (page)
18370                                           ! 2185 Bit8u page;
18371                       0000448A            _biosfn_set_active_page:
18372                                           !BCC_EOS
18373                                           ! 2186 {
18374                                           ! 2187  Bit16u cursor,dummy,crtc_addr;
18375                                           !BCC_EOS
18376                                           ! 2188  Bit16u nbcols,nbrows,address;
18377                                           !BCC_EOS
18378                                           ! 2189  Bit8u mode,line;
18379                                           !BCC_EOS
18380                                           ! 2190  if(page>7)return;
18381 448A           55                         push	bp
18382 448B           89E5                       mov	bp,sp
18383 448D           83C4                   F2  add	sp,*-$E
18384                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18385 4490           8A46         04            mov	al,4[bp]
18386 4493           3C                     07  cmp	al,*7
18387 4495           76           04            jbe 	.A8
18388                       00004497            .A9:
18389 4497           89EC                       mov	sp,bp
18390 4499           5D                         pop	bp
18391 449A           C3                         ret
18392                                           !BCC_EOS
18393                                           ! 2191  mode=read_byte(0x40,0x49);
18394                       0000449B            .A8:
18395                                           ! Debug: list int = const $49 (used reg = )
18396 449B           B8                   0049  mov	ax,*$49
18397 449E           50                         push	ax
18398                                           ! Debug: list int = const $40 (used reg = )
18399 449F           B8                   0040  mov	ax,*$40
18400 44A2           50                         push	ax
18401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18402 44A3           E8         370B            call	_read_byte
18403 44A6           83C4                   04  add	sp,*4
18404                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18405 44A9           8846         F3            mov	-$D[bp],al
18406                                           !BCC_EOS
18407                                           ! 2192  line=find_vga_entry(mode);
18408                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18409 44AC           8A46         F3            mov	al,-$D[bp]
18410 44AF           30E4                       xor	ah,ah
18411 44B1           50                         push	ax
18412                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18413 44B2           E8         3610            call	_find_vga_entry
18414 44B5           44                         inc	sp
18415 44B6           44                         inc	sp
18416                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18417 44B7           8846         F2            mov	-$E[bp],al
18418                                           !BCC_EOS
18419                                           ! 2193  if(line==0xFF)return;
18420                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18421 44BA           8A46         F2            mov	al,-$E[bp]
18422 44BD           3C                     FF  cmp	al,#$FF
18423 44BF           75           04            jne 	.AA
18424                       000044C1            .AB:
18425 44C1           89EC                       mov	sp,bp
18426 44C3           5D                         pop	bp
18427 44C4           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2194  biosfn_get_cursor_pos(page,&dummy,&cursor);
18430                       000044C5            .AA:
18431                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18432 44C5           8D5E         FE            lea	bx,-2[bp]
18433 44C8           53                         push	bx
18434                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18435 44C9           8D5E         FC            lea	bx,-4[bp]
18436 44CC           53                         push	bx
18437                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18438 44CD           8A46         04            mov	al,4[bp]
18439 44D0           30E4                       xor	ah,ah
18440 44D2           50                         push	ax
18441                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18442 44D3           E8         FF3F            call	_biosfn_get_cursor_pos
18443 44D6           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2195  if(vga_modes[line].class==0x00)
18446                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18447 44D9           8A46         F2            mov	al,-$E[bp]
18448 44DC           30E4                       xor	ah,ah
18449 44DE           B1                     03  mov	cl,*3
18450 44E0           D3E0                       shl	ax,cl
18451 44E2           89C3                       mov	bx,ax
18452 44E4           81C3                 01FD  add	bx,#_vga_modes
18453                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18454 44E8           8A47         01            mov	al,1[bx]
18455 44EB           84C0                       test	al,al
18456 44ED           75           6E            jne 	.AC
18457                       000044EF            .AD:
18458                                           ! 2196   {
18459                                           ! 2197    nbcols=read_word(0x40,0x4A);
18460                                           ! Debug: list int = const $4A (used reg = )
18461 44EF           B8                   004A  mov	ax,*$4A
18462 44F2           50                         push	ax
18463                                           ! Debug: list int = const $40 (used reg = )
18464 44F3           B8                   0040  mov	ax,*$40
18465 44F6           50                         push	ax
18466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18467 44F7           E8         36CA            call	_read_word
18468 44FA           83C4                   04  add	sp,*4
18469                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18470 44FD           8946         F8            mov	-8[bp],ax
18471                                           !BCC_EOS
18472                                           ! 2198    nbrows=read_byte(0x40,0x84)+1;
18473                                           ! Debug: list int = const $84 (used reg = )
18474 4500           B8                   0084  mov	ax,#$84
18475 4503           50                         push	ax
18476                                           ! Debug: list int = const $40 (used reg = )
18477 4504           B8                   0040  mov	ax,*$40
18478 4507           50                         push	ax
18479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18480 4508           E8         36A6            call	_read_byte
18481 450B           83C4                   04  add	sp,*4
18482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18483 450E           30E4                       xor	ah,ah
18484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18485 4510           40                         inc	ax
18486 4511           8946         F6            mov	-$A[bp],ax
18487                                           !BCC_EOS
18488                                           ! 2199    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18489                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18490 4514           8B46         F8            mov	ax,-8[bp]
18491 4517           8B4E         F6            mov	cx,-$A[bp]
18492 451A           F7E9                       imul	cx
18493                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18494 451C           D1E0                       shl	ax,*1
18495                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18496 451E           0C                     FF  or	al,#$FF
18497                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18498                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18499 4520           89C3                       mov	bx,ax
18500 4522           8A46         04            mov	al,4[bp]
18501 4525           30E4                       xor	ah,ah
18502 4527           93                         xchg	ax,bx
18503 4528           40                         inc	ax
18504 4529           89D9                       mov	cx,bx
18505 452B           F7E9                       imul	cx
18506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18507 452D           8946         F4            mov	-$C[bp],ax
18508                                           !BCC_EOS
18509                                           ! 2200    write_word(0x40,0x4E,address);
18510                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18511 4530           FF76         F4            push	-$C[bp]
18512                                           ! Debug: list int = const $4E (used reg = )
18513 4533           B8                   004E  mov	ax,*$4E
18514 4536           50                         push	ax
18515                                           ! Debug: list int = const $40 (used reg = )
18516 4537           B8                   0040  mov	ax,*$40
18517 453A           50                         push	ax
18518                                           ! Debug: func () void = write_word+0 (used reg = )
18519 453B           E8         36B1            call	_write_word
18520 453E           83C4                   06  add	sp,*6
18521                                           !BCC_EOS
18522                                           ! 2201    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18523                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18524 4541           8B46         F8            mov	ax,-8[bp]
18525 4544           8B4E         F6            mov	cx,-$A[bp]
18526 4547           F7E9                       imul	cx
18527                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18528 4549           0C                     FF  or	al,#$FF
18529                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18530                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18531 454B           89C3                       mov	bx,ax
18532 454D           8A46         04            mov	al,4[bp]
18533 4550           30E4                       xor	ah,ah
18534 4552           93                         xchg	ax,bx
18535 4553           40                         inc	ax
18536 4554           89D9                       mov	cx,bx
18537 4556           F7E9                       imul	cx
18538                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18539 4558           8946         F4            mov	-$C[bp],ax
18540                                           !BCC_EOS
18541                                           ! 2202   }
18542                                           ! 2203  else
18543                                           ! 2204   {
18544 455B           EB           24            jmp .AE
18545                       0000455D            .AC:
18546                                           ! 2205    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18547                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18548 455D           8A46         F2            mov	al,-$E[bp]
18549 4560           30E4                       xor	ah,ah
18550 4562           89C3                       mov	bx,ax
18551                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18552 4564           8A87       027D            mov	al,_line_to_vpti[bx]
18553 4568           30E4                       xor	ah,ah
18554 456A           B1                     06  mov	cl,*6
18555 456C           D3E0                       shl	ax,cl
18556 456E           89C3                       mov	bx,ax
18557 4570           81C3                 0291  add	bx,#_video_param_table
18558                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18559                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18560                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18561 4574           8A46         04            mov	al,4[bp]
18562 4577           30E4                       xor	ah,ah
18563 4579           8B4F         03            mov	cx,3[bx]
18564 457C           F7E9                       imul	cx
18565                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18566 457E           8946         F4            mov	-$C[bp],ax
18567                                           !BCC_EOS
18568                                           ! 2206   }
18569                                           ! 2207  crtc_addr=read_word(0x40,0x63);
18570                       00004581            .AE:
18571                                           ! Debug: list int = const $63 (used reg = )
18572 4581           B8                   0063  mov	ax,*$63
18573 4584           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 4585           B8                   0040  mov	ax,*$40
18576 4588           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 4589           E8         3638            call	_read_word
18579 458C           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18581 458F           8946         FA            mov	-6[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2208  outb(crtc_addr,0x0c);
18584                                           ! Debug: list int = const $C (used reg = )
18585 4592           B8                   000C  mov	ax,*$C
18586 4595           50                         push	ax
18587                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18588 4596           FF76         FA            push	-6[bp]
18589                                           ! Debug: func () void = outb+0 (used reg = )
18590 4599           E8         3681            call	_outb
18591 459C           83C4                   04  add	sp,*4
18592                                           !BCC_EOS
18593                                           ! 2209  outb(crtc_addr+1,(address&0xff00)>>8);
18594                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18595 459F           8B46         F4            mov	ax,-$C[bp]
18596 45A2           30C0                       xor	al,al
18597                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18598 45A4           88E0                       mov	al,ah
18599 45A6           30E4                       xor	ah,ah
18600                                           ! Debug: list unsigned int = ax+0 (used reg = )
18601 45A8           50                         push	ax
18602                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18603 45A9           8B46         FA            mov	ax,-6[bp]
18604                                           ! Debug: list unsigned int = ax+1 (used reg = )
18605 45AC           40                         inc	ax
18606 45AD           50                         push	ax
18607                                           ! Debug: func () void = outb+0 (used reg = )
18608 45AE           E8         366C            call	_outb
18609 45B1           83C4                   04  add	sp,*4
18610                                           !BCC_EOS
18611                                           ! 2210  outb(crtc_addr,0x0d);
18612                                           ! Debug: list int = const $D (used reg = )
18613 45B4           B8                   000D  mov	ax,*$D
18614 45B7           50                         push	ax
18615                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18616 45B8           FF76         FA            push	-6[bp]
18617                                           ! Debug: func () void = outb+0 (used reg = )
18618 45BB           E8         365F            call	_outb
18619 45BE           83C4                   04  add	sp,*4
18620                                           !BCC_EOS
18621                                           ! 2211  outb(crtc_addr+1,address&0x00ff);
18622                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18623 45C1           8A46         F4            mov	al,-$C[bp]
18624                                           ! Debug: list unsigned char = al+0 (used reg = )
18625 45C4           30E4                       xor	ah,ah
18626 45C6           50                         push	ax
18627                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18628 45C7           8B46         FA            mov	ax,-6[bp]
18629                                           ! Debug: list unsigned int = ax+1 (used reg = )
18630 45CA           40                         inc	ax
18631 45CB           50                         push	ax
18632                                           ! Debug: func () void = outb+0 (used reg = )
18633 45CC           E8         364E            call	_outb
18634 45CF           83C4                   04  add	sp,*4
18635                                           !BCC_EOS
18636                                           ! 2212  write_byte(0x40,0x62,page);
18637                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18638 45D2           8A46         04            mov	al,4[bp]
18639 45D5           30E4                       xor	ah,ah
18640 45D7           50                         push	ax
18641                                           ! Debug: list int = const $62 (used reg = )
18642 45D8           B8                   0062  mov	ax,*$62
18643 45DB           50                         push	ax
18644                                           ! Debug: list int = const $40 (used reg = )
18645 45DC           B8                   0040  mov	ax,*$40
18646 45DF           50                         push	ax
18647                                           ! Debug: func () void = write_byte+0 (used reg = )
18648 45E0           E8         35F4            call	_write_byte
18649 45E3           83C4                   06  add	sp,*6
18650                                           !BCC_EOS
18651                                           ! 2213  biosfn_set_cursor_pos(page,cursor);
18652                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18653 45E6           FF76         FE            push	-2[bp]
18654                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18655 45E9           8A46         04            mov	al,4[bp]
18656 45EC           30E4                       xor	ah,ah
18657 45EE           50                         push	ax
18658                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18659 45EF           E8         FD23            call	_biosfn_set_cursor_pos
18660 45F2           83C4                   04  add	sp,*4
18661                                           !BCC_EOS
18662                                           ! 2214 }
18663 45F5           89EC                       mov	sp,bp
18664 45F7           5D                         pop	bp
18665 45F8           C3                         ret
18666                                           ! 2215 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18667                                           ! Register BX used in function biosfn_set_active_page
18668                                           ! 2216 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18669                       000045F9            _vgamem_copy_pl4:
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           ! 2217 {
18677                                           ! 2218  Bit16u src,dest;
18678                                           !BCC_EOS
18679                                           ! 2219  Bit8u i;
18680                                           !BCC_EOS
18681                                           ! 2220  src=ysrc*cheight*nbcols+xstart;
18682 45F9           55                         push	bp
18683 45FA           89E5                       mov	bp,sp
18684 45FC           83C4                   FA  add	sp,*-6
18685                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18686 45FF           8A46         0E            mov	al,$E[bp]
18687 4602           30E4                       xor	ah,ah
18688 4604           89C3                       mov	bx,ax
18689 4606           8A46         06            mov	al,6[bp]
18690 4609           30E4                       xor	ah,ah
18691 460B           89D9                       mov	cx,bx
18692 460D           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18694 460F           89C3                       mov	bx,ax
18695 4611           8A46         0C            mov	al,$C[bp]
18696 4614           30E4                       xor	ah,ah
18697 4616           93                         xchg	ax,bx
18698 4617           89D9                       mov	cx,bx
18699 4619           F7E9                       imul	cx
18700                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18701 461B           0246         04            add	al,4[bp]
18702 461E           80D4                   00  adc	ah,*0
18703                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18704 4621           8946         FE            mov	-2[bp],ax
18705                                           !BCC_EOS
18706                                           ! 2221  dest=ydest*cheight*nbcols+xstart;
18707                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18708 4624           8A46         0E            mov	al,$E[bp]
18709 4627           30E4                       xor	ah,ah
18710 4629           89C3                       mov	bx,ax
18711 462B           8A46         08            mov	al,8[bp]
18712 462E           30E4                       xor	ah,ah
18713 4630           89D9                       mov	cx,bx
18714 4632           F7E9                       imul	cx
18715                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18716 4634           89C3                       mov	bx,ax
18717 4636           8A46         0C            mov	al,$C[bp]
18718 4639           30E4                       xor	ah,ah
18719 463B           93                         xchg	ax,bx
18720 463C           89D9                       mov	cx,bx
18721 463E           F7E9                       imul	cx
18722                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18723 4640           0246         04            add	al,4[bp]
18724 4643           80D4                   00  adc	ah,*0
18725                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18726 4646           8946         FC            mov	-4[bp],ax
18727                                           !BCC_EOS
18728                                           ! 2222  outw(0x3ce, 0x0105);
18729                                           ! Debug: list int = const $105 (used reg = )
18730 4649           B8                   0105  mov	ax,#$105
18731 464C           50                         push	ax
18732                                           ! Debug: list int = const $3CE (used reg = )
18733 464D           B8                   03CE  mov	ax,#$3CE
18734 4650           50                         push	ax
18735                                           ! Debug: func () void = outw+0 (used reg = )
18736 4651           E8         35D9            call	_outw
18737 4654           83C4                   04  add	sp,*4
18738                                           !BCC_EOS
18739                                           ! 2223  for(i=0;i<cheight;i++)
18740                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18741 4657           30C0                       xor	al,al
18742 4659           8846         FB            mov	-5[bp],al
18743                                           !BCC_EOS
18744                                           !BCC_EOS
18745                                           ! 2224   {
18746 465C           EB           43            jmp .B1
18747                       0000465E            .B2:
18748                                           ! 2225    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18749                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18750 465E           8A46         0A            mov	al,$A[bp]
18751 4661           30E4                       xor	ah,ah
18752 4663           50                         push	ax
18753                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18754 4664           8A46         0C            mov	al,$C[bp]
18755 4667           30E4                       xor	ah,ah
18756 4669           89C3                       mov	bx,ax
18757 466B           8A46         FB            mov	al,-5[bp]
18758 466E           30E4                       xor	ah,ah
18759 4670           89D9                       mov	cx,bx
18760 4672           F7E9                       imul	cx
18761                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18762                                           ! Debug: expression subtree swapping
18763 4674           0346         FE            add	ax,-2[bp]
18764                                           ! Debug: list unsigned int = ax+0 (used reg = )
18765 4677           50                         push	ax
18766                                           ! Debug: list unsigned int = const $A000 (used reg = )
18767 4678           B8                   A000  mov	ax,#$A000
18768 467B           50                         push	ax
18769                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18770 467C           8A46         0C            mov	al,$C[bp]
18771 467F           30E4                       xor	ah,ah
18772 4681           89C3                       mov	bx,ax
18773 4683           8A46         FB            mov	al,-5[bp]
18774 4686           30E4                       xor	ah,ah
18775 4688           89D9                       mov	cx,bx
18776 468A           F7E9                       imul	cx
18777                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18778                                           ! Debug: expression subtree swapping
18779 468C           0346         FC            add	ax,-4[bp]
18780                                           ! Debug: list unsigned int = ax+0 (used reg = )
18781 468F           50                         push	ax
18782                                           ! Debug: list unsigned int = const $A000 (used reg = )
18783 4690           B8                   A000  mov	ax,#$A000
18784 4693           50                         push	ax
18785                                           ! Debug: func () void = memcpyb+0 (used reg = )
18786 4694           E8         34BA            call	_memcpyb
18787 4697           83C4                   0A  add	sp,*$A
18788                                           !BCC_EOS
18789                                           ! 2226   }
18790                                           ! 2227  outw(0x3ce, 0x0005);
18791                       0000469A            .B0:
18792                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18793 469A           8A46         FB            mov	al,-5[bp]
18794 469D           40                         inc	ax
18795 469E           8846         FB            mov	-5[bp],al
18796                       000046A1            .B1:
18797                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18798 46A1           8A46         FB            mov	al,-5[bp]
18799 46A4           3A46         0E            cmp	al,$E[bp]
18800 46A7           72           B5            jb 	.B2
18801                       000046A9            .B3:
18802                       000046A9            .AF:
18803                                           ! Debug: list int = const 5 (used reg = )
18804 46A9           B8                   0005  mov	ax,*5
18805 46AC           50                         push	ax
18806                                           ! Debug: list int = const $3CE (used reg = )
18807 46AD           B8                   03CE  mov	ax,#$3CE
18808 46B0           50                         push	ax
18809                                           ! Debug: func () void = outw+0 (used reg = )
18810 46B1           E8         3579            call	_outw
18811 46B4           83C4                   04  add	sp,*4
18812                                           !BCC_EOS
18813                                           ! 2228 }
18814 46B7           89EC                       mov	sp,bp
18815 46B9           5D                         pop	bp
18816 46BA           C3                         ret
18817                                           ! 2229 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18818                                           ! Register BX used in function vgamem_copy_pl4
18819                                           ! 2230 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18820                       000046BB            _vgamem_fill_pl4:
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2231 {
18828                                           ! 2232  Bit16u dest;
18829                                           !BCC_EOS
18830                                           ! 2233  Bit8u i;
18831                                           !BCC_EOS
18832                                           ! 2234  dest=ystart*cheight*nbcols+xstart;
18833 46BB           55                         push	bp
18834 46BC           89E5                       mov	bp,sp
18835 46BE           83C4                   FC  add	sp,*-4
18836                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18837 46C1           8A46         0C            mov	al,$C[bp]
18838 46C4           30E4                       xor	ah,ah
18839 46C6           89C3                       mov	bx,ax
18840 46C8           8A46         06            mov	al,6[bp]
18841 46CB           30E4                       xor	ah,ah
18842 46CD           89D9                       mov	cx,bx
18843 46CF           F7E9                       imul	cx
18844                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18845 46D1           89C3                       mov	bx,ax
18846 46D3           8A46         0A            mov	al,$A[bp]
18847 46D6           30E4                       xor	ah,ah
18848 46D8           93                         xchg	ax,bx
18849 46D9           89D9                       mov	cx,bx
18850 46DB           F7E9                       imul	cx
18851                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18852 46DD           0246         04            add	al,4[bp]
18853 46E0           80D4                   00  adc	ah,*0
18854                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18855 46E3           8946         FE            mov	-2[bp],ax
18856                                           !BCC_EOS
18857                                           ! 2235  outw(0x3ce, 0x0205);
18858                                           ! Debug: list int = const $205 (used reg = )
18859 46E6           B8                   0205  mov	ax,#$205
18860 46E9           50                         push	ax
18861                                           ! Debug: list int = const $3CE (used reg = )
18862 46EA           B8                   03CE  mov	ax,#$3CE
18863 46ED           50                         push	ax
18864                                           ! Debug: func () void = outw+0 (used reg = )
18865 46EE           E8         353C            call	_outw
18866 46F1           83C4                   04  add	sp,*4
18867                                           !BCC_EOS
18868                                           ! 2236  for(i=0;i<cheight;i++)
18869                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18870 46F4           30C0                       xor	al,al
18871 46F6           8846         FD            mov	-3[bp],al
18872                                           !BCC_EOS
18873                                           !BCC_EOS
18874                                           ! 2237   {
18875 46F9           EB           31            jmp .B6
18876                       000046FB            .B7:
18877                                           ! 2238    memsetb(0xa000,dest+i*nbcols,attr,cols);
18878                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18879 46FB           8A46         08            mov	al,8[bp]
18880 46FE           30E4                       xor	ah,ah
18881 4700           50                         push	ax
18882                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18883 4701           8A46         0E            mov	al,$E[bp]
18884 4704           30E4                       xor	ah,ah
18885 4706           50                         push	ax
18886                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18887 4707           8A46         0A            mov	al,$A[bp]
18888 470A           30E4                       xor	ah,ah
18889 470C           89C3                       mov	bx,ax
18890 470E           8A46         FD            mov	al,-3[bp]
18891 4711           30E4                       xor	ah,ah
18892 4713           89D9                       mov	cx,bx
18893 4715           F7E9                       imul	cx
18894                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18895                                           ! Debug: expression subtree swapping
18896 4717           0346         FE            add	ax,-2[bp]
18897                                           ! Debug: list unsigned int = ax+0 (used reg = )
18898 471A           50                         push	ax
18899                                           ! Debug: list unsigned int = const $A000 (used reg = )
18900 471B           B8                   A000  mov	ax,#$A000
18901 471E           50                         push	ax
18902                                           ! Debug: func () void = memsetb+0 (used reg = )
18903 471F           E8         33E5            call	_memsetb
18904 4722           83C4                   08  add	sp,*8
18905                                           !BCC_EOS
18906                                           ! 2239   }
18907                                           ! 2240  outw(0x3ce, 0x0005);
18908                       00004725            .B5:
18909                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18910 4725           8A46         FD            mov	al,-3[bp]
18911 4728           40                         inc	ax
18912 4729           8846         FD            mov	-3[bp],al
18913                       0000472C            .B6:
18914                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18915 472C           8A46         FD            mov	al,-3[bp]
18916 472F           3A46         0C            cmp	al,$C[bp]
18917 4732           72           C7            jb 	.B7
18918                       00004734            .B8:
18919                       00004734            .B4:
18920                                           ! Debug: list int = const 5 (used reg = )
18921 4734           B8                   0005  mov	ax,*5
18922 4737           50                         push	ax
18923                                           ! Debug: list int = const $3CE (used reg = )
18924 4738           B8                   03CE  mov	ax,#$3CE
18925 473B           50                         push	ax
18926                                           ! Debug: func () void = outw+0 (used reg = )
18927 473C           E8         34EE            call	_outw
18928 473F           83C4                   04  add	sp,*4
18929                                           !BCC_EOS
18930                                           ! 2241 }
18931 4742           89EC                       mov	sp,bp
18932 4744           5D                         pop	bp
18933 4745           C3                         ret
18934                                           ! 2242 static void vgamem_cop
18935                                           ! Register BX used in function vgamem_fill_pl4
18936                                           ! 2242 y_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18937                                           ! 2243 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18938                       00004746            _vgamem_copy_cga:
18939                                           !BCC_EOS
18940                                           !BCC_EOS
18941                                           !BCC_EOS
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           ! 2244 {
18946                                           ! 2245  Bit16u src,dest;
18947                                           !BCC_EOS
18948                                           ! 2246  Bit8u i;
18949                                           !BCC_EOS
18950                                           ! 2247  src=((ysrc*cheight*nbcols)>>1)+xstart;
18951 4746           55                         push	bp
18952 4747           89E5                       mov	bp,sp
18953 4749           83C4                   FA  add	sp,*-6
18954                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18955 474C           8A46         0E            mov	al,$E[bp]
18956 474F           30E4                       xor	ah,ah
18957 4751           89C3                       mov	bx,ax
18958 4753           8A46         06            mov	al,6[bp]
18959 4756           30E4                       xor	ah,ah
18960 4758           89D9                       mov	cx,bx
18961 475A           F7E9                       imul	cx
18962                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18963 475C           89C3                       mov	bx,ax
18964 475E           8A46         0C            mov	al,$C[bp]
18965 4761           30E4                       xor	ah,ah
18966 4763           93                         xchg	ax,bx
18967 4764           89D9                       mov	cx,bx
18968 4766           F7E9                       imul	cx
18969                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18970 4768           D1E8                       shr	ax,*1
18971                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18972 476A           0246         04            add	al,4[bp]
18973 476D           80D4                   00  adc	ah,*0
18974                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18975 4770           8946         FE            mov	-2[bp],ax
18976                                           !BCC_EOS
18977                                           ! 2248  dest=((ydest*cheight*nbcols)>>1)+xstart;
18978                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18979 4773           8A46         0E            mov	al,$E[bp]
18980 4776           30E4                       xor	ah,ah
18981 4778           89C3                       mov	bx,ax
18982 477A           8A46         08            mov	al,8[bp]
18983 477D           30E4                       xor	ah,ah
18984 477F           89D9                       mov	cx,bx
18985 4781           F7E9                       imul	cx
18986                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18987 4783           89C3                       mov	bx,ax
18988 4785           8A46         0C            mov	al,$C[bp]
18989 4788           30E4                       xor	ah,ah
18990 478A           93                         xchg	ax,bx
18991 478B           89D9                       mov	cx,bx
18992 478D           F7E9                       imul	cx
18993                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18994 478F           D1E8                       shr	ax,*1
18995                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18996 4791           0246         04            add	al,4[bp]
18997 4794           80D4                   00  adc	ah,*0
18998                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18999 4797           8946         FC            mov	-4[bp],ax
19000                                           !BCC_EOS
19001                                           ! 2249  for(i=0;i<cheight;i++)
19002                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19003 479A           30C0                       xor	al,al
19004 479C           8846         FB            mov	-5[bp],al
19005                                           !BCC_EOS
19006                                           !BCC_EOS
19007                                           ! 2250   {
19008 479F           E9         00A8            br 	.BB
19009                       000047A2            .BC:
19010                                           ! 2251    if (i & 1)
19011                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19012 47A2           8A46         FB            mov	al,-5[bp]
19013 47A5           24                     01  and	al,*1
19014 47A7           84C0                       test	al,al
19015 47A9           74           56            je  	.BD
19016                       000047AB            .BE:
19017                                           ! 2252      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19018                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19019 47AB           8A46         0A            mov	al,$A[bp]
19020 47AE           30E4                       xor	ah,ah
19021 47B0           50                         push	ax
19022                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19023 47B1           8A46         FB            mov	al,-5[bp]
19024 47B4           30E4                       xor	ah,ah
19025 47B6           D1E8                       shr	ax,*1
19026                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19027 47B8           89C3                       mov	bx,ax
19028 47BA           8A46         0C            mov	al,$C[bp]
19029 47BD           30E4                       xor	ah,ah
19030 47BF           93                         xchg	ax,bx
19031 47C0           89D9                       mov	cx,bx
19032 47C2           F7E9                       imul	cx
19033 47C4           50                         push	ax
19034                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19035                                           ! Debug: expression subtree swapping
19036 47C5           8B46         FE            mov	ax,-2[bp]
19037                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19038 47C8           05                   2000  add	ax,#$2000
19039 47CB           0346         F6            add	ax,-$A[bp]
19040 47CE           44                         inc	sp
19041 47CF           44                         inc	sp
19042                                           ! Debug: list unsigned int = ax+0 (used reg = )
19043 47D0           50                         push	ax
19044                                           ! Debug: list unsigned int = const $B800 (used reg = )
19045 47D1           B8                   B800  mov	ax,#$B800
19046 47D4           50                         push	ax
19047                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19048 47D5           8A46         FB            mov	al,-5[bp]
19049 47D8           30E4                       xor	ah,ah
19050 47DA           D1E8                       shr	ax,*1
19051                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19052 47DC           89C3                       mov	bx,ax
19053 47DE           8A46         0C            mov	al,$C[bp]
19054 47E1           30E4                       xor	ah,ah
19055 47E3           93                         xchg	ax,bx
19056 47E4           89D9                       mov	cx,bx
19057 47E6           F7E9                       imul	cx
19058 47E8           50                         push	ax
19059                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19060                                           ! Debug: expression subtree swapping
19061 47E9           8B46         FC            mov	ax,-4[bp]
19062                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19063 47EC           05                   2000  add	ax,#$2000
19064 47EF           0346         F2            add	ax,-$E[bp]
19065 47F2           44                         inc	sp
19066 47F3           44                         inc	sp
19067                                           ! Debug: list unsigned int = ax+0 (used reg = )
19068 47F4           50                         push	ax
19069                                           ! Debug: list unsigned int = const $B800 (used reg = )
19070 47F5           B8                   B800  mov	ax,#$B800
19071 47F8           50                         push	ax
19072                                           ! Debug: func () void = memcpyb+0 (used reg = )
19073 47F9           E8         3355            call	_memcpyb
19074 47FC           83C4                   0A  add	sp,*$A
19075                                           !BCC_EOS
19076                                           ! 2253    else
19077                                           ! 2254      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19078 47FF           EB           42            jmp .BF
19079                       00004801            .BD:
19080                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19081 4801           8A46         0A            mov	al,$A[bp]
19082 4804           30E4                       xor	ah,ah
19083 4806           50                         push	ax
19084                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19085 4807           8A46         FB            mov	al,-5[bp]
19086 480A           30E4                       xor	ah,ah
19087 480C           D1E8                       shr	ax,*1
19088                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19089 480E           89C3                       mov	bx,ax
19090 4810           8A46         0C            mov	al,$C[bp]
19091 4813           30E4                       xor	ah,ah
19092 4815           93                         xchg	ax,bx
19093 4816           89D9                       mov	cx,bx
19094 4818           F7E9                       imul	cx
19095                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19096                                           ! Debug: expression subtree swapping
19097 481A           0346         FE            add	ax,-2[bp]
19098                                           ! Debug: list unsigned int = ax+0 (used reg = )
19099 481D           50                         push	ax
19100                                           ! Debug: list unsigned int = const $B800 (used reg = )
19101 481E           B8                   B800  mov	ax,#$B800
19102 4821           50                         push	ax
19103                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19104 4822           8A46         FB            mov	al,-5[bp]
19105 4825           30E4                       xor	ah,ah
19106 4827           D1E8                       shr	ax,*1
19107                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19108 4829           89C3                       mov	bx,ax
19109 482B           8A46         0C            mov	al,$C[bp]
19110 482E           30E4                       xor	ah,ah
19111 4830           93                         xchg	ax,bx
19112 4831           89D9                       mov	cx,bx
19113 4833           F7E9                       imul	cx
19114                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19115                                           ! Debug: expression subtree swapping
19116 4835           0346         FC            add	ax,-4[bp]
19117                                           ! Debug: list unsigned int = ax+0 (used reg = )
19118 4838           50                         push	ax
19119                                           ! Debug: list unsigned int = const $B800 (used reg = )
19120 4839           B8                   B800  mov	ax,#$B800
19121 483C           50                         push	ax
19122                                           ! Debug: func () void = memcpyb+0 (used reg = )
19123 483D           E8         3311            call	_memcpyb
19124 4840           83C4                   0A  add	sp,*$A
19125                                           !BCC_EOS
19126                                           ! 2255   }
19127                       00004843            .BF:
19128                                           ! 2256 }
19129                       00004843            .BA:
19130                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19131 4843           8A46         FB            mov	al,-5[bp]
19132 4846           40                         inc	ax
19133 4847           8846         FB            mov	-5[bp],al
19134                       0000484A            .BB:
19135                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19136 484A           8A46         FB            mov	al,-5[bp]
19137 484D           3A46         0E            cmp	al,$E[bp]
19138 4850         0F82         FF4E            blo 	.BC
19139                       00004854            .C0:
19140                       00004854            .B9:
19141 4854           89EC                       mov	sp,bp
19142 4856           5D                         pop	bp
19143 4857           C3                         ret
19144                                           ! 2257 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19145                                           ! Register BX used in function vgamem_copy_cga
19146                                           ! 2258 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19147                       00004858            _vgamem_fill_cga:
19148                                           !BCC_EOS
19149                                           !BCC_EOS
19150                                           !BCC_EOS
19151                                           !BCC_EOS
19152                                           !BCC_EOS
19153                                           !BCC_EOS
19154                                           ! 2259 {
19155                                           ! 2260  Bit16u dest;
19156                                           !BCC_EOS
19157                                           ! 2261  Bit8u i;
19158                                           !BCC_EOS
19159                                           ! 2262  dest=((ystart*cheight*nbcols)>>1)+xstart;
19160 4858           55                         push	bp
19161 4859           89E5                       mov	bp,sp
19162 485B           83C4                   FC  add	sp,*-4
19163                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19164 485E           8A46         0C            mov	al,$C[bp]
19165 4861           30E4                       xor	ah,ah
19166 4863           89C3                       mov	bx,ax
19167 4865           8A46         06            mov	al,6[bp]
19168 4868           30E4                       xor	ah,ah
19169 486A           89D9                       mov	cx,bx
19170 486C           F7E9                       imul	cx
19171                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19172 486E           89C3                       mov	bx,ax
19173 4870           8A46         0A            mov	al,$A[bp]
19174 4873           30E4                       xor	ah,ah
19175 4875           93                         xchg	ax,bx
19176 4876           89D9                       mov	cx,bx
19177 4878           F7E9                       imul	cx
19178                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19179 487A           D1E8                       shr	ax,*1
19180                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19181 487C           0246         04            add	al,4[bp]
19182 487F           80D4                   00  adc	ah,*0
19183                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19184 4882           8946         FE            mov	-2[bp],ax
19185                                           !BCC_EOS
19186                                           ! 2263  for(i=0;i<cheight;i++)
19187                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19188 4885           30C0                       xor	al,al
19189 4887           8846         FD            mov	-3[bp],al
19190                                           !BCC_EOS
19191                                           !BCC_EOS
19192                                           ! 2264   {
19193 488A           EB           75            jmp .C3
19194                       0000488C            .C4:
19195                                           ! 2265    if (i & 1)
19196                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19197 488C           8A46         FD            mov	al,-3[bp]
19198 488F           24                     01  and	al,*1
19199 4891           84C0                       test	al,al
19200 4893           74           38            je  	.C5
19201                       00004895            .C6:
19202                                           ! 2266      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19203                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19204 4895           8A46         08            mov	al,8[bp]
19205 4898           30E4                       xor	ah,ah
19206 489A           50                         push	ax
19207                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19208 489B           8A46         0E            mov	al,$E[bp]
19209 489E           30E4                       xor	ah,ah
19210 48A0           50                         push	ax
19211                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19212 48A1           8A46         FD            mov	al,-3[bp]
19213 48A4           30E4                       xor	ah,ah
19214 48A6           D1E8                       shr	ax,*1
19215                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19216 48A8           89C3                       mov	bx,ax
19217 48AA           8A46         0A            mov	al,$A[bp]
19218 48AD           30E4                       xor	ah,ah
19219 48AF           93                         xchg	ax,bx
19220 48B0           89D9                       mov	cx,bx
19221 48B2           F7E9                       imul	cx
19222 48B4           50                         push	ax
19223                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19224                                           ! Debug: expression subtree swapping
19225 48B5           8B46         FE            mov	ax,-2[bp]
19226                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19227 48B8           05                   2000  add	ax,#$2000
19228 48BB           0346         F6            add	ax,-$A[bp]
19229 48BE           44                         inc	sp
19230 48BF           44                         inc	sp
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 48C0           50                         push	ax
19233                                           ! Debug: list unsigned int = const $B800 (used reg = )
19234 48C1           B8                   B800  mov	ax,#$B800
19235 48C4           50                         push	ax
19236                                           ! Debug: func () void = memsetb+0 (used reg = )
19237 48C5           E8         323F            call	_memsetb
19238 48C8           83C4                   08  add	sp,*8
19239                                           !BCC_EOS
19240                                           ! 2267    else
19241                                           ! 2268      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19242 48CB           EB           2D            jmp .C7
19243                       000048CD            .C5:
19244                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19245 48CD           8A46         08            mov	al,8[bp]
19246 48D0           30E4                       xor	ah,ah
19247 48D2           50                         push	ax
19248                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19249 48D3           8A46         0E            mov	al,$E[bp]
19250 48D6           30E4                       xor	ah,ah
19251 48D8           50                         push	ax
19252                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19253 48D9           8A46         FD            mov	al,-3[bp]
19254 48DC           30E4                       xor	ah,ah
19255 48DE           D1E8                       shr	ax,*1
19256                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19257 48E0           89C3                       mov	bx,ax
19258 48E2           8A46         0A            mov	al,$A[bp]
19259 48E5           30E4                       xor	ah,ah
19260 48E7           93                         xchg	ax,bx
19261 48E8           89D9                       mov	cx,bx
19262 48EA           F7E9                       imul	cx
19263                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19264                                           ! Debug: expression subtree swapping
19265 48EC           0346         FE            add	ax,-2[bp]
19266                                           ! Debug: list unsigned int = ax+0 (used reg = )
19267 48EF           50                         push	ax
19268                                           ! Debug: list unsigned int = const $B800 (used reg = )
19269 48F0           B8                   B800  mov	ax,#$B800
19270 48F3           50                         push	ax
19271                                           ! Debug: func () void = memsetb+0 (used reg = )
19272 48F4           E8         3210            call	_memsetb
19273 48F7           83C4                   08  add	sp,*8
19274                                           !BCC_EOS
19275                                           ! 2269   }
19276                       000048FA            .C7:
19277                                           ! 2270 }
19278                       000048FA            .C2:
19279                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19280 48FA           8A46         FD            mov	al,-3[bp]
19281 48FD           40                         inc	ax
19282 48FE           8846         FD            mov	-3[bp],al
19283                       00004901            .C3:
19284                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19285 4901           8A46         FD            mov	al,-3[bp]
19286 4904           3A46         0C            cmp	al,$C[bp]
19287 4907           72           83            jb 	.C4
19288                       00004909            .C8:
19289                       00004909            .C1:
19290 4909           89EC                       mov	sp,bp
19291 490B           5D                         pop	bp
19292 490C           C3                         ret
19293                                           ! 2271 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19294                                           ! Register BX used in function vgamem_fill_cga
19295                                           ! 2272 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19296                       0000490D            _biosfn_scroll:
19297                                           !BCC_EOS
19298                                           !BCC_EOS
19299                                           !BCC_EOS
19300                                           !BCC_EOS
19301                                           !BCC_EOS
19302                                           !BCC_EOS
19303                                           !BCC_EOS
19304                                           !BCC_EOS
19305                                           ! 2273 {
19306                                           ! 2274  Bit8u mode,line,cheight,bpp,cols;
19307                                           !BCC_EOS
19308                                           ! 2275  Bit16u nbcols,nbrows,i;
19309                                           !BCC_EOS
19310                                           ! 2276  Bit16u address;
19311                                           !BCC_EOS
19312                                           ! 2277  if(rul>rlr)return;
19313 490D           55                         push	bp
19314 490E           89E5                       mov	bp,sp
19315 4910           83C4                   F2  add	sp,*-$E
19316                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19317 4913           8A46         08            mov	al,8[bp]
19318 4916           3A46         0C            cmp	al,$C[bp]
19319 4919           76           04            jbe 	.C9
19320                       0000491B            .CA:
19321 491B           89EC                       mov	sp,bp
19322 491D           5D                         pop	bp
19323 491E           C3                         ret
19324                                           !BCC_EOS
19325                                           ! 2278  if(cul>clr)return;
19326                       0000491F            .C9:
19327                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19328 491F           8A46         0A            mov	al,$A[bp]
19329 4922           3A46         0E            cmp	al,$E[bp]
19330 4925           76           04            jbe 	.CB
19331                       00004927            .CC:
19332 4927           89EC                       mov	sp,bp
19333 4929           5D                         pop	bp
19334 492A           C3                         ret
19335                                           !BCC_EOS
19336                                           ! 2279  mode=read_byte(0x40,0x49);
19337                       0000492B            .CB:
19338                                           ! Debug: list int = const $49 (used reg = )
19339 492B           B8                   0049  mov	ax,*$49
19340 492E           50                         push	ax
19341                                           ! Debug: list int = const $40 (used reg = )
19342 492F           B8                   0040  mov	ax,*$40
19343 4932           50                         push	ax
19344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19345 4933           E8         327B            call	_read_byte
19346 4936           83C4                   04  add	sp,*4
19347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19348 4939           8846         FF            mov	-1[bp],al
19349                                           !BCC_EOS
19350                                           ! 2280  line=find_vga_entry(mode);
19351                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19352 493C           8A46         FF            mov	al,-1[bp]
19353 493F           30E4                       xor	ah,ah
19354 4941           50                         push	ax
19355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19356 4942           E8         3180            call	_find_vga_entry
19357 4945           44                         inc	sp
19358 4946           44                         inc	sp
19359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19360 4947           8846         FE            mov	-2[bp],al
19361                                           !BCC_EOS
19362                                           ! 2281  if(line==0xFF)return;
19363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19364 494A           8A46         FE            mov	al,-2[bp]
19365 494D           3C                     FF  cmp	al,#$FF
19366 494F           75           04            jne 	.CD
19367                       00004951            .CE:
19368 4951           89EC                       mov	sp,bp
19369 4953           5D                         pop	bp
19370 4954           C3                         ret
19371                                           !BCC_EOS
19372                                           ! 2282  nbrows=read_byte(0x40,0x84)+1;
19373                       00004955            .CD:
19374                                           ! Debug: list int = const $84 (used reg = )
19375 4955           B8                   0084  mov	ax,#$84
19376 4958           50                         push	ax
19377                                           ! Debug: list int = const $40 (used reg = )
19378 4959           B8                   0040  mov	ax,*$40
19379 495C           50                         push	ax
19380                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19381 495D           E8         3251            call	_read_byte
19382 4960           83C4                   04  add	sp,*4
19383                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19384 4963           30E4                       xor	ah,ah
19385                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19386 4965           40                         inc	ax
19387 4966           8946         F6            mov	-$A[bp],ax
19388                                           !BCC_EOS
19389                                           ! 2283  nbcols=read_word(0x40,0x4A);
19390                                           ! Debug: list int = const $4A (used reg = )
19391 4969           B8                   004A  mov	ax,*$4A
19392 496C           50                         push	ax
19393                                           ! Debug: list int = const $40 (used reg = )
19394 496D           B8                   0040  mov	ax,*$40
19395 4970           50                         push	ax
19396                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19397 4971           E8         3250            call	_read_word
19398 4974           83C4                   04  add	sp,*4
19399                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19400 4977           8946         F8            mov	-8[bp],ax
19401                                           !BCC_EOS
19402                                           ! 2284  if(page==0xFF)
19403                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19404 497A           8A46         10            mov	al,$10[bp]
19405 497D           3C                     FF  cmp	al,#$FF
19406 497F           75           11            jne 	.CF
19407                       00004981            .D0:
19408                                           ! 2285   page=read_byte(0x40,0x62);
19409                                           ! Debug: list int = const $62 (used reg = )
19410 4981           B8                   0062  mov	ax,*$62
19411 4984           50                         push	ax
19412                                           ! Debug: list int = const $40 (used reg = )
19413 4985           B8                   0040  mov	ax,*$40
19414 4988           50                         push	ax
19415                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19416 4989           E8         3225            call	_read_byte
19417 498C           83C4                   04  add	sp,*4
19418                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19419 498F           8846         10            mov	$10[bp],al
19420                                           !BCC_EOS
19421                                           ! 2286  if(rlr>=nbrows)rlr=nbrows-1;
19422                       00004992            .CF:
19423                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19424 4992           8A46         0C            mov	al,$C[bp]
19425 4995           30E4                       xor	ah,ah
19426 4997           3B46         F6            cmp	ax,-$A[bp]
19427 499A           72           07            jb  	.D1
19428                       0000499C            .D2:
19429                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19430 499C           8B46         F6            mov	ax,-$A[bp]
19431                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19432 499F           48                         dec	ax
19433 49A0           8846         0C            mov	$C[bp],al
19434                                           !BCC_EOS
19435                                           ! 2287  if(clr>=nbcols)clr=nbcols-1;
19436                       000049A3            .D1:
19437                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19438 49A3           8A46         0E            mov	al,$E[bp]
19439 49A6           30E4                       xor	ah,ah
19440 49A8           3B46         F8            cmp	ax,-8[bp]
19441 49AB           72           07            jb  	.D3
19442                       000049AD            .D4:
19443                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19444 49AD           8B46         F8            mov	ax,-8[bp]
19445                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19446 49B0           48                         dec	ax
19447 49B1           8846         0E            mov	$E[bp],al
19448                                           !BCC_EOS
19449                                           ! 2288  if(nblines>nbrows)nblines=0;
19450                       000049B4            .D3:
19451                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19452 49B4           8A46         04            mov	al,4[bp]
19453 49B7           30E4                       xor	ah,ah
19454 49B9           3B46         F6            cmp	ax,-$A[bp]
19455 49BC           76           05            jbe 	.D5
19456                       000049BE            .D6:
19457                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 49BE           30C0                       xor	al,al
19459 49C0           8846         04            mov	4[bp],al
19460                                           !BCC_EOS
19461                                           ! 2289  cols=clr-cul+1;
19462                       000049C3            .D5:
19463                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19464 49C3           8A46         0E            mov	al,$E[bp]
19465 49C6           30E4                       xor	ah,ah
19466 49C8           2A46         0A            sub	al,$A[bp]
19467 49CB           80DC                   00  sbb	ah,*0
19468                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19469                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19470 49CE           40                         inc	ax
19471 49CF           8846         FB            mov	-5[bp],al
19472                                           !BCC_EOS
19473                                           ! 2290  if(vga_modes[line].class==0x00)
19474                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19475 49D2           8A46         FE            mov	al,-2[bp]
19476 49D5           30E4                       xor	ah,ah
19477 49D7           B1                     03  mov	cl,*3
19478 49D9           D3E0                       shl	ax,cl
19479 49DB           89C3                       mov	bx,ax
19480 49DD           81C3                 01FD  add	bx,#_vga_modes
19481                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19482 49E1           8A47         01            mov	al,1[bx]
19483 49E4           84C0                       test	al,al
19484 49E6         0F85         0250            bne 	.D7
19485                       000049EA            .D8:
19486                                           ! 2291   {
19487                                           ! 2292    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19488                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19489 49EA           8B46         F8            mov	ax,-8[bp]
19490 49ED           8B4E         F6            mov	cx,-$A[bp]
19491 49F0           F7E9                       imul	cx
19492                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19493 49F2           D1E0                       shl	ax,*1
19494                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19495 49F4           0C                     FF  or	al,#$FF
19496                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19497                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19498 49F6           89C3                       mov	bx,ax
19499 49F8           8A46         10            mov	al,$10[bp]
19500 49FB           30E4                       xor	ah,ah
19501 49FD           93                         xchg	ax,bx
19502 49FE           40                         inc	ax
19503 49FF           89D9                       mov	cx,bx
19504 4A01           F7E9                       imul	cx
19505                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19506 4A03           8946         F2            mov	-$E[bp],ax
19507                                           !BCC_EOS
19508                                           ! 2293    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19509                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19510 4A06           8A46         04            mov	al,4[bp]
19511 4A09           84C0                       test	al,al
19512 4A0B           75           67            jne 	.D9
19513                       00004A0D            .DE:
19514                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19515 4A0D           8A46         08            mov	al,8[bp]
19516 4A10           84C0                       test	al,al
19517 4A12           75           60            jne 	.D9
19518                       00004A14            .DD:
19519                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19520 4A14           8A46         0A            mov	al,$A[bp]
19521 4A17           84C0                       test	al,al
19522 4A19           75           59            jne 	.D9
19523                       00004A1B            .DC:
19524                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19525 4A1B           8B46         F6            mov	ax,-$A[bp]
19526                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19527                                           ! Debug: expression subtree swapping
19528 4A1E           48                         dec	ax
19529 4A1F           50                         push	ax
19530 4A20           8A46         0C            mov	al,$C[bp]
19531 4A23           30E4                       xor	ah,ah
19532 4A25           3B46         F0            cmp	ax,-$10[bp]
19533 4A28           8D66         F2            lea	sp,-$E[bp]
19534 4A2B           75           47            jne 	.D9
19535                       00004A2D            .DB:
19536                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19537 4A2D           8B46         F8            mov	ax,-8[bp]
19538                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19539                                           ! Debug: expression subtree swapping
19540 4A30           48                         dec	ax
19541 4A31           50                         push	ax
19542 4A32           8A46         0E            mov	al,$E[bp]
19543 4A35           30E4                       xor	ah,ah
19544 4A37           3B46         F0            cmp	ax,-$10[bp]
19545 4A3A           8D66         F2            lea	sp,-$E[bp]
19546 4A3D           75           35            jne 	.D9
19547                       00004A3F            .DA:
19548                                           ! 2294     {
19549                                           ! 2295      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19550                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A3F           8B46         F6            mov	ax,-$A[bp]
19552 4A42           8B4E         F8            mov	cx,-8[bp]
19553 4A45           F7E9                       imul	cx
19554                                           ! Debug: list unsigned int = ax+0 (used reg = )
19555 4A47           50                         push	ax
19556                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19557 4A48           8A46         06            mov	al,6[bp]
19558 4A4B           30E4                       xor	ah,ah
19559                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19560 4A4D           B9                   0100  mov	cx,#$100
19561 4A50           F7E9                       imul	cx
19562                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19563                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19564 4A52           05                   0020  add	ax,*$20
19565 4A55           50                         push	ax
19566                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19567 4A56           FF76         F2            push	-$E[bp]
19568                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19569 4A59           8A46         FE            mov	al,-2[bp]
19570 4A5C           30E4                       xor	ah,ah
19571 4A5E           B1                     03  mov	cl,*3
19572 4A60           D3E0                       shl	ax,cl
19573 4A62           89C3                       mov	bx,ax
19574 4A64           81C3                 01FD  add	bx,#_vga_modes
19575                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19576 4A68           FF77         04            push	4[bx]
19577                                           ! Debug: func () void = memsetw+0 (used reg = )
19578 4A6B           E8         30BE            call	_memsetw
19579 4A6E           83C4                   08  add	sp,*8
19580                                           !BCC_EOS
19581                                           ! 2296     }
19582                                           ! 2297    else
19583                                           ! 2298     {
19584 4A71           E9         01C3            br 	.DF
19585                       00004A74            .D9:
19586                                           ! 2299      if(dir==1)
19587                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19588 4A74           8A46         12            mov	al,$12[bp]
19589 4A77           3C                     01  cmp	al,*1
19590 4A79         0F85         00DC            bne 	.E0
19591                       00004A7D            .E1:
19592                                           ! 2300       {for(i=rul;i<=rlr;i++)
19593                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19594 4A7D           8A46         08            mov	al,8[bp]
19595 4A80           30E4                       xor	ah,ah
19596 4A82           8946         F4            mov	-$C[bp],ax
19597                                           !BCC_EOS
19598                                           !BCC_EOS
19599                                           ! 2301         {
19600 4A85           E9         00C2            br 	.E4
19601                       00004A88            .E5:
19602                                           ! 2302          if((i+nblines>rlr)||(nblines==0))
19603                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19604 4A88           8B46         F4            mov	ax,-$C[bp]
19605 4A8B           0246         04            add	al,4[bp]
19606 4A8E           80D4                   00  adc	ah,*0
19607                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19608 4A91           50                         push	ax
19609 4A92           8A46         0C            mov	al,$C[bp]
19610 4A95           30E4                       xor	ah,ah
19611 4A97           3B46         F0            cmp	ax,-$10[bp]
19612 4A9A           8D66         F2            lea	sp,-$E[bp]
19613 4A9D           72           07            jb  	.E7
19614                       00004A9F            .E8:
19615                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19616 4A9F           8A46         04            mov	al,4[bp]
19617 4AA2           84C0                       test	al,al
19618 4AA4           75           42            jne 	.E6
19619                       00004AA6            .E7:
19620                                           ! 2303           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19621                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19622 4AA6           8A46         FB            mov	al,-5[bp]
19623 4AA9           30E4                       xor	ah,ah
19624 4AAB           50                         push	ax
19625                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19626 4AAC           8A46         06            mov	al,6[bp]
19627 4AAF           30E4                       xor	ah,ah
19628                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19629 4AB1           B9                   0100  mov	cx,#$100
19630 4AB4           F7E9                       imul	cx
19631                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19632                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19633 4AB6           05                   0020  add	ax,*$20
19634 4AB9           50                         push	ax
19635                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19636 4ABA           8B46         F4            mov	ax,-$C[bp]
19637 4ABD           8B4E         F8            mov	cx,-8[bp]
19638 4AC0           F7E9                       imul	cx
19639                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19640 4AC2           0246         0A            add	al,$A[bp]
19641 4AC5           80D4                   00  adc	ah,*0
19642                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19643 4AC8           D1E0                       shl	ax,*1
19644                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4ACA           0346         F2            add	ax,-$E[bp]
19647                                           ! Debug: list unsigned int = ax+0 (used reg = )
19648 4ACD           50                         push	ax
19649                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19650 4ACE           8A46         FE            mov	al,-2[bp]
19651 4AD1           30E4                       xor	ah,ah
19652 4AD3           B1                     03  mov	cl,*3
19653 4AD5           D3E0                       shl	ax,cl
19654 4AD7           89C3                       mov	bx,ax
19655 4AD9           81C3                 01FD  add	bx,#_vga_modes
19656                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19657 4ADD           FF77         04            push	4[bx]
19658                                           ! Debug: func () void = memsetw+0 (used reg = )
19659 4AE0           E8         3049            call	_memsetw
19660 4AE3           83C4                   08  add	sp,*8
19661                                           !BCC_EOS
19662                                           ! 2304          else
19663                                           ! 2305           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19664 4AE6           EB           5B            jmp .E9
19665                       00004AE8            .E6:
19666                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19667 4AE8           8A46         FB            mov	al,-5[bp]
19668 4AEB           30E4                       xor	ah,ah
19669 4AED           50                         push	ax
19670                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19671 4AEE           8B46         F4            mov	ax,-$C[bp]
19672 4AF1           0246         04            add	al,4[bp]
19673 4AF4           80D4                   00  adc	ah,*0
19674                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19675 4AF7           8B4E         F8            mov	cx,-8[bp]
19676 4AFA           F7E9                       imul	cx
19677                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19678 4AFC           0246         0A            add	al,$A[bp]
19679 4AFF           80D4                   00  adc	ah,*0
19680                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19681 4B02           D1E0                       shl	ax,*1
19682                                           ! Debug: list unsigned int = ax+0 (used reg = )
19683 4B04           50                         push	ax
19684                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19685 4B05           8A46         FE            mov	al,-2[bp]
19686 4B08           30E4                       xor	ah,ah
19687 4B0A           B1                     03  mov	cl,*3
19688 4B0C           D3E0                       shl	ax,cl
19689 4B0E           89C3                       mov	bx,ax
19690 4B10           81C3                 01FD  add	bx,#_vga_modes
19691                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19692 4B14           FF77         04            push	4[bx]
19693                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19694 4B17           8B46         F4            mov	ax,-$C[bp]
19695 4B1A           8B4E         F8            mov	cx,-8[bp]
19696 4B1D           F7E9                       imul	cx
19697                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19698 4B1F           0246         0A            add	al,$A[bp]
19699 4B22           80D4                   00  adc	ah,*0
19700                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19701 4B25           D1E0                       shl	ax,*1
19702                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19703                                           ! Debug: expression subtree swapping
19704 4B27           0346         F2            add	ax,-$E[bp]
19705                                           ! Debug: list unsigned int = ax+0 (used reg = )
19706 4B2A           50                         push	ax
19707                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B2B           8A46         FE            mov	al,-2[bp]
19709 4B2E           30E4                       xor	ah,ah
19710 4B30           B1                     03  mov	cl,*3
19711 4B32           D3E0                       shl	ax,cl
19712 4B34           89C3                       mov	bx,ax
19713 4B36           81C3                 01FD  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B3A           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memcpyw+0 (used reg = )
19717 4B3D           E8         3041            call	_memcpyw
19718 4B40           83C4                   0A  add	sp,*$A
19719                                           !BCC_EOS
19720                                           ! 2306         }
19721                       00004B43            .E9:
19722                                           ! 2307       }
19723                       00004B43            .E3:
19724                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19725 4B43           8B46         F4            mov	ax,-$C[bp]
19726 4B46           40                         inc	ax
19727 4B47           8946         F4            mov	-$C[bp],ax
19728                       00004B4A            .E4:
19729                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19730 4B4A           8A46         0C            mov	al,$C[bp]
19731 4B4D           30E4                       xor	ah,ah
19732 4B4F           3B46         F4            cmp	ax,-$C[bp]
19733 4B52         0F83         FF32            bhis	.E5
19734                       00004B56            .EA:
19735                       00004B56            .E2:
19736                                           ! 2308      else
19737                                           ! 2309       {for(i=rlr;i>=rul;i--)
19738 4B56           E9         00DE            br 	.EB
19739                       00004B59            .E0:
19740                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19741 4B59           8A46         0C            mov	al,$C[bp]
19742 4B5C           30E4                       xor	ah,ah
19743 4B5E           8946         F4            mov	-$C[bp],ax
19744                                           !BCC_EOS
19745                                           !BCC_EOS
19746                                           ! 2310         {
19747 4B61           E9         00C7            br 	.EE
19748                       00004B64            .EF:
19749                                           ! 2311    
19750                                           ! 2311       if((i<rul+nblines)||(nblines==0))
19751                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19752 4B64           8A46         08            mov	al,8[bp]
19753 4B67           30E4                       xor	ah,ah
19754 4B69           0246         04            add	al,4[bp]
19755 4B6C           80D4                   00  adc	ah,*0
19756                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19757 4B6F           3B46         F4            cmp	ax,-$C[bp]
19758 4B72           77           07            ja  	.F1
19759                       00004B74            .F2:
19760                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19761 4B74           8A46         04            mov	al,4[bp]
19762 4B77           84C0                       test	al,al
19763 4B79           75           42            jne 	.F0
19764                       00004B7B            .F1:
19765                                           ! 2312           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19766                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19767 4B7B           8A46         FB            mov	al,-5[bp]
19768 4B7E           30E4                       xor	ah,ah
19769 4B80           50                         push	ax
19770                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19771 4B81           8A46         06            mov	al,6[bp]
19772 4B84           30E4                       xor	ah,ah
19773                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19774 4B86           B9                   0100  mov	cx,#$100
19775 4B89           F7E9                       imul	cx
19776                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19777                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19778 4B8B           05                   0020  add	ax,*$20
19779 4B8E           50                         push	ax
19780                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19781 4B8F           8B46         F4            mov	ax,-$C[bp]
19782 4B92           8B4E         F8            mov	cx,-8[bp]
19783 4B95           F7E9                       imul	cx
19784                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19785 4B97           0246         0A            add	al,$A[bp]
19786 4B9A           80D4                   00  adc	ah,*0
19787                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19788 4B9D           D1E0                       shl	ax,*1
19789                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19790                                           ! Debug: expression subtree swapping
19791 4B9F           0346         F2            add	ax,-$E[bp]
19792                                           ! Debug: list unsigned int = ax+0 (used reg = )
19793 4BA2           50                         push	ax
19794                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19795 4BA3           8A46         FE            mov	al,-2[bp]
19796 4BA6           30E4                       xor	ah,ah
19797 4BA8           B1                     03  mov	cl,*3
19798 4BAA           D3E0                       shl	ax,cl
19799 4BAC           89C3                       mov	bx,ax
19800 4BAE           81C3                 01FD  add	bx,#_vga_modes
19801                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19802 4BB2           FF77         04            push	4[bx]
19803                                           ! Debug: func () void = memsetw+0 (used reg = )
19804 4BB5           E8         2F74            call	_memsetw
19805 4BB8           83C4                   08  add	sp,*8
19806                                           !BCC_EOS
19807                                           ! 2313          else
19808                                           ! 2314           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19809 4BBB           EB           5B            jmp .F3
19810                       00004BBD            .F0:
19811                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19812 4BBD           8A46         FB            mov	al,-5[bp]
19813 4BC0           30E4                       xor	ah,ah
19814 4BC2           50                         push	ax
19815                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19816 4BC3           8B46         F4            mov	ax,-$C[bp]
19817 4BC6           2A46         04            sub	al,4[bp]
19818 4BC9           80DC                   00  sbb	ah,*0
19819                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19820 4BCC           8B4E         F8            mov	cx,-8[bp]
19821 4BCF           F7E9                       imul	cx
19822                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19823 4BD1           0246         0A            add	al,$A[bp]
19824 4BD4           80D4                   00  adc	ah,*0
19825                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19826 4BD7           D1E0                       shl	ax,*1
19827                                           ! Debug: list unsigned int = ax+0 (used reg = )
19828 4BD9           50                         push	ax
19829                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19830 4BDA           8A46         FE            mov	al,-2[bp]
19831 4BDD           30E4                       xor	ah,ah
19832 4BDF           B1                     03  mov	cl,*3
19833 4BE1           D3E0                       shl	ax,cl
19834 4BE3           89C3                       mov	bx,ax
19835 4BE5           81C3                 01FD  add	bx,#_vga_modes
19836                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19837 4BE9           FF77         04            push	4[bx]
19838                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19839 4BEC           8B46         F4            mov	ax,-$C[bp]
19840 4BEF           8B4E         F8            mov	cx,-8[bp]
19841 4BF2           F7E9                       imul	cx
19842                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19843 4BF4           0246         0A            add	al,$A[bp]
19844 4BF7           80D4                   00  adc	ah,*0
19845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19846 4BFA           D1E0                       shl	ax,*1
19847                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19848                                           ! Debug: expression subtree swapping
19849 4BFC           0346         F2            add	ax,-$E[bp]
19850                                           ! Debug: list unsigned int = ax+0 (used reg = )
19851 4BFF           50                         push	ax
19852                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19853 4C00           8A46         FE            mov	al,-2[bp]
19854 4C03           30E4                       xor	ah,ah
19855 4C05           B1                     03  mov	cl,*3
19856 4C07           D3E0                       shl	ax,cl
19857 4C09           89C3                       mov	bx,ax
19858 4C0B           81C3                 01FD  add	bx,#_vga_modes
19859                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19860 4C0F           FF77         04            push	4[bx]
19861                                           ! Debug: func () void = memcpyw+0 (used reg = )
19862 4C12           E8         2F6C            call	_memcpyw
19863 4C15           83C4                   0A  add	sp,*$A
19864                                           !BCC_EOS
19865                                           ! 2315          if (i>rlr) break;
19866                       00004C18            .F3:
19867                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19868 4C18           8A46         0C            mov	al,$C[bp]
19869 4C1B           30E4                       xor	ah,ah
19870 4C1D           3B46         F4            cmp	ax,-$C[bp]
19871 4C20           73           02            jae 	.F4
19872                       00004C22            .F5:
19873 4C22           EB           13            jmp .EC
19874                                           !BCC_EOS
19875                                           ! 2316         }
19876                       00004C24            .F4:
19877                                           ! 2317       }
19878                       00004C24            .ED:
19879                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19880 4C24           8B46         F4            mov	ax,-$C[bp]
19881 4C27           48                         dec	ax
19882 4C28           8946         F4            mov	-$C[bp],ax
19883                       00004C2B            .EE:
19884                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19885 4C2B           8A46         08            mov	al,8[bp]
19886 4C2E           30E4                       xor	ah,ah
19887 4C30           3B46         F4            cmp	ax,-$C[bp]
19888 4C33         0F86         FF2D            blos	.EF
19889                       00004C37            .F6:
19890                       00004C37            .EC:
19891                                           ! 2318     }
19892                       00004C37            .EB:
19893                                           ! 2319   }
19894                       00004C37            .DF:
19895                                           ! 2320  else
19896                                           ! 2321   {
19897 4C37           E9         03D5            br 	.F7
19898                       00004C3A            .D7:
19899                                           ! 2322    cheight=video_param_table[line_to_vpti[line]].cheight;
19900                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19901 4C3A           8A46         FE            mov	al,-2[bp]
19902 4C3D           30E4                       xor	ah,ah
19903 4C3F           89C3                       mov	bx,ax
19904                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19905 4C41           8A87       027D            mov	al,_line_to_vpti[bx]
19906 4C45           30E4                       xor	ah,ah
19907 4C47           B1                     06  mov	cl,*6
19908 4C49           D3E0                       shl	ax,cl
19909 4C4B           89C3                       mov	bx,ax
19910 4C4D           81C3                 0291  add	bx,#_video_param_table
19911                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19912 4C51           8A47         02            mov	al,2[bx]
19913 4C54           8846         FD            mov	-3[bp],al
19914                                           !BCC_EOS
19915                                           ! 2323    switch(vga_modes[line].memmodel)
19916                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19917 4C57           8A46         FE            mov	al,-2[bp]
19918 4C5A           30E4                       xor	ah,ah
19919 4C5C           B1                     03  mov	cl,*3
19920 4C5E           D3E0                       shl	ax,cl
19921 4C60           89C3                       mov	bx,ax
19922 4C62           81C3                 01FD  add	bx,#_vga_modes
19923 4C66           8A47         02            mov	al,2[bx]
19924                                           ! 2324     {
19925 4C69           E9         0391            br 	.FA
19926                                           ! 2325      case 0x04:
19927                                           ! 2326      case 0x03:
19928                       00004C6C            .FB:
19929                                           ! 2327        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19930                       00004C6C            .FC:
19931                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19932 4C6C           8A46         04            mov	al,4[bp]
19933 4C6F           84C0                       test	al,al
19934 4C71         0F85         0089            bne 	.FD
19935                       00004C75            .102:
19936                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19937 4C75           8A46         08            mov	al,8[bp]
19938 4C78           84C0                       test	al,al
19939 4C7A         0F85         0080            bne 	.FD
19940                       00004C7E            .101:
19941                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19942 4C7E           8A46         0A            mov	al,$A[bp]
19943 4C81           84C0                       test	al,al
19944 4C83           75           79            jne 	.FD
19945                       00004C85            .100:
19946                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19947 4C85           8B46         F6            mov	ax,-$A[bp]
19948                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19949                                           ! Debug: expression subtree swapping
19950 4C88           48                         dec	ax
19951 4C89           50                         push	ax
19952 4C8A           8A46         0C            mov	al,$C[bp]
19953 4C8D           30E4                       xor	ah,ah
19954 4C8F           3B46         F0            cmp	ax,0+..FFFC[bp]
19955 4C92           8D66         F2            lea	sp,2+..FFFC[bp]
19956 4C95           75           67            jne 	.FD
19957                       00004C97            .FF:
19958                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19959 4C97           8B46         F8            mov	ax,-8[bp]
19960                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19961                                           ! Debug: expression subtree swapping
19962 4C9A           48                         dec	ax
19963 4C9B           50                         push	ax
19964 4C9C           8A46         0E            mov	al,$E[bp]
19965 4C9F           30E4                       xor	ah,ah
19966 4CA1           3B46         F0            cmp	ax,0+..FFFC[bp]
19967 4CA4           8D66         F2            lea	sp,2+..FFFC[bp]
19968 4CA7           75           55            jne 	.FD
19969                       00004CA9            .FE:
19970                                           ! 2328         {
19971                                           ! 2329          outw(0x3ce, 0x0205);
19972                                           ! Debug: list int = const $205 (used reg = )
19973 4CA9           B8                   0205  mov	ax,#$205
19974 4CAC           50                         push	ax
19975                                           ! Debug: list int = const $3CE (used reg = )
19976 4CAD           B8                   03CE  mov	ax,#$3CE
19977 4CB0           50                         push	ax
19978                                           ! Debug: func () void = outw+0 (used reg = )
19979 4CB1           E8         2F79            call	_outw
19980 4CB4           83C4                   04  add	sp,*4
19981                                           !BCC_EOS
19982                                           ! 2330          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19983                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19984 4CB7           8B46         F6            mov	ax,-$A[bp]
19985 4CBA           8B4E         F8            mov	cx,-8[bp]
19986 4CBD           F7E9                       imul	cx
19987                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19988 4CBF           89C3                       mov	bx,ax
19989 4CC1           8A46         FD            mov	al,-3[bp]
19990 4CC4           30E4                       xor	ah,ah
19991 4CC6           93                         xchg	ax,bx
19992 4CC7           89D9                       mov	cx,bx
19993 4CC9           F7E9                       imul	cx
19994                                           ! Debug: list unsigned int = ax+0 (used reg = )
19995 4CCB           50                         push	ax
19996                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19997 4CCC           8A46         06            mov	al,6[bp]
19998 4CCF           30E4                       xor	ah,ah
19999 4CD1           50                         push	ax
20000                                           ! Debug: list int = const 0 (used reg = )
20001 4CD2           31C0                       xor	ax,ax
20002 4CD4           50                         push	ax
20003                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20004 4CD5           8A46         FE            mov	al,-2[bp]
20005 4CD8           30E4                       xor	ah,ah
20006 4CDA           B1                     03  mov	cl,*3
20007 4CDC           D3E0                       shl	ax,cl
20008 4CDE           89C3                       mov	bx,ax
20009 4CE0           81C3                 01FD  add	bx,#_vga_modes
20010                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20011 4CE4           FF77         04            push	4[bx]
20012                                           ! Debug: func () void = memsetb+0 (used reg = )
20013 4CE7           E8         2E1D            call	_memsetb
20014 4CEA           83C4                   08  add	sp,*8
20015                                           !BCC_EOS
20016                                           ! 2331          outw(0x3ce, 0x0005);
20017                                           ! Debug: list int = const 5 (used reg = )
20018 4CED           B8                   0005  mov	ax,*5
20019 4CF0           50                         push	ax
20020                                           ! Debug: list int = const $3CE (used reg = )
20021 4CF1           B8                   03CE  mov	ax,#$3CE
20022 4CF4           50                         push	ax
20023                                           ! Debug: func () void = outw+0 (used reg = )
20024 4CF5           E8         2F35            call	_outw
20025 4CF8           83C4                   04  add	sp,*4
20026                                           !BCC_EOS
20027                                           ! 2332         }
20028                                           ! 2333        else
20029                                           ! 2334         {
20030 4CFB           E9         0121            br 	.103
20031                       00004CFE            .FD:
20032                                           ! 2335          if(dir==1)
20033                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20034 4CFE           8A46         12            mov	al,$12[bp]
20035 4D01           3C                     01  cmp	al,*1
20036 4D03         0F85         008A            bne 	.104
20037                       00004D07            .105:
20038                                           ! 2336           {for(i=rul;i<=rlr;i++)
20039                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20040 4D07           8A46         08            mov	al,8[bp]
20041 4D0A           30E4                       xor	ah,ah
20042 4D0C           8946         F4            mov	-$C[bp],ax
20043                                           !BCC_EOS
20044                                           !BCC_EOS
20045                                           ! 2337             {
20046 4D0F           EB           73            jmp .108
20047                       00004D11            .109:
20048                                           ! 2338              if((i+nblines>rlr)||(nblines==0))
20049                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20050 4D11           8B46         F4            mov	ax,-$C[bp]
20051 4D14           0246         04            add	al,4[bp]
20052 4D17           80D4                   00  adc	ah,*0
20053                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20054 4D1A           50                         push	ax
20055 4D1B           8A46         0C            mov	al,$C[bp]
20056 4D1E           30E4                       xor	ah,ah
20057 4D20           3B46         F0            cmp	ax,0+..FFFC[bp]
20058 4D23           8D66         F2            lea	sp,2+..FFFC[bp]
20059 4D26           72           07            jb  	.10B
20060                       00004D28            .10C:
20061                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20062 4D28           8A46         04            mov	al,4[bp]
20063 4D2B           84C0                       test	al,al
20064 4D2D           75           26            jne 	.10A
20065                       00004D2F            .10B:
20066                                           ! 2339               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20067                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20068 4D2F           8A46         06            mov	al,6[bp]
20069 4D32           30E4                       xor	ah,ah
20070 4D34           50                         push	ax
20071                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20072 4D35           8A46         FD            mov	al,-3[bp]
20073 4D38           30E4                       xor	ah,ah
20074 4D3A           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20076 4D3B           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20078 4D3E           8A46         FB            mov	al,-5[bp]
20079 4D41           30E4                       xor	ah,ah
20080 4D43           50                         push	ax
20081                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20082 4D44           FF76         F4            push	-$C[bp]
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4D47           8A46         0A            mov	al,$A[bp]
20085 4D4A           30E4                       xor	ah,ah
20086 4D4C           50                         push	ax
20087                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20088 4D4D           E8         F96B            call	_vgamem_fill_pl4
20089 4D50           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2340              else
20092                                           ! 2341               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20093 4D53           EB           28            jmp .10D
20094                       00004D55            .10A:
20095                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20096 4D55           8A46         FD            mov	al,-3[bp]
20097 4D58           30E4                       xor	ah,ah
20098 4D5A           50                         push	ax
20099                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20100 4D5B           FF76         F8            push	-8[bp]
20101                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20102 4D5E           8A46         FB            mov	al,-5[bp]
20103 4D61           30E4                       xor	ah,ah
20104 4D63           50                         push	ax
20105                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20106 4D64           FF76         F4            push	-$C[bp]
20107                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20108 4D67           8B46         F4            mov	ax,-$C[bp]
20109 4D6A           0246         04            add	al,4[bp]
20110 4D6D           80D4                   00  adc	ah,*0
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4D70           50                         push	ax
20113                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20114 4D71           8A46         0A            mov	al,$A[bp]
20115 4D74           30E4                       xor	ah,ah
20116 4D76           50                         push	ax
20117                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20118 4D77           E8         F87F            call	_vgamem_copy_pl4
20119 4D7A           83C4                   0C  add	sp,*$C
20120                                           !BCC_EOS
20121                                           ! 2342             }
20122                       00004D7D            .10D:
20123                                           ! 2343           }
20124                       00004D7D            .107:
20125                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20126 4D7D           8B46         F4            mov	ax,-$C[bp]
20127 4D80           40                         inc	ax
20128 4D81           8946         F4            mov	-$C[bp],ax
20129                       00004D84            .108:
20130                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20131 4D84           8A46         0C            mov	al,$C[bp]
20132 4D87           30E4                       xor	ah,ah
20133 4D89           3B46         F4            cmp	ax,-$C[bp]
20134 4D8C           73           83            jae	.109
20135                       00004D8E            .10E:
20136                       00004D8E            .106:
20137                                           ! 2344          else
20138                                           ! 2345           {for(i=rlr;i>=rul;i--)
20139 4D8E           E9         008E            br 	.10F
20140                       00004D91            .104:
20141                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20142 4D91           8A46         0C            mov	al,$C[bp]
20143 4D94           30E4                       xor	ah,ah
20144 4D96           8946         F4            mov	-$C[bp],ax
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2346             {
20148 4D99           EB           78            jmp .112
20149                       00004D9B            .113:
20150                                           ! 2347              if((i<rul+nblines)||(nblines==0))
20151                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20152 4D9B           8A46         08            mov	al,8[bp]
20153 4D9E           30E4                       xor	ah,ah
20154 4DA0           0246         04            add	al,4[bp]
20155 4DA3           80D4                   00  adc	ah,*0
20156                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20157 4DA6           3B46         F4            cmp	ax,-$C[bp]
20158 4DA9           77           07            ja  	.115
20159                       00004DAB            .116:
20160                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20161 4DAB           8A46         04            mov	al,4[bp]
20162 4DAE           84C0                       test	al,al
20163 4DB0           75           26            jne 	.114
20164                       00004DB2            .115:
20165                                           ! 2348               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20166                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20167 4DB2           8A46         06            mov	al,6[bp]
20168 4DB5           30E4                       xor	ah,ah
20169 4DB7           50                         push	ax
20170                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20171 4DB8           8A46         FD            mov	al,-3[bp]
20172 4DBB           30E4                       xor	ah,ah
20173 4DBD           50                         push	ax
20174                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20175 4DBE           FF76         F8            push	-8[bp]
20176                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20177 4DC1           8A46         FB            mov	al,-5[bp]
20178 4DC4           30E4                       xor	ah,ah
20179 4DC6           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4DC7           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4DCA           8A46         0A            mov	al,$A[bp]
20184 4DCD           30E4                       xor	ah,ah
20185 4DCF           50                         push	ax
20186                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20187 4DD0           E8         F8E8            call	_vgamem_fill_pl4
20188 4DD3           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2349              else
20191                                           ! 2350               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20192 4DD6           EB           28            jmp .117
20193                       00004DD8            .114:
20194                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20195 4DD8           8A46         FD            mov	al,-3[bp]
20196 4DDB           30E4                       xor	ah,ah
20197 4DDD           50                         push	ax
20198                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20199 4DDE           FF76         F8            push	-8[bp]
20200                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20201 4DE1           8A46         FB            mov	al,-5[bp]
20202 4DE4           30E4                       xor	ah,ah
20203 4DE6           50                         push	ax
20204                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20205 4DE7           8B46         F4            mov	ax,-$C[bp]
20206 4DEA           2A46         04            sub	al,4[bp]
20207 4DED           80DC                   00  sbb	ah,*0
20208                                           ! Debug: list unsigned int = ax+0 (used reg = )
20209 4DF0           50                         push	ax
20210                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20211 4DF1           FF76         F4            push	-$C[bp]
20212                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20213 4DF4           8A46         0A            mov	al,$A[bp]
20214 4DF7           30E4                       xor	ah,ah
20215 4DF9           50                         push	ax
20216                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20217 4DFA           E8         F7FC            call	_vgamem_copy_pl4
20218 4DFD           83C4                   0C  add	sp,*$C
20219                                           !BCC_EOS
20220                                           ! 2351              if (i>rlr) break;
20221                       00004E00            .117:
20222                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20223 4E00           8A46         0C            mov	al,$C[bp]
20224 4E03           30E4                       xor	ah,ah
20225 4E05           3B46         F4            cmp	ax,-$C[bp]
20226 4E08           73           02            jae 	.118
20227                       00004E0A            .119:
20228 4E0A           EB           13            jmp .110
20229                                           !BCC_EOS
20230                                           ! 2352             }
20231                       00004E0C            .118:
20232                                           ! 2353           }
20233                       00004E0C            .111:
20234                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20235 4E0C           8B46         F4            mov	ax,-$C[bp]
20236 4E0F           48                         dec	ax
20237 4E10           8946         F4            mov	-$C[bp],ax
20238                       00004E13            .112:
20239                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20240 4E13           8A46         08            mov	al,8[bp]
20241 4E16           30E4                       xor	ah,ah
20242 4E18           3B46         F4            cmp	ax,-$C[bp]
20243 4E1B         0F86         FF7C            blos	.113
20244                       00004E1F            .11A:
20245                       00004E1F            .110:
20246                                           ! 2354         }
20247                       00004E1F            .10F:
20248                                           ! 2355        break;
20249                       00004E1F            .103:
20250 4E1F           E9         01ED            br 	.F8
20251                                           !BCC_EOS
20252                                           ! 2356      case 0x02:
20253                                           ! 2357        bpp=vga_modes[line].pixbits;
20254                       00004E22            .11B:
20255                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20256 4E22           8A46         FE            mov	al,-2[bp]
20257 4E25           30E4                       xor	ah,ah
20258 4E27           B1                     03  mov	cl,*3
20259 4E29           D3E0                       shl	ax,cl
20260 4E2B           89C3                       mov	bx,ax
20261 4E2D           81C3                 01FD  add	bx,#_vga_modes
20262                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20263 4E31           8A47         03            mov	al,3[bx]
20264 4E34           8846         FC            mov	-4[bp],al
20265                                           !BCC_EOS
20266                                           ! 2358        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20267                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20268 4E37           8A46         04            mov	al,4[bp]
20269 4E3A           84C0                       test	al,al
20270 4E3C           75           77            jne 	.11C
20271                       00004E3E            .121:
20272                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20273 4E3E           8A46         08            mov	al,8[bp]
20274 4E41           84C0                       test	al,al
20275 4E43           75           70            jne 	.11C
20276                       00004E45            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20278 4E45           8A46         0A            mov	al,$A[bp]
20279 4E48           84C0                       test	al,al
20280 4E4A           75           69            jne 	.11C
20281                       00004E4C            .11F:
20282                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20283 4E4C           8B46         F6            mov	ax,-$A[bp]
20284                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 4E4F           48                         dec	ax
20287 4E50           50                         push	ax
20288 4E51           8A46         0C            mov	al,$C[bp]
20289 4E54           30E4                       xor	ah,ah
20290 4E56           3B46         F0            cmp	ax,0+..FFFC[bp]
20291 4E59           8D66         F2            lea	sp,2+..FFFC[bp]
20292 4E5C           75           57            jne 	.11C
20293                       00004E5E            .11E:
20294                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20295 4E5E           8B46         F8            mov	ax,-8[bp]
20296                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20297                                           ! Debug: expression subtree swapping
20298 4E61           48                         dec	ax
20299 4E62           50                         push	ax
20300 4E63           8A46         0E            mov	al,$E[bp]
20301 4E66           30E4                       xor	ah,ah
20302 4E68           3B46         F0            cmp	ax,0+..FFFC[bp]
20303 4E6B           8D66         F2            lea	sp,2+..FFFC[bp]
20304 4E6E           75           45            jne 	.11C
20305                       00004E70            .11D:
20306                                           ! 2359         {
20307                                           ! 2360          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20308                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20309 4E70           8B46         F6            mov	ax,-$A[bp]
20310 4E73           8B4E         F8            mov	cx,-8[bp]
20311 4E76           F7E9                       imul	cx
20312                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20313 4E78           89C3                       mov	bx,ax
20314 4E7A           8A46         FD            mov	al,-3[bp]
20315 4E7D           30E4                       xor	ah,ah
20316 4E7F           93                         xchg	ax,bx
20317 4E80           89D9                       mov	cx,bx
20318 4E82           F7E9                       imul	cx
20319                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20320 4E84           89C3                       mov	bx,ax
20321 4E86           8A46         FC            mov	al,-4[bp]
20322 4E89           30E4                       xor	ah,ah
20323 4E8B           93                         xchg	ax,bx
20324 4E8C           89D9                       mov	cx,bx
20325 4E8E           F7E9                       imul	cx
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4E90           50                         push	ax
20328                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20329 4E91           8A46         06            mov	al,6[bp]
20330 4E94           30E4                       xor	ah,ah
20331 4E96           50                         push	ax
20332                                           ! Debug: list int = const 0 (used reg = )
20333 4E97           31C0                       xor	ax,ax
20334 4E99           50                         push	ax
20335                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20336 4E9A           8A46         FE            mov	al,-2[bp]
20337 4E9D           30E4                       xor	ah,ah
20338 4E9F           B1                     03  mov	cl,*3
20339 4EA1           D3E0                       shl	ax,cl
20340 4EA3           89C3                       mov	bx,ax
20341 4EA5           81C3                 01FD  add	bx,#_vga_modes
20342                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20343 4EA9           FF77         04            push	4[bx]
20344                                           ! Debug: func () void = memsetb+0 (used reg = )
20345 4EAC           E8         2C58            call	_memsetb
20346 4EAF           83C4                   08  add	sp,*8
20347                                           !BCC_EOS
20348                                           ! 2361         }
20349                                           ! 2362        else
20350                                           ! 2363         {
20351 4EB2           E9         0144            br 	.122
20352                       00004EB5            .11C:
20353                                           ! 2364          if(bpp==2)
20354                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20355 4EB5           8A46         FC            mov	al,-4[bp]
20356 4EB8           3C                     02  cmp	al,*2
20357 4EBA           75           1C            jne 	.123
20358                       00004EBC            .124:
20359                                           ! 2365           {
20360                                           ! 2366            cul<<=1;
20361                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20362 4EBC           8A46         0A            mov	al,$A[bp]
20363 4EBF           30E4                       xor	ah,ah
20364 4EC1           D1E0                       shl	ax,*1
20365 4EC3           8846         0A            mov	$A[bp],al
20366                                           !BCC_EOS
20367                                           ! 2367            cols<<=1;
20368                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20369 4EC6           8A46         FB            mov	al,-5[bp]
20370 4EC9           30E4                       xor	ah,ah
20371 4ECB           D1E0                       shl	ax,*1
20372 4ECD           8846         FB            mov	-5[bp],al
20373                                           !BCC_EOS
20374                                           ! 2368            nbcols<<=1;
20375                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20376 4ED0           8B46         F8            mov	ax,-8[bp]
20377 4ED3           D1E0                       shl	ax,*1
20378 4ED5           8946         F8            mov	-8[bp],ax
20379                                           !BCC_EOS
20380                                           ! 2369           }
20381                                           ! 2370          if(dir==1)
20382                       00004ED8            .123:
20383                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20384 4ED8           8A46         12            mov	al,$12[bp]
20385 4EDB           3C                     01  cmp	al,*1
20386 4EDD         0F85         008A            bne 	.125
20387                       00004EE1            .126:
20388                                           ! 2371           {for(i=rul;i<=rlr;i++)
20389                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20390 4EE1           8A46         08            mov	al,8[bp]
20391 4EE4           30E4                       xor	ah,ah
20392 4EE6           8946         F4            mov	-$C[bp],ax
20393                                           !BCC_EOS
20394                                           !BCC_EOS
20395                                           ! 2372             {
20396 4EE9           EB           73            jmp .129
20397                       00004EEB            .12A:
20398                                           ! 2373              if((i+nblines>rlr)||(nblines==0))
20399                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20400 4EEB           8B46         F4            mov	ax,-$C[bp]
20401 4EEE           0246         04            add	al,4[bp]
20402 4EF1           80D4                   00  adc	ah,*0
20403                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20404 4EF4           50                         push	ax
20405 4EF5           8A46         0C            mov	al,$C[bp]
20406 4EF8           30E4                       xor	ah,ah
20407 4EFA           3B46         F0            cmp	ax,0+..FFFC[bp]
20408 4EFD           8D66         F2            lea	sp,2+..FFFC[bp]
20409 4F00           72           07            jb  	.12C
20410                       00004F02            .12D:
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4F02           8A46         04            mov	al,4[bp]
20413 4F05           84C0                       test	al,al
20414 4F07           75           26            jne 	.12B
20415                       00004F09            .12C:
20416                                           ! 2374               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20417                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20418 4F09           8A46         06            mov	al,6[bp]
20419 4F0C           30E4                       xor	ah,ah
20420 4F0E           50                         push	ax
20421                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20422 4F0F           8A46         FD            mov	al,-3[bp]
20423 4F12           30E4                       xor	ah,ah
20424 4F14           50                         push	ax
20425                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20426 4F15           FF76         F8            push	-8[bp]
20427                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20428 4F18           8A46         FB            mov	al,-5[bp]
20429 4F1B           30E4                       xor	ah,ah
20430 4F1D           50                         push	ax
20431                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20432 4F1E           FF76         F4            push	-$C[bp]
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F21           8A46         0A            mov	al,$A[bp]
20435 4F24           30E4                       xor	ah,ah
20436 4F26           50                         push	ax
20437                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20438 4F27           E8         F92E            call	_vgamem_fill_cga
20439 4F2A           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2375              else
20442                                           ! 2376               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20443 4F2D           EB           28            jmp .12E
20444                       00004F2F            .12B:
20445                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20446 4F2F           8A46         FD            mov	al,-3[bp]
20447 4F32           30E4                       xor	ah,ah
20448 4F34           50                         push	ax
20449                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20450 4F35           FF76         F8            push	-8[bp]
20451                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20452 4F38           8A46         FB            mov	al,-5[bp]
20453 4F3B           30E4                       xor	ah,ah
20454 4F3D           50                         push	ax
20455                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20456 4F3E           FF76         F4            push	-$C[bp]
20457                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20458 4F41           8B46         F4            mov	ax,-$C[bp]
20459 4F44           0246         04            add	al,4[bp]
20460 4F47           80D4                   00  adc	ah,*0
20461                                           ! Debug: list unsigned int = ax+0 (used reg = )
20462 4F4A           50                         push	ax
20463                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20464 4F4B           8A46         0A            mov	al,$A[bp]
20465 4F4E           30E4                       xor	ah,ah
20466 4F50           50                         push	ax
20467                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20468 4F51           E8         F7F2            call	_vgamem_copy_cga
20469 4F54           83C4                   0C  add	sp,*$C
20470                                           !BCC_EOS
20471                                           ! 2377             }
20472                       00004F57            .12E:
20473                                           ! 2378           }
20474                       00004F57            .128:
20475                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20476 4F57           8B46         F4            mov	ax,-$C[bp]
20477 4F5A           40                         inc	ax
20478 4F5B           8946         F4            mov	-$C[bp],ax
20479                       00004F5E            .129:
20480                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20481 4F5E           8A46         0C            mov	al,$C[bp]
20482 4F61           30E4                       xor	ah,ah
20483 4F63           3B46         F4            cmp	ax,-$C[bp]
20484 4F66           73           83            jae	.12A
20485                       00004F68            .12F:
20486                       00004F68            .127:
20487                                           ! 2379          else
20488                                           ! 2380           {for(i=rlr;i>=rul;i--)
20489 4F68           E9         008E            br 	.130
20490                       00004F6B            .125:
20491                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20492 4F6B           8A46         0C            mov	al,$C[bp]
20493 4F6E           30E4                       xor	ah,ah
20494 4F70           8946         F4            mov	-$C[bp],ax
20495                                           !BCC_EOS
20496                                           !BCC_EOS
20497                                           ! 2381             {
20498 4F73           EB           78            jmp .133
20499                       00004F75            .134:
20500                                           ! 2382              if
20501                                           ! 2382 ((i<rul+nblines)||(nblines==0))
20502                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20503 4F75           8A46         08            mov	al,8[bp]
20504 4F78           30E4                       xor	ah,ah
20505 4F7A           0246         04            add	al,4[bp]
20506 4F7D           80D4                   00  adc	ah,*0
20507                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20508 4F80           3B46         F4            cmp	ax,-$C[bp]
20509 4F83           77           07            ja  	.136
20510                       00004F85            .137:
20511                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20512 4F85           8A46         04            mov	al,4[bp]
20513 4F88           84C0                       test	al,al
20514 4F8A           75           26            jne 	.135
20515                       00004F8C            .136:
20516                                           ! 2383               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20517                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20518 4F8C           8A46         06            mov	al,6[bp]
20519 4F8F           30E4                       xor	ah,ah
20520 4F91           50                         push	ax
20521                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20522 4F92           8A46         FD            mov	al,-3[bp]
20523 4F95           30E4                       xor	ah,ah
20524 4F97           50                         push	ax
20525                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20526 4F98           FF76         F8            push	-8[bp]
20527                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20528 4F9B           8A46         FB            mov	al,-5[bp]
20529 4F9E           30E4                       xor	ah,ah
20530 4FA0           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 4FA1           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 4FA4           8A46         0A            mov	al,$A[bp]
20535 4FA7           30E4                       xor	ah,ah
20536 4FA9           50                         push	ax
20537                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20538 4FAA           E8         F8AB            call	_vgamem_fill_cga
20539 4FAD           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2384              else
20542                                           ! 2385               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20543 4FB0           EB           28            jmp .138
20544                       00004FB2            .135:
20545                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20546 4FB2           8A46         FD            mov	al,-3[bp]
20547 4FB5           30E4                       xor	ah,ah
20548 4FB7           50                         push	ax
20549                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20550 4FB8           FF76         F8            push	-8[bp]
20551                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20552 4FBB           8A46         FB            mov	al,-5[bp]
20553 4FBE           30E4                       xor	ah,ah
20554 4FC0           50                         push	ax
20555                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20556 4FC1           8B46         F4            mov	ax,-$C[bp]
20557 4FC4           2A46         04            sub	al,4[bp]
20558 4FC7           80DC                   00  sbb	ah,*0
20559                                           ! Debug: list unsigned int = ax+0 (used reg = )
20560 4FCA           50                         push	ax
20561                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20562 4FCB           FF76         F4            push	-$C[bp]
20563                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20564 4FCE           8A46         0A            mov	al,$A[bp]
20565 4FD1           30E4                       xor	ah,ah
20566 4FD3           50                         push	ax
20567                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20568 4FD4           E8         F76F            call	_vgamem_copy_cga
20569 4FD7           83C4                   0C  add	sp,*$C
20570                                           !BCC_EOS
20571                                           ! 2386              if (i>rlr) break;
20572                       00004FDA            .138:
20573                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20574 4FDA           8A46         0C            mov	al,$C[bp]
20575 4FDD           30E4                       xor	ah,ah
20576 4FDF           3B46         F4            cmp	ax,-$C[bp]
20577 4FE2           73           02            jae 	.139
20578                       00004FE4            .13A:
20579 4FE4           EB           13            jmp .131
20580                                           !BCC_EOS
20581                                           ! 2387             }
20582                       00004FE6            .139:
20583                                           ! 2388           }
20584                       00004FE6            .132:
20585                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20586 4FE6           8B46         F4            mov	ax,-$C[bp]
20587 4FE9           48                         dec	ax
20588 4FEA           8946         F4            mov	-$C[bp],ax
20589                       00004FED            .133:
20590                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20591 4FED           8A46         08            mov	al,8[bp]
20592 4FF0           30E4                       xor	ah,ah
20593 4FF2           3B46         F4            cmp	ax,-$C[bp]
20594 4FF5         0F86         FF7C            blos	.134
20595                       00004FF9            .13B:
20596                       00004FF9            .131:
20597                                           ! 2389         }
20598                       00004FF9            .130:
20599                                           ! 2390        break;
20600                       00004FF9            .122:
20601 4FF9           EB           14            jmp .F8
20602                                           !BCC_EOS
20603                                           ! 2391     }
20604                                           ! 2392   }
20605 4FFB           EB           12            jmp .F8
20606                       00004FFD            .FA:
20607 4FFD           2C                     02  sub	al,*2
20608 4FFF         0F84         FE1F            beq 	.11B
20609 5003           2C                     01  sub	al,*1
20610 5005         0F84         FC63            beq 	.FC
20611 5009           2C                     01  sub	al,*1
20612 500B         0F84         FC5D            beq 	.FB
20613                       0000500F            .F8:
20614                       FFFFFFF0            ..FFFC	=	-$10
20615                                           ! 2393 }
20616                       0000500F            .F7:
20617 500F           89EC                       mov	sp,bp
20618 5011           5D                         pop	bp
20619 5012           C3                         ret
20620                                           ! 2394 static void biosfn_read_char_attr (page,car)
20621                                           ! Register BX used in function biosfn_scroll
20622                                           ! 2395 Bit8u page;Bit16u *car;
20623                       00005013            _biosfn_read_char_attr:
20624                                           !BCC_EOS
20625                                           !BCC_EOS
20626                                           ! 2396 {Bit16u ss=get_SS();
20627 5013           55                         push	bp
20628 5014           89E5                       mov	bp,sp
20629 5016           4C                         dec	sp
20630 5017           4C                         dec	sp
20631                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20632 5018           E8         2C22            call	_get_SS
20633                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20634 501B           8946         FE            mov	-2[bp],ax
20635                                           !BCC_EOS
20636                                           ! 2397  Bit8u xcurs,ycurs,mode,line;
20637                                           !BCC_EOS
20638                                           ! 2398  Bit16u nbcols,nbrows,address;
20639                                           !BCC_EOS
20640                                           ! 2399  Bit16u cursor,dummy;
20641                                           !BCC_EOS
20642                                           ! 2400  mode=read_byte(0x40,0x49);
20643 501E           83C4                   F2  add	sp,*-$E
20644                                           ! Debug: list int = const $49 (used reg = )
20645 5021           B8                   0049  mov	ax,*$49
20646 5024           50                         push	ax
20647                                           ! Debug: list int = const $40 (used reg = )
20648 5025           B8                   0040  mov	ax,*$40
20649 5028           50                         push	ax
20650                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20651 5029           E8         2B85            call	_read_byte
20652 502C           83C4                   04  add	sp,*4
20653                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20654 502F           8846         FB            mov	-5[bp],al
20655                                           !BCC_EOS
20656                                           ! 2401  line=find_vga_entry(mode);
20657                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20658 5032           8A46         FB            mov	al,-5[bp]
20659 5035           30E4                       xor	ah,ah
20660 5037           50                         push	ax
20661                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20662 5038           E8         2A8A            call	_find_vga_entry
20663 503B           44                         inc	sp
20664 503C           44                         inc	sp
20665                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20666 503D           8846         FA            mov	-6[bp],al
20667                                           !BCC_EOS
20668                                           ! 2402  if(line==0xFF)return;
20669                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20670 5040           8A46         FA            mov	al,-6[bp]
20671 5043           3C                     FF  cmp	al,#$FF
20672 5045           75           04            jne 	.13C
20673                       00005047            .13D:
20674 5047           89EC                       mov	sp,bp
20675 5049           5D                         pop	bp
20676 504A           C3                         ret
20677                                           !BCC_EOS
20678                                           ! 2403  biosfn_get_cursor_pos(page,&dummy,&cursor);
20679                       0000504B            .13C:
20680                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20681 504B           8D5E         F2            lea	bx,-$E[bp]
20682 504E           53                         push	bx
20683                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20684 504F           8D5E         F0            lea	bx,-$10[bp]
20685 5052           53                         push	bx
20686                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20687 5053           8A46         04            mov	al,4[bp]
20688 5056           30E4                       xor	ah,ah
20689 5058           50                         push	ax
20690                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20691 5059           E8         F3B9            call	_biosfn_get_cursor_pos
20692 505C           83C4                   06  add	sp,*6
20693                                           !BCC_EOS
20694                                           ! 2404  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20695                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20696 505F           8A46         F2            mov	al,-$E[bp]
20697                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20698 5062           8846         FD            mov	-3[bp],al
20699                                           !BCC_EOS
20700                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20701 5065           8B46         F2            mov	ax,-$E[bp]
20702 5068           30C0                       xor	al,al
20703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20704 506A           88E0                       mov	al,ah
20705 506C           30E4                       xor	ah,ah
20706                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20707 506E           8846         FC            mov	-4[bp],al
20708                                           !BCC_EOS
20709                                           ! 2405  nbrows=read_byte(0x40,0x84)+1;
20710                                           ! Debug: list int = const $84 (used reg = )
20711 5071           B8                   0084  mov	ax,#$84
20712 5074           50                         push	ax
20713                                           ! Debug: list int = const $40 (used reg = )
20714 5075           B8                   0040  mov	ax,*$40
20715 5078           50                         push	ax
20716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20717 5079           E8         2B35            call	_read_byte
20718 507C           83C4                   04  add	sp,*4
20719                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20720 507F           30E4                       xor	ah,ah
20721                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20722 5081           40                         inc	ax
20723 5082           8946         F6            mov	-$A[bp],ax
20724                                           !BCC_EOS
20725                                           ! 2406  nbcols=read_word(0x40,0x4A);
20726                                           ! Debug: list int = const $4A (used reg = )
20727 5085           B8                   004A  mov	ax,*$4A
20728 5088           50                         push	ax
20729                                           ! Debug: list int = const $40 (used reg = )
20730 5089           B8                   0040  mov	ax,*$40
20731 508C           50                         push	ax
20732                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20733 508D           E8         2B34            call	_read_word
20734 5090           83C4                   04  add	sp,*4
20735                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20736 5093           8946         F8            mov	-8[bp],ax
20737                                           !BCC_EOS
20738                                           ! 2407  if(vga_modes[line].class==0x00)
20739                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20740 5096           8A46         FA            mov	al,-6[bp]
20741 5099           30E4                       xor	ah,ah
20742 509B           B1                     03  mov	cl,*3
20743 509D           D3E0                       shl	ax,cl
20744 509F           89C3                       mov	bx,ax
20745 50A1           81C3                 01FD  add	bx,#_vga_modes
20746                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20747 50A5           8A47         01            mov	al,1[bx]
20748 50A8           84C0                       test	al,al
20749 50AA           75           5E            jne 	.13E
20750                       000050AC            .13F:
20751                                           ! 2408   {
20752                                           ! 2409    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20753                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20754 50AC           8A46         FC            mov	al,-4[bp]
20755 50AF           30E4                       xor	ah,ah
20756 50B1           8B4E         F8            mov	cx,-8[bp]
20757 50B4           F7E9                       imul	cx
20758                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20759                                           ! Debug: expression subtree swapping
20760 50B6           0246         FD            add	al,-3[bp]
20761 50B9           80D4                   00  adc	ah,*0
20762                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20763 50BC           D1E0                       shl	ax,*1
20764 50BE           50                         push	ax
20765                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20766 50BF           8B46         F8            mov	ax,-8[bp]
20767 50C2           8B4E         F6            mov	cx,-$A[bp]
20768 50C5           F7E9                       imul	cx
20769                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20770 50C7           D1E0                       shl	ax,*1
20771                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20772 50C9           0C                     FF  or	al,#$FF
20773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20774                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20775 50CB           89C3                       mov	bx,ax
20776 50CD           8A46         04            mov	al,4[bp]
20777 50D0           30E4                       xor	ah,ah
20778 50D2           93                         xchg	ax,bx
20779 50D3           40                         inc	ax
20780 50D4           89D9                       mov	cx,bx
20781 50D6           F7E9                       imul	cx
20782                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20783 50D8           0346         EE            add	ax,-$12[bp]
20784 50DB           44                         inc	sp
20785 50DC           44                         inc	sp
20786                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20787 50DD           8946         F4            mov	-$C[bp],ax
20788                                           !BCC_EOS
20789                                           ! 2410    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20790                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20791 50E0           FF76         F4            push	-$C[bp]
20792                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20793 50E3           8A46         FA            mov	al,-6[bp]
20794 50E6           30E4                       xor	ah,ah
20795 50E8           B1                     03  mov	cl,*3
20796 50EA           D3E0                       shl	ax,cl
20797 50EC           89C3                       mov	bx,ax
20798 50EE           81C3                 01FD  add	bx,#_vga_modes
20799                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20800 50F2           FF77         04            push	4[bx]
20801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20802 50F5           E8         2ACC            call	_read_word
20803 50F8           83C4                   04  add	sp,*4
20804                                           ! Debug: list unsigned short = ax+0 (used reg = )
20805 50FB           50                         push	ax
20806                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20807 50FC           FF76         06            push	6[bp]
20808                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20809 50FF           FF76         FE            push	-2[bp]
20810                                           ! Debug: func () void = write_word+0 (used reg = )
20811 5102           E8         2AEA            call	_write_word
20812 5105           83C4                   06  add	sp,*6
20813                                           !BCC_EOS
20814                                           ! 2411   }
20815                                           ! 2412  else
20816                                           ! 2413   {
20817 5108           EB           00            jmp .140
20818                       0000510A            .13E:
20819                                           ! 2414   }
20820                                           ! 2415 }
20821                       0000510A            .140:
20822 510A           89EC                       mov	sp,bp
20823 510C           5D                         pop	bp
20824 510D           C3                         ret
20825                                           ! 2416 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20826                                           ! Register BX used in function biosfn_read_char_attr
20827                                           ! 2417 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20828                       0000510E            _write_gfx_char_pl4:
20829                                           !BCC_EOS
20830                                           !BCC_EOS
20831                                           !BCC_EOS
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           !BCC_EOS
20835                                           ! 2418 {
20836                                           ! 2419  Bit8u i,j,mask;
20837                                           !BCC_EOS
20838                                           ! 2420  Bit8u *fdata;
20839                                           !BCC_EOS
20840                                           ! 2421  Bit16u addr,dest,src;
20841                                           !BCC_EOS
20842                                           ! 2422  switch(cheight)
20843 510E           55                         push	bp
20844 510F           89E5                       mov	bp,sp
20845 5111           83C4                   F4  add	sp,*-$C
20846 5114           8A46         0E            mov	al,$E[bp]
20847                                           ! 2423   {case 14:
20848 5117           EB           18            jmp .143
20849                                           ! 2424     fdata = &vgafont14;
20850                       00005119            .144:
20851                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20852 5119           BB                   1761  mov	bx,#_vgafont14
20853 511C           895E         FA            mov	-6[bp],bx
20854                                           !BCC_EOS
20855                                           ! 2425     break;
20856 511F           EB           1A            jmp .141
20857                                           !BCC_EOS
20858                                           ! 2426    case 16:
20859                                           ! 2427     fdata = &vgafont16;
20860                       00005121            .145:
20861                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20862 5121           BB                   2561  mov	bx,#_vgafont16
20863 5124           895E         FA            mov	-6[bp],bx
20864                                           !BCC_EOS
20865                                           ! 2428     break;
20866 5127           EB           12            jmp .141
20867                                           !BCC_EOS
20868                                           ! 2429    default:
20869                                           ! 2430     fdata = &vgafont8;
20870                       00005129            .146:
20871                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20872 5129           BB                   0F61  mov	bx,#_vgafont8
20873 512C           895E         FA            mov	-6[bp],bx
20874                                           !BCC_EOS
20875                                           ! 2431   }
20876                                           ! 2432  addr=xcurs+ycurs*cheight*nbcols;
20877 512F           EB           0A            jmp .141
20878                       00005131            .143:
20879 5131           2C                     0E  sub	al,*$E
20880 5133           74           E4            je 	.144
20881 5135           2C                     02  sub	al,*2
20882 5137           74           E8            je 	.145
20883 5139           EB           EE            jmp	.146
20884                       0000513B            .141:
20885                       FFFFFFF2            ..FFFB	=	-$E
20886                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20887 513B           8A46         0E            mov	al,$E[bp]
20888 513E           30E4                       xor	ah,ah
20889 5140           89C3                       mov	bx,ax
20890 5142           8A46         0A            mov	al,$A[bp]
20891 5145           30E4                       xor	ah,ah
20892 5147           89D9                       mov	cx,bx
20893 5149           F7E9                       imul	cx
20894                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20895 514B           89C3                       mov	bx,ax
20896 514D           8A46         0C            mov	al,$C[bp]
20897 5150           30E4                       xor	ah,ah
20898 5152           93                         xchg	ax,bx
20899 5153           89D9                       mov	cx,bx
20900 5155           F7E9                       imul	cx
20901                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20902                                           ! Debug: expression subtree swapping
20903 5157           0246         08            add	al,8[bp]
20904 515A           80D4                   00  adc	ah,*0
20905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20906 515D           8946         F8            mov	-8[bp],ax
20907                                           !BCC_EOS
20908                                           ! 2433  src = car * cheight;
20909                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20910 5160           8A46         0E            mov	al,$E[bp]
20911 5163           30E4                       xor	ah,ah
20912 5165           89C3                       mov	bx,ax
20913 5167           8A46         04            mov	al,4[bp]
20914 516A           30E4                       xor	ah,ah
20915 516C           89D9                       mov	cx,bx
20916 516E           F7E9                       imul	cx
20917                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20918 5170           8946         F4            mov	-$C[bp],ax
20919                                           !BCC_EOS
20920                                           ! 2434  outw(0x3c4, 0x0f02);
20921                                           ! Debug: list int = const $F02 (used reg = )
20922 5173           B8                   0F02  mov	ax,#$F02
20923 5176           50                         push	ax
20924                                           ! Debug: list int = const $3C4 (used reg = )
20925 5177           B8                   03C4  mov	ax,#$3C4
20926 517A           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 517B           E8         2AAF            call	_outw
20929 517E           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2435  outw(0x3ce, 0x0205);
20932                                           ! Debug: list int = const $205 (used reg = )
20933 5181           B8                   0205  mov	ax,#$205
20934 5184           50                         push	ax
20935                                           ! Debug: list int = const $3CE (used reg = )
20936 5185           B8                   03CE  mov	ax,#$3CE
20937 5188           50                         push	ax
20938                                           ! Debug: func () void = outw+0 (used reg = )
20939 5189           E8         2AA1            call	_outw
20940 518C           83C4                   04  add	sp,*4
20941                                           !BCC_EOS
20942                                           ! 2436  if(attr&0x80)
20943                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20944 518F           8A46         06            mov	al,6[bp]
20945 5192           24                     80  and	al,#$80
20946 5194           84C0                       test	al,al
20947 5196           74           10            je  	.147
20948                       00005198            .148:
20949                                           ! 2437   {
20950                                           ! 2438    outw(0x3ce, 0x1803);
20951                                           ! Debug: list int = const $1803 (used reg = )
20952 5198           B8                   1803  mov	ax,#$1803
20953 519B           50                         push	ax
20954                                           ! Debug: list int = const $3CE (used reg = )
20955 519C           B8                   03CE  mov	ax,#$3CE
20956 519F           50                         push	ax
20957                                           ! Debug: func () void = outw+0 (used reg = )
20958 51A0           E8         2A8A            call	_outw
20959 51A3           83C4                   04  add	sp,*4
20960                                           !BCC_EOS
20961                                           ! 2439   }
20962                                           ! 2440  else
20963                                           ! 2441   {
20964 51A6           EB           0E            jmp .149
20965                       000051A8            .147:
20966                                           ! 2442    outw(0x3ce, 0x0003);
20967                                           ! Debug: list int = const 3 (used reg = )
20968 51A8           B8                   0003  mov	ax,*3
20969 51AB           50                         push	ax
20970                                           ! Debug: list int = const $3CE (used reg = )
20971 51AC           B8                   03CE  mov	ax,#$3CE
20972 51AF           50                         push	ax
20973                                           ! Debug: func () void = outw+0 (used reg = )
20974 51B0           E8         2A7A            call	_outw
20975 51B3           83C4                   04  add	sp,*4
20976                                           !BCC_EOS
20977                                           ! 2443   }
20978                                           ! 2444  for(i=0;i<cheight;i++)
20979                       000051B6            .149:
20980                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20981 51B6           30C0                       xor	al,al
20982 51B8           8846         FF            mov	-1[bp],al
20983                                           !BCC_EOS
20984                                           !BCC_EOS
20985                                           ! 2445   {
20986 51BB           E9         00A6            br 	.14C
20987                       000051BE            .14D:
20988                                           ! 2446    dest=addr+i*nbcols;
20989                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20990 51BE           8A46         0C            mov	al,$C[bp]
20991 51C1           30E4                       xor	ah,ah
20992 51C3           89C3                       mov	bx,ax
20993 51C5           8A46         FF            mov	al,-1[bp]
20994 51C8           30E4                       xor	ah,ah
20995 51CA           89D9                       mov	cx,bx
20996 51CC           F7E9                       imul	cx
20997                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20998                                           ! Debug: expression subtree swapping
20999 51CE           0346         F8            add	ax,-8[bp]
21000                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21001 51D1           8946         F6            mov	-$A[bp],ax
21002                                           !BCC_EOS
21003                                           ! 2447    for(j=0;j<8;j++)
21004                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21005 51D4           30C0                       xor	al,al
21006 51D6           8846         FE            mov	-2[bp],al
21007                                           !BCC_EOS
21008                                           !BCC_EOS
21009                                           ! 2448     {
21010 51D9           EB           79            jmp .150
21011                       000051DB            .151:
21012                                           ! 2449      mask=0x80>>j;
21013                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21014 51DB           8A46         FE            mov	al,-2[bp]
21015 51DE           30E4                       xor	ah,ah
21016 51E0           89C3                       mov	bx,ax
21017 51E2           B8                   0080  mov	ax,#$80
21018 51E5           89D9                       mov	cx,bx
21019 51E7           D3F8                       sar	ax,cl
21020                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21021 51E9           8846         FD            mov	-3[bp],al
21022                                           !BCC_EOS
21023                                           ! 2450      outw(0x3ce, (mask << 8) | 0x08);
21024                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21025 51EC           8A46         FD            mov	al,-3[bp]
21026 51EF           30E4                       xor	ah,ah
21027 51F1           88C4                       mov	ah,al
21028 51F3           30C0                       xor	al,al
21029                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21030 51F5           0C                     08  or	al,*8
21031                                           ! Debug: list unsigned int = ax+0 (used reg = )
21032 51F7           50                         push	ax
21033                                           ! Debug: list int = const $3CE (used reg = )
21034 51F8           B8                   03CE  mov	ax,#$3CE
21035 51FB           50                         push	ax
21036                                           ! Debug: func () void = outw+0 (used reg = )
21037 51FC           E8         2A2E            call	_outw
21038 51FF           83C4                   04  add	sp,*4
21039                                           !BCC_EOS
21040                                           ! 2451      read_byte(0xa000,dest);
21041                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21042 5202           FF76         F6            push	-$A[bp]
21043                                           ! Debug: list unsigned int = const $A000 (used reg = )
21044 5205           B8                   A000  mov	ax,#$A000
21045 5208           50                         push	ax
21046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21047 5209           E8         29A5            call	_read_byte
21048 520C           83C4                   04  add	sp,*4
21049                                           !BCC_EOS
21050                                           ! 2452      if(fdata[src+i]&mask)
21051                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21052 520F           8B46         F4            mov	ax,-$C[bp]
21053 5212           0246         FF            add	al,-1[bp]
21054 5215           80D4                   00  adc	ah,*0
21055                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21056 5218           0346         FA            add	ax,-6[bp]
21057 521B           89C3                       mov	bx,ax
21058                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21059 521D           8A07                       mov	al,[bx]
21060 521F           2246         FD            and	al,-3[bp]
21061 5222           84C0                       test	al,al
21062 5224           74           17            je  	.152
21063                       00005226            .153:
21064                                           ! 2453       {
21065                                           ! 2454        write_byte(0xa000,dest,attr&0x0f);
21066                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21067 5226           8A46         06            mov	al,6[bp]
21068 5229           24                     0F  and	al,*$F
21069                                           ! Debug: list unsigned char = al+0 (used reg = )
21070 522B           30E4                       xor	ah,ah
21071 522D           50                         push	ax
21072                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21073 522E           FF76         F6            push	-$A[bp]
21074                                           ! Debug: list unsigned int = const $A000 (used reg = )
21075 5231           B8                   A000  mov	ax,#$A000
21076 5234           50                         push	ax
21077                                           ! Debug: func () void = write_byte+0 (used reg = )
21078 5235           E8         299F            call	_write_byte
21079 5238           83C4                   06  add	sp,*6
21080                                           !BCC_EOS
21081                                           ! 2455       }
21082                                           ! 2456      else
21083                                           ! 2457       {
21084 523B           EB           10            jmp .154
21085                       0000523D            .152:
21086                                           ! 2458        write_byte(0xa000,dest,0x00);
21087                                           ! Debug: list int = const 0 (used reg = )
21088 523D           31C0                       xor	ax,ax
21089 523F           50                         push	ax
21090                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21091 5240           FF76         F6            push	-$A[bp]
21092                                           ! Debug: list unsigned int = const $A000 (used reg = )
21093 5243           B8                   A000  mov	ax,#$A000
21094 5246           50                         push	ax
21095                                           ! Debug: func () void = write_byte+0 (used reg = )
21096 5247           E8         298D            call	_write_byte
21097 524A           83C4                   06  add	sp,*6
21098                                           !BCC_EOS
21099                                           ! 2459       }
21100                                           ! 2460     }
21101                       0000524D            .154:
21102                                           ! 2461   }
21103                       0000524D            .14F:
21104                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21105 524D           8A46         FE            mov	al,-2[bp]
21106 5250           40                         inc	ax
21107 5251           8846         FE            mov	-2[bp],al
21108                       00005254            .150:
21109                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21110 5254           8A46         FE            mov	al,-2[bp]
21111 5257           3C                     08  cmp	al,*8
21112 5259         0F82         FF7E            blo 	.151
21113                       0000525D            .155:
21114                       0000525D            .14E:
21115                                           ! 2462 #asm
21116                       0000525D            .14B:
21117                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21118 525D           8A46         FF            mov	al,-1[bp]
21119 5260           40                         inc	ax
21120 5261           8846         FF            mov	-1[bp],al
21121                       00005264            .14C:
21122                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21123 5264           8A46         FF            mov	al,-1[bp]
21124 5267           3A46         0E            cmp	al,$E[bp]
21125 526A         0F82         FF50            blo 	.14D
21126                       0000526E            .156:
21127                       0000526E            .14A:
21128                                           !BCC_EOS
21129                                           !BCC_ASM
21130                       0000000A            _write_gfx_char_pl4.j	set	$A
21131                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21132                       00000006            _write_gfx_char_pl4.fdata	set	6
21133                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21134                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21135                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21136                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21137                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21138                       0000000B            _write_gfx_char_pl4.i	set	$B
21139                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21140                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21141                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21142                       00000009            _write_gfx_char_pl4.mask	set	9
21143                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21144                       00000002            _write_gfx_char_pl4.dest	set	2
21145                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21146                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21147                       00000008            .write_gfx_char_pl4.xcurs	set	8
21148                       00000000            _write_gfx_char_pl4.src	set	0
21149                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21150                       00000012            _write_gfx_char_pl4.attr	set	$12
21151                       00000006            .write_gfx_char_pl4.attr	set	6
21152                       00000010            _write_gfx_char_pl4.car	set	$10
21153                       00000004            .write_gfx_char_pl4.car	set	4
21154                       00000004            _write_gfx_char_pl4.addr	set	4
21155                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21156 526E           BA                   03CE    mov dx, # 0x3ce
21157 5271           B8                   FF08    mov ax, #0xff08
21158 5274           EF                           out dx, ax
21159 5275           B8                   0005    mov ax, #0x0005
21160 5278           EF                           out dx, ax
21161 5279           B8                   0003    mov ax, #0x0003
21162 527C           EF                           out dx, ax
21163                                           ! 2470 endasm
21164                                           !BCC_ENDASM
21165                                           !BCC_EOS
21166                                           ! 2471 }
21167 527D           89EC                       mov	sp,bp
21168 527F           5D                         pop	bp
21169 5280           C3                         ret
21170                                           ! 2472 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21171                                           ! Register BX used in function write_gfx_char_pl4
21172                                           ! 2473 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21173                       00005281            _write_gfx_char_cga:
21174                                           !BCC_EOS
21175                                           !BCC_EOS
21176                                           !BCC_EOS
21177                                           !BCC_EOS
21178                                           !BCC_EOS
21179                                           !BCC_EOS
21180                                           ! 2474 {
21181                                           ! 2475  Bit8u i,j,mask,data;
21182                                           !BCC_EOS
21183                                           ! 2476  Bit8u *fdata;
21184                                           !BCC_EOS
21185                                           ! 2477  Bit16u addr,dest,src
21186                                           ! 2477 ;
21187                                           !BCC_EOS
21188                                           ! 2478  fdata = &vgafont8;
21189 5281           55                         push	bp
21190 5282           89E5                       mov	bp,sp
21191 5284           83C4                   F4  add	sp,*-$C
21192                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21193 5287           BB                   0F61  mov	bx,#_vgafont8
21194 528A           895E         FA            mov	-6[bp],bx
21195                                           !BCC_EOS
21196                                           ! 2479  addr=(xcurs*bpp)+ycurs*320;
21197                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21198 528D           8A46         0A            mov	al,$A[bp]
21199 5290           30E4                       xor	ah,ah
21200 5292           B9                   0140  mov	cx,#$140
21201 5295           F7E9                       imul	cx
21202 5297           50                         push	ax
21203                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21204 5298           8A46         0E            mov	al,$E[bp]
21205 529B           30E4                       xor	ah,ah
21206 529D           89C3                       mov	bx,ax
21207 529F           8A46         08            mov	al,8[bp]
21208 52A2           30E4                       xor	ah,ah
21209 52A4           89D9                       mov	cx,bx
21210 52A6           F7E9                       imul	cx
21211                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21212 52A8           0346         F2            add	ax,-$E[bp]
21213 52AB           44                         inc	sp
21214 52AC           44                         inc	sp
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21216 52AD           8946         F8            mov	-8[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2480  src = car * 8;
21219                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21220 52B0           8A46         04            mov	al,4[bp]
21221 52B3           30E4                       xor	ah,ah
21222 52B5           B1                     03  mov	cl,*3
21223 52B7           D3E0                       shl	ax,cl
21224                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21225 52B9           8946         F4            mov	-$C[bp],ax
21226                                           !BCC_EOS
21227                                           ! 2481  for(i=0;i<8;i++)
21228                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21229 52BC           30C0                       xor	al,al
21230 52BE           8846         FF            mov	-1[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2482   {
21234 52C1           E9         01B3            br 	.159
21235                       000052C4            .15A:
21236                                           ! 2483    dest=addr+(i>>1)*80;
21237                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21238 52C4           8A46         FF            mov	al,-1[bp]
21239 52C7           30E4                       xor	ah,ah
21240 52C9           D1E8                       shr	ax,*1
21241                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21242 52CB           B9                   0050  mov	cx,*$50
21243 52CE           F7E9                       imul	cx
21244                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21245                                           ! Debug: expression subtree swapping
21246 52D0           0346         F8            add	ax,-8[bp]
21247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21248 52D3           8946         F6            mov	-$A[bp],ax
21249                                           !BCC_EOS
21250                                           ! 2484    if (i & 1) dest += 0x2000;
21251                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21252 52D6           8A46         FF            mov	al,-1[bp]
21253 52D9           24                     01  and	al,*1
21254 52DB           84C0                       test	al,al
21255 52DD           74           09            je  	.15B
21256                       000052DF            .15C:
21257                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21258 52DF           8B46         F6            mov	ax,-$A[bp]
21259 52E2           05                   2000  add	ax,#$2000
21260 52E5           8946         F6            mov	-$A[bp],ax
21261                                           !BCC_EOS
21262                                           ! 2485    mask = 0x80;
21263                       000052E8            .15B:
21264                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21265 52E8           B0                     80  mov	al,#$80
21266 52EA           8846         FD            mov	-3[bp],al
21267                                           !BCC_EOS
21268                                           ! 2486    if (bpp == 1)
21269                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21270 52ED           8A46         0E            mov	al,$E[bp]
21271 52F0           3C                     01  cmp	al,*1
21272 52F2         0F85         00B3            bne 	.15D
21273                       000052F6            .15E:
21274                                           ! 2487     {
21275                                           ! 2488      if (attr & 0x80)
21276                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21277 52F6           8A46         06            mov	al,6[bp]
21278 52F9           24                     80  and	al,#$80
21279 52FB           84C0                       test	al,al
21280 52FD           74           12            je  	.15F
21281                       000052FF            .160:
21282                                           ! 2489       {
21283                                           ! 2490        data = read_byte(0xb800,dest);
21284                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21285 52FF           FF76         F6            push	-$A[bp]
21286                                           ! Debug: list unsigned int = const $B800 (used reg = )
21287 5302           B8                   B800  mov	ax,#$B800
21288 5305           50                         push	ax
21289                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21290 5306           E8         28A8            call	_read_byte
21291 5309           83C4                   04  add	sp,*4
21292                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21293 530C           8846         FC            mov	-4[bp],al
21294                                           !BCC_EOS
21295                                           ! 2491       }
21296                                           ! 2492      else
21297                                           ! 2493       {
21298 530F           EB           05            jmp .161
21299                       00005311            .15F:
21300                                           ! 2494        data = 0x00;
21301                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21302 5311           30C0                       xor	al,al
21303 5313           8846         FC            mov	-4[bp],al
21304                                           !BCC_EOS
21305                                           ! 2495       }
21306                                           ! 2496      for(j=0;j<8;j++)
21307                       00005316            .161:
21308                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21309 5316           30C0                       xor	al,al
21310 5318           8846         FE            mov	-2[bp],al
21311                                           !BCC_EOS
21312                                           !BCC_EOS
21313                                           ! 2497       {
21314 531B           EB           6F            jmp .164
21315                       0000531D            .165:
21316                                           ! 2498        if (fdata[src+i] & mask)
21317                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21318 531D           8B46         F4            mov	ax,-$C[bp]
21319 5320           0246         FF            add	al,-1[bp]
21320 5323           80D4                   00  adc	ah,*0
21321                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21322 5326           0346         FA            add	ax,-6[bp]
21323 5329           89C3                       mov	bx,ax
21324                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21325 532B           8A07                       mov	al,[bx]
21326 532D           2246         FD            and	al,-3[bp]
21327 5330           84C0                       test	al,al
21328 5332           74           47            je  	.166
21329                       00005334            .167:
21330                                           ! 2499         {
21331                                           ! 2500          if (attr & 0x80)
21332                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21333 5334           8A46         06            mov	al,6[bp]
21334 5337           24                     80  and	al,#$80
21335 5339           84C0                       test	al,al
21336 533B           74           20            je  	.168
21337                       0000533D            .169:
21338                                           ! 2501           {
21339                                           ! 2502            data ^= (attr & 0x01) << (7-j);
21340                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21341 533D           B8                   0007  mov	ax,*7
21342 5340           2A46         FE            sub	al,-2[bp]
21343 5343           80DC                   00  sbb	ah,*0
21344 5346           50                         push	ax
21345                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21346 5347           8A46         06            mov	al,6[bp]
21347 534A           24                     01  and	al,*1
21348                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21349 534C           30E4                       xor	ah,ah
21350 534E           8B4E         F2            mov	cx,-$E[bp]
21351 5351           D3E0                       shl	ax,cl
21352 5353           44                         inc	sp
21353 5354           44                         inc	sp
21354                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21355 5355           3246         FC            xor	al,-4[bp]
21356 5358           8846         FC            mov	-4[bp],al
21357                                           !BCC_EOS
21358                                           ! 2503           }
21359                                           ! 2504          else
21360                                           ! 2505           {
21361 535B           EB           1E            jmp .16A
21362                       0000535D            .168:
21363                                           ! 2506            data |= (attr & 0x01) << (7-j);
21364                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21365 535D           B8                   0007  mov	ax,*7
21366 5360           2A46         FE            sub	al,-2[bp]
21367 5363           80DC                   00  sbb	ah,*0
21368 5366           50                         push	ax
21369                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21370 5367           8A46         06            mov	al,6[bp]
21371 536A           24                     01  and	al,*1
21372                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21373 536C           30E4                       xor	ah,ah
21374 536E           8B4E         F2            mov	cx,-$E[bp]
21375 5371           D3E0                       shl	ax,cl
21376 5373           44                         inc	sp
21377 5374           44                         inc	sp
21378                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21379 5375           0A46         FC            or	al,-4[bp]
21380 5378           8846         FC            mov	-4[bp],al
21381                                           !BCC_EOS
21382                                           ! 2507           }
21383                                           ! 2508         }
21384                       0000537B            .16A:
21385                                           ! 2509        mask >>= 1;
21386                       0000537B            .166:
21387                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21388 537B           8A46         FD            mov	al,-3[bp]
21389 537E           30E4                       xor	ah,ah
21390 5380           D1E8                       shr	ax,*1
21391 5382           8846         FD            mov	-3[bp],al
21392                                           !BCC_EOS
21393                                           ! 2510       }
21394                                           ! 2511      write_byte(0xb800,dest,data);
21395                       00005385            .163:
21396                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21397 5385           8A46         FE            mov	al,-2[bp]
21398 5388           40                         inc	ax
21399 5389           8846         FE            mov	-2[bp],al
21400                       0000538C            .164:
21401                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21402 538C           8A46         FE            mov	al,-2[bp]
21403 538F           3C                     08  cmp	al,*8
21404 5391           72           8A            jb 	.165
21405                       00005393            .16B:
21406                       00005393            .162:
21407                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21408 5393           8A46         FC            mov	al,-4[bp]
21409 5396           30E4                       xor	ah,ah
21410 5398           50                         push	ax
21411                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21412 5399           FF76         F6            push	-$A[bp]
21413                                           ! Debug: list unsigned int = const $B800 (used reg = )
21414 539C           B8                   B800  mov	ax,#$B800
21415 539F           50                         push	ax
21416                                           ! Debug: func () void = write_byte+0 (used reg = )
21417 53A0           E8         2834            call	_write_byte
21418 53A3           83C4                   06  add	sp,*6
21419                                           !BCC_EOS
21420                                           ! 2512     }
21421                                           ! 2513    else
21422                                           ! 2514     {
21423 53A6           E9         00C7            br 	.16C
21424                       000053A9            .15D:
21425                                           ! 2515      while (mask > 0)
21426                                           ! 2516       {
21427 53A9           E9         00BB            br 	.16E
21428                       000053AC            .16F:
21429                                           ! 2517        if (attr & 0x80)
21430                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21431 53AC           8A46         06            mov	al,6[bp]
21432 53AF           24                     80  and	al,#$80
21433 53B1           84C0                       test	al,al
21434 53B3           74           12            je  	.170
21435                       000053B5            .171:
21436                                           ! 2518         {
21437                                           ! 2519          data = read_byte(0xb800,dest);
21438                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21439 53B5           FF76         F6            push	-$A[bp]
21440                                           ! Debug: list unsigned int = const $B800 (used reg = )
21441 53B8           B8                   B800  mov	ax,#$B800
21442 53BB           50                         push	ax
21443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21444 53BC           E8         27F2            call	_read_byte
21445 53BF           83C4                   04  add	sp,*4
21446                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21447 53C2           8846         FC            mov	-4[bp],al
21448                                           !BCC_EOS
21449                                           ! 2520         }
21450                                           ! 2521        else
21451                                           ! 2522         {
21452 53C5           EB           05            jmp .172
21453                       000053C7            .170:
21454                                           ! 2523          data = 0x00;
21455                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21456 53C7           30C0                       xor	al,al
21457 53C9           8846         FC            mov	-4[bp],al
21458                                           !BCC_EOS
21459                                           ! 2524         }
21460                                           ! 2525        for(j=0;j<4;j++)
21461                       000053CC            .172:
21462                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21463 53CC           30C0                       xor	al,al
21464 53CE           8846         FE            mov	-2[bp],al
21465                                           !BCC_EOS
21466                                           !BCC_EOS
21467                                           ! 2526         {
21468 53D1           EB           73            jmp .175
21469                       000053D3            .176:
21470                                           ! 2527          if (fdata[src+i] & mask)
21471                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21472 53D3           8B46         F4            mov	ax,-$C[bp]
21473 53D6           0246         FF            add	al,-1[bp]
21474 53D9           80D4                   00  adc	ah,*0
21475                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21476 53DC           0346         FA            add	ax,-6[bp]
21477 53DF           89C3                       mov	bx,ax
21478                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21479 53E1           8A07                       mov	al,[bx]
21480 53E3           2246         FD            and	al,-3[bp]
21481 53E6           84C0                       test	al,al
21482 53E8           74           4B            je  	.177
21483                       000053EA            .178:
21484                                           ! 2528           {
21485                                           ! 2529            if (attr & 0x80)
21486                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21487 53EA           8A46         06            mov	al,6[bp]
21488 53ED           24                     80  and	al,#$80
21489 53EF           84C0                       test	al,al
21490 53F1           74           22            je  	.179
21491                       000053F3            .17A:
21492                                           ! 2530             {
21493                                           ! 2531              data ^= (attr & 0x03) << ((3-j)*2);
21494                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21495 53F3           B8                   0003  mov	ax,*3
21496 53F6           2A46         FE            sub	al,-2[bp]
21497 53F9           80DC                   00  sbb	ah,*0
21498                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21499 53FC           D1E0                       shl	ax,*1
21500 53FE           50                         push	ax
21501                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21502 53FF           8A46         06            mov	al,6[bp]
21503 5402           24                     03  and	al,*3
21504                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21505 5404           30E4                       xor	ah,ah
21506 5406           8B4E         F2            mov	cx,-$E[bp]
21507 5409           D3E0                       shl	ax,cl
21508 540B           44                         inc	sp
21509 540C           44                         inc	sp
21510                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21511 540D           3246         FC            xor	al,-4[bp]
21512 5410           8846         FC            mov	-4[bp],al
21513                                           !BCC_EOS
21514                                           ! 2532             }
21515                                           ! 2533            else
21516                                           ! 2534             {
21517 5413           EB           20            jmp .17B
21518                       00005415            .179:
21519                                           ! 2535              data |= (attr & 0x03) << ((3-j)*2);
21520                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21521 5415           B8                   0003  mov	ax,*3
21522 5418           2A46         FE            sub	al,-2[bp]
21523 541B           80DC                   00  sbb	ah,*0
21524                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21525 541E           D1E0                       shl	ax,*1
21526 5420           50                         push	ax
21527                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21528 5421           8A46         06            mov	al,6[bp]
21529 5424           24                     03  and	al,*3
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 5426           30E4                       xor	ah,ah
21532 5428           8B4E         F2            mov	cx,-$E[bp]
21533 542B           D3E0                       shl	ax,cl
21534 542D           44                         inc	sp
21535 542E           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 542F           0A46         FC            or	al,-4[bp]
21538 5432           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2536             }
21541                                           ! 2537           }
21542                       00005435            .17B:
21543                                           ! 2538          mask >>= 1;
21544                       00005435            .177:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 5435           8A46         FD            mov	al,-3[bp]
21547 5438           30E4                       xor	ah,ah
21548 543A           D1E8                       shr	ax,*1
21549 543C           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2539         }
21552                                           ! 2540        write_byte(0xb800,dest,data);
21553                       0000543F            .174:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 543F           8A46         FE            mov	al,-2[bp]
21556 5442           40                         inc	ax
21557 5443           8846         FE            mov	-2[bp],al
21558                       00005446            .175:
21559                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21560 5446           8A46         FE            mov	al,-2[bp]
21561 5449           3C                     04  cmp	al,*4
21562 544B           72           86            jb 	.176
21563                       0000544D            .17C:
21564                       0000544D            .173:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 544D           8A46         FC            mov	al,-4[bp]
21567 5450           30E4                       xor	ah,ah
21568 5452           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 5453           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 5456           B8                   B800  mov	ax,#$B800
21573 5459           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 545A           E8         277A            call	_write_byte
21576 545D           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2541        dest += 1;
21579                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21580 5460           8B46         F6            mov	ax,-$A[bp]
21581 5463           40                         inc	ax
21582 5464           8946         F6            mov	-$A[bp],ax
21583                                           !BCC_EOS
21584                                           ! 2542       }
21585                                           ! 2543     }
21586                       00005467            .16E:
21587                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21588 5467           8A46         FD            mov	al,-3[bp]
21589 546A           84C0                       test	al,al
21590 546C         0F85         FF3C            bne 	.16F
21591                       00005470            .17D:
21592                       00005470            .16D:
21593                                           ! 2544   }
21594                       00005470            .16C:
21595                                           ! 2545 }
21596                       00005470            .158:
21597                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21598 5470           8A46         FF            mov	al,-1[bp]
21599 5473           40                         inc	ax
21600 5474           8846         FF            mov	-1[bp],al
21601                       00005477            .159:
21602                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21603 5477           8A46         FF            mov	al,-1[bp]
21604 547A           3C                     08  cmp	al,*8
21605 547C         0F82         FE44            blo 	.15A
21606                       00005480            .17E:
21607                       00005480            .157:
21608 5480           89EC                       mov	sp,bp
21609 5482           5D                         pop	bp
21610 5483           C3                         ret
21611                                           ! 2546 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21612                                           ! Register BX used in function write_gfx_char_cga
21613                                           ! 2547 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21614                       00005484            _write_gfx_char_lin:
21615                                           !BCC_EOS
21616                                           !BCC_EOS
21617                                           !BCC_EOS
21618                                           !BCC_EOS
21619                                           !BCC_EOS
21620                                           ! 2548 {
21621                                           ! 2549  Bit8u i,j,mask,data;
21622                                           !BCC_EOS
21623                                           ! 2550  Bit8u *fdata;
21624                                           !BCC_EOS
21625                                           ! 2551  Bit16u addr,dest,src;
21626                                           !BCC_EOS
21627                                           ! 2552  fdata = &vgafont8;
21628 5484           55                         push	bp
21629 5485           89E5                       mov	bp,sp
21630 5487           83C4                   F4  add	sp,*-$C
21631                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21632 548A           BB                   0F61  mov	bx,#_vgafont8
21633 548D           895E         FA            mov	-6[bp],bx
21634                                           !BCC_EOS
21635                                           ! 2553  addr=xcurs*8+ycurs*nbcols*64;
21636                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21637 5490           8A46         0C            mov	al,$C[bp]
21638 5493           30E4                       xor	ah,ah
21639 5495           89C3                       mov	bx,ax
21640 5497           8A46         0A            mov	al,$A[bp]
21641 549A           30E4                       xor	ah,ah
21642 549C           89D9                       mov	cx,bx
21643 549E           F7E9                       imul	cx
21644                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21645 54A0           B1                     06  mov	cl,*6
21646 54A2           D3E0                       shl	ax,cl
21647 54A4           50                         push	ax
21648                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21649 54A5           8A46         08            mov	al,8[bp]
21650 54A8           30E4                       xor	ah,ah
21651 54AA           B1                     03  mov	cl,*3
21652 54AC           D3E0                       shl	ax,cl
21653                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21654 54AE           0346         F2            add	ax,-$E[bp]
21655 54B1           44                         inc	sp
21656 54B2           44                         inc	sp
21657                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21658 54B3           8946         F8            mov	-8[bp],ax
21659                                           !BCC_EOS
21660                                           ! 2554  src = car * 8;
21661                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21662 54B6           8A46         04            mov	al,4[bp]
21663 54B9           30E4                       xor	ah,ah
21664 54BB           B1                     03  mov	cl,*3
21665 54BD           D3E0                       shl	ax,cl
21666                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21667 54BF           8946         F4            mov	-$C[bp],ax
21668                                           !BCC_EOS
21669                                           ! 2555  for(i=0;i<8;i++)
21670                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21671 54C2           30C0                       xor	al,al
21672 54C4           8846         FF            mov	-1[bp],al
21673                                           !BCC_EOS
21674                                           !BCC_EOS
21675                                           ! 2556   {
21676 54C7           E9         0081            br 	.181
21677                       000054CA            .182:
21678                                           ! 2557    dest=addr+i*nbcols*8;
21679                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21680 54CA           8A46         0C            mov	al,$C[bp]
21681 54CD           30E4                       xor	ah,ah
21682 54CF           89C3                       mov	bx,ax
21683 54D1           8A46         FF            mov	al,-1[bp]
21684 54D4           30E4                       xor	ah,ah
21685 54D6           89D9                       mov	cx,bx
21686 54D8           F7E9                       imul	cx
21687                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21688 54DA           B1                     03  mov	cl,*3
21689 54DC           D3E0                       shl	ax,cl
21690                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21691                                           ! Debug: expression subtree swapping
21692 54DE           0346         F8            add	ax,-8[bp]
21693                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21694 54E1           8946         F6            mov	-$A[bp],ax
21695                                           !BCC_EOS
21696                                           ! 2558    mask = 0x80;
21697                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21698 54E4           B0                     80  mov	al,#$80
21699 54E6           8846         FD            mov	-3[bp],al
21700                                           !BCC_EOS
21701                                           ! 2559    for(j=0;j<8;j++)
21702                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21703 54E9           30C0                       xor	al,al
21704 54EB           8846         FE            mov	-2[bp],al
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           ! 2560     {
21708 54EE           EB           4D            jmp .185
21709                       000054F0            .186:
21710                                           ! 2561      data = 0x00;
21711                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21712 54F0           30C0                       xor	al,al
21713 54F2           8846         FC            mov	-4[bp],al
21714                                           !BCC_EOS
21715                                           ! 2562      if (fdata[src+i] & mask)
21716                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21717 54F5           8B46         F4            mov	ax,-$C[bp]
21718 54F8           0246         FF            add	al,-1[bp]
21719 54FB           80D4                   00  adc	ah,*0
21720                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21721 54FE           0346         FA            add	ax,-6[bp]
21722 5501           89C3                       mov	bx,ax
21723                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21724 5503           8A07                       mov	al,[bx]
21725 5505           2246         FD            and	al,-3[bp]
21726 5508           84C0                       test	al,al
21727 550A           74           06            je  	.187
21728                       0000550C            .188:
21729                                           ! 2563       {
21730                                           ! 2564        data = attr;
21731                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21732 550C           8A46         06            mov	al,6[bp]
21733 550F           8846         FC            mov	-4[bp],al
21734                                           !BCC_EOS
21735                                           ! 2565       }
21736                                           ! 2566      write_byte(0xa000,dest+j,data);
21737                       00005512            .187:
21738                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21739 5512           8A46         FC            mov	al,-4[bp]
21740 5515           30E4                       xor	ah,ah
21741 5517           50                         push	ax
21742                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21743 5518           8B46         F6            mov	ax,-$A[bp]
21744 551B           0246         FE            add	al,-2[bp]
21745 551E           80D4                   00  adc	ah,*0
21746                                           ! Debug: list unsigned int = ax+0 (used reg = )
21747 5521           50                         push	ax
21748                                           ! Debug: list unsigned int = const $A000 (used reg = )
21749 5522           B8                   A000  mov	ax,#$A000
21750 5525           50                         push	ax
21751                                           ! Debug: func () void = write_byte+0 (used reg = )
21752 5526           E8         26AE            call	_write_byte
21753 5529           83C4                   06  add	sp,*6
21754                                           !BCC_EOS
21755                                           ! 2567      mask >>= 1;
21756                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21757 552C           8A46         FD            mov	al,-3[bp]
21758 552F           30E4                       xor	ah,ah
21759 5531           D1E8                       shr	ax,*1
21760 5533           8846         FD            mov	-3[bp],al
21761                                           !BCC_EOS
21762                                           ! 2568     }
21763                                           ! 2569   }
21764                       00005536            .184:
21765                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21766 5536           8A46         FE            mov	al,-2[bp]
21767 5539           40                         inc	ax
21768 553A           8846         FE            mov	-2[bp],al
21769                       0000553D            .185:
21770                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21771 553D           8A46         FE            mov	al,-2[bp]
21772 5540           3C                     08  cmp	al,*8
21773 5542           72           AC            jb 	.186
21774                       00005544            .189:
21775                       00005544            .183:
21776                                           ! 2570 }
21777                       00005544            .180:
21778                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21779 5544           8A46         FF            mov	al,-1[bp]
21780 5547           40                         inc	ax
21781 5548           8846         FF            mov	-1[bp],al
21782                       0000554B            .181:
21783                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21784 554B           8A46         FF            mov	al,-1[bp]
21785 554E           3C                     08  cmp	al,*8
21786 5550         0F82         FF76            blo 	.182
21787                       00005554            .18A:
21788                       00005554            .17F:
21789 5554           89EC                       mov	sp,bp
21790 5556           5D                         pop	bp
21791 5557           C3                         ret
21792                                           ! 2571 static void biosfn_write_char_attr (car,page,attr,count)
21793                                           ! Register BX used in function write_gfx_char_lin
21794                                           ! 2572 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21795                       00005558            _biosfn_write_char_attr:
21796                                           !BCC_EOS
21797                                           !BCC_EOS
21798                                           !BCC_EOS
21799                                           !BCC_EOS
21800                                           ! 2573 {
21801                                           ! 2574  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21802                                           !BCC_EOS
21803                                           ! 2575  Bit16u nbcols,nbrows,address;
21804                                           !BCC_EOS
21805                                           ! 2576  Bit16u cursor,dummy;
21806                                           !BCC_EOS
21807                                           ! 2577  mode=read_byte(0x40,0x49);
21808 5558           55                         push	bp
21809 5559           89E5                       mov	bp,sp
21810 555B           83C4                   F0  add	sp,*-$10
21811                                           ! Debug: list int = const $49 (used reg = )
21812 555E           B8                   0049  mov	ax,*$49
21813 5561           50                         push	ax
21814                                           ! Debug: list int = const $40 (used reg = )
21815 5562           B8                   0040  mov	ax,*$40
21816 5565           50                         push	ax
21817                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21818 5566           E8         2648            call	_read_byte
21819 5569           83C4                   04  add	sp,*4
21820                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21821 556C           8846         FC            mov	-4[bp],al
21822                                           !BCC_EOS
21823                                           ! 2578  line=find_vga_entry(mode);
21824                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21825 556F           8A46         FC            mov	al,-4[bp]
21826 5572           30E4                       xor	ah,ah
21827 5574           50                         push	ax
21828                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21829 5575           E8         254D            call	_find_vga_entry
21830 5578           44                         inc	sp
21831 5579           44                         inc	sp
21832                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21833 557A           8846         FB            mov	-5[bp],al
21834                                           !BCC_EOS
21835                                           ! 2579  if(line==0xFF)return;
21836                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21837 557D           8A46         FB            mov	al,-5[bp]
21838 5580           3C                     FF  cmp	al,#$FF
21839 5582           75           04            jne 	.18B
21840                       00005584            .18C:
21841 5584           89EC                       mov	sp,bp
21842 5586           5D                         pop	bp
21843 5587           C3                         ret
21844                                           !BCC_EOS
21845                                           ! 2580  biosfn_get_cursor_pos(page,&dummy,&cursor);
21846                       00005588            .18B:
21847                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21848 5588           8D5E         F2            lea	bx,-$E[bp]
21849 558B           53                         push	bx
21850                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21851 558C           8D5E         F0            lea	bx,-$10[bp]
21852 558F           53                         push	bx
21853                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21854 5590           8A46         06            mov	al,6[bp]
21855 5593           30E4                       xor	ah,ah
21856 5595           50                         push	ax
21857                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21858 5596           E8         EE7C            call	_biosfn_get_cursor_pos
21859 5599           83C4                   06  add	sp,*6
21860                                           !BCC_EOS
21861                                           ! 2581  xcurs=cursor&0x00ff;ycurs=(cur
21862                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21863 559C           8A46         F2            mov	al,-$E[bp]
21864                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21865 559F           8846         FE            mov	-2[bp],al
21866                                           !BCC_EOS
21867                                           ! 2581 sor&0xff00)>>8;
21868                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21869 55A2           8B46         F2            mov	ax,-$E[bp]
21870 55A5           30C0                       xor	al,al
21871                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21872 55A7           88E0                       mov	al,ah
21873 55A9           30E4                       xor	ah,ah
21874                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21875 55AB           8846         FD            mov	-3[bp],al
21876                                           !BCC_EOS
21877                                           ! 2582  nbrows=read_byte(0x40,0x84)+1;
21878                                           ! Debug: list int = const $84 (used reg = )
21879 55AE           B8                   0084  mov	ax,#$84
21880 55B1           50                         push	ax
21881                                           ! Debug: list int = const $40 (used reg = )
21882 55B2           B8                   0040  mov	ax,*$40
21883 55B5           50                         push	ax
21884                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21885 55B6           E8         25F8            call	_read_byte
21886 55B9           83C4                   04  add	sp,*4
21887                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21888 55BC           30E4                       xor	ah,ah
21889                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21890 55BE           40                         inc	ax
21891 55BF           8946         F6            mov	-$A[bp],ax
21892                                           !BCC_EOS
21893                                           ! 2583  nbcols=read_word(0x40,0x4A);
21894                                           ! Debug: list int = const $4A (used reg = )
21895 55C2           B8                   004A  mov	ax,*$4A
21896 55C5           50                         push	ax
21897                                           ! Debug: list int = const $40 (used reg = )
21898 55C6           B8                   0040  mov	ax,*$40
21899 55C9           50                         push	ax
21900                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21901 55CA           E8         25F7            call	_read_word
21902 55CD           83C4                   04  add	sp,*4
21903                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21904 55D0           8946         F8            mov	-8[bp],ax
21905                                           !BCC_EOS
21906                                           ! 2584  if(vga_modes[line].class==0x00)
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21908 55D3           8A46         FB            mov	al,-5[bp]
21909 55D6           30E4                       xor	ah,ah
21910 55D8           B1                     03  mov	cl,*3
21911 55DA           D3E0                       shl	ax,cl
21912 55DC           89C3                       mov	bx,ax
21913 55DE           81C3                 01FD  add	bx,#_vga_modes
21914                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21915 55E2           8A47         01            mov	al,1[bx]
21916 55E5           84C0                       test	al,al
21917 55E7           75           6A            jne 	.18D
21918                       000055E9            .18E:
21919                                           ! 2585   {
21920                                           ! 2586    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21921                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21922 55E9           8A46         FD            mov	al,-3[bp]
21923 55EC           30E4                       xor	ah,ah
21924 55EE           8B4E         F8            mov	cx,-8[bp]
21925 55F1           F7E9                       imul	cx
21926                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21927                                           ! Debug: expression subtree swapping
21928 55F3           0246         FE            add	al,-2[bp]
21929 55F6           80D4                   00  adc	ah,*0
21930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21931 55F9           D1E0                       shl	ax,*1
21932 55FB           50                         push	ax
21933                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21934 55FC           8B46         F8            mov	ax,-8[bp]
21935 55FF           8B4E         F6            mov	cx,-$A[bp]
21936 5602           F7E9                       imul	cx
21937                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21938 5604           D1E0                       shl	ax,*1
21939                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21940 5606           0C                     FF  or	al,#$FF
21941                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21942                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21943 5608           89C3                       mov	bx,ax
21944 560A           8A46         06            mov	al,6[bp]
21945 560D           30E4                       xor	ah,ah
21946 560F           93                         xchg	ax,bx
21947 5610           40                         inc	ax
21948 5611           89D9                       mov	cx,bx
21949 5613           F7E9                       imul	cx
21950                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21951 5615           0346         EE            add	ax,-$12[bp]
21952 5618           44                         inc	sp
21953 5619           44                         inc	sp
21954                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21955 561A           8946         F4            mov	-$C[bp],ax
21956                                           !BCC_EOS
21957                                           ! 2587    dummy=((Bit16u)attr<<8)+car;
21958                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21959 561D           8A46         08            mov	al,8[bp]
21960 5620           30E4                       xor	ah,ah
21961                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21962 5622           88C4                       mov	ah,al
21963 5624           30C0                       xor	al,al
21964                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21965 5626           0246         04            add	al,4[bp]
21966 5629           80D4                   00  adc	ah,*0
21967                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21968 562C           8946         F0            mov	-$10[bp],ax
21969                                           !BCC_EOS
21970                                           ! 2588    memsetw(vga_modes[line].sstart,address,dummy,count);
21971                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21972 562F           FF76         0A            push	$A[bp]
21973                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21974 5632           FF76         F0            push	-$10[bp]
21975                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21976 5635           FF76         F4            push	-$C[bp]
21977                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21978 5638           8A46         FB            mov	al,-5[bp]
21979 563B           30E4                       xor	ah,ah
21980 563D           B1                     03  mov	cl,*3
21981 563F           D3E0                       shl	ax,cl
21982 5641           89C3                       mov	bx,ax
21983 5643           81C3                 01FD  add	bx,#_vga_modes
21984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21985 5647           FF77         04            push	4[bx]
21986                                           ! Debug: func () void = memsetw+0 (used reg = )
21987 564A           E8         24DF            call	_memsetw
21988 564D           83C4                   08  add	sp,*8
21989                                           !BCC_EOS
21990                                           ! 2589   }
21991                                           ! 2590  else
21992                                           ! 2591   {
21993 5650           E9         00F3            br 	.18F
21994                       00005653            .18D:
21995                                           ! 2592    cheight=video_param_table[line_to_vpti[line]].cheight;
21996                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21997 5653           8A46         FB            mov	al,-5[bp]
21998 5656           30E4                       xor	ah,ah
21999 5658           89C3                       mov	bx,ax
22000                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22001 565A           8A87       027D            mov	al,_line_to_vpti[bx]
22002 565E           30E4                       xor	ah,ah
22003 5660           B1                     06  mov	cl,*6
22004 5662           D3E0                       shl	ax,cl
22005 5664           89C3                       mov	bx,ax
22006 5666           81C3                 0291  add	bx,#_video_param_table
22007                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22008 566A           8A47         02            mov	al,2[bx]
22009 566D           8846         FF            mov	-1[bp],al
22010                                           !BCC_EOS
22011                                           ! 2593    bpp=vga_modes[line].pixbits;
22012                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22013 5670           8A46         FB            mov	al,-5[bp]
22014 5673           30E4                       xor	ah,ah
22015 5675           B1                     03  mov	cl,*3
22016 5677           D3E0                       shl	ax,cl
22017 5679           89C3                       mov	bx,ax
22018 567B           81C3                 01FD  add	bx,#_vga_modes
22019                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22020 567F           8A47         03            mov	al,3[bx]
22021 5682           8846         FA            mov	-6[bp],al
22022                                           !BCC_EOS
22023                                           ! 2594    while((count-->0) && (xcurs<nbcols))
22024                                           ! 2595     {
22025 5685           E9         00A6            br 	.191
22026                       00005688            .192:
22027                                           ! 2596      switch(vga_modes[line].memmodel)
22028                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22029 5688           8A46         FB            mov	al,-5[bp]
22030 568B           30E4                       xor	ah,ah
22031 568D           B1                     03  mov	cl,*3
22032 568F           D3E0                       shl	ax,cl
22033 5691           89C3                       mov	bx,ax
22034 5693           81C3                 01FD  add	bx,#_vga_modes
22035 5697           8A47         02            mov	al,2[bx]
22036                                           ! 2597       {
22037 569A           EB           77            jmp .195
22038                                           ! 2598        case 0x04:
22039                                           ! 2599        case 0x03:
22040                       0000569C            .196:
22041                                           ! 2600          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22042                       0000569C            .197:
22043                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22044 569C           8A46         FF            mov	al,-1[bp]
22045 569F           30E4                       xor	ah,ah
22046 56A1           50                         push	ax
22047                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22048 56A2           FF76         F8            push	-8[bp]
22049                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22050 56A5           8A46         FD            mov	al,-3[bp]
22051 56A8           30E4                       xor	ah,ah
22052 56AA           50                         push	ax
22053                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22054 56AB           8A46         FE            mov	al,-2[bp]
22055 56AE           30E4                       xor	ah,ah
22056 56B0           50                         push	ax
22057                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22058 56B1           8A46         08            mov	al,8[bp]
22059 56B4           30E4                       xor	ah,ah
22060 56B6           50                         push	ax
22061                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22062 56B7           8A46         04            mov	al,4[bp]
22063 56BA           30E4                       xor	ah,ah
22064 56BC           50                         push	ax
22065                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22066 56BD           E8         FA4E            call	_write_gfx_char_pl4
22067 56C0           83C4                   0C  add	sp,*$C
22068                                           !BCC_EOS
22069                                           ! 2601          break;
22070 56C3           EB           62            jmp .193
22071                                           !BCC_EOS
22072                                           ! 2602        case 0x02:
22073                                           ! 2603          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22074                       000056C5            .198:
22075                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22076 56C5           8A46         FA            mov	al,-6[bp]
22077 56C8           30E4                       xor	ah,ah
22078 56CA           50                         push	ax
22079                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22080 56CB           FF76         F8            push	-8[bp]
22081                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22082 56CE           8A46         FD            mov	al,-3[bp]
22083 56D1           30E4                       xor	ah,ah
22084 56D3           50                         push	ax
22085                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22086 56D4           8A46         FE            mov	al,-2[bp]
22087 56D7           30E4                       xor	ah,ah
22088 56D9           50                         push	ax
22089                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22090 56DA           8A46         08            mov	al,8[bp]
22091 56DD           30E4                       xor	ah,ah
22092 56DF           50                         push	ax
22093                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22094 56E0           8A46         04            mov	al,4[bp]
22095 56E3           30E4                       xor	ah,ah
22096 56E5           50                         push	ax
22097                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22098 56E6           E8         FB98            call	_write_gfx_char_cga
22099 56E9           83C4                   0C  add	sp,*$C
22100                                           !BCC_EOS
22101                                           ! 2604          break;
22102 56EC           EB           39            jmp .193
22103                                           !BCC_EOS
22104                                           ! 2605        case 0x05:
22105                                           ! 2606          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22106                       000056EE            .199:
22107                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22108 56EE           FF76         F8            push	-8[bp]
22109                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22110 56F1           8A46         FD            mov	al,-3[bp]
22111 56F4           30E4                       xor	ah,ah
22112 56F6           50                         push	ax
22113                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22114 56F7           8A46         FE            mov	al,-2[bp]
22115 56FA           30E4                       xor	ah,ah
22116 56FC           50                         push	ax
22117                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22118 56FD           8A46         08            mov	al,8[bp]
22119 5700           30E4                       xor	ah,ah
22120 5702           50                         push	ax
22121                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22122 5703           8A46         04            mov	al,4[bp]
22123 5706           30E4                       xor	ah,ah
22124 5708           50                         push	ax
22125                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22126 5709           E8         FD78            call	_write_gfx_char_lin
22127 570C           83C4                   0A  add	sp,*$A
22128                                           !BCC_EOS
22129                                           ! 2607          break;
22130 570F           EB           16            jmp .193
22131                                           !BCC_EOS
22132                                           ! 2608       }
22133                                           ! 2609      xcurs++;
22134 5711           EB           14            jmp .193
22135                       00005713            .195:
22136 5713           2C                     02  sub	al,*2
22137 5715           74           AE            je 	.198
22138 5717           2C                     01  sub	al,*1
22139 5719         0F84         FF7F            beq 	.197
22140 571D           2C                     01  sub	al,*1
22141 571F         0F84         FF79            beq 	.196
22142 5723           2C                     01  sub	al,*1
22143 5725           74           C7            je 	.199
22144                       00005727            .193:
22145                       FFFFFFEE            ..FFFA	=	-$12
22146                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22147 5727           8A46         FE            mov	al,-2[bp]
22148 572A           40                         inc	ax
22149 572B           8846         FE            mov	-2[bp],al
22150                                           !BCC_EOS
22151                                           ! 2610     }
22152                                           ! 2611   }
22153                       0000572E            .191:
22154                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22155 572E           8B46         0A            mov	ax,$A[bp]
22156 5731           48                         dec	ax
22157 5732           8946         0A            mov	$A[bp],ax
22158                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22159 5735           3D                   FFFF  cmp	ax,*-1
22160 5738           74           0C            je  	.19A
22161                       0000573A            .19B:
22162                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22163 573A           8A46         FE            mov	al,-2[bp]
22164 573D           30E4                       xor	ah,ah
22165 573F           3B46         F8            cmp	ax,-8[bp]
22166 5742         0F82         FF42            blo 	.192
22167                       00005746            .19A:
22168                       00005746            .190:
22169                                           ! 2612 }
22170                       00005746            .18F:
22171 5746           89EC                       mov	sp,bp
22172 5748           5D                         pop	bp
22173 5749           C3                         ret
22174                                           ! 2613 static void biosfn_write_char_only (car,page,attr,count)
22175                                           ! Register BX used in function biosfn_write_char_attr
22176                                           ! 2614 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22177                       0000574A            _biosfn_write_char_only:
22178                                           !BCC_EOS
22179                                           !BCC_EOS
22180                                           !BCC_EOS
22181                                           !BCC_EOS
22182                                           ! 2615 {
22183                                           ! 2616  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22184                                           !BCC_EOS
22185                                           ! 2617  Bit16u nbcols,nbrows,address;
22186                                           !BCC_EOS
22187                                           ! 2618  Bit16u cursor,dummy;
22188                                           !BCC_EOS
22189                                           ! 2619  mode=read_byte(0x40,0x49);
22190 574A           55                         push	bp
22191 574B           89E5                       mov	bp,sp
22192 574D           83C4                   F0  add	sp,*-$10
22193                                           ! Debug: list int = const $49 (used reg = )
22194 5750           B8                   0049  mov	ax,*$49
22195 5753           50                         push	ax
22196                                           ! Debug: list int = const $40 (used reg = )
22197 5754           B8                   0040  mov	ax,*$40
22198 5757           50                         push	ax
22199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22200 5758           E8         2456            call	_read_byte
22201 575B           83C4                   04  add	sp,*4
22202                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22203 575E           8846         FC            mov	-4[bp],al
22204                                           !BCC_EOS
22205                                           ! 2620  line=find_vga_entry(mode);
22206                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22207 5761           8A46         FC            mov	al,-4[bp]
22208 5764           30E4                       xor	ah,ah
22209 5766           50                         push	ax
22210                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22211 5767           E8         235B            call	_find_vga_entry
22212 576A           44                         inc	sp
22213 576B           44                         inc	sp
22214                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22215 576C           8846         FB            mov	-5[bp],al
22216                                           !BCC_EOS
22217                                           ! 2621  if(line==0xFF)return;
22218                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22219 576F           8A46         FB            mov	al,-5[bp]
22220 5772           3C                     FF  cmp	al,#$FF
22221 5774           75           04            jne 	.19C
22222                       00005776            .19D:
22223 5776           89EC                       mov	sp,bp
22224 5778           5D                         pop	bp
22225 5779           C3                         ret
22226                                           !BCC_EOS
22227                                           ! 2622  biosfn_get_cursor_pos(page,&dummy,&cursor);
22228                       0000577A            .19C:
22229                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22230 577A           8D5E         F2            lea	bx,-$E[bp]
22231 577D           53                         push	bx
22232                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22233 577E           8D5E         F0            lea	bx,-$10[bp]
22234 5781           53                         push	bx
22235                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22236 5782           8A46         06            mov	al,6[bp]
22237 5785           30E4                       xor	ah,ah
22238 5787           50                         push	ax
22239                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22240 5788           E8         EC8A            call	_biosfn_get_cursor_pos
22241 578B           83C4                   06  add	sp,*6
22242                                           !BCC_EOS
22243                                           ! 2623  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22244                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22245 578E           8A46         F2            mov	al,-$E[bp]
22246                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22247 5791           8846         FE            mov	-2[bp],al
22248                                           !BCC_EOS
22249                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22250 5794           8B46         F2            mov	ax,-$E[bp]
22251 5797           30C0                       xor	al,al
22252                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22253 5799           88E0                       mov	al,ah
22254 579B           30E4                       xor	ah,ah
22255                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22256 579D           8846         FD            mov	-3[bp],al
22257                                           !BCC_EOS
22258                                           ! 2624  nbrows=read_byte(0x40,0x84)+1;
22259                                           ! Debug: list int = const $84 (used reg = )
22260 57A0           B8                   0084  mov	ax,#$84
22261 57A3           50                         push	ax
22262                                           ! Debug: list int = const $40 (used reg = )
22263 57A4           B8                   0040  mov	ax,*$40
22264 57A7           50                         push	ax
22265                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22266 57A8           E8         2406            call	_read_byte
22267 57AB           83C4                   04  add	sp,*4
22268                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22269 57AE           30E4                       xor	ah,ah
22270                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22271 57B0           40                         inc	ax
22272 57B1           8946         F6            mov	-$A[bp],ax
22273                                           !BCC_EOS
22274                                           ! 2625  nbcols=read_word(0x40,0x4A);
22275                                           ! Debug: list int = const $4A (used reg = )
22276 57B4           B8                   004A  mov	ax,*$4A
22277 57B7           50                         push	ax
22278                                           ! Debug: list int = const $40 (used reg = )
22279 57B8           B8                   0040  mov	ax,*$40
22280 57BB           50                         push	ax
22281                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22282 57BC           E8         2405            call	_read_word
22283 57BF           83C4                   04  add	sp,*4
22284                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22285 57C2           8946         F8            mov	-8[bp],ax
22286                                           !BCC_EOS
22287                                           ! 2626  if(vga_modes[line].class==0x00)
22288                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22289 57C5           8A46         FB            mov	al,-5[bp]
22290 57C8           30E4                       xor	ah,ah
22291 57CA           B1                     03  mov	cl,*3
22292 57CC           D3E0                       shl	ax,cl
22293 57CE           89C3                       mov	bx,ax
22294 57D0           81C3                 01FD  add	bx,#_vga_modes
22295                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22296 57D4           8A47         01            mov	al,1[bx]
22297 57D7           84C0                       test	al,al
22298 57D9           75           6E            jne 	.19E
22299                       000057DB            .19F:
22300                                           ! 2627   {
22301                                           ! 2628    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22302                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22303 57DB           8A46         FD            mov	al,-3[bp]
22304 57DE           30E4                       xor	ah,ah
22305 57E0           8B4E         F8            mov	cx,-8[bp]
22306 57E3           F7E9                       imul	cx
22307                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22308                                           ! Debug: expression subtree swapping
22309 57E5           0246         FE            add	al,-2[bp]
22310 57E8           80D4                   00  adc	ah,*0
22311                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22312 57EB           D1E0                       shl	ax,*1
22313 57ED           50                         push	ax
22314                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22315 57EE           8B46         F8            mov	ax,-8[bp]
22316 57F1           8B4E         F6            mov	cx,-$A[bp]
22317 57F4           F7E9                       imul	cx
22318                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22319 57F6           D1E0                       shl	ax,*1
22320                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22321 57F8           0C                     FF  or	al,#$FF
22322                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22323                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22324 57FA           89C3                       mov	bx,ax
22325 57FC           8A46         06            mov	al,6[bp]
22326 57FF           30E4                       xor	ah,ah
22327 5801           93                         xchg	ax,bx
22328 5802           40                         inc	ax
22329 5803           89D9                       mov	cx,bx
22330 5805           F7E9                       imul	cx
22331                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22332 5807           0346         EE            add	ax,-$12[bp]
22333 580A           44                         inc	sp
22334 580B           44                         inc	sp
22335                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22336 580C           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2629    while(count-->0)
22339                                           ! 2630     {write_byte(vga_modes[line].sstart,address,car);
22340 580F           EB           29            jmp .1A1
22341                       00005811            .1A2:
22342                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22343 5811           8A46         04            mov	al,4[bp]
22344 5814           30E4                       xor	ah,ah
22345 5816           50                         push	ax
22346                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22347 5817           FF76         F4            push	-$C[bp]
22348                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22349 581A           8A46         FB            mov	al,-5[bp]
22350 581D           30E4                       xor	ah,ah
22351 581F           B1                     03  mov	cl,*3
22352 5821           D3E0                       shl	ax,cl
22353 5823           89C3                       mov	bx,ax
22354 5825           81C3                 01FD  add	bx,#_vga_modes
22355                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22356 5829           FF77         04            push	4[bx]
22357                                           ! Debug: func () void = write_byte+0 (used reg = )
22358 582C           E8         23A8            call	_write_byte
22359 582F           83C4                   06  add	sp,*6
22360                                           !BCC_EOS
22361                                           ! 2631      address+=2;
22362                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22363 5832           8B46         F4            mov	ax,-$C[bp]
22364 5835           40                         inc	ax
22365 5836           40                         inc	ax
22366 5837           8946         F4            mov	-$C[bp],ax
22367                                           !BCC_EOS
22368                                           ! 2632     }
22369                                           ! 2633   }
22370                       0000583A            .1A1:
22371                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22372 583A           8B46         0A            mov	ax,$A[bp]
22373 583D           48                         dec	ax
22374 583E           8946         0A            mov	$A[bp],ax
22375                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22376 5841           3D                   FFFF  cmp	ax,*-1
22377 5844           75           CB            jne	.1A2
22378                       00005846            .1A3:
22379                       00005846            .1A0:
22380                                           ! 2634  else
22381                                           ! 2635   {
22382 5846           E9         00F3            br 	.1A4
22383                       00005849            .19E:
22384                                           ! 2636    cheight=video_param_table[line_to_vpti[line]].cheight;
22385                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22386 5849           8A46         FB            mov	al,-5[bp]
22387 584C           30E4                       xor	ah,ah
22388 584E           89C3                       mov	bx,ax
22389                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22390 5850           8A87       027D            mov	al,_line_to_vpti[bx]
22391 5854           30E4                       xor	ah,ah
22392 5856           B1                     06  mov	cl,*6
22393 5858           D3E0                       shl	ax,cl
22394 585A           89C3                       mov	bx,ax
22395 585C           81C3                 0291  add	bx,#_video_param_table
22396                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22397 5860           8A47         02            mov	al,2[bx]
22398 5863           8846         FF            mov	-1[bp],al
22399                                           !BCC_EOS
22400                                           ! 2637    bpp=vga_modes[line].pixbits;
22401                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22402 5866           8A46         FB            mov	al,-5[bp]
22403 5869           30E4                       xor	ah,ah
22404 586B           B1                     03  mov	cl,*3
22405 586D           D3E0                       shl	ax,cl
22406 586F           89C3                       mov	bx,ax
22407 5871           81C3                 01FD  add	bx,#_vga_modes
22408                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22409 5875           8A47         03            mov	al,3[bx]
22410 5878           8846         FA            mov	-6[bp],al
22411                                           !BCC_EOS
22412                                           ! 2638    while((count-->0) && (xcurs<nbcols))
22413                                           ! 2639     {
22414 587B           E9         00A6            br 	.1A6
22415                       0000587E            .1A7:
22416                                           ! 2640      switch(vga_modes[line].memmodel)
22417                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22418 587E           8A46         FB            mov	al,-5[bp]
22419 5881           30E4                       xor	ah,ah
22420 5883           B1                     03  mov	cl,*3
22421 5885           D3E0                       shl	ax,cl
22422 5887           89C3                       mov	bx,ax
22423 5889           81C3                 01FD  add	bx,#_vga_modes
22424 588D           8A47         02            mov	al,2[bx]
22425                                           ! 2641       {
22426 5890           EB           77            jmp .1AA
22427                                           ! 2642        case 0x04:
22428                                           ! 2643        case 0x03:
22429                       00005892            .1AB:
22430                                           ! 2644          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22431                       00005892            .1AC:
22432                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22433 5892           8A46         FF            mov	al,-1[bp]
22434 5895           30E4                       xor	ah,ah
22435 5897           50                         push	ax
22436                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22437 5898           FF76         F8            push	-8[bp]
22438                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22439 589B           8A46         FD            mov	al,-3[bp]
22440 589E           30E4                       xor	ah,ah
22441 58A0           50                         push	ax
22442                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22443 58A1           8A46         FE            mov	al,-2[bp]
22444 58A4           30E4                       xor	ah,ah
22445 58A6           50                         push	ax
22446                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22447 58A7           8A46         08            mov	al,8[bp]
22448 58AA           30E4                       xor	ah,ah
22449 58AC           50                         push	ax
22450                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22451 58AD           8A46         04            mov	al,4[bp]
22452 58B0           30E4                       xor	ah,ah
22453 58B2           50                         push	ax
22454                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22455 58B3           E8         F858            call	_write_gfx_char_pl4
22456 58B6           83C4                   0C  add	sp,*$C
22457                                           !BCC_EOS
22458                                           ! 2645          break;
22459 58B9           EB           62            jmp .1A8
22460                                           !BCC_EOS
22461                                           ! 2646        case 0x02:
22462                                           ! 2647          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22463                       000058BB            .1AD:
22464                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22465 58BB           8A46         FA            mov	al,-6[bp]
22466 58BE           30E4                       xor	ah,ah
22467 58C0           50                         push	ax
22468                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22469 58C1           FF76         F8            push	-8[bp]
22470                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22471 58C4           8A46         FD            mov	al,-3[bp]
22472 58C7           30E4                       xor	ah,ah
22473 58C9           50                         push	ax
22474                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22475 58CA           8A46         FE            mov	al,-2[bp]
22476 58CD           30E4                       xor	ah,ah
22477 58CF           50                         push	ax
22478                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22479 58D0           8A46         08            mov	al,8[bp]
22480 58D3           30E4                       xor	ah,ah
22481 58D5           50                         push	ax
22482                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22483 58D6           8A46         04            mov	al,4[bp]
22484 58D9           30E4                       xor	ah,ah
22485 58DB           50                         push	ax
22486                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22487 58DC           E8         F9A2            call	_write_gfx_char_cga
22488 58DF           83C4                   0C  add	sp,*$C
22489                                           !BCC_EOS
22490                                           ! 2648          break;
22491 58E2           EB           39            jmp .1A8
22492                                           !BCC_EOS
22493                                           ! 2649        case 0x05:
22494                                           ! 2650          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22495                       000058E4            .1AE:
22496                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22497 58E4           FF76         F8            push	-8[bp]
22498                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22499 58E7           8A46         FD            mov	al,-3[bp]
22500 58EA           30E4                       xor	ah,ah
22501 58EC           50                         push	ax
22502                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22503 58ED           8A46         FE            mov	al,-2[bp]
22504 58F0           30E4                       xor	ah,ah
22505 58F2           50                         push	ax
22506                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22507 58F3           8A46         08            mov	al,8[bp]
22508 58F6           30E4                       xor	ah,ah
22509 58F8           50                         push	ax
22510                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22511 58F9           8A46         04            mov	al,4[bp]
22512 58FC           30E4                       xor	ah,ah
22513 58FE           50                         push	ax
22514                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22515 58FF           E8         FB82            call	_write_gfx_char_lin
22516 5902           83C4                   0A  add	sp,*$A
22517                                           !BCC_EOS
22518                                           ! 2651          break;
22519 5905           EB           16            jmp .1A8
22520                                           !BCC_EOS
22521                                           ! 2652       }
22522                                           ! 2653      xcurs++;
22523 5907           EB           14            jmp .1A8
22524                       00005909            .1AA:
22525 5909           2C                     02  sub	al,*2
22526 590B           74           AE            je 	.1AD
22527 590D           2C                     01  sub	al,*1
22528 590F         0F84         FF7F            beq 	.1AC
22529 5913           2C                     01  sub	al,*1
22530 5915         0F84         FF79            beq 	.1AB
22531 5919           2C                     01  sub	al,*1
22532 591B           74           C7            je 	.1AE
22533                       0000591D            .1A8:
22534                       FFFFFFEE            ..FFF9	=	-$12
22535                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22536 591D           8A46         FE            mov	al,-2[bp]
22537 5920           40                         inc	ax
22538 5921           8846         FE            mov	-2[bp],al
22539                                           !BCC_EOS
22540                                           ! 2654     }
22541                                           ! 2655   }
22542                       00005924            .1A6:
22543                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22544 5924           8B46         0A            mov	ax,$A[bp]
22545 5927           48                         dec	ax
22546 5928           8946         0A            mov	$A[bp],ax
22547                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22548 592B           3D                   FFFF  cmp	ax,*-1
22549 592E           74           0C            je  	.1AF
22550                       00005930            .1B0:
22551                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22552 5930           8A46         FE            mov	al,-2[bp]
22553 5933           30E4                       xor	ah,ah
22554 5935           3B46         F8            cmp	ax,-8[bp]
22555 5938         0F82         FF42            blo 	.1A7
22556                       0000593C            .1AF:
22557                       0000593C            .1A5:
22558                                           ! 2656 }
22559                       0000593C            .1A4:
22560 593C           89EC                       mov	sp,bp
22561 593E           5D                         pop	bp
22562 593F           C3                         ret
22563                                           ! 2657 #asm
22564                                           !BCC_ASM
22565                       00000008            _biosfn_write_char_only.count	set	8
22566                       00000006            _biosfn_write_char_only.attr	set	6
22567                       00000004            _biosfn_write_char_only.page	set	4
22568                       00000002            _biosfn_write_char_only.car	set	2
22569                       00005940            biosfn_group_0B:
22570 5940           80FF                   00    cmp bh, #0x00
22571 5943           74           06              je biosfn_set_border_color
22572 5945           80FF                   01    cmp bh, #0x01
22573 5948           74           40              je biosfn_set_palette
22574 594A           C3                           ret
22575                       0000594B            biosfn_set_border_color:
22576 594B           50                           push ax
22577 594C           53                           push bx
22578 594D           51                           push cx
22579 594E           52                           push dx
22580 594F           BA                   03DA    mov dx, # 0x3da
22581 5952           EC                           in al, dx
22582 5953           BA                   03C0    mov dx, # 0x3c0
22583 5956           B0                     00    mov al, #0x00
22584 5958           EE                           out dx, al
22585 5959           88D8                         mov al, bl
22586 595B           24                     0F    and al, #0x0f
22587 595D           A8                     08    test al, #0x08
22588 595F           74           02              jz set_low_border
22589 5961           04                     08    add al, #0x08
22590                       00005963            set_low_border:
22591 5963           EE                           out dx, al
22592 5964           B1                     01    mov cl, #0x01
22593 5966           80E3                   10    and bl, #0x10
22594                       00005969            set_intensity_loop:
22595 5969           BA                   03C0    mov dx, # 0x3c0
22596 596C           88C8                         mov al, cl
22597 596E           EE                           out dx, al
22598 596F           BA                   03C1    mov dx, # 0x3c1
22599 5972           EC                           in al, dx
22600 5973           24                     EF    and al, #0xef
22601 5975           08D8                         or al, bl
22602 5977           BA                   03C0    mov dx, # 0x3c0
22603 597A           EE                           out dx, al
22604 597B           FEC1                         inc cl
22605 597D           80F9                   04    cmp cl, #0x04
22606 5980           75           E7              jne set_intensity_loop
22607 5982           B0                     20    mov al, #0x20
22608 5984           EE                           out dx, al
22609 5985           5A                           pop dx
22610 5986           59                           pop cx
22611 5987           5B                           pop bx
22612 5988           58                           pop ax
22613 5989           C3                           ret
22614                       0000598A            biosfn_set_palette:
22615 598A           50                           push ax
22616 598B           53                           push bx
22617 598C           51                           push cx
22618 598D           52                           push dx
22619 598E           BA                   03DA    mov dx, # 0x3da
22620 5991           EC                           in al, dx
22621 5992           B1                     01    mov cl, #0x01
22622 5994           80E3                   01    and bl, #0x01
22623                       00005997            set_cga_palette_loop:
22624 5997           BA                   03C0    mov dx, # 0x3c0
22625 599A           88C8                         mov al, cl
22626 599C           EE                           out dx, al
22627 599D           BA                   03C1    mov dx, # 0x3c1
22628 59A0           EC                           in al, dx
22629 59A1           24                     FE    and al, #0xfe
22630 59A3           08D8                         or al, bl
22631 59A5           BA                   03C0    mov dx, # 0x3c0
22632 59A8           EE                           out dx, al
22633 59A9           FEC1                         inc cl
22634 59AB           80F9                   04    cmp cl, #0x04
22635 59AE           75           E7              jne set_cga_palette_loop
22636 59B0           B0                     20    mov al, #0x20
22637 59B2           EE                           out dx, al
22638 59B3           5A                           pop dx
22639 59B4           59                           pop cx
22640 59B5           5B                           pop bx
22641 59B6           58                           pop ax
22642 59B7           C3                           ret
22643                                           ! 2732 endasm
22644                                           !BCC_ENDASM
22645                                           ! 2733 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22646                                           ! Register BX used in function biosfn_write_char_only
22647                       000059B8            _biosfn_write_pixel:
22648                                           !BCC_EOS
22649                                           !BCC_EOS
22650                                           !BCC_EOS
22651                                           !BCC_EOS
22652                                           ! 2734 {
22653                                           ! 2735  Bit8u mode,line,mask,attr,data;
22654                                           !BCC_EOS
22655                                           ! 2736  Bit16u addr;
22656                                           !BCC_EOS
22657                                           ! 2737  mode=read_byte(0x40,0x49);
22658 59B8           55                         push	bp
22659 59B9           89E5                       mov	bp,sp
22660 59BB           83C4                   F8  add	sp,*-8
22661                                           ! Debug: list int = const $49 (used reg = )
22662 59BE           B8                   0049  mov	ax,*$49
22663 59C1           50                         push	ax
22664                                           ! Debug: list int = const $40 (used reg = )
22665 59C2           B8                   0040  mov	ax,*$40
22666 59C5           50                         push	ax
22667                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22668 59C6           E8         21E8            call	_read_byte
22669 59C9           83C4                   04  add	sp,*4
22670                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22671 59CC           8846         FF            mov	-1[bp],al
22672                                           !BCC_EOS
22673                                           ! 2738  line=find_vga_entry(mode);
22674                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22675 59CF           8A46         FF            mov	al,-1[bp]
22676 59D2           30E4                       xor	ah,ah
22677 59D4           50                         push	ax
22678                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22679 59D5           E8         20ED            call	_find_vga_entry
22680 59D8           44                         inc	sp
22681 59D9           44                         inc	sp
22682                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22683 59DA           8846         FE            mov	-2[bp],al
22684                                           !BCC_EOS
22685                                           ! 2739  if(line==0xFF)return;
22686                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22687 59DD           8A46         FE            mov	al,-2[bp]
22688 59E0           3C                     FF  cmp	al,#$FF
22689 59E2           75           04            jne 	.1B1
22690                       000059E4            .1B2:
22691 59E4           89EC                       mov	sp,bp
22692 59E6           5D                         pop	bp
22693 59E7           C3                         ret
22694                                           !BCC_EOS
22695                                           ! 2740  if(vga_modes[line].class==0x00)return;
22696                       000059E8            .1B1:
22697                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22698 59E8           8A46         FE            mov	al,-2[bp]
22699 59EB           30E4                       xor	ah,ah
22700 59ED           B1                     03  mov	cl,*3
22701 59EF           D3E0                       shl	ax,cl
22702 59F1           89C3                       mov	bx,ax
22703 59F3           81C3                 01FD  add	bx,#_vga_modes
22704                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22705 59F7           8A47         01            mov	al,1[bx]
22706 59FA           84C0                       test	al,al
22707 59FC           75           04            jne 	.1B3
22708                       000059FE            .1B4:
22709 59FE           89EC                       mov	sp,bp
22710 5A00           5D                         pop	bp
22711 5A01           C3                         ret
22712                                           !BCC_EOS
22713                                           ! 2741  switch(vga_modes[line].memmodel)
22714                       00005A02            .1B3:
22715                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22716 5A02           8A46         FE            mov	al,-2[bp]
22717 5A05           30E4                       xor	ah,ah
22718 5A07           B1                     03  mov	cl,*3
22719 5A09           D3E0                       shl	ax,cl
22720 5A0B           89C3                       mov	bx,ax
22721 5A0D           81C3                 01FD  add	bx,#_vga_modes
22722 5A11           8A47         02            mov	al,2[bx]
22723                                           ! 2742   {
22724 5A14           E9         0223            br 	.1B7
22725                                           ! 2743    case 0x04:
22726                                           ! 2744    case 0x03:
22727                       00005A17            .1B8:
22728                                           ! 2745      addr = CX/8+DX*read_word(0x40,0x4A);
22729                       00005A17            .1B9:
22730                                           ! Debug: list int = const $4A (used reg = )
22731 5A17           B8                   004A  mov	ax,*$4A
22732 5A1A           50                         push	ax
22733                                           ! Debug: list int = const $40 (used reg = )
22734 5A1B           B8                   0040  mov	ax,*$40
22735 5A1E           50                         push	ax
22736                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22737 5A1F           E8         21A2            call	_read_word
22738 5A22           83C4                   04  add	sp,*4
22739                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22740                                           ! Debug: expression subtree swapping
22741 5A25           8B4E         0A            mov	cx,$A[bp]
22742 5A28           F7E9                       imul	cx
22743 5A2A           50                         push	ax
22744                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22745 5A2B           8B46         08            mov	ax,8[bp]
22746 5A2E           B1                     03  mov	cl,*3
22747 5A30           D3E8                       shr	ax,cl
22748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22749 5A32           0346         F6            add	ax,0+..FFF8[bp]
22750 5A35           44                         inc	sp
22751 5A36           44                         inc	sp
22752                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22753 5A37           8946         F8            mov	-8[bp],ax
22754                                           !BCC_EOS
22755                                           ! 2746      mask = 0x80 >> (CX & 0x07);
22756                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22757 5A3A           8A46         08            mov	al,8[bp]
22758 5A3D           24                     07  and	al,*7
22759                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22760 5A3F           30E4                       xor	ah,ah
22761 5A41           89C3                       mov	bx,ax
22762 5A43           B8                   0080  mov	ax,#$80
22763 5A46           89D9                       mov	cx,bx
22764 5A48           D3F8                       sar	ax,cl
22765                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22766 5A4A           8846         FD            mov	-3[bp],al
22767                                           !BCC_EOS
22768                                           ! 2747      outw(0x3ce, (mask << 8) | 0x08);
22769                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22770 5A4D           8A46         FD            mov	al,-3[bp]
22771 5A50           30E4                       xor	ah,ah
22772 5A52           88C4                       mov	ah,al
22773 5A54           30C0                       xor	al,al
22774                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22775 5A56           0C                     08  or	al,*8
22776                                           ! Debug: list unsigned int = ax+0 (used reg = )
22777 5A58           50                         push	ax
22778                                           ! Debug: list int = const $3CE (used reg = )
22779 5A59           B8                   03CE  mov	ax,#$3CE
22780 5A5C           50                         push	ax
22781                                           ! Debug: func () void = outw+0 (used reg = )
22782 5A5D           E8         21CD            call	_outw
22783 5A60           83C4                   04  add	sp,*4
22784                                           !BCC_EOS
22785                                           ! 2748      outw(0x3ce, 0x0205);
22786                                           ! Debug: list int = const $205 (used reg = )
22787 5A63           B8                   0205  mov	ax,#$205
22788 5A66           50                         push	ax
22789                                           ! Debug: list int = const $3CE (used reg = )
22790 5A67           B8                   03CE  mov	ax,#$3CE
22791 5A6A           50                         push	ax
22792                                           ! Debug: func () void = outw+0 (used reg = )
22793 5A6B           E8         21BF            call	_outw
22794 5A6E           83C4                   04  add	sp,*4
22795                                           !BCC_EOS
22796                                           ! 2749      data = read_byte(0xa000,addr);
22797                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22798 5A71           FF76         F8            push	-8[bp]
22799                                           ! Debug: list unsigned int = const $A000 (used reg = )
22800 5A74           B8                   A000  mov	ax,#$A000
22801 5A77           50                         push	ax
22802                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22803 5A78           E8         2136            call	_read_byte
22804 5A7B           83C4                   04  add	sp,*4
22805                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22806 5A7E           8846         FB            mov	-5[bp],al
22807                                           !BCC_EOS
22808                                           ! 2750      if (AL & 0x80)
22809                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22810 5A81           8A46         06            mov	al,6[bp]
22811 5A84           24                     80  and	al,#$80
22812 5A86           84C0                       test	al,al
22813 5A88           74           0E            je  	.1BA
22814                       00005A8A            .1BB:
22815                                           ! 2751       {
22816                                           ! 2752        outw(0x3ce, 0x1803);
22817                                           ! Debug: list int = const $1803 (used reg = )
22818 5A8A           B8                   1803  mov	ax,#$1803
22819 5A8D           50                         push	ax
22820                                           ! Debug: list int = const $3CE (used reg = )
22821 5A8E           B8                   03CE  mov	ax,#$3CE
22822 5A91           50                         push	ax
22823                                           ! Debug: func () void = outw+0 (used reg = )
22824 5A92           E8         2198            call	_outw
22825 5A95           83C4                   04  add	sp,*4
22826                                           !BCC_EOS
22827                                           ! 2753       }
22828                                           ! 2754      write_byte(0xa000,addr,AL);
22829                       00005A98            .1BA:
22830                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22831 5A98           8A46         06            mov	al,6[bp]
22832 5A9B           30E4                       xor	ah,ah
22833 5A9D           50                         push	ax
22834                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22835 5A9E           FF76         F8            push	-8[bp]
22836                                           ! Debug: list unsigned int = const $A000 (used reg = )
22837 5AA1           B8                   A000  mov	ax,#$A000
22838 5AA4           50                         push	ax
22839                                           ! Debug: func () void = write_byte+0 (used reg = )
22840 5AA5           E8         212F            call	_write_byte
22841 5AA8           83C4                   06  add	sp,*6
22842                                           !BCC_EOS
22843                                           ! 2755 #asm
22844                                           !BCC_EOS
22845                                           !BCC_ASM
22846                       0000000C            _biosfn_write_pixel.BH	set	$C
22847                       00000004            .biosfn_write_pixel.BH	set	4
22848                       00000010            _biosfn_write_pixel.CX	set	$10
22849                       00000008            .biosfn_write_pixel.CX	set	8
22850                       00000006            _biosfn_write_pixel.line	set	6
22851                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22852                       0000000E            _biosfn_write_pixel.AL	set	$E
22853                       00000006            .biosfn_write_pixel.AL	set	6
22854                       00000003            _biosfn_write_pixel.data	set	3
22855                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22856                       00000012            _biosfn_write_pixel.DX	set	$12
22857                       0000000A            .biosfn_write_pixel.DX	set	$A
22858                       00000005            _biosfn_write_pixel.mask	set	5
22859                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22860                       00000004            _biosfn_write_pixel.attr	set	4
22861                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22862                       00000007            _biosfn_write_pixel.mode	set	7
22863                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22864                       00000000            _biosfn_write_pixel.addr	set	0
22865                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22866 5AAB           BA                   03CE       mov dx, # 0x3ce
22867 5AAE           B8                   FF08       mov ax, #0xff08
22868 5AB1           EF                              out dx, ax
22869 5AB2           B8                   0005       mov ax, #0x0005
22870 5AB5           EF                              out dx, ax
22871 5AB6           B8                   0003       mov ax, #0x0003
22872 5AB9           EF                              out dx, ax
22873                                           ! 2763 endasm
22874                                           !BCC_ENDASM
22875                                           !BCC_EOS
22876                                           ! 2764      break;
22877 5ABA           E9         0193            br 	.1B5
22878                                           !BCC_EOS
22879                                           ! 2765    case 0x02:
22880                                           ! 2766      if(vga_modes[line].pixbits==2)
22881                       00005ABD            .1BC:
22882                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22883 5ABD           8A46         FE            mov	al,-2[bp]
22884 5AC0           30E4                       xor	ah,ah
22885 5AC2           B1                     03  mov	cl,*3
22886 5AC4           D3E0                       shl	ax,cl
22887 5AC6           89C3                       mov	bx,ax
22888 5AC8           81C3                 01FD  add	bx,#_vga_modes
22889                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22890 5ACC           8A47         03            mov	al,3[bx]
22891 5ACF           3C                     02  cmp	al,*2
22892 5AD1           75           1C            jne 	.1BD
22893                       00005AD3            .1BE:
22894                                           ! 2767       {
22895                                           ! 2768        addr=(CX>>2)+(DX>>1)*80;
22896                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22897 5AD3           8B46         0A            mov	ax,$A[bp]
22898 5AD6           D1E8                       shr	ax,*1
22899                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22900 5AD8           B9                   0050  mov	cx,*$50
22901 5ADB           F7E9                       imul	cx
22902 5ADD           50                         push	ax
22903                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22904 5ADE           8B46         08            mov	ax,8[bp]
22905 5AE1           D1E8                       shr	ax,*1
22906 5AE3           D1E8                       shr	ax,*1
22907                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22908 5AE5           0346         F6            add	ax,0+..FFF8[bp]
22909 5AE8           44                         inc	sp
22910 5AE9           44                         inc	sp
22911                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22912 5AEA           8946         F8            mov	-8[bp],ax
22913                                           !BCC_EOS
22914                                           ! 2769       }
22915                                           ! 2770      else
22916                                           ! 2771       {
22917 5AED           EB           1A            jmp .1BF
22918                       00005AEF            .1BD:
22919                                           ! 2772        addr=(CX>>3)+(DX>>1)*80;
22920                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22921 5AEF           8B46         0A            mov	ax,$A[bp]
22922 5AF2           D1E8                       shr	ax,*1
22923                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22924 5AF4           B9                   0050  mov	cx,*$50
22925 5AF7           F7E9                       imul	cx
22926 5AF9           50                         push	ax
22927                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22928 5AFA           8B46         08            mov	ax,8[bp]
22929 5AFD           B1                     03  mov	cl,*3
22930 5AFF           D3E8                       shr	ax,cl
22931                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22932 5B01           0346         F6            add	ax,0+..FFF8[bp]
22933 5B04           44                         inc	sp
22934 5B05           44                         inc	sp
22935                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22936 5B06           8946         F8            mov	-8[bp],ax
22937                                           !BCC_EOS
22938                                           ! 2773       }
22939                                           ! 2774      if (DX & 1) addr += 0x2000;
22940                       00005B09            .1BF:
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22942 5B09           8A46         0A            mov	al,$A[bp]
22943 5B0C           24                     01  and	al,*1
22944 5B0E           84C0                       test	al,al
22945 5B10           74           09            je  	.1C0
22946                       00005B12            .1C1:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22948 5B12           8B46         F8            mov	ax,-8[bp]
22949 5B15           05                   2000  add	ax,#$2000
22950 5B18           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2775      data = read_byte(0xb800,addr);
22953                       00005B1B            .1C0:
22954                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22955 5B1B           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5B1E           B8                   B800  mov	ax,#$B800
22958 5B21           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5B22           E8         208C            call	_read_byte
22961 5B25           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22963 5B28           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2776      if(vga_modes[line].pixbits==2)
22966                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22967 5B2B           8A46         FE            mov	al,-2[bp]
22968 5B2E           30E4                       xor	ah,ah
22969 5B30           B1                     03  mov	cl,*3
22970 5B32           D3E0                       shl	ax,cl
22971 5B34           89C3                       mov	bx,ax
22972 5B36           81C3                 01FD  add	bx,#_vga_modes
22973                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22974 5B3A           8A47         03            mov	al,3[bx]
22975 5B3D           3C                     02  cmp	al,*2
22976 5B3F           75           46            jne 	.1C2
22977                       00005B41            .1C3:
22978                                           ! 2777       {
22979                                           ! 2778        attr =
22980                                           ! 2778  (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22981                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22982 5B41           8A46         08            mov	al,8[bp]
22983 5B44           24                     03  and	al,*3
22984                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22985 5B46           50                         push	ax
22986 5B47           B8                   0003  mov	ax,*3
22987 5B4A           2A46         F6            sub	al,0+..FFF8[bp]
22988 5B4D           80DC                   00  sbb	ah,*0
22989 5B50           44                         inc	sp
22990 5B51           44                         inc	sp
22991                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22992 5B52           D1E0                       shl	ax,*1
22993 5B54           50                         push	ax
22994                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22995 5B55           8A46         06            mov	al,6[bp]
22996 5B58           24                     03  and	al,*3
22997                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22998 5B5A           30E4                       xor	ah,ah
22999 5B5C           8B4E         F6            mov	cx,0+..FFF8[bp]
23000 5B5F           D3E0                       shl	ax,cl
23001 5B61           44                         inc	sp
23002 5B62           44                         inc	sp
23003                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23004 5B63           8846         FC            mov	-4[bp],al
23005                                           !BCC_EOS
23006                                           ! 2779        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23007                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23008 5B66           8A46         08            mov	al,8[bp]
23009 5B69           24                     03  and	al,*3
23010                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23011 5B6B           50                         push	ax
23012 5B6C           B8                   0003  mov	ax,*3
23013 5B6F           2A46         F6            sub	al,0+..FFF8[bp]
23014 5B72           80DC                   00  sbb	ah,*0
23015 5B75           44                         inc	sp
23016 5B76           44                         inc	sp
23017                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23018 5B77           D1E0                       shl	ax,*1
23019                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23020 5B79           89C3                       mov	bx,ax
23021 5B7B           B8                   0003  mov	ax,*3
23022 5B7E           89D9                       mov	cx,bx
23023 5B80           D3E0                       shl	ax,cl
23024                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23025 5B82           8846         FD            mov	-3[bp],al
23026                                           !BCC_EOS
23027                                           ! 2780       }
23028                                           ! 2781      else
23029                                           ! 2782       {
23030 5B85           EB           40            jmp .1C4
23031                       00005B87            .1C2:
23032                                           ! 2783        attr = (AL & 0x01) << (7 - (CX & 0x07));
23033                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23034 5B87           8A46         08            mov	al,8[bp]
23035 5B8A           24                     07  and	al,*7
23036                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23037 5B8C           50                         push	ax
23038 5B8D           B8                   0007  mov	ax,*7
23039 5B90           2A46         F6            sub	al,0+..FFF8[bp]
23040 5B93           80DC                   00  sbb	ah,*0
23041 5B96           44                         inc	sp
23042 5B97           44                         inc	sp
23043 5B98           50                         push	ax
23044                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23045 5B99           8A46         06            mov	al,6[bp]
23046 5B9C           24                     01  and	al,*1
23047                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23048 5B9E           30E4                       xor	ah,ah
23049 5BA0           8B4E         F6            mov	cx,0+..FFF8[bp]
23050 5BA3           D3E0                       shl	ax,cl
23051 5BA5           44                         inc	sp
23052 5BA6           44                         inc	sp
23053                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23054 5BA7           8846         FC            mov	-4[bp],al
23055                                           !BCC_EOS
23056                                           ! 2784        mask = 0x01 << (7 - (CX & 0x07));
23057                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23058 5BAA           8A46         08            mov	al,8[bp]
23059 5BAD           24                     07  and	al,*7
23060                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23061 5BAF           50                         push	ax
23062 5BB0           B8                   0007  mov	ax,*7
23063 5BB3           2A46         F6            sub	al,0+..FFF8[bp]
23064 5BB6           80DC                   00  sbb	ah,*0
23065 5BB9           44                         inc	sp
23066 5BBA           44                         inc	sp
23067                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23068 5BBB           89C3                       mov	bx,ax
23069 5BBD           B8                   0001  mov	ax,*1
23070 5BC0           89D9                       mov	cx,bx
23071 5BC2           D3E0                       shl	ax,cl
23072                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23073 5BC4           8846         FD            mov	-3[bp],al
23074                                           !BCC_EOS
23075                                           ! 2785       }
23076                                           ! 2786      if (AL & 0x80)
23077                       00005BC7            .1C4:
23078                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23079 5BC7           8A46         06            mov	al,6[bp]
23080 5BCA           24                     80  and	al,#$80
23081 5BCC           84C0                       test	al,al
23082 5BCE           74           0B            je  	.1C5
23083                       00005BD0            .1C6:
23084                                           ! 2787       {
23085                                           ! 2788        data ^= attr;
23086                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23087 5BD0           8A46         FB            mov	al,-5[bp]
23088 5BD3           3246         FC            xor	al,-4[bp]
23089 5BD6           8846         FB            mov	-5[bp],al
23090                                           !BCC_EOS
23091                                           ! 2789       }
23092                                           ! 2790      else
23093                                           ! 2791       {
23094 5BD9           EB           16            jmp .1C7
23095                       00005BDB            .1C5:
23096                                           ! 2792        data &= ~mask;
23097                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23098 5BDB           8A46         FD            mov	al,-3[bp]
23099 5BDE           30E4                       xor	ah,ah
23100 5BE0           F7D0                       not	ax
23101                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23102 5BE2           2246         FB            and	al,-5[bp]
23103 5BE5           8846         FB            mov	-5[bp],al
23104                                           !BCC_EOS
23105                                           ! 2793        data |= attr;
23106                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23107 5BE8           8A46         FB            mov	al,-5[bp]
23108 5BEB           0A46         FC            or	al,-4[bp]
23109 5BEE           8846         FB            mov	-5[bp],al
23110                                           !BCC_EOS
23111                                           ! 2794       }
23112                                           ! 2795      write_byte(0xb800,addr,data);
23113                       00005BF1            .1C7:
23114                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23115 5BF1           8A46         FB            mov	al,-5[bp]
23116 5BF4           30E4                       xor	ah,ah
23117 5BF6           50                         push	ax
23118                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23119 5BF7           FF76         F8            push	-8[bp]
23120                                           ! Debug: list unsigned int = const $B800 (used reg = )
23121 5BFA           B8                   B800  mov	ax,#$B800
23122 5BFD           50                         push	ax
23123                                           ! Debug: func () void = write_byte+0 (used reg = )
23124 5BFE           E8         1FD6            call	_write_byte
23125 5C01           83C4                   06  add	sp,*6
23126                                           !BCC_EOS
23127                                           ! 2796      break;
23128 5C04           EB           4A            jmp .1B5
23129                                           !BCC_EOS
23130                                           ! 2797    case 0x05:
23131                                           ! 2798      addr=CX+DX*(read_word(0x40,0x4A)*8);
23132                       00005C06            .1C8:
23133                                           ! Debug: list int = const $4A (used reg = )
23134 5C06           B8                   004A  mov	ax,*$4A
23135 5C09           50                         push	ax
23136                                           ! Debug: list int = const $40 (used reg = )
23137 5C0A           B8                   0040  mov	ax,*$40
23138 5C0D           50                         push	ax
23139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23140 5C0E           E8         1FB3            call	_read_word
23141 5C11           83C4                   04  add	sp,*4
23142                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23143 5C14           B1                     03  mov	cl,*3
23144 5C16           D3E0                       shl	ax,cl
23145                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23146                                           ! Debug: expression subtree swapping
23147 5C18           8B4E         0A            mov	cx,$A[bp]
23148 5C1B           F7E9                       imul	cx
23149                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23150                                           ! Debug: expression subtree swapping
23151 5C1D           0346         08            add	ax,8[bp]
23152                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23153 5C20           8946         F8            mov	-8[bp],ax
23154                                           !BCC_EOS
23155                                           ! 2799      write_byte(0xa000,addr,AL);
23156                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23157 5C23           8A46         06            mov	al,6[bp]
23158 5C26           30E4                       xor	ah,ah
23159 5C28           50                         push	ax
23160                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23161 5C29           FF76         F8            push	-8[bp]
23162                                           ! Debug: list unsigned int = const $A000 (used reg = )
23163 5C2C           B8                   A000  mov	ax,#$A000
23164 5C2F           50                         push	ax
23165                                           ! Debug: func () void = write_byte+0 (used reg = )
23166 5C30           E8         1FA4            call	_write_byte
23167 5C33           83C4                   06  add	sp,*6
23168                                           !BCC_EOS
23169                                           ! 2800      break;
23170 5C36           EB           18            jmp .1B5
23171                                           !BCC_EOS
23172                                           ! 2801   }
23173                                           ! 2802 }
23174 5C38           EB           16            jmp .1B5
23175                       00005C3A            .1B7:
23176 5C3A           2C                     02  sub	al,*2
23177 5C3C         0F84         FE7D            beq 	.1BC
23178 5C40           2C                     01  sub	al,*1
23179 5C42         0F84         FDD1            beq 	.1B9
23180 5C46           2C                     01  sub	al,*1
23181 5C48         0F84         FDCB            beq 	.1B8
23182 5C4C           2C                     01  sub	al,*1
23183 5C4E           74           B6            je 	.1C8
23184                       00005C50            .1B5:
23185                       FFFFFFF6            ..FFF8	=	-$A
23186 5C50           89EC                       mov	sp,bp
23187 5C52           5D                         pop	bp
23188 5C53           C3                         ret
23189                                           ! 2803 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23190                                           ! Register BX used in function biosfn_write_pixel
23191                       00005C54            _biosfn_read_pixel:
23192                                           !BCC_EOS
23193                                           !BCC_EOS
23194                                           !BCC_EOS
23195                                           !BCC_EOS
23196                                           ! 2804 {
23197                                           ! 2805  Bit8u mode,line,mask,attr,data,i;
23198                                           !BCC_EOS
23199                                           ! 2806  Bit16u addr;
23200                                           !BCC_EOS
23201                                           ! 2807  Bit16u ss=get_SS();
23202 5C54           55                         push	bp
23203 5C55           89E5                       mov	bp,sp
23204 5C57           83C4                   F6  add	sp,*-$A
23205                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23206 5C5A           E8         1FE0            call	_get_SS
23207                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23208 5C5D           8946         F6            mov	-$A[bp],ax
23209                                           !BCC_EOS
23210                                           ! 2808  mode=read_byte(0x40,0x49);
23211                                           ! Debug: list int = const $49 (used reg = )
23212 5C60           B8                   0049  mov	ax,*$49
23213 5C63           50                         push	ax
23214                                           ! Debug: list int = const $40 (used reg = )
23215 5C64           B8                   0040  mov	ax,*$40
23216 5C67           50                         push	ax
23217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23218 5C68           E8         1F46            call	_read_byte
23219 5C6B           83C4                   04  add	sp,*4
23220                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23221 5C6E           8846         FF            mov	-1[bp],al
23222                                           !BCC_EOS
23223                                           ! 2809  line=find_vga_entry(mode);
23224                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23225 5C71           8A46         FF            mov	al,-1[bp]
23226 5C74           30E4                       xor	ah,ah
23227 5C76           50                         push	ax
23228                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23229 5C77           E8         1E4B            call	_find_vga_entry
23230 5C7A           44                         inc	sp
23231 5C7B           44                         inc	sp
23232                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23233 5C7C           8846         FE            mov	-2[bp],al
23234                                           !BCC_EOS
23235                                           ! 2810  if(line==0xFF)return;
23236                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23237 5C7F           8A46         FE            mov	al,-2[bp]
23238 5C82           3C                     FF  cmp	al,#$FF
23239 5C84           75           04            jne 	.1C9
23240                       00005C86            .1CA:
23241 5C86           89EC                       mov	sp,bp
23242 5C88           5D                         pop	bp
23243 5C89           C3                         ret
23244                                           !BCC_EOS
23245                                           ! 2811  if(vga_modes[line].class==0x00)return;
23246                       00005C8A            .1C9:
23247                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23248 5C8A           8A46         FE            mov	al,-2[bp]
23249 5C8D           30E4                       xor	ah,ah
23250 5C8F           B1                     03  mov	cl,*3
23251 5C91           D3E0                       shl	ax,cl
23252 5C93           89C3                       mov	bx,ax
23253 5C95           81C3                 01FD  add	bx,#_vga_modes
23254                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23255 5C99           8A47         01            mov	al,1[bx]
23256 5C9C           84C0                       test	al,al
23257 5C9E           75           04            jne 	.1CB
23258                       00005CA0            .1CC:
23259 5CA0           89EC                       mov	sp,bp
23260 5CA2           5D                         pop	bp
23261 5CA3           C3                         ret
23262                                           !BCC_EOS
23263                                           ! 2812  switch(vga_modes[line].memmodel)
23264                       00005CA4            .1CB:
23265                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23266 5CA4           8A46         FE            mov	al,-2[bp]
23267 5CA7           30E4                       xor	ah,ah
23268 5CA9           B1                     03  mov	cl,*3
23269 5CAB           D3E0                       shl	ax,cl
23270 5CAD           89C3                       mov	bx,ax
23271 5CAF           81C3                 01FD  add	bx,#_vga_modes
23272 5CB3           8A47         02            mov	al,2[bx]
23273                                           ! 2813   {
23274 5CB6           E9         0167            br 	.1CF
23275                                           ! 2814    case 0x04:
23276                                           ! 2815    case 0x03:
23277                       00005CB9            .1D0:
23278                                           ! 2816      addr = CX/8+DX*read_word(0x40,0x4A);
23279                       00005CB9            .1D1:
23280                                           ! Debug: list int = const $4A (used reg = )
23281 5CB9           B8                   004A  mov	ax,*$4A
23282 5CBC           50                         push	ax
23283                                           ! Debug: list int = const $40 (used reg = )
23284 5CBD           B8                   0040  mov	ax,*$40
23285 5CC0           50                         push	ax
23286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23287 5CC1           E8         1F00            call	_read_word
23288 5CC4           83C4                   04  add	sp,*4
23289                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23290                                           ! Debug: expression subtree swapping
23291 5CC7           8B4E         08            mov	cx,8[bp]
23292 5CCA           F7E9                       imul	cx
23293 5CCC           50                         push	ax
23294                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23295 5CCD           8B46         06            mov	ax,6[bp]
23296 5CD0           B1                     03  mov	cl,*3
23297 5CD2           D3E8                       shr	ax,cl
23298                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23299 5CD4           0346         F4            add	ax,0+..FFF7[bp]
23300 5CD7           44                         inc	sp
23301 5CD8           44                         inc	sp
23302                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23303 5CD9           8946         F8            mov	-8[bp],ax
23304                                           !BCC_EOS
23305                                           ! 2817      mask = 0x80 >> (CX & 0x07);
23306                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23307 5CDC           8A46         06            mov	al,6[bp]
23308 5CDF           24                     07  and	al,*7
23309                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23310 5CE1           30E4                       xor	ah,ah
23311 5CE3           89C3                       mov	bx,ax
23312 5CE5           B8                   0080  mov	ax,#$80
23313 5CE8           89D9                       mov	cx,bx
23314 5CEA           D3F8                       sar	ax,cl
23315                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23316 5CEC           8846         FD            mov	-3[bp],al
23317                                           !BCC_EOS
23318                                           ! 2818      attr = 0x00;
23319                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23320 5CEF           30C0                       xor	al,al
23321 5CF1           8846         FC            mov	-4[bp],al
23322                                           !BCC_EOS
23323                                           ! 2819      for(i=0;i<4;i++)
23324                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23325 5CF4           30C0                       xor	al,al
23326 5CF6           8846         FA            mov	-6[bp],al
23327                                           !BCC_EOS
23328                                           !BCC_EOS
23329                                           ! 2820       {
23330 5CF9           EB           4B            jmp .1D4
23331                       00005CFB            .1D5:
23332                                           ! 2821        outw(0x3ce, (i << 8) | 0x04);
23333                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23334 5CFB           8A46         FA            mov	al,-6[bp]
23335 5CFE           30E4                       xor	ah,ah
23336 5D00           88C4                       mov	ah,al
23337 5D02           30C0                       xor	al,al
23338                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23339 5D04           0C                     04  or	al,*4
23340                                           ! Debug: list unsigned int = ax+0 (used reg = )
23341 5D06           50                         push	ax
23342                                           ! Debug: list int = const $3CE (used reg = )
23343 5D07           B8                   03CE  mov	ax,#$3CE
23344 5D0A           50                         push	ax
23345                                           ! Debug: func () void = outw+0 (used reg = )
23346 5D0B           E8         1F1F            call	_outw
23347 5D0E           83C4                   04  add	sp,*4
23348                                           !BCC_EOS
23349                                           ! 2822        data = read_byte(0xa000,addr) & mask;
23350                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23351 5D11           FF76         F8            push	-8[bp]
23352                                           ! Debug: list unsigned int = const $A000 (used reg = )
23353 5D14           B8                   A000  mov	ax,#$A000
23354 5D17           50                         push	ax
23355                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23356 5D18           E8         1E96            call	_read_byte
23357 5D1B           83C4                   04  add	sp,*4
23358                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23359 5D1E           2246         FD            and	al,-3[bp]
23360                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23361 5D21           8846         FB            mov	-5[bp],al
23362                                           !BCC_EOS
23363                                           ! 2823        if (data > 0) attr |= (0x01 << i);
23364                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23365 5D24           8A46         FB            mov	al,-5[bp]
23366 5D27           84C0                       test	al,al
23367 5D29           74           14            je  	.1D6
23368                       00005D2B            .1D7:
23369                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23370 5D2B           8A46         FA            mov	al,-6[bp]
23371 5D2E           30E4                       xor	ah,ah
23372 5D30           89C3                       mov	bx,ax
23373 5D32           B8                   0001  mov	ax,*1
23374 5D35           89D9                       mov	cx,bx
23375 5D37           D3E0                       shl	ax,cl
23376                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23377 5D39           0A46         FC            or	al,-4[bp]
23378 5D3C           8846         FC            mov	-4[bp],al
23379                                           !BCC_EOS
23380                                           ! 2824       }
23381                       00005D3F            .1D6:
23382                                           ! 2825      break;
23383                       00005D3F            .1D3:
23384                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23385 5D3F           8A46         FA            mov	al,-6[bp]
23386 5D42           40                         inc	ax
23387 5D43           8846         FA            mov	-6[bp],al
23388                       00005D46            .1D4:
23389                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23390 5D46           8A46         FA            mov	al,-6[bp]
23391 5D49           3C                     04  cmp	al,*4
23392 5D4B           72           AE            jb 	.1D5
23393                       00005D4D            .1D8:
23394                       00005D4D            .1D2:
23395 5D4D           E9         00E8            br 	.1CD
23396                                           !BCC_EOS
23397                                           ! 2826    case 0x02:
23398                                           ! 2827      addr=(CX>>2)+(DX>>1)*80;
23399                       00005D50            .1D9:
23400                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23401 5D50           8B46         08            mov	ax,8[bp]
23402 5D53           D1E8                       shr	ax,*1
23403                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23404 5D55           B9                   0050  mov	cx,*$50
23405 5D58           F7E9                       imul	cx
23406 5D5A           50                         push	ax
23407                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23408 5D5B           8B46         06            mov	ax,6[bp]
23409 5D5E           D1E8                       shr	ax,*1
23410 5D60           D1E8                       shr	ax,*1
23411                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23412 5D62           0346         F4            add	ax,0+..FFF7[bp]
23413 5D65           44                         inc	sp
23414 5D66           44                         inc	sp
23415                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23416 5D67           8946         F8            mov	-8[bp],ax
23417                                           !BCC_EOS
23418                                           ! 2828      if (DX & 1) addr += 0x2000;
23419                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23420 5D6A           8A46         08            mov	al,8[bp]
23421 5D6D           24                     01  and	al,*1
23422 5D6F           84C0                       test	al,al
23423 5D71           74           09            je  	.1DA
23424                       00005D73            .1DB:
23425                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23426 5D73           8B46         F8            mov	ax,-8[bp]
23427 5D76           05                   2000  add	ax,#$2000
23428 5D79           8946         F8            mov	-8[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2829      data = read_byte(0xb800,addr);
23431                       00005D7C            .1DA:
23432                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23433 5D7C           FF76         F8            push	-8[bp]
23434                                           ! Debug: list unsigned int = const $B800 (used reg = )
23435 5D7F           B8                   B800  mov	ax,#$B800
23436 5D82           50                         push	ax
23437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23438 5D83           E8         1E2B            call	_read_byte
23439 5D86           83C4                   04  add	sp,*4
23440                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5D89           8846         FB            mov	-5[bp],al
23442                                           !BCC_EOS
23443                                           ! 2830      if(vga_modes[line].pixbits==2)
23444                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23445 5D8C           8A46         FE            mov	al,-2[bp]
23446 5D8F           30E4                       xor	ah,ah
23447 5D91           B1                     03  mov	cl,*3
23448 5D93           D3E0                       shl	ax,cl
23449 5D95           89C3                       mov	bx,ax
23450 5D97           81C3                 01FD  add	bx,#_vga_modes
23451                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23452 5D9B           8A47         03            mov	al,3[bx]
23453 5D9E           3C                     02  cmp	al,*2
23454 5DA0           75           25            jne 	.1DC
23455                       00005DA2            .1DD:
23456                                           ! 2831       {
23457                                           ! 2832        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23458                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23459 5DA2           8A46         06            mov	al,6[bp]
23460 5DA5           24                     03  and	al,*3
23461                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23462 5DA7           50                         push	ax
23463 5DA8           B8                   0003  mov	ax,*3
23464 5DAB           2A46         F4            sub	al,0+..FFF7[bp]
23465 5DAE           80DC                   00  sbb	ah,*0
23466 5DB1           44                         inc	sp
23467 5DB2           44                         inc	sp
23468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23469 5DB3           D1E0                       shl	ax,*1
23470                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23471 5DB5           89C3                       mov	bx,ax
23472 5DB7           8A46         FB            mov	al,-5[bp]
23473 5DBA           30E4                       xor	ah,ah
23474 5DBC           89D9                       mov	cx,bx
23475 5DBE           D3E8                       shr	ax,cl
23476                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23477 5DC0           24                     03  and	al,*3
23478                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23479 5DC2           8846         FC            mov	-4[bp],al
23480                                           !BCC_EOS
23481                                           ! 2833       }
23482                                           ! 2834      else
23483                                           ! 2835       {
23484 5DC5           EB           21            jmp .1DE
23485                       00005DC7            .1DC:
23486                                           ! 2836        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23487                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23488 5DC7           8A46         06            mov	al,6[bp]
23489 5DCA           24                     07  and	al,*7
23490                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23491 5DCC           50                         push	ax
23492 5DCD           B8                   0007  mov	ax,*7
23493 5DD0           2A46         F4            sub	al,0+..FFF7[bp]
23494 5DD3           80DC                   00  sbb	ah,*0
23495 5DD6           44                         inc	sp
23496 5DD7           44                         inc	sp
23497                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23498 5DD8           89C3                       mov	bx,ax
23499 5DDA           8A46         FB            mov	al,-5[bp]
23500 5DDD           30E4                       xor	ah,ah
23501 5DDF           89D9                       mov	cx,bx
23502 5DE1           D3E8                       shr	ax,cl
23503                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23504 5DE3           24                     01  and	al,*1
23505                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5DE5           8846         FC            mov	-4[bp],al
23507                                           !BCC_EOS
23508                                           ! 2837       }
23509                                           ! 2838      break;
23510                       00005DE8            .1DE:
23511 5DE8           EB           4E            jmp .1CD
23512                                           !BCC_EOS
23513                                           ! 2839    case 0x05:
23514                                           ! 2840      addr=CX+DX*(read_word(0x40,0x4A)*8);
23515                       00005DEA            .1DF:
23516                                           ! Debug: list int = const $4A (used reg = )
23517 5DEA           B8                   004A  mov	ax,*$4A
23518 5DED           50                         push	ax
23519                                           ! Debug: list int = const $40 (used reg = )
23520 5DEE           B8                   0040  mov	ax,*$40
23521 5DF1           50                         push	ax
23522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23523 5DF2           E8         1DCF            call	_read_word
23524 5DF5           83C4                   04  add	sp,*4
23525                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23526 5DF8           B1                     03  mov	cl,*3
23527 5DFA           D3E0                       shl	ax,cl
23528                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23529                                           ! Debug: expression subtree swapping
23530 5DFC           8B4E         08            mov	cx,8[bp]
23531 5DFF           F7E9                       imul	cx
23532                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23533                                           ! Debug: expression subtree swapping
23534 5E01           0346         06            add	ax,6[bp]
23535                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23536 5E04           8946         F8            mov	-8[bp],ax
23537                                           !BCC_EOS
23538                                           ! 2841      attr=read_byte(0xa000,addr);
23539                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23540 5E07           FF76         F8            push	-8[bp]
23541                                           ! Debug: list unsigned int = const $A000 (used reg = )
23542 5E0A           B8                   A000  mov	ax,#$A000
23543 5E0D           50                         push	ax
23544                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23545 5E0E           E8         1DA0            call	_read_byte
23546 5E11           83C4                   04  add	sp,*4
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23548 5E14           8846         FC            mov	-4[bp],al
23549                                           !BCC_EOS
23550                                           ! 2842      break;
23551 5E17           EB           1F            jmp .1CD
23552                                           !BCC_EOS
23553                                           ! 2843    default:
23554                                           ! 2844      attr = 0;
23555                       00005E19            .1E0:
23556                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23557 5E19           30C0                       xor	al,al
23558 5E1B           8846         FC            mov	-4[bp],al
23559                                           !BCC_EOS
23560                                           ! 2845   }
23561                                           ! 2846  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23562 5E1E           EB           18            jmp .1CD
23563                       00005E20            .1CF:
23564 5E20           2C                     02  sub	al,*2
23565 5E22         0F84         FF2A            beq 	.1D9
23566 5E26           2C                     01  sub	al,*1
23567 5E28         0F84         FE8D            beq 	.1D1
23568 5E2C           2C                     01  sub	al,*1
23569 5E2E         0F84         FE87            beq 	.1D0
23570 5E32           2C                     01  sub	al,*1
23571 5E34           74           B4            je 	.1DF
23572 5E36           EB           E1            jmp	.1E0
23573                       00005E38            .1CD:
23574                       FFFFFFF4            ..FFF7	=	-$C
23575                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23576 5E38           FF76         0A            push	$A[bp]
23577                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23578 5E3B           FF76         F6            push	-$A[bp]
23579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23580 5E3E           E8         1D83            call	_read_word
23581 5E41           83C4                   04  add	sp,*4
23582                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23583 5E44           30C0                       xor	al,al
23584                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23585 5E46           0A46         FC            or	al,-4[bp]
23586                                           ! Debug: list unsigned int = ax+0 (used reg = )
23587 5E49           50                         push	ax
23588                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23589 5E4A           FF76         0A            push	$A[bp]
23590                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23591 5E4D           FF76         F6            push	-$A[bp]
23592                                           ! Debug: func () void = write_word+0 (used reg = )
23593 5E50           E8         1D9C            call	_write_word
23594 5E53           83C4                   06  add	sp,*6
23595                                           !BCC_EOS
23596                                           ! 2847 }
23597 5E56           89EC                       mov	sp,bp
23598 5E58           5D                         pop	bp
23599 5E59           C3                         ret
23600                                           ! 2848 static void biosfn_write_teletype (car, page, attr, flag)
23601                                           ! Register BX used in function biosfn_read_pixel
23602                                           ! 2849 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23603                       00005E5A            _biosfn_write_teletype:
23604                                           !BCC_EOS
23605                                           !BCC_EOS
23606                                           !BCC_EOS
23607                                           !BCC_EOS
23608                                           ! 2850 {
23609                                           ! 2851  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23610                                           !BCC_EOS
23611                                           ! 2852  Bit16u nbcols,nbrows,address;
23612                                           !BCC_EOS
23613                                           ! 2853  Bit16u cursor,dummy;
23614                                           !BCC_EOS
23615                                           ! 2854  if(page==0xff)
23616 5E5A           55                         push	bp
23617 5E5B           89E5                       mov	bp,sp
23618 5E5D           83C4                   F0  add	sp,*-$10
23619                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23620 5E60           8A46         06            mov	al,6[bp]
23621 5E63           3C                     FF  cmp	al,#$FF
23622 5E65           75           11            jne 	.1E1
23623                       00005E67            .1E2:
23624                                           ! 2855   page=read_byte(0x40,0x62);
23625                                           ! Debug: list int = const $62 (used reg = )
23626 5E67           B8                   0062  mov	ax,*$62
23627 5E6A           50                         push	ax
23628                                           ! Debug: list int = const $40 (used reg = )
23629 5E6B           B8                   0040  mov	ax,*$40
23630 5E6E           50                         push	ax
23631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23632 5E6F           E8         1D3F            call	_read_byte
23633 5E72           83C4                   04  add	sp,*4
23634                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23635 5E75           8846         06            mov	6[bp],al
23636                                           !BCC_EOS
23637                                           ! 2856  mode=read_byte(0x40,0x49);
23638                       00005E78            .1E1:
23639                                           ! Debug: list int = const $49 (used reg = )
23640 5E78           B8                   0049  mov	ax,*$49
23641 5E7B           50                         push	ax
23642                                           ! Debug: list int = const $40 (used reg = )
23643 5E7C           B8                   0040  mov	ax,*$40
23644 5E7F           50                         push	ax
23645                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23646 5E80           E8         1D2E            call	_read_byte
23647 5E83           83C4                   04  add	sp,*4
23648                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23649 5E86           8846         FC            mov	-4[bp],al
23650                                           !BCC_EOS
23651                                           ! 2857  line=find_vga_entry(mode);
23652                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23653 5E89           8A46         FC            mov	al,-4[bp]
23654 5E8C           30E4                       xor	ah,ah
23655 5E8E           50                         push	ax
23656                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23657 5E8F           E8         1C33            call	_find_vga_entry
23658 5E92           44                         inc	sp
23659 5E93           44                         inc	sp
23660                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23661 5E94           8846         FB            mov	-5[bp],al
23662                                           !BCC_EOS
23663                                           ! 2858  if(line==0xFF)return;
23664                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23665 5E97           8A46         FB            mov	al,-5[bp]
23666 5E9A           3C                     FF  cmp	al,#$FF
23667 5E9C           75           04            jne 	.1E3
23668                       00005E9E            .1E4:
23669 5E9E           89EC                       mov	sp,bp
23670 5EA0           5D                         pop	bp
23671 5EA1           C3                         ret
23672                                           !BCC_EOS
23673                                           ! 2859  biosfn_get_cursor_pos(page,&dummy,&cursor);
23674                       00005EA2            .1E3:
23675                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23676 5EA2           8D5E         F2            lea	bx,-$E[bp]
23677 5EA5           53                         push	bx
23678                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23679 5EA6           8D5E         F0            lea	bx,-$10[bp]
23680 5EA9           53                         push	bx
23681                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23682 5EAA           8A46         06            mov	al,6[bp]
23683 5EAD           30E4                       xor	ah,ah
23684 5EAF           50                         push	ax
23685                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23686 5EB0           E8         E562            call	_biosfn_get_cursor_pos
23687 5EB3           83C4                   06  add	sp,*6
23688                                           !BCC_EOS
23689                                           ! 2860  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23690                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23691 5EB6           8A46         F2            mov	al,-$E[bp]
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23693 5EB9           8846         FE            mov	-2[bp],al
23694                                           !BCC_EOS
23695                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23696 5EBC           8B46         F2            mov	ax,-$E[bp]
23697 5EBF           30C0                       xor	al,al
23698                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23699 5EC1           88E0                       mov	al,ah
23700 5EC3           30E4                       xor	ah,ah
23701                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23702 5EC5           8846         FD            mov	-3[bp],al
23703                                           !BCC_EOS
23704                                           ! 2861  nbrows=read_byte(0x40,0x84)+1;
23705                                           ! Debug: list int = const $84 (used reg = )
23706 5EC8           B8                   0084  mov	ax,#$84
23707 5ECB           50                         push	ax
23708                                           ! Debug: list int = const $40 (used reg = )
23709 5ECC           B8                   0040  mov	ax,*$40
23710 5ECF           50                         push	ax
23711                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23712 5ED0           E8         1CDE            call	_read_byte
23713 5ED3           83C4                   04  add	sp,*4
23714                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23715 5ED6           30E4                       xor	ah,ah
23716                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23717 5ED8           40                         inc	ax
23718 5ED9           8946         F6            mov	-$A[bp],ax
23719                                           !BCC_EOS
23720                                           ! 2862  n
23721                                           ! 2862 bcols=read_word(0x40,0x4A);
23722                                           ! Debug: list int = const $4A (used reg = )
23723 5EDC           B8                   004A  mov	ax,*$4A
23724 5EDF           50                         push	ax
23725                                           ! Debug: list int = const $40 (used reg = )
23726 5EE0           B8                   0040  mov	ax,*$40
23727 5EE3           50                         push	ax
23728                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23729 5EE4           E8         1CDD            call	_read_word
23730 5EE7           83C4                   04  add	sp,*4
23731                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23732 5EEA           8946         F8            mov	-8[bp],ax
23733                                           !BCC_EOS
23734                                           ! 2863  switch(car)
23735 5EED           8A46         04            mov	al,4[bp]
23736                                           ! 2864   {
23737 5EF0           E9         01EA            br 	.1E7
23738                                           ! 2865    case 7:
23739                                           ! 2866     break;
23740                       00005EF3            .1E8:
23741 5EF3           E9         0208            br 	.1E5
23742                                           !BCC_EOS
23743                                           ! 2867    case 8:
23744                                           ! 2868     if(xcurs>0)xcurs--;
23745                       00005EF6            .1E9:
23746                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23747 5EF6           8A46         FE            mov	al,-2[bp]
23748 5EF9           84C0                       test	al,al
23749 5EFB           74           07            je  	.1EA
23750                       00005EFD            .1EB:
23751                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23752 5EFD           8A46         FE            mov	al,-2[bp]
23753 5F00           48                         dec	ax
23754 5F01           8846         FE            mov	-2[bp],al
23755                                           !BCC_EOS
23756                                           ! 2869     break;
23757                       00005F04            .1EA:
23758 5F04           E9         01F7            br 	.1E5
23759                                           !BCC_EOS
23760                                           ! 2870    case '\r':
23761                                           ! 2871     xcurs=0;
23762                       00005F07            .1EC:
23763                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23764 5F07           30C0                       xor	al,al
23765 5F09           8846         FE            mov	-2[bp],al
23766                                           !BCC_EOS
23767                                           ! 2872     break;
23768 5F0C           E9         01EF            br 	.1E5
23769                                           !BCC_EOS
23770                                           ! 2873    case '\n':
23771                                           ! 2874     ycurs++;
23772                       00005F0F            .1ED:
23773                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23774 5F0F           8A46         FD            mov	al,-3[bp]
23775 5F12           40                         inc	ax
23776 5F13           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2875     break;
23779 5F16           E9         01E5            br 	.1E5
23780                                           !BCC_EOS
23781                                           ! 2876    case '\t':
23782                                           ! 2877     do
23783                       00005F19            .1EE:
23784                                           ! 2878      {
23785                       00005F19            .1F1:
23786                                           ! 2879       biosfn_write_teletype(' ',page,attr,flag);
23787                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23788 5F19           8A46         0A            mov	al,$A[bp]
23789 5F1C           30E4                       xor	ah,ah
23790 5F1E           50                         push	ax
23791                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23792 5F1F           8A46         08            mov	al,8[bp]
23793 5F22           30E4                       xor	ah,ah
23794 5F24           50                         push	ax
23795                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23796 5F25           8A46         06            mov	al,6[bp]
23797 5F28           30E4                       xor	ah,ah
23798 5F2A           50                         push	ax
23799                                           ! Debug: list int = const $20 (used reg = )
23800 5F2B           B8                   0020  mov	ax,*$20
23801 5F2E           50                         push	ax
23802                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23803 5F2F           E8         FF28            call	_biosfn_write_teletype
23804 5F32           83C4                   08  add	sp,*8
23805                                           !BCC_EOS
23806                                           ! 2880       biosfn_get_cursor_pos(page,&dummy,&cursor);
23807                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23808 5F35           8D5E         F2            lea	bx,-$E[bp]
23809 5F38           53                         push	bx
23810                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23811 5F39           8D5E         F0            lea	bx,-$10[bp]
23812 5F3C           53                         push	bx
23813                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23814 5F3D           8A46         06            mov	al,6[bp]
23815 5F40           30E4                       xor	ah,ah
23816 5F42           50                         push	ax
23817                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23818 5F43           E8         E4CF            call	_biosfn_get_cursor_pos
23819 5F46           83C4                   06  add	sp,*6
23820                                           !BCC_EOS
23821                                           ! 2881       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23822                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23823 5F49           8A46         F2            mov	al,-$E[bp]
23824                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23825 5F4C           8846         FE            mov	-2[bp],al
23826                                           !BCC_EOS
23827                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23828 5F4F           8B46         F2            mov	ax,-$E[bp]
23829 5F52           30C0                       xor	al,al
23830                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23831 5F54           88E0                       mov	al,ah
23832 5F56           30E4                       xor	ah,ah
23833                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23834 5F58           8846         FD            mov	-3[bp],al
23835                                           !BCC_EOS
23836                                           ! 2882      }while(xcurs%8==0);
23837                       00005F5B            .1F0:
23838                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23839 5F5B           8A46         FE            mov	al,-2[bp]
23840 5F5E           30E4                       xor	ah,ah
23841 5F60           24                     07  and	al,*7
23842                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23843 5F62           84C0                       test	al,al
23844 5F64           74           B3            je 	.1F1
23845                       00005F66            .1F2:
23846                                           !BCC_EOS
23847                                           ! 2883     break;
23848                       00005F66            .1EF:
23849 5F66           E9         0195            br 	.1E5
23850                                           !BCC_EOS
23851                                           ! 2884    default:
23852                                           ! 2885     if(vga_modes[line].class==0x00)
23853                       00005F69            .1F3:
23854                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23855 5F69           8A46         FB            mov	al,-5[bp]
23856 5F6C           30E4                       xor	ah,ah
23857 5F6E           B1                     03  mov	cl,*3
23858 5F70           D3E0                       shl	ax,cl
23859 5F72           89C3                       mov	bx,ax
23860 5F74           81C3                 01FD  add	bx,#_vga_modes
23861                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23862 5F78           8A47         01            mov	al,1[bx]
23863 5F7B           84C0                       test	al,al
23864 5F7D         0F85         0082            bne 	.1F4
23865                       00005F81            .1F5:
23866                                           ! 2886      {
23867                                           ! 2887       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23868                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23869 5F81           8A46         FD            mov	al,-3[bp]
23870 5F84           30E4                       xor	ah,ah
23871 5F86           8B4E         F8            mov	cx,-8[bp]
23872 5F89           F7E9                       imul	cx
23873                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23874                                           ! Debug: expression subtree swapping
23875 5F8B           0246         FE            add	al,-2[bp]
23876 5F8E           80D4                   00  adc	ah,*0
23877                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23878 5F91           D1E0                       shl	ax,*1
23879 5F93           50                         push	ax
23880                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23881 5F94           8B46         F8            mov	ax,-8[bp]
23882 5F97           8B4E         F6            mov	cx,-$A[bp]
23883 5F9A           F7E9                       imul	cx
23884                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23885 5F9C           D1E0                       shl	ax,*1
23886                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23887 5F9E           0C                     FF  or	al,#$FF
23888                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23889                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23890 5FA0           89C3                       mov	bx,ax
23891 5FA2           8A46         06            mov	al,6[bp]
23892 5FA5           30E4                       xor	ah,ah
23893 5FA7           93                         xchg	ax,bx
23894 5FA8           40                         inc	ax
23895 5FA9           89D9                       mov	cx,bx
23896 5FAB           F7E9                       imul	cx
23897                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23898 5FAD           0346         EE            add	ax,0+..FFF6[bp]
23899 5FB0           44                         inc	sp
23900 5FB1           44                         inc	sp
23901                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23902 5FB2           8946         F4            mov	-$C[bp],ax
23903                                           !BCC_EOS
23904                                           ! 2888       write_byte(vga_modes[line].sstart,address,car);
23905                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23906 5FB5           8A46         04            mov	al,4[bp]
23907 5FB8           30E4                       xor	ah,ah
23908 5FBA           50                         push	ax
23909                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23910 5FBB           FF76         F4            push	-$C[bp]
23911                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23912 5FBE           8A46         FB            mov	al,-5[bp]
23913 5FC1           30E4                       xor	ah,ah
23914 5FC3           B1                     03  mov	cl,*3
23915 5FC5           D3E0                       shl	ax,cl
23916 5FC7           89C3                       mov	bx,ax
23917 5FC9           81C3                 01FD  add	bx,#_vga_modes
23918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23919 5FCD           FF77         04            push	4[bx]
23920                                           ! Debug: func () void = write_byte+0 (used reg = )
23921 5FD0           E8         1C04            call	_write_byte
23922 5FD3           83C4                   06  add	sp,*6
23923                                           !BCC_EOS
23924                                           ! 2889       if(flag==3)
23925                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23926 5FD6           8A46         0A            mov	al,$A[bp]
23927 5FD9           3C                     03  cmp	al,*3
23928 5FDB           75           23            jne 	.1F6
23929                       00005FDD            .1F7:
23930                                           ! 2890        write_byte(vga_modes[line].sstart,address+1,attr);
23931                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23932 5FDD           8A46         08            mov	al,8[bp]
23933 5FE0           30E4                       xor	ah,ah
23934 5FE2           50                         push	ax
23935                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23936 5FE3           8B46         F4            mov	ax,-$C[bp]
23937                                           ! Debug: list unsigned int = ax+1 (used reg = )
23938 5FE6           40                         inc	ax
23939 5FE7           50                         push	ax
23940                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23941 5FE8           8A46         FB            mov	al,-5[bp]
23942 5FEB           30E4                       xor	ah,ah
23943 5FED           B1                     03  mov	cl,*3
23944 5FEF           D3E0                       shl	ax,cl
23945 5FF1           89C3                       mov	bx,ax
23946 5FF3           81C3                 01FD  add	bx,#_vga_modes
23947                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23948 5FF7           FF77         04            push	4[bx]
23949                                           ! Debug: func () void = write_byte+0 (used reg = )
23950 5FFA           E8         1BDA            call	_write_byte
23951 5FFD           83C4                   06  add	sp,*6
23952                                           !BCC_EOS
23953                                           ! 2891      }
23954                       00006000            .1F6:
23955                                           ! 2892     else
23956                                           ! 2893      {
23957 6000           E9         00D1            br 	.1F8
23958                       00006003            .1F4:
23959                                           ! 2894       cheight=video_param_table[line_to_vpti[line]].cheight;
23960                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23961 6003           8A46         FB            mov	al,-5[bp]
23962 6006           30E4                       xor	ah,ah
23963 6008           89C3                       mov	bx,ax
23964                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23965 600A           8A87       027D            mov	al,_line_to_vpti[bx]
23966 600E           30E4                       xor	ah,ah
23967 6010           B1                     06  mov	cl,*6
23968 6012           D3E0                       shl	ax,cl
23969 6014           89C3                       mov	bx,ax
23970 6016           81C3                 0291  add	bx,#_video_param_table
23971                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23972 601A           8A47         02            mov	al,2[bx]
23973 601D           8846         FF            mov	-1[bp],al
23974                                           !BCC_EOS
23975                                           ! 2895       bpp=vga_modes[line].pixbits;
23976                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23977 6020           8A46         FB            mov	al,-5[bp]
23978 6023           30E4                       xor	ah,ah
23979 6025           B1                     03  mov	cl,*3
23980 6027           D3E0                       shl	ax,cl
23981 6029           89C3                       mov	bx,ax
23982 602B           81C3                 01FD  add	bx,#_vga_modes
23983                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23984 602F           8A47         03            mov	al,3[bx]
23985 6032           8846         FA            mov	-6[bp],al
23986                                           !BCC_EOS
23987                                           ! 2896       switch(vga_modes[line].memmodel)
23988                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23989 6035           8A46         FB            mov	al,-5[bp]
23990 6038           30E4                       xor	ah,ah
23991 603A           B1                     03  mov	cl,*3
23992 603C           D3E0                       shl	ax,cl
23993 603E           89C3                       mov	bx,ax
23994 6040           81C3                 01FD  add	bx,#_vga_modes
23995 6044           8A47         02            mov	al,2[bx]
23996                                           ! 2897        {
23997 6047           EB           77            jmp .1FB
23998                                           ! 2898         case 0x04:
23999                                           ! 2899         case 0x03:
24000                       00006049            .1FC:
24001                                           ! 2900           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24002                       00006049            .1FD:
24003                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24004 6049           8A46         FF            mov	al,-1[bp]
24005 604C           30E4                       xor	ah,ah
24006 604E           50                         push	ax
24007                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24008 604F           FF76         F8            push	-8[bp]
24009                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24010 6052           8A46         FD            mov	al,-3[bp]
24011 6055           30E4                       xor	ah,ah
24012 6057           50                         push	ax
24013                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24014 6058           8A46         FE            mov	al,-2[bp]
24015 605B           30E4                       xor	ah,ah
24016 605D           50                         push	ax
24017                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24018 605E           8A46         08            mov	al,8[bp]
24019 6061           30E4                       xor	ah,ah
24020 6063           50                         push	ax
24021                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24022 6064           8A46         04            mov	al,4[bp]
24023 6067           30E4                       xor	ah,ah
24024 6069           50                         push	ax
24025                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24026 606A           E8         F0A1            call	_write_gfx_char_pl4
24027 606D           83C4                   0C  add	sp,*$C
24028                                           !BCC_EOS
24029                                           ! 2901           break;
24030 6070           EB           62            jmp .1F9
24031                                           !BCC_EOS
24032                                           ! 2902         case 0x02:
24033                                           ! 2903           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24034                       00006072            .1FE:
24035                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24036 6072           8A46         FA            mov	al,-6[bp]
24037 6075           30E4                       xor	ah,ah
24038 6077           50                         push	ax
24039                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24040 6078           FF76         F8            push	-8[bp]
24041                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24042 607B           8A46         FD            mov	al,-3[bp]
24043 607E           30E4                       xor	ah,ah
24044 6080           50                         push	ax
24045                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24046 6081           8A46         FE            mov	al,-2[bp]
24047 6084           30E4                       xor	ah,ah
24048 6086           50                         push	ax
24049                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24050 6087           8A46         08            mov	al,8[bp]
24051 608A           30E4                       xor	ah,ah
24052 608C           50                         push	ax
24053                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24054 608D           8A46         04            mov	al,4[bp]
24055 6090           30E4                       xor	ah,ah
24056 6092           50                         push	ax
24057                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24058 6093           E8         F1EB            call	_write_gfx_char_cga
24059 6096           83C4                   0C  add	sp,*$C
24060                                           !BCC_EOS
24061                                           ! 2904           break;
24062 6099           EB           39            jmp .1F9
24063                                           !BCC_EOS
24064                                           ! 2905         case 0x05:
24065                                           ! 2906           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24066                       0000609B            .1FF:
24067                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24068 609B           FF76         F8            push	-8[bp]
24069                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24070 609E           8A46         FD            mov	al,-3[bp]
24071 60A1           30E4                       xor	ah,ah
24072 60A3           50                         push	ax
24073                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24074 60A4           8A46         FE            mov	al,-2[bp]
24075 60A7           30E4                       xor	ah,ah
24076 60A9           50                         push	ax
24077                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24078 60AA           8A46         08            mov	al,8[bp]
24079 60AD           30E4                       xor	ah,ah
24080 60AF           50                         push	ax
24081                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24082 60B0           8A46         04            mov	al,4[bp]
24083 60B3           30E4                       xor	ah,ah
24084 60B5           50                         push	ax
24085                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24086 60B6           E8         F3CB            call	_write_gfx_char_lin
24087 60B9           83C4                   0A  add	sp,*$A
24088                                           !BCC_EOS
24089                                           ! 2907           break;
24090 60BC           EB           16            jmp .1F9
24091                                           !BCC_EOS
24092                                           ! 2908        }
24093                                           ! 2909      }
24094 60BE           EB           14            jmp .1F9
24095                       000060C0            .1FB:
24096 60C0           2C                     02  sub	al,*2
24097 60C2           74           AE            je 	.1FE
24098 60C4           2C                     01  sub	al,*1
24099 60C6         0F84         FF7F            beq 	.1FD
24100 60CA           2C                     01  sub	al,*1
24101 60CC         0F84         FF79            beq 	.1FC
24102 60D0           2C                     01  sub	al,*1
24103 60D2           74           C7            je 	.1FF
24104                       000060D4            .1F9:
24105                                           ! 2910     xcurs++;
24106                       000060D4            .1F8:
24107                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24108 60D4           8A46         FE            mov	al,-2[bp]
24109 60D7           40                         inc	ax
24110 60D8           8846         FE            mov	-2[bp],al
24111                                           !BCC_EOS
24112                                           ! 2911   }
24113                                           ! 2912  if(xcurs==nbcols)
24114 60DB           EB           21            jmp .1E5
24115                       000060DD            .1E7:
24116 60DD           2C                     07  sub	al,*7
24117 60DF         0F84         FE10            beq 	.1E8
24118 60E3           2C                     01  sub	al,*1
24119 60E5         0F84         FE0D            beq 	.1E9
24120 60E9           2C                     01  sub	al,*1
24121 60EB         0F84         FE2A            beq 	.1EE
24122 60EF           2C                     01  sub	al,*1
24123 60F1         0F84         FE1A            beq 	.1ED
24124 60F5           2C                     03  sub	al,*3
24125 60F7         0F84         FE0C            beq 	.1EC
24126 60FB           E9         FE6B            br 	.1F3
24127                       000060FE            .1E5:
24128                       FFFFFFEE            ..FFF6	=	-$12
24129                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24130 60FE           8A46         FE            mov	al,-2[bp]
24131 6101           30E4                       xor	ah,ah
24132 6103           3B46         F8            cmp	ax,-8[bp]
24133 6106           75           0C            jne 	.200
24134                       00006108            .201:
24135                                           ! 2913   {xcurs=0;
24136                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24137 6108           30C0                       xor	al,al
24138 610A           8846         FE            mov	-2[bp],al
24139                                           !BCC_EOS
24140                                           ! 2914    ycurs++;
24141                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24142 610D           8A46         FD            mov	al,-3[bp]
24143 6110           40                         inc	ax
24144 6111           8846         FD            mov	-3[bp],al
24145                                           !BCC_EOS
24146                                           ! 2915   }
24147                                           ! 2916  if(ycurs==nbrows)
24148                       00006114            .200:
24149                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24150 6114           8A46         FD            mov	al,-3[bp]
24151 6117           30E4                       xor	ah,ah
24152 6119           3B46         F6            cmp	ax,-$A[bp]
24153 611C         0F85         00C9            bne 	.202
24154                       00006120            .203:
24155                                           ! 2917   {
24156                                           ! 2918    if(vga_modes[line].class==0x00)
24157                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24158 6120           8A46         FB            mov	al,-5[bp]
24159 6123           30E4                       xor	ah,ah
24160 6125           B1                     03  mov	cl,*3
24161 6127           D3E0                       shl	ax,cl
24162 6129           89C3                       mov	bx,ax
24163 612B           81C3                 01FD  add	bx,#_vga_modes
24164                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24165 612F           8A47         01            mov	al,1[bx]
24166 6132           84C0                       test	al,al
24167 6134         0F85         0081            bne 	.204
24168                       00006138            .205:
24169                                           ! 2919     {
24170                                           ! 2920      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24171                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24172 6138           8A46         FD            mov	al,-3[bp]
24173 613B           30E4                       xor	ah,ah
24174                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24175 613D           48                         dec	ax
24176 613E           8B4E         F8            mov	cx,-8[bp]
24177 6141           F7E9                       imul	cx
24178                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24179                                           ! Debug: expression subtree swapping
24180 6143           0246         FE            add	al,-2[bp]
24181 6146           80D4                   00  adc	ah,*0
24182                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24183 6149           D1E0                       shl	ax,*1
24184 614B           50                         push	ax
24185                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24186 614C           8B46         F8            mov	ax,-8[bp]
24187 614F           8B4E         F6            mov	cx,-$A[bp]
24188 6152           F7E9                       imul	cx
24189                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24190 6154           D1E0                       shl	ax,*1
24191                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24192 6156           0C                     FF  or	al,#$FF
24193                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24194                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24195 6158           89C3                       mov	bx,ax
24196 615A           8A46         06            mov	al,6[bp]
24197 615D           30E4                       xor	ah,ah
24198 615F           93                         xchg	ax,bx
24199 6160           40                         inc	ax
24200 6161           89D9                       mov	cx,bx
24201 6163           F7E9                       imul	cx
24202                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24203 6165           0346         EE            add	ax,-$12[bp]
24204 6168           44                         inc	sp
24205 6169           44                         inc	sp
24206                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24207 616A           8946         F4            mov	-$C[bp],ax
24208                                           !BCC_EOS
24209                                           ! 2921      attr=read_byte(vga_modes[line].sstart,address+1);
24210                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24211 616D           8B46         F4            mov	ax,-$C[bp]
24212                                           ! Debug: list unsigned int = ax+1 (used reg = )
24213 6170           40                         inc	ax
24214 6171           50                         push	ax
24215                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24216 6172           8A46         FB            mov	al,-5[bp]
24217 6175           30E4                       xor	ah,ah
24218 6177           B1                     03  mov	cl,*3
24219 6179           D3E0                       shl	ax,cl
24220 617B           89C3                       mov	bx,ax
24221 617D           81C3                 01FD  add	bx,#_vga_modes
24222                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24223 6181           FF77         04            push	4[bx]
24224                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24225 6184           E8         1A2A            call	_read_byte
24226 6187           83C4                   04  add	sp,*4
24227                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24228 618A           8846         08            mov	8[bp],al
24229                                           !BCC_EOS
24230                                           ! 2922      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24231                                           ! Debug: list int = const 1 (used reg = )
24232 618D           B8                   0001  mov	ax,*1
24233 6190           50                         push	ax
24234                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24235 6191           8A46         06            mov	al,6[bp]
24236 6194           30E4                       xor	ah,ah
24237 6196           50                         push	ax
24238                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24239 6197           8B46         F8            mov	ax,-8[bp]
24240                                           ! Debug: list unsigned int = ax-1 (used reg = )
24241 619A           48                         dec	ax
24242 619B           50                         push	ax
24243                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24244 619C           8B46         F6            mov	ax,-$A[bp]
24245                                           ! Debug: list unsigned int = ax-1 (used reg = )
24246 619F           48                         dec	ax
24247 61A0           50                         push	ax
24248                                           ! Debug: list int = const 0 (used reg = )
24249 61A1           31C0                       xor	ax,ax
24250 61A3           50                         push	ax
24251                                           ! Debug: list int = const 0 (used reg = )
24252 61A4           31C0                       xor	ax,ax
24253 61A6           50                         push	ax
24254                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24255 61A7           8A46         08            mov	al,8[bp]
24256 61AA           30E4                       xor	ah,ah
24257 61AC           50                         push	ax
24258                                           ! Debug: list int = const 1 (used reg = )
24259 61AD           B8                   0001  mov	ax,*1
24260 61B0           50                         push	ax
24261                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24262 61B1           E8         E759            call	_biosfn_scroll
24263 61B4           83C4                   10  add	sp,*$10
24264                                           !BCC_EOS
24265                                           ! 2923     }
24266                                           ! 2924    else
24267                                           ! 2925     {
24268 61B7           EB           27            jmp .206
24269                       000061B9            .204:
24270                                           ! 2926      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24271                                           ! Debug: list int = const 1 (used reg = )
24272 61B9           B8                   0001  mov	ax,*1
24273 61BC           50                         push	ax
24274                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24275 61BD           8A46         06            mov	al,6[bp]
24276 61C0           30E4                       xor	ah,ah
24277 61C2           50                         push	ax
24278                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24279 61C3           8B46         F8            mov	ax,-8[bp]
24280                                           ! Debug: list unsigned int = ax-1 (used reg = )
24281 61C6           48                         dec	ax
24282 61C7           50                         push	ax
24283                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24284 61C8           8B46         F6            mov	ax,-$A[bp]
24285                                           ! Debug: list unsigned int = ax-1 (used reg = )
24286 61CB           48                         dec	ax
24287 61CC           50                         push	ax
24288                                           ! Debug: list int = const 0 (used reg = )
24289 61CD           31C0                       xor	ax,ax
24290 61CF           50                         push	ax
24291                                           ! Debug: list int = const 0 (used reg = )
24292 61D0           31C0                       xor	ax,ax
24293 61D2           50                         push	ax
24294                                           ! Debug: list int = const 0 (used reg = )
24295 61D3           31C0                       xor	ax,ax
24296 61D5           50                         push	ax
24297                                           ! Debug: list int = const 1 (used reg = )
24298 61D6           B8                   0001  mov	ax,*1
24299 61D9           50                         push	ax
24300                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24301 61DA           E8         E730            call	_biosfn_scroll
24302 61DD           83C4                   10  add	sp,*$10
24303                                           !BCC_EOS
24304                                           ! 2927     }
24305                                           ! 2928    ycurs-=1;
24306                       000061E0            .206:
24307                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24308 61E0           8A46         FD            mov	al,-3[bp]
24309 61E3           30E4                       xor	ah,ah
24310 61E5           48                         dec	ax
24311 61E6           8846         FD            mov	-3[bp],al
24312                                           !BCC_EOS
24313                                           ! 2929   }
24314                                           ! 2930  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24315                       000061E9            .202:
24316                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24317 61E9           8A46         FD            mov	al,-3[bp]
24318 61EC           30E4                       xor	ah,ah
24319 61EE           8946         F2            mov	-$E[bp],ax
24320                                           !BCC_EOS
24321                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24322 61F1           8B46         F2            mov	ax,-$E[bp]
24323 61F4           88C4                       mov	ah,al
24324 61F6           30C0                       xor	al,al
24325 61F8           8946         F2            mov	-$E[bp],ax
24326                                           !BCC_EOS
24327                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24328 61FB           8B46         F2            mov	ax,-$E[bp]
24329 61FE           0246         FE            add	al,-2[bp]
24330 6201           80D4                   00  adc	ah,*0
24331 6204           8946         F2            mov	-$E[bp],ax
24332                                           !BCC_EOS
24333                                           ! 2931  biosfn_set_cursor_pos(page,cursor);
24334                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24335 6207           FF76         F2            push	-$E[bp]
24336                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24337 620A           8A46         06            mov	al,6[bp]
24338 620D           30E4                       xor	ah,ah
24339 620F           50                         push	ax
24340                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24341 6210           E8         E102            call	_biosfn_set_cursor_pos
24342 6213           83C4                   04  add	sp,*4
24343                                           !BCC_EOS
24344                                           ! 2932 }
24345 6216           89EC                       mov	sp,bp
24346 6218           5D                         pop	bp
24347 6219           C3                         ret
24348                                           ! 2933 #asm
24349                                           !BCC_ASM
24350                       00000008            _biosfn_write_teletype.flag	set	8
24351                       00000006            _biosfn_write_teletype.attr	set	6
24352                       00000004            _biosfn_write_teletype.page	set	4
24353                       00000002            _biosfn_write_teletype.car	set	2
24354                       0000621A            biosfn_get_video_mode:
24355 621A           1E                           push ds
24356 621B           B8                   0040    mov ax, # 0x40
24357 621E           8ED8                         mov ds, ax
24358 6220           53                           push bx
24359 6221           BB                   0062    mov bx, # 0x62
24360 6224           8A07                         mov al, [bx]
24361 6226           5B                           pop bx
24362 6227           88C7                         mov bh, al
24363 6229           53                           push bx
24364 622A           BB                   0087    mov bx, # 0x87
24365 622D           8A27                         mov ah, [bx]
24366 622F           80E4                   80    and ah, #0x80
24367 6232           BB                   0049    mov bx, # 0x49
24368 6235           8A07                         mov al, [bx]
24369 6237           08E0                         or al, ah
24370 6239           BB                   004A    mov bx, # 0x4A
24371 623C           8A27                         mov ah, [bx]
24372 623E           5B                           pop bx
24373 623F           1F                           pop ds
24374 6240           C3                           ret
24375                                           ! 2955 endasm
24376                                           !BCC_ENDASM
24377                                           ! 2956 #asm
24378                                           !BCC_ASM
24379                       00000008            _biosfn_write_teletype.flag	set	8
24380                       00000006            _biosfn_write_teletype.attr	set	6
24381                       00000004            _biosfn_write_teletype.page	set	4
24382                       00000002            _biosfn_write_teletype.car	set	2
24383                       00006241            biosfn_group_10:
24384 6241           3C                     00    cmp al, #0x00
24385 6243           75           02              jne int10_test_1001
24386 6245           EB           61              jmp biosfn_set_single_palette_reg
24387                       00006247            int10_test_1001:
24388 6247           3C                     01    cmp al, #0x01
24389 6249           75           02              jne int10_test_1002
24390 624B           EB           75              jmp biosfn_set_overscan_border_color
24391                       0000624D            int10_test_1002:
24392 624D           3C                     02    cmp al, #0x02
24393 624F           75           02              jne int10_test_1003
24394 6251           EB           77              jmp biosfn_set_all_palette_reg
24395                       00006253            int10_test_1003:
24396 6253           3C                     03    cmp al, #0x03
24397 6255           75           03              jne int10_test_1007
24398 6257           E9         009D              jmp biosfn_toggle_intensity
24399                       0000625A            int10_test_1007:
24400 625A           3C                     07    cmp al, #0x07
24401 625C           75           03              jne int10_test_1008
24402 625E           E9         00BC              jmp biosfn_get_single_palette_reg
24403                       00006261            int10_test_1008:
24404 6261           3C                     08    cmp al, #0x08
24405 6263           75           03              jne int10_test_1009
24406 6265           E9         00D9              jmp biosfn_read_overscan_border_color
24407                       00006268            int10_test_1009:
24408 6268           3C                     09    cmp al, #0x09
24409 626A           75           03              jne int10_test_1010
24410 626C           E9         00E0              jmp biosfn_get_all_palette_reg
24411                       0000626F            int10_test_1010:
24412 626F           3C                     10    cmp al, #0x10
24413 6271           75           03              jne int10_test_1012
24414 6273           E9         011A              jmp biosfn_set_single_dac_reg
24415                       00006276            int10_test_1012:
24416 6276           3C                     12    cmp al, #0x12
24417 6278           75           03              jne int10_test_1013
24418 627A           E9         012C              jmp biosfn_set_all_dac_reg
24419                       0000627D            int10_test_1013:
24420 627D           3C                     13    cmp al, #0x13
24421 627F           75           03              jne int10_test_1015
24422 6281           E9         014D              jmp biosfn_select_video_dac_color_page
24423                       00006284            int10_test_1015:
24424 6284           3C                     15    cmp al, #0x15
24425 6286           75           03              jne int10_test_1017
24426 6288           E9         0189              jmp biosfn_read_single_dac_reg
24427                       0000628B            int10_test_1017:
24428 628B           3C                     17    cmp al, #0x17
24429 628D           75           03              jne int10_test_1018
24430 628F           E9         019D              jmp biosfn_read_all_dac_reg
24431                       00006292            int10_test_1018:
24432 6292           3C                     18    cmp al, #0x18
24433 6294           75           03              jne int10_test_1019
24434 6296           E9         01BE              jmp biosfn_set_pel_mask
24435                       00006299            int10_test_1019:
24436 6299           3C                     19    cmp al, #0x19
24437 629B           75           03              jne int10_test_101A
24438 629D           E9         01C2              jmp biosfn_read_pel_mask
24439                       000062A0            int10_test_101A:
24440 62A0           3C                     1A    cmp al, #0x1a
24441 62A2           75           03              jne int10_group_10_unknown
24442 62A4           E9         01C6              jmp biosfn_read_video_dac_state
24443                       000062A7            int10_group_10_unknown:
24444 62A7           C3                           ret
24445                       000062A8            biosfn_set_single_palette_reg:
24446 62A8           80FB                   14    cmp bl, #0x14
24447 62AB           77           14              ja no_actl_reg1
24448 62AD           50                           push ax
24449 62AE           52                           push dx
24450 62AF           BA                   03DA    mov dx, # 0x3da
24451 62B2           EC                           in al, dx
24452 62B3           BA                   03C0    mov dx, # 0x3c0
24453 62B6           88D8                         mov al, bl
24454 62B8           EE                           out dx, al
24455 62B9           88F8                         mov al, bh
24456 62BB           EE                           out dx, al
24457 62BC           B0                     20    mov al, #0x20
24458 62BE           EE                           out dx, al
24459 62BF           5A                           pop dx
24460 62C0           58                           pop ax
24461                       000062C1            no_actl_reg1:
24462 62C1           C3                           ret
24463                                           ! 3037 endasm
24464                                           !BCC_ENDASM
24465                                           ! 3038 #asm
24466                                           !BCC_ASM
24467                       00000008            _biosfn_write_teletype.flag	set	8
24468                       00000006            _biosfn_write_teletype.attr	set	6
24469                       00000004            _biosfn_write_teletype.page	set	4
24470                       00000002            _biosfn_write_teletype.car	set	2
24471                       000062C2            biosfn_set_overscan_border_color:
24472 62C2           53                           push bx
24473 62C3           B3                     11    mov bl, #0x11
24474 62C5           E8         FFE0              call biosfn_set_single_palette_reg
24475 62C8           5B                           pop bx
24476 62C9           C3                           ret
24477                                           ! 3045 endasm
24478                                           !BCC_ENDASM
24479                                           ! 3046 #asm
24480                                           !BCC_ASM
24481                       00000008            _biosfn_write_teletype.flag	set	8
24482                       00000006            _biosfn_write_teletype.attr	set	6
24483                       00000004            _biosfn_write_teletype.page	set	4
24484                       00000002            _biosfn_write_teletype.car	set	2
24485                       000062CA            biosfn_set_all_palette_reg:
24486 62CA           50                           push ax
24487 62CB           53                           push bx
24488 62CC           51                           push cx
24489 62CD           52                           push dx
24490 62CE           89D3                         mov bx, dx
24491 62D0           BA                   03DA    mov dx, # 0x3da
24492 62D3           EC                           in al, dx
24493 62D4           B1                     00    mov cl, #0x00
24494 62D6           BA                   03C0    mov dx, # 0x3c0
24495                       000062D9            set_palette_loop:
24496 62D9           88C8                         mov al, cl
24497 62DB           EE                           out dx, al
24498 62DC           26                           seg es
24499 62DD           8A07                         mov al, [bx]
24500 62DF           EE                           out dx, al
24501 62E0           43                           inc bx
24502 62E1           FEC1                         inc cl
24503 62E3           80F9                   10    cmp cl, #0x10
24504 62E6           75           F1              jne set_palette_loop
24505 62E8           B0                     11    mov al, #0x11
24506 62EA           EE                           out dx, al
24507 62EB           26                           seg es
24508 62EC           8A07                         mov al, [bx]
24509 62EE           EE                           out dx, al
24510 62EF           B0                     20    mov al, #0x20
24511 62F1           EE                           out dx, al
24512 62F2           5A                           pop dx
24513 62F3           59                           pop cx
24514 62F4           5B                           pop bx
24515 62F5           58                           pop ax
24516 62F6           C3                           ret
24517                                           ! 3079 endasm
24518                                           !BCC_ENDASM
24519                                           ! 3080 #asm
24520                                           !BCC_ASM
24521                       00000008            _biosfn_write_teletype.flag	set	8
24522                       00000006            _biosfn_write_teletype.attr	set	6
24523                       00000004            _biosfn_write_teletype.page	set	4
24524                       00000002            _biosfn_write_teletype.car	set	2
24525                       000062F7            biosfn_toggle_intensity:
24526 62F7           50                           push ax
24527 62F8           53                           push bx
24528 62F9           52                           push dx
24529 62FA           BA                   03DA    mov dx, # 0x3da
24530 62FD           EC                           in al, dx
24531 62FE           BA                   03C0    mov dx, # 0x3c0
24532 6301           B0                     10    mov al, #0x10
24533 6303           EE                           out dx, al
24534 6304           BA                   03C1    mov dx, # 0x3c1
24535 6307           EC                           in al, dx
24536 6308           24                     F7    and al, #0xf7
24537 630A           80E3                   01    and bl, #0x01
24538 630D           C0E3                   03    shl bl, 3
24539 6310           08D8                         or al, bl
24540 6312           BA                   03C0    mov dx, # 0x3c0
24541 6315           EE                           out dx, al
24542 6316           B0                     20    mov al, #0x20
24543 6318           EE                           out dx, al
24544 6319           5A                           pop dx
24545 631A           5B                           pop bx
24546 631B           58                           pop ax
24547 631C           C3                           ret
24548                                           ! 3104 endasm
24549                                           !BCC_ENDASM
24550                                           ! 3105 #asm
24551                                           !BCC_ASM
24552                       00000008            _biosfn_write_teletype.flag	set	8
24553                       00000006            _biosfn_write_teletype.attr	set	6
24554                       00000004            _biosfn_write_teletype.page	set	4
24555                       00000002            _biosfn_write_teletype.car	set	2
24556                       0000631D            biosfn_get_single_palette_reg:
24557 631D           80FB                   14    cmp bl, #0x14
24558 6320           77           1E              ja no_actl_reg2
24559 6322           50                           push ax
24560 6323           52                           push dx
24561 6324           BA                   03DA    mov dx, # 0x3da
24562 6327           EC                           in al, dx
24563 6328           BA                   03C0    mov dx, # 0x3c0
24564 632B           88D8                         mov al, bl
24565 632D           EE                           out dx, al
24566 632E           BA                   03C1    mov dx, # 0x3c1
24567 6331           EC                           in al, dx
24568 6332           88C7                         mov bh, al
24569 6334           BA                   03DA    mov dx, # 0x3da
24570 6337           EC                           in al, dx
24571 6338           BA                   03C0    mov dx, # 0x3c0
24572 633B           B0                     20    mov al, #0x20
24573 633D           EE                           out dx, al
24574 633E           5A                           pop dx
24575 633F           58                           pop ax
24576                       00006340            no_actl_reg2:
24577 6340           C3                           ret
24578                                           ! 3128 endasm
24579                                           !BCC_ENDASM
24580                                           ! 3129 #asm
24581                                           !BCC_ASM
24582                       00000008            _biosfn_write_teletype.flag	set	8
24583                       00000006            _biosfn_write_teletype.attr	set	6
24584                       00000004            _biosfn_write_teletype.page	set	4
24585                       00000002            _biosfn_write_teletype.car	set	2
24586                       00006341            biosfn_read_overscan_border_color:
24587 6341           50                           push ax
24588 6342           53                           push bx
24589 6343           B3                     11    mov bl, #0x11
24590 6345           E8         FFD5              call biosfn_get_single_palette_reg
24591 6348           88F8                         mov al, bh
24592 634A           5B                           pop bx
24593 634B           88C7                         mov bh, al
24594 634D           58                           pop ax
24595 634E           C3                           ret
24596                                           ! 3140 endasm
24597                                           !BCC_ENDASM
24598                                           ! 3141 #asm
24599                                           !BCC_ASM
24600                       00000008            _biosfn_write_teletype.flag	set	8
24601                       00000006            _biosfn_write_teletype.attr	set	6
24602                       00000004            _biosfn_write_teletype.page	set	4
24603                       00000002            _biosfn_write_teletype.car	set	2
24604                       0000634F            biosfn_get_all_palette_reg:
24605 634F           50                           push ax
24606 6350           53                           push bx
24607 6351           51                           push cx
24608 6352           52                           push dx
24609 6353           89D3                         mov bx, dx
24610 6355           B1                     00    mov cl, #0x00
24611                       00006357            get_palette_loop:
24612 6357           BA                   03DA    mov dx, # 0x3da
24613 635A           EC                           in al, dx
24614 635B           BA                   03C0    mov dx, # 0x3c0
24615 635E           88C8                         mov al, cl
24616 6360           EE                           out dx, al
24617 6361           BA                   03C1    mov dx, # 0x3c1
24618 6364           EC                           in al, dx
24619 6365           26                           seg es
24620 6366           8807                         mov [bx], al
24621 6368           43                           inc bx
24622 6369           FEC1                         inc cl
24623 636B           80F9                   10    cmp cl, #0x10
24624 636E           75           E7              jne get_palette_loop
24625 6370           BA                   03DA    mov dx, # 0x3da
24626 6373           EC                           in al, dx
24627 6374           BA                   03C0    mov dx, # 0x3c0
24628 6377           B0                     11    mov al, #0x11
24629 6379           EE                           out dx, al
24630 637A           BA                   03C1    mov dx, # 0x3c1
24631 637D           EC                           in al, dx
24632 637E           26                           seg es
24633 637F           8807                         mov [bx], al
24634 6381           BA                   03DA    mov dx, # 0x3da
24635 6384           EC                           in al, dx
24636 6385           BA                   03C0    mov dx, # 0x3c0
24637 6388           B0                     20    mov al, #0x20
24638 638A           EE                           out dx, al
24639 638B           5A                           pop dx
24640 638C           59                           pop cx
24641 638D           5B                           pop bx
24642 638E           58                           pop ax
24643 638F           C3                           ret
24644                                           ! 3182 endasm
24645                                           !BCC_ENDASM
24646                                           ! 3183 #asm
24647                                           !BCC_ASM
24648                       00000008            _biosfn_write_teletype.flag	set	8
24649                       00000006            _biosfn_write_teletype.attr	set	6
24650                       00000004            _biosfn_write_teletype.page	set	4
24651                       00000002            _biosfn_write_teletype.car	set	2
24652                       00006390            biosfn_set_single_dac_reg:
24653 6390           50                           push ax
24654 6391           52                           push dx
24655 6392           BA                   03C8    mov dx, # 0x3c8
24656 6395           88D8                         mov al, bl
24657 6397           EE                           out dx, al
24658 6398           BA                   03C9    mov dx, # 0x3c9
24659 639B           58                           pop ax
24660 639C           50                           push ax
24661 639D           88E0                         mov al, ah
24662 639F           EE                           out dx, al
24663 63A0           88E8                         mov al, ch
24664 63A2           EE                           out dx, al
24665 63A3           88C8                         mov al, cl
24666 63A5           EE                           out dx, al
24667 63A6           5A                           pop dx
24668 63A7           58                           pop ax
24669 63A8           C3                           ret
24670                                           ! 3202 endasm
24671                                           !BCC_ENDASM
24672                                           ! 3203 #asm
24673                                           !BCC_ASM
24674                       00000008            _biosfn_write_teletype.flag	set	8
24675                       00000006            _biosfn_write_teletype.attr	set	6
24676                       00000004            _biosfn_write_teletype.page	set	4
24677                       00000002            _biosfn_write_teletype.car	set	2
24678                       000063A9            biosfn_set_all_dac_reg:
24679 63A9           50                           push ax
24680 63AA           53                           push bx
24681 63AB           51                           push cx
24682 63AC           52                           push dx
24683 63AD           BA                   03C8    mov dx, # 0x3c8
24684 63B0           88D8                         mov al, bl
24685 63B2           EE                           out dx, al
24686 63B3           5A                           pop dx
24687 63B4           52                           push dx
24688 63B5           89D3                         mov bx, dx
24689 63B7           BA                   03C9    mov dx, # 0x3c9
24690                       000063BA            set_dac_loop:
24691 63BA           26                           seg es
24692 63BB           8A07                         mov al, [bx]
24693 63BD           EE                           out dx, al
24694 63BE           43                           inc bx
24695 63BF           26                           seg es
24696 63C0           8A07                         mov al, [bx]
24697 63C2           EE                           out dx, al
24698 63C3           43                           inc bx
24699 63C4           26                           seg es
24700 63C5           8A07                         mov al, [bx]
24701 63C7           EE                           out dx, al
24702 63C8           43                           inc bx
24703 63C9           49                           dec cx
24704 63CA           75           EE              jnz set_dac_loop
24705 63CC           5A                           pop dx
24706 63CD           59                           pop cx
24707 63CE           5B                           pop bx
24708 63CF           58                           pop ax
24709 63D0           C3                           ret
24710                                           ! 3236 endasm
24711                                           !BCC_ENDASM
24712                                           ! 3237 #asm
24713                                           !BCC_ASM
24714                       00000008            _biosfn_write_teletype.flag	set	8
24715                       00000006            _biosfn_write_teletype.attr	set	6
24716                       00000004            _biosfn_write_teletype.page	set	4
24717                       00000002            _biosfn_write_teletype.car	set	2
24718                       000063D1            biosfn_select_video_dac_color_page:
24719 63D1           50                           push ax
24720 63D2           53                           push bx
24721 63D3           52                           push dx
24722 63D4           BA                   03DA    mov dx, # 0x3da
24723 63D7           EC                           in al, dx
24724 63D8           BA                   03C0    mov dx, # 0x3c0
24725 63DB           B0                     10    mov al, #0x10
24726 63DD           EE                           out dx, al
24727 63DE           BA                   03C1    mov dx, # 0x3c1
24728 63E1           EC                           in al, dx
24729 63E2           80E3                   01    and bl, #0x01
24730 63E5           75           0D              jnz set_dac_page
24731 63E7           24                     7F    and al, #0x7f
24732 63E9           C0E7                   07    shl bh, 7
24733 63EC           08F8                         or al, bh
24734 63EE           BA                   03C0    mov dx, # 0x3c0
24735 63F1           EE                           out dx, al
24736 63F2           EB           19              jmp set_actl_normal
24737                       000063F4            set_dac_page:
24738 63F4           50                           push ax
24739 63F5           BA                   03DA    mov dx, # 0x3da
24740 63F8           EC                           in al, dx
24741 63F9           BA                   03C0    mov dx, # 0x3c0
24742 63FC           B0                     14    mov al, #0x14
24743 63FE           EE                           out dx, al
24744 63FF           58                           pop ax
24745 6400           24                     80    and al, #0x80
24746 6402           75           03              jnz set_dac_16_page
24747 6404           C0E7                   02    shl bh, 2
24748                       00006407            set_dac_16_page:
24749 6407           80E7                   0F    and bh, #0x0f
24750 640A           88F8                         mov al, bh
24751 640C           EE                           out dx, al
24752                       0000640D            set_actl_normal:
24753 640D           B0                     20    mov al, #0x20
24754 640F           EE                           out dx, al
24755 6410           5A                           pop dx
24756 6411           5B                           pop bx
24757 6412           58                           pop ax
24758 6413           C3                           ret
24759                                           ! 3279 endasm
24760                                           !BCC_ENDASM
24761                                           ! 3280 #asm
24762                                           !BCC_ASM
24763                       00000008            _biosfn_write_teletype.flag	set	8
24764                       00000006            _biosfn_write_teletype.attr	set	6
24765                       00000004            _biosfn_write_teletype.page	set	4
24766                       00000002            _biosfn_write_teletype.car	set	2
24767                       00006414            biosfn_read_single_dac_reg:
24768 6414           50                           push ax
24769 6415           52                           push dx
24770 6416           BA                   03C7    mov dx, # 0x3c7
24771 6419           88D8                         mov al, bl
24772 641B           EE                           out dx, al
24773 641C           58                           pop ax
24774 641D           88C4                         mov ah, al
24775 641F           BA                   03C9    mov dx, # 0x3c9
24776 6422           EC                           in al, dx
24777 6423           86E0                         xchg al, ah
24778 6425           50                           push ax
24779 6426           EC                           in al, dx
24780 6427           88C5                         mov ch, al
24781 6429           EC                           in al, dx
24782 642A           88C1                         mov cl, al
24783 642C           5A                           pop dx
24784 642D           58                           pop ax
24785 642E           C3                           ret
24786                                           ! 3300 endasm
24787                                           !BCC_ENDASM
24788                                           ! 3301 #asm
24789                                           !BCC_ASM
24790                       00000008            _biosfn_write_teletype.flag	set	8
24791                       00000006            _biosfn_write_teletype.attr	set	6
24792                       00000004            _biosfn_write_teletype.page	set	4
24793                       00000002            _biosfn_write_teletype.car	set	2
24794                       0000642F            biosfn_read_all_dac_reg:
24795 642F           50                           push ax
24796 6430           53                           push bx
24797 6431           51                           push cx
24798 6432           52                           push dx
24799 6433           BA                   03C7    mov dx, # 0x3c7
24800 6436           88D8                         mov al, bl
24801 6438           EE                           out dx, al
24802 6439           5A                           pop dx
24803 643A           52                           push dx
24804 643B           89D3                         mov bx, dx
24805 643D           BA                   03C9    mov dx, # 0x3c9
24806                       00006440            read_dac_loop:
24807 6440           EC                           in al, dx
24808 6441           26                           seg es
24809 6442           8807                         mov [bx], al
24810 6444           43                           inc bx
24811 6445           EC                           in al, dx
24812 6446           26                           seg es
24813 6447           8807                         mov [bx], al
24814 6449           43                           inc bx
24815 644A           EC                           in al, dx
24816 644B           26                           seg es
24817 644C           8807                         mov [bx], al
24818 644E           43                           inc bx
24819 644F           49                           dec cx
24820 6450           75           EE              jnz read_dac_loop
24821 6452           5A                           pop dx
24822 6453           59                           pop cx
24823 6454           5B                           pop bx
24824 6455           58                           pop ax
24825 6456           C3                           ret
24826                                           ! 3334 endasm
24827                                           !BCC_ENDASM
24828                                           ! 3335 #asm
24829                                           !BCC_ASM
24830                       00000008            _biosfn_write_teletype.flag	set	8
24831                       00000006            _biosfn_write_teletype.attr	set	6
24832                       00000004            _biosfn_write_teletype.page	set	4
24833                       00000002            _biosfn_write_teletype.car	set	2
24834                       00006457            biosfn_set_pel_mask:
24835 6457           50                           push ax
24836 6458           52                           push dx
24837 6459           BA                   03C6    mov dx, # 0x3c6
24838 645C           88D8                         mov al, bl
24839 645E           EE                           out dx, al
24840 645F           5A                           pop dx
24841 6460           58                           pop ax
24842 6461           C3                           ret
24843                                           ! 3345 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3346 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       00006462            biosfn_read_pel_mask:
24852 6462           50                           push ax
24853 6463           52                           push dx
24854 6464           BA                   03C6    mov dx, # 0x3c6
24855 6467           EC                           in al, dx
24856 6468           88C3                         mov bl, al
24857 646A           5A                           pop dx
24858 646B           58                           pop ax
24859 646C           C3                           ret
24860                                           ! 3356 endasm
24861                                           !BCC_ENDASM
24862                                           ! 3357 #asm
24863                                           !BCC_ASM
24864                       00000008            _biosfn_write_teletype.flag	set	8
24865                       00000006            _biosfn_write_teletype.attr	set	6
24866                       00000004            _biosfn_write_teletype.page	set	4
24867                       00000002            _biosfn_write_teletype.car	set	2
24868                       0000646D            biosfn_read_video_dac_state:
24869 646D           50                           push ax
24870 646E           52                           push dx
24871 646F           BA                   03DA    mov dx, # 0x3da
24872 6472           EC                           in al, dx
24873 6473           BA                   03C0    mov dx, # 0x3c0
24874 6476           B0                     10    mov al, #0x10
24875 6478           EE                           out dx, al
24876 6479           BA                   03C1    mov dx, # 0x3c1
24877 647C           EC                           in al, dx
24878 647D           88C3                         mov bl, al
24879 647F           C0EB                   07    shr bl, 7
24880 6482           BA                   03DA    mov dx, # 0x3da
24881 6485           EC                           in al, dx
24882 6486           BA                   03C0    mov dx, # 0x3c0
24883 6489           B0                     14    mov al, #0x14
24884 648B           EE                           out dx, al
24885 648C           BA                   03C1    mov dx, # 0x3c1
24886 648F           EC                           in al, dx
24887 6490           88C7                         mov bh, al
24888 6492           80E7                   0F    and bh, #0x0f
24889 6495           F6C3                   01    test bl, #0x01
24890 6498           75           03              jnz get_dac_16_page
24891 649A           C0EF                   02    shr bh, 2
24892                       0000649D            get_dac_16_page:
24893 649D           BA                   03DA    mov dx, # 0x3da
24894 64A0           EC                           in al, dx
24895 64A1           BA                   03C0    mov dx, # 0x3c0
24896 64A4           B0                     20    mov al, #0x20
24897 64A6           EE                           out dx, al
24898 64A7           5A                           pop dx
24899 64A8           58                           pop ax
24900 64A9           C3                           ret
24901                                           ! 3391 endasm
24902                                           !BCC_ENDASM
24903                                           ! 3392 static void b
24904                                           ! Register BX used in function biosfn_write_teletype
24905                                           ! 3392 iosfn_perform_gray_scale_summing (start,count)
24906                                           ! 3393 Bit16u start;Bit16u count;
24907                       000064AA            _biosfn_perform_gray_scale_summing:
24908                                           !BCC_EOS
24909                                           !BCC_EOS
24910                                           ! 3394 {Bit8u r,g,b;
24911                                           !BCC_EOS
24912                                           ! 3395  Bit16u i;
24913                                           !BCC_EOS
24914                                           ! 3396  Bit16u index;
24915                                           !BCC_EOS
24916                                           ! 3397  inb(0x3da);
24917 64AA           55                         push	bp
24918 64AB           89E5                       mov	bp,sp
24919 64AD           83C4                   F8  add	sp,*-8
24920                                           ! Debug: list int = const $3DA (used reg = )
24921 64B0           B8                   03DA  mov	ax,#$3DA
24922 64B3           50                         push	ax
24923                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24924 64B4           E8         1750            call	_inb
24925 64B7           44                         inc	sp
24926 64B8           44                         inc	sp
24927                                           !BCC_EOS
24928                                           ! 3398  outb(0x3c0,0x00);
24929                                           ! Debug: list int = const 0 (used reg = )
24930 64B9           31C0                       xor	ax,ax
24931 64BB           50                         push	ax
24932                                           ! Debug: list int = const $3C0 (used reg = )
24933 64BC           B8                   03C0  mov	ax,#$3C0
24934 64BF           50                         push	ax
24935                                           ! Debug: func () void = outb+0 (used reg = )
24936 64C0           E8         175A            call	_outb
24937 64C3           83C4                   04  add	sp,*4
24938                                           !BCC_EOS
24939                                           ! 3399  for( index = 0; index < count; index++ )
24940                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24941 64C6           31C0                       xor	ax,ax
24942 64C8           8946         F8            mov	-8[bp],ax
24943                                           !BCC_EOS
24944                                           !BCC_EOS
24945                                           ! 3400   {
24946 64CB           E9         00BE            br 	.209
24947                       000064CE            .20A:
24948                                           ! 3401    outb(0x3c7,start);
24949                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24950 64CE           FF76         04            push	4[bp]
24951                                           ! Debug: list int = const $3C7 (used reg = )
24952 64D1           B8                   03C7  mov	ax,#$3C7
24953 64D4           50                         push	ax
24954                                           ! Debug: func () void = outb+0 (used reg = )
24955 64D5           E8         1745            call	_outb
24956 64D8           83C4                   04  add	sp,*4
24957                                           !BCC_EOS
24958                                           ! 3402    r=inb( 0x3c9 );
24959                                           ! Debug: list int = const $3C9 (used reg = )
24960 64DB           B8                   03C9  mov	ax,#$3C9
24961 64DE           50                         push	ax
24962                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24963 64DF           E8         1725            call	_inb
24964 64E2           44                         inc	sp
24965 64E3           44                         inc	sp
24966                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24967 64E4           8846         FF            mov	-1[bp],al
24968                                           !BCC_EOS
24969                                           ! 3403    g=inb( 0x3c9 );
24970                                           ! Debug: list int = const $3C9 (used reg = )
24971 64E7           B8                   03C9  mov	ax,#$3C9
24972 64EA           50                         push	ax
24973                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24974 64EB           E8         1719            call	_inb
24975 64EE           44                         inc	sp
24976 64EF           44                         inc	sp
24977                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24978 64F0           8846         FE            mov	-2[bp],al
24979                                           !BCC_EOS
24980                                           ! 3404    b=inb( 0x3c9 );
24981                                           ! Debug: list int = const $3C9 (used reg = )
24982 64F3           B8                   03C9  mov	ax,#$3C9
24983 64F6           50                         push	ax
24984                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24985 64F7           E8         170D            call	_inb
24986 64FA           44                         inc	sp
24987 64FB           44                         inc	sp
24988                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24989 64FC           8846         FD            mov	-3[bp],al
24990                                           !BCC_EOS
24991                                           ! 3405    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24992                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24993                                           ! Debug: expression subtree swapping
24994 64FF           8A46         FD            mov	al,-3[bp]
24995 6502           30E4                       xor	ah,ah
24996 6504           B9                   001C  mov	cx,*$1C
24997 6507           F7E9                       imul	cx
24998 6509           50                         push	ax
24999                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25000                                           ! Debug: expression subtree swapping
25001 650A           8A46         FE            mov	al,-2[bp]
25002 650D           30E4                       xor	ah,ah
25003 650F           B9                   0097  mov	cx,#$97
25004 6512           F7E9                       imul	cx
25005 6514           50                         push	ax
25006                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25007                                           ! Debug: expression subtree swapping
25008 6515           8A46         FF            mov	al,-1[bp]
25009 6518           30E4                       xor	ah,ah
25010 651A           B9                   004D  mov	cx,*$4D
25011 651D           F7E9                       imul	cx
25012                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25013 651F           0346         F4            add	ax,-$C[bp]
25014 6522           44                         inc	sp
25015 6523           44                         inc	sp
25016                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25017 6524           0346         F6            add	ax,-$A[bp]
25018 6527           44                         inc	sp
25019 6528           44                         inc	sp
25020                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25021                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25022 6529           05                   0080  add	ax,#$80
25023 652C           88E0                       mov	al,ah
25024 652E           30E4                       xor	ah,ah
25025                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25026 6530           8946         FA            mov	-6[bp],ax
25027                                           !BCC_EOS
25028                                           ! 3406    if(i>0x3f)i=0x3f;
25029                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25030 6533           8B46         FA            mov	ax,-6[bp]
25031 6536           3D                   003F  cmp	ax,*$3F
25032 6539           76           06            jbe 	.20B
25033                       0000653B            .20C:
25034                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25035 653B           B8                   003F  mov	ax,*$3F
25036 653E           8946         FA            mov	-6[bp],ax
25037                                           !BCC_EOS
25038                                           ! 3407    outb(0x3c8,start);
25039                       00006541            .20B:
25040                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25041 6541           FF76         04            push	4[bp]
25042                                           ! Debug: list int = const $3C8 (used reg = )
25043 6544           B8                   03C8  mov	ax,#$3C8
25044 6547           50                         push	ax
25045                                           ! Debug: func () void = outb+0 (used reg = )
25046 6548           E8         16D2            call	_outb
25047 654B           83C4                   04  add	sp,*4
25048                                           !BCC_EOS
25049                                           ! 3408    outb( 0x3c9, i&0xff );
25050                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25051 654E           8A46         FA            mov	al,-6[bp]
25052                                           ! Debug: list unsigned char = al+0 (used reg = )
25053 6551           30E4                       xor	ah,ah
25054 6553           50                         push	ax
25055                                           ! Debug: list int = const $3C9 (used reg = )
25056 6554           B8                   03C9  mov	ax,#$3C9
25057 6557           50                         push	ax
25058                                           ! Debug: func () void = outb+0 (used reg = )
25059 6558           E8         16C2            call	_outb
25060 655B           83C4                   04  add	sp,*4
25061                                           !BCC_EOS
25062                                           ! 3409    outb( 0x3c9, i&0xff );
25063                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25064 655E           8A46         FA            mov	al,-6[bp]
25065                                           ! Debug: list unsigned char = al+0 (used reg = )
25066 6561           30E4                       xor	ah,ah
25067 6563           50                         push	ax
25068                                           ! Debug: list int = const $3C9 (used reg = )
25069 6564           B8                   03C9  mov	ax,#$3C9
25070 6567           50                         push	ax
25071                                           ! Debug: func () void = outb+0 (used reg = )
25072 6568           E8         16B2            call	_outb
25073 656B           83C4                   04  add	sp,*4
25074                                           !BCC_EOS
25075                                           ! 3410    outb( 0x3c9, i&0xff );
25076                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25077 656E           8A46         FA            mov	al,-6[bp]
25078                                           ! Debug: list unsigned char = al+0 (used reg = )
25079 6571           30E4                       xor	ah,ah
25080 6573           50                         push	ax
25081                                           ! Debug: list int = const $3C9 (used reg = )
25082 6574           B8                   03C9  mov	ax,#$3C9
25083 6577           50                         push	ax
25084                                           ! Debug: func () void = outb+0 (used reg = )
25085 6578           E8         16A2            call	_outb
25086 657B           83C4                   04  add	sp,*4
25087                                           !BCC_EOS
25088                                           ! 3411    start++;
25089                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25090 657E           8B46         04            mov	ax,4[bp]
25091 6581           40                         inc	ax
25092 6582           8946         04            mov	4[bp],ax
25093                                           !BCC_EOS
25094                                           ! 3412   }
25095                                           ! 3413  inb(0x3da);
25096                       00006585            .208:
25097                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25098 6585           8B46         F8            mov	ax,-8[bp]
25099 6588           40                         inc	ax
25100 6589           8946         F8            mov	-8[bp],ax
25101                       0000658C            .209:
25102                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25103 658C           8B46         F8            mov	ax,-8[bp]
25104 658F           3B46         06            cmp	ax,6[bp]
25105 6592         0F82         FF38            blo 	.20A
25106                       00006596            .20D:
25107                       00006596            .207:
25108                                           ! Debug: list int = const $3DA (used reg = )
25109 6596           B8                   03DA  mov	ax,#$3DA
25110 6599           50                         push	ax
25111                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25112 659A           E8         166A            call	_inb
25113 659D           44                         inc	sp
25114 659E           44                         inc	sp
25115                                           !BCC_EOS
25116                                           ! 3414  outb(0x3c0,0x20);
25117                                           ! Debug: list int = const $20 (used reg = )
25118 659F           B8                   0020  mov	ax,*$20
25119 65A2           50                         push	ax
25120                                           ! Debug: list int = const $3C0 (used reg = )
25121 65A3           B8                   03C0  mov	ax,#$3C0
25122 65A6           50                         push	ax
25123                                           ! Debug: func () void = outb+0 (used reg = )
25124 65A7           E8         1673            call	_outb
25125 65AA           83C4                   04  add	sp,*4
25126                                           !BCC_EOS
25127                                           ! 3415 }
25128 65AD           89EC                       mov	sp,bp
25129 65AF           5D                         pop	bp
25130 65B0           C3                         ret
25131                                           ! 3416 static void get_font_access()
25132                                           ! 3417 {
25133                       000065B1            _get_font_access:
25134                                           ! 3418 #asm
25135                                           !BCC_ASM
25136 65B1           BA                   03C4   mov dx, # 0x3c4
25137 65B4           B8                   0100   mov ax, #0x0100
25138 65B7           EF                          out dx, ax
25139 65B8           B8                   0402   mov ax, #0x0402
25140 65BB           EF                          out dx, ax
25141 65BC           B8                   0704   mov ax, #0x0704
25142 65BF           EF                          out dx, ax
25143 65C0           B8                   0300   mov ax, #0x0300
25144 65C3           EF                          out dx, ax
25145 65C4           BA                   03CE   mov dx, # 0x3ce
25146 65C7           B8                   0204   mov ax, #0x0204
25147 65CA           EF                          out dx, ax
25148 65CB           B8                   0005   mov ax, #0x0005
25149 65CE           EF                          out dx, ax
25150 65CF           B8                   0406   mov ax, #0x0406
25151 65D2           EF                          out dx, ax
25152                                           ! 3435 endasm
25153                                           !BCC_ENDASM
25154                                           ! 3436 }
25155 65D3           C3                         ret
25156                                           ! 3437 static void release_font_access()
25157                                           ! 3438 {
25158                       000065D4            _release_font_access:
25159                                           ! 3439 #asm
25160                                           !BCC_ASM
25161 65D4           BA                   03C4   mov dx, # 0x3c4
25162 65D7           B8                   0100   mov ax, #0x0100
25163 65DA           EF                          out dx, ax
25164 65DB           B8                   0302   mov ax, #0x0302
25165 65DE           EF                          out dx, ax
25166 65DF           B8                   0304   mov ax, #0x0304
25167 65E2           EF                          out dx, ax
25168 65E3           B8                   0300   mov ax, #0x0300
25169 65E6           EF                          out dx, ax
25170 65E7           BA                   03CC   mov dx, # 0x3cc
25171 65EA           EC                          in al, dx
25172 65EB           24                     01   and al, #0x01
25173 65ED           C0E0                   02   shl al, 2
25174 65F0           0C                     0A   or al, #0x0a
25175 65F2           88C4                        mov ah, al
25176 65F4           B0                     06   mov al, #0x06
25177 65F6           BA                   03CE   mov dx, # 0x3ce
25178 65F9           EF                          out dx, ax
25179 65FA           B8                   0004   mov ax, #0x0004
25180 65FD           EF                          out dx, ax
25181 65FE           B8                   1005   mov ax, #0x1005
25182 6601           EF                          out dx, ax
25183                                           ! 3462 endasm
25184                                           !BCC_ENDASM
25185                                           ! 3463 }
25186 6602           C3                         ret
25187                                           ! 3464 #asm
25188                                           !BCC_ASM
25189                       00006603            idiv_u:
25190 6603           31D2                         xor dx,dx
25191 6605           F7F3                         div bx
25192 6607           C3                           ret
25193                                           ! 3469 endasm
25194                                           !BCC_ENDASM
25195                                           ! 3470 static void set_scan_lines(lines) Bit8u lines;
25196                       00006608            _set_scan_lines:
25197                                           !BCC_EOS
25198                                           ! 3471 {
25199                                           ! 3472  Bit16u crtc_addr,cols,page,vde;
25200                                           !BCC_EOS
25201                                           ! 3473  Bit8u crtc_r9,ovl,rows;
25202                                           !BCC_EOS
25203                                           ! 3474  crtc_addr = read_word(0x40,0x63);
25204 6608           55                         push	bp
25205 6609           89E5                       mov	bp,sp
25206 660B           83C4                   F4  add	sp,*-$C
25207                                           ! Debug: list int = const $63 (used reg = )
25208 660E           B8                   0063  mov	ax,*$63
25209 6611           50                         push	ax
25210                                           ! Debug: list int = const $40 (used reg = )
25211 6612           B8                   0040  mov	ax,*$40
25212 6615           50                         push	ax
25213                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25214 6616           E8         15AB            call	_read_word
25215 6619           83C4                   04  add	sp,*4
25216                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25217 661C           8946         FE            mov	-2[bp],ax
25218                                           !BCC_EOS
25219                                           ! 3475  outb(crtc_addr, 0x09);
25220                                           ! Debug: list int = const 9 (used reg = )
25221 661F           B8                   0009  mov	ax,*9
25222 6622           50                         push	ax
25223                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25224 6623           FF76         FE            push	-2[bp]
25225                                           ! Debug: func () void = outb+0 (used reg = )
25226 6626           E8         15F4            call	_outb
25227 6629           83C4                   04  add	sp,*4
25228                                           !BCC_EOS
25229                                           ! 3476  crtc_r9 = inb(crtc_addr+1);
25230                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25231 662C           8B46         FE            mov	ax,-2[bp]
25232                                           ! Debug: list unsigned int = ax+1 (used reg = )
25233 662F           40                         inc	ax
25234 6630           50                         push	ax
25235                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25236 6631           E8         15D3            call	_inb
25237 6634           44                         inc	sp
25238 6635           44                         inc	sp
25239                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25240 6636           8846         F7            mov	-9[bp],al
25241                                           !BCC_EOS
25242                                           ! 3477  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25243                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25244 6639           8A46         04            mov	al,4[bp]
25245 663C           30E4                       xor	ah,ah
25246 663E           48                         dec	ax
25247 663F           50                         push	ax
25248                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25249 6640           8A46         F7            mov	al,-9[bp]
25250 6643           24                     E0  and	al,#$E0
25251                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25252 6645           30E4                       xor	ah,ah
25253 6647           0B46         F2            or	ax,-$E[bp]
25254 664A           44                         inc	sp
25255 664B           44                         inc	sp
25256                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25257 664C           8846         F7            mov	-9[bp],al
25258                                           !BCC_EOS
25259                                           ! 3478  outb(crtc_addr+1, crtc_r9);
25260                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25261 664F           8A46         F7            mov	al,-9[bp]
25262 6652           30E4                       xor	ah,ah
25263 6654           50                         push	ax
25264                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25265 6655           8B46         FE            mov	ax,-2[bp]
25266                                           ! Debug: list unsigned int = ax+1 (used reg = )
25267 6658           40                         inc	ax
25268 6659           50                         push	ax
25269                                           ! Debug: func () void = outb+0 (used reg = )
25270 665A           E8         15C0            call	_outb
25271 665D           83C4                   04  add	sp,*4
25272                                           !BCC_EOS
25273                                           ! 3479  if(lines==8)
25274                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25275 6660           8A46         04            mov	al,4[bp]
25276 6663           3C                     08  cmp	al,*8
25277 6665           75           10            jne 	.20E
25278                       00006667            .20F:
25279                                           ! 3480   {
25280                                           ! 3481    biosfn_set_cursor_shape(0x06,0x07);
25281                                           ! Debug: list int = const 7 (used reg = )
25282 6667           B8                   0007  mov	ax,*7
25283 666A           50                         push	ax
25284                                           ! Debug: list int = const 6 (used reg = )
25285 666B           B8                   0006  mov	ax,*6
25286 666E           50                         push	ax
25287                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25288 666F           E8         DB88            call	_biosfn_set_cursor_shape
25289 6672           83C4                   04  add	sp,*4
25290                                           !BCC_EOS
25291                                           ! 3482   }
25292                                           ! 3483  else
25293                                           ! 3484   {
25294 6675           EB           18            jmp .210
25295                       00006677            .20E:
25296                                           ! 3485    biosfn_set_cursor_shape(lines-4,lines-3);
25297                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25298 6677           8A46         04            mov	al,4[bp]
25299 667A           30E4                       xor	ah,ah
25300                                           ! Debug: list unsigned int = ax-3 (used reg = )
25301 667C           05                   FFFD  add	ax,*-3
25302 667F           50                         push	ax
25303                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25304 6680           8A46         04            mov	al,4[bp]
25305 6683           30E4                       xor	ah,ah
25306                                           ! Debug: list unsigned int = ax-4 (used reg = )
25307 6685           05                   FFFC  add	ax,*-4
25308 6688           50                         push	ax
25309                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25310 6689           E8         DB6E            call	_biosfn_set_cursor_shape
25311 668C           83C4                   04  add	sp,*4
25312                                           !BCC_EOS
25313                                           ! 3486   }
25314                                           ! 3487  write_word(0x40,0x85, lines);
25315                       0000668F            .210:
25316                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25317 668F           8A46         04            mov	al,4[bp]
25318 6692           30E4                       xor	ah,ah
25319 6694           50                         push	ax
25320                                           ! Debug: list int = const $85 (used reg = )
25321 6695           B8                   0085  mov	ax,#$85
25322 6698           50                         push	ax
25323                                           ! Debug: list int = const $40 (used reg = )
25324 6699           B8                   0040  mov	ax,*$40
25325 669C           50                         push	ax
25326                                           ! Debug: func () void = write_word+0 (used reg = )
25327 669D           E8         154F            call	_write_word
25328 66A0           83C4                   06  add	sp,*6
25329                                           !BCC_EOS
25330                                           ! 3488  outb(crtc_addr, 0x12);
25331                                           ! Debug: list int = const $12 (used reg = )
25332 66A3           B8                   0012  mov	ax,*$12
25333 66A6           50                         push	ax
25334                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25335 66A7           FF76         FE            push	-2[bp]
25336                                           ! Debug: func () void = outb+0 (used reg = )
25337 66AA           E8         1570            call	_outb
25338 66AD           83C4                   04  add	sp,*4
25339                                           !BCC_EOS
25340                                           ! 3489  vde = inb(crtc_addr+1);
25341                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25342 66B0           8B46         FE            mov	ax,-2[bp]
25343                                           ! Debug: list unsigned int = ax+1 (used reg = )
25344 66B3           40                         inc	ax
25345 66B4           50                         push	ax
25346                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25347 66B5           E8         154F            call	_inb
25348 66B8           44                         inc	sp
25349 66B9           44                         inc	sp
25350                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25351 66BA           30E4                       xor	ah,ah
25352 66BC           8946         F8            mov	-8[bp],ax
25353                                           !BCC_EOS
25354                                           ! 3490  outb(crtc_addr, 0x07);
25355                                           ! Debug: list int = const 7 (used reg = )
25356 66BF           B8                   0007  mov	ax,*7
25357 66C2           50                         push	ax
25358                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25359 66C3           FF76         FE            push	-2[bp]
25360                                           ! Debug: func () void = outb+0 (used reg = )
25361 66C6           E8         1554            call	_outb
25362 66C9           83C4                   04  add	sp,*4
25363                                           !BCC_EOS
25364                                           ! 3491  ovl = inb(crtc_addr+1);
25365                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25366 66CC           8B46         FE            mov	ax,-2[bp]
25367                                           ! Debug: list unsigned int = ax+1 (used reg = )
25368 66CF           40                         inc	ax
25369 66D0           50                         push	ax
25370                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25371 66D1           E8         1533            call	_inb
25372 66D4           44                         inc	sp
25373 66D5           44                         inc	sp
25374                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25375 66D6           8846         F6            mov	-$A[bp],al
25376                                           !BCC_EOS
25377                                           ! 3492  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25378                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25379 66D9           8A46         F6            mov	al,-$A[bp]
25380 66DC           24                     40  and	al,*$40
25381                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25382 66DE           30E4                       xor	ah,ah
25383 66E0           B1                     03  mov	cl,*3
25384 66E2           D3E0                       shl	ax,cl
25385 66E4           50                         push	ax
25386                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25387 66E5           8A46         F6            mov	al,-$A[bp]
25388 66E8           24                     02  and	al,*2
25389                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25390 66EA           30E4                       xor	ah,ah
25391 66EC           B1                     07  mov	cl,*7
25392 66EE           D3E0                       shl	ax,cl
25393                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25394 66F0           0346         F2            add	ax,-$E[bp]
25395 66F3           44                         inc	sp
25396 66F4           44                         inc	sp
25397                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25398                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25399 66F5           40                         inc	ax
25400 66F6           0346         F8            add	ax,-8[bp]
25401 66F9           8946         F8            mov	-8[bp],ax
25402                                           !BCC_EOS
25403                                           ! 3493  rows = vde / lines;
25404                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25405 66FC           8A46         04            mov	al,4[bp]
25406 66FF           30E4                       xor	ah,ah
25407 6701           89C3                       mov	bx,ax
25408 6703           8B46         F8            mov	ax,-8[bp]
25409 6706           E8         FEFA            call	idiv_u
25410                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25411 6709           8846         F5            mov	-$B[bp],al
25412                                           !BCC_EOS
25413                                           ! 3494  write_byte(0x40,0x84, rows-1);
25414                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25415 670C           8A46         F5            mov	al,-$B[bp]
25416 670F           30E4                       xor	ah,ah
25417                                           ! Debug: list unsigned int = ax-1 (used reg = )
25418 6711           48                         dec	ax
25419 6712           50                         push	ax
25420                                           ! Debug: list int = const $84 (used reg = )
25421 6713           B8                   0084  mov	ax,#$84
25422 6716           50                         push	ax
25423                                           ! Debug: list int = const $40 (used reg = )
25424 6717           B8                   0040  mov	ax,*$40
25425 671A           50                         push	ax
25426                                           ! Debug: func () void = write_byte+0 (used reg = )
25427 671B           E8         14B9            call	_write_byte
25428 671E           83C4                   06  add	sp,*6
25429                                           !BCC_EOS
25430                                           ! 3495  cols = read_word(0x40,0x4A);
25431                                           ! Debug: list int = const $4A (used reg = )
25432 6721           B8                   004A  mov	ax,*$4A
25433 6724           50                         push	ax
25434                                           ! Debug: list int = const $40 (used reg = )
25435 6725           B8                   0040  mov	ax,*$40
25436 6728           50                         push	ax
25437                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25438 6729           E8         1498            call	_read_word
25439 672C           83C4                   04  add	sp,*4
25440                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25441 672F           8946         FC            mov	-4[bp],ax
25442                                           !BCC_EOS
25443                                           ! 3496  write_word(0x40,0x4C, rows * cols * 2);
25444                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25445 6732           8A46         F5            mov	al,-$B[bp]
25446 6735           30E4                       xor	ah,ah
25447 6737           8B4E         FC            mov	cx,-4[bp]
25448 673A           F7E9                       imul	cx
25449                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25450 673C           D1E0                       shl	ax,*1
25451                                           ! Debug: list unsigned int = ax+0 (used reg = )
25452 673E           50                         push	ax
25453                                           ! Debug: list int = const $4C (used reg = )
25454 673F           B8                   004C  mov	ax,*$4C
25455 6742           50                         push	ax
25456                                           ! Debug: list int = const $40 (used reg = )
25457 6743           B8                   0040  mov	ax,*$40
25458 6746           50                         push	ax
25459                                           ! Debug: func () void = write_word+0 (used reg = )
25460 6747           E8         14A5            call	_write_word
25461 674A           83C4                   06  add	sp,*6
25462                                           !BCC_EOS
25463                                           ! 3497 }
25464 674D           89EC                       mov	sp,bp
25465 674F           5D                         pop	bp
25466 6750           C3                         ret
25467                                           ! 3498 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25468                                           ! Register BX used in function set_scan_lines
25469                       00006751            _biosfn_load_text_user_pat:
25470                                           !BCC_EOS
25471                                           !BCC_EOS
25472                                           !BCC_EOS
25473                                           !BCC_EOS
25474                                           !BCC_EOS
25475                                           !BCC_EOS
25476                                           !BCC_EOS
25477                                           ! 3499 {
25478                                           ! 3500  Bit16u blockaddr,dest,i,src;
25479                                           !BCC_EOS
25480                                           ! 3501 
25481                                           ! 3501  get_font_access();
25482 6751           55                         push	bp
25483 6752           89E5                       mov	bp,sp
25484 6754           83C4                   F8  add	sp,*-8
25485                                           ! Debug: func () void = get_font_access+0 (used reg = )
25486 6757           E8         FE57            call	_get_font_access
25487                                           !BCC_EOS
25488                                           ! 3502  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25489                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25490 675A           8A46         0E            mov	al,$E[bp]
25491 675D           24                     04  and	al,*4
25492                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25493 675F           30E4                       xor	ah,ah
25494 6761           88C4                       mov	ah,al
25495 6763           30C0                       xor	al,al
25496 6765           B1                     03  mov	cl,*3
25497 6767           D3E0                       shl	ax,cl
25498 6769           50                         push	ax
25499                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25500 676A           8A46         0E            mov	al,$E[bp]
25501 676D           24                     03  and	al,*3
25502                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25503 676F           30E4                       xor	ah,ah
25504 6771           88C4                       mov	ah,al
25505 6773           30C0                       xor	al,al
25506 6775           B1                     06  mov	cl,*6
25507 6777           D3E0                       shl	ax,cl
25508                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25509 6779           0346         F6            add	ax,-$A[bp]
25510 677C           44                         inc	sp
25511 677D           44                         inc	sp
25512                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25513 677E           8946         FE            mov	-2[bp],ax
25514                                           !BCC_EOS
25515                                           ! 3503  for(i=0;i<CX;i++)
25516                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25517 6781           31C0                       xor	ax,ax
25518 6783           8946         FA            mov	-6[bp],ax
25519                                           !BCC_EOS
25520                                           !BCC_EOS
25521                                           ! 3504   {
25522 6786           EB           44            jmp .213
25523                       00006788            .214:
25524                                           ! 3505    src = BP + i * BH;
25525                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25526 6788           8A46         10            mov	al,$10[bp]
25527 678B           30E4                       xor	ah,ah
25528 678D           89C3                       mov	bx,ax
25529 678F           8B46         FA            mov	ax,-6[bp]
25530 6792           89D9                       mov	cx,bx
25531 6794           F7E9                       imul	cx
25532                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25533                                           ! Debug: expression subtree swapping
25534 6796           0346         08            add	ax,8[bp]
25535                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25536 6799           8946         F8            mov	-8[bp],ax
25537                                           !BCC_EOS
25538                                           ! 3506    dest = blockaddr + (DX + i) * 32;
25539                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25540 679C           8B46         0C            mov	ax,$C[bp]
25541 679F           0346         FA            add	ax,-6[bp]
25542                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25543 67A2           B1                     05  mov	cl,*5
25544 67A4           D3E0                       shl	ax,cl
25545                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25546                                           ! Debug: expression subtree swapping
25547 67A6           0346         FE            add	ax,-2[bp]
25548                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25549 67A9           8946         FC            mov	-4[bp],ax
25550                                           !BCC_EOS
25551                                           ! 3507    memcpyb(0xA000, dest, ES, src, BH);
25552                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25553 67AC           8A46         10            mov	al,$10[bp]
25554 67AF           30E4                       xor	ah,ah
25555 67B1           50                         push	ax
25556                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25557 67B2           FF76         F8            push	-8[bp]
25558                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25559 67B5           FF76         06            push	6[bp]
25560                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25561 67B8           FF76         FC            push	-4[bp]
25562                                           ! Debug: list unsigned int = const $A000 (used reg = )
25563 67BB           B8                   A000  mov	ax,#$A000
25564 67BE           50                         push	ax
25565                                           ! Debug: func () void = memcpyb+0 (used reg = )
25566 67BF           E8         138F            call	_memcpyb
25567 67C2           83C4                   0A  add	sp,*$A
25568                                           !BCC_EOS
25569                                           ! 3508   }
25570                                           ! 3509  release_font_access();
25571                       000067C5            .212:
25572                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25573 67C5           8B46         FA            mov	ax,-6[bp]
25574 67C8           40                         inc	ax
25575 67C9           8946         FA            mov	-6[bp],ax
25576                       000067CC            .213:
25577                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25578 67CC           8B46         FA            mov	ax,-6[bp]
25579 67CF           3B46         0A            cmp	ax,$A[bp]
25580 67D2           72           B4            jb 	.214
25581                       000067D4            .215:
25582                       000067D4            .211:
25583                                           ! Debug: func () void = release_font_access+0 (used reg = )
25584 67D4           E8         FDFD            call	_release_font_access
25585                                           !BCC_EOS
25586                                           ! 3510  if(AL>=0x10)
25587                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25588 67D7           8A46         04            mov	al,4[bp]
25589 67DA           3C                     10  cmp	al,*$10
25590 67DC           72           0B            jb  	.216
25591                       000067DE            .217:
25592                                           ! 3511   {
25593                                           ! 3512    set_scan_lines(BH);
25594                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25595 67DE           8A46         10            mov	al,$10[bp]
25596 67E1           30E4                       xor	ah,ah
25597 67E3           50                         push	ax
25598                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25599 67E4           E8         FE21            call	_set_scan_lines
25600 67E7           44                         inc	sp
25601 67E8           44                         inc	sp
25602                                           !BCC_EOS
25603                                           ! 3513   }
25604                                           ! 3514 }
25605                       000067E9            .216:
25606 67E9           89EC                       mov	sp,bp
25607 67EB           5D                         pop	bp
25608 67EC           C3                         ret
25609                                           ! 3515 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25610                                           ! Register BX used in function biosfn_load_text_user_pat
25611                       000067ED            _biosfn_load_text_8_14_pat:
25612                                           !BCC_EOS
25613                                           !BCC_EOS
25614                                           ! 3516 {
25615                                           ! 3517  Bit16u blockaddr,dest,i,src;
25616                                           !BCC_EOS
25617                                           ! 3518  get_font_access();
25618 67ED           55                         push	bp
25619 67EE           89E5                       mov	bp,sp
25620 67F0           83C4                   F8  add	sp,*-8
25621                                           ! Debug: func () void = get_font_access+0 (used reg = )
25622 67F3           E8         FDBB            call	_get_font_access
25623                                           !BCC_EOS
25624                                           ! 3519  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25625                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25626 67F6           8A46         06            mov	al,6[bp]
25627 67F9           24                     04  and	al,*4
25628                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25629 67FB           30E4                       xor	ah,ah
25630 67FD           88C4                       mov	ah,al
25631 67FF           30C0                       xor	al,al
25632 6801           B1                     03  mov	cl,*3
25633 6803           D3E0                       shl	ax,cl
25634 6805           50                         push	ax
25635                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25636 6806           8A46         06            mov	al,6[bp]
25637 6809           24                     03  and	al,*3
25638                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25639 680B           30E4                       xor	ah,ah
25640 680D           88C4                       mov	ah,al
25641 680F           30C0                       xor	al,al
25642 6811           B1                     06  mov	cl,*6
25643 6813           D3E0                       shl	ax,cl
25644                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25645 6815           0346         F6            add	ax,-$A[bp]
25646 6818           44                         inc	sp
25647 6819           44                         inc	sp
25648                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25649 681A           8946         FE            mov	-2[bp],ax
25650                                           !BCC_EOS
25651                                           ! 3520  for(i=0;i<0x100;i++)
25652                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25653 681D           31C0                       xor	ax,ax
25654 681F           8946         FA            mov	-6[bp],ax
25655                                           !BCC_EOS
25656                                           !BCC_EOS
25657                                           ! 3521   {
25658 6822           EB           41            jmp .21A
25659                       00006824            .21B:
25660                                           ! 3522    src = i * 14;
25661                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25662 6824           8B46         FA            mov	ax,-6[bp]
25663 6827           89C2                       mov	dx,ax
25664 6829           B1                     03  mov	cl,*3
25665 682B           D3E0                       shl	ax,cl
25666 682D           29D0                       sub	ax,dx
25667 682F           D1E0                       shl	ax,*1
25668                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25669 6831           8946         F8            mov	-8[bp],ax
25670                                           !BCC_EOS
25671                                           ! 3523    dest = blockaddr + i * 32;
25672                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25673 6834           8B46         FA            mov	ax,-6[bp]
25674 6837           B1                     05  mov	cl,*5
25675 6839           D3E0                       shl	ax,cl
25676                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25677                                           ! Debug: expression subtree swapping
25678 683B           0346         FE            add	ax,-2[bp]
25679                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25680 683E           8946         FC            mov	-4[bp],ax
25681                                           !BCC_EOS
25682                                           ! 3524    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25683                                           ! Debug: list int = const $E (used reg = )
25684 6841           B8                   000E  mov	ax,*$E
25685 6844           50                         push	ax
25686                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25687 6845           8B5E         F8            mov	bx,-8[bp]
25688                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25689                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25690 6848           81C3                 1761  add	bx,#_vgafont14
25691 684C           53                         push	bx
25692                                           ! Debug: list unsigned int = const $C000 (used reg = )
25693 684D           B8                   C000  mov	ax,#$C000
25694 6850           50                         push	ax
25695                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25696 6851           FF76         FC            push	-4[bp]
25697                                           ! Debug: list unsigned int = const $A000 (used reg = )
25698 6854           B8                   A000  mov	ax,#$A000
25699 6857           50                         push	ax
25700                                           ! Debug: func () void = memcpyb+0 (used reg = )
25701 6858           E8         12F6            call	_memcpyb
25702 685B           83C4                   0A  add	sp,*$A
25703                                           !BCC_EOS
25704                                           ! 3525   }
25705                                           ! 3526  release_font_access();
25706                       0000685E            .219:
25707                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25708 685E           8B46         FA            mov	ax,-6[bp]
25709 6861           40                         inc	ax
25710 6862           8946         FA            mov	-6[bp],ax
25711                       00006865            .21A:
25712                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25713 6865           8B46         FA            mov	ax,-6[bp]
25714 6868           3D                   0100  cmp	ax,#$100
25715 686B           72           B7            jb 	.21B
25716                       0000686D            .21C:
25717                       0000686D            .218:
25718                                           ! Debug: func () void = release_font_access+0 (used reg = )
25719 686D           E8         FD64            call	_release_font_access
25720                                           !BCC_EOS
25721                                           ! 3527  if(AL>=0x10)
25722                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25723 6870           8A46         04            mov	al,4[bp]
25724 6873           3C                     10  cmp	al,*$10
25725 6875           72           09            jb  	.21D
25726                       00006877            .21E:
25727                                           ! 3528   {
25728                                           ! 3529    set_scan_lines(14);
25729                                           ! Debug: list int = const $E (used reg = )
25730 6877           B8                   000E  mov	ax,*$E
25731 687A           50                         push	ax
25732                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25733 687B           E8         FD8A            call	_set_scan_lines
25734 687E           44                         inc	sp
25735 687F           44                         inc	sp
25736                                           !BCC_EOS
25737                                           ! 3530   }
25738                                           ! 3531 }
25739                       00006880            .21D:
25740 6880           89EC                       mov	sp,bp
25741 6882           5D                         pop	bp
25742 6883           C3                         ret
25743                                           ! 3532 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25744                                           ! Register BX used in function biosfn_load_text_8_14_pat
25745                       00006884            _biosfn_load_text_8_8_pat:
25746                                           !BCC_EOS
25747                                           !BCC_EOS
25748                                           ! 3533 {
25749                                           ! 3534  Bit16u blockaddr,dest,i,src;
25750                                           !BCC_EOS
25751                                           ! 3535  get_font_access();
25752 6884           55                         push	bp
25753 6885           89E5                       mov	bp,sp
25754 6887           83C4                   F8  add	sp,*-8
25755                                           ! Debug: func () void = get_font_access+0 (used reg = )
25756 688A           E8         FD24            call	_get_font_access
25757                                           !BCC_EOS
25758                                           ! 3536  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25759                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25760 688D           8A46         06            mov	al,6[bp]
25761 6890           24                     04  and	al,*4
25762                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25763 6892           30E4                       xor	ah,ah
25764 6894           88C4                       mov	ah,al
25765 6896           30C0                       xor	al,al
25766 6898           B1                     03  mov	cl,*3
25767 689A           D3E0                       shl	ax,cl
25768 689C           50                         push	ax
25769                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25770 689D           8A46         06            mov	al,6[bp]
25771 68A0           24                     03  and	al,*3
25772                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25773 68A2           30E4                       xor	ah,ah
25774 68A4           88C4                       mov	ah,al
25775 68A6           30C0                       xor	al,al
25776 68A8           B1                     06  mov	cl,*6
25777 68AA           D3E0                       shl	ax,cl
25778                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25779 68AC           0346         F6            add	ax,-$A[bp]
25780 68AF           44                         inc	sp
25781 68B0           44                         inc	sp
25782                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25783 68B1           8946         FE            mov	-2[bp],ax
25784                                           !BCC_EOS
25785                                           ! 3537  for(i=0;i<0x100;i++)
25786                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25787 68B4           31C0                       xor	ax,ax
25788 68B6           8946         FA            mov	-6[bp],ax
25789                                           !BCC_EOS
25790                                           !BCC_EOS
25791                                           ! 3538   {
25792 68B9           EB           3B            jmp .221
25793                       000068BB            .222:
25794                                           ! 3539    src = i * 8;
25795                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25796 68BB           8B46         FA            mov	ax,-6[bp]
25797 68BE           B1                     03  mov	cl,*3
25798 68C0           D3E0                       shl	ax,cl
25799                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25800 68C2           8946         F8            mov	-8[bp],ax
25801                                           !BCC_EOS
25802                                           ! 3540    dest = blockaddr + i * 32;
25803                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25804 68C5           8B46         FA            mov	ax,-6[bp]
25805 68C8           B1                     05  mov	cl,*5
25806 68CA           D3E0                       shl	ax,cl
25807                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25808                                           ! Debug: expression subtree swapping
25809 68CC           0346         FE            add	ax,-2[bp]
25810                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25811 68CF           8946         FC            mov	-4[bp],ax
25812                                           !BCC_EOS
25813                                           ! 3541    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25814                                           ! Debug: list int = const 8 (used reg = )
25815 68D2           B8                   0008  mov	ax,*8
25816 68D5           50                         push	ax
25817                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25818 68D6           8B5E         F8            mov	bx,-8[bp]
25819                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25820                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25821 68D9           81C3                 0F61  add	bx,#_vgafont8
25822 68DD           53                         push	bx
25823                                           ! Debug: list unsigned int = const $C000 (used reg = )
25824 68DE           B8                   C000  mov	ax,#$C000
25825 68E1           50                         push	ax
25826                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25827 68E2           FF76         FC            push	-4[bp]
25828                                           ! Debug: list unsigned int = const $A000 (used reg = )
25829 68E5           B8                   A000  mov	ax,#$A000
25830 68E8           50                         push	ax
25831                                           ! Debug: func () void = memcpyb+0 (used reg = )
25832 68E9           E8         1265            call	_memcpyb
25833 68EC           83C4                   0A  add	sp,*$A
25834                                           !BCC_EOS
25835                                           ! 3542   }
25836                                           ! 3543  release_font_access();
25837                       000068EF            .220:
25838                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25839 68EF           8B46         FA            mov	ax,-6[bp]
25840 68F2           40                         inc	ax
25841 68F3           8946         FA            mov	-6[bp],ax
25842                       000068F6            .221:
25843                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25844 68F6           8B46         FA            mov	ax,-6[bp]
25845 68F9           3D                   0100  cmp	ax,#$100
25846 68FC           72           BD            jb 	.222
25847                       000068FE            .223:
25848                       000068FE            .21F:
25849                                           ! Debug: func () void = release_font_access+0 (used reg = )
25850 68FE           E8         FCD3            call	_release_font_access
25851                                           !BCC_EOS
25852                                           ! 3544  if(AL>=0x10)
25853                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25854 6901           8A46         04            mov	al,4[bp]
25855 6904           3C                     10  cmp	al,*$10
25856 6906           72           09            jb  	.224
25857                       00006908            .225:
25858                                           ! 3545   {
25859                                           ! 3546    set_scan_lines(8);
25860                                           ! Debug: list int = const 8 (used reg = )
25861 6908           B8                   0008  mov	ax,*8
25862 690B           50                         push	ax
25863                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25864 690C           E8         FCF9            call	_set_scan_lines
25865 690F           44                         inc	sp
25866 6910           44                         inc	sp
25867                                           !BCC_EOS
25868                                           ! 3547   }
25869                                           ! 3548 }
25870                       00006911            .224:
25871 6911           89EC                       mov	sp,bp
25872 6913           5D                         pop	bp
25873 6914           C3                         ret
25874                                           ! 3549 #asm
25875                                           !BCC_ASM
25876                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25877                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25878                       00006915            biosfn_set_text_block_specifier:
25879 6915           50                           push ax
25880 6916           52                           push dx
25881 6917           BA                   03C4    mov dx, # 0x3c4
25882 691A           88DC                         mov ah, bl
25883 691C           B0                     03    mov al, #0x03
25884 691E           EF                           out dx, ax
25885 691F           5A                           pop dx
25886 6920           58                           pop ax
25887 6921           C3                           ret
25888                                           ! 3560 endasm
25889                                           !BCC_ENDASM
25890                                           ! 3561 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25891                                           ! Register BX used in function biosfn_load_text_8_8_pat
25892                       00006922            _biosfn_load_text_8_16_pat:
25893                                           !BCC_EOS
25894                                           !BCC_EOS
25895                                           ! 3562 {
25896                                           ! 3563  Bit16u blockaddr,dest,i,src;
25897                                           !BCC_EOS
25898                                           ! 3564  get_font_access();
25899 6922           55                         push	bp
25900 6923           89E5                       mov	bp,sp
25901 6925           83C4                   F8  add	sp,*-8
25902                                           ! Debug: func () void = get_font_access+0 (used reg = )
25903 6928           E8         FC86            call	_get_font_access
25904                                           !BCC_EOS
25905                                           ! 3565  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25906                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25907 692B           8A46         06            mov	al,6[bp]
25908 692E           24                     04  and	al,*4
25909                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25910 6930           30E4                       xor	ah,ah
25911 6932           88C4                       mov	ah,al
25912 6934           30C0                       xor	al,al
25913 6936           B1                     03  mov	cl,*3
25914 6938           D3E0                       shl	ax,cl
25915 693A           50                         push	ax
25916                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25917 693B           8A46         06            mov	al,6[bp]
25918 693E           24                     03  and	al,*3
25919                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25920 6940           30E4                       xor	ah,ah
25921 6942           88C4                       mov	ah,al
25922 6944           30C0                       xor	al,al
25923 6946           B1                     06  mov	cl,*6
25924 6948           D3E0                       shl	ax,cl
25925                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25926 694A           0346         F6            add	ax,-$A[bp]
25927 694D           44                         inc	sp
25928 694E           44                         inc	sp
25929                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25930 694F           8946         FE            mov	-2[bp],ax
25931                                           !BCC_EOS
25932                                           ! 3566  for(i=0;i<0x100;i++)
25933                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25934 6952           31C0                       xor	ax,ax
25935 6954           8946         FA            mov	-6[bp],ax
25936                                           !BCC_EOS
25937                                           !BCC_EOS
25938                                           ! 3567   {
25939 6957           EB           3B            jmp .228
25940                       00006959            .229:
25941                                           ! 3568    src = i * 16;
25942                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25943 6959           8B46         FA            mov	ax,-6[bp]
25944 695C           B1                     04  mov	cl,*4
25945 695E           D3E0                       shl	ax,cl
25946                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25947 6960           8946         F8            mov	-8[bp],ax
25948                                           !BCC_EOS
25949                                           ! 3569    dest = blockaddr + i * 32;
25950                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25951 6963           8B46         FA            mov	ax,-6[bp]
25952 6966           B1                     05  mov	cl,*5
25953 6968           D3E0                       shl	ax,cl
25954                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25955                                           ! Debug: expression subtree swapping
25956 696A           0346         FE            add	ax,-2[bp]
25957                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25958 696D           8946         FC            mov	-4[bp],ax
25959                                           !BCC_EOS
25960                                           ! 3570    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25961                                           ! Debug: list int = const $10 (used reg = )
25962 6970           B8                   0010  mov	ax,*$10
25963 6973           50                         push	ax
25964                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25965 6974           8B5E         F8            mov	bx,-8[bp]
25966                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25967                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25968 6977           81C3                 2561  add	bx,#_vgafont16
25969 697B           53                         push	bx
25970                                           ! Debug: list unsigned int = const $C000 (used reg = )
25971 697C           B8                   C000  mov	ax,#$C000
25972 697F           50                         push	ax
25973                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25974 6980           FF76         FC            push	-4[bp]
25975                                           ! Debug: list unsigned int = const $A000 (used reg = )
25976 6983           B8                   A000  mov	ax,#$A000
25977 6986           50                         push	ax
25978                                           ! Debug: func () void = memcpyb+0 (used reg = )
25979 6987           E8         11C7            call	_memcpyb
25980 698A           83C4                   0A  add	sp,*$A
25981                                           !BCC_EOS
25982                                           ! 3571   }
25983                                           ! 3572  release_font_access();
25984                       0000698D            .227:
25985                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25986 698D           8B46         FA            mov	ax,-6[bp]
25987 6990           40                         inc	ax
25988 6991           8946         FA            mov	-6[bp],ax
25989                       00006994            .228:
25990                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25991 6994           8B46         FA            mov	ax,-6[bp]
25992 6997           3D                   0100  cmp	ax,#$100
25993 699A           72           BD            jb 	.229
25994                       0000699C            .22A:
25995                       0000699C            .226:
25996                                           ! Debug: func () void = release_font_access+0 (used reg = )
25997 699C           E8         FC35            call	_release_font_access
25998                                           !BCC_EOS
25999                                           ! 3573  if(AL>=0x10)
26000                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26001 699F           8A46         04            mov	al,4[bp]
26002 69A2           3C                     10  cmp	al,*$10
26003 69A4           72           09            jb  	.22B
26004                       000069A6            .22C:
26005                                           ! 3574   {
26006                                           ! 3575    set_scan_lines(16);
26007                                           ! Debug: list int = const $10 (used reg = )
26008 69A6           B8                   0010  mov	ax,*$10
26009 69A9           50                         push	ax
26010                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26011 69AA           E8         FC5B            call	_set_scan_lines
26012 69AD           44                         inc	sp
26013 69AE           44                         inc	sp
26014                                           !BCC_EOS
26015                                           ! 3576   }
26016                                           ! 3577 }
26017                       000069AF            .22B:
26018 69AF           89EC                       mov	sp,bp
26019 69B1           5D                         pop	bp
26020 69B2           C3                         ret
26021                                           ! 3578 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26022                                           ! Register BX used in function biosfn_load_text_8_16_pat
26023                       000069B3            _biosfn_load_gfx_8_8_chars:
26024                                           !BCC_EOS
26025                                           !BCC_EOS
26026                                           ! 3579 {
26027                                           ! 3580 }
26028 69B3           C3                         ret
26029                                           ! 3581 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26030                       000069B4            _biosfn_load_gfx_user_chars:
26031                                           !BCC_EOS
26032                                           !BCC_EOS
26033                                           !BCC_EOS
26034                                           !BCC_EOS
26035                                           !BCC_EOS
26036                                           ! 3582 {
26037                                           ! 3583 }
26038 69B4           C3                         ret
26039                                           ! 3584 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26040                       000069B5            _biosfn_load_gfx_8_14_chars:
26041                                           !BCC_EOS
26042                                           ! 3585 {
26043                                           ! 3586 }
26044 69B5           C3                         ret
26045                                           ! 3587 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26046                       000069B6            _biosfn_load_gfx_8_8_dd_chars:
26047                                           !BCC_EOS
26048                                           ! 3588 {
26049                                           ! 3589 }
26050 69B6           C3                         ret
26051                                           ! 3590 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26052                       000069B7            _biosfn_load_gfx_8_16_chars:
26053                                           !BCC_EOS
26054                                           ! 3591 {
26055                                           ! 3592 }
26056 69B7           C3                         ret
26057                                           ! 3593 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26058                                           ! 3594 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26059                       000069B8            _biosfn_get_font_info:
26060                                           !BCC_EOS
26061                                           !BCC_EOS
26062                                           !BCC_EOS
26063                                           !BCC_EOS
26064                                           !BCC_EOS
26065                                           ! 3595 {Bit16u ss=get_SS();
26066 69B8           55                         push	bp
26067 69B9           89E5                       mov	bp,sp
26068 69BB           4C                         dec	sp
26069 69BC           4C                         dec	sp
26070                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26071 69BD           E8         127D            call	_get_SS
26072                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26073 69C0           8946         FE            mov	-2[bp],ax
26074                                           !BCC_EOS
26075                                           ! 3596  switch(BH)
26076 69C3           8A46         04            mov	al,4[bp]
26077                                           ! 3597   {case 0x00:
26078 69C6           E9         0143            br 	.22F
26079                                           ! 3598   
26080                                           ! 3598   write_word(ss,ES,read_word(0x00,0x1f*4));
26081                       000069C9            .230:
26082                                           ! Debug: list int = const $7C (used reg = )
26083 69C9           B8                   007C  mov	ax,*$7C
26084 69CC           50                         push	ax
26085                                           ! Debug: list int = const 0 (used reg = )
26086 69CD           31C0                       xor	ax,ax
26087 69CF           50                         push	ax
26088                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26089 69D0           E8         11F1            call	_read_word
26090 69D3           83C4                   04  add	sp,*4
26091                                           ! Debug: list unsigned short = ax+0 (used reg = )
26092 69D6           50                         push	ax
26093                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26094 69D7           FF76         06            push	6[bp]
26095                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26096 69DA           FF76         FE            push	-2[bp]
26097                                           ! Debug: func () void = write_word+0 (used reg = )
26098 69DD           E8         120F            call	_write_word
26099 69E0           83C4                   06  add	sp,*6
26100                                           !BCC_EOS
26101                                           ! 3599     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26102                                           ! Debug: list int = const $7E (used reg = )
26103 69E3           B8                   007E  mov	ax,*$7E
26104 69E6           50                         push	ax
26105                                           ! Debug: list int = const 0 (used reg = )
26106 69E7           31C0                       xor	ax,ax
26107 69E9           50                         push	ax
26108                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26109 69EA           E8         11D7            call	_read_word
26110 69ED           83C4                   04  add	sp,*4
26111                                           ! Debug: list unsigned short = ax+0 (used reg = )
26112 69F0           50                         push	ax
26113                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26114 69F1           FF76         08            push	8[bp]
26115                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26116 69F4           FF76         FE            push	-2[bp]
26117                                           ! Debug: func () void = write_word+0 (used reg = )
26118 69F7           E8         11F5            call	_write_word
26119 69FA           83C4                   06  add	sp,*6
26120                                           !BCC_EOS
26121                                           ! 3600     break;
26122 69FD           E9         0131            br 	.22D
26123                                           !BCC_EOS
26124                                           ! 3601    case 0x01:
26125                                           ! 3602     write_word(ss,ES,read_word(0x00,0x43*4));
26126                       00006A00            .231:
26127                                           ! Debug: list int = const $10C (used reg = )
26128 6A00           B8                   010C  mov	ax,#$10C
26129 6A03           50                         push	ax
26130                                           ! Debug: list int = const 0 (used reg = )
26131 6A04           31C0                       xor	ax,ax
26132 6A06           50                         push	ax
26133                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26134 6A07           E8         11BA            call	_read_word
26135 6A0A           83C4                   04  add	sp,*4
26136                                           ! Debug: list unsigned short = ax+0 (used reg = )
26137 6A0D           50                         push	ax
26138                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26139 6A0E           FF76         06            push	6[bp]
26140                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26141 6A11           FF76         FE            push	-2[bp]
26142                                           ! Debug: func () void = write_word+0 (used reg = )
26143 6A14           E8         11D8            call	_write_word
26144 6A17           83C4                   06  add	sp,*6
26145                                           !BCC_EOS
26146                                           ! 3603     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26147                                           ! Debug: list int = const $10E (used reg = )
26148 6A1A           B8                   010E  mov	ax,#$10E
26149 6A1D           50                         push	ax
26150                                           ! Debug: list int = const 0 (used reg = )
26151 6A1E           31C0                       xor	ax,ax
26152 6A20           50                         push	ax
26153                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26154 6A21           E8         11A0            call	_read_word
26155 6A24           83C4                   04  add	sp,*4
26156                                           ! Debug: list unsigned short = ax+0 (used reg = )
26157 6A27           50                         push	ax
26158                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26159 6A28           FF76         08            push	8[bp]
26160                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26161 6A2B           FF76         FE            push	-2[bp]
26162                                           ! Debug: func () void = write_word+0 (used reg = )
26163 6A2E           E8         11BE            call	_write_word
26164 6A31           83C4                   06  add	sp,*6
26165                                           !BCC_EOS
26166                                           ! 3604     break;
26167 6A34           E9         00FA            br 	.22D
26168                                           !BCC_EOS
26169                                           ! 3605    case 0x02:
26170                                           ! 3606     write_word(ss,ES,0xC000);
26171                       00006A37            .232:
26172                                           ! Debug: list unsigned int = const $C000 (used reg = )
26173 6A37           B8                   C000  mov	ax,#$C000
26174 6A3A           50                         push	ax
26175                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26176 6A3B           FF76         06            push	6[bp]
26177                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26178 6A3E           FF76         FE            push	-2[bp]
26179                                           ! Debug: func () void = write_word+0 (used reg = )
26180 6A41           E8         11AB            call	_write_word
26181 6A44           83C4                   06  add	sp,*6
26182                                           !BCC_EOS
26183                                           ! 3607     write_word(ss,BP,vgafont14);
26184                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26185 6A47           BB                   1761  mov	bx,#_vgafont14
26186 6A4A           53                         push	bx
26187                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26188 6A4B           FF76         08            push	8[bp]
26189                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26190 6A4E           FF76         FE            push	-2[bp]
26191                                           ! Debug: func () void = write_word+0 (used reg = )
26192 6A51           E8         119B            call	_write_word
26193 6A54           83C4                   06  add	sp,*6
26194                                           !BCC_EOS
26195                                           ! 3608     break;
26196 6A57           E9         00D7            br 	.22D
26197                                           !BCC_EOS
26198                                           ! 3609    case 0x03:
26199                                           ! 3610     write_word(ss,ES,0xC000);
26200                       00006A5A            .233:
26201                                           ! Debug: list unsigned int = const $C000 (used reg = )
26202 6A5A           B8                   C000  mov	ax,#$C000
26203 6A5D           50                         push	ax
26204                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26205 6A5E           FF76         06            push	6[bp]
26206                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26207 6A61           FF76         FE            push	-2[bp]
26208                                           ! Debug: func () void = write_word+0 (used reg = )
26209 6A64           E8         1188            call	_write_word
26210 6A67           83C4                   06  add	sp,*6
26211                                           !BCC_EOS
26212                                           ! 3611     write_word(ss,BP,vgafont8);
26213                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26214 6A6A           BB                   0F61  mov	bx,#_vgafont8
26215 6A6D           53                         push	bx
26216                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26217 6A6E           FF76         08            push	8[bp]
26218                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26219 6A71           FF76         FE            push	-2[bp]
26220                                           ! Debug: func () void = write_word+0 (used reg = )
26221 6A74           E8         1178            call	_write_word
26222 6A77           83C4                   06  add	sp,*6
26223                                           !BCC_EOS
26224                                           ! 3612     break;
26225 6A7A           E9         00B4            br 	.22D
26226                                           !BCC_EOS
26227                                           ! 3613    case 0x04:
26228                                           ! 3614     write_word(ss,ES,0xC000);
26229                       00006A7D            .234:
26230                                           ! Debug: list unsigned int = const $C000 (used reg = )
26231 6A7D           B8                   C000  mov	ax,#$C000
26232 6A80           50                         push	ax
26233                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26234 6A81           FF76         06            push	6[bp]
26235                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26236 6A84           FF76         FE            push	-2[bp]
26237                                           ! Debug: func () void = write_word+0 (used reg = )
26238 6A87           E8         1165            call	_write_word
26239 6A8A           83C4                   06  add	sp,*6
26240                                           !BCC_EOS
26241                                           ! 3615     write_word(ss,BP,vgafont8+128*8);
26242                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26243 6A8D           BB                   1361  mov	bx,#_vgafont8+$400
26244 6A90           53                         push	bx
26245                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26246 6A91           FF76         08            push	8[bp]
26247                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26248 6A94           FF76         FE            push	-2[bp]
26249                                           ! Debug: func () void = write_word+0 (used reg = )
26250 6A97           E8         1155            call	_write_word
26251 6A9A           83C4                   06  add	sp,*6
26252                                           !BCC_EOS
26253                                           ! 3616     break;
26254 6A9D           E9         0091            br 	.22D
26255                                           !BCC_EOS
26256                                           ! 3617    case 0x05:
26257                                           ! 3618     write_word(ss,ES,0xC000);
26258                       00006AA0            .235:
26259                                           ! Debug: list unsigned int = const $C000 (used reg = )
26260 6AA0           B8                   C000  mov	ax,#$C000
26261 6AA3           50                         push	ax
26262                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26263 6AA4           FF76         06            push	6[bp]
26264                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26265 6AA7           FF76         FE            push	-2[bp]
26266                                           ! Debug: func () void = write_word+0 (used reg = )
26267 6AAA           E8         1142            call	_write_word
26268 6AAD           83C4                   06  add	sp,*6
26269                                           !BCC_EOS
26270                                           ! 3619     write_word(ss,BP,vgafont14alt);
26271                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26272 6AB0           BB                   3561  mov	bx,#_vgafont14alt
26273 6AB3           53                         push	bx
26274                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26275 6AB4           FF76         08            push	8[bp]
26276                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26277 6AB7           FF76         FE            push	-2[bp]
26278                                           ! Debug: func () void = write_word+0 (used reg = )
26279 6ABA           E8         1132            call	_write_word
26280 6ABD           83C4                   06  add	sp,*6
26281                                           !BCC_EOS
26282                                           ! 3620     break;
26283 6AC0           EB           6F            jmp .22D
26284                                           !BCC_EOS
26285                                           ! 3621    case 0x06:
26286                                           ! 3622     write_word(ss,ES,0xC000);
26287                       00006AC2            .236:
26288                                           ! Debug: list unsigned int = const $C000 (used reg = )
26289 6AC2           B8                   C000  mov	ax,#$C000
26290 6AC5           50                         push	ax
26291                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26292 6AC6           FF76         06            push	6[bp]
26293                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26294 6AC9           FF76         FE            push	-2[bp]
26295                                           ! Debug: func () void = write_word+0 (used reg = )
26296 6ACC           E8         1120            call	_write_word
26297 6ACF           83C4                   06  add	sp,*6
26298                                           !BCC_EOS
26299                                           ! 3623     write_word(ss,BP,vgafont16);
26300                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26301 6AD2           BB                   2561  mov	bx,#_vgafont16
26302 6AD5           53                         push	bx
26303                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26304 6AD6           FF76         08            push	8[bp]
26305                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26306 6AD9           FF76         FE            push	-2[bp]
26307                                           ! Debug: func () void = write_word+0 (used reg = )
26308 6ADC           E8         1110            call	_write_word
26309 6ADF           83C4                   06  add	sp,*6
26310                                           !BCC_EOS
26311                                           ! 3624     break;
26312 6AE2           EB           4D            jmp .22D
26313                                           !BCC_EOS
26314                                           ! 3625    case 0x07:
26315                                           ! 3626     write_word(ss,ES,0xC000);
26316                       00006AE4            .237:
26317                                           ! Debug: list unsigned int = const $C000 (used reg = )
26318 6AE4           B8                   C000  mov	ax,#$C000
26319 6AE7           50                         push	ax
26320                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26321 6AE8           FF76         06            push	6[bp]
26322                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26323 6AEB           FF76         FE            push	-2[bp]
26324                                           ! Debug: func () void = write_word+0 (used reg = )
26325 6AEE           E8         10FE            call	_write_word
26326 6AF1           83C4                   06  add	sp,*6
26327                                           !BCC_EOS
26328                                           ! 3627     write_word(ss,BP,vgafont16alt);
26329                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26330 6AF4           BB                   3562  mov	bx,#_vgafont16alt
26331 6AF7           53                         push	bx
26332                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26333 6AF8           FF76         08            push	8[bp]
26334                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26335 6AFB           FF76         FE            push	-2[bp]
26336                                           ! Debug: func () void = write_word+0 (used reg = )
26337 6AFE           E8         10EE            call	_write_word
26338 6B01           83C4                   06  add	sp,*6
26339                                           !BCC_EOS
26340                                           ! 3628     break;
26341 6B04           EB           2B            jmp .22D
26342                                           !BCC_EOS
26343                                           ! 3629    default:
26344                                           ! 3630     return;
26345                       00006B06            .238:
26346 6B06           89EC                       mov	sp,bp
26347 6B08           5D                         pop	bp
26348 6B09           C3                         ret
26349                                           !BCC_EOS
26350                                           ! 3631   }
26351                                           ! 3632  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26352 6B0A           EB           25            jmp .22D
26353                       00006B0C            .22F:
26354 6B0C           2C                     00  sub	al,*0
26355 6B0E           72           F6            jb 	.238
26356 6B10           3C                     07  cmp	al,*7
26357 6B12           77           1B            ja  	.239
26358 6B14           30E4                       xor	ah,ah
26359 6B16           D1E0                       shl	ax,*1
26360 6B18           89C3                       mov	bx,ax
26361 6B1A           2E                         seg	cs
26362 6B1B           FFA7       6B1F            br	.23A[bx]
26363                       00006B1F            .23A:
26364 6B1F                      69C9            .word	.230
26365 6B21                      6A00            .word	.231
26366 6B23                      6A37            .word	.232
26367 6B25                      6A5A            .word	.233
26368 6B27                      6A7D            .word	.234
26369 6B29                      6AA0            .word	.235
26370 6B2B                      6AC2            .word	.236
26371 6B2D                      6AE4            .word	.237
26372                       00006B2F            .239:
26373 6B2F           EB           D5            jmp	.238
26374                       00006B31            .22D:
26375                       FFFFFFFC            ..FFF5	=	-4
26376                                           ! Debug: list int = const $85 (used reg = )
26377 6B31           B8                   0085  mov	ax,#$85
26378 6B34           50                         push	ax
26379                                           ! Debug: list int = const $40 (used reg = )
26380 6B35           B8                   0040  mov	ax,*$40
26381 6B38           50                         push	ax
26382                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26383 6B39           E8         1075            call	_read_byte
26384 6B3C           83C4                   04  add	sp,*4
26385                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26386 6B3F           30E4                       xor	ah,ah
26387                                           ! Debug: list unsigned short = ax+0 (used reg = )
26388 6B41           50                         push	ax
26389                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26390 6B42           FF76         0A            push	$A[bp]
26391                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26392 6B45           FF76         FE            push	-2[bp]
26393                                           ! Debug: func () void = write_word+0 (used reg = )
26394 6B48           E8         10A4            call	_write_word
26395 6B4B           83C4                   06  add	sp,*6
26396                                           !BCC_EOS
26397                                           ! 3633  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26398                                           ! Debug: list int = const $84 (used reg = )
26399 6B4E           B8                   0084  mov	ax,#$84
26400 6B51           50                         push	ax
26401                                           ! Debug: list int = const $40 (used reg = )
26402 6B52           B8                   0040  mov	ax,*$40
26403 6B55           50                         push	ax
26404                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26405 6B56           E8         1058            call	_read_byte
26406 6B59           83C4                   04  add	sp,*4
26407                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26408 6B5C           30E4                       xor	ah,ah
26409                                           ! Debug: list unsigned short = ax+0 (used reg = )
26410 6B5E           50                         push	ax
26411                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26412 6B5F           FF76         0C            push	$C[bp]
26413                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26414 6B62           FF76         FE            push	-2[bp]
26415                                           ! Debug: func () void = write_word+0 (used reg = )
26416 6B65           E8         1087            call	_write_word
26417 6B68           83C4                   06  add	sp,*6
26418                                           !BCC_EOS
26419                                           ! 3634 }
26420 6B6B           89EC                       mov	sp,bp
26421 6B6D           5D                         pop	bp
26422 6B6E           C3                         ret
26423                                           ! 3635 #asm
26424                                           !BCC_ASM
26425                       00000006            _biosfn_get_font_info.BP	set	6
26426                       00000002            _biosfn_get_font_info.BH	set	2
26427                       00000008            _biosfn_get_font_info.CX	set	8
26428                       0000000A            _biosfn_get_font_info.DX	set	$A
26429                       00000004            _biosfn_get_font_info.ES	set	4
26430                       00006B6F            biosfn_get_ega_info:
26431 6B6F           1E                           push ds
26432 6B70           50                           push ax
26433 6B71           B8                   0040    mov ax, # 0x40
26434 6B74           8ED8                         mov ds, ax
26435 6B76           30ED                         xor ch, ch
26436 6B78           BB                   0088    mov bx, # 0x88
26437 6B7B           8A0F                         mov cl, [bx]
26438 6B7D           80E1                   0F    and cl, #0x0f
26439 6B80           BB                   0063    mov bx, # 0x63
26440 6B83           8B07                         mov ax, [bx]
26441 6B85           BB                   0003    mov bx, #0x0003
26442 6B88           3D                   03B4    cmp ax, # 0x3b4
26443 6B8B           75           02              jne mode_ega_color
26444 6B8D           B7                     01    mov bh, #0x01
26445                       00006B8F            mode_ega_color:
26446 6B8F           58                           pop ax
26447 6B90           1F                           pop ds
26448 6B91           C3                           ret
26449                                           ! 3655 endasm
26450                                           !BCC_ENDASM
26451                                           ! 3656 static void biosfn_alternate_prtsc()
26452                                           ! Register BX used in function biosfn_get_font_info
26453                                           ! 3657 {
26454                       00006B92            _biosfn_alternate_prtsc:
26455                                           ! 3658 }
26456 6B92           C3                         ret
26457                                           ! 3659 #asm
26458                                           !BCC_ASM
26459                       00006B93            biosfn_select_vert_res:
26460                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26461 6B93           1E                           push ds
26462 6B94           53                           push bx
26463 6B95           52                           push dx
26464 6B96           88C2                         mov dl, al
26465 6B98           B8                   0040    mov ax, # 0x40
26466 6B9B           8ED8                         mov ds, ax
26467 6B9D           BB                   0089    mov bx, # 0x89
26468 6BA0           8A07                         mov al, [bx]
26469 6BA2           BB                   0088    mov bx, # 0x88
26470 6BA5           8A27                         mov ah, [bx]
26471 6BA7           80FA                   01    cmp dl, #0x01
26472 6BAA           74           15              je vert_res_350
26473 6BAC           72           1D              jb vert_res_200
26474 6BAE           80FA                   02    cmp dl, #0x02
26475 6BB1           74           02              je vert_res_400
26476 6BB3           EB           2A              jmp set_retcode
26477                       00006BB5            vert_res_400:
26478                                             ; reset modeset ctl bit 7 and set bit 4
26479                                             ; set switches bit 3-0 to 0x09
26480 6BB5           24                     7F    and al, #0x7f
26481 6BB7           0C                     10    or al, #0x10
26482 6BB9           80E4                   F0    and ah, #0xf0
26483 6BBC           80CC                   09    or ah, #0x09
26484 6BBF           75           14              jnz set_vert_res
26485                       00006BC1            vert_res_350:
26486                                             ; reset modeset ctl bit 7 and bit 4
26487                                             ; set switches bit 3-0 to 0x09
26488 6BC1           24                     6F    and al, #0x6f
26489 6BC3           80E4                   F0    and ah, #0xf0
26490 6BC6           80CC                   09    or ah, #0x09
26491 6BC9           75           0A              jnz set_vert_res
26492                       00006BCB            vert_res_200:
26493                                             ; set modeset ctl bit 7 and reset bit 4
26494                                             ; set switches bit 3-0 to 0x08
26495 6BCB           24                     EF    and al, #0xef
26496 6BCD           0C                     80    or al, #0x80
26497 6BCF           80E4                   F0    and ah, #0xf0
26498 6BD2           80CC                   08    or ah, #0x08
26499                       00006BD5            set_vert_res:
26500 6BD5           BB                   0089    mov bx, # 0x89
26501 6BD8           8807                         mov [bx], al
26502 6BDA           BB                   0088    mov bx, # 0x88
26503 6BDD           8827                         mov [bx], ah
26504                       00006BDF            set_retcode:
26505 6BDF           B8                   1212    mov ax, #0x1212
26506 6BE2           5A                           pop dx
26507 6BE3           5B                           pop bx
26508 6BE4           1F                           pop ds
26509 6BE5           C3                           ret
26510                       00006BE6            biosfn_enable_default_palette_loading:
26511 6BE6           1E                           push ds
26512 6BE7           53                           push bx
26513 6BE8           52                           push dx
26514 6BE9           88C2                         mov dl, al
26515 6BEB           80E2                   01    and dl, #0x01
26516 6BEE           C0E2                   03    shl dl, 3
26517 6BF1           B8                   0040    mov ax, # 0x40
26518 6BF4           8ED8                         mov ds, ax
26519 6BF6           BB                   0089    mov bx, # 0x89
26520 6BF9           8A07                         mov al, [bx]
26521 6BFB           24                     F7    and al, #0xf7
26522 6BFD           08D0                         or al, dl
26523 6BFF           8807                         mov [bx], al
26524 6C01           B8                   1212    mov ax, #0x1212
26525 6C04           5A                           pop dx
26526 6C05           5B                           pop bx
26527 6C06           1F                           pop ds
26528 6C07           C3                           ret
26529                       00006C08            biosfn_enable_video_addressing:
26530 6C08           53                           push bx
26531 6C09           52                           push dx
26532 6C0A           88C3                         mov bl, al
26533 6C0C           80E3                   01    and bl, #0x01
26534 6C0F           80F3                   01    xor bl, #0x01
26535 6C12           D0E3                         shl bl, 1
26536 6C14           BA                   03CC    mov dx, # 0x3cc
26537 6C17           EC                           in al, dx
26538 6C18           24                     FD    and al, #0xfd
26539 6C1A           08D8                         or al, bl
26540 6C1C           BA                   03C2    mov dx, # 0x3c2
26541 6C1F           EE                           out dx, al
26542 6C20           B8                   1212    mov ax, #0x1212
26543 6C23           5A                           pop dx
26544 6C24           5B                           pop bx
26545 6C25           C3                           ret
26546                       00006C26            biosfn_enable_grayscale_summing:
26547 6C26           1E                           push ds
26548 6C27           53                           push bx
26549 6C28           52                           push dx
26550 6C29           88C2                         mov dl, al
26551 6C2B           80E2                   01    and dl, #0x01
26552 6C2E           80F2                   01    xor dl, #0x01
26553 6C31           D0E2                         shl dl, 1
26554 6C33           B8                   0040    mov ax, # 0x40
26555 6C36           8ED8                         mov ds, ax
26556 6C38           BB                   0089    mov bx, # 0x89
26557 6C3B           8A07                         mov al, [bx]
26558 6C3D           24                     FD    and al, #0xfd
26559 6C3F           08D0                         or al, dl
26560 6C41           8807                         mov [bx], al
26561 6C43           B8                   1212    mov ax, #0x1212
26562 6C46           5A                           pop dx
26563 6C47           5B                           pop bx
26564 6C48           1F                           pop ds
26565 6C49           C3                           ret
26566                       00006C4A            biosfn_enable_cursor_emulation:
26567 6C4A           1E                           push ds
26568 6C4B           53                           push bx
26569 6C4C           52                           push dx
26570 6C4D           88C2                         mov dl, al
26571 6C4F           80E2                   01    and dl, #0x01
26572 6C52           80F2                   01    xor dl, #0x01
26573 6C55           B8                   0040    mov ax, # 0x40
26574 6C58           8ED8                         mov ds, ax
26575 6C5A           BB                   0089    mov bx, # 0x89
26576 6C5D           8A07                         mov al, [bx]
26577 6C5F           24                     FE    and al, #0xfe
26578 6C61           08D0                         or al, dl
26579 6C63           8807                         mov [bx], al
26580 6C65           B8                   1212    mov ax, #0x1212
26581 6C68           5A                           pop dx
26582 6C69           5B                           pop bx
26583 6C6A           1F                           pop ds
26584 6C6B           C3                           ret
26585                                           ! 3786 endasm
26586                                           !BCC_ENDASM
26587                                           ! 3787 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26588                       00006C6C            _biosfn_switch_video_interface:
26589                                           !BCC_EOS
26590                                           !BCC_EOS
26591                                           !BCC_EOS
26592                                           ! 3788 {
26593                                           ! 3789 }
26594 6C6C           C3                         ret
26595                                           ! 3790 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26596                       00006C6D            _biosfn_enable_video_refresh_control:
26597                                           !BCC_EOS
26598                                           ! 3791 {
26599                                           ! 3792 }
26600 6C6D           C3                         ret
26601                                           ! 3793 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26602                                           ! 3794 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26603                       00006C6E            _biosfn_write_string:
26604                                           !BCC_EOS
26605                                           !BCC_EOS
26606                                           !BCC_EOS
26607                                           !BCC_EOS
26608                                           !BCC_EOS
26609                                           !BCC_EOS
26610                                           !BCC_EOS
26611                                           !BCC_EOS
26612                                           ! 3795 {
26613                                           ! 3796  Bit16u newcurs,oldcurs,dummy;
26614                                           !BCC_EOS
26615                                           ! 3797  Bit8u car,carattr;
26616                                           !BCC_EOS
26617                                           ! 3798  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26618 6C6E           55                         push	bp
26619 6C6F           89E5                       mov	bp,sp
26620 6C71           83C4                   F8  add	sp,*-8
26621                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26622 6C74           8D5E         FC            lea	bx,-4[bp]
26623 6C77           53                         push	bx
26624                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26625 6C78           8D5E         FA            lea	bx,-6[bp]
26626 6C7B           53                         push	bx
26627                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26628 6C7C           8A46         06            mov	al,6[bp]
26629 6C7F           30E4                       xor	ah,ah
26630 6C81           50                         push	ax
26631                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26632 6C82           E8         D790            call	_biosfn_get_cursor_pos
26633 6C85           83C4                   06  add	sp,*6
26634                                           !BCC_EOS
26635                                           ! 3799  if(row==0xff)
26636                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26637 6C88           8A46         0C            mov	al,$C[bp]
26638 6C8B           3C                     FF  cmp	al,#$FF
26639 6C8D           75           12            jne 	.23B
26640                       00006C8F            .23C:
26641                                           ! 3800   {col=oldcurs&0x00ff;
26642                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26643 6C8F           8A46         FC            mov	al,-4[bp]
26644                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26645 6C92           8846         0E            mov	$E[bp],al
26646                                           !BCC_EOS
26647                                           ! 3801    row=(oldcurs&0xff00)>>8;
26648                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26649 6C95           8B46         FC            mov	ax,-4[bp]
26650 6C98           30C0                       xor	al,al
26651                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26652 6C9A           88E0                       mov	al,ah
26653 6C9C           30E4                       xor	ah,ah
26654                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26655 6C9E           8846         0C            mov	$C[bp],al
26656                                           !BCC_EOS
26657                                           ! 3802   }
26658                                           ! 3803  newcurs=row; newcurs<<=8; newcurs+=col;
26659                       00006CA1            .23B:
26660                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26661 6CA1           8A46         0C            mov	al,$C[bp]
26662 6CA4           30E4                       xor	ah,ah
26663 6CA6           8946         FE            mov	-2[bp],ax
26664                                           !BCC_EOS
26665                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26666 6CA9           8B46         FE            mov	ax,-2[bp]
26667 6CAC           88C4                       mov	ah,al
26668 6CAE           30C0                       xor	al,al
26669 6CB0           8946         FE            mov	-2[bp],ax
26670                                           !BCC_EOS
26671                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26672 6CB3           8B46         FE            mov	ax,-2[bp]
26673 6CB6           0246         0E            add	al,$E[bp]
26674 6CB9           80D4                   00  adc	ah,*0
26675 6CBC           8946         FE            mov	-2[bp],ax
26676                                           !BCC_EOS
26677                                           ! 3804  biosfn_set_cursor_pos(page,newcurs);
26678                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26679 6CBF           FF76         FE            push	-2[bp]
26680                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26681 6CC2           8A46         06            mov	al,6[bp]
26682 6CC5           30E4                       xor	ah,ah
26683 6CC7           50                         push	ax
26684                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26685 6CC8           E8         D64A            call	_biosfn_set_cursor_pos
26686 6CCB           83C4                   04  add	sp,*4
26687                                           !BCC_EOS
26688                                           ! 3805  while(count--!=0)
26689                                           ! 3806   {
26690 6CCE           EB           4F            jmp .23E
26691                       00006CD0            .23F:
26692                                           ! 3807    car=read_byte(seg,offset++);
26693                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26694 6CD0           8B46         12            mov	ax,$12[bp]
26695 6CD3           40                         inc	ax
26696 6CD4           8946         12            mov	$12[bp],ax
26697                                           ! Debug: list unsigned short = ax-1 (used reg = )
26698 6CD7           48                         dec	ax
26699 6CD8           50                         push	ax
26700                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26701 6CD9           FF76         10            push	$10[bp]
26702                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26703 6CDC           E8         0ED2            call	_read_byte
26704 6CDF           83C4                   04  add	sp,*4
26705                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26706 6CE2           8846         F9            mov	-7[bp],al
26707                                           !BCC_EOS
26708                                           ! 3808    if((flag&0x02)!=0)
26709                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26710 6CE5           8A46         04            mov	al,4[bp]
26711 6CE8           24                     02  and	al,*2
26712                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26713 6CEA           84C0                       test	al,al
26714 6CEC           74           15            je  	.240
26715                       00006CEE            .241:
26716                                           ! 3809     attr=read_byte(seg,offset++);
26717                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26718 6CEE           8B46         12            mov	ax,$12[bp]
26719 6CF1           40                         inc	ax
26720 6CF2           8946         12            mov	$12[bp],ax
26721                                           ! Debug: list unsigned short = ax-1 (used reg = )
26722 6CF5           48                         dec	ax
26723 6CF6           50                         push	ax
26724                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26725 6CF7           FF76         10            push	$10[bp]
26726                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26727 6CFA           E8         0EB4            call	_read_byte
26728 6CFD           83C4                   04  add	sp,*4
26729                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26730 6D00           8846         08            mov	8[bp],al
26731                                           !BCC_EOS
26732                                           ! 3810    biosfn_write_teletype(car,page,attr,3);
26733                       00006D03            .240:
26734                                           ! Debug: list int = const 3 (used reg = )
26735 6D03           B8                   0003  mov	ax,*3
26736 6D06           50                         push	ax
26737                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26738 6D07           8A46         08            mov	al,8[bp]
26739 6D0A           30E4                       xor	ah,ah
26740 6D0C           50                         push	ax
26741                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26742 6D0D           8A46         06            mov	al,6[bp]
26743 6D10           30E4                       xor	ah,ah
26744 6D12           50                         push	ax
26745                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26746 6D13           8A46         F9            mov	al,-7[bp]
26747 6D16           30E4                       xor	ah,ah
26748 6D18           50                         push	ax
26749                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26750 6D19           E8         F13E            call	_biosfn_write_teletype
26751 6D1C           83C4                   08  add	sp,*8
26752                                           !BCC_EOS
26753                                           ! 3811   }
26754                                           ! 3812  if((flag&0x01)==0)
26755                       00006D1F            .23E:
26756                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26757 6D1F           8B46         0A            mov	ax,$A[bp]
26758 6D22           48                         dec	ax
26759 6D23           8946         0A            mov	$A[bp],ax
26760                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26761 6D26           3D                   FFFF  cmp	ax,*-1
26762 6D29           75           A5            jne	.23F
26763                       00006D2B            .242:
26764                       00006D2B            .23D:
26765                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26766 6D2B           8A46         04            mov	al,4[bp]
26767 6D2E           24                     01  and	al,*1
26768                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26769 6D30           84C0                       test	al,al
26770 6D32           75           0F            jne 	.243
26771                       00006D34            .244:
26772                                           ! 3813   biosfn_set_cursor_pos(page,oldcurs);
26773                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26774 6D34           FF76         FC            push	-4[bp]
26775                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26776 6D37           8A46         06            mov	al,6[bp]
26777 6D3A           30E4                       xor	ah,ah
26778 6D3C           50                         push	ax
26779                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26780 6D3D           E8         D5D5            call	_biosfn_set_cursor_pos
26781 6D40           83C4                   04  add	sp,*4
26782                                           !BCC_EOS
26783                                           ! 3814 }
26784                       00006D43            .243:
26785 6D43           89EC                       mov	sp,bp
26786 6D45           5D                         pop	bp
26787 6D46           C3                         ret
26788                                           ! 3815 #asm
26789                                           !BCC_ASM
26790                       00000008            _biosfn_write_string.count	set	8
26791                       0000000E            _biosfn_write_string.seg	set	$E
26792                       0000000C            _biosfn_write_string.col	set	$C
26793                       00000002            _biosfn_write_string.flag	set	2
26794                       00000006            _biosfn_write_string.attr	set	6
26795                       00000004            _biosfn_write_string.page	set	4
26796                       0000000A            _biosfn_write_string.row	set	$A
26797                       00000010            _biosfn_write_string.offset	set	$10
26798                       00006D47            biosfn_group_1A:
26799 6D47           3C                     00    cmp al, #0x00
26800 6D49           74           05              je biosfn_read_display_code
26801 6D4B           3C                     01    cmp al, #0x01
26802 6D4D           74           16              je biosfn_set_display_code
26803 6D4F           C3                           ret
26804                       00006D50            biosfn_read_display_code:
26805 6D50           1E                           push ds
26806 6D51           50                           push ax
26807 6D52           B8                   0040    mov ax, # 0x40
26808 6D55           8ED8                         mov ds, ax
26809 6D57           BB                   008A    mov bx, # 0x8A
26810 6D5A           8A07                         mov al, [bx]
26811 6D5C           88C3                         mov bl, al
26812 6D5E           30FF                         xor bh, bh
26813 6D60           58                           pop ax
26814 6D61           88E0                         mov al, ah
26815 6D63           1F                           pop ds
26816 6D64           C3                           ret
26817                       00006D65            biosfn_set_display_code:
26818 6D65           1E                           push ds
26819 6D66           50                           push ax
26820 6D67           53                           push bx
26821 6D68           B8                   0040    mov ax, # 0x40
26822 6D6B           8ED8                         mov ds, ax
26823 6D6D           89D8                         mov ax, bx
26824 6D6F           BB                   008A    mov bx, # 0x8A
26825 6D72           8807                         mov [bx], al
26826 6D74           5B                           pop bx
26827 6D75           58                           pop ax
26828 6D76           88E0                         mov al, ah
26829 6D78           1F                           pop ds
26830 6D79           C3                           ret
26831                                           ! 3849 endasm
26832                                           !BCC_ENDASM
26833                                           ! 3850 static void biosfn_read_state_info (BX,ES,DI)
26834                                           ! Register BX used in function biosfn_write_string
26835                                           ! 3851 Bit16u BX;Bit16u ES;Bit16u DI;
26836                       00006D7A            _biosfn_read_state_info:
26837                                           !BCC_EOS
26838                                           !BCC_EOS
26839                                           !BCC_EOS
26840                                           ! 3852 {
26841                                           ! 3853  write_word(ES,DI+0x00,&static_functionality);
26842 6D7A           55                         push	bp
26843 6D7B           89E5                       mov	bp,sp
26844                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26845 6D7D           BB                   0F51  mov	bx,#_static_functionality
26846 6D80           53                         push	bx
26847                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26848 6D81           8B46         08            mov	ax,8[bp]
26849                                           ! Debug: list unsigned int = ax+0 (used reg = )
26850 6D84           50                         push	ax
26851                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26852 6D85           FF76         06            push	6[bp]
26853                                           ! Debug: func () void = write_word+0 (used reg = )
26854 6D88           E8         0E64            call	_write_word
26855 6D8B           89EC                       mov	sp,bp
26856                                           !BCC_EOS
26857                                           ! 3854  write_word(ES,DI+0x02,0xC000);
26858                                           ! Debug: list unsigned int = const $C000 (used reg = )
26859 6D8D           B8                   C000  mov	ax,#$C000
26860 6D90           50                         push	ax
26861                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26862 6D91           8B46         08            mov	ax,8[bp]
26863                                           ! Debug: list unsigned int = ax+2 (used reg = )
26864 6D94           40                         inc	ax
26865 6D95           40                         inc	ax
26866 6D96           50                         push	ax
26867                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26868 6D97           FF76         06            push	6[bp]
26869                                           ! Debug: func () void = write_word+0 (used reg = )
26870 6D9A           E8         0E52            call	_write_word
26871 6D9D           89EC                       mov	sp,bp
26872                                           !BCC_EOS
26873                                           ! 3855  memcpyb(ES,DI+0x04,0x40,0x49,30);
26874                                           ! Debug: list int = const $1E (used reg = )
26875 6D9F           B8                   001E  mov	ax,*$1E
26876 6DA2           50                         push	ax
26877                                           ! Debug: list int = const $49 (used reg = )
26878 6DA3           B8                   0049  mov	ax,*$49
26879 6DA6           50                         push	ax
26880                                           ! Debug: list int = const $40 (used reg = )
26881 6DA7           B8                   0040  mov	ax,*$40
26882 6DAA           50                         push	ax
26883                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26884 6DAB           8B46         08            mov	ax,8[bp]
26885                                           ! Debug: list unsigned int = ax+4 (used reg = )
26886 6DAE           05                   0004  add	ax,*4
26887 6DB1           50                         push	ax
26888                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26889 6DB2           FF76         06            push	6[bp]
26890                                           ! Debug: func () void = memcpyb+0 (used reg = )
26891 6DB5           E8         0D99            call	_memcpyb
26892 6DB8           89EC                       mov	sp,bp
26893                                           !BCC_EOS
26894                                           ! 3856  memcpyb(ES,DI+0x22,0x40,0x84,3);
26895                                           ! Debug: list int = const 3 (used reg = )
26896 6DBA           B8                   0003  mov	ax,*3
26897 6DBD           50                         push	ax
26898                                           ! Debug: list int = const $84 (used reg = )
26899 6DBE           B8                   0084  mov	ax,#$84
26900 6DC1           50                         push	ax
26901                                           ! Debug: list int = const $40 (used reg = )
26902 6DC2           B8                   0040  mov	ax,*$40
26903 6DC5           50                         push	ax
26904                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26905 6DC6           8B46         08            mov	ax,8[bp]
26906                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26907 6DC9           05                   0022  add	ax,*$22
26908 6DCC           50                         push	ax
26909                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26910 6DCD           FF76         06            push	6[bp]
26911                                           ! Debug: func () void = memcpyb+0 (used reg = )
26912 6DD0           E8         0D7E            call	_memcpyb
26913 6DD3           89EC                       mov	sp,bp
26914                                           !BCC_EOS
26915                                           ! 3857  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26916                                           ! Debug: list int = const $8A (used reg = )
26917 6DD5           B8                   008A  mov	ax,#$8A
26918 6DD8           50                         push	ax
26919                                           ! Debug: list int = const $40 (used reg = )
26920 6DD9           B8                   0040  mov	ax,*$40
26921 6DDC           50                         push	ax
26922                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26923 6DDD           E8         0DD1            call	_read_byte
26924 6DE0           89EC                       mov	sp,bp
26925                                           ! Debug: list unsigned char = al+0 (used reg = )
26926 6DE2           30E4                       xor	ah,ah
26927 6DE4           50                         push	ax
26928                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26929 6DE5           8B46         08            mov	ax,8[bp]
26930                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26931 6DE8           05                   0025  add	ax,*$25
26932 6DEB           50                         push	ax
26933                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26934 6DEC           FF76         06            push	6[bp]
26935                                           ! Debug: func () void = write_byte+0 (used reg = )
26936 6DEF           E8         0DE5            call	_write_byte
26937 6DF2           89EC                       mov	sp,bp
26938                                           !BCC_EOS
26939                                           ! 3858  write_byte(ES,DI+0x26,0);
26940                                           ! Debug: list int = const 0 (used reg = )
26941 6DF4           31C0                       xor	ax,ax
26942 6DF6           50                         push	ax
26943                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26944 6DF7           8B46         08            mov	ax,8[bp]
26945                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26946 6DFA           05                   0026  add	ax,*$26
26947 6DFD           50                         push	ax
26948                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26949 6DFE           FF76         06            push	6[bp]
26950                                           ! Debug: func () void = write_byte+0 (used reg = )
26951 6E01           E8         0DD3            call	_write_byte
26952 6E04           89EC                       mov	sp,bp
26953                                           !BCC_EOS
26954                                           ! 3859  write_byte(ES,DI+0x27,16);
26955                                           ! Debug: list int = const $10 (used reg = )
26956 6E06           B8                   0010  mov	ax,*$10
26957 6E09           50                         push	ax
26958                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26959 6E0A           8B46         08            mov	ax,8[bp]
26960                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26961 6E0D           05                   0027  add	ax,*$27
26962 6E10           50                         push	ax
26963                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26964 6E11           FF76         06            push	6[bp]
26965                                           ! Debug: func () void = write_byte+0 (used reg = )
26966 6E14           E8         0DC0            call	_write_byte
26967 6E17           89EC                       mov	sp,bp
26968                                           !BCC_EOS
26969                                           ! 3860  write_byte(ES,DI+0x28,0);
26970                                           ! Debug: list int = const 0 (used reg = )
26971 6E19           31C0                       xor	ax,ax
26972 6E1B           50                         push	ax
26973                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26974 6E1C           8B46         08            mov	ax,8[bp]
26975                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26976 6E1F           05                   0028  add	ax,*$28
26977 6E22           50                         push	ax
26978                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26979 6E23           FF76         06            push	6[bp]
26980                                           ! Debug: func () void = write_byte+0 (used reg = )
26981 6E26           E8         0DAE            call	_write_byte
26982 6E29           89EC                       mov	sp,bp
26983                                           !BCC_EOS
26984                                           ! 3861  write_byte(ES,DI+0x29,8);
26985                                           ! Debug: list int = const 8 (used reg = )
26986 6E2B           B8                   0008  mov	ax,*8
26987 6E2E           50                         push	ax
26988                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26989 6E2F           8B46         08            mov	ax,8[bp]
26990                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26991 6E32           05                   0029  add	ax,*$29
26992 6E35           50                         push	ax
26993                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26994 6E36           FF76         06            push	6[bp]
26995                                           ! Debug: func () void = write_byte+0 (used reg = )
26996 6E39           E8         0D9B            call	_write_byte
26997 6E3C           89EC                       mov	sp,bp
26998                                           !BCC_EOS
26999                                           ! 3862  write_byte(ES,DI+0x2a,2);
27000                                           ! Debug: list int = const 2 (used reg = )
27001 6E3E           B8                   0002  mov	ax,*2
27002 6E41           50                         push	ax
27003                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27004 6E42           8B46         08            mov	ax,8[bp]
27005                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27006 6E45           05                   002A  add	ax,*$2A
27007 6E48           50                         push	ax
27008                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27009 6E49           FF76         06            push	6[bp]
27010                                           ! Debug: func () void = write_byte+0 (used reg = )
27011 6E4C           E8         0D88            call	_write_byte
27012 6E4F           89EC                       mov	sp,bp
27013                                           !BCC_EOS
27014                                           ! 3863  write_byte(ES,DI+0x2b,0);
27015                                           ! Debug: list int = const 0 (used reg = )
27016 6E51           31C0                       xor	ax,ax
27017 6E53           50                         push	ax
27018                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27019 6E54           8B46         08            mov	ax,8[bp]
27020                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27021 6E57           05                   002B  add	ax,*$2B
27022 6E5A           50                         push	ax
27023                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27024 6E5B           FF76         06            push	6[bp]
27025                                           ! Debug: func () void = write_byte+0 (used reg = )
27026 6E5E           E8         0D76            call	_write_byte
27027 6E61           89EC                       mov	sp,bp
27028                                           !BCC_EOS
27029                                           ! 3864  write_byte(ES,DI+0x2c,0);
27030                                           ! Debug: list int = const 0 (used reg = )
27031 6E63           31C0                       xor	ax,ax
27032 6E65           50                         push	ax
27033                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27034 6E66           8B46         08            mov	ax,8[bp]
27035                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27036 6E69           05                   002C  add	ax,*$2C
27037 6E6C           50                         push	ax
27038                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27039 6E6D           FF76         06            push	6[bp]
27040                                           ! Debug: func () void = write_byte+0 (used reg = )
27041 6E70           E8         0D64            call	_write_byte
27042 6E73           89EC                       mov	sp,bp
27043                                           !BCC_EOS
27044                                           ! 3865  write_byte(ES,DI+0x31,3);
27045                                           ! Debug: list int = const 3 (used reg = )
27046 6E75           B8                   0003  mov	ax,*3
27047 6E78           50                         push	ax
27048                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27049 6E79           8B46         08            mov	ax,8[bp]
27050                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27051 6E7C           05                   0031  add	ax,*$31
27052 6E7F           50                         push	ax
27053                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27054 6E80           FF76         06            push	6[bp]
27055                                           ! Debug: func () void = write_byte+0 (used reg = )
27056 6E83           E8         0D51            call	_write_byte
27057 6E86           89EC                       mov	sp,bp
27058                                           !BCC_EOS
27059                                           ! 3866  write_byte(ES,DI+0x32,0);
27060                                           ! Debug: list int = const 0 (used reg = )
27061 6E88           31C0                       xor	ax,ax
27062 6E8A           50                         push	ax
27063                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27064 6E8B           8B46         08            mov	ax,8[bp]
27065                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27066 6E8E           05                   0032  add	ax,*$32
27067 6E91           50                         push	ax
27068                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27069 6E92           FF76         06            push	6[bp]
27070                                           ! Debug: func () void = write_byte+0 (used reg = )
27071 6E95           E8         0D3F            call	_write_byte
27072 6E98           89EC                       mov	sp,bp
27073                                           !BCC_EOS
27074                                           ! 3867  memsetb(ES,DI+0x33,0,13);
27075                                           ! Debug: list int = const $D (used reg = )
27076 6E9A           B8                   000D  mov	ax,*$D
27077 6E9D           50                         push	ax
27078                                           ! Debug: list int = const 0 (used reg = )
27079 6E9E           31C0                       xor	ax,ax
27080 6EA0           50                         push	ax
27081                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27082 6EA1           8B46         08            mov	ax,8[bp]
27083                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27084 6EA4           05                   0033  add	ax,*$33
27085 6EA7           50                         push	ax
27086                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27087 6EA8           FF76         06            push	6[bp]
27088                                           ! Debug: func () void = memsetb+0 (used reg = )
27089 6EAB           E8         0C59            call	_memsetb
27090 6EAE           89EC                       mov	sp,bp
27091                                           !BCC_EOS
27092                                           ! 3868 }
27093 6EB0           5D                         pop	bp
27094 6EB1           C3                         ret
27095                                           ! 3869 static Bit16u biosfn_read_video_state_size2 (CX)
27096                                           ! Register BX used in function biosfn_read_state_info
27097                                           ! 3870      Bit16u CX;
27098                       00006EB2            _biosfn_read_video_state_size2:
27099                                           !BCC_EOS
27100                                           ! 3871 {
27101                                           ! 3872     Bit16u size;
27102                                           !BCC_EOS
27103                                           ! 3873     size = 0;
27104 6EB2           55                         push	bp
27105 6EB3           89E5                       mov	bp,sp
27106 6EB5           4C                         dec	sp
27107 6EB6           4C                         dec	sp
27108                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27109 6EB7           31C0                       xor	ax,ax
27110 6EB9           8946         FE            mov	-2[bp],ax
27111                                           !BCC_EOS
27112                                           ! 3874     if (CX & 1) {
27113                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27114 6EBC           8A46         04            mov	al,4[bp]
27115 6EBF           24                     01  and	al,*1
27116 6EC1           84C0                       test	al,al
27117 6EC3           74           09            je  	.245
27118                       00006EC5            .246:
27119                                           ! 3875         size += 0x46;
27120                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27121 6EC5           8B46         FE            mov	ax,-2[bp]
27122 6EC8           05                   0046  add	ax,*$46
27123 6ECB           8946         FE            mov	-2[bp],ax
27124                                           !BCC_EOS
27125                                           ! 3876     }
27126                                           ! 3877     if (CX & 2) {
27127                       00006ECE            .245:
27128                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27129 6ECE           8A46         04            mov	al,4[bp]
27130 6ED1           24                     02  and	al,*2
27131 6ED3           84C0                       test	al,al
27132 6ED5           74           09            je  	.247
27133                       00006ED7            .248:
27134                                           ! 3878         size += (5 + 8 + 5) * 2 + 6;
27135                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27136 6ED7           8B46         FE            mov	ax,-2[bp]
27137 6EDA           05                   002A  add	ax,*$2A
27138 6EDD           8946         FE            mov	-2[bp],ax
27139                                           !BCC_EOS
27140                                           ! 3879     }
27141                                           ! 3880     if (CX & 4) {
27142                       00006EE0            .247:
27143                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27144 6EE0           8A46         04            mov	al,4[bp]
27145 6EE3           24                     04  and	al,*4
27146 6EE5           84C0                       test	al,al
27147 6EE7           74           09            je  	.249
27148                       00006EE9            .24A:
27149                                           ! 3881         size += 3 + 256 * 3 + 1;
27150                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27151 6EE9           8B46         FE            mov	ax,-2[bp]
27152 6EEC           05                   0304  add	ax,#$304
27153 6EEF           8946         FE            mov	-2[bp],ax
27154                                           !BCC_EOS
27155                                           ! 3882 }
27156                                           ! 3883     return size;
27157                       00006EF2            .249:
27158 6EF2           8B46         FE            mov	ax,-2[bp]
27159 6EF5           89EC                       mov	sp,bp
27160 6EF7           5D                         pop	bp
27161 6EF8           C3                         ret
27162                                           !BCC_EOS
27163                                           ! 3884 }
27164                                           ! 3885 static void biosfn_read_video_state_size (CX, BX)
27165                                           ! 3886      Bit16u CX; Bit16u *BX;
27166                       00006EF9            _biosfn_read_video_state_size:
27167                                           !BCC_EOS
27168                                           !BCC_EOS
27169                                           ! 3887 {
27170                                           ! 3888     Bit16u ss=get_SS();
27171 6EF9           55                         push	bp
27172 6EFA           89E5                       mov	bp,sp
27173 6EFC           4C                         dec	sp
27174 6EFD           4C                         dec	sp
27175                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27176 6EFE           E8         0D3C            call	_get_SS
27177                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27178 6F01           8946         FE            mov	-2[bp],ax
27179                                           !BCC_EOS
27180                                           ! 3889     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27181                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27182 6F04           FF76         04            push	4[bp]
27183                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27184 6F07           E8         FFA8            call	_biosfn_read_video_state_size2
27185 6F0A           44                         inc	sp
27186 6F0B           44                         inc	sp
27187                                           ! Debug: list unsigned short = ax+0 (used reg = )
27188 6F0C           50                         push	ax
27189                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27190 6F0D           FF76         06            push	6[bp]
27191                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27192 6F10           FF76         FE            push	-2[bp]
27193                                           ! Debug: func () void = write_word+0 (used reg = )
27194 6F13           E8         0CD9            call	_write_word
27195 6F16           83C4                   06  add	sp,*6
27196                                           !BCC_EOS
27197                                           ! 3890 }
27198 6F19           89EC                       mov	sp,bp
27199 6F1B           5D                         pop	bp
27200 6F1C           C3                         ret
27201                                           ! 3891 static Bit16u biosfn_save_video_state (CX,ES,BX)
27202                                           ! 3892      Bit16u CX;Bit16u ES;Bit16u BX;
27203                       00006F1D            _biosfn_save_video_state:
27204                                           !BCC_EOS
27205                                           !BCC_EOS
27206                                           !BCC_EOS
27207                                           ! 3893 {
27208                                           ! 3894     Bit16u i, v, crtc_addr, ar_index;
27209                                           !BCC_EOS
27210                                           ! 3895     crtc_addr = read_word(0x40, 0x63);
27211 6F1D           55                         push	bp
27212 6F1E           89E5                       mov	bp,sp
27213 6F20           83C4                   F8  add	sp,*-8
27214                                           ! Debug: list int = const $63 (used reg = )
27215 6F23           B8                   0063  mov	ax,*$63
27216 6F26           50                         push	ax
27217                                           ! Debug: list int = const $40 (used reg = )
27218 6F27           B8                   0040  mov	ax,*$40
27219 6F2A           50                         push	ax
27220                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27221 6F2B           E8         0C96            call	_read_word
27222 6F2E           83C4                   04  add	sp,*4
27223                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27224 6F31           8946         FA            mov	-6[bp],ax
27225                                           !BCC_EOS
27226                                           ! 3896     if (CX & 1) {
27227                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27228 6F34           8A46         04            mov	al,4[bp]
27229 6F37           24                     01  and	al,*1
27230 6F39           84C0                       test	al,al
27231 6F3B         0F84         0266            beq 	.24B
27232                       00006F3F            .24C:
27233                                           ! 3897         write_byte(ES, BX, inb(0x3c4)); BX++;
27234                                           ! Debug: list int = const $3C4 (used reg = )
27235 6F3F           B8                   03C4  mov	ax,#$3C4
27236 6F42           50                         push	ax
27237                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27238 6F43           E8         0CC1            call	_inb
27239 6F46           44                         inc	sp
27240 6F47           44                         inc	sp
27241                                           ! Debug: list unsigned char = al+0 (used reg = )
27242 6F48           30E4                       xor	ah,ah
27243 6F4A           50                         push	ax
27244                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27245 6F4B           FF76         08            push	8[bp]
27246                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27247 6F4E           FF76         06            push	6[bp]
27248                                           ! Debug: func () void = write_byte+0 (used reg = )
27249 6F51           E8         0C83            call	_write_byte
27250 6F54           83C4                   06  add	sp,*6
27251                                           !BCC_EOS
27252                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27253 6F57           8B46         08            mov	ax,8[bp]
27254 6F5A           40                         inc	ax
27255 6F5B           8946         08            mov	8[bp],ax
27256                                           !BCC_EOS
27257                                           ! 3898         write_byte(ES, BX, inb(crtc_addr)); BX++;
27258                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27259 6F5E           FF76         FA            push	-6[bp]
27260                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27261 6F61           E8         0CA3            call	_inb
27262 6F64           44                         inc	sp
27263 6F65           44                         inc	sp
27264                                           ! Debug: list unsigned char = al+0 (used reg = )
27265 6F66           30E4                       xor	ah,ah
27266 6F68           50                         push	ax
27267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27268 6F69           FF76         08            push	8[bp]
27269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27270 6F6C           FF76         06            push	6[bp]
27271                                           ! Debug: func () void = write_byte+0 (used reg = )
27272 6F6F           E8         0C65            call	_write_byte
27273 6F72           83C4                   06  add	sp,*6
27274                                           !BCC_EOS
27275                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27276 6F75           8B46         08            mov	ax,8[bp]
27277 6F78           40                         inc	ax
27278 6F79           8946         08            mov	8[bp],ax
27279                                           !BCC_EOS
27280                                           ! 3899         write_byte(ES, BX, inb(0x3ce)); BX++;
27281                                           ! Debug: list int = const $3CE (used reg = )
27282 6F7C           B8                   03CE  mov	ax,#$3CE
27283 6F7F           50                         push	ax
27284                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27285 6F80           E8         0C84            call	_inb
27286 6F83           44                         inc	sp
27287 6F84           44                         inc	sp
27288                                           ! Debug: list unsigned char = al+0 (used reg = )
27289 6F85           30E4                       xor	ah,ah
27290 6F87           50                         push	ax
27291                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27292 6F88           FF76         08            push	8[bp]
27293                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27294 6F8B           FF76         06            push	6[bp]
27295                                           ! Debug: func () void = write_byte+0 (used reg = )
27296 6F8E           E8         0C46            call	_write_byte
27297 6F91           83C4                   06  add	sp,*6
27298                                           !BCC_EOS
27299                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27300 6F94           8B46         08            mov	ax,8[bp]
27301 6F97           40                         inc	ax
27302 6F98           8946         08            mov	8[bp],ax
27303                                           !BCC_EOS
27304                                           ! 3900         inb(0x3da);
27305                                           ! Debug: list int = const $3DA (used reg = )
27306 6F9B           B8                   03DA  mov	ax,#$3DA
27307 6F9E           50                         push	ax
27308                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27309 6F9F           E8         0C65            call	_inb
27310 6FA2           44                         inc	sp
27311 6FA3           44                         inc	sp
27312                                           !BCC_EOS
27313                                           ! 3901         ar_index = inb(0x3c0);
27314                                           ! Debug: list int = const $3C0 (used reg = )
27315 6FA4           B8                   03C0  mov	ax,#$3C0
27316 6FA7           50                         push	ax
27317                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27318 6FA8           E8         0C5C            call	_inb
27319 6FAB           44                         inc	sp
27320 6FAC           44                         inc	sp
27321                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27322 6FAD           30E4                       xor	ah,ah
27323 6FAF           8946         F8            mov	-8[bp],ax
27324                                           !BCC_EOS
27325                                           ! 3902         write_byte(ES, BX, ar_index); BX++;
27326                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27327 6FB2           FF76         F8            push	-8[bp]
27328                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27329 6FB5           FF76         08            push	8[bp]
27330                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27331 6FB8           FF76         06            push	6[bp]
27332                                           ! Debug: func () void = write_byte+0 (used reg = )
27333 6FBB           E8         0C19            call	_write_byte
27334 6FBE           83C4                   06  add	sp,*6
27335                                           !BCC_EOS
27336                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27337 6FC1           8B46         08            mov	ax,8[bp]
27338 6FC4           40                         inc	ax
27339 6FC5           8946         08            mov	8[bp],ax
27340                                           !BCC_EOS
27341                                           ! 3903         write_byte(ES, BX, inb(0x3ca)); BX++;
27342                                           ! Debug: list int = const $3CA (used reg = )
27343 6FC8           B8                   03CA  mov	ax,#$3CA
27344 6FCB           50                         push	ax
27345                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27346 6FCC           E8         0C38            call	_inb
27347 6FCF           44                         inc	sp
27348 6FD0           44                         inc	sp
27349                                           ! Debug: list unsigned char = al+0 (used reg = )
27350 6FD1           30E4                       xor	ah,ah
27351 6FD3           50                         push	ax
27352                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27353 6FD4           FF76         08            push	8[bp]
27354                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27355 6FD7           FF76         06            push	6[bp]
27356                                           ! Debug: func () void = write_byte+0 (used reg = )
27357 6FDA           E8         0BFA            call	_write_byte
27358 6FDD           83C4                   06  add	sp,*6
27359                                           !BCC_EOS
27360                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27361 6FE0           8B46         08            mov	ax,8[bp]
27362 6FE3           40                         inc	ax
27363 6FE4           8946         08            mov	8[bp],ax
27364                                           !BCC_EOS
27365                                           ! 3904         for(i=1;i<=4;i++){
27366                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27367 6FE7           B8                   0001  mov	ax,*1
27368 6FEA           8946         FE            mov	-2[bp],ax
27369                                           !BCC_EOS
27370                                           !BCC_EOS
27371 6FED           EB           33            jmp .24F
27372                       00006FEF            .250:
27373                                           ! 3905             outb(0x3c4, i);
27374                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27375 6FEF           FF76         FE            push	-2[bp]
27376                                           ! Debug: list int = const $3C4 (used reg = )
27377 6FF2           B8                   03C4  mov	ax,#$3C4
27378 6FF5           50                         push	ax
27379                                           ! Debug: func () void = outb+0 (used reg = )
27380 6FF6           E8         0C24            call	_outb
27381 6FF9           83C4                   04  add	sp,*4
27382                                           !BCC_EOS
27383                                           ! 3906             write_byte(ES, BX, inb(0x3c5)); BX++;
27384                                           ! Debug: list int = const $3C5 (used reg = )
27385 6FFC           B8                   03C5  mov	ax,#$3C5
27386 6FFF           50                         push	ax
27387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27388 7000           E8         0C04            call	_inb
27389 7003           44                         inc	sp
27390 7004           44                         inc	sp
27391                                           ! Debug: list unsigned char = al+0 (used reg = )
27392 7005           30E4                       xor	ah,ah
27393 7007           50                         push	ax
27394                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27395 7008           FF76         08            push	8[bp]
27396                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27397 700B           FF76         06            push	6[bp]
27398                                           ! Debug: func () void = write_byte+0 (used reg = )
27399 700E           E8         0BC6            call	_write_byte
27400 7011           83C4                   06  add	sp,*6
27401                                           !BCC_EOS
27402                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27403 7014           8B46         08            mov	ax,8[bp]
27404 7017           40                         inc	ax
27405 7018           8946         08            mov	8[bp],ax
27406                                           !BCC_EOS
27407                                           ! 3907         }
27408                                           ! 3908         outb(0x3c4, 0);
27409                       0000701B            .24E:
27410                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27411 701B           8B46         FE            mov	ax,-2[bp]
27412 701E           40                         inc	ax
27413 701F           8946         FE            mov	-2[bp],ax
27414                       00007022            .24F:
27415                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27416 7022           8B46         FE            mov	ax,-2[bp]
27417 7025           3D                   0004  cmp	ax,*4
27418 7028           76           C5            jbe	.250
27419                       0000702A            .251:
27420                       0000702A            .24D:
27421                                           ! Debug: list int = const 0 (used reg = )
27422 702A           31C0                       xor	ax,ax
27423 702C           50                         push	ax
27424                                           ! Debug: list int = const $3C4 (used reg = )
27425 702D           B8                   03C4  mov	ax,#$3C4
27426 7030           50                         push	ax
27427                                           ! Debug: func () void = outb+0 (used reg = )
27428 7031           E8         0BE9            call	_outb
27429 7034           83C4                   04  add	sp,*4
27430                                           !BCC_EOS
27431                                           ! 3909         write_byte(ES, BX, inb(0x3c5)); BX++;
27432                                           ! Debug: list int = const $3C5 (used reg = )
27433 7037           B8                   03C5  mov	ax,#$3C5
27434 703A           50                         push	ax
27435                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27436 703B           E8         0BC9            call	_inb
27437 703E           44                         inc	sp
27438 703F           44                         inc	sp
27439                                           ! Debug: list unsigned char = al+0 (used reg = )
27440 7040           30E4                       xor	ah,ah
27441 7042           50                         push	ax
27442                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27443 7043           FF76         08            push	8[bp]
27444                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27445 7046           FF76         06            push	6[bp]
27446                                           ! Debug: func () void = write_byte+0 (used reg = )
27447 7049           E8         0B8B            call	_write_byte
27448 704C           83C4                   06  add	sp,*6
27449                                           !BCC_EOS
27450                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27451 704F           8B46         08            mov	ax,8[bp]
27452 7052           40                         inc	ax
27453 7053           8946         08            mov	8[bp],ax
27454                                           !BCC_EOS
27455                                           ! 3910         for(i=0;i<=0x18;i++) {
27456                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27457 7056           31C0                       xor	ax,ax
27458 7058           8946         FE            mov	-2[bp],ax
27459                                           !BCC_EOS
27460                                           !BCC_EOS
27461 705B           EB           33            jmp .254
27462                       0000705D            .255:
27463                                           ! 3911      
27464                                           ! 3911        outb(crtc_addr,i);
27465                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27466 705D           FF76         FE            push	-2[bp]
27467                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27468 7060           FF76         FA            push	-6[bp]
27469                                           ! Debug: func () void = outb+0 (used reg = )
27470 7063           E8         0BB7            call	_outb
27471 7066           83C4                   04  add	sp,*4
27472                                           !BCC_EOS
27473                                           ! 3912             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27474                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27475 7069           8B46         FA            mov	ax,-6[bp]
27476                                           ! Debug: list unsigned int = ax+1 (used reg = )
27477 706C           40                         inc	ax
27478 706D           50                         push	ax
27479                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27480 706E           E8         0B96            call	_inb
27481 7071           44                         inc	sp
27482 7072           44                         inc	sp
27483                                           ! Debug: list unsigned char = al+0 (used reg = )
27484 7073           30E4                       xor	ah,ah
27485 7075           50                         push	ax
27486                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27487 7076           FF76         08            push	8[bp]
27488                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27489 7079           FF76         06            push	6[bp]
27490                                           ! Debug: func () void = write_byte+0 (used reg = )
27491 707C           E8         0B58            call	_write_byte
27492 707F           83C4                   06  add	sp,*6
27493                                           !BCC_EOS
27494                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27495 7082           8B46         08            mov	ax,8[bp]
27496 7085           40                         inc	ax
27497 7086           8946         08            mov	8[bp],ax
27498                                           !BCC_EOS
27499                                           ! 3913         }
27500                                           ! 3914         for(i=0;i<=0x13;i++) {
27501                       00007089            .253:
27502                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27503 7089           8B46         FE            mov	ax,-2[bp]
27504 708C           40                         inc	ax
27505 708D           8946         FE            mov	-2[bp],ax
27506                       00007090            .254:
27507                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27508 7090           8B46         FE            mov	ax,-2[bp]
27509 7093           3D                   0018  cmp	ax,*$18
27510 7096           76           C5            jbe	.255
27511                       00007098            .256:
27512                       00007098            .252:
27513                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27514 7098           31C0                       xor	ax,ax
27515 709A           8946         FE            mov	-2[bp],ax
27516                                           !BCC_EOS
27517                                           !BCC_EOS
27518 709D           EB           44            jmp .259
27519                       0000709F            .25A:
27520                                           ! 3915             inb(0x3da);
27521                                           ! Debug: list int = const $3DA (used reg = )
27522 709F           B8                   03DA  mov	ax,#$3DA
27523 70A2           50                         push	ax
27524                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27525 70A3           E8         0B61            call	_inb
27526 70A6           44                         inc	sp
27527 70A7           44                         inc	sp
27528                                           !BCC_EOS
27529                                           ! 3916             outb(0x3c0, i | (ar_index & 0x20));
27530                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27531 70A8           8A46         F8            mov	al,-8[bp]
27532 70AB           24                     20  and	al,*$20
27533                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27534                                           ! Debug: expression subtree swapping
27535 70AD           30E4                       xor	ah,ah
27536 70AF           0B46         FE            or	ax,-2[bp]
27537                                           ! Debug: list unsigned int = ax+0 (used reg = )
27538 70B2           50                         push	ax
27539                                           ! Debug: list int = const $3C0 (used reg = )
27540 70B3           B8                   03C0  mov	ax,#$3C0
27541 70B6           50                         push	ax
27542                                           ! Debug: func () void = outb+0 (used reg = )
27543 70B7           E8         0B63            call	_outb
27544 70BA           83C4                   04  add	sp,*4
27545                                           !BCC_EOS
27546                                           ! 3917             write_byte(ES, BX, inb(0x3c1)); BX++;
27547                                           ! Debug: list int = const $3C1 (used reg = )
27548 70BD           B8                   03C1  mov	ax,#$3C1
27549 70C0           50                         push	ax
27550                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27551 70C1           E8         0B43            call	_inb
27552 70C4           44                         inc	sp
27553 70C5           44                         inc	sp
27554                                           ! Debug: list unsigned char = al+0 (used reg = )
27555 70C6           30E4                       xor	ah,ah
27556 70C8           50                         push	ax
27557                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27558 70C9           FF76         08            push	8[bp]
27559                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27560 70CC           FF76         06            push	6[bp]
27561                                           ! Debug: func () void = write_byte+0 (used reg = )
27562 70CF           E8         0B05            call	_write_byte
27563 70D2           83C4                   06  add	sp,*6
27564                                           !BCC_EOS
27565                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27566 70D5           8B46         08            mov	ax,8[bp]
27567 70D8           40                         inc	ax
27568 70D9           8946         08            mov	8[bp],ax
27569                                           !BCC_EOS
27570                                           ! 3918         }
27571                                           ! 3919         inb(0x3da);
27572                       000070DC            .258:
27573                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27574 70DC           8B46         FE            mov	ax,-2[bp]
27575 70DF           40                         inc	ax
27576 70E0           8946         FE            mov	-2[bp],ax
27577                       000070E3            .259:
27578                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27579 70E3           8B46         FE            mov	ax,-2[bp]
27580 70E6           3D                   0013  cmp	ax,*$13
27581 70E9           76           B4            jbe	.25A
27582                       000070EB            .25B:
27583                       000070EB            .257:
27584                                           ! Debug: list int = const $3DA (used reg = )
27585 70EB           B8                   03DA  mov	ax,#$3DA
27586 70EE           50                         push	ax
27587                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27588 70EF           E8         0B15            call	_inb
27589 70F2           44                         inc	sp
27590 70F3           44                         inc	sp
27591                                           !BCC_EOS
27592                                           ! 3920         for(i=0;i<=8;i++) {
27593                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27594 70F4           31C0                       xor	ax,ax
27595 70F6           8946         FE            mov	-2[bp],ax
27596                                           !BCC_EOS
27597                                           !BCC_EOS
27598 70F9           EB           33            jmp .25E
27599                       000070FB            .25F:
27600                                           ! 3921             outb(0x3ce,i);
27601                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27602 70FB           FF76         FE            push	-2[bp]
27603                                           ! Debug: list int = const $3CE (used reg = )
27604 70FE           B8                   03CE  mov	ax,#$3CE
27605 7101           50                         push	ax
27606                                           ! Debug: func () void = outb+0 (used reg = )
27607 7102           E8         0B18            call	_outb
27608 7105           83C4                   04  add	sp,*4
27609                                           !BCC_EOS
27610                                           ! 3922             write_byte(ES, BX, inb(0x3cf)); BX++;
27611                                           ! Debug: list int = const $3CF (used reg = )
27612 7108           B8                   03CF  mov	ax,#$3CF
27613 710B           50                         push	ax
27614                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27615 710C           E8         0AF8            call	_inb
27616 710F           44                         inc	sp
27617 7110           44                         inc	sp
27618                                           ! Debug: list unsigned char = al+0 (used reg = )
27619 7111           30E4                       xor	ah,ah
27620 7113           50                         push	ax
27621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27622 7114           FF76         08            push	8[bp]
27623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27624 7117           FF76         06            push	6[bp]
27625                                           ! Debug: func () void = write_byte+0 (used reg = )
27626 711A           E8         0ABA            call	_write_byte
27627 711D           83C4                   06  add	sp,*6
27628                                           !BCC_EOS
27629                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27630 7120           8B46         08            mov	ax,8[bp]
27631 7123           40                         inc	ax
27632 7124           8946         08            mov	8[bp],ax
27633                                           !BCC_EOS
27634                                           ! 3923         }
27635                                           ! 3924         write_word(ES, BX, crtc_addr); BX+= 2;
27636                       00007127            .25D:
27637                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27638 7127           8B46         FE            mov	ax,-2[bp]
27639 712A           40                         inc	ax
27640 712B           8946         FE            mov	-2[bp],ax
27641                       0000712E            .25E:
27642                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27643 712E           8B46         FE            mov	ax,-2[bp]
27644 7131           3D                   0008  cmp	ax,*8
27645 7134           76           C5            jbe	.25F
27646                       00007136            .260:
27647                       00007136            .25C:
27648                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27649 7136           FF76         FA            push	-6[bp]
27650                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27651 7139           FF76         08            push	8[bp]
27652                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27653 713C           FF76         06            push	6[bp]
27654                                           ! Debug: func () void = write_word+0 (used reg = )
27655 713F           E8         0AAD            call	_write_word
27656 7142           83C4                   06  add	sp,*6
27657                                           !BCC_EOS
27658                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27659 7145           8B46         08            mov	ax,8[bp]
27660 7148           40                         inc	ax
27661 7149           40                         inc	ax
27662 714A           8946         08            mov	8[bp],ax
27663                                           !BCC_EOS
27664                                           ! 3925         write_byte(ES, BX, 0); BX++;
27665                                           ! Debug: list int = const 0 (used reg = )
27666 714D           31C0                       xor	ax,ax
27667 714F           50                         push	ax
27668                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27669 7150           FF76         08            push	8[bp]
27670                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27671 7153           FF76         06            push	6[bp]
27672                                           ! Debug: func () void = write_byte+0 (used reg = )
27673 7156           E8         0A7E            call	_write_byte
27674 7159           83C4                   06  add	sp,*6
27675                                           !BCC_EOS
27676                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27677 715C           8B46         08            mov	ax,8[bp]
27678 715F           40                         inc	ax
27679 7160           8946         08            mov	8[bp],ax
27680                                           !BCC_EOS
27681                                           ! 3926         write_byte(ES, BX, 0); BX++;
27682                                           ! Debug: list int = const 0 (used reg = )
27683 7163           31C0                       xor	ax,ax
27684 7165           50                         push	ax
27685                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27686 7166           FF76         08            push	8[bp]
27687                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27688 7169           FF76         06            push	6[bp]
27689                                           ! Debug: func () void = write_byte+0 (used reg = )
27690 716C           E8         0A68            call	_write_byte
27691 716F           83C4                   06  add	sp,*6
27692                                           !BCC_EOS
27693                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27694 7172           8B46         08            mov	ax,8[bp]
27695 7175           40                         inc	ax
27696 7176           8946         08            mov	8[bp],ax
27697                                           !BCC_EOS
27698                                           ! 3927         write_byte(ES, BX, 0); BX++;
27699                                           ! Debug: list int = const 0 (used reg = )
27700 7179           31C0                       xor	ax,ax
27701 717B           50                         push	ax
27702                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27703 717C           FF76         08            push	8[bp]
27704                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27705 717F           FF76         06            push	6[bp]
27706                                           ! Debug: func () void = write_byte+0 (used reg = )
27707 7182           E8         0A52            call	_write_byte
27708 7185           83C4                   06  add	sp,*6
27709                                           !BCC_EOS
27710                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27711 7188           8B46         08            mov	ax,8[bp]
27712 718B           40                         inc	ax
27713 718C           8946         08            mov	8[bp],ax
27714                                           !BCC_EOS
27715                                           ! 3928         write_byte(ES, BX, 0); BX++;
27716                                           ! Debug: list int = const 0 (used reg = )
27717 718F           31C0                       xor	ax,ax
27718 7191           50                         push	ax
27719                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27720 7192           FF76         08            push	8[bp]
27721                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27722 7195           FF76         06            push	6[bp]
27723                                           ! Debug: func () void = write_byte+0 (used reg = )
27724 7198           E8         0A3C            call	_write_byte
27725 719B           83C4                   06  add	sp,*6
27726                                           !BCC_EOS
27727                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27728 719E           8B46         08            mov	ax,8[bp]
27729 71A1           40                         inc	ax
27730 71A2           8946         08            mov	8[bp],ax
27731                                           !BCC_EOS
27732                                           ! 3929     }
27733                                           ! 3930     if (CX & 2) {
27734                       000071A5            .24B:
27735                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27736 71A5           8A46         04            mov	al,4[bp]
27737 71A8           24                     02  and	al,*2
27738 71AA           84C0                       test	al,al
27739 71AC         0F84         0270            beq 	.261
27740                       000071B0            .262:
27741                                           ! 3931         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27742                                           ! Debug: list int = const $49 (used reg = )
27743 71B0           B8                   0049  mov	ax,*$49
27744 71B3           50                         push	ax
27745                                           ! Debug: list int = const $40 (used reg = )
27746 71B4           B8                   0040  mov	ax,*$40
27747 71B7           50                         push	ax
27748                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27749 71B8           E8         09F6            call	_read_byte
27750 71BB           83C4                   04  add	sp,*4
27751                                           ! Debug: list unsigned char = al+0 (used reg = )
27752 71BE           30E4                       xor	ah,ah
27753 71C0           50                         push	ax
27754                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27755 71C1           FF76         08            push	8[bp]
27756                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27757 71C4           FF76         06            push	6[bp]
27758                                           ! Debug: func () void = write_byte+0 (used reg = )
27759 71C7           E8         0A0D            call	_write_byte
27760 71CA           83C4                   06  add	sp,*6
27761                                           !BCC_EOS
27762                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27763 71CD           8B46         08            mov	ax,8[bp]
27764 71D0           40                         inc	ax
27765 71D1           8946         08            mov	8[bp],ax
27766                                           !BCC_EOS
27767                                           ! 3932         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27768                                           ! Debug: list int = const $4A (used reg = )
27769 71D4           B8                   004A  mov	ax,*$4A
27770 71D7           50                         push	ax
27771                                           ! Debug: list int = const $40 (used reg = )
27772 71D8           B8                   0040  mov	ax,*$40
27773 71DB           50                         push	ax
27774                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27775 71DC           E8         09E5            call	_read_word
27776 71DF           83C4                   04  add	sp,*4
27777                                           ! Debug: list unsigned short = ax+0 (used reg = )
27778 71E2           50                         push	ax
27779                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27780 71E3           FF76         08            push	8[bp]
27781                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27782 71E6           FF76         06            push	6[bp]
27783                                           ! Debug: func () void = write_word+0 (used reg = )
27784 71E9           E8         0A03            call	_write_word
27785 71EC           83C4                   06  add	sp,*6
27786                                           !BCC_EOS
27787                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27788 71EF           8B46         08            mov	ax,8[bp]
27789 71F2           40                         inc	ax
27790 71F3           40                         inc	ax
27791 71F4           8946         08            mov	8[bp],ax
27792                                           !BCC_EOS
27793                                           ! 3933         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27794                                           ! Debug: list int = const $4C (used reg = )
27795 71F7           B8                   004C  mov	ax,*$4C
27796 71FA           50                         push	ax
27797                                           ! Debug: list int = const $40 (used reg = )
27798 71FB           B8                   0040  mov	ax,*$40
27799 71FE           50                         push	ax
27800                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27801 71FF           E8         09C2            call	_read_word
27802 7202           83C4                   04  add	sp,*4
27803                                           ! Debug: list unsigned short = ax+0 (used reg = )
27804 7205           50                         push	ax
27805                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27806 7206           FF76         08            push	8[bp]
27807                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27808 7209           FF76         06            push	6[bp]
27809                                           ! Debug: func () void = write_word+0 (used reg = )
27810 720C           E8         09E0            call	_write_word
27811 720F           83C4                   06  add	sp,*6
27812                                           !BCC_EOS
27813                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27814 7212           8B46         08            mov	ax,8[bp]
27815 7215           40                         inc	ax
27816 7216           40                         inc	ax
27817 7217           8946         08            mov	8[bp],ax
27818                                           !BCC_EOS
27819                                           ! 3934         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27820                                           ! Debug: list int = const $63 (used reg = )
27821 721A           B8                   0063  mov	ax,*$63
27822 721D           50                         push	ax
27823                                           ! Debug: list int = const $40 (used reg = )
27824 721E           B8                   0040  mov	ax,*$40
27825 7221           50                         push	ax
27826                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27827 7222           E8         099F            call	_read_word
27828 7225           83C4                   04  add	sp,*4
27829                                           ! Debug: list unsigned short = ax+0 (used reg = )
27830 7228           50                         push	ax
27831                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27832 7229           FF76         08            push	8[bp]
27833                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27834 722C           FF76         06            push	6[bp]
27835                                           ! Debug: func () void = write_word+0 (used reg = )
27836 722F           E8         09BD            call	_write_word
27837 7232           83C4                   06  add	sp,*6
27838                                           !BCC_EOS
27839                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27840 7235           8B46         08            mov	ax,8[bp]
27841 7238           40                         inc	ax
27842 7239           40                         inc	ax
27843 723A           8946         08            mov	8[bp],ax
27844                                           !BCC_EOS
27845                                           ! 3935         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27846                                           ! Debug: list int = const $84 (used reg = )
27847 723D           B8                   0084  mov	ax,#$84
27848 7240           50                         push	ax
27849                                           ! Debug: list int = const $40 (used reg = )
27850 7241           B8                   0040  mov	ax,*$40
27851 7244           50                         push	ax
27852                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27853 7245           E8         0969            call	_read_byte
27854 7248           83C4                   04  add	sp,*4
27855                                           ! Debug: list unsigned char = al+0 (used reg = )
27856 724B           30E4                       xor	ah,ah
27857 724D           50                         push	ax
27858                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27859 724E           FF76         08            push	8[bp]
27860                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27861 7251           FF76         06            push	6[bp]
27862                                           ! Debug: func () void = write_byte+0 (used reg = )
27863 7254           E8         0980            call	_write_byte
27864 7257           83C4                   06  add	sp,*6
27865                                           !BCC_EOS
27866                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27867 725A           8B46         08            mov	ax,8[bp]
27868 725D           40                         inc	ax
27869 725E           8946         08            mov	8[bp],ax
27870                                           !BCC_EOS
27871                                           ! 3936         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27872                                           ! Debug: list int = const $85 (used reg = )
27873 7261           B8                   0085  mov	ax,#$85
27874 7264           50                         push	ax
27875                                           ! Debug: list int = const $40 (used reg = )
27876 7265           B8                   0040  mov	ax,*$40
27877 7268           50                         push	ax
27878                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27879 7269           E8         0958            call	_read_word
27880 726C           83C4                   04  add	sp,*4
27881                                           ! Debug: list unsigned short = ax+0 (used reg = )
27882 726F           50                         push	ax
27883                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27884 7270           FF76         08            push	8[bp]
27885                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27886 7273           FF76         06            push	6[bp]
27887                                           ! Debug: func () void = write_word+0 (used reg = )
27888 7276           E8         0976            call	_write_word
27889 7279           83C4                   06  add	sp,*6
27890                                           !BCC_EOS
27891                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27892 727C           8B46         08            mov	ax,8[bp]
27893 727F           40                         inc	ax
27894 7280           40                         inc	ax
27895 7281           8946         08            mov	8[bp],ax
27896                                           !BCC_EOS
27897                                           ! 3937         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27898                                           ! Debug: list int = const $87 (used reg = )
27899 7284           B8                   0087  mov	ax,#$87
27900 7287           50                         push	ax
27901                                           ! Debug: list int = const $40 (used reg = )
27902 7288           B8                   0040  mov	ax,*$40
27903 728B           50                         push	ax
27904                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27905 728C           E8         0922            call	_read_byte
27906 728F           83C4                   04  add	sp,*4
27907                                           ! Debug: list unsigned char = al+0 (used reg = )
27908 7292           30E4                       xor	ah,ah
27909 7294           50                         push	ax
27910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27911 7295           FF76         08            push	8[bp]
27912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27913 7298           FF76         06            push	6[bp]
27914                                           ! Debug: func () void = write_byte+0 (used reg = )
27915 729B           E8         0939            call	_write_byte
27916 729E           83C4                   06  add	sp,*6
27917                                           !BCC_EOS
27918                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27919 72A1           8B46         08            mov	ax,8[bp]
27920 72A4           40                         inc	ax
27921 72A5           8946         08            mov	8[bp],ax
27922                                           !BCC_EOS
27923                                           ! 3938         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27924                                           ! Debug: list int = const $88 (used reg = )
27925 72A8           B8                   0088  mov	ax,#$88
27926 72AB           50                         push	ax
27927                                           ! Debug: list int = const $40 (used reg = )
27928 72AC           B8                   0040  mov	ax,*$40
27929 72AF           50                         push	ax
27930                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27931 72B0           E8         08FE            call	_read_byte
27932 72B3           83C4                   04  add	sp,*4
27933                                           ! Debug: list unsigned char = al+0 (used reg = )
27934 72B6           30E4                       xor	ah,ah
27935 72B8           50                         push	ax
27936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27937 72B9           FF76         08            push	8[bp]
27938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27939 72BC           FF76         06            push	6[bp]
27940                                           ! Debug: func () void = write_byte+0 (used reg = )
27941 72BF           E8         0915            call	_write_byte
27942 72C2           83C4                   06  add	sp,*6
27943                                           !BCC_EOS
27944                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27945 72C5           8B46         08            mov	ax,8[bp]
27946 72C8           40                         inc	ax
27947 72C9           8946         08            mov	8[bp],ax
27948                                           !BCC_EOS
27949                                           ! 3939         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27950                                           ! Debug: list int = const $89 (used reg = )
27951 72CC           B8                   0089  mov	ax,#$89
27952 72CF           50                         push	ax
27953                                           ! Debug: list int = const $40 (used reg = )
27954 72D0           B8                   0040  mov	ax,*$40
27955 72D3           50                         push	ax
27956                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27957 72D4           E8         08DA            call	_read_byte
27958 72D7           83C4                   04  add	sp,*4
27959                                           ! Debug: list unsigned char = al+0 (used reg = )
27960 72DA           30E4                       xor	ah,ah
27961 72DC           50                         push	ax
27962                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27963 72DD           FF76         08            push	8[bp]
27964                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27965 72E0           FF76         06            push	6[bp]
27966                                           ! Debug: func () void = write_byte+0 (used reg = )
27967 72E3           E8         08F1            call	_write_byte
27968 72E6           83C4                   06  add	sp,*6
27969                                           !BCC_EOS
27970                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27971 72E9           8B46         08            mov	ax,8[bp]
27972 72EC           40                         inc	ax
27973 72ED           8946         08            mov	8[bp],ax
27974                                           !BCC_EOS
27975                                           ! 3940         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27976                                           ! Debug: list int = const $60 (used reg = )
27977 72F0           B8                   0060  mov	ax,*$60
27978 72F3           50                         push	ax
27979                                           ! Debug: list int = const $40 (used reg = )
27980 72F4           B8                   0040  mov	ax,*$40
27981 72F7           50                         push	ax
27982                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27983 72F8           E8         08C9            call	_read_word
27984 72FB           83C4                   04  add	sp,*4
27985                                           ! Debug: list unsigned short = ax+0 (used reg = )
27986 72FE           50                         push	ax
27987                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27988 72FF           FF76         08            push	8[bp]
27989                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27990 7302           FF76         06            push	6[bp]
27991                                           ! Debug: func () void = write_word+0 (used reg = )
27992 7305           E8         08E7            call	_write_word
27993 7308           83C4                   06  add	sp,*6
27994                                           !BCC_EOS
27995                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27996 730B           8B46         08            mov	ax,8[bp]
27997 730E           40                         inc	ax
27998 730F           40                         inc	ax
27999 7310           8946         08            mov	8[bp],ax
28000                                           !BCC_EOS
28001                                           ! 3941         for(i=0;i<8;i++) {
28002                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28003 7313           31C0                       xor	ax,ax
28004 7315           8946         FE            mov	-2[bp],ax
28005                                           !BCC_EOS
28006                                           !BCC_EOS
28007 7318           EB           2F            jmp .265
28008                       0000731A            .266:
28009                                           ! 3942             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28010                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28011                                           ! Debug: expression subtree swapping
28012 731A           8B46         FE            mov	ax,-2[bp]
28013 731D           D1E0                       shl	ax,*1
28014                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28015                                           ! Debug: expression subtree swapping
28016                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28017 731F           05                   0050  add	ax,*$50
28018 7322           50                         push	ax
28019                                           ! Debug: list int = const $40 (used reg = )
28020 7323           B8                   0040  mov	ax,*$40
28021 7326           50                         push	ax
28022                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28023 7327           E8         089A            call	_read_word
28024 732A           83C4                   04  add	sp,*4
28025                                           ! Debug: list unsigned short = ax+0 (used reg = )
28026 732D           50                         push	ax
28027                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28028 732E           FF76         08            push	8[bp]
28029                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28030 7331           FF76         06            push	6[bp]
28031                                           ! Debug: func () void = write_word+0 (used reg = )
28032 7334           E8         08B8            call	_write_word
28033 7337           83C4                   06  add	sp,*6
28034                                           !BCC_EOS
28035                                           ! 3943             BX += 2;
28036                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28037 733A           8B46         08            mov	ax,8[bp]
28038 733D           40                         inc	ax
28039 733E           40                         inc	ax
28040 733F           8946         08            mov	8[bp],ax
28041                                           !BCC_EOS
28042                                           ! 3944         }
28043                                           ! 3945         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28044                       00007342            .264:
28045                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28046 7342           8B46         FE            mov	ax,-2[bp]
28047 7345           40                         inc	ax
28048 7346           8946         FE            mov	-2[bp],ax
28049                       00007349            .265:
28050                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28051 7349           8B46         FE            mov	ax,-2[bp]
28052 734C           3D                   0008  cmp	ax,*8
28053 734F           72           C9            jb 	.266
28054                       00007351            .267:
28055                       00007351            .263:
28056                                           ! Debug: list int = const $4E (used reg = )
28057 7351           B8                   004E  mov	ax,*$4E
28058 7354           50                         push	ax
28059                                           ! Debug: list int = const $40 (used reg = )
28060 7355           B8                   0040  mov	ax,*$40
28061 7358           50                         push	ax
28062                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28063 7359           E8         0868            call	_read_word
28064 735C           83C4                   04  add	sp,*4
28065                                           ! Debug: list unsigned short = ax+0 (used reg = )
28066 735F           50                         push	ax
28067                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28068 7360           FF76         08            push	8[bp]
28069                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28070 7363           FF76         06            push	6[bp]
28071                                           ! Debug: func () void = write_word+0 (used reg = )
28072 7366           E8         0886            call	_write_word
28073 7369           83C4                   06  add	sp,*6
28074                                           !BCC_EOS
28075                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28076 736C           8B46         08            mov	ax,8[bp]
28077 736F           40                         inc	ax
28078 7370           40                         inc	ax
28079 7371           8946         08            mov	8[bp],ax
28080                                           !BCC_EOS
28081                                           ! 3946         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28082                                           ! Debug: list int = const $62 (used reg = )
28083 7374           B8                   0062  mov	ax,*$62
28084 7377           50                         push	ax
28085                                           ! Debug: list int = const $40 (used reg = )
28086 7378           B8                   0040  mov	ax,*$40
28087 737B           50                         push	ax
28088                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28089 737C           E8         0832            call	_read_byte
28090 737F           83C4                   04  add	sp,*4
28091                                           ! Debug: list unsigned char = al+0 (used reg = )
28092 7382           30E4                       xor	ah,ah
28093 7384           50                         push	ax
28094                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28095 7385           FF76         08            push	8[bp]
28096                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28097 7388           FF76         06            push	6[bp]
28098                                           ! Debug: func () void = write_byte+0 (used reg = )
28099 738B           E8         0849            call	_write_byte
28100 738E           83C4                   06  add	sp,*6
28101                                           !BCC_EOS
28102                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28103 7391           8B46         08            mov	ax,8[bp]
28104 7394           40                         inc	ax
28105 7395           8946         08            mov	8[bp],ax
28106                                           !BCC_EOS
28107                                           ! 3947         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28108                                           ! Debug: list int = const $7C (used reg = )
28109 7398           B8                   007C  mov	ax,*$7C
28110 739B           50                         push	ax
28111                                           ! Debug: list int = const 0 (used reg = )
28112 739C           31C0                       xor	ax,ax
28113 739E           50                         push	ax
28114                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28115 739F           E8         0822            call	_read_word
28116 73A2           83C4                   04  add	sp,*4
28117                                           ! Debug: list unsigned short = ax+0 (used reg = )
28118 73A5           50                         push	ax
28119                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28120 73A6           FF76         08            push	8[bp]
28121                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28122 73A9           FF76         06            push	6[bp]
28123                                           ! Debug: func () void = write_word+0 (used reg = )
28124 73AC           E8         0840            call	_write_word
28125 73AF           83C4                   06  add	sp,*6
28126                                           !BCC_EOS
28127                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28128 73B2           8B46         08            mov	ax,8[bp]
28129 73B5           40                         inc	ax
28130 73B6           40                         inc	ax
28131 73B7           8946         08            mov	8[bp],ax
28132                                           !BCC_EOS
28133                                           ! 3948         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28134                                           ! Debug: list int = const $7E (used reg = )
28135 73BA           B8                   007E  mov	ax,*$7E
28136 73BD           50                         push	ax
28137                                           ! Debug: list int = const 0 (used reg = )
28138 73BE           31C0                       xor	ax,ax
28139 73C0           50                         push	ax
28140                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28141 73C1           E8         0800            call	_read_word
28142 73C4           83C4                   04  add	sp,*4
28143                                           ! Debug: list unsigned short = ax+0 (used reg = )
28144 73C7           50                         push	ax
28145                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28146 73C8           FF76         08            push	8[bp]
28147                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28148 73CB           FF76         06            push	6[bp]
28149                                           ! Debug: func () void = write_word+0 (used reg = )
28150 73CE           E8         081E            call	_write_word
28151 73D1           83C4                   06  add	sp,*6
28152                                           !BCC_EOS
28153                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28154 73D4           8B46         08            mov	ax,8[bp]
28155 73D7           40                         inc	ax
28156 73D8           40                         inc	ax
28157 73D9           8946         08            mov	8[bp],ax
28158                                           !BCC_EOS
28159                                           ! 3949         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28160                                           ! Debug: list int = const $10C (used reg = )
28161 73DC           B8                   010C  mov	ax,#$10C
28162 73DF           50                         push	ax
28163                                           ! Debug: list int = const 0 (used reg = )
28164 73E0           31C0                       xor	ax,ax
28165 73E2           50                         push	ax
28166                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28167 73E3           E8         07DE            call	_read_word
28168 73E6           83C4                   04  add	sp,*4
28169                                           ! Debug: list unsigned short = ax+0 (used reg = )
28170 73E9           50                         push	ax
28171                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28172 73EA           FF76         08            push	8[bp]
28173                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28174 73ED           FF76         06            push	6[bp]
28175                                           ! Debug: func () void = write_word+0 (used reg = )
28176 73F0           E8         07FC            call	_write_word
28177 73F3           83C4                   06  add	sp,*6
28178                                           !BCC_EOS
28179                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28180 73F6           8B46         08            mov	ax,8[bp]
28181 73F9           40                         inc	ax
28182 73FA           40                         inc	ax
28183 73FB           8946         08            mov	8[bp],ax
28184                                           !BCC_EOS
28185                                           ! 3950         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28186                                           ! Debug: list int = const $10E (used reg = )
28187 73FE           B8                   010E  mov	ax,#$10E
28188 7401           50                         push	ax
28189                                           ! Debug: list int = const 0 (used reg = )
28190 7402           31C0                       xor	ax,ax
28191 7404           50                         push	ax
28192                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28193 7405           E8         07BC            call	_read_word
28194 7408           83C4                   04  add	sp,*4
28195                                           ! Debug: list unsigned short = ax+0 (used reg = )
28196 740B           50                         push	ax
28197                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28198 740C           FF76         08            push	8[bp]
28199                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28200 740F           FF76         06            push	6[bp]
28201                                           ! Debug: func () void = write_word+0 (used reg = )
28202 7412           E8         07DA            call	_write_word
28203 7415           83C4                   06  add	sp,*6
28204                                           !BCC_EOS
28205                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28206 7418           8B46         08            mov	ax,8[bp]
28207 741B           40                         inc	ax
28208 741C           40                         inc	ax
28209 741D           8946         08            mov	8[bp],ax
28210                                           !BCC_EOS
28211                                           ! 3951     }
28212                                           ! 3952     if (CX & 4) {
28213                       00007420            .261:
28214                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28215 7420           8A46         04            mov	al,4[bp]
28216 7423           24                     04  and	al,*4
28217 7425           84C0                       test	al,al
28218 7427         0F84         00B5            beq 	.268
28219                       0000742B            .269:
28220                                           ! 3953         write_byte(ES, BX, inb(0x3c7)); BX++;
28221                                           ! Debug: list int = const $3C7 (used reg = )
28222 742B           B8                   03C7  mov	ax,#$3C7
28223 742E           50                         push	ax
28224                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28225 742F           E8         07D5            call	_inb
28226 7432           44                         inc	sp
28227 7433           44                         inc	sp
28228                                           ! Debug: list unsigned char = al+0 (used reg = )
28229 7434           30E4                       xor	ah,ah
28230 7436           50                         push	ax
28231                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28232 7437           FF76         08            push	8[bp]
28233                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28234 743A           FF76         06            push	6[bp]
28235                                           ! Debug: func () void = write_byte+0 (used reg = )
28236 743D           E8         0797            call	_write_byte
28237 7440           83C4                   06  add	sp,*6
28238                                           !BCC_EOS
28239                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28240 7443           8B46         08            mov	ax,8[bp]
28241 7446           40                         inc	ax
28242 7447           8946         08            mov	8[bp],ax
28243                                           !BCC_EOS
28244                                           ! 3954         write_byte(ES, BX, inb(0x3c8)); BX++;
28245                                           ! Debug: list int = const $3C8 (used reg = )
28246 744A           B8                   03C8  mov	ax,#$3C8
28247 744D           50                         push	ax
28248                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28249 744E           E8         07B6            call	_inb
28250 7451           44                         inc	sp
28251 7452           44                         inc	sp
28252                                           ! Debug: list unsigned char = al+0 (used reg = )
28253 7453           30E4                       xor	ah,ah
28254 7455           50                         push	ax
28255                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28256 7456           FF76         08            push	8[bp]
28257                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28258 7459           FF76         06            push	6[bp]
28259                                           ! Debug: func () void = write_byte+0 (used reg = )
28260 745C           E8         0778            call	_write_byte
28261 745F           83C4                   06  add	sp,*6
28262                                           !BCC_EOS
28263                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28264 7462           8B46         08            mov	ax,8[bp]
28265 7465           40                         inc	ax
28266 7466           8946         08            mov	8[bp],ax
28267                                           !BCC_EOS
28268                                           ! 3955         write_byte(ES, BX, inb(0x3c6)); BX++;
28269                                           ! Debug: list int = const $3C6 (used reg = )
28270 7469           B8                   03C6  mov	ax,#$3C6
28271 746C           50                         push	ax
28272                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28273 746D           E8         0797            call	_inb
28274 7470           44                         inc	sp
28275 7471           44                         inc	sp
28276                                           ! Debug: list unsigned char = al+0 (used reg = )
28277 7472           30E4                       xor	ah,ah
28278 7474           50                         push	ax
28279                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28280 7475           FF76         08            push	8[bp]
28281                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28282 7478           FF76         06            push	6[bp]
28283                                           ! Debug: func () void = write_byte+0 (used reg = )
28284 747B           E8         0759            call	_write_byte
28285 747E           83C4                   06  add	sp,*6
28286                                           !BCC_EOS
28287                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28288 7481           8B46         08            mov	ax,8[bp]
28289 7484           40                         inc	ax
28290 7485           8946         08            mov	8[bp],ax
28291                                           !BCC_EOS
28292                                           ! 3956         outb(0x3c8,0x00);
28293                                           ! Debug: list int = const 0 (used reg = )
28294 7488           31C0                       xor	ax,ax
28295 748A           50                         push	ax
28296                                           ! Debug: list int = const $3C8 (used reg = )
28297 748B           B8                   03C8  mov	ax,#$3C8
28298 748E           50                         push	ax
28299                                           ! Debug: func () void = outb+0 (used reg = )
28300 748F           E8         078B            call	_outb
28301 7492           83C4                   04  add	sp,*4
28302                                           !BCC_EOS
28303                                           ! 3957         for(i=0;i<256*3;i++) {
28304                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28305 7495           31C0                       xor	ax,ax
28306 7497           8946         FE            mov	-2[bp],ax
28307                                           !BCC_EOS
28308                                           !BCC_EOS
28309 749A           EB           26            jmp .26C
28310                       0000749C            .26D:
28311                                           ! 3958             write_byte(ES, BX, inb(0x3c9)); BX++;
28312                                           ! Debug: list int = const $3C9 (used reg = )
28313 749C           B8                   03C9  mov	ax,#$3C9
28314 749F           50                         push	ax
28315                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28316 74A0           E8         0764            call	_inb
28317 74A3           44                         inc	sp
28318 74A4           44                         inc	sp
28319                                           ! Debug: list unsigned char = al+0 (used reg = )
28320 74A5           30E4                       xor	ah,ah
28321 74A7           50                         push	ax
28322                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28323 74A8           FF76         08            push	8[bp]
28324                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28325 74AB           FF76         06            push	6[bp]
28326                                           ! Debug: func () void = write_byte+0 (used reg = )
28327 74AE           E8         0726            call	_write_byte
28328 74B1           83C4                   06  add	sp,*6
28329                                           !BCC_EOS
28330                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28331 74B4           8B46         08            mov	ax,8[bp]
28332 74B7           40                         inc	ax
28333 74B8           8946         08            mov	8[bp],ax
28334                                           !BCC_EOS
28335                                           ! 3959         }
28336                                           ! 3960         write_byte(ES, BX, 0); BX++;
28337                       000074BB            .26B:
28338                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28339 74BB           8B46         FE            mov	ax,-2[bp]
28340 74BE           40                         inc	ax
28341 74BF           8946         FE            mov	-2[bp],ax
28342                       000074C2            .26C:
28343                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28344 74C2           8B46         FE            mov	ax,-2[bp]
28345 74C5           3D                   0300  cmp	ax,#$300
28346 74C8           72           D2            jb 	.26D
28347                       000074CA            .26E:
28348                       000074CA            .26A:
28349                                           ! Debug: list int = const 0 (used reg = )
28350 74CA           31C0                       xor	ax,ax
28351 74CC           50                         push	ax
28352                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28353 74CD           FF76         08            push	8[bp]
28354                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28355 74D0           FF76         06            push	6[bp]
28356                                           ! Debug: func () void = write_byte+0 (used reg = )
28357 74D3           E8         0701            call	_write_byte
28358 74D6           83C4                   06  add	sp,*6
28359                                           !BCC_EOS
28360                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28361 74D9           8B46         08            mov	ax,8[bp]
28362 74DC           40                         inc	ax
28363 74DD           8946         08            mov	8[bp],ax
28364                                           !BCC_EOS
28365                                           ! 3961     }
28366                                           ! 3962     return BX;
28367                       000074E0            .268:
28368 74E0           8B46         08            mov	ax,8[bp]
28369 74E3           89EC                       mov	sp,bp
28370 74E5           5D                         pop	bp
28371 74E6           C3                         ret
28372                                           !BCC_EOS
28373                                           ! 3963 }
28374                                           ! 3964 static Bit16u biosfn_restore_video_state
28375                                           ! 3964  (CX,ES,BX)
28376                                           ! 3965      Bit16u CX;Bit16u ES;Bit16u BX;
28377                       000074E7            _biosfn_restore_video_state:
28378                                           !BCC_EOS
28379                                           !BCC_EOS
28380                                           !BCC_EOS
28381                                           ! 3966 {
28382                                           ! 3967     Bit16u i, crtc_addr, v, addr1, ar_index;
28383                                           !BCC_EOS
28384                                           ! 3968     if (CX & 1) {
28385 74E7           55                         push	bp
28386 74E8           89E5                       mov	bp,sp
28387 74EA           83C4                   F6  add	sp,*-$A
28388                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28389 74ED           8A46         04            mov	al,4[bp]
28390 74F0           24                     01  and	al,*1
28391 74F2           84C0                       test	al,al
28392 74F4         0F84         02AA            beq 	.26F
28393                       000074F8            .270:
28394                                           ! 3969         inb(0x3da);
28395                                           ! Debug: list int = const $3DA (used reg = )
28396 74F8           B8                   03DA  mov	ax,#$3DA
28397 74FB           50                         push	ax
28398                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28399 74FC           E8         0708            call	_inb
28400 74FF           44                         inc	sp
28401 7500           44                         inc	sp
28402                                           !BCC_EOS
28403                                           ! 3970         crtc_addr = read_word(ES, BX + 0x40);
28404                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28405 7501           8B46         08            mov	ax,8[bp]
28406                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28407 7504           05                   0040  add	ax,*$40
28408 7507           50                         push	ax
28409                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28410 7508           FF76         06            push	6[bp]
28411                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28412 750B           E8         06B6            call	_read_word
28413 750E           83C4                   04  add	sp,*4
28414                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28415 7511           8946         FC            mov	-4[bp],ax
28416                                           !BCC_EOS
28417                                           ! 3971         addr1 = BX;
28418                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28419 7514           8B46         08            mov	ax,8[bp]
28420 7517           8946         F8            mov	-8[bp],ax
28421                                           !BCC_EOS
28422                                           ! 3972         BX += 5;
28423                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28424 751A           8B46         08            mov	ax,8[bp]
28425 751D           05                   0005  add	ax,*5
28426 7520           8946         08            mov	8[bp],ax
28427                                           !BCC_EOS
28428                                           ! 3973         for(i=1;i<=4;i++){
28429                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28430 7523           B8                   0001  mov	ax,*1
28431 7526           8946         FE            mov	-2[bp],ax
28432                                           !BCC_EOS
28433                                           !BCC_EOS
28434 7529           EB           34            jmp .273
28435                       0000752B            .274:
28436                                           ! 3974             outb(0x3c4, i);
28437                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28438 752B           FF76         FE            push	-2[bp]
28439                                           ! Debug: list int = const $3C4 (used reg = )
28440 752E           B8                   03C4  mov	ax,#$3C4
28441 7531           50                         push	ax
28442                                           ! Debug: func () void = outb+0 (used reg = )
28443 7532           E8         06E8            call	_outb
28444 7535           83C4                   04  add	sp,*4
28445                                           !BCC_EOS
28446                                           ! 3975             outb(0x3c5, read_byte(ES, BX)); BX++;
28447                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28448 7538           FF76         08            push	8[bp]
28449                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28450 753B           FF76         06            push	6[bp]
28451                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28452 753E           E8         0670            call	_read_byte
28453 7541           83C4                   04  add	sp,*4
28454                                           ! Debug: list unsigned char = al+0 (used reg = )
28455 7544           30E4                       xor	ah,ah
28456 7546           50                         push	ax
28457                                           ! Debug: list int = const $3C5 (used reg = )
28458 7547           B8                   03C5  mov	ax,#$3C5
28459 754A           50                         push	ax
28460                                           ! Debug: func () void = outb+0 (used reg = )
28461 754B           E8         06CF            call	_outb
28462 754E           83C4                   04  add	sp,*4
28463                                           !BCC_EOS
28464                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28465 7551           8B46         08            mov	ax,8[bp]
28466 7554           40                         inc	ax
28467 7555           8946         08            mov	8[bp],ax
28468                                           !BCC_EOS
28469                                           ! 3976         }
28470                                           ! 3977         outb(0x3c4, 0);
28471                       00007558            .272:
28472                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28473 7558           8B46         FE            mov	ax,-2[bp]
28474 755B           40                         inc	ax
28475 755C           8946         FE            mov	-2[bp],ax
28476                       0000755F            .273:
28477                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28478 755F           8B46         FE            mov	ax,-2[bp]
28479 7562           3D                   0004  cmp	ax,*4
28480 7565           76           C4            jbe	.274
28481                       00007567            .275:
28482                       00007567            .271:
28483                                           ! Debug: list int = const 0 (used reg = )
28484 7567           31C0                       xor	ax,ax
28485 7569           50                         push	ax
28486                                           ! Debug: list int = const $3C4 (used reg = )
28487 756A           B8                   03C4  mov	ax,#$3C4
28488 756D           50                         push	ax
28489                                           ! Debug: func () void = outb+0 (used reg = )
28490 756E           E8         06AC            call	_outb
28491 7571           83C4                   04  add	sp,*4
28492                                           !BCC_EOS
28493                                           ! 3978         outb(0x3c5, read_byte(ES, BX)); BX++;
28494                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28495 7574           FF76         08            push	8[bp]
28496                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28497 7577           FF76         06            push	6[bp]
28498                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28499 757A           E8         0634            call	_read_byte
28500 757D           83C4                   04  add	sp,*4
28501                                           ! Debug: list unsigned char = al+0 (used reg = )
28502 7580           30E4                       xor	ah,ah
28503 7582           50                         push	ax
28504                                           ! Debug: list int = const $3C5 (used reg = )
28505 7583           B8                   03C5  mov	ax,#$3C5
28506 7586           50                         push	ax
28507                                           ! Debug: func () void = outb+0 (used reg = )
28508 7587           E8         0693            call	_outb
28509 758A           83C4                   04  add	sp,*4
28510                                           !BCC_EOS
28511                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28512 758D           8B46         08            mov	ax,8[bp]
28513 7590           40                         inc	ax
28514 7591           8946         08            mov	8[bp],ax
28515                                           !BCC_EOS
28516                                           ! 3979         outw(crtc_addr,0x0011);
28517                                           ! Debug: list int = const $11 (used reg = )
28518 7594           B8                   0011  mov	ax,*$11
28519 7597           50                         push	ax
28520                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28521 7598           FF76         FC            push	-4[bp]
28522                                           ! Debug: func () void = outw+0 (used reg = )
28523 759B           E8         068F            call	_outw
28524 759E           83C4                   04  add	sp,*4
28525                                           !BCC_EOS
28526                                           ! 3980         for(i=0;i<=0x18;i++) {
28527                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28528 75A1           31C0                       xor	ax,ax
28529 75A3           8946         FE            mov	-2[bp],ax
28530                                           !BCC_EOS
28531                                           !BCC_EOS
28532 75A6           EB           3C            jmp .278
28533                       000075A8            .279:
28534                                           ! 3981             if (i != 0x11) {
28535                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28536 75A8           8B46         FE            mov	ax,-2[bp]
28537 75AB           3D                   0011  cmp	ax,*$11
28538 75AE           74           26            je  	.27A
28539                       000075B0            .27B:
28540                                           ! 3982                 outb(crtc_addr,i);
28541                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28542 75B0           FF76         FE            push	-2[bp]
28543                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28544 75B3           FF76         FC            push	-4[bp]
28545                                           ! Debug: func () void = outb+0 (used reg = )
28546 75B6           E8         0664            call	_outb
28547 75B9           83C4                   04  add	sp,*4
28548                                           !BCC_EOS
28549                                           ! 3983                 outb(crtc_addr+1, read_byte(ES, BX));
28550                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28551 75BC           FF76         08            push	8[bp]
28552                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28553 75BF           FF76         06            push	6[bp]
28554                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28555 75C2           E8         05EC            call	_read_byte
28556 75C5           83C4                   04  add	sp,*4
28557                                           ! Debug: list unsigned char = al+0 (used reg = )
28558 75C8           30E4                       xor	ah,ah
28559 75CA           50                         push	ax
28560                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28561 75CB           8B46         FC            mov	ax,-4[bp]
28562                                           ! Debug: list unsigned int = ax+1 (used reg = )
28563 75CE           40                         inc	ax
28564 75CF           50                         push	ax
28565                                           ! Debug: func () void = outb+0 (used reg = )
28566 75D0           E8         064A            call	_outb
28567 75D3           83C4                   04  add	sp,*4
28568                                           !BCC_EOS
28569                                           ! 3984             }
28570                                           ! 3985             BX++;
28571                       000075D6            .27A:
28572                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28573 75D6           8B46         08            mov	ax,8[bp]
28574 75D9           40                         inc	ax
28575 75DA           8946         08            mov	8[bp],ax
28576                                           !BCC_EOS
28577                                           ! 3986         }
28578                                           ! 3987         v = inb(0x3cc) & ~0x01;
28579                       000075DD            .277:
28580                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28581 75DD           8B46         FE            mov	ax,-2[bp]
28582 75E0           40                         inc	ax
28583 75E1           8946         FE            mov	-2[bp],ax
28584                       000075E4            .278:
28585                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28586 75E4           8B46         FE            mov	ax,-2[bp]
28587 75E7           3D                   0018  cmp	ax,*$18
28588 75EA           76           BC            jbe	.279
28589                       000075EC            .27C:
28590                       000075EC            .276:
28591                                           ! Debug: list int = const $3CC (used reg = )
28592 75EC           B8                   03CC  mov	ax,#$3CC
28593 75EF           50                         push	ax
28594                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28595 75F0           E8         0614            call	_inb
28596 75F3           44                         inc	sp
28597 75F4           44                         inc	sp
28598                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28599 75F5           24                     FE  and	al,#$FE
28600                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28601 75F7           30E4                       xor	ah,ah
28602 75F9           8946         FA            mov	-6[bp],ax
28603                                           !BCC_EOS
28604                                           ! 3988         if (crtc_addr = 0x3d4)
28605                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28606 75FC           B8                   03D4  mov	ax,#$3D4
28607 75FF           8946         FC            mov	-4[bp],ax
28608 7602           85C0                       test	ax,ax
28609 7604           74           08            je  	.27D
28610                       00007606            .27E:
28611                                           ! 3989             v |= 0x01;
28612                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28613 7606           8B46         FA            mov	ax,-6[bp]
28614 7609           0C                     01  or	al,*1
28615 760B           8946         FA            mov	-6[bp],ax
28616                                           !BCC_EOS
28617                                           ! 3990         outb(0x3c2, v);
28618                       0000760E            .27D:
28619                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28620 760E           FF76         FA            push	-6[bp]
28621                                           ! Debug: list int = const $3C2 (used reg = )
28622 7611           B8                   03C2  mov	ax,#$3C2
28623 7614           50                         push	ax
28624                                           ! Debug: func () void = outb+0 (used reg = )
28625 7615           E8         0605            call	_outb
28626 7618           83C4                   04  add	sp,*4
28627                                           !BCC_EOS
28628                                           ! 3991         outb(crtc_addr, 0x11);
28629                                           ! Debug: list int = const $11 (used reg = )
28630 761B           B8                   0011  mov	ax,*$11
28631 761E           50                         push	ax
28632                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28633 761F           FF76         FC            push	-4[bp]
28634                                           ! Debug: func () void = outb+0 (used reg = )
28635 7622           E8         05F8            call	_outb
28636 7625           83C4                   04  add	sp,*4
28637                                           !BCC_EOS
28638                                           ! 3992         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28639                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28640 7628           8B46         08            mov	ax,8[bp]
28641                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28642                                           ! Debug: list unsigned int = ax-7 (used reg = )
28643 762B           05                   FFF9  add	ax,*-7
28644 762E           50                         push	ax
28645                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28646 762F           FF76         06            push	6[bp]
28647                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28648 7632           E8         057C            call	_read_byte
28649 7635           83C4                   04  add	sp,*4
28650                                           ! Debug: list unsigned char = al+0 (used reg = )
28651 7638           30E4                       xor	ah,ah
28652 763A           50                         push	ax
28653                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28654 763B           8B46         FC            mov	ax,-4[bp]
28655                                           ! Debug: list unsigned int = ax+1 (used reg = )
28656 763E           40                         inc	ax
28657 763F           50                         push	ax
28658                                           ! Debug: func () void = outb+0 (used reg = )
28659 7640           E8         05DA            call	_outb
28660 7643           83C4                   04  add	sp,*4
28661                                           !BCC_EOS
28662                                           ! 3993         ar_index = read_byte(ES, addr1 + 0x03);
28663                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28664 7646           8B46         F8            mov	ax,-8[bp]
28665                                           ! Debug: list unsigned int = ax+3 (used reg = )
28666 7649           05                   0003  add	ax,*3
28667 764C           50                         push	ax
28668                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28669 764D           FF76         06            push	6[bp]
28670                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28671 7650           E8         055E            call	_read_byte
28672 7653           83C4                   04  add	sp,*4
28673                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28674 7656           30E4                       xor	ah,ah
28675 7658           8946         F6            mov	-$A[bp],ax
28676                                           !BCC_EOS
28677                                           ! 3994         inb(0x3da);
28678                                           ! Debug: list int = const $3DA (used reg = )
28679 765B           B8                   03DA  mov	ax,#$3DA
28680 765E           50                         push	ax
28681                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28682 765F           E8         05A5            call	_inb
28683 7662           44                         inc	sp
28684 7663           44                         inc	sp
28685                                           !BCC_EOS
28686                                           ! 3995         for(i=0;i<=0x13;i++) {
28687                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28688 7664           31C0                       xor	ax,ax
28689 7666           8946         FE            mov	-2[bp],ax
28690                                           !BCC_EOS
28691                                           !BCC_EOS
28692 7669           EB           3C            jmp .281
28693                       0000766B            .282:
28694                                           ! 3996             outb(0x3c0, i | (ar_index & 0x20));
28695                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28696 766B           8A46         F6            mov	al,-$A[bp]
28697 766E           24                     20  and	al,*$20
28698                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28699                                           ! Debug: expression subtree swapping
28700 7670           30E4                       xor	ah,ah
28701 7672           0B46         FE            or	ax,-2[bp]
28702                                           ! Debug: list unsigned int = ax+0 (used reg = )
28703 7675           50                         push	ax
28704                                           ! Debug: list int = const $3C0 (used reg = )
28705 7676           B8                   03C0  mov	ax,#$3C0
28706 7679           50                         push	ax
28707                                           ! Debug: func () void = outb+0 (used reg = )
28708 767A           E8         05A0            call	_outb
28709 767D           83C4                   04  add	sp,*4
28710                                           !BCC_EOS
28711                                           ! 3997             outb(0x3c0, read_byte(ES, BX)); BX++;
28712                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28713 7680           FF76         08            push	8[bp]
28714                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28715 7683           FF76         06            push	6[bp]
28716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28717 7686           E8         0528            call	_read_byte
28718 7689           83C4                   04  add	sp,*4
28719                                           ! Debug: list unsigned char = al+0 (used reg = )
28720 768C           30E4                       xor	ah,ah
28721 768E           50                         push	ax
28722                                           ! Debug: list int = const $3C0 (used reg = )
28723 768F           B8                   03C0  mov	ax,#$3C0
28724 7692           50                         push	ax
28725                                           ! Debug: func () void = outb+0 (used reg = )
28726 7693           E8         0587            call	_outb
28727 7696           83C4                   04  add	sp,*4
28728                                           !BCC_EOS
28729                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28730 7699           8B46         08            mov	ax,8[bp]
28731 769C           40                         inc	ax
28732 769D           8946         08            mov	8[bp],ax
28733                                           !BCC_EOS
28734                                           ! 3998         }
28735                                           ! 3999         outb(0x3c0, ar_index);
28736                       000076A0            .280:
28737                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28738 76A0           8B46         FE            mov	ax,-2[bp]
28739 76A3           40                         inc	ax
28740 76A4           8946         FE            mov	-2[bp],ax
28741                       000076A7            .281:
28742                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28743 76A7           8B46         FE            mov	ax,-2[bp]
28744 76AA           3D                   0013  cmp	ax,*$13
28745 76AD           76           BC            jbe	.282
28746                       000076AF            .283:
28747                       000076AF            .27F:
28748                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28749 76AF           FF76         F6            push	-$A[bp]
28750                                           ! Debug: list int = const $3C0 (used reg = )
28751 76B2           B8                   03C0  mov	ax,#$3C0
28752 76B5           50                         push	ax
28753                                           ! Debug: func () void = outb+0 (used reg = )
28754 76B6           E8         0564            call	_outb
28755 76B9           83C4                   04  add	sp,*4
28756                                           !BCC_EOS
28757                                           ! 4000         inb(0x3da);
28758                                           ! Debug: list int = const $3DA (used reg = )
28759 76BC           B8                   03DA  mov	ax,#$3DA
28760 76BF           50                         push	ax
28761                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28762 76C0           E8         0544            call	_inb
28763 76C3           44                         inc	sp
28764 76C4           44                         inc	sp
28765                                           !BCC_EOS
28766                                           ! 4001         for(i=0;i<=8;i++) {
28767                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28768 76C5           31C0                       xor	ax,ax
28769 76C7           8946         FE            mov	-2[bp],ax
28770                                           !BCC_EOS
28771                                           !BCC_EOS
28772 76CA           EB           34            jmp .286
28773                       000076CC            .287:
28774                                           ! 4002             outb(0x3ce,i);
28775                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28776 76CC           FF76         FE            push	-2[bp]
28777                                           ! Debug: list int = const $3CE (used reg = )
28778 76CF           B8                   03CE  mov	ax,#$3CE
28779 76D2           50                         push	ax
28780                                           ! Debug: func () void = outb+0 (used reg = )
28781 76D3           E8         0547            call	_outb
28782 76D6           83C4                   04  add	sp,*4
28783                                           !BCC_EOS
28784                                           ! 4003             outb(0x3cf, read_byte(ES, BX)); BX++;
28785                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28786 76D9           FF76         08            push	8[bp]
28787                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28788 76DC           FF76         06            push	6[bp]
28789                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28790 76DF           E8         04CF            call	_read_byte
28791 76E2           83C4                   04  add	sp,*4
28792                                           ! Debug: list unsigned char = al+0 (used reg = )
28793 76E5           30E4                       xor	ah,ah
28794 76E7           50                         push	ax
28795                                           ! Debug: list int = const $3CF (used reg = )
28796 76E8           B8                   03CF  mov	ax,#$3CF
28797 76EB           50                         push	ax
28798                                           ! Debug: func () void = outb+0 (used reg = )
28799 76EC           E8         052E            call	_outb
28800 76EF           83C4                   04  add	sp,*4
28801                                           !BCC_EOS
28802                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28803 76F2           8B46         08            mov	ax,8[bp]
28804 76F5           40                         inc	ax
28805 76F6           8946         08            mov	8[bp],ax
28806                                           !BCC_EOS
28807                                           ! 4004         }
28808                                           ! 4005         BX += 2;
28809                       000076F9            .285:
28810                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28811 76F9           8B46         FE            mov	ax,-2[bp]
28812 76FC           40                         inc	ax
28813 76FD           8946         FE            mov	-2[bp],ax
28814                       00007700            .286:
28815                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28816 7700           8B46         FE            mov	ax,-2[bp]
28817 7703           3D                   0008  cmp	ax,*8
28818 7706           76           C4            jbe	.287
28819                       00007708            .288:
28820                       00007708            .284:
28821                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28822 7708           8B46         08            mov	ax,8[bp]
28823 770B           40                         inc	ax
28824 770C           40                         inc	ax
28825 770D           8946         08            mov	8[bp],ax
28826                                           !BCC_EOS
28827                                           ! 4006         BX += 4;
28828                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28829 7710           8B46         08            mov	ax,8[bp]
28830 7713           05                   0004  add	ax,*4
28831 7716           8946         08            mov	8[bp],ax
28832                                           !BCC_EOS
28833                                           ! 4007         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28834                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28835 7719           FF76         F8            push	-8[bp]
28836                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28837 771C           FF76         06            push	6[bp]
28838                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28839 771F           E8         048F            call	_read_byte
28840 7722           83C4                   04  add	sp,*4
28841                                           ! Debug: list unsigned char = al+0 (used reg = )
28842 7725           30E4                       xor	ah,ah
28843 7727           50                         push	ax
28844                                           ! Debug: list int = const $3C4 (used reg = )
28845 7728           B8                   03C4  mov	ax,#$3C4
28846 772B           50                         push	ax
28847                                           ! Debug: func () void = outb+0 (used reg = )
28848 772C           E8         04EE            call	_outb
28849 772F           83C4                   04  add	sp,*4
28850                                           !BCC_EOS
28851                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28852 7732           8B46         F8            mov	ax,-8[bp]
28853 7735           40                         inc	ax
28854 7736           8946         F8            mov	-8[bp],ax
28855                                           !BCC_EOS
28856                                           ! 4008         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28857                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28858 7739           FF76         F8            push	-8[bp]
28859                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28860 773C           FF76         06            push	6[bp]
28861                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28862 773F           E8         046F            call	_read_byte
28863 7742           83C4                   04  add	sp,*4
28864                                           ! Debug: list unsigned char = al+0 (used reg = )
28865 7745           30E4                       xor	ah,ah
28866 7747           50                         push	ax
28867                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28868 7748           FF76         FC            push	-4[bp]
28869                                           ! Debug: func () void = outb+0 (used reg = )
28870 774B           E8         04CF            call	_outb
28871 774E           83C4                   04  add	sp,*4
28872                                           !BCC_EOS
28873                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28874 7751           8B46         F8            mov	ax,-8[bp]
28875 7754           40                         inc	ax
28876 7755           8946         F8            mov	-8[bp],ax
28877                                           !BCC_EOS
28878                                           ! 4009         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28879                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28880 7758           FF76         F8            push	-8[bp]
28881                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28882 775B           FF76         06            push	6[bp]
28883                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28884 775E           E8         0450            call	_read_byte
28885 7761           83C4                   04  add	sp,*4
28886                                           ! Debug: list unsigned char = al+0 (used reg = )
28887 7764           30E4                       xor	ah,ah
28888 7766           50                         push	ax
28889                                           ! Debug: list int = const $3CE (used reg = )
28890 7767           B8                   03CE  mov	ax,#$3CE
28891 776A           50                         push	ax
28892                                           ! Debug: func () void = outb+0 (used reg = )
28893 776B           E8         04AF            call	_outb
28894 776E           83C4                   04  add	sp,*4
28895                                           !BCC_EOS
28896                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28897 7771           8B46         F8            mov	ax,-8[bp]
28898 7774           40                         inc	ax
28899 7775           8946         F8            mov	-8[bp],ax
28900                                           !BCC_EOS
28901                                           ! 4010         addr1++;
28902                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28903 7778           8B46         F8            mov	ax,-8[bp]
28904 777B           40                         inc	ax
28905 777C           8946         F8            mov	-8[bp],ax
28906                                           !BCC_EOS
28907                                           ! 4011         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28908                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28909 777F           FF76         F8            push	-8[bp]
28910                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28911 7782           FF76         06            push	6[bp]
28912                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28913 7785           E8         0429            call	_read_byte
28914 7788           83C4                   04  add	sp,*4
28915                                           ! Debug: list unsigned char = al+0 (used reg = )
28916 778B           30E4                       xor	ah,ah
28917 778D           50                         push	ax
28918                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28919 778E           8B46         FC            mov	ax,-4[bp]
28920                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28921                                           ! Debug: list unsigned int = ax+6 (used reg = )
28922 7791           05                   0006  add	ax,*6
28923 7794           50                         push	ax
28924                                           ! Debug: func () void = outb+0 (used reg = )
28925 7795           E8         0485            call	_outb
28926 7798           83C4                   04  add	sp,*4
28927                                           !BCC_EOS
28928                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28929 779B           8B46         F8            mov	ax,-8[bp]
28930 779E           40                         inc	ax
28931 779F           8946         F8            mov	-8[bp],ax
28932                                           !BCC_EOS
28933                                           ! 4012     }
28934                                           ! 4013     if (CX & 2) {
28935                       000077A2            .26F:
28936                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28937 77A2           8A46         04            mov	al,4[bp]
28938 77A5           24                     02  and	al,*2
28939 77A7           84C0                       test	al,al
28940 77A9         0F84         0270            beq 	.289
28941                       000077AD            .28A:
28942                                           ! 4014         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28943                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28944 77AD           FF76         08            push	8[bp]
28945                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28946 77B0           FF76         06            push	6[bp]
28947                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28948 77B3           E8         03FB            call	_read_byte
28949 77B6           83C4                   04  add	sp,*4
28950                                           ! Debug: list unsigned char = al+0 (used reg = )
28951 77B9           30E4                       xor	ah,ah
28952 77BB           50                         push	ax
28953                                           ! Debug: list int = const $49 (used reg = )
28954 77BC           B8                   0049  mov	ax,*$49
28955 77BF           50                         push	ax
28956                                           ! Debug: list int = const $40 (used reg = )
28957 77C0           B8                   0040  mov	ax,*$40
28958 77C3           50                         push	ax
28959                                           ! Debug: func () void = write_byte+0 (used reg = )
28960 77C4           E8         0410            call	_write_byte
28961 77C7           83C4                   06  add	sp,*6
28962                                           !BCC_EOS
28963                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28964 77CA           8B46         08            mov	ax,8[bp]
28965 77CD           40                         inc	ax
28966 77CE           8946         08            mov	8[bp],ax
28967                                           !BCC_EOS
28968                                           ! 4015         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28969                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28970 77D1           FF76         08            push	8[bp]
28971                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28972 77D4           FF76         06            push	6[bp]
28973                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28974 77D7           E8         03EA            call	_read_word
28975 77DA           83C4                   04  add	sp,*4
28976                                           ! Debug: list unsigned short = ax+0 (used reg = )
28977 77DD           50                         push	ax
28978                                           ! Debug: list int = const $4A (used reg = )
28979 77DE           B8                   004A  mov	ax,*$4A
28980 77E1           50                         push	ax
28981                                           ! Debug: list int = const $40 (used reg = )
28982 77E2           B8                   0040  mov	ax,*$40
28983 77E5           50                         push	ax
28984                                           ! Debug: func () void = write_word+0 (used reg = )
28985 77E6           E8         0406            call	_write_word
28986 77E9           83C4                   06  add	sp,*6
28987                                           !BCC_EOS
28988                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28989 77EC           8B46         08            mov	ax,8[bp]
28990 77EF           40                         inc	ax
28991 77F0           40                         inc	ax
28992 77F1           8946         08            mov	8[bp],ax
28993                                           !BCC_EOS
28994                                           ! 4016         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28995                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28996 77F4           FF76         08            push	8[bp]
28997                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28998 77F7           FF76         06            push	6[bp]
28999                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29000 77FA           E8         03C7            call	_read_word
29001 77FD           83C4                   04  add	sp,*4
29002                                           ! Debug: list unsigned short = ax+0 (used reg = )
29003 7800           50                         push	ax
29004                                           ! Debug: list int = const $4C (used reg = )
29005 7801           B8                   004C  mov	ax,*$4C
29006 7804           50                         push	ax
29007                                           ! Debug: list int = const $40 (used reg = )
29008 7805           B8                   0040  mov	ax,*$40
29009 7808           50                         push	ax
29010                                           ! Debug: func () void = write_word+0 (used reg = )
29011 7809           E8         03E3            call	_write_word
29012 780C           83C4                   06  add	sp,*6
29013                                           !BCC_EOS
29014                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29015 780F           8B46         08            mov	ax,8[bp]
29016 7812           40                         inc	ax
29017 7813           40                         inc	ax
29018 7814           8946         08            mov	8[bp],ax
29019                                           !BCC_EOS
29020                                           ! 4017         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29021                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29022 7817           FF76         08            push	8[bp]
29023                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29024 781A           FF76         06            push	6[bp]
29025                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29026 781D           E8         03A4            call	_read_word
29027 7820           83C4                   04  add	sp,*4
29028                                           ! Debug: list unsigned short = ax+0 (used reg = )
29029 7823           50                         push	ax
29030                                           ! Debug: list int = const $63 (used reg = )
29031 7824           B8                   0063  mov	ax,*$63
29032 7827           50                         push	ax
29033                                           ! Debug: list int = const $40 (used reg = )
29034 7828           B8                   0040  mov	ax,*$40
29035 782B           50                         push	ax
29036                                           ! Debug: func () void = write_word+0 (used reg = )
29037 782C           E8         03C0            call	_write_word
29038 782F           83C4                   06  add	sp,*6
29039                                           !BCC_EOS
29040                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29041 7832           8B46         08            mov	ax,8[bp]
29042 7835           40                         inc	ax
29043 7836           40                         inc	ax
29044 7837           8946         08            mov	8[bp],ax
29045                                           !BCC_EOS
29046                                           ! 4018         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29047                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29048 783A           FF76         08            push	8[bp]
29049                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29050 783D           FF76         06            push	6[bp]
29051                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29052 7840           E8         036E            call	_read_byte
29053 7843           83C4                   04  add	sp,*4
29054                                           ! Debug: list unsigned char = al+0 (used reg = )
29055 7846           30E4                       xor	ah,ah
29056 7848           50                         push	ax
29057                                           ! Debug: list int = const $84 (used reg = )
29058 7849           B8                   0084  mov	ax,#$84
29059 784C           50                         push	ax
29060                                           ! Debug: list int = const $40 (used reg = )
29061 784D           B8                   0040  mov	ax,*$40
29062 7850           50                         push	ax
29063                                           ! Debug: func () void = write_byte+0 (used reg = )
29064 7851           E8         0383            call	_write_byte
29065 7854           83C4                   06  add	sp,*6
29066                                           !BCC_EOS
29067                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29068 7857           8B46         08            mov	ax,8[bp]
29069 785A           40                         inc	ax
29070 785B           8946         08            mov	8[bp],ax
29071                                           !BCC_EOS
29072                                           ! 4019         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29073                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29074 785E           FF76         08            push	8[bp]
29075                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29076 7861           FF76         06            push	6[bp]
29077                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29078 7864           E8         035D            call	_read_word
29079 7867           83C4                   04  add	sp,*4
29080                                           ! Debug: list unsigned short = ax+0 (used reg = )
29081 786A           50                         push	ax
29082                                           ! Debug: list int = const $85 (used reg = )
29083 786B           B8                   0085  mov	ax,#$85
29084 786E           50                         push	ax
29085                                           ! Debug: list int = const $40 (used reg = )
29086 786F           B8                   0040  mov	ax,*$40
29087 7872           50                         push	ax
29088                                           ! Debug: func () void = write_word+0 (used reg = )
29089 7873           E8         0379            call	_write_word
29090 7876           83C4                   06  add	sp,*6
29091                                           !BCC_EOS
29092                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29093 7879           8B46         08            mov	ax,8[bp]
29094 787C           40                         inc	ax
29095 787D           40                         inc	ax
29096 787E           8946         08            mov	8[bp],ax
29097                                           !BCC_EOS
29098                                           ! 4020         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29099                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29100 7881           FF76         08            push	8[bp]
29101                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29102 7884           FF76         06            push	6[bp]
29103                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29104 7887           E8         0327            call	_read_byte
29105 788A           83C4                   04  add	sp,*4
29106                                           ! Debug: list unsigned char = al+0 (used reg = )
29107 788D           30E4                       xor	ah,ah
29108 788F           50                         push	ax
29109                                           ! Debug: list int = const $87 (used reg = )
29110 7890           B8                   0087  mov	ax,#$87
29111 7893           50                         push	ax
29112                                           ! Debug: list int = const $40 (used reg = )
29113 7894           B8                   0040  mov	ax,*$40
29114 7897           50                         push	ax
29115                                           ! Debug: func () void = write_byte+0 (used reg = )
29116 7898           E8         033C            call	_write_byte
29117 789B           83C4                   06  add	sp,*6
29118                                           !BCC_EOS
29119                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29120 789E           8B46         08            mov	ax,8[bp]
29121 78A1           40                         inc	ax
29122 78A2           8946         08            mov	8[bp],ax
29123                                           !BCC_EOS
29124                                           ! 4021         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29125                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29126 78A5           FF76         08            push	8[bp]
29127                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29128 78A8           FF76         06            push	6[bp]
29129                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29130 78AB           E8         0303            call	_read_byte
29131 78AE           83C4                   04  add	sp,*4
29132                                           ! Debug: list unsigned char = al+0 (used reg = )
29133 78B1           30E4                       xor	ah,ah
29134 78B3           50                         push	ax
29135                                           ! Debug: list int = const $88 (used reg = )
29136 78B4           B8                   0088  mov	ax,#$88
29137 78B7           50                         push	ax
29138                                           ! Debug: list int = const $40 (used reg = )
29139 78B8           B8                   0040  mov	ax,*$40
29140 78BB           50                         push	ax
29141                                           ! Debug: func () void = write_byte+0 (used reg = )
29142 78BC           E8         0318            call	_write_byte
29143 78BF           83C4                   06  add	sp,*6
29144                                           !BCC_EOS
29145                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29146 78C2           8B46         08            mov	ax,8[bp]
29147 78C5           40                         inc	ax
29148 78C6           8946         08            mov	8[bp],ax
29149                                           !BCC_EOS
29150                                           ! 4022         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29151                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29152 78C9           FF76         08            push	8[bp]
29153                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29154 78CC           FF76         06            push	6[bp]
29155                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29156 78CF           E8         02DF            call	_read_byte
29157 78D2           83C4                   04  add	sp,*4
29158                                           ! Debug: list unsigned char = al+0 (used reg = )
29159 78D5           30E4                       xor	ah,ah
29160 78D7           50                         push	ax
29161                                           ! Debug: list int = const $89 (used reg = )
29162 78D8           B8                   0089  mov	ax,#$89
29163 78DB           50                         push	ax
29164                                           ! Debug: list int = const $40 (used reg = )
29165 78DC           B8                   0040  mov	ax,*$40
29166 78DF           50                         push	ax
29167                                           ! Debug: func () void = write_byte+0 (used reg = )
29168 78E0           E8         02F4            call	_write_byte
29169 78E3           83C4                   06  add	sp,*6
29170                                           !BCC_EOS
29171                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29172 78E6           8B46         08            mov	ax,8[bp]
29173 78E9           40                         inc	ax
29174 78EA           8946         08            mov	8[bp],ax
29175                                           !BCC_EOS
29176                                           ! 4023         write_word(0x40,0x60, r
29177                                           ! 4023 ead_word(ES, BX)); BX += 2;
29178                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29179 78ED           FF76         08            push	8[bp]
29180                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29181 78F0           FF76         06            push	6[bp]
29182                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29183 78F3           E8         02CE            call	_read_word
29184 78F6           83C4                   04  add	sp,*4
29185                                           ! Debug: list unsigned short = ax+0 (used reg = )
29186 78F9           50                         push	ax
29187                                           ! Debug: list int = const $60 (used reg = )
29188 78FA           B8                   0060  mov	ax,*$60
29189 78FD           50                         push	ax
29190                                           ! Debug: list int = const $40 (used reg = )
29191 78FE           B8                   0040  mov	ax,*$40
29192 7901           50                         push	ax
29193                                           ! Debug: func () void = write_word+0 (used reg = )
29194 7902           E8         02EA            call	_write_word
29195 7905           83C4                   06  add	sp,*6
29196                                           !BCC_EOS
29197                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29198 7908           8B46         08            mov	ax,8[bp]
29199 790B           40                         inc	ax
29200 790C           40                         inc	ax
29201 790D           8946         08            mov	8[bp],ax
29202                                           !BCC_EOS
29203                                           ! 4024         for(i=0;i<8;i++) {
29204                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29205 7910           31C0                       xor	ax,ax
29206 7912           8946         FE            mov	-2[bp],ax
29207                                           !BCC_EOS
29208                                           !BCC_EOS
29209 7915           EB           2F            jmp .28D
29210                       00007917            .28E:
29211                                           ! 4025             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29212                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29213 7917           FF76         08            push	8[bp]
29214                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29215 791A           FF76         06            push	6[bp]
29216                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29217 791D           E8         02A4            call	_read_word
29218 7920           83C4                   04  add	sp,*4
29219                                           ! Debug: list unsigned short = ax+0 (used reg = )
29220 7923           50                         push	ax
29221                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29222                                           ! Debug: expression subtree swapping
29223 7924           8B46         FE            mov	ax,-2[bp]
29224 7927           D1E0                       shl	ax,*1
29225                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29226                                           ! Debug: expression subtree swapping
29227                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29228 7929           05                   0050  add	ax,*$50
29229 792C           50                         push	ax
29230                                           ! Debug: list int = const $40 (used reg = )
29231 792D           B8                   0040  mov	ax,*$40
29232 7930           50                         push	ax
29233                                           ! Debug: func () void = write_word+0 (used reg = )
29234 7931           E8         02BB            call	_write_word
29235 7934           83C4                   06  add	sp,*6
29236                                           !BCC_EOS
29237                                           ! 4026             BX += 2;
29238                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29239 7937           8B46         08            mov	ax,8[bp]
29240 793A           40                         inc	ax
29241 793B           40                         inc	ax
29242 793C           8946         08            mov	8[bp],ax
29243                                           !BCC_EOS
29244                                           ! 4027         }
29245                                           ! 4028         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29246                       0000793F            .28C:
29247                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29248 793F           8B46         FE            mov	ax,-2[bp]
29249 7942           40                         inc	ax
29250 7943           8946         FE            mov	-2[bp],ax
29251                       00007946            .28D:
29252                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29253 7946           8B46         FE            mov	ax,-2[bp]
29254 7949           3D                   0008  cmp	ax,*8
29255 794C           72           C9            jb 	.28E
29256                       0000794E            .28F:
29257                       0000794E            .28B:
29258                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29259 794E           FF76         08            push	8[bp]
29260                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29261 7951           FF76         06            push	6[bp]
29262                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29263 7954           E8         026D            call	_read_word
29264 7957           83C4                   04  add	sp,*4
29265                                           ! Debug: list unsigned short = ax+0 (used reg = )
29266 795A           50                         push	ax
29267                                           ! Debug: list int = const $4E (used reg = )
29268 795B           B8                   004E  mov	ax,*$4E
29269 795E           50                         push	ax
29270                                           ! Debug: list int = const $40 (used reg = )
29271 795F           B8                   0040  mov	ax,*$40
29272 7962           50                         push	ax
29273                                           ! Debug: func () void = write_word+0 (used reg = )
29274 7963           E8         0289            call	_write_word
29275 7966           83C4                   06  add	sp,*6
29276                                           !BCC_EOS
29277                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29278 7969           8B46         08            mov	ax,8[bp]
29279 796C           40                         inc	ax
29280 796D           40                         inc	ax
29281 796E           8946         08            mov	8[bp],ax
29282                                           !BCC_EOS
29283                                           ! 4029         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29284                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29285 7971           FF76         08            push	8[bp]
29286                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29287 7974           FF76         06            push	6[bp]
29288                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29289 7977           E8         0237            call	_read_byte
29290 797A           83C4                   04  add	sp,*4
29291                                           ! Debug: list unsigned char = al+0 (used reg = )
29292 797D           30E4                       xor	ah,ah
29293 797F           50                         push	ax
29294                                           ! Debug: list int = const $62 (used reg = )
29295 7980           B8                   0062  mov	ax,*$62
29296 7983           50                         push	ax
29297                                           ! Debug: list int = const $40 (used reg = )
29298 7984           B8                   0040  mov	ax,*$40
29299 7987           50                         push	ax
29300                                           ! Debug: func () void = write_byte+0 (used reg = )
29301 7988           E8         024C            call	_write_byte
29302 798B           83C4                   06  add	sp,*6
29303                                           !BCC_EOS
29304                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29305 798E           8B46         08            mov	ax,8[bp]
29306 7991           40                         inc	ax
29307 7992           8946         08            mov	8[bp],ax
29308                                           !BCC_EOS
29309                                           ! 4030         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29310                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29311 7995           FF76         08            push	8[bp]
29312                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29313 7998           FF76         06            push	6[bp]
29314                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29315 799B           E8         0226            call	_read_word
29316 799E           83C4                   04  add	sp,*4
29317                                           ! Debug: list unsigned short = ax+0 (used reg = )
29318 79A1           50                         push	ax
29319                                           ! Debug: list int = const $7C (used reg = )
29320 79A2           B8                   007C  mov	ax,*$7C
29321 79A5           50                         push	ax
29322                                           ! Debug: list int = const 0 (used reg = )
29323 79A6           31C0                       xor	ax,ax
29324 79A8           50                         push	ax
29325                                           ! Debug: func () void = write_word+0 (used reg = )
29326 79A9           E8         0243            call	_write_word
29327 79AC           83C4                   06  add	sp,*6
29328                                           !BCC_EOS
29329                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29330 79AF           8B46         08            mov	ax,8[bp]
29331 79B2           40                         inc	ax
29332 79B3           40                         inc	ax
29333 79B4           8946         08            mov	8[bp],ax
29334                                           !BCC_EOS
29335                                           ! 4031         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29336                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29337 79B7           FF76         08            push	8[bp]
29338                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29339 79BA           FF76         06            push	6[bp]
29340                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29341 79BD           E8         0204            call	_read_word
29342 79C0           83C4                   04  add	sp,*4
29343                                           ! Debug: list unsigned short = ax+0 (used reg = )
29344 79C3           50                         push	ax
29345                                           ! Debug: list int = const $7E (used reg = )
29346 79C4           B8                   007E  mov	ax,*$7E
29347 79C7           50                         push	ax
29348                                           ! Debug: list int = const 0 (used reg = )
29349 79C8           31C0                       xor	ax,ax
29350 79CA           50                         push	ax
29351                                           ! Debug: func () void = write_word+0 (used reg = )
29352 79CB           E8         0221            call	_write_word
29353 79CE           83C4                   06  add	sp,*6
29354                                           !BCC_EOS
29355                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29356 79D1           8B46         08            mov	ax,8[bp]
29357 79D4           40                         inc	ax
29358 79D5           40                         inc	ax
29359 79D6           8946         08            mov	8[bp],ax
29360                                           !BCC_EOS
29361                                           ! 4032         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29362                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29363 79D9           FF76         08            push	8[bp]
29364                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29365 79DC           FF76         06            push	6[bp]
29366                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29367 79DF           E8         01E2            call	_read_word
29368 79E2           83C4                   04  add	sp,*4
29369                                           ! Debug: list unsigned short = ax+0 (used reg = )
29370 79E5           50                         push	ax
29371                                           ! Debug: list int = const $10C (used reg = )
29372 79E6           B8                   010C  mov	ax,#$10C
29373 79E9           50                         push	ax
29374                                           ! Debug: list int = const 0 (used reg = )
29375 79EA           31C0                       xor	ax,ax
29376 79EC           50                         push	ax
29377                                           ! Debug: func () void = write_word+0 (used reg = )
29378 79ED           E8         01FF            call	_write_word
29379 79F0           83C4                   06  add	sp,*6
29380                                           !BCC_EOS
29381                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29382 79F3           8B46         08            mov	ax,8[bp]
29383 79F6           40                         inc	ax
29384 79F7           40                         inc	ax
29385 79F8           8946         08            mov	8[bp],ax
29386                                           !BCC_EOS
29387                                           ! 4033         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29388                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29389 79FB           FF76         08            push	8[bp]
29390                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29391 79FE           FF76         06            push	6[bp]
29392                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29393 7A01           E8         01C0            call	_read_word
29394 7A04           83C4                   04  add	sp,*4
29395                                           ! Debug: list unsigned short = ax+0 (used reg = )
29396 7A07           50                         push	ax
29397                                           ! Debug: list int = const $10E (used reg = )
29398 7A08           B8                   010E  mov	ax,#$10E
29399 7A0B           50                         push	ax
29400                                           ! Debug: list int = const 0 (used reg = )
29401 7A0C           31C0                       xor	ax,ax
29402 7A0E           50                         push	ax
29403                                           ! Debug: func () void = write_word+0 (used reg = )
29404 7A0F           E8         01DD            call	_write_word
29405 7A12           83C4                   06  add	sp,*6
29406                                           !BCC_EOS
29407                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29408 7A15           8B46         08            mov	ax,8[bp]
29409 7A18           40                         inc	ax
29410 7A19           40                         inc	ax
29411 7A1A           8946         08            mov	8[bp],ax
29412                                           !BCC_EOS
29413                                           ! 4034     }
29414                                           ! 4035     if (CX & 4) {
29415                       00007A1D            .289:
29416                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29417 7A1D           8A46         04            mov	al,4[bp]
29418 7A20           24                     04  and	al,*4
29419 7A22           84C0                       test	al,al
29420 7A24         0F84         0096            beq 	.290
29421                       00007A28            .291:
29422                                           ! 4036         BX++;
29423                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29424 7A28           8B46         08            mov	ax,8[bp]
29425 7A2B           40                         inc	ax
29426 7A2C           8946         08            mov	8[bp],ax
29427                                           !BCC_EOS
29428                                           ! 4037         v = read_byte(ES, BX); BX++;
29429                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29430 7A2F           FF76         08            push	8[bp]
29431                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29432 7A32           FF76         06            push	6[bp]
29433                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29434 7A35           E8         0179            call	_read_byte
29435 7A38           83C4                   04  add	sp,*4
29436                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29437 7A3B           30E4                       xor	ah,ah
29438 7A3D           8946         FA            mov	-6[bp],ax
29439                                           !BCC_EOS
29440                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29441 7A40           8B46         08            mov	ax,8[bp]
29442 7A43           40                         inc	ax
29443 7A44           8946         08            mov	8[bp],ax
29444                                           !BCC_EOS
29445                                           ! 4038         outb(0x3c6, read_byte(ES, BX)); BX++;
29446                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29447 7A47           FF76         08            push	8[bp]
29448                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29449 7A4A           FF76         06            push	6[bp]
29450                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29451 7A4D           E8         0161            call	_read_byte
29452 7A50           83C4                   04  add	sp,*4
29453                                           ! Debug: list unsigned char = al+0 (used reg = )
29454 7A53           30E4                       xor	ah,ah
29455 7A55           50                         push	ax
29456                                           ! Debug: list int = const $3C6 (used reg = )
29457 7A56           B8                   03C6  mov	ax,#$3C6
29458 7A59           50                         push	ax
29459                                           ! Debug: func () void = outb+0 (used reg = )
29460 7A5A           E8         01C0            call	_outb
29461 7A5D           83C4                   04  add	sp,*4
29462                                           !BCC_EOS
29463                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29464 7A60           8B46         08            mov	ax,8[bp]
29465 7A63           40                         inc	ax
29466 7A64           8946         08            mov	8[bp],ax
29467                                           !BCC_EOS
29468                                           ! 4039         outb(0x3c8,0x00);
29469                                           ! Debug: list int = const 0 (used reg = )
29470 7A67           31C0                       xor	ax,ax
29471 7A69           50                         push	ax
29472                                           ! Debug: list int = const $3C8 (used reg = )
29473 7A6A           B8                   03C8  mov	ax,#$3C8
29474 7A6D           50                         push	ax
29475                                           ! Debug: func () void = outb+0 (used reg = )
29476 7A6E           E8         01AC            call	_outb
29477 7A71           83C4                   04  add	sp,*4
29478                                           !BCC_EOS
29479                                           ! 4040         for(i=0;i<256*3;i++) {
29480                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29481 7A74           31C0                       xor	ax,ax
29482 7A76           8946         FE            mov	-2[bp],ax
29483                                           !BCC_EOS
29484                                           !BCC_EOS
29485 7A79           EB           27            jmp .294
29486                       00007A7B            .295:
29487                                           ! 4041             outb(0x3c9, read_byte(ES, BX)); BX++;
29488                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29489 7A7B           FF76         08            push	8[bp]
29490                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29491 7A7E           FF76         06            push	6[bp]
29492                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29493 7A81           E8         012D            call	_read_byte
29494 7A84           83C4                   04  add	sp,*4
29495                                           ! Debug: list unsigned char = al+0 (used reg = )
29496 7A87           30E4                       xor	ah,ah
29497 7A89           50                         push	ax
29498                                           ! Debug: list int = const $3C9 (used reg = )
29499 7A8A           B8                   03C9  mov	ax,#$3C9
29500 7A8D           50                         push	ax
29501                                           ! Debug: func () void = outb+0 (used reg = )
29502 7A8E           E8         018C            call	_outb
29503 7A91           83C4                   04  add	sp,*4
29504                                           !BCC_EOS
29505                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29506 7A94           8B46         08            mov	ax,8[bp]
29507 7A97           40                         inc	ax
29508 7A98           8946         08            mov	8[bp],ax
29509                                           !BCC_EOS
29510                                           ! 4042         }
29511                                           ! 4043         BX++;
29512                       00007A9B            .293:
29513                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29514 7A9B           8B46         FE            mov	ax,-2[bp]
29515 7A9E           40                         inc	ax
29516 7A9F           8946         FE            mov	-2[bp],ax
29517                       00007AA2            .294:
29518                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29519 7AA2           8B46         FE            mov	ax,-2[bp]
29520 7AA5           3D                   0300  cmp	ax,#$300
29521 7AA8           72           D1            jb 	.295
29522                       00007AAA            .296:
29523                       00007AAA            .292:
29524                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29525 7AAA           8B46         08            mov	ax,8[bp]
29526 7AAD           40                         inc	ax
29527 7AAE           8946         08            mov	8[bp],ax
29528                                           !BCC_EOS
29529                                           ! 4044         outb(0x3c8, v);
29530                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29531 7AB1           FF76         FA            push	-6[bp]
29532                                           ! Debug: list int = const $3C8 (used reg = )
29533 7AB4           B8                   03C8  mov	ax,#$3C8
29534 7AB7           50                         push	ax
29535                                           ! Debug: func () void = outb+0 (used reg = )
29536 7AB8           E8         0162            call	_outb
29537 7ABB           83C4                   04  add	sp,*4
29538                                           !BCC_EOS
29539                                           ! 4045     }
29540                                           ! 4046     return BX;
29541                       00007ABE            .290:
29542 7ABE           8B46         08            mov	ax,8[bp]
29543 7AC1           89EC                       mov	sp,bp
29544 7AC3           5D                         pop	bp
29545 7AC4           C3                         ret
29546                                           !BCC_EOS
29547                                           ! 4047 }
29548                                           ! 4048 static Bit8u find_vga_entry(mode)
29549                                           ! 4049 Bit8u mode;
29550                       00007AC5            _find_vga_entry:
29551                                           !BCC_EOS
29552                                           ! 4050 {
29553                                           ! 4051  Bit8u i,line=0xFF;
29554 7AC5           55                         push	bp
29555 7AC6           89E5                       mov	bp,sp
29556 7AC8           4C                         dec	sp
29557 7AC9           4C                         dec	sp
29558                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29559 7ACA           B0                     FF  mov	al,#$FF
29560 7ACC           8846         FE            mov	-2[bp],al
29561                                           !BCC_EOS
29562                                           ! 4052  for(i=0;i<=15;i++)
29563                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29564 7ACF           30C0                       xor	al,al
29565 7AD1           8846         FF            mov	-1[bp],al
29566                                           !BCC_EOS
29567                                           !BCC_EOS
29568                                           ! 4053   if(vga_modes[i].svgamode==mode)
29569 7AD4           EB           23            jmp .299
29570                       00007AD6            .29A:
29571                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29572 7AD6           8A46         FF            mov	al,-1[bp]
29573 7AD9           30E4                       xor	ah,ah
29574 7ADB           B1                     03  mov	cl,*3
29575 7ADD           D3E0                       shl	ax,cl
29576 7ADF           89C3                       mov	bx,ax
29577                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29578 7AE1           8A87       01FD            mov	al,_vga_modes[bx]
29579 7AE5           3A46         04            cmp	al,4[bp]
29580 7AE8           75           08            jne 	.29B
29581                       00007AEA            .29C:
29582                                           ! 4054    {line=i;
29583                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29584 7AEA           8A46         FF            mov	al,-1[bp]
29585 7AED           8846         FE            mov	-2[bp],al
29586                                           !BCC_EOS
29587                                           ! 4055     break;
29588 7AF0           EB           0E            jmp .297
29589                                           !BCC_EOS
29590                                           ! 4056    }
29591                                           ! 4057  return line;
29592                       00007AF2            .29B:
29593                       00007AF2            .298:
29594                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29595 7AF2           8A46         FF            mov	al,-1[bp]
29596 7AF5           40                         inc	ax
29597 7AF6           8846         FF            mov	-1[bp],al
29598                       00007AF9            .299:
29599                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29600 7AF9           8A46         FF            mov	al,-1[bp]
29601 7AFC           3C                     0F  cmp	al,*$F
29602 7AFE           76           D6            jbe	.29A
29603                       00007B00            .29D:
29604                       00007B00            .297:
29605 7B00           8A46         FE            mov	al,-2[bp]
29606 7B03           89EC                       mov	sp,bp
29607 7B05           5D                         pop	bp
29608 7B06           C3                         ret
29609                                           !BCC_EOS
29610                                           ! 4058 }
29611                                           ! 4059 static void memsetb(seg,offset,value,count)
29612                                           ! Register BX used in function find_vga_entry
29613                                           ! 4060   Bit16u seg;
29614                       00007B07            _memsetb:
29615                                           !BCC_EOS
29616                                           ! 4061   Bit16u offset;
29617                                           !BCC_EOS
29618                                           ! 4062   Bit16u value;
29619                                           !BCC_EOS
29620                                           ! 4063   Bit16u count;
29621                                           !BCC_EOS
29622                                           ! 4064 {
29623                                           ! 4065 #asm
29624                                           !BCC_ASM
29625                       00000008            _memsetb.count	set	8
29626                       00000002            _memsetb.seg	set	2
29627                       00000006            _memsetb.value	set	6
29628                       00000004            _memsetb.offset	set	4
29629 7B07           55                           push bp
29630 7B08           89E5                         mov bp, sp
29631 7B0A           50                             push ax
29632 7B0B           51                             push cx
29633 7B0C           06                             push es
29634 7B0D           57                             push di
29635 7B0E           8B4E         0A                mov cx, 10[bp] ; count
29636 7B11           83F9                   00      cmp cx, #0x00
29637 7B14           74           10                je memsetb_end
29638 7B16           8B46         04                mov ax, 4[bp] ; segment
29639 7B19           8EC0                           mov es, ax
29640 7B1B           8B46         06                mov ax, 6[bp] ; offset
29641 7B1E           89C7                           mov di, ax
29642 7B20           8A46         08                mov al, 8[bp] ; value
29643 7B23           FC                             cld
29644 7B24           F3                             rep
29645 7B25           AA                              stosb
29646                       00007B26            memsetb_end:
29647 7B26           5F                             pop di
29648 7B27           07                             pop es
29649 7B28           59                             pop cx
29650 7B29           58                             pop ax
29651 7B2A           5D                           pop bp
29652                                           ! 4089 endasm
29653                                           !BCC_ENDASM
29654                                           ! 4090 }
29655 7B2B           C3                         ret
29656                                           ! 4091 static void memsetw(seg,offset,value,count)
29657                                           ! 4092   Bit16u seg;
29658                       00007B2C            _memsetw:
29659                                           !BCC_EOS
29660                                           ! 4093   Bit16u offset;
29661                                           !BCC_EOS
29662                                           ! 4094   Bit16u value;
29663                                           !BCC_EOS
29664                                           ! 4095   Bit16u count;
29665                                           !BCC_EOS
29666                                           ! 4096 {
29667                                           ! 4097 #asm
29668                                           !BCC_ASM
29669                       00000008            _memsetw.count	set	8
29670                       00000002            _memsetw.seg	set	2
29671                       00000006            _memsetw.value	set	6
29672                       00000004            _memsetw.offset	set	4
29673 7B2C           55                           push bp
29674 7B2D           89E5                         mov bp, sp
29675 7B2F           50                             push ax
29676 7B30           51                             push cx
29677 7B31           06                             push es
29678 7B32           57                             push di
29679 7B33           8B4E         0A                mov cx, 10[bp] ; count
29680 7B36           83F9                   00      cmp cx, #0x00
29681 7B39           74           10                je memsetw_end
29682 7B3B           8B46         04                mov ax, 4[bp] ; segment
29683 7B3E           8EC0                           mov es, ax
29684 7B40           8B46         06                mov ax, 6[bp] ; offset
29685 7B43           89C7                           mov di, ax
29686 7B45           8B46         08                mov ax, 8[bp] ; value
29687 7B48           FC                             cld
29688 7B49           F3                             rep
29689 7B4A           AB                              stosw
29690                       00007B4B            memsetw_end:
29691 7B4B           5F                             pop di
29692 7B4C           07                             pop es
29693 7B4D           59                             pop cx
29694 7B4E           58                             pop ax
29695 7B4F           5D                           pop bp
29696                                           ! 4121 endasm
29697                                           !BCC_ENDASM
29698                                           ! 4122 }
29699 7B50           C3                         ret
29700                                           ! 4123 static void memcpyb(dseg,doffset,sseg,soffset,count)
29701                                           ! 4124   Bit16u dseg;
29702                       00007B51            _memcpyb:
29703                                           !BCC_EOS
29704                                           ! 4125   Bit16u doffset;
29705                                           !BCC_EOS
29706                                           ! 4126   Bit16u sseg;
29707                                           !BCC_EOS
29708                                           ! 4127   Bit16u soffset;
29709                                           !BCC_EOS
29710                                           ! 4128   Bit16u count;
29711                                           !BCC_EOS
29712                                           ! 4129 {
29713                                           ! 4130 #asm
29714                                           !BCC_ASM
29715                       0000000A            _memcpyb.count	set	$A
29716                       00000006            _memcpyb.sseg	set	6
29717                       00000008            _memcpyb.soffset	set	8
29718                       00000002            _memcpyb.dseg	set	2
29719                       00000004            _memcpyb.doffset	set	4
29720 7B51           55                           push bp
29721 7B52           89E5                         mov bp, sp
29722 7B54           50                             push ax
29723 7B55           51                             push cx
29724 7B56           06                             push es
29725 7B57           57                             push di
29726 7B58           1E                             push ds
29727 7B59           56                             push si
29728 7B5A           8B4E         0C                mov cx, 12[bp] ; count
29729 7B5D           83F9                   00      cmp cx, #0x0000
29730 7B60           74           17                je memcpyb_end
29731 7B62           8B46         04                mov ax, 4[bp] ; dsegment
29732 7B65           8EC0                           mov es, ax
29733 7B67           8B46         06                mov ax, 6[bp] ; doffset
29734 7B6A           89C7                           mov di, ax
29735 7B6C           8B46         08                mov ax, 8[bp] ; ssegment
29736 7B6F           8ED8                           mov ds, ax
29737 7B71           8B46         0A                mov ax, 10[bp] ; soffset
29738 7B74           89C6                           mov si, ax
29739 7B76           FC                             cld
29740 7B77           F3                             rep
29741 7B78           A4                              movsb
29742                       00007B79            memcpyb_end:
29743 7B79           5E                             pop si
29744 7B7A           1F                             pop ds
29745 7B7B           5F                             pop di
29746 7B7C           07                             pop es
29747 7B7D           59                             pop cx
29748 7B7E           58                             pop ax
29749 7B7F           5D                           pop bp
29750                                           ! 4161 endasm
29751                                           !BCC_ENDASM
29752                                           ! 4162 }
29753 7B80           C3                         ret
29754                                           ! 4163 static void memcpyw(dseg,doffset,sseg,soffset,count)
29755                                           ! 4164   Bit16u dseg;
29756                       00007B81            _memcpyw:
29757                                           !BCC_EOS
29758                                           ! 4165   Bit16u doffset;
29759                                           !BCC_EOS
29760                                           ! 4166   Bit16u sseg;
29761                                           !BCC_EOS
29762                                           ! 4167   Bit16u soffset;
29763                                           !BCC_EOS
29764                                           ! 4168   Bit16u count;
29765                                           !BCC_EOS
29766                                           ! 4169 {
29767                                           ! 4170 #asm
29768                                           !BCC_ASM
29769                       0000000A            _memcpyw.count	set	$A
29770                       00000006            _memcpyw.sseg	set	6
29771                       00000008            _memcpyw.soffset	set	8
29772                       00000002            _memcpyw.dseg	set	2
29773                       00000004            _memcpyw.doffset	set	4
29774 7B81           55                           push bp
29775 7B82           89E5                         mov bp, sp
29776 7B84           50                             push ax
29777 7B85           51                             push cx
29778 7B86           06                             push es
29779 7B87           57                             push di
29780 7B88           1E                             push ds
29781 7B89           56                             push si
29782 7B8A           8B4E         0C                mov cx, 12[bp] ; count
29783 7B8D           83F9                   00      cmp cx, #0x0000
29784 7B90           74           17                je memcpyw_end
29785 7B92           8B46         04                mov ax, 4[bp] ; dsegment
29786 7B95           8EC0                           mov es, ax
29787 7B97           8B46         06                mov ax, 6[bp] ; doffset
29788 7B9A           89C7                           mov di, ax
29789 7B9C           8B46         08                mov ax, 8[bp] ; ssegment
29790 7B9F           8ED8                           mov ds, ax
29791 7BA1           8B46         0A                mov ax, 10[bp] ; soffset
29792 7BA4           89C6                           mov si, ax
29793 7BA6           FC                             cld
29794 7BA7           F3                             rep
29795 7BA8           A5                              movsw
29796                       00007BA9            memcpyw_end:
29797 7BA9           5E                             pop si
29798 7BAA           1F                             pop ds
29799 7BAB           5F                             pop di
29800 7BAC           07                             pop es
29801 7BAD           59                             pop cx
29802 7BAE           58                             pop ax
29803 7BAF           5D                           pop bp
29804                                           ! 4201 endasm
29805                                           !BCC_ENDASM
29806                                           ! 4202 }
29807 7BB0           C3                         ret
29808                                           ! 4203 static Bit8u
29809                                           ! 4204 read_byte(seg, offset)
29810                                           ! 4205   Bit16u seg;
29811                       00007BB1            _read_byte:
29812                                           !BCC_EOS
29813                                           ! 4206   Bit16u offset;
29814                                           !BCC_EOS
29815                                           ! 4207 {
29816                                           ! 4208 #asm
29817                                           !BCC_ASM
29818                       00000002            _read_byte.seg	set	2
29819                       00000004            _read_byte.offset	set	4
29820 7BB1           55                           push bp
29821 7BB2           89E5                         mov bp, sp
29822 7BB4           53                             push bx
29823 7BB5           1E                             push ds
29824 7BB6           8B46         04                mov ax, 4[bp] ; segment
29825 7BB9           8ED8                           mov ds, ax
29826 7BBB           8B5E         06                mov bx, 6[bp] ; offset
29827 7BBE           8A07                           mov al, [bx]
29828                                               ;; al = return value (byte)
29829 7BC0           1F                             pop ds
29830 7BC1           5B                             pop bx
29831 7BC2           5D                           pop bp
29832                                           ! 4221 endasm
29833                                           !BCC_ENDASM
29834                                           ! 4222 }
29835 7BC3           C3                         ret
29836                                           ! 4223 static Bit16u
29837                                           ! 4224 read_word(seg, offset)
29838                                           ! 4225   Bit16u seg;
29839                       00007BC4            _read_word:
29840                                           !BCC_EOS
29841                                           ! 4226   Bit16u offset;
29842                                           !BCC_EOS
29843                                           ! 4227 {
29844                                           ! 4228 #asm
29845                                           !BCC_ASM
29846                       00000002            _read_word.seg	set	2
29847                       00000004            _read_word.offset	set	4
29848 7BC4           55                           push bp
29849 7BC5           89E5                         mov bp, sp
29850 7BC7           53                             push bx
29851 7BC8           1E                             push ds
29852 7BC9           8B46         04                mov ax, 4[bp] ; segment
29853 7BCC           8ED8                           mov ds, ax
29854 7BCE           8B5E         06                mov bx, 6[bp] ; offset
29855 7BD1           8B07                           mov ax, [bx]
29856                                               ;; ax = return value (word)
29857 7BD3           1F                             pop ds
29858 7BD4           5B                             pop bx
29859 7BD5           5D                           pop bp
29860                                           ! 4241 endasm
29861                                           !BCC_ENDASM
29862                                           ! 4242 }
29863 7BD6           C3                         ret
29864                                           ! 4243 static void
29865                                           ! 4244 write_byte(seg, offset, data)
29866                                           ! 4245   Bit16u seg;
29867                       00007BD7            _write_byte:
29868                                           !BCC_EOS
29869                                           ! 4246   Bit16u offset;
29870                                           !BCC_EOS
29871                                           ! 4247   Bit8u data;
29872                                           !BCC_EOS
29873                                           ! 4248 {
29874                                           ! 4249 #asm
29875                                           !BCC_ASM
29876                       00000002            _write_byte.seg	set	2
29877                       00000006            _write_byte.data	set	6
29878                       00000004            _write_byte.offset	set	4
29879 7BD7           55                           push bp
29880 7BD8           89E5                         mov bp, sp
29881 7BDA           50                             push ax
29882 7BDB           53                             push bx
29883 7BDC           1E                             push ds
29884 7BDD           8B46         04                mov ax, 4[bp] ; segment
29885 7BE0           8ED8                           mov ds, ax
29886 7BE2           8B5E         06                mov bx, 6[bp] ; offset
29887 7BE5           8A46         08                mov al, 8[bp] ; data byte
29888 7BE8           8807                           mov [bx], al ; write data byte
29889 7BEA           1F                             pop ds
29890 7BEB           5B                             pop bx
29891 7BEC           58                             pop ax
29892 7BED           5D                           pop bp
29893                                           ! 4264 endasm
29894                                           !BCC_ENDASM
29895                                           ! 4265 }
29896 7BEE           C3                         ret
29897                                           ! 4266 static void
29898                                           ! 4267 write_word(seg, offset, data)
29899                                           ! 4268   Bit16u seg;
29900                       00007BEF            _write_word:
29901                                           !BCC_EOS
29902                                           ! 4269   Bit16u offset;
29903                                           !BCC_EOS
29904                                           ! 4270   Bit16u d
29905                                           ! 4270 ata;
29906                                           !BCC_EOS
29907                                           ! 4271 {
29908                                           ! 4272 #asm
29909                                           !BCC_ASM
29910                       00000002            _write_word.seg	set	2
29911                       00000006            _write_word.data	set	6
29912                       00000004            _write_word.offset	set	4
29913 7BEF           55                           push bp
29914 7BF0           89E5                         mov bp, sp
29915 7BF2           50                             push ax
29916 7BF3           53                             push bx
29917 7BF4           1E                             push ds
29918 7BF5           8B46         04                mov ax, 4[bp] ; segment
29919 7BF8           8ED8                           mov ds, ax
29920 7BFA           8B5E         06                mov bx, 6[bp] ; offset
29921 7BFD           8B46         08                mov ax, 8[bp] ; data word
29922 7C00           8907                           mov [bx], ax ; write data word
29923 7C02           1F                             pop ds
29924 7C03           5B                             pop bx
29925 7C04           58                             pop ax
29926 7C05           5D                           pop bp
29927                                           ! 4287 endasm
29928                                           !BCC_ENDASM
29929                                           ! 4288 }
29930 7C06           C3                         ret
29931                                           ! 4289  Bit8u
29932                                           ! 4290 inb(port)
29933                                           ! 4291   Bit16u port;
29934                                           export	_inb
29935                       00007C07            _inb:
29936                                           !BCC_EOS
29937                                           ! 4292 {
29938                                           ! 4293 #asm
29939                                           !BCC_ASM
29940                       00000002            _inb.port	set	2
29941 7C07           55                           push bp
29942 7C08           89E5                         mov bp, sp
29943 7C0A           52                             push dx
29944 7C0B           8B56         04                mov dx, 4[bp]
29945 7C0E           EC                             in al, dx
29946 7C0F           5A                             pop dx
29947 7C10           5D                           pop bp
29948                                           ! 4301 endasm
29949                                           !BCC_ENDASM
29950                                           ! 4302 }
29951 7C11           C3                         ret
29952                                           ! 4303   Bit16u
29953                                           ! 4304 inw(port)
29954                                           ! 4305   Bit16u port;
29955                                           export	_inw
29956                       00007C12            _inw:
29957                                           !BCC_EOS
29958                                           ! 4306 {
29959                                           ! 4307 #asm
29960                                           !BCC_ASM
29961                       00000002            _inw.port	set	2
29962 7C12           55                           push bp
29963 7C13           89E5                         mov bp, sp
29964 7C15           52                             push dx
29965 7C16           8B56         04                mov dx, 4[bp]
29966 7C19           ED                             in ax, dx
29967 7C1A           5A                             pop dx
29968 7C1B           5D                           pop bp
29969                                           ! 4315 endasm
29970                                           !BCC_ENDASM
29971                                           ! 4316 }
29972 7C1C           C3                         ret
29973                                           ! 4317   void
29974                                           ! 4318 outb(port, val)
29975                                           ! 4319   Bit16u port;
29976                                           export	_outb
29977                       00007C1D            _outb:
29978                                           !BCC_EOS
29979                                           ! 4320   Bit8u val;
29980                                           !BCC_EOS
29981                                           ! 4321 {
29982                                           ! 4322 #asm
29983                                           !BCC_ASM
29984                       00000004            _outb.val	set	4
29985                       00000002            _outb.port	set	2
29986 7C1D           55                           push bp
29987 7C1E           89E5                         mov bp, sp
29988 7C20           50                             push ax
29989 7C21           52                             push dx
29990 7C22           8B56         04                mov dx, 4[bp]
29991 7C25           8A46         06                mov al, 6[bp]
29992 7C28           EE                             out dx, al
29993 7C29           5A                             pop dx
29994 7C2A           58                             pop ax
29995 7C2B           5D                           pop bp
29996                                           ! 4333 endasm
29997                                           !BCC_ENDASM
29998                                           ! 4334 }
29999 7C2C           C3                         ret
30000                                           ! 4335   void
30001                                           ! 4336 outw(port, val)
30002                                           ! 4337   Bit16u port;
30003                                           export	_outw
30004                       00007C2D            _outw:
30005                                           !BCC_EOS
30006                                           ! 4338   Bit16u val;
30007                                           !BCC_EOS
30008                                           ! 4339 {
30009                                           ! 4340 #asm
30010                                           !BCC_ASM
30011                       00000004            _outw.val	set	4
30012                       00000002            _outw.port	set	2
30013 7C2D           55                           push bp
30014 7C2E           89E5                         mov bp, sp
30015 7C30           50                             push ax
30016 7C31           52                             push dx
30017 7C32           8B56         04                mov dx, 4[bp]
30018 7C35           8B46         06                mov ax, 6[bp]
30019 7C38           EF                             out dx, ax
30020 7C39           5A                             pop dx
30021 7C3A           58                             pop ax
30022 7C3B           5D                           pop bp
30023                                           ! 4351 endasm
30024                                           !BCC_ENDASM
30025                                           ! 4352 }
30026 7C3C           C3                         ret
30027                                           ! 4353 Bit16u get_SS()
30028                                           ! 4354 {
30029                                           export	_get_SS
30030                       00007C3D            _get_SS:
30031                                           ! 4355 #asm
30032                                           !BCC_ASM
30033 7C3D           8CD0                         mov ax, ss
30034                                           ! 4357 endasm
30035                                           !BCC_ENDASM
30036                                           ! 4358 }
30037 7C3F           C3                         ret
30038                                           ! 4359 void printf(s)
30039                                           ! 4360   Bit8u *s;
30040                                           export	_printf
30041                       00007C40            _printf:
30042                                           !BCC_EOS
30043                                           ! 4361 {
30044                                           ! 4362   Bit8u c, format_char;
30045                                           !BCC_EOS
30046                                           ! 4363   Boolean in_format;
30047                                           !BCC_EOS
30048                                           ! 4364   unsigned format_width, i;
30049                                           !BCC_EOS
30050                                           ! 4365   Bit16u *arg_ptr;
30051                                           !BCC_EOS
30052                                           ! 4366   Bit16u arg_seg, arg, digit, nibble, shift_count;
30053                                           !BCC_EOS
30054                                           ! 4367   arg_ptr = &s;
30055 7C40           55                         push	bp
30056 7C41           89E5                       mov	bp,sp
30057 7C43           83C4                   EC  add	sp,*-$14
30058                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30059 7C46           8D5E         04            lea	bx,4[bp]
30060 7C49           895E         F6            mov	-$A[bp],bx
30061                                           !BCC_EOS
30062                                           ! 4368   arg_seg = get_SS();
30063                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30064 7C4C           E8         FFEE            call	_get_SS
30065                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30066 7C4F           8946         F4            mov	-$C[bp],ax
30067                                           !BCC_EOS
30068                                           ! 4369   in_format = 0;
30069                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30070 7C52           31C0                       xor	ax,ax
30071 7C54           8946         FC            mov	-4[bp],ax
30072                                           !BCC_EOS
30073                                           ! 4370   format_width = 0;
30074                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30075 7C57           31C0                       xor	ax,ax
30076 7C59           8946         FA            mov	-6[bp],ax
30077                                           !BCC_EOS
30078                                           ! 4371   while (c = read_byte(0xc000, s)) {
30079 7C5C           E9         0104            br 	.29F
30080                       00007C5F            .2A0:
30081                                           ! 4372     if ( c == '%' ) {
30082                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30083 7C5F           8A46         FF            mov	al,-1[bp]
30084 7C62           3C                     25  cmp	al,*$25
30085 7C64           75           0E            jne 	.2A1
30086                       00007C66            .2A2:
30087                                           ! 4373       in_format = 1;
30088                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30089 7C66           B8                   0001  mov	ax,*1
30090 7C69           8946         FC            mov	-4[bp],ax
30091                                           !BCC_EOS
30092                                           ! 4374       format_width = 0;
30093                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30094 7C6C           31C0                       xor	ax,ax
30095 7C6E           8946         FA            mov	-6[bp],ax
30096                                           !BCC_EOS
30097                                           ! 4375       }
30098                                           ! 4376     else if (in_format) {
30099 7C71           E9         00E8            br 	.2A3
30100                       00007C74            .2A1:
30101 7C74           8B46         FC            mov	ax,-4[bp]
30102 7C77           85C0                       test	ax,ax
30103 7C79         0F84         00CF            beq 	.2A4
30104                       00007C7D            .2A5:
30105                                           ! 4377       if ( (c>='0') && (c<='9') ) {
30106                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30107 7C7D           8A46         FF            mov	al,-1[bp]
30108 7C80           3C                     30  cmp	al,*$30
30109 7C82           72           28            jb  	.2A6
30110                       00007C84            .2A8:
30111                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30112 7C84           8A46         FF            mov	al,-1[bp]
30113 7C87           3C                     39  cmp	al,*$39
30114 7C89           77           21            ja  	.2A6
30115                       00007C8B            .2A7:
30116                                           ! 4378         format_width = (format_width * 10) + (c - '0');
30117                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30118 7C8B           8A46         FF            mov	al,-1[bp]
30119 7C8E           30E4                       xor	ah,ah
30120 7C90           05                   FFD0  add	ax,*-$30
30121 7C93           50                         push	ax
30122                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30123 7C94           8B46         FA            mov	ax,-6[bp]
30124 7C97           89C2                       mov	dx,ax
30125 7C99           D1E0                       shl	ax,*1
30126 7C9B           D1E0                       shl	ax,*1
30127 7C9D           01D0                       add	ax,dx
30128 7C9F           D1E0                       shl	ax,*1
30129                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30130 7CA1           0346         EA            add	ax,-$16[bp]
30131 7CA4           44                         inc	sp
30132 7CA5           44                         inc	sp
30133                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30134 7CA6           8946         FA            mov	-6[bp],ax
30135                                           !BCC_EOS
30136                                           ! 4379         }
30137                                           ! 4380       else if (c == 'x') {
30138 7CA9           E9         009E            br 	.2A9
30139                       00007CAC            .2A6:
30140                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30141 7CAC           8A46         FF            mov	al,-1[bp]
30142 7CAF           3C                     78  cmp	al,*$78
30143 7CB1         0F85         0095            bne 	.2AA
30144                       00007CB5            .2AB:
30145                                           ! 4381         arg_ptr++;
30146                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30147 7CB5           8B5E         F6            mov	bx,-$A[bp]
30148 7CB8           43                         inc	bx
30149 7CB9           43                         inc	bx
30150 7CBA           895E         F6            mov	-$A[bp],bx
30151                                           !BCC_EOS
30152                                           ! 4382         arg = read_word(arg_seg, arg_ptr);
30153                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30154 7CBD           FF76         F6            push	-$A[bp]
30155                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30156 7CC0           FF76         F4            push	-$C[bp]
30157                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30158 7CC3           E8         FEFE            call	_read_word
30159 7CC6           83C4                   04  add	sp,*4
30160                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30161 7CC9           8946         F2            mov	-$E[bp],ax
30162                                           !BCC_EOS
30163                                           ! 4383         if (format_width == 0)
30164                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30165 7CCC           8B46         FA            mov	ax,-6[bp]
30166 7CCF           85C0                       test	ax,ax
30167 7CD1           75           06            jne 	.2AC
30168                       00007CD3            .2AD:
30169                                           ! 4384           format_width = 4;
30170                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30171 7CD3           B8                   0004  mov	ax,*4
30172 7CD6           8946         FA            mov	-6[bp],ax
30173                                           !BCC_EOS
30174                                           ! 4385         i = 0;
30175                       00007CD9            .2AC:
30176                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30177 7CD9           31C0                       xor	ax,ax
30178 7CDB           8946         F8            mov	-8[bp],ax
30179                                           !BCC_EOS
30180                                           ! 4386         digit = format_width - 1;
30181                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30182 7CDE           8B46         FA            mov	ax,-6[bp]
30183                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30184 7CE1           48                         dec	ax
30185 7CE2           8946         F0            mov	-$10[bp],ax
30186                                           !BCC_EOS
30187                                           ! 4387         for (i=0; i<format_width; i++) {
30188                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30189 7CE5           31C0                       xor	ax,ax
30190 7CE7           8946         F8            mov	-8[bp],ax
30191                                           !BCC_EOS
30192                                           !BCC_EOS
30193 7CEA           EB           51            jmp .2B0
30194                       00007CEC            .2B1:
30195                                           ! 4388           nibble = (arg >> (4 * digit)) & 0x000f;
30196                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30197                                           ! Debug: expression subtree swapping
30198 7CEC           8B46         F0            mov	ax,-$10[bp]
30199 7CEF           D1E0                       shl	ax,*1
30200 7CF1           D1E0                       shl	ax,*1
30201                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30202 7CF3           89C3                       mov	bx,ax
30203 7CF5           8B46         F2            mov	ax,-$E[bp]
30204 7CF8           89D9                       mov	cx,bx
30205 7CFA           D3E8                       shr	ax,cl
30206                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30207 7CFC           24                     0F  and	al,*$F
30208                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30209 7CFE           30E4                       xor	ah,ah
30210 7D00           8946         EE            mov	-$12[bp],ax
30211                                           !BCC_EOS
30212                                           ! 4389           if (nibble <= 9)
30213                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30214 7D03           8B46         EE            mov	ax,-$12[bp]
30215 7D06           3D                   0009  cmp	ax,*9
30216 7D09           77           13            ja  	.2B2
30217                       00007D0B            .2B3:
30218                                           ! 4390             outb(0x0500, nibble + '0');
30219                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30220 7D0B           8B46         EE            mov	ax,-$12[bp]
30221                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30222 7D0E           05                   0030  add	ax,*$30
30223 7D11           50                         push	ax
30224                                           ! Debug: list int = const $500 (used reg = )
30225 7D12           B8                   0500  mov	ax,#$500
30226 7D15           50                         push	ax
30227                                           ! Debug: func () void = outb+0 (used reg = )
30228 7D16           E8         FF04            call	_outb
30229 7D19           83C4                   04  add	sp,*4
30230                                           !BCC_EOS
30231                                           ! 4391           else
30232                                           ! 4392             outb(0x0500, (nibble - 10) + 'A');
30233 7D1C           EB           11            jmp .2B4
30234                       00007D1E            .2B2:
30235                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30236 7D1E           8B46         EE            mov	ax,-$12[bp]
30237                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30238                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30239 7D21           05                   0037  add	ax,*$37
30240 7D24           50                         push	ax
30241                                           ! Debug: list int = const $500 (used reg = )
30242 7D25           B8                   0500  mov	ax,#$500
30243 7D28           50                         push	ax
30244                                           ! Debug: func () void = outb+0 (used reg = )
30245 7D29           E8         FEF1            call	_outb
30246 7D2C           83C4                   04  add	sp,*4
30247                                           !BCC_EOS
30248                                           ! 4393           digit--;
30249                       00007D2F            .2B4:
30250                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30251 7D2F           8B46         F0            mov	ax,-$10[bp]
30252 7D32           48                         dec	ax
30253 7D33           8946         F0            mov	-$10[bp],ax
30254                                           !BCC_EOS
30255                                           ! 4394           }
30256                                           ! 4395         in_format = 0;
30257                       00007D36            .2AF:
30258                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30259 7D36           8B46         F8            mov	ax,-8[bp]
30260 7D39           40                         inc	ax
30261 7D3A           8946         F8            mov	-8[bp],ax
30262                       00007D3D            .2B0:
30263                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30264 7D3D           8B46         F8            mov	ax,-8[bp]
30265 7D40           3B46         FA            cmp	ax,-6[bp]
30266 7D43           72           A7            jb 	.2B1
30267                       00007D45            .2B5:
30268                       00007D45            .2AE:
30269                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30270 7D45           31C0                       xor	ax,ax
30271 7D47           8946         FC            mov	-4[bp],ax
30272                                           !BCC_EOS
30273                                           ! 4396         }
30274                                           ! 4397       }
30275                       00007D4A            .2AA:
30276                       00007D4A            .2A9:
30277                                           ! 4398     else {
30278 7D4A           EB           10            jmp .2B6
30279                       00007D4C            .2A4:
30280                                           ! 4399       outb(0x0500, c);
30281                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30282 7D4C           8A46         FF            mov	al,-1[bp]
30283 7D4F           30E4                       xor	ah,ah
30284 7D51           50                         push	ax
30285                                           ! Debug: list int = const $500 (used reg = )
30286 7D52           B8                   0500  mov	ax,#$500
30287 7D55           50                         push	ax
30288                                           ! Debug: func () void = outb+0 (used reg = )
30289 7D56           E8         FEC4            call	_outb
30290 7D59           83C4                   04  add	sp,*4
30291                                           !BCC_EOS
30292                                           ! 4400       }
30293                                           ! 4401     s ++;
30294                       00007D5C            .2B6:
30295                       00007D5C            .2A3:
30296                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30297 7D5C           8B5E         04            mov	bx,4[bp]
30298 7D5F           43                         inc	bx
30299 7D60           895E         04            mov	4[bp],bx
30300                                           !BCC_EOS
30301                                           ! 4402     }
30302                                           ! 4403 }
30303                       00007D63            .29F:
30304                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30305 7D63           FF76         04            push	4[bp]
30306                                           ! Debug: list unsigned int = const $C000 (used reg = )
30307 7D66           B8                   C000  mov	ax,#$C000
30308 7D69           50                         push	ax
30309                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30310 7D6A           E8         FE44            call	_read_byte
30311 7D6D           83C4                   04  add	sp,*4
30312                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30313 7D70           8846         FF            mov	-1[bp],al
30314 7D73           84C0                       test	al,al
30315 7D75         0F85         FEE6            bne 	.2A0
30316                       00007D79            .2B7:
30317                       00007D79            .29E:
30318 7D79           89EC                       mov	sp,bp
30319 7D7B           5D                         pop	bp
30320 7D7C           C3                         ret
30321                                           ! 4404 #asm
30322                                           !BCC_ASM
30323                       00000002            _printf.s	set	2
30324                                             ; get LFB address from PCI
30325                                             ; in - ax: PCI device vendor
30326                                             ; out - ax: LFB address (high 16 bit)
30327                                             ;; NOTE - may be called in protected mode
30328                       00007D7D            _pci_get_lfb_addr:
30329 7D7D           53                           push bx
30330 7D7E           51                           push cx
30331 7D7F           52                           push dx
30332 7D80     66    50                           push eax
30333 7D82           89C3                           mov bx, ax
30334 7D84           31C9                           xor cx, cx
30335 7D86           B2                     00      mov dl, #0x00
30336 7D88           E8         003D                call pci_read_reg
30337 7D8B           3D                   FFFF      cmp ax, #0xffff
30338 7D8E           74           12                jz pci_get_lfb_addr_fail
30339                       00007D90             pci_get_lfb_addr_next_dev:
30340 7D90           B2                     00      mov dl, #0x00
30341 7D92           E8         0033                call pci_read_reg
30342 7D95           39D8                           cmp ax, bx ;; check vendor
30343 7D97           74           0D                jz pci_get_lfb_addr_found
30344 7D99           83C1                   08      add cx, #0x8
30345 7D9C           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30346 7DA0           72           EE                jb pci_get_lfb_addr_next_dev
30347                       00007DA2             pci_get_lfb_addr_fail:
30348 7DA2           31D2                           xor dx, dx ;; no LFB
30349 7DA4           EB           1A                jmp pci_get_lfb_addr_return
30350                       00007DA6             pci_get_lfb_addr_found:
30351 7DA6           B2                     10      mov dl, #0x10 ;; I/O space #0
30352 7DA8           E8         001D                call pci_read_reg
30353 7DAB           A9                   FFF1      test ax, #0xfff1
30354 7DAE           74           0A                jz pci_get_lfb_addr_success
30355 7DB0           B2                     14      mov dl, #0x14 ;; I/O space #1
30356 7DB2           E8         0013                call pci_read_reg
30357 7DB5           A9                   FFF1      test ax, #0xfff1
30358 7DB8           75           E8                jnz pci_get_lfb_addr_fail
30359                       00007DBA             pci_get_lfb_addr_success:
30360 7DBA     66    C1E8                   10      shr eax, #16
30361 7DBE           89C2                           mov dx, ax ;; LFB address
30362                       00007DC0             pci_get_lfb_addr_return:
30363 7DC0     66    58                           pop eax
30364 7DC2           89D0                         mov ax, dx
30365 7DC4           5A                           pop dx
30366 7DC5           59                           pop cx
30367 7DC6           5B                           pop bx
30368 7DC7           C3                           ret
30369                                             ; read PCI register
30370                                             ; in - cx: device/function
30371                                             ; in - dl: register
30372                                             ; out - eax: value
30373                       00007DC8            pci_read_reg:
30374 7DC8     66    B8               00800000    mov eax, #0x00800000
30375 7DCE           89C8                         mov ax, cx
30376 7DD0     66    C1E0                   08    shl eax, #8
30377 7DD4           88D0                         mov al, dl
30378 7DD6           BA                   0CF8    mov dx, #0xcf8
30379 7DD9     66    EF                           out dx, eax
30380 7DDB           80C2                   04    add dl, #4
30381 7DDE     66    ED                           in eax, dx
30382 7DE0           C3                           ret
30383                                           ! 4464 endasm
30384                                           !BCC_ENDASM
30385                                           ! 4465 static ModeInfoListItem mode_info_list[]=
30386                                           ! Register BX used in function printf
30387                                           ! 4466 {
30388                                           
30389                       00007DE1            _mode_info_list:
30390                                           ! 4467 { 0x0100,
30391 7DE1                      0100            .word	$100
30392                                           ! 4468 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30393 7DE3                      009B            .word	$9B
30394                                           ! 4469                           0x01 | 0x02 | 0x04,
30395 7DE5                        07            .byte	7
30396                                           ! 4470                           0,
30397 7DE6                        00            .byte	0
30398                                           ! 4471                           64,
30399 7DE7                      0040            .word	$40
30400                                           ! 4472                    64,
30401 7DE9                      0040            .word	$40
30402                                           ! 4473                        0xA000,
30403 7DEB                      A000            .word	$A000
30404                                           ! 4474                        0x0000,
30405 7DED                      0000            .word	0
30406                                           ! 4475                       0,
30407 7DEF                      0000            .word	0
30408 7DF1                      0000            .word	0
30409                                           ! 4476                             640,
30410 7DF3                      0280            .word	$280
30411                                           ! 4477                        640,
30412 7DF5                      0280            .word	$280
30413                                           ! 4478                        400,
30414 7DF7                      0190            .word	$190
30415                                           ! 4479                      8,
30416 7DF9                        08            .byte	8
30417                                           ! 4480                      16,
30418 7DFA                        10            .byte	$10
30419                                           ! 4481                           1,
30420 7DFB                        01            .byte	1
30421                                           ! 4482                         8,
30422 7DFC                        08            .byte	8
30423                                           ! 4483                          4,
30424 7DFD                        04            .byte	4
30425                                           ! 4484                        0x04,
30426 7DFE                        04            .byte	4
30427                                           ! 4485                     0,
30428 7DFF                        00            .byte	0
30429                                           ! 4486                               64,
30430 7E00                        40            .byte	$40
30431                                           ! 4487                          0,
30432 7E01                        00            .byte	0
30433                                           ! 4488                        0,
30434 7E02                        00            .byte	0
30435                                           ! 4489                             0,
30436 7E03                        00            .byte	0
30437                                           ! 4490                          0,
30438 7E04                        00            .byte	0
30439                                           ! 4491                               0,
30440 7E05                        00            .byte	0
30441                                           ! 4492                         0,
30442 7E06                        00            .byte	0
30443                                           ! 4493                      
30444                                           ! 4493         0,
30445 7E07                        00            .byte	0
30446                                           ! 4494                         0,
30447 7E08                        00            .byte	0
30448                                           ! 4495                              0,
30449 7E09                        00            .byte	0
30450                                           ! 4496                                0,
30451 7E0A                        00            .byte	0
30452                                           ! 4497                        0xE0000000,
30453 7E0B                      0000            .word	0
30454 7E0D                      E000            .word	$E000
30455                                           ! 4498                               0,
30456 7E0F                      0000            .word	0
30457 7E11                      0000            .word	0
30458                                           ! 4499                             0,
30459 7E13                      0000            .word	0
30460                                           ! 4500                                640,
30461 7E15                      0280            .word	$280
30462                                           ! 4501                             0,
30463 7E17                        00            .byte	0
30464                                           ! 4502                             0,
30465 7E18                        00            .byte	0
30466                                           ! 4503                           0,
30467 7E19                        00            .byte	0
30468                                           ! 4504                                0,
30469 7E1A                        00            .byte	0
30470                                           ! 4505                             0,
30471 7E1B                        00            .byte	0
30472                                           ! 4506                                  0,
30473 7E1C                        00            .byte	0
30474                                           ! 4507                            0,
30475 7E1D                        00            .byte	0
30476                                           ! 4508                                 0,
30477 7E1E                        00            .byte	0
30478                                           ! 4509                            0,
30479 7E1F                        00            .byte	0
30480                                           ! 4510                                 0,
30481 7E20                        00            .byte	0
30482                                           ! 4511                          0,
30483 7E21                      0000            .word	0
30484 7E23                      0000            .word	0
30485                                           ! 4512 } },
30486                                           ! 4513 { 0x0101,
30487 7E25                      0101            .word	$101
30488                                           ! 4514 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30489 7E27                      009B            .word	$9B
30490                                           ! 4515                           0x01 | 0x02 | 0x04,
30491 7E29                        07            .byte	7
30492                                           ! 4516                           0,
30493 7E2A                        00            .byte	0
30494                                           ! 4517                           64,
30495 7E2B                      0040            .word	$40
30496                                           ! 4518                    64,
30497 7E2D                      0040            .word	$40
30498                                           ! 4519                        0xA000,
30499 7E2F                      A000            .word	$A000
30500                                           ! 4520                        0x0000,
30501 7E31                      0000            .word	0
30502                                           ! 4521                       0,
30503 7E33                      0000            .word	0
30504 7E35                      0000            .word	0
30505                                           ! 4522                             640,
30506 7E37                      0280            .word	$280
30507                                           ! 4523                        640,
30508 7E39                      0280            .word	$280
30509                                           ! 4524                        480,
30510 7E3B                      01E0            .word	$1E0
30511                                           ! 4525                      8,
30512 7E3D                        08            .byte	8
30513                                           ! 4526                      16,
30514 7E3E                        10            .byte	$10
30515                                           ! 4527                           1,
30516 7E3F                        01            .byte	1
30517                                           ! 4528                         8,
30518 7E40                        08            .byte	8
30519                                           ! 4529                          5,
30520 7E41                        05            .byte	5
30521                                           ! 4530                        0x04,
30522 7E42                        04            .byte	4
30523                                           ! 4531                     0,
30524 7E43                        00            .byte	0
30525                                           ! 4532                               53,
30526 7E44                        35            .byte	$35
30527                                           ! 4533                          0,
30528 7E45                        00            .byte	0
30529                                           ! 4534                        0,
30530 7E46                        00            .byte	0
30531                                           ! 4535                             0,
30532 7E47                        00            .byte	0
30533                                           ! 4536                          0,
30534 7E48                        00            .byte	0
30535                                           ! 4537                               0,
30536 7E49                        00            .byte	0
30537                                           ! 4538                         0,
30538 7E4A                        00            .byte	0
30539                                           ! 4539                              0,
30540 7E4B                        00            .byte	0
30541                                           ! 4540                         0,
30542 7E4C                        00            .byte	0
30543                                           ! 4541                              0,
30544 7E4D                        00            .byte	0
30545                                           ! 4542                                0,
30546 7E4E                        00            .byte	0
30547                                           ! 4543                        0xE0000000,
30548 7E4F                      0000            .word	0
30549 7E51                      E000            .word	$E000
30550                                           ! 4544                               0,
30551 7E53                      0000            .word	0
30552 7E55                      0000            .word	0
30553                                           ! 4545                             0,
30554 7E57                      0000            .word	0
30555                                           ! 4546                                640,
30556 7E59                      0280            .word	$280
30557                                           ! 4547                             0,
30558 7E5B                        00            .byte	0
30559                                           ! 4548                             0,
30560 7E5C                        00            .byte	0
30561                                           ! 4549                           0,
30562 7E5D                        00            .byte	0
30563                                           ! 4550                                0,
30564 7E5E                        00            .byte	0
30565                                           ! 4551                             0,
30566 7E5F                        00            .byte	0
30567                                           ! 4552                                  0,
30568 7E60                        00            .byte	0
30569                                           ! 4553                            0,
30570 7E61                        00            .byte	0
30571                                           ! 4554                                 0,
30572 7E62                        00            .byte	0
30573                                           ! 4555                            0,
30574 7E63                        00            .byte	0
30575                                           ! 4556                                 0,
30576 7E64                        00            .byte	0
30577                                           ! 4557                          0,
30578 7E65                      0000            .word	0
30579 7E67                      0000            .word	0
30580                                           ! 4558 } },
30581                                           ! 4559 { 0x0102,
30582 7E69                      0102            .word	$102
30583                                           ! 4560 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30584 7E6B                      001F            .word	$1F
30585                                           ! 4561                           0x01 
30586                                           ! 4561 | 0x02 | 0x04,
30587 7E6D                        07            .byte	7
30588                                           ! 4562                           0,
30589 7E6E                        00            .byte	0
30590                                           ! 4563                           64,
30591 7E6F                      0040            .word	$40
30592                                           ! 4564                    64,
30593 7E71                      0040            .word	$40
30594                                           ! 4565                        0xA000,
30595 7E73                      A000            .word	$A000
30596                                           ! 4566                        0x0000,
30597 7E75                      0000            .word	0
30598                                           ! 4567                       0,
30599 7E77                      0000            .word	0
30600 7E79                      0000            .word	0
30601                                           ! 4568                             100,
30602 7E7B                      0064            .word	$64
30603                                           ! 4569                        800,
30604 7E7D                      0320            .word	$320
30605                                           ! 4570                        600,
30606 7E7F                      0258            .word	$258
30607                                           ! 4571                      8,
30608 7E81                        08            .byte	8
30609                                           ! 4572                      16,
30610 7E82                        10            .byte	$10
30611                                           ! 4573                           4,
30612 7E83                        04            .byte	4
30613                                           ! 4574                         4,
30614 7E84                        04            .byte	4
30615                                           ! 4575                          1,
30616 7E85                        01            .byte	1
30617                                           ! 4576                        0x03,
30618 7E86                        03            .byte	3
30619                                           ! 4577                     0,
30620 7E87                        00            .byte	0
30621                                           ! 4578                               68,
30622 7E88                        44            .byte	$44
30623                                           ! 4579                          0,
30624 7E89                        00            .byte	0
30625                                           ! 4580                        0,
30626 7E8A                        00            .byte	0
30627                                           ! 4581                             0,
30628 7E8B                        00            .byte	0
30629                                           ! 4582                          0,
30630 7E8C                        00            .byte	0
30631                                           ! 4583                               0,
30632 7E8D                        00            .byte	0
30633                                           ! 4584                         0,
30634 7E8E                        00            .byte	0
30635                                           ! 4585                              0,
30636 7E8F                        00            .byte	0
30637                                           ! 4586                         0,
30638 7E90                        00            .byte	0
30639                                           ! 4587                              0,
30640 7E91                        00            .byte	0
30641                                           ! 4588                                0,
30642 7E92                        00            .byte	0
30643                                           ! 4589                        0,
30644 7E93                      0000            .word	0
30645 7E95                      0000            .word	0
30646                                           ! 4590                               0,
30647 7E97                      0000            .word	0
30648 7E99                      0000            .word	0
30649                                           ! 4591                             0,
30650 7E9B                      0000            .word	0
30651                                           ! 4592                                100,
30652 7E9D                      0064            .word	$64
30653                                           ! 4593                             0,
30654 7E9F                        00            .byte	0
30655                                           ! 4594                             0,
30656 7EA0                        00            .byte	0
30657                                           ! 4595                           0,
30658 7EA1                        00            .byte	0
30659                                           ! 4596                                0,
30660 7EA2                        00            .byte	0
30661                                           ! 4597                             0,
30662 7EA3                        00            .byte	0
30663                                           ! 4598                                  0,
30664 7EA4                        00            .byte	0
30665                                           ! 4599                            0,
30666 7EA5                        00            .byte	0
30667                                           ! 4600                                 0,
30668 7EA6                        00            .byte	0
30669                                           ! 4601                            0,
30670 7EA7                        00            .byte	0
30671                                           ! 4602                                 0,
30672 7EA8                        00            .byte	0
30673                                           ! 4603                          0,
30674 7EA9                      0000            .word	0
30675 7EAB                      0000            .word	0
30676                                           ! 4604 } },
30677                                           ! 4605 { 0x0103,
30678 7EAD                      0103            .word	$103
30679                                           ! 4606 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30680 7EAF                      009B            .word	$9B
30681                                           ! 4607                           0x01 | 0x02 | 0x04,
30682 7EB1                        07            .byte	7
30683                                           ! 4608                           0,
30684 7EB2                        00            .byte	0
30685                                           ! 4609                           64,
30686 7EB3                      0040            .word	$40
30687                                           ! 4610                    64,
30688 7EB5                      0040            .word	$40
30689                                           ! 4611                        0xA000,
30690 7EB7                      A000            .word	$A000
30691                                           ! 4612                        0x0000,
30692 7EB9                      0000            .word	0
30693                                           ! 4613                       0,
30694 7EBB                      0000            .word	0
30695 7EBD                      0000            .word	0
30696                                           ! 4614                             800,
30697 7EBF                      0320            .word	$320
30698                                           ! 4615                        800,
30699 7EC1                      0320            .word	$320
30700                                           ! 4616                        600,
30701 7EC3                      0258            .word	$258
30702                                           ! 4617                      8,
30703 7EC5                        08            .byte	8
30704                                           ! 4618                      16,
30705 7EC6                        10            .byte	$10
30706                                           ! 4619                           1,
30707 7EC7                        01            .byte	1
30708                                           ! 4620                         8,
30709 7EC8                        08            .byte	8
30710                                           ! 4621                          8,
30711 7EC9                        08            .byte	8
30712                                           ! 4622                        0x04,
30713 7ECA                        04            .byte	4
30714                                           ! 4623                     0,
30715 7ECB                        00            .byte	0
30716                                           ! 4624                               33,
30717 7ECC                        21            .byte	$21
30718                                           ! 4625                          0,
30719 7ECD                        00            .byte	0
30720                                           ! 4626                        0,
30721 7ECE                        00            .byte	0
30722                                           ! 4627                             0,
30723 7ECF                        00            .byte	0
30724                                           ! 4628                          0,
30725 7ED0                        00            .byte	0
30726                                           ! 4629                               0,
30727 7ED1                        00            .byte	0
30728                                           ! 4630                         0,
30729 7ED2                        00            .byte	0
30730                                           ! 4631                          
30731                                           ! 4631     0,
30732 7ED3                        00            .byte	0
30733                                           ! 4632                         0,
30734 7ED4                        00            .byte	0
30735                                           ! 4633                              0,
30736 7ED5                        00            .byte	0
30737                                           ! 4634                                0,
30738 7ED6                        00            .byte	0
30739                                           ! 4635                        0xE0000000,
30740 7ED7                      0000            .word	0
30741 7ED9                      E000            .word	$E000
30742                                           ! 4636                               0,
30743 7EDB                      0000            .word	0
30744 7EDD                      0000            .word	0
30745                                           ! 4637                             0,
30746 7EDF                      0000            .word	0
30747                                           ! 4638                                800,
30748 7EE1                      0320            .word	$320
30749                                           ! 4639                             0,
30750 7EE3                        00            .byte	0
30751                                           ! 4640                             0,
30752 7EE4                        00            .byte	0
30753                                           ! 4641                           0,
30754 7EE5                        00            .byte	0
30755                                           ! 4642                                0,
30756 7EE6                        00            .byte	0
30757                                           ! 4643                             0,
30758 7EE7                        00            .byte	0
30759                                           ! 4644                                  0,
30760 7EE8                        00            .byte	0
30761                                           ! 4645                            0,
30762 7EE9                        00            .byte	0
30763                                           ! 4646                                 0,
30764 7EEA                        00            .byte	0
30765                                           ! 4647                            0,
30766 7EEB                        00            .byte	0
30767                                           ! 4648                                 0,
30768 7EEC                        00            .byte	0
30769                                           ! 4649                          0,
30770 7EED                      0000            .word	0
30771 7EEF                      0000            .word	0
30772                                           ! 4650 } },
30773                                           ! 4651 { 0x0104,
30774 7EF1                      0104            .word	$104
30775                                           ! 4652 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30776 7EF3                      001F            .word	$1F
30777                                           ! 4653                           0x01 | 0x02 | 0x04,
30778 7EF5                        07            .byte	7
30779                                           ! 4654                           0,
30780 7EF6                        00            .byte	0
30781                                           ! 4655                           64,
30782 7EF7                      0040            .word	$40
30783                                           ! 4656                    64,
30784 7EF9                      0040            .word	$40
30785                                           ! 4657                        0xA000,
30786 7EFB                      A000            .word	$A000
30787                                           ! 4658                        0x0000,
30788 7EFD                      0000            .word	0
30789                                           ! 4659                       0,
30790 7EFF                      0000            .word	0
30791 7F01                      0000            .word	0
30792                                           ! 4660                             128,
30793 7F03                      0080            .word	$80
30794                                           ! 4661                        1024,
30795 7F05                      0400            .word	$400
30796                                           ! 4662                        768,
30797 7F07                      0300            .word	$300
30798                                           ! 4663                      8,
30799 7F09                        08            .byte	8
30800                                           ! 4664                      16,
30801 7F0A                        10            .byte	$10
30802                                           ! 4665                           4,
30803 7F0B                        04            .byte	4
30804                                           ! 4666                         4,
30805 7F0C                        04            .byte	4
30806                                           ! 4667                          2,
30807 7F0D                        02            .byte	2
30808                                           ! 4668                        0x03,
30809 7F0E                        03            .byte	3
30810                                           ! 4669                     0,
30811 7F0F                        00            .byte	0
30812                                           ! 4670                               41,
30813 7F10                        29            .byte	$29
30814                                           ! 4671                          0,
30815 7F11                        00            .byte	0
30816                                           ! 4672                        0,
30817 7F12                        00            .byte	0
30818                                           ! 4673                             0,
30819 7F13                        00            .byte	0
30820                                           ! 4674                          0,
30821 7F14                        00            .byte	0
30822                                           ! 4675                               0,
30823 7F15                        00            .byte	0
30824                                           ! 4676                         0,
30825 7F16                        00            .byte	0
30826                                           ! 4677                              0,
30827 7F17                        00            .byte	0
30828                                           ! 4678                         0,
30829 7F18                        00            .byte	0
30830                                           ! 4679                              0,
30831 7F19                        00            .byte	0
30832                                           ! 4680                                0,
30833 7F1A                        00            .byte	0
30834                                           ! 4681                        0,
30835 7F1B                      0000            .word	0
30836 7F1D                      0000            .word	0
30837                                           ! 4682                               0,
30838 7F1F                      0000            .word	0
30839 7F21                      0000            .word	0
30840                                           ! 4683                             0,
30841 7F23                      0000            .word	0
30842                                           ! 4684                                128,
30843 7F25                      0080            .word	$80
30844                                           ! 4685                             0,
30845 7F27                        00            .byte	0
30846                                           ! 4686                             0,
30847 7F28                        00            .byte	0
30848                                           ! 4687                           0,
30849 7F29                        00            .byte	0
30850                                           ! 4688                                0,
30851 7F2A                        00            .byte	0
30852                                           ! 4689                             0,
30853 7F2B                        00            .byte	0
30854                                           ! 4690                                  0,
30855 7F2C                        00            .byte	0
30856                                           ! 4691                            0,
30857 7F2D                        00            .byte	0
30858                                           ! 4692                                 0,
30859 7F2E                        00            .byte	0
30860                                           ! 4693                            0,
30861 7F2F                        00            .byte	0
30862                                           ! 4694                                 0,
30863 7F30                        00            .byte	0
30864                                           ! 4695                          0,
30865 7F31                      0000            .word	0
30866 7F33                      0000            .word	0
30867                                           ! 4696 } },
30868                                           ! 4697 { 0x0105,
30869 7F35                      0105            .word	$105
30870                                           ! 4698 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30871 7F37                      009B            .word	$9B
30872                                           ! 4699                           0x01 | 0x02 | 0x0
30873                                           ! 4699 4,
30874 7F39                        07            .byte	7
30875                                           ! 4700                           0,
30876 7F3A                        00            .byte	0
30877                                           ! 4701                           64,
30878 7F3B                      0040            .word	$40
30879                                           ! 4702                    64,
30880 7F3D                      0040            .word	$40
30881                                           ! 4703                        0xA000,
30882 7F3F                      A000            .word	$A000
30883                                           ! 4704                        0x0000,
30884 7F41                      0000            .word	0
30885                                           ! 4705                       0,
30886 7F43                      0000            .word	0
30887 7F45                      0000            .word	0
30888                                           ! 4706                             1024,
30889 7F47                      0400            .word	$400
30890                                           ! 4707                        1024,
30891 7F49                      0400            .word	$400
30892                                           ! 4708                        768,
30893 7F4B                      0300            .word	$300
30894                                           ! 4709                      8,
30895 7F4D                        08            .byte	8
30896                                           ! 4710                      16,
30897 7F4E                        10            .byte	$10
30898                                           ! 4711                           1,
30899 7F4F                        01            .byte	1
30900                                           ! 4712                         8,
30901 7F50                        08            .byte	8
30902                                           ! 4713                          12,
30903 7F51                        0C            .byte	$C
30904                                           ! 4714                        0x04,
30905 7F52                        04            .byte	4
30906                                           ! 4715                     0,
30907 7F53                        00            .byte	0
30908                                           ! 4716                               20,
30909 7F54                        14            .byte	$14
30910                                           ! 4717                          0,
30911 7F55                        00            .byte	0
30912                                           ! 4718                        0,
30913 7F56                        00            .byte	0
30914                                           ! 4719                             0,
30915 7F57                        00            .byte	0
30916                                           ! 4720                          0,
30917 7F58                        00            .byte	0
30918                                           ! 4721                               0,
30919 7F59                        00            .byte	0
30920                                           ! 4722                         0,
30921 7F5A                        00            .byte	0
30922                                           ! 4723                              0,
30923 7F5B                        00            .byte	0
30924                                           ! 4724                         0,
30925 7F5C                        00            .byte	0
30926                                           ! 4725                              0,
30927 7F5D                        00            .byte	0
30928                                           ! 4726                                0,
30929 7F5E                        00            .byte	0
30930                                           ! 4727                        0xE0000000,
30931 7F5F                      0000            .word	0
30932 7F61                      E000            .word	$E000
30933                                           ! 4728                               0,
30934 7F63                      0000            .word	0
30935 7F65                      0000            .word	0
30936                                           ! 4729                             0,
30937 7F67                      0000            .word	0
30938                                           ! 4730                                1024,
30939 7F69                      0400            .word	$400
30940                                           ! 4731                             0,
30941 7F6B                        00            .byte	0
30942                                           ! 4732                             0,
30943 7F6C                        00            .byte	0
30944                                           ! 4733                           0,
30945 7F6D                        00            .byte	0
30946                                           ! 4734                                0,
30947 7F6E                        00            .byte	0
30948                                           ! 4735                             0,
30949 7F6F                        00            .byte	0
30950                                           ! 4736                                  0,
30951 7F70                        00            .byte	0
30952                                           ! 4737                            0,
30953 7F71                        00            .byte	0
30954                                           ! 4738                                 0,
30955 7F72                        00            .byte	0
30956                                           ! 4739                            0,
30957 7F73                        00            .byte	0
30958                                           ! 4740                                 0,
30959 7F74                        00            .byte	0
30960                                           ! 4741                          0,
30961 7F75                      0000            .word	0
30962 7F77                      0000            .word	0
30963                                           ! 4742 } },
30964                                           ! 4743 { 0x0106,
30965 7F79                      0106            .word	$106
30966                                           ! 4744 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30967 7F7B                      001F            .word	$1F
30968                                           ! 4745                           0x01 | 0x02 | 0x04,
30969 7F7D                        07            .byte	7
30970                                           ! 4746                           0,
30971 7F7E                        00            .byte	0
30972                                           ! 4747                           64,
30973 7F7F                      0040            .word	$40
30974                                           ! 4748                    64,
30975 7F81                      0040            .word	$40
30976                                           ! 4749                        0xA000,
30977 7F83                      A000            .word	$A000
30978                                           ! 4750                        0x0000,
30979 7F85                      0000            .word	0
30980                                           ! 4751                       0,
30981 7F87                      0000            .word	0
30982 7F89                      0000            .word	0
30983                                           ! 4752                             160,
30984 7F8B                      00A0            .word	$A0
30985                                           ! 4753                        1280,
30986 7F8D                      0500            .word	$500
30987                                           ! 4754                        1024,
30988 7F8F                      0400            .word	$400
30989                                           ! 4755                      8,
30990 7F91                        08            .byte	8
30991                                           ! 4756                      16,
30992 7F92                        10            .byte	$10
30993                                           ! 4757                           4,
30994 7F93                        04            .byte	4
30995                                           ! 4758                         4,
30996 7F94                        04            .byte	4
30997                                           ! 4759                          3,
30998 7F95                        03            .byte	3
30999                                           ! 4760                        0x03,
31000 7F96                        03            .byte	3
31001                                           ! 4761                     0,
31002 7F97                        00            .byte	0
31003                                           ! 4762                               24,
31004 7F98                        18            .byte	$18
31005                                           ! 4763                          0,
31006 7F99                        00            .byte	0
31007                                           ! 4764                        0,
31008 7F9A                        00            .byte	0
31009                                           ! 4765                             0,
31010 7F9B                        00            .byte	0
31011                                           ! 4766                          0,
31012 7F9C                        00            .byte	0
31013                                           ! 4767                               0,
31014 7F9D                        00            .byte	0
31015                                           ! 4768                         0,
31016 7F9E                        00            .byte	0
31017                                           ! 4769                       
31018                                           ! 4769        0,
31019 7F9F                        00            .byte	0
31020                                           ! 4770                         0,
31021 7FA0                        00            .byte	0
31022                                           ! 4771                              0,
31023 7FA1                        00            .byte	0
31024                                           ! 4772                                0,
31025 7FA2                        00            .byte	0
31026                                           ! 4773                        0,
31027 7FA3                      0000            .word	0
31028 7FA5                      0000            .word	0
31029                                           ! 4774                               0,
31030 7FA7                      0000            .word	0
31031 7FA9                      0000            .word	0
31032                                           ! 4775                             0,
31033 7FAB                      0000            .word	0
31034                                           ! 4776                                160,
31035 7FAD                      00A0            .word	$A0
31036                                           ! 4777                             0,
31037 7FAF                        00            .byte	0
31038                                           ! 4778                             0,
31039 7FB0                        00            .byte	0
31040                                           ! 4779                           0,
31041 7FB1                        00            .byte	0
31042                                           ! 4780                                0,
31043 7FB2                        00            .byte	0
31044                                           ! 4781                             0,
31045 7FB3                        00            .byte	0
31046                                           ! 4782                                  0,
31047 7FB4                        00            .byte	0
31048                                           ! 4783                            0,
31049 7FB5                        00            .byte	0
31050                                           ! 4784                                 0,
31051 7FB6                        00            .byte	0
31052                                           ! 4785                            0,
31053 7FB7                        00            .byte	0
31054                                           ! 4786                                 0,
31055 7FB8                        00            .byte	0
31056                                           ! 4787                          0,
31057 7FB9                      0000            .word	0
31058 7FBB                      0000            .word	0
31059                                           ! 4788 } },
31060                                           ! 4789 { 0x0107,
31061 7FBD                      0107            .word	$107
31062                                           ! 4790 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31063 7FBF                      009B            .word	$9B
31064                                           ! 4791                           0x01 | 0x02 | 0x04,
31065 7FC1                        07            .byte	7
31066                                           ! 4792                           0,
31067 7FC2                        00            .byte	0
31068                                           ! 4793                           64,
31069 7FC3                      0040            .word	$40
31070                                           ! 4794                    64,
31071 7FC5                      0040            .word	$40
31072                                           ! 4795                        0xA000,
31073 7FC7                      A000            .word	$A000
31074                                           ! 4796                        0x0000,
31075 7FC9                      0000            .word	0
31076                                           ! 4797                       0,
31077 7FCB                      0000            .word	0
31078 7FCD                      0000            .word	0
31079                                           ! 4798                             1280,
31080 7FCF                      0500            .word	$500
31081                                           ! 4799                        1280,
31082 7FD1                      0500            .word	$500
31083                                           ! 4800                        1024,
31084 7FD3                      0400            .word	$400
31085                                           ! 4801                      8,
31086 7FD5                        08            .byte	8
31087                                           ! 4802                      16,
31088 7FD6                        10            .byte	$10
31089                                           ! 4803                           1,
31090 7FD7                        01            .byte	1
31091                                           ! 4804                         8,
31092 7FD8                        08            .byte	8
31093                                           ! 4805                          20,
31094 7FD9                        14            .byte	$14
31095                                           ! 4806                        0x04,
31096 7FDA                        04            .byte	4
31097                                           ! 4807                     0,
31098 7FDB                        00            .byte	0
31099                                           ! 4808                               11,
31100 7FDC                        0B            .byte	$B
31101                                           ! 4809                          0,
31102 7FDD                        00            .byte	0
31103                                           ! 4810                        0,
31104 7FDE                        00            .byte	0
31105                                           ! 4811                             0,
31106 7FDF                        00            .byte	0
31107                                           ! 4812                          0,
31108 7FE0                        00            .byte	0
31109                                           ! 4813                               0,
31110 7FE1                        00            .byte	0
31111                                           ! 4814                         0,
31112 7FE2                        00            .byte	0
31113                                           ! 4815                              0,
31114 7FE3                        00            .byte	0
31115                                           ! 4816                         0,
31116 7FE4                        00            .byte	0
31117                                           ! 4817                              0,
31118 7FE5                        00            .byte	0
31119                                           ! 4818                                0,
31120 7FE6                        00            .byte	0
31121                                           ! 4819                        0xE0000000,
31122 7FE7                      0000            .word	0
31123 7FE9                      E000            .word	$E000
31124                                           ! 4820                               0,
31125 7FEB                      0000            .word	0
31126 7FED                      0000            .word	0
31127                                           ! 4821                             0,
31128 7FEF                      0000            .word	0
31129                                           ! 4822                                1280,
31130 7FF1                      0500            .word	$500
31131                                           ! 4823                             0,
31132 7FF3                        00            .byte	0
31133                                           ! 4824                             0,
31134 7FF4                        00            .byte	0
31135                                           ! 4825                           0,
31136 7FF5                        00            .byte	0
31137                                           ! 4826                                0,
31138 7FF6                        00            .byte	0
31139                                           ! 4827                             0,
31140 7FF7                        00            .byte	0
31141                                           ! 4828                                  0,
31142 7FF8                        00            .byte	0
31143                                           ! 4829                            0,
31144 7FF9                        00            .byte	0
31145                                           ! 4830                                 0,
31146 7FFA                        00            .byte	0
31147                                           ! 4831                            0,
31148 7FFB                        00            .byte	0
31149                                           ! 4832                                 0,
31150 7FFC                        00            .byte	0
31151                                           ! 4833                          0,
31152 7FFD                      0000            .word	0
31153 7FFF                      0000            .word	0
31154                                           ! 4834 } },
31155                                           ! 4835 { 0x010d,
31156 8001                      010D            .word	$10D
31157                                           ! 4836 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31158 8003                      009B            .word	$9B
31159                                           ! 4837                           0x01 | 0x0
31160                                           ! 4837 2 | 0x04,
31161 8005                        07            .byte	7
31162                                           ! 4838                           0,
31163 8006                        00            .byte	0
31164                                           ! 4839                           64,
31165 8007                      0040            .word	$40
31166                                           ! 4840                    64,
31167 8009                      0040            .word	$40
31168                                           ! 4841                        0xA000,
31169 800B                      A000            .word	$A000
31170                                           ! 4842                        0x0000,
31171 800D                      0000            .word	0
31172                                           ! 4843                       0,
31173 800F                      0000            .word	0
31174 8011                      0000            .word	0
31175                                           ! 4844                             640,
31176 8013                      0280            .word	$280
31177                                           ! 4845                        320,
31178 8015                      0140            .word	$140
31179                                           ! 4846                        200,
31180 8017                      00C8            .word	$C8
31181                                           ! 4847                      8,
31182 8019                        08            .byte	8
31183                                           ! 4848                      16,
31184 801A                        10            .byte	$10
31185                                           ! 4849                           1,
31186 801B                        01            .byte	1
31187                                           ! 4850                         15,
31188 801C                        0F            .byte	$F
31189                                           ! 4851                          2,
31190 801D                        02            .byte	2
31191                                           ! 4852                        0x06,
31192 801E                        06            .byte	6
31193                                           ! 4853                     0,
31194 801F                        00            .byte	0
31195                                           ! 4854                               130,
31196 8020                        82            .byte	$82
31197                                           ! 4855                          0,
31198 8021                        00            .byte	0
31199                                           ! 4856                        5,
31200 8022                        05            .byte	5
31201                                           ! 4857                             10,
31202 8023                        0A            .byte	$A
31203                                           ! 4858                          5,
31204 8024                        05            .byte	5
31205                                           ! 4859                               5,
31206 8025                        05            .byte	5
31207                                           ! 4860                         5,
31208 8026                        05            .byte	5
31209                                           ! 4861                              0,
31210 8027                        00            .byte	0
31211                                           ! 4862                         1,
31212 8028                        01            .byte	1
31213                                           ! 4863                              15,
31214 8029                        0F            .byte	$F
31215                                           ! 4864                                0,
31216 802A                        00            .byte	0
31217                                           ! 4865                        0xE0000000,
31218 802B                      0000            .word	0
31219 802D                      E000            .word	$E000
31220                                           ! 4866                               0,
31221 802F                      0000            .word	0
31222 8031                      0000            .word	0
31223                                           ! 4867                             0,
31224 8033                      0000            .word	0
31225                                           ! 4868                                640,
31226 8035                      0280            .word	$280
31227                                           ! 4869                             0,
31228 8037                        00            .byte	0
31229                                           ! 4870                             0,
31230 8038                        00            .byte	0
31231                                           ! 4871                           5,
31232 8039                        05            .byte	5
31233                                           ! 4872                                10,
31234 803A                        0A            .byte	$A
31235                                           ! 4873                             5,
31236 803B                        05            .byte	5
31237                                           ! 4874                                  5,
31238 803C                        05            .byte	5
31239                                           ! 4875                            5,
31240 803D                        05            .byte	5
31241                                           ! 4876                                 0,
31242 803E                        00            .byte	0
31243                                           ! 4877                            1,
31244 803F                        01            .byte	1
31245                                           ! 4878                                 15,
31246 8040                        0F            .byte	$F
31247                                           ! 4879                          0,
31248 8041                      0000            .word	0
31249 8043                      0000            .word	0
31250                                           ! 4880 } },
31251                                           ! 4881 { 0x010e,
31252 8045                      010E            .word	$10E
31253                                           ! 4882 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31254 8047                      009B            .word	$9B
31255                                           ! 4883                           0x01 | 0x02 | 0x04,
31256 8049                        07            .byte	7
31257                                           ! 4884                           0,
31258 804A                        00            .byte	0
31259                                           ! 4885                           64,
31260 804B                      0040            .word	$40
31261                                           ! 4886                    64,
31262 804D                      0040            .word	$40
31263                                           ! 4887                        0xA000,
31264 804F                      A000            .word	$A000
31265                                           ! 4888                        0x0000,
31266 8051                      0000            .word	0
31267                                           ! 4889                       0,
31268 8053                      0000            .word	0
31269 8055                      0000            .word	0
31270                                           ! 4890                             640,
31271 8057                      0280            .word	$280
31272                                           ! 4891                        320,
31273 8059                      0140            .word	$140
31274                                           ! 4892                        200,
31275 805B                      00C8            .word	$C8
31276                                           ! 4893                      8,
31277 805D                        08            .byte	8
31278                                           ! 4894                      16,
31279 805E                        10            .byte	$10
31280                                           ! 4895                           1,
31281 805F                        01            .byte	1
31282                                           ! 4896                         16,
31283 8060                        10            .byte	$10
31284                                           ! 4897                          2,
31285 8061                        02            .byte	2
31286                                           ! 4898                        0x06,
31287 8062                        06            .byte	6
31288                                           ! 4899                     0,
31289 8063                        00            .byte	0
31290                                           ! 4900                               130,
31291 8064                        82            .byte	$82
31292                                           ! 4901                          0,
31293 8065                        00            .byte	0
31294                                           ! 4902                        5,
31295 8066                        05            .byte	5
31296                                           ! 4903                             11,
31297 8067                        0B            .byte	$B
31298                                           ! 4904                          6,
31299 8068                        06            .byte	6
31300                                           ! 4905                               5,
31301 8069                        05            .byte	5
31302                                           ! 4906                         5,
31303 806A                        05            .byte	5
31304                                           ! 4907             
31305                                           ! 4907                  0,
31306 806B                        00            .byte	0
31307                                           ! 4908                         0,
31308 806C                        00            .byte	0
31309                                           ! 4909                              0,
31310 806D                        00            .byte	0
31311                                           ! 4910                                0,
31312 806E                        00            .byte	0
31313                                           ! 4911                        0xE0000000,
31314 806F                      0000            .word	0
31315 8071                      E000            .word	$E000
31316                                           ! 4912                               0,
31317 8073                      0000            .word	0
31318 8075                      0000            .word	0
31319                                           ! 4913                             0,
31320 8077                      0000            .word	0
31321                                           ! 4914                                640,
31322 8079                      0280            .word	$280
31323                                           ! 4915                             0,
31324 807B                        00            .byte	0
31325                                           ! 4916                             0,
31326 807C                        00            .byte	0
31327                                           ! 4917                           5,
31328 807D                        05            .byte	5
31329                                           ! 4918                                11,
31330 807E                        0B            .byte	$B
31331                                           ! 4919                             6,
31332 807F                        06            .byte	6
31333                                           ! 4920                                  5,
31334 8080                        05            .byte	5
31335                                           ! 4921                            5,
31336 8081                        05            .byte	5
31337                                           ! 4922                                 0,
31338 8082                        00            .byte	0
31339                                           ! 4923                            0,
31340 8083                        00            .byte	0
31341                                           ! 4924                                 0,
31342 8084                        00            .byte	0
31343                                           ! 4925                          0,
31344 8085                      0000            .word	0
31345 8087                      0000            .word	0
31346                                           ! 4926 } },
31347                                           ! 4927 { 0x010f,
31348 8089                      010F            .word	$10F
31349                                           ! 4928 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31350 808B                      009B            .word	$9B
31351                                           ! 4929                           0x01 | 0x02 | 0x04,
31352 808D                        07            .byte	7
31353                                           ! 4930                           0,
31354 808E                        00            .byte	0
31355                                           ! 4931                           64,
31356 808F                      0040            .word	$40
31357                                           ! 4932                    64,
31358 8091                      0040            .word	$40
31359                                           ! 4933                        0xA000,
31360 8093                      A000            .word	$A000
31361                                           ! 4934                        0x0000,
31362 8095                      0000            .word	0
31363                                           ! 4935                       0,
31364 8097                      0000            .word	0
31365 8099                      0000            .word	0
31366                                           ! 4936                             960,
31367 809B                      03C0            .word	$3C0
31368                                           ! 4937                        320,
31369 809D                      0140            .word	$140
31370                                           ! 4938                        200,
31371 809F                      00C8            .word	$C8
31372                                           ! 4939                      8,
31373 80A1                        08            .byte	8
31374                                           ! 4940                      16,
31375 80A2                        10            .byte	$10
31376                                           ! 4941                           1,
31377 80A3                        01            .byte	1
31378                                           ! 4942                         24,
31379 80A4                        18            .byte	$18
31380                                           ! 4943                          3,
31381 80A5                        03            .byte	3
31382                                           ! 4944                        0x06,
31383 80A6                        06            .byte	6
31384                                           ! 4945                     0,
31385 80A7                        00            .byte	0
31386                                           ! 4946                               86,
31387 80A8                        56            .byte	$56
31388                                           ! 4947                          0,
31389 80A9                        00            .byte	0
31390                                           ! 4948                        8,
31391 80AA                        08            .byte	8
31392                                           ! 4949                             16,
31393 80AB                        10            .byte	$10
31394                                           ! 4950                          8,
31395 80AC                        08            .byte	8
31396                                           ! 4951                               8,
31397 80AD                        08            .byte	8
31398                                           ! 4952                         8,
31399 80AE                        08            .byte	8
31400                                           ! 4953                              0,
31401 80AF                        00            .byte	0
31402                                           ! 4954                         0,
31403 80B0                        00            .byte	0
31404                                           ! 4955                              0,
31405 80B1                        00            .byte	0
31406                                           ! 4956                                0,
31407 80B2                        00            .byte	0
31408                                           ! 4957                        0xE0000000,
31409 80B3                      0000            .word	0
31410 80B5                      E000            .word	$E000
31411                                           ! 4958                               0,
31412 80B7                      0000            .word	0
31413 80B9                      0000            .word	0
31414                                           ! 4959                             0,
31415 80BB                      0000            .word	0
31416                                           ! 4960                                960,
31417 80BD                      03C0            .word	$3C0
31418                                           ! 4961                             0,
31419 80BF                        00            .byte	0
31420                                           ! 4962                             0,
31421 80C0                        00            .byte	0
31422                                           ! 4963                           8,
31423 80C1                        08            .byte	8
31424                                           ! 4964                                16,
31425 80C2                        10            .byte	$10
31426                                           ! 4965                             8,
31427 80C3                        08            .byte	8
31428                                           ! 4966                                  8,
31429 80C4                        08            .byte	8
31430                                           ! 4967                            8,
31431 80C5                        08            .byte	8
31432                                           ! 4968                                 0,
31433 80C6                        00            .byte	0
31434                                           ! 4969                            0,
31435 80C7                        00            .byte	0
31436                                           ! 4970                                 0,
31437 80C8                        00            .byte	0
31438                                           ! 4971                          0,
31439 80C9                      0000            .word	0
31440 80CB                      0000            .word	0
31441                                           ! 4972 } },
31442                                           ! 4973 { 0x0110,
31443 80CD                      0110            .word	$110
31444                                           ! 4974 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31445 80CF                      009B            .word	$9B
31446                                           ! 4975                   
31447                                           ! 4975         0x01 | 0x02 | 0x04,
31448 80D1                        07            .byte	7
31449                                           ! 4976                           0,
31450 80D2                        00            .byte	0
31451                                           ! 4977                           64,
31452 80D3                      0040            .word	$40
31453                                           ! 4978                    64,
31454 80D5                      0040            .word	$40
31455                                           ! 4979                        0xA000,
31456 80D7                      A000            .word	$A000
31457                                           ! 4980                        0x0000,
31458 80D9                      0000            .word	0
31459                                           ! 4981                       0,
31460 80DB                      0000            .word	0
31461 80DD                      0000            .word	0
31462                                           ! 4982                             1280,
31463 80DF                      0500            .word	$500
31464                                           ! 4983                        640,
31465 80E1                      0280            .word	$280
31466                                           ! 4984                        480,
31467 80E3                      01E0            .word	$1E0
31468                                           ! 4985                      8,
31469 80E5                        08            .byte	8
31470                                           ! 4986                      16,
31471 80E6                        10            .byte	$10
31472                                           ! 4987                           1,
31473 80E7                        01            .byte	1
31474                                           ! 4988                         15,
31475 80E8                        0F            .byte	$F
31476                                           ! 4989                          10,
31477 80E9                        0A            .byte	$A
31478                                           ! 4990                        0x06,
31479 80EA                        06            .byte	6
31480                                           ! 4991                     0,
31481 80EB                        00            .byte	0
31482                                           ! 4992                               26,
31483 80EC                        1A            .byte	$1A
31484                                           ! 4993                          0,
31485 80ED                        00            .byte	0
31486                                           ! 4994                        5,
31487 80EE                        05            .byte	5
31488                                           ! 4995                             10,
31489 80EF                        0A            .byte	$A
31490                                           ! 4996                          5,
31491 80F0                        05            .byte	5
31492                                           ! 4997                               5,
31493 80F1                        05            .byte	5
31494                                           ! 4998                         5,
31495 80F2                        05            .byte	5
31496                                           ! 4999                              0,
31497 80F3                        00            .byte	0
31498                                           ! 5000                         1,
31499 80F4                        01            .byte	1
31500                                           ! 5001                              15,
31501 80F5                        0F            .byte	$F
31502                                           ! 5002                                0,
31503 80F6                        00            .byte	0
31504                                           ! 5003                        0xE0000000,
31505 80F7                      0000            .word	0
31506 80F9                      E000            .word	$E000
31507                                           ! 5004                               0,
31508 80FB                      0000            .word	0
31509 80FD                      0000            .word	0
31510                                           ! 5005                             0,
31511 80FF                      0000            .word	0
31512                                           ! 5006                                1280,
31513 8101                      0500            .word	$500
31514                                           ! 5007                             0,
31515 8103                        00            .byte	0
31516                                           ! 5008                             0,
31517 8104                        00            .byte	0
31518                                           ! 5009                           5,
31519 8105                        05            .byte	5
31520                                           ! 5010                                10,
31521 8106                        0A            .byte	$A
31522                                           ! 5011                             5,
31523 8107                        05            .byte	5
31524                                           ! 5012                                  5,
31525 8108                        05            .byte	5
31526                                           ! 5013                            5,
31527 8109                        05            .byte	5
31528                                           ! 5014                                 0,
31529 810A                        00            .byte	0
31530                                           ! 5015                            1,
31531 810B                        01            .byte	1
31532                                           ! 5016                                 15,
31533 810C                        0F            .byte	$F
31534                                           ! 5017                          0,
31535 810D                      0000            .word	0
31536 810F                      0000            .word	0
31537                                           ! 5018 } },
31538                                           ! 5019 { 0x0111,
31539 8111                      0111            .word	$111
31540                                           ! 5020 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31541 8113                      009B            .word	$9B
31542                                           ! 5021                           0x01 | 0x02 | 0x04,
31543 8115                        07            .byte	7
31544                                           ! 5022                           0,
31545 8116                        00            .byte	0
31546                                           ! 5023                           64,
31547 8117                      0040            .word	$40
31548                                           ! 5024                    64,
31549 8119                      0040            .word	$40
31550                                           ! 5025                        0xA000,
31551 811B                      A000            .word	$A000
31552                                           ! 5026                        0x0000,
31553 811D                      0000            .word	0
31554                                           ! 5027                       0,
31555 811F                      0000            .word	0
31556 8121                      0000            .word	0
31557                                           ! 5028                             1280,
31558 8123                      0500            .word	$500
31559                                           ! 5029                        640,
31560 8125                      0280            .word	$280
31561                                           ! 5030                        480,
31562 8127                      01E0            .word	$1E0
31563                                           ! 5031                      8,
31564 8129                        08            .byte	8
31565                                           ! 5032                      16,
31566 812A                        10            .byte	$10
31567                                           ! 5033                           1,
31568 812B                        01            .byte	1
31569                                           ! 5034                         16,
31570 812C                        10            .byte	$10
31571                                           ! 5035                          10,
31572 812D                        0A            .byte	$A
31573                                           ! 5036                        0x06,
31574 812E                        06            .byte	6
31575                                           ! 5037                     0,
31576 812F                        00            .byte	0
31577                                           ! 5038                               26,
31578 8130                        1A            .byte	$1A
31579                                           ! 5039                          0,
31580 8131                        00            .byte	0
31581                                           ! 5040                        5,
31582 8132                        05            .byte	5
31583                                           ! 5041                             11,
31584 8133                        0B            .byte	$B
31585                                           ! 5042                          6,
31586 8134                        06            .byte	6
31587                                           ! 5043                               5,
31588 8135                        05            .byte	5
31589                                           ! 5044                   
31590                                           ! 5044       5,
31591 8136                        05            .byte	5
31592                                           ! 5045                              0,
31593 8137                        00            .byte	0
31594                                           ! 5046                         0,
31595 8138                        00            .byte	0
31596                                           ! 5047                              0,
31597 8139                        00            .byte	0
31598                                           ! 5048                                0,
31599 813A                        00            .byte	0
31600                                           ! 5049                        0xE0000000,
31601 813B                      0000            .word	0
31602 813D                      E000            .word	$E000
31603                                           ! 5050                               0,
31604 813F                      0000            .word	0
31605 8141                      0000            .word	0
31606                                           ! 5051                             0,
31607 8143                      0000            .word	0
31608                                           ! 5052                                1280,
31609 8145                      0500            .word	$500
31610                                           ! 5053                             0,
31611 8147                        00            .byte	0
31612                                           ! 5054                             0,
31613 8148                        00            .byte	0
31614                                           ! 5055                           5,
31615 8149                        05            .byte	5
31616                                           ! 5056                                11,
31617 814A                        0B            .byte	$B
31618                                           ! 5057                             6,
31619 814B                        06            .byte	6
31620                                           ! 5058                                  5,
31621 814C                        05            .byte	5
31622                                           ! 5059                            5,
31623 814D                        05            .byte	5
31624                                           ! 5060                                 0,
31625 814E                        00            .byte	0
31626                                           ! 5061                            0,
31627 814F                        00            .byte	0
31628                                           ! 5062                                 0,
31629 8150                        00            .byte	0
31630                                           ! 5063                          0,
31631 8151                      0000            .word	0
31632 8153                      0000            .word	0
31633                                           ! 5064 } },
31634                                           ! 5065 { 0x0112,
31635 8155                      0112            .word	$112
31636                                           ! 5066 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31637 8157                      009B            .word	$9B
31638                                           ! 5067                           0x01 | 0x02 | 0x04,
31639 8159                        07            .byte	7
31640                                           ! 5068                           0,
31641 815A                        00            .byte	0
31642                                           ! 5069                           64,
31643 815B                      0040            .word	$40
31644                                           ! 5070                    64,
31645 815D                      0040            .word	$40
31646                                           ! 5071                        0xA000,
31647 815F                      A000            .word	$A000
31648                                           ! 5072                        0x0000,
31649 8161                      0000            .word	0
31650                                           ! 5073                       0,
31651 8163                      0000            .word	0
31652 8165                      0000            .word	0
31653                                           ! 5074                             1920,
31654 8167                      0780            .word	$780
31655                                           ! 5075                        640,
31656 8169                      0280            .word	$280
31657                                           ! 5076                        480,
31658 816B                      01E0            .word	$1E0
31659                                           ! 5077                      8,
31660 816D                        08            .byte	8
31661                                           ! 5078                      16,
31662 816E                        10            .byte	$10
31663                                           ! 5079                           1,
31664 816F                        01            .byte	1
31665                                           ! 5080                         24,
31666 8170                        18            .byte	$18
31667                                           ! 5081                          15,
31668 8171                        0F            .byte	$F
31669                                           ! 5082                        0x06,
31670 8172                        06            .byte	6
31671                                           ! 5083                     0,
31672 8173                        00            .byte	0
31673                                           ! 5084                               17,
31674 8174                        11            .byte	$11
31675                                           ! 5085                          0,
31676 8175                        00            .byte	0
31677                                           ! 5086                        8,
31678 8176                        08            .byte	8
31679                                           ! 5087                             16,
31680 8177                        10            .byte	$10
31681                                           ! 5088                          8,
31682 8178                        08            .byte	8
31683                                           ! 5089                               8,
31684 8179                        08            .byte	8
31685                                           ! 5090                         8,
31686 817A                        08            .byte	8
31687                                           ! 5091                              0,
31688 817B                        00            .byte	0
31689                                           ! 5092                         0,
31690 817C                        00            .byte	0
31691                                           ! 5093                              0,
31692 817D                        00            .byte	0
31693                                           ! 5094                                0,
31694 817E                        00            .byte	0
31695                                           ! 5095                        0xE0000000,
31696 817F                      0000            .word	0
31697 8181                      E000            .word	$E000
31698                                           ! 5096                               0,
31699 8183                      0000            .word	0
31700 8185                      0000            .word	0
31701                                           ! 5097                             0,
31702 8187                      0000            .word	0
31703                                           ! 5098                                1920,
31704 8189                      0780            .word	$780
31705                                           ! 5099                             0,
31706 818B                        00            .byte	0
31707                                           ! 5100                             0,
31708 818C                        00            .byte	0
31709                                           ! 5101                           8,
31710 818D                        08            .byte	8
31711                                           ! 5102                                16,
31712 818E                        10            .byte	$10
31713                                           ! 5103                             8,
31714 818F                        08            .byte	8
31715                                           ! 5104                                  8,
31716 8190                        08            .byte	8
31717                                           ! 5105                            8,
31718 8191                        08            .byte	8
31719                                           ! 5106                                 0,
31720 8192                        00            .byte	0
31721                                           ! 5107                            0,
31722 8193                        00            .byte	0
31723                                           ! 5108                                 0,
31724 8194                        00            .byte	0
31725                                           ! 5109                          0,
31726 8195                      0000            .word	0
31727 8197                      0000            .word	0
31728                                           ! 5110 } },
31729                                           ! 5111 { 0x0113,
31730 8199                      0113            .word	$113
31731                                           ! 5112 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0
31732                                           ! 5112 x0010,
31733 819B                      009B            .word	$9B
31734                                           ! 5113                           0x01 | 0x02 | 0x04,
31735 819D                        07            .byte	7
31736                                           ! 5114                           0,
31737 819E                        00            .byte	0
31738                                           ! 5115                           64,
31739 819F                      0040            .word	$40
31740                                           ! 5116                    64,
31741 81A1                      0040            .word	$40
31742                                           ! 5117                        0xA000,
31743 81A3                      A000            .word	$A000
31744                                           ! 5118                        0x0000,
31745 81A5                      0000            .word	0
31746                                           ! 5119                       0,
31747 81A7                      0000            .word	0
31748 81A9                      0000            .word	0
31749                                           ! 5120                             1600,
31750 81AB                      0640            .word	$640
31751                                           ! 5121                        800,
31752 81AD                      0320            .word	$320
31753                                           ! 5122                        600,
31754 81AF                      0258            .word	$258
31755                                           ! 5123                      8,
31756 81B1                        08            .byte	8
31757                                           ! 5124                      16,
31758 81B2                        10            .byte	$10
31759                                           ! 5125                           1,
31760 81B3                        01            .byte	1
31761                                           ! 5126                         15,
31762 81B4                        0F            .byte	$F
31763                                           ! 5127                          15,
31764 81B5                        0F            .byte	$F
31765                                           ! 5128                        0x06,
31766 81B6                        06            .byte	6
31767                                           ! 5129                     0,
31768 81B7                        00            .byte	0
31769                                           ! 5130                               16,
31770 81B8                        10            .byte	$10
31771                                           ! 5131                          0,
31772 81B9                        00            .byte	0
31773                                           ! 5132                        5,
31774 81BA                        05            .byte	5
31775                                           ! 5133                             10,
31776 81BB                        0A            .byte	$A
31777                                           ! 5134                          5,
31778 81BC                        05            .byte	5
31779                                           ! 5135                               5,
31780 81BD                        05            .byte	5
31781                                           ! 5136                         5,
31782 81BE                        05            .byte	5
31783                                           ! 5137                              0,
31784 81BF                        00            .byte	0
31785                                           ! 5138                         1,
31786 81C0                        01            .byte	1
31787                                           ! 5139                              15,
31788 81C1                        0F            .byte	$F
31789                                           ! 5140                                0,
31790 81C2                        00            .byte	0
31791                                           ! 5141                        0xE0000000,
31792 81C3                      0000            .word	0
31793 81C5                      E000            .word	$E000
31794                                           ! 5142                               0,
31795 81C7                      0000            .word	0
31796 81C9                      0000            .word	0
31797                                           ! 5143                             0,
31798 81CB                      0000            .word	0
31799                                           ! 5144                                1600,
31800 81CD                      0640            .word	$640
31801                                           ! 5145                             0,
31802 81CF                        00            .byte	0
31803                                           ! 5146                             0,
31804 81D0                        00            .byte	0
31805                                           ! 5147                           5,
31806 81D1                        05            .byte	5
31807                                           ! 5148                                10,
31808 81D2                        0A            .byte	$A
31809                                           ! 5149                             5,
31810 81D3                        05            .byte	5
31811                                           ! 5150                                  5,
31812 81D4                        05            .byte	5
31813                                           ! 5151                            5,
31814 81D5                        05            .byte	5
31815                                           ! 5152                                 0,
31816 81D6                        00            .byte	0
31817                                           ! 5153                            1,
31818 81D7                        01            .byte	1
31819                                           ! 5154                                 15,
31820 81D8                        0F            .byte	$F
31821                                           ! 5155                          0,
31822 81D9                      0000            .word	0
31823 81DB                      0000            .word	0
31824                                           ! 5156 } },
31825                                           ! 5157 { 0x0114,
31826 81DD                      0114            .word	$114
31827                                           ! 5158 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31828 81DF                      009B            .word	$9B
31829                                           ! 5159                           0x01 | 0x02 | 0x04,
31830 81E1                        07            .byte	7
31831                                           ! 5160                           0,
31832 81E2                        00            .byte	0
31833                                           ! 5161                           64,
31834 81E3                      0040            .word	$40
31835                                           ! 5162                    64,
31836 81E5                      0040            .word	$40
31837                                           ! 5163                        0xA000,
31838 81E7                      A000            .word	$A000
31839                                           ! 5164                        0x0000,
31840 81E9                      0000            .word	0
31841                                           ! 5165                       0,
31842 81EB                      0000            .word	0
31843 81ED                      0000            .word	0
31844                                           ! 5166                             1600,
31845 81EF                      0640            .word	$640
31846                                           ! 5167                        800,
31847 81F1                      0320            .word	$320
31848                                           ! 5168                        600,
31849 81F3                      0258            .word	$258
31850                                           ! 5169                      8,
31851 81F5                        08            .byte	8
31852                                           ! 5170                      16,
31853 81F6                        10            .byte	$10
31854                                           ! 5171                           1,
31855 81F7                        01            .byte	1
31856                                           ! 5172                         16,
31857 81F8                        10            .byte	$10
31858                                           ! 5173                          15,
31859 81F9                        0F            .byte	$F
31860                                           ! 5174                        0x06,
31861 81FA                        06            .byte	6
31862                                           ! 5175                     0,
31863 81FB                        00            .byte	0
31864                                           ! 5176                               16,
31865 81FC                        10            .byte	$10
31866                                           ! 5177                          0,
31867 81FD                        00            .byte	0
31868                                           ! 5178                        5,
31869 81FE                        05            .byte	5
31870                                           ! 5179                             11,
31871 81FF                        0B            .byte	$B
31872                                           ! 5180                          6,
31873 8200                        06            .byte	6
31874                                           ! 5181                           
31875                                           ! 5181     5,
31876 8201                        05            .byte	5
31877                                           ! 5182                         5,
31878 8202                        05            .byte	5
31879                                           ! 5183                              0,
31880 8203                        00            .byte	0
31881                                           ! 5184                         0,
31882 8204                        00            .byte	0
31883                                           ! 5185                              0,
31884 8205                        00            .byte	0
31885                                           ! 5186                                0,
31886 8206                        00            .byte	0
31887                                           ! 5187                        0xE0000000,
31888 8207                      0000            .word	0
31889 8209                      E000            .word	$E000
31890                                           ! 5188                               0,
31891 820B                      0000            .word	0
31892 820D                      0000            .word	0
31893                                           ! 5189                             0,
31894 820F                      0000            .word	0
31895                                           ! 5190                                1600,
31896 8211                      0640            .word	$640
31897                                           ! 5191                             0,
31898 8213                        00            .byte	0
31899                                           ! 5192                             0,
31900 8214                        00            .byte	0
31901                                           ! 5193                           5,
31902 8215                        05            .byte	5
31903                                           ! 5194                                11,
31904 8216                        0B            .byte	$B
31905                                           ! 5195                             6,
31906 8217                        06            .byte	6
31907                                           ! 5196                                  5,
31908 8218                        05            .byte	5
31909                                           ! 5197                            5,
31910 8219                        05            .byte	5
31911                                           ! 5198                                 0,
31912 821A                        00            .byte	0
31913                                           ! 5199                            0,
31914 821B                        00            .byte	0
31915                                           ! 5200                                 0,
31916 821C                        00            .byte	0
31917                                           ! 5201                          0,
31918 821D                      0000            .word	0
31919 821F                      0000            .word	0
31920                                           ! 5202 } },
31921                                           ! 5203 { 0x0115,
31922 8221                      0115            .word	$115
31923                                           ! 5204 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31924 8223                      009B            .word	$9B
31925                                           ! 5205                           0x01 | 0x02 | 0x04,
31926 8225                        07            .byte	7
31927                                           ! 5206                           0,
31928 8226                        00            .byte	0
31929                                           ! 5207                           64,
31930 8227                      0040            .word	$40
31931                                           ! 5208                    64,
31932 8229                      0040            .word	$40
31933                                           ! 5209                        0xA000,
31934 822B                      A000            .word	$A000
31935                                           ! 5210                        0x0000,
31936 822D                      0000            .word	0
31937                                           ! 5211                       0,
31938 822F                      0000            .word	0
31939 8231                      0000            .word	0
31940                                           ! 5212                             2400,
31941 8233                      0960            .word	$960
31942                                           ! 5213                        800,
31943 8235                      0320            .word	$320
31944                                           ! 5214                        600,
31945 8237                      0258            .word	$258
31946                                           ! 5215                      8,
31947 8239                        08            .byte	8
31948                                           ! 5216                      16,
31949 823A                        10            .byte	$10
31950                                           ! 5217                           1,
31951 823B                        01            .byte	1
31952                                           ! 5218                         24,
31953 823C                        18            .byte	$18
31954                                           ! 5219                          22,
31955 823D                        16            .byte	$16
31956                                           ! 5220                        0x06,
31957 823E                        06            .byte	6
31958                                           ! 5221                     0,
31959 823F                        00            .byte	0
31960                                           ! 5222                               10,
31961 8240                        0A            .byte	$A
31962                                           ! 5223                          0,
31963 8241                        00            .byte	0
31964                                           ! 5224                        8,
31965 8242                        08            .byte	8
31966                                           ! 5225                             16,
31967 8243                        10            .byte	$10
31968                                           ! 5226                          8,
31969 8244                        08            .byte	8
31970                                           ! 5227                               8,
31971 8245                        08            .byte	8
31972                                           ! 5228                         8,
31973 8246                        08            .byte	8
31974                                           ! 5229                              0,
31975 8247                        00            .byte	0
31976                                           ! 5230                         0,
31977 8248                        00            .byte	0
31978                                           ! 5231                              0,
31979 8249                        00            .byte	0
31980                                           ! 5232                                0,
31981 824A                        00            .byte	0
31982                                           ! 5233                        0xE0000000,
31983 824B                      0000            .word	0
31984 824D                      E000            .word	$E000
31985                                           ! 5234                               0,
31986 824F                      0000            .word	0
31987 8251                      0000            .word	0
31988                                           ! 5235                             0,
31989 8253                      0000            .word	0
31990                                           ! 5236                                2400,
31991 8255                      0960            .word	$960
31992                                           ! 5237                             0,
31993 8257                        00            .byte	0
31994                                           ! 5238                             0,
31995 8258                        00            .byte	0
31996                                           ! 5239                           8,
31997 8259                        08            .byte	8
31998                                           ! 5240                                16,
31999 825A                        10            .byte	$10
32000                                           ! 5241                             8,
32001 825B                        08            .byte	8
32002                                           ! 5242                                  8,
32003 825C                        08            .byte	8
32004                                           ! 5243                            8,
32005 825D                        08            .byte	8
32006                                           ! 5244                                 0,
32007 825E                        00            .byte	0
32008                                           ! 5245                            0,
32009 825F                        00            .byte	0
32010                                           ! 5246                                 0,
32011 8260                        00            .byte	0
32012                                           ! 5247                          0,
32013 8261                      0000            .word	0
32014 8263                      0000            .word	0
32015                                           ! 5248 } },
32016                                           ! 5249 { 0x0116,
32017 8265                      0116            .word	$116
32018                                           ! 5250 { 0x0001 | 0x0
32019                                           ! 5250 002 | 0x0008 | 0x0080 | 0x0010,
32020 8267                      009B            .word	$9B
32021                                           ! 5251                           0x01 | 0x02 | 0x04,
32022 8269                        07            .byte	7
32023                                           ! 5252                           0,
32024 826A                        00            .byte	0
32025                                           ! 5253                           64,
32026 826B                      0040            .word	$40
32027                                           ! 5254                    64,
32028 826D                      0040            .word	$40
32029                                           ! 5255                        0xA000,
32030 826F                      A000            .word	$A000
32031                                           ! 5256                        0x0000,
32032 8271                      0000            .word	0
32033                                           ! 5257                       0,
32034 8273                      0000            .word	0
32035 8275                      0000            .word	0
32036                                           ! 5258                             2048,
32037 8277                      0800            .word	$800
32038                                           ! 5259                        1024,
32039 8279                      0400            .word	$400
32040                                           ! 5260                        768,
32041 827B                      0300            .word	$300
32042                                           ! 5261                      8,
32043 827D                        08            .byte	8
32044                                           ! 5262                      16,
32045 827E                        10            .byte	$10
32046                                           ! 5263                           1,
32047 827F                        01            .byte	1
32048                                           ! 5264                         15,
32049 8280                        0F            .byte	$F
32050                                           ! 5265                          24,
32051 8281                        18            .byte	$18
32052                                           ! 5266                        0x06,
32053 8282                        06            .byte	6
32054                                           ! 5267                     0,
32055 8283                        00            .byte	0
32056                                           ! 5268                               9,
32057 8284                        09            .byte	9
32058                                           ! 5269                          0,
32059 8285                        00            .byte	0
32060                                           ! 5270                        5,
32061 8286                        05            .byte	5
32062                                           ! 5271                             10,
32063 8287                        0A            .byte	$A
32064                                           ! 5272                          5,
32065 8288                        05            .byte	5
32066                                           ! 5273                               5,
32067 8289                        05            .byte	5
32068                                           ! 5274                         5,
32069 828A                        05            .byte	5
32070                                           ! 5275                              0,
32071 828B                        00            .byte	0
32072                                           ! 5276                         1,
32073 828C                        01            .byte	1
32074                                           ! 5277                              15,
32075 828D                        0F            .byte	$F
32076                                           ! 5278                                0,
32077 828E                        00            .byte	0
32078                                           ! 5279                        0xE0000000,
32079 828F                      0000            .word	0
32080 8291                      E000            .word	$E000
32081                                           ! 5280                               0,
32082 8293                      0000            .word	0
32083 8295                      0000            .word	0
32084                                           ! 5281                             0,
32085 8297                      0000            .word	0
32086                                           ! 5282                                2048,
32087 8299                      0800            .word	$800
32088                                           ! 5283                             0,
32089 829B                        00            .byte	0
32090                                           ! 5284                             0,
32091 829C                        00            .byte	0
32092                                           ! 5285                           5,
32093 829D                        05            .byte	5
32094                                           ! 5286                                10,
32095 829E                        0A            .byte	$A
32096                                           ! 5287                             5,
32097 829F                        05            .byte	5
32098                                           ! 5288                                  5,
32099 82A0                        05            .byte	5
32100                                           ! 5289                            5,
32101 82A1                        05            .byte	5
32102                                           ! 5290                                 0,
32103 82A2                        00            .byte	0
32104                                           ! 5291                            1,
32105 82A3                        01            .byte	1
32106                                           ! 5292                                 15,
32107 82A4                        0F            .byte	$F
32108                                           ! 5293                          0,
32109 82A5                      0000            .word	0
32110 82A7                      0000            .word	0
32111                                           ! 5294 } },
32112                                           ! 5295 { 0x0117,
32113 82A9                      0117            .word	$117
32114                                           ! 5296 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32115 82AB                      009B            .word	$9B
32116                                           ! 5297                           0x01 | 0x02 | 0x04,
32117 82AD                        07            .byte	7
32118                                           ! 5298                           0,
32119 82AE                        00            .byte	0
32120                                           ! 5299                           64,
32121 82AF                      0040            .word	$40
32122                                           ! 5300                    64,
32123 82B1                      0040            .word	$40
32124                                           ! 5301                        0xA000,
32125 82B3                      A000            .word	$A000
32126                                           ! 5302                        0x0000,
32127 82B5                      0000            .word	0
32128                                           ! 5303                       0,
32129 82B7                      0000            .word	0
32130 82B9                      0000            .word	0
32131                                           ! 5304                             2048,
32132 82BB                      0800            .word	$800
32133                                           ! 5305                        1024,
32134 82BD                      0400            .word	$400
32135                                           ! 5306                        768,
32136 82BF                      0300            .word	$300
32137                                           ! 5307                      8,
32138 82C1                        08            .byte	8
32139                                           ! 5308                      16,
32140 82C2                        10            .byte	$10
32141                                           ! 5309                           1,
32142 82C3                        01            .byte	1
32143                                           ! 5310                         16,
32144 82C4                        10            .byte	$10
32145                                           ! 5311                          24,
32146 82C5                        18            .byte	$18
32147                                           ! 5312                        0x06,
32148 82C6                        06            .byte	6
32149                                           ! 5313                     0,
32150 82C7                        00            .byte	0
32151                                           ! 5314                               9,
32152 82C8                        09            .byte	9
32153                                           ! 5315                          0,
32154 82C9                        00            .byte	0
32155                                           ! 5316                        5,
32156 82CA                        05            .byte	5
32157                                           ! 5317                             11,
32158 82CB                        0B            .byte	$B
32159                                           ! 5318                          6,
32160 82CC                        06            .byte	6
32161                                           ! 5319  
32162                                           ! 5319                              5,
32163 82CD                        05            .byte	5
32164                                           ! 5320                         5,
32165 82CE                        05            .byte	5
32166                                           ! 5321                              0,
32167 82CF                        00            .byte	0
32168                                           ! 5322                         0,
32169 82D0                        00            .byte	0
32170                                           ! 5323                              0,
32171 82D1                        00            .byte	0
32172                                           ! 5324                                0,
32173 82D2                        00            .byte	0
32174                                           ! 5325                        0xE0000000,
32175 82D3                      0000            .word	0
32176 82D5                      E000            .word	$E000
32177                                           ! 5326                               0,
32178 82D7                      0000            .word	0
32179 82D9                      0000            .word	0
32180                                           ! 5327                             0,
32181 82DB                      0000            .word	0
32182                                           ! 5328                                2048,
32183 82DD                      0800            .word	$800
32184                                           ! 5329                             0,
32185 82DF                        00            .byte	0
32186                                           ! 5330                             0,
32187 82E0                        00            .byte	0
32188                                           ! 5331                           5,
32189 82E1                        05            .byte	5
32190                                           ! 5332                                11,
32191 82E2                        0B            .byte	$B
32192                                           ! 5333                             6,
32193 82E3                        06            .byte	6
32194                                           ! 5334                                  5,
32195 82E4                        05            .byte	5
32196                                           ! 5335                            5,
32197 82E5                        05            .byte	5
32198                                           ! 5336                                 0,
32199 82E6                        00            .byte	0
32200                                           ! 5337                            0,
32201 82E7                        00            .byte	0
32202                                           ! 5338                                 0,
32203 82E8                        00            .byte	0
32204                                           ! 5339                          0,
32205 82E9                      0000            .word	0
32206 82EB                      0000            .word	0
32207                                           ! 5340 } },
32208                                           ! 5341 { 0x0118,
32209 82ED                      0118            .word	$118
32210                                           ! 5342 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32211 82EF                      009B            .word	$9B
32212                                           ! 5343                           0x01 | 0x02 | 0x04,
32213 82F1                        07            .byte	7
32214                                           ! 5344                           0,
32215 82F2                        00            .byte	0
32216                                           ! 5345                           64,
32217 82F3                      0040            .word	$40
32218                                           ! 5346                    64,
32219 82F5                      0040            .word	$40
32220                                           ! 5347                        0xA000,
32221 82F7                      A000            .word	$A000
32222                                           ! 5348                        0x0000,
32223 82F9                      0000            .word	0
32224                                           ! 5349                       0,
32225 82FB                      0000            .word	0
32226 82FD                      0000            .word	0
32227                                           ! 5350                             3072,
32228 82FF                      0C00            .word	$C00
32229                                           ! 5351                        1024,
32230 8301                      0400            .word	$400
32231                                           ! 5352                        768,
32232 8303                      0300            .word	$300
32233                                           ! 5353                      8,
32234 8305                        08            .byte	8
32235                                           ! 5354                      16,
32236 8306                        10            .byte	$10
32237                                           ! 5355                           1,
32238 8307                        01            .byte	1
32239                                           ! 5356                         24,
32240 8308                        18            .byte	$18
32241                                           ! 5357                          36,
32242 8309                        24            .byte	$24
32243                                           ! 5358                        0x06,
32244 830A                        06            .byte	6
32245                                           ! 5359                     0,
32246 830B                        00            .byte	0
32247                                           ! 5360                               6,
32248 830C                        06            .byte	6
32249                                           ! 5361                          0,
32250 830D                        00            .byte	0
32251                                           ! 5362                        8,
32252 830E                        08            .byte	8
32253                                           ! 5363                             16,
32254 830F                        10            .byte	$10
32255                                           ! 5364                          8,
32256 8310                        08            .byte	8
32257                                           ! 5365                               8,
32258 8311                        08            .byte	8
32259                                           ! 5366                         8,
32260 8312                        08            .byte	8
32261                                           ! 5367                              0,
32262 8313                        00            .byte	0
32263                                           ! 5368                         0,
32264 8314                        00            .byte	0
32265                                           ! 5369                              0,
32266 8315                        00            .byte	0
32267                                           ! 5370                                0,
32268 8316                        00            .byte	0
32269                                           ! 5371                        0xE0000000,
32270 8317                      0000            .word	0
32271 8319                      E000            .word	$E000
32272                                           ! 5372                               0,
32273 831B                      0000            .word	0
32274 831D                      0000            .word	0
32275                                           ! 5373                             0,
32276 831F                      0000            .word	0
32277                                           ! 5374                                3072,
32278 8321                      0C00            .word	$C00
32279                                           ! 5375                             0,
32280 8323                        00            .byte	0
32281                                           ! 5376                             0,
32282 8324                        00            .byte	0
32283                                           ! 5377                           8,
32284 8325                        08            .byte	8
32285                                           ! 5378                                16,
32286 8326                        10            .byte	$10
32287                                           ! 5379                             8,
32288 8327                        08            .byte	8
32289                                           ! 5380                                  8,
32290 8328                        08            .byte	8
32291                                           ! 5381                            8,
32292 8329                        08            .byte	8
32293                                           ! 5382                                 0,
32294 832A                        00            .byte	0
32295                                           ! 5383                            0,
32296 832B                        00            .byte	0
32297                                           ! 5384                                 0,
32298 832C                        00            .byte	0
32299                                           ! 5385                          0,
32300 832D                      0000            .word	0
32301 832F                      0000            .word	0
32302                                           ! 5386 } },
32303                                           ! 5386 
32304                                           ! 5387 { 0x0119,
32305 8331                      0119            .word	$119
32306                                           ! 5388 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32307 8333                      009B            .word	$9B
32308                                           ! 5389                           0x01 | 0x02 | 0x04,
32309 8335                        07            .byte	7
32310                                           ! 5390                           0,
32311 8336                        00            .byte	0
32312                                           ! 5391                           64,
32313 8337                      0040            .word	$40
32314                                           ! 5392                    64,
32315 8339                      0040            .word	$40
32316                                           ! 5393                        0xA000,
32317 833B                      A000            .word	$A000
32318                                           ! 5394                        0x0000,
32319 833D                      0000            .word	0
32320                                           ! 5395                       0,
32321 833F                      0000            .word	0
32322 8341                      0000            .word	0
32323                                           ! 5396                             2560,
32324 8343                      0A00            .word	$A00
32325                                           ! 5397                        1280,
32326 8345                      0500            .word	$500
32327                                           ! 5398                        1024,
32328 8347                      0400            .word	$400
32329                                           ! 5399                      8,
32330 8349                        08            .byte	8
32331                                           ! 5400                      16,
32332 834A                        10            .byte	$10
32333                                           ! 5401                           1,
32334 834B                        01            .byte	1
32335                                           ! 5402                         15,
32336 834C                        0F            .byte	$F
32337                                           ! 5403                          40,
32338 834D                        28            .byte	$28
32339                                           ! 5404                        0x06,
32340 834E                        06            .byte	6
32341                                           ! 5405                     0,
32342 834F                        00            .byte	0
32343                                           ! 5406                               5,
32344 8350                        05            .byte	5
32345                                           ! 5407                          0,
32346 8351                        00            .byte	0
32347                                           ! 5408                        5,
32348 8352                        05            .byte	5
32349                                           ! 5409                             10,
32350 8353                        0A            .byte	$A
32351                                           ! 5410                          5,
32352 8354                        05            .byte	5
32353                                           ! 5411                               5,
32354 8355                        05            .byte	5
32355                                           ! 5412                         5,
32356 8356                        05            .byte	5
32357                                           ! 5413                              0,
32358 8357                        00            .byte	0
32359                                           ! 5414                         1,
32360 8358                        01            .byte	1
32361                                           ! 5415                              15,
32362 8359                        0F            .byte	$F
32363                                           ! 5416                                0,
32364 835A                        00            .byte	0
32365                                           ! 5417                        0xE0000000,
32366 835B                      0000            .word	0
32367 835D                      E000            .word	$E000
32368                                           ! 5418                               0,
32369 835F                      0000            .word	0
32370 8361                      0000            .word	0
32371                                           ! 5419                             0,
32372 8363                      0000            .word	0
32373                                           ! 5420                                2560,
32374 8365                      0A00            .word	$A00
32375                                           ! 5421                             0,
32376 8367                        00            .byte	0
32377                                           ! 5422                             0,
32378 8368                        00            .byte	0
32379                                           ! 5423                           5,
32380 8369                        05            .byte	5
32381                                           ! 5424                                10,
32382 836A                        0A            .byte	$A
32383                                           ! 5425                             5,
32384 836B                        05            .byte	5
32385                                           ! 5426                                  5,
32386 836C                        05            .byte	5
32387                                           ! 5427                            5,
32388 836D                        05            .byte	5
32389                                           ! 5428                                 0,
32390 836E                        00            .byte	0
32391                                           ! 5429                            1,
32392 836F                        01            .byte	1
32393                                           ! 5430                                 15,
32394 8370                        0F            .byte	$F
32395                                           ! 5431                          0,
32396 8371                      0000            .word	0
32397 8373                      0000            .word	0
32398                                           ! 5432 } },
32399                                           ! 5433 { 0x011a,
32400 8375                      011A            .word	$11A
32401                                           ! 5434 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32402 8377                      009B            .word	$9B
32403                                           ! 5435                           0x01 | 0x02 | 0x04,
32404 8379                        07            .byte	7
32405                                           ! 5436                           0,
32406 837A                        00            .byte	0
32407                                           ! 5437                           64,
32408 837B                      0040            .word	$40
32409                                           ! 5438                    64,
32410 837D                      0040            .word	$40
32411                                           ! 5439                        0xA000,
32412 837F                      A000            .word	$A000
32413                                           ! 5440                        0x0000,
32414 8381                      0000            .word	0
32415                                           ! 5441                       0,
32416 8383                      0000            .word	0
32417 8385                      0000            .word	0
32418                                           ! 5442                             2560,
32419 8387                      0A00            .word	$A00
32420                                           ! 5443                        1280,
32421 8389                      0500            .word	$500
32422                                           ! 5444                        1024,
32423 838B                      0400            .word	$400
32424                                           ! 5445                      8,
32425 838D                        08            .byte	8
32426                                           ! 5446                      16,
32427 838E                        10            .byte	$10
32428                                           ! 5447                           1,
32429 838F                        01            .byte	1
32430                                           ! 5448                         16,
32431 8390                        10            .byte	$10
32432                                           ! 5449                          40,
32433 8391                        28            .byte	$28
32434                                           ! 5450                        0x06,
32435 8392                        06            .byte	6
32436                                           ! 5451                     0,
32437 8393                        00            .byte	0
32438                                           ! 5452                               5,
32439 8394                        05            .byte	5
32440                                           ! 5453                          0,
32441 8395                        00            .byte	0
32442                                           ! 5454                        5,
32443 8396                        05            .byte	5
32444                                           ! 5455                             11,
32445 8397                        0B            .byte	$B
32446                                           ! 5456   
32447                                           ! 5456                        6,
32448 8398                        06            .byte	6
32449                                           ! 5457                               5,
32450 8399                        05            .byte	5
32451                                           ! 5458                         5,
32452 839A                        05            .byte	5
32453                                           ! 5459                              0,
32454 839B                        00            .byte	0
32455                                           ! 5460                         0,
32456 839C                        00            .byte	0
32457                                           ! 5461                              0,
32458 839D                        00            .byte	0
32459                                           ! 5462                                0,
32460 839E                        00            .byte	0
32461                                           ! 5463                        0xE0000000,
32462 839F                      0000            .word	0
32463 83A1                      E000            .word	$E000
32464                                           ! 5464                               0,
32465 83A3                      0000            .word	0
32466 83A5                      0000            .word	0
32467                                           ! 5465                             0,
32468 83A7                      0000            .word	0
32469                                           ! 5466                                2560,
32470 83A9                      0A00            .word	$A00
32471                                           ! 5467                             0,
32472 83AB                        00            .byte	0
32473                                           ! 5468                             0,
32474 83AC                        00            .byte	0
32475                                           ! 5469                           5,
32476 83AD                        05            .byte	5
32477                                           ! 5470                                11,
32478 83AE                        0B            .byte	$B
32479                                           ! 5471                             6,
32480 83AF                        06            .byte	6
32481                                           ! 5472                                  5,
32482 83B0                        05            .byte	5
32483                                           ! 5473                            5,
32484 83B1                        05            .byte	5
32485                                           ! 5474                                 0,
32486 83B2                        00            .byte	0
32487                                           ! 5475                            0,
32488 83B3                        00            .byte	0
32489                                           ! 5476                                 0,
32490 83B4                        00            .byte	0
32491                                           ! 5477                          0,
32492 83B5                      0000            .word	0
32493 83B7                      0000            .word	0
32494                                           ! 5478 } },
32495                                           ! 5479 { 0x011b,
32496 83B9                      011B            .word	$11B
32497                                           ! 5480 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32498 83BB                      009B            .word	$9B
32499                                           ! 5481                           0x01 | 0x02 | 0x04,
32500 83BD                        07            .byte	7
32501                                           ! 5482                           0,
32502 83BE                        00            .byte	0
32503                                           ! 5483                           64,
32504 83BF                      0040            .word	$40
32505                                           ! 5484                    64,
32506 83C1                      0040            .word	$40
32507                                           ! 5485                        0xA000,
32508 83C3                      A000            .word	$A000
32509                                           ! 5486                        0x0000,
32510 83C5                      0000            .word	0
32511                                           ! 5487                       0,
32512 83C7                      0000            .word	0
32513 83C9                      0000            .word	0
32514                                           ! 5488                             3840,
32515 83CB                      0F00            .word	$F00
32516                                           ! 5489                        1280,
32517 83CD                      0500            .word	$500
32518                                           ! 5490                        1024,
32519 83CF                      0400            .word	$400
32520                                           ! 5491                      8,
32521 83D1                        08            .byte	8
32522                                           ! 5492                      16,
32523 83D2                        10            .byte	$10
32524                                           ! 5493                           1,
32525 83D3                        01            .byte	1
32526                                           ! 5494                         24,
32527 83D4                        18            .byte	$18
32528                                           ! 5495                          60,
32529 83D5                        3C            .byte	$3C
32530                                           ! 5496                        0x06,
32531 83D6                        06            .byte	6
32532                                           ! 5497                     0,
32533 83D7                        00            .byte	0
32534                                           ! 5498                               3,
32535 83D8                        03            .byte	3
32536                                           ! 5499                          0,
32537 83D9                        00            .byte	0
32538                                           ! 5500                        8,
32539 83DA                        08            .byte	8
32540                                           ! 5501                             16,
32541 83DB                        10            .byte	$10
32542                                           ! 5502                          8,
32543 83DC                        08            .byte	8
32544                                           ! 5503                               8,
32545 83DD                        08            .byte	8
32546                                           ! 5504                         8,
32547 83DE                        08            .byte	8
32548                                           ! 5505                              0,
32549 83DF                        00            .byte	0
32550                                           ! 5506                         0,
32551 83E0                        00            .byte	0
32552                                           ! 5507                              0,
32553 83E1                        00            .byte	0
32554                                           ! 5508                                0,
32555 83E2                        00            .byte	0
32556                                           ! 5509                        0xE0000000,
32557 83E3                      0000            .word	0
32558 83E5                      E000            .word	$E000
32559                                           ! 5510                               0,
32560 83E7                      0000            .word	0
32561 83E9                      0000            .word	0
32562                                           ! 5511                             0,
32563 83EB                      0000            .word	0
32564                                           ! 5512                                3840,
32565 83ED                      0F00            .word	$F00
32566                                           ! 5513                             0,
32567 83EF                        00            .byte	0
32568                                           ! 5514                             0,
32569 83F0                        00            .byte	0
32570                                           ! 5515                           8,
32571 83F1                        08            .byte	8
32572                                           ! 5516                                16,
32573 83F2                        10            .byte	$10
32574                                           ! 5517                             8,
32575 83F3                        08            .byte	8
32576                                           ! 5518                                  8,
32577 83F4                        08            .byte	8
32578                                           ! 5519                            8,
32579 83F5                        08            .byte	8
32580                                           ! 5520                                 0,
32581 83F6                        00            .byte	0
32582                                           ! 5521                            0,
32583 83F7                        00            .byte	0
32584                                           ! 5522                                 0,
32585 83F8                        00            .byte	0
32586                                           ! 5523     
32587                                           ! 5523                      0,
32588 83F9                      0000            .word	0
32589 83FB                      0000            .word	0
32590                                           ! 5524 } },
32591                                           ! 5525 { 0x011c,
32592 83FD                      011C            .word	$11C
32593                                           ! 5526 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32594 83FF                      009B            .word	$9B
32595                                           ! 5527                           0x01 | 0x02 | 0x04,
32596 8401                        07            .byte	7
32597                                           ! 5528                           0,
32598 8402                        00            .byte	0
32599                                           ! 5529                           64,
32600 8403                      0040            .word	$40
32601                                           ! 5530                    64,
32602 8405                      0040            .word	$40
32603                                           ! 5531                        0xA000,
32604 8407                      A000            .word	$A000
32605                                           ! 5532                        0x0000,
32606 8409                      0000            .word	0
32607                                           ! 5533                       0,
32608 840B                      0000            .word	0
32609 840D                      0000            .word	0
32610                                           ! 5534                             1600,
32611 840F                      0640            .word	$640
32612                                           ! 5535                        1600,
32613 8411                      0640            .word	$640
32614                                           ! 5536                        1200,
32615 8413                      04B0            .word	$4B0
32616                                           ! 5537                      8,
32617 8415                        08            .byte	8
32618                                           ! 5538                      16,
32619 8416                        10            .byte	$10
32620                                           ! 5539                           1,
32621 8417                        01            .byte	1
32622                                           ! 5540                         8,
32623 8418                        08            .byte	8
32624                                           ! 5541                          30,
32625 8419                        1E            .byte	$1E
32626                                           ! 5542                        0x04,
32627 841A                        04            .byte	4
32628                                           ! 5543                     0,
32629 841B                        00            .byte	0
32630                                           ! 5544                               7,
32631 841C                        07            .byte	7
32632                                           ! 5545                          0,
32633 841D                        00            .byte	0
32634                                           ! 5546                        0,
32635 841E                        00            .byte	0
32636                                           ! 5547                             0,
32637 841F                        00            .byte	0
32638                                           ! 5548                          0,
32639 8420                        00            .byte	0
32640                                           ! 5549                               0,
32641 8421                        00            .byte	0
32642                                           ! 5550                         0,
32643 8422                        00            .byte	0
32644                                           ! 5551                              0,
32645 8423                        00            .byte	0
32646                                           ! 5552                         0,
32647 8424                        00            .byte	0
32648                                           ! 5553                              0,
32649 8425                        00            .byte	0
32650                                           ! 5554                                0,
32651 8426                        00            .byte	0
32652                                           ! 5555                        0xE0000000,
32653 8427                      0000            .word	0
32654 8429                      E000            .word	$E000
32655                                           ! 5556                               0,
32656 842B                      0000            .word	0
32657 842D                      0000            .word	0
32658                                           ! 5557                             0,
32659 842F                      0000            .word	0
32660                                           ! 5558                                1600,
32661 8431                      0640            .word	$640
32662                                           ! 5559                             0,
32663 8433                        00            .byte	0
32664                                           ! 5560                             0,
32665 8434                        00            .byte	0
32666                                           ! 5561                           0,
32667 8435                        00            .byte	0
32668                                           ! 5562                                0,
32669 8436                        00            .byte	0
32670                                           ! 5563                             0,
32671 8437                        00            .byte	0
32672                                           ! 5564                                  0,
32673 8438                        00            .byte	0
32674                                           ! 5565                            0,
32675 8439                        00            .byte	0
32676                                           ! 5566                                 0,
32677 843A                        00            .byte	0
32678                                           ! 5567                            0,
32679 843B                        00            .byte	0
32680                                           ! 5568                                 0,
32681 843C                        00            .byte	0
32682                                           ! 5569                          0,
32683 843D                      0000            .word	0
32684 843F                      0000            .word	0
32685                                           ! 5570 } },
32686                                           ! 5571 { 0x011d,
32687 8441                      011D            .word	$11D
32688                                           ! 5572 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32689 8443                      009B            .word	$9B
32690                                           ! 5573                           0x01 | 0x02 | 0x04,
32691 8445                        07            .byte	7
32692                                           ! 5574                           0,
32693 8446                        00            .byte	0
32694                                           ! 5575                           64,
32695 8447                      0040            .word	$40
32696                                           ! 5576                    64,
32697 8449                      0040            .word	$40
32698                                           ! 5577                        0xA000,
32699 844B                      A000            .word	$A000
32700                                           ! 5578                        0x0000,
32701 844D                      0000            .word	0
32702                                           ! 5579                       0,
32703 844F                      0000            .word	0
32704 8451                      0000            .word	0
32705                                           ! 5580                             3200,
32706 8453                      0C80            .word	$C80
32707                                           ! 5581                        1600,
32708 8455                      0640            .word	$640
32709                                           ! 5582                        1200,
32710 8457                      04B0            .word	$4B0
32711                                           ! 5583                      8,
32712 8459                        08            .byte	8
32713                                           ! 5584                      16,
32714 845A                        10            .byte	$10
32715                                           ! 5585                           1,
32716 845B                        01            .byte	1
32717                                           ! 5586                         15,
32718 845C                        0F            .byte	$F
32719                                           ! 5587                          59,
32720 845D                        3B            .byte	$3B
32721                                           ! 5588                        0x06,
32722 845E                        06            .byte	6
32723                                           ! 5589                     0,
32724 845F                        00            .byte	0
32725                                           ! 5590                               3,
32726 8460                        03            .byte	3
32727                                           ! 5591                          0,
32728 8461                        00            .byte	0
32729                                           ! 5592                        5,
32730 8462                        05            .byte	5
32731                                           ! 5593            
32732                                           ! 5593                  10,
32733 8463                        0A            .byte	$A
32734                                           ! 5594                          5,
32735 8464                        05            .byte	5
32736                                           ! 5595                               5,
32737 8465                        05            .byte	5
32738                                           ! 5596                         5,
32739 8466                        05            .byte	5
32740                                           ! 5597                              0,
32741 8467                        00            .byte	0
32742                                           ! 5598                         1,
32743 8468                        01            .byte	1
32744                                           ! 5599                              15,
32745 8469                        0F            .byte	$F
32746                                           ! 5600                                0,
32747 846A                        00            .byte	0
32748                                           ! 5601                        0xE0000000,
32749 846B                      0000            .word	0
32750 846D                      E000            .word	$E000
32751                                           ! 5602                               0,
32752 846F                      0000            .word	0
32753 8471                      0000            .word	0
32754                                           ! 5603                             0,
32755 8473                      0000            .word	0
32756                                           ! 5604                                3200,
32757 8475                      0C80            .word	$C80
32758                                           ! 5605                             0,
32759 8477                        00            .byte	0
32760                                           ! 5606                             0,
32761 8478                        00            .byte	0
32762                                           ! 5607                           5,
32763 8479                        05            .byte	5
32764                                           ! 5608                                10,
32765 847A                        0A            .byte	$A
32766                                           ! 5609                             5,
32767 847B                        05            .byte	5
32768                                           ! 5610                                  5,
32769 847C                        05            .byte	5
32770                                           ! 5611                            5,
32771 847D                        05            .byte	5
32772                                           ! 5612                                 0,
32773 847E                        00            .byte	0
32774                                           ! 5613                            1,
32775 847F                        01            .byte	1
32776                                           ! 5614                                 15,
32777 8480                        0F            .byte	$F
32778                                           ! 5615                          0,
32779 8481                      0000            .word	0
32780 8483                      0000            .word	0
32781                                           ! 5616 } },
32782                                           ! 5617 { 0x011e,
32783 8485                      011E            .word	$11E
32784                                           ! 5618 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32785 8487                      009B            .word	$9B
32786                                           ! 5619                           0x01 | 0x02 | 0x04,
32787 8489                        07            .byte	7
32788                                           ! 5620                           0,
32789 848A                        00            .byte	0
32790                                           ! 5621                           64,
32791 848B                      0040            .word	$40
32792                                           ! 5622                    64,
32793 848D                      0040            .word	$40
32794                                           ! 5623                        0xA000,
32795 848F                      A000            .word	$A000
32796                                           ! 5624                        0x0000,
32797 8491                      0000            .word	0
32798                                           ! 5625                       0,
32799 8493                      0000            .word	0
32800 8495                      0000            .word	0
32801                                           ! 5626                             3200,
32802 8497                      0C80            .word	$C80
32803                                           ! 5627                        1600,
32804 8499                      0640            .word	$640
32805                                           ! 5628                        1200,
32806 849B                      04B0            .word	$4B0
32807                                           ! 5629                      8,
32808 849D                        08            .byte	8
32809                                           ! 5630                      16,
32810 849E                        10            .byte	$10
32811                                           ! 5631                           1,
32812 849F                        01            .byte	1
32813                                           ! 5632                         16,
32814 84A0                        10            .byte	$10
32815                                           ! 5633                          59,
32816 84A1                        3B            .byte	$3B
32817                                           ! 5634                        0x06,
32818 84A2                        06            .byte	6
32819                                           ! 5635                     0,
32820 84A3                        00            .byte	0
32821                                           ! 5636                               3,
32822 84A4                        03            .byte	3
32823                                           ! 5637                          0,
32824 84A5                        00            .byte	0
32825                                           ! 5638                        5,
32826 84A6                        05            .byte	5
32827                                           ! 5639                             11,
32828 84A7                        0B            .byte	$B
32829                                           ! 5640                          6,
32830 84A8                        06            .byte	6
32831                                           ! 5641                               5,
32832 84A9                        05            .byte	5
32833                                           ! 5642                         5,
32834 84AA                        05            .byte	5
32835                                           ! 5643                              0,
32836 84AB                        00            .byte	0
32837                                           ! 5644                         0,
32838 84AC                        00            .byte	0
32839                                           ! 5645                              0,
32840 84AD                        00            .byte	0
32841                                           ! 5646                                0,
32842 84AE                        00            .byte	0
32843                                           ! 5647                        0xE0000000,
32844 84AF                      0000            .word	0
32845 84B1                      E000            .word	$E000
32846                                           ! 5648                               0,
32847 84B3                      0000            .word	0
32848 84B5                      0000            .word	0
32849                                           ! 5649                             0,
32850 84B7                      0000            .word	0
32851                                           ! 5650                                3200,
32852 84B9                      0C80            .word	$C80
32853                                           ! 5651                             0,
32854 84BB                        00            .byte	0
32855                                           ! 5652                             0,
32856 84BC                        00            .byte	0
32857                                           ! 5653                           5,
32858 84BD                        05            .byte	5
32859                                           ! 5654                                11,
32860 84BE                        0B            .byte	$B
32861                                           ! 5655                             6,
32862 84BF                        06            .byte	6
32863                                           ! 5656                                  5,
32864 84C0                        05            .byte	5
32865                                           ! 5657                            5,
32866 84C1                        05            .byte	5
32867                                           ! 5658                                 0,
32868 84C2                        00            .byte	0
32869                                           ! 5659                            0,
32870 84C3                        00            .byte	0
32871                                           ! 5660               
32872                                           ! 5660                   0,
32873 84C4                        00            .byte	0
32874                                           ! 5661                          0,
32875 84C5                      0000            .word	0
32876 84C7                      0000            .word	0
32877                                           ! 5662 } },
32878                                           ! 5663 { 0x011f,
32879 84C9                      011F            .word	$11F
32880                                           ! 5664 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32881 84CB                      009B            .word	$9B
32882                                           ! 5665                           0x01 | 0x02 | 0x04,
32883 84CD                        07            .byte	7
32884                                           ! 5666                           0,
32885 84CE                        00            .byte	0
32886                                           ! 5667                           64,
32887 84CF                      0040            .word	$40
32888                                           ! 5668                    64,
32889 84D1                      0040            .word	$40
32890                                           ! 5669                        0xA000,
32891 84D3                      A000            .word	$A000
32892                                           ! 5670                        0x0000,
32893 84D5                      0000            .word	0
32894                                           ! 5671                       0,
32895 84D7                      0000            .word	0
32896 84D9                      0000            .word	0
32897                                           ! 5672                             4800,
32898 84DB                      12C0            .word	$12C0
32899                                           ! 5673                        1600,
32900 84DD                      0640            .word	$640
32901                                           ! 5674                        1200,
32902 84DF                      04B0            .word	$4B0
32903                                           ! 5675                      8,
32904 84E1                        08            .byte	8
32905                                           ! 5676                      16,
32906 84E2                        10            .byte	$10
32907                                           ! 5677                           1,
32908 84E3                        01            .byte	1
32909                                           ! 5678                         24,
32910 84E4                        18            .byte	$18
32911                                           ! 5679                          88,
32912 84E5                        58            .byte	$58
32913                                           ! 5680                        0x06,
32914 84E6                        06            .byte	6
32915                                           ! 5681                     0,
32916 84E7                        00            .byte	0
32917                                           ! 5682                               1,
32918 84E8                        01            .byte	1
32919                                           ! 5683                          0,
32920 84E9                        00            .byte	0
32921                                           ! 5684                        8,
32922 84EA                        08            .byte	8
32923                                           ! 5685                             16,
32924 84EB                        10            .byte	$10
32925                                           ! 5686                          8,
32926 84EC                        08            .byte	8
32927                                           ! 5687                               8,
32928 84ED                        08            .byte	8
32929                                           ! 5688                         8,
32930 84EE                        08            .byte	8
32931                                           ! 5689                              0,
32932 84EF                        00            .byte	0
32933                                           ! 5690                         0,
32934 84F0                        00            .byte	0
32935                                           ! 5691                              0,
32936 84F1                        00            .byte	0
32937                                           ! 5692                                0,
32938 84F2                        00            .byte	0
32939                                           ! 5693                        0xE0000000,
32940 84F3                      0000            .word	0
32941 84F5                      E000            .word	$E000
32942                                           ! 5694                               0,
32943 84F7                      0000            .word	0
32944 84F9                      0000            .word	0
32945                                           ! 5695                             0,
32946 84FB                      0000            .word	0
32947                                           ! 5696                                4800,
32948 84FD                      12C0            .word	$12C0
32949                                           ! 5697                             0,
32950 84FF                        00            .byte	0
32951                                           ! 5698                             0,
32952 8500                        00            .byte	0
32953                                           ! 5699                           8,
32954 8501                        08            .byte	8
32955                                           ! 5700                                16,
32956 8502                        10            .byte	$10
32957                                           ! 5701                             8,
32958 8503                        08            .byte	8
32959                                           ! 5702                                  8,
32960 8504                        08            .byte	8
32961                                           ! 5703                            8,
32962 8505                        08            .byte	8
32963                                           ! 5704                                 0,
32964 8506                        00            .byte	0
32965                                           ! 5705                            0,
32966 8507                        00            .byte	0
32967                                           ! 5706                                 0,
32968 8508                        00            .byte	0
32969                                           ! 5707                          0,
32970 8509                      0000            .word	0
32971 850B                      0000            .word	0
32972                                           ! 5708 } },
32973                                           ! 5709 { 0x0140,
32974 850D                      0140            .word	$140
32975                                           ! 5710 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32976 850F                      009B            .word	$9B
32977                                           ! 5711                           0x01 | 0x02 | 0x04,
32978 8511                        07            .byte	7
32979                                           ! 5712                           0,
32980 8512                        00            .byte	0
32981                                           ! 5713                           64,
32982 8513                      0040            .word	$40
32983                                           ! 5714                    64,
32984 8515                      0040            .word	$40
32985                                           ! 5715                        0xA000,
32986 8517                      A000            .word	$A000
32987                                           ! 5716                        0x0000,
32988 8519                      0000            .word	0
32989                                           ! 5717                       0,
32990 851B                      0000            .word	0
32991 851D                      0000            .word	0
32992                                           ! 5718                             1280,
32993 851F                      0500            .word	$500
32994                                           ! 5719                        320,
32995 8521                      0140            .word	$140
32996                                           ! 5720                        200,
32997 8523                      00C8            .word	$C8
32998                                           ! 5721                      8,
32999 8525                        08            .byte	8
33000                                           ! 5722                      16,
33001 8526                        10            .byte	$10
33002                                           ! 5723                           1,
33003 8527                        01            .byte	1
33004                                           ! 5724                         32,
33005 8528                        20            .byte	$20
33006                                           ! 5725                          4,
33007 8529                        04            .byte	4
33008                                           ! 5726                        0x06,
33009 852A                        06            .byte	6
33010                                           ! 5727                     0,
33011 852B                        00            .byte	0
33012                                           ! 5728                               64,
33013 852C                        40            .byte	$40
33014                                           ! 5729                          0,
33015 852D                        00            .byte	0
33016                                           ! 5730            
33017                                           ! 5730             8,
33018 852E                        08            .byte	8
33019                                           ! 5731                             16,
33020 852F                        10            .byte	$10
33021                                           ! 5732                          8,
33022 8530                        08            .byte	8
33023                                           ! 5733                               8,
33024 8531                        08            .byte	8
33025                                           ! 5734                         8,
33026 8532                        08            .byte	8
33027                                           ! 5735                              0,
33028 8533                        00            .byte	0
33029                                           ! 5736                         8,
33030 8534                        08            .byte	8
33031                                           ! 5737                              24,
33032 8535                        18            .byte	$18
33033                                           ! 5738                                0x02,
33034 8536                        02            .byte	2
33035                                           ! 5739                        0xE0000000,
33036 8537                      0000            .word	0
33037 8539                      E000            .word	$E000
33038                                           ! 5740                               0,
33039 853B                      0000            .word	0
33040 853D                      0000            .word	0
33041                                           ! 5741                             0,
33042 853F                      0000            .word	0
33043                                           ! 5742                                1280,
33044 8541                      0500            .word	$500
33045                                           ! 5743                             0,
33046 8543                        00            .byte	0
33047                                           ! 5744                             0,
33048 8544                        00            .byte	0
33049                                           ! 5745                           8,
33050 8545                        08            .byte	8
33051                                           ! 5746                                16,
33052 8546                        10            .byte	$10
33053                                           ! 5747                             8,
33054 8547                        08            .byte	8
33055                                           ! 5748                                  8,
33056 8548                        08            .byte	8
33057                                           ! 5749                            8,
33058 8549                        08            .byte	8
33059                                           ! 5750                                 0,
33060 854A                        00            .byte	0
33061                                           ! 5751                            8,
33062 854B                        08            .byte	8
33063                                           ! 5752                                 24,
33064 854C                        18            .byte	$18
33065                                           ! 5753                          0,
33066 854D                      0000            .word	0
33067 854F                      0000            .word	0
33068                                           ! 5754 } },
33069                                           ! 5755 { 0x0141,
33070 8551                      0141            .word	$141
33071                                           ! 5756 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33072 8553                      009B            .word	$9B
33073                                           ! 5757                           0x01 | 0x02 | 0x04,
33074 8555                        07            .byte	7
33075                                           ! 5758                           0,
33076 8556                        00            .byte	0
33077                                           ! 5759                           64,
33078 8557                      0040            .word	$40
33079                                           ! 5760                    64,
33080 8559                      0040            .word	$40
33081                                           ! 5761                        0xA000,
33082 855B                      A000            .word	$A000
33083                                           ! 5762                        0x0000,
33084 855D                      0000            .word	0
33085                                           ! 5763                       0,
33086 855F                      0000            .word	0
33087 8561                      0000            .word	0
33088                                           ! 5764                             2560,
33089 8563                      0A00            .word	$A00
33090                                           ! 5765                        640,
33091 8565                      0280            .word	$280
33092                                           ! 5766                        400,
33093 8567                      0190            .word	$190
33094                                           ! 5767                      8,
33095 8569                        08            .byte	8
33096                                           ! 5768                      16,
33097 856A                        10            .byte	$10
33098                                           ! 5769                           1,
33099 856B                        01            .byte	1
33100                                           ! 5770                         32,
33101 856C                        20            .byte	$20
33102                                           ! 5771                          16,
33103 856D                        10            .byte	$10
33104                                           ! 5772                        0x06,
33105 856E                        06            .byte	6
33106                                           ! 5773                     0,
33107 856F                        00            .byte	0
33108                                           ! 5774                               15,
33109 8570                        0F            .byte	$F
33110                                           ! 5775                          0,
33111 8571                        00            .byte	0
33112                                           ! 5776                        8,
33113 8572                        08            .byte	8
33114                                           ! 5777                             16,
33115 8573                        10            .byte	$10
33116                                           ! 5778                          8,
33117 8574                        08            .byte	8
33118                                           ! 5779                               8,
33119 8575                        08            .byte	8
33120                                           ! 5780                         8,
33121 8576                        08            .byte	8
33122                                           ! 5781                              0,
33123 8577                        00            .byte	0
33124                                           ! 5782                         8,
33125 8578                        08            .byte	8
33126                                           ! 5783                              24,
33127 8579                        18            .byte	$18
33128                                           ! 5784                                0x02,
33129 857A                        02            .byte	2
33130                                           ! 5785                        0xE0000000,
33131 857B                      0000            .word	0
33132 857D                      E000            .word	$E000
33133                                           ! 5786                               0,
33134 857F                      0000            .word	0
33135 8581                      0000            .word	0
33136                                           ! 5787                             0,
33137 8583                      0000            .word	0
33138                                           ! 5788                                2560,
33139 8585                      0A00            .word	$A00
33140                                           ! 5789                             0,
33141 8587                        00            .byte	0
33142                                           ! 5790                             0,
33143 8588                        00            .byte	0
33144                                           ! 5791                           8,
33145 8589                        08            .byte	8
33146                                           ! 5792                                16,
33147 858A                        10            .byte	$10
33148                                           ! 5793                             8,
33149 858B                        08            .byte	8
33150                                           ! 5794                                  8,
33151 858C                        08            .byte	8
33152                                           ! 5795                            8,
33153 858D                        08            .byte	8
33154                                           ! 5796                                 0,
33155 858E                        00            .byte	0
33156                                           ! 5797             
33157                                           ! 5797                8,
33158 858F                        08            .byte	8
33159                                           ! 5798                                 24,
33160 8590                        18            .byte	$18
33161                                           ! 5799                          0,
33162 8591                      0000            .word	0
33163 8593                      0000            .word	0
33164                                           ! 5800 } },
33165                                           ! 5801 { 0x0142,
33166 8595                      0142            .word	$142
33167                                           ! 5802 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33168 8597                      009B            .word	$9B
33169                                           ! 5803                           0x01 | 0x02 | 0x04,
33170 8599                        07            .byte	7
33171                                           ! 5804                           0,
33172 859A                        00            .byte	0
33173                                           ! 5805                           64,
33174 859B                      0040            .word	$40
33175                                           ! 5806                    64,
33176 859D                      0040            .word	$40
33177                                           ! 5807                        0xA000,
33178 859F                      A000            .word	$A000
33179                                           ! 5808                        0x0000,
33180 85A1                      0000            .word	0
33181                                           ! 5809                       0,
33182 85A3                      0000            .word	0
33183 85A5                      0000            .word	0
33184                                           ! 5810                             2560,
33185 85A7                      0A00            .word	$A00
33186                                           ! 5811                        640,
33187 85A9                      0280            .word	$280
33188                                           ! 5812                        480,
33189 85AB                      01E0            .word	$1E0
33190                                           ! 5813                      8,
33191 85AD                        08            .byte	8
33192                                           ! 5814                      16,
33193 85AE                        10            .byte	$10
33194                                           ! 5815                           1,
33195 85AF                        01            .byte	1
33196                                           ! 5816                         32,
33197 85B0                        20            .byte	$20
33198                                           ! 5817                          19,
33199 85B1                        13            .byte	$13
33200                                           ! 5818                        0x06,
33201 85B2                        06            .byte	6
33202                                           ! 5819                     0,
33203 85B3                        00            .byte	0
33204                                           ! 5820                               12,
33205 85B4                        0C            .byte	$C
33206                                           ! 5821                          0,
33207 85B5                        00            .byte	0
33208                                           ! 5822                        8,
33209 85B6                        08            .byte	8
33210                                           ! 5823                             16,
33211 85B7                        10            .byte	$10
33212                                           ! 5824                          8,
33213 85B8                        08            .byte	8
33214                                           ! 5825                               8,
33215 85B9                        08            .byte	8
33216                                           ! 5826                         8,
33217 85BA                        08            .byte	8
33218                                           ! 5827                              0,
33219 85BB                        00            .byte	0
33220                                           ! 5828                         8,
33221 85BC                        08            .byte	8
33222                                           ! 5829                              24,
33223 85BD                        18            .byte	$18
33224                                           ! 5830                                0x02,
33225 85BE                        02            .byte	2
33226                                           ! 5831                        0xE0000000,
33227 85BF                      0000            .word	0
33228 85C1                      E000            .word	$E000
33229                                           ! 5832                               0,
33230 85C3                      0000            .word	0
33231 85C5                      0000            .word	0
33232                                           ! 5833                             0,
33233 85C7                      0000            .word	0
33234                                           ! 5834                                2560,
33235 85C9                      0A00            .word	$A00
33236                                           ! 5835                             0,
33237 85CB                        00            .byte	0
33238                                           ! 5836                             0,
33239 85CC                        00            .byte	0
33240                                           ! 5837                           8,
33241 85CD                        08            .byte	8
33242                                           ! 5838                                16,
33243 85CE                        10            .byte	$10
33244                                           ! 5839                             8,
33245 85CF                        08            .byte	8
33246                                           ! 5840                                  8,
33247 85D0                        08            .byte	8
33248                                           ! 5841                            8,
33249 85D1                        08            .byte	8
33250                                           ! 5842                                 0,
33251 85D2                        00            .byte	0
33252                                           ! 5843                            8,
33253 85D3                        08            .byte	8
33254                                           ! 5844                                 24,
33255 85D4                        18            .byte	$18
33256                                           ! 5845                          0,
33257 85D5                      0000            .word	0
33258 85D7                      0000            .word	0
33259                                           ! 5846 } },
33260                                           ! 5847 { 0x0143,
33261 85D9                      0143            .word	$143
33262                                           ! 5848 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33263 85DB                      009B            .word	$9B
33264                                           ! 5849                           0x01 | 0x02 | 0x04,
33265 85DD                        07            .byte	7
33266                                           ! 5850                           0,
33267 85DE                        00            .byte	0
33268                                           ! 5851                           64,
33269 85DF                      0040            .word	$40
33270                                           ! 5852                    64,
33271 85E1                      0040            .word	$40
33272                                           ! 5853                        0xA000,
33273 85E3                      A000            .word	$A000
33274                                           ! 5854                        0x0000,
33275 85E5                      0000            .word	0
33276                                           ! 5855                       0,
33277 85E7                      0000            .word	0
33278 85E9                      0000            .word	0
33279                                           ! 5856                             3200,
33280 85EB                      0C80            .word	$C80
33281                                           ! 5857                        800,
33282 85ED                      0320            .word	$320
33283                                           ! 5858                        600,
33284 85EF                      0258            .word	$258
33285                                           ! 5859                      8,
33286 85F1                        08            .byte	8
33287                                           ! 5860                      16,
33288 85F2                        10            .byte	$10
33289                                           ! 5861                           1,
33290 85F3                        01            .byte	1
33291                                           ! 5862                         32,
33292 85F4                        20            .byte	$20
33293                                           ! 5863                          30,
33294 85F5                        1E            .byte	$1E
33295                                           ! 5864                        0x06,
33296 85F6                        06            .byte	6
33297                                           ! 5865                     0,
33298 85F7                        00            .byte	0
33299                                           ! 5866                               7,
33300 85F8                        07            .byte	7
33301                                           ! 5867   
33302                                           ! 5867                        0,
33303 85F9                        00            .byte	0
33304                                           ! 5868                        8,
33305 85FA                        08            .byte	8
33306                                           ! 5869                             16,
33307 85FB                        10            .byte	$10
33308                                           ! 5870                          8,
33309 85FC                        08            .byte	8
33310                                           ! 5871                               8,
33311 85FD                        08            .byte	8
33312                                           ! 5872                         8,
33313 85FE                        08            .byte	8
33314                                           ! 5873                              0,
33315 85FF                        00            .byte	0
33316                                           ! 5874                         8,
33317 8600                        08            .byte	8
33318                                           ! 5875                              24,
33319 8601                        18            .byte	$18
33320                                           ! 5876                                0x02,
33321 8602                        02            .byte	2
33322                                           ! 5877                        0xE0000000,
33323 8603                      0000            .word	0
33324 8605                      E000            .word	$E000
33325                                           ! 5878                               0,
33326 8607                      0000            .word	0
33327 8609                      0000            .word	0
33328                                           ! 5879                             0,
33329 860B                      0000            .word	0
33330                                           ! 5880                                3200,
33331 860D                      0C80            .word	$C80
33332                                           ! 5881                             0,
33333 860F                        00            .byte	0
33334                                           ! 5882                             0,
33335 8610                        00            .byte	0
33336                                           ! 5883                           8,
33337 8611                        08            .byte	8
33338                                           ! 5884                                16,
33339 8612                        10            .byte	$10
33340                                           ! 5885                             8,
33341 8613                        08            .byte	8
33342                                           ! 5886                                  8,
33343 8614                        08            .byte	8
33344                                           ! 5887                            8,
33345 8615                        08            .byte	8
33346                                           ! 5888                                 0,
33347 8616                        00            .byte	0
33348                                           ! 5889                            8,
33349 8617                        08            .byte	8
33350                                           ! 5890                                 24,
33351 8618                        18            .byte	$18
33352                                           ! 5891                          0,
33353 8619                      0000            .word	0
33354 861B                      0000            .word	0
33355                                           ! 5892 } },
33356                                           ! 5893 { 0x0144,
33357 861D                      0144            .word	$144
33358                                           ! 5894 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33359 861F                      009B            .word	$9B
33360                                           ! 5895                           0x01 | 0x02 | 0x04,
33361 8621                        07            .byte	7
33362                                           ! 5896                           0,
33363 8622                        00            .byte	0
33364                                           ! 5897                           64,
33365 8623                      0040            .word	$40
33366                                           ! 5898                    64,
33367 8625                      0040            .word	$40
33368                                           ! 5899                        0xA000,
33369 8627                      A000            .word	$A000
33370                                           ! 5900                        0x0000,
33371 8629                      0000            .word	0
33372                                           ! 5901                       0,
33373 862B                      0000            .word	0
33374 862D                      0000            .word	0
33375                                           ! 5902                             4096,
33376 862F                      1000            .word	$1000
33377                                           ! 5903                        1024,
33378 8631                      0400            .word	$400
33379                                           ! 5904                        768,
33380 8633                      0300            .word	$300
33381                                           ! 5905                      8,
33382 8635                        08            .byte	8
33383                                           ! 5906                      16,
33384 8636                        10            .byte	$10
33385                                           ! 5907                           1,
33386 8637                        01            .byte	1
33387                                           ! 5908                         32,
33388 8638                        20            .byte	$20
33389                                           ! 5909                          48,
33390 8639                        30            .byte	$30
33391                                           ! 5910                        0x06,
33392 863A                        06            .byte	6
33393                                           ! 5911                     0,
33394 863B                        00            .byte	0
33395                                           ! 5912                               4,
33396 863C                        04            .byte	4
33397                                           ! 5913                          0,
33398 863D                        00            .byte	0
33399                                           ! 5914                        8,
33400 863E                        08            .byte	8
33401                                           ! 5915                             16,
33402 863F                        10            .byte	$10
33403                                           ! 5916                          8,
33404 8640                        08            .byte	8
33405                                           ! 5917                               8,
33406 8641                        08            .byte	8
33407                                           ! 5918                         8,
33408 8642                        08            .byte	8
33409                                           ! 5919                              0,
33410 8643                        00            .byte	0
33411                                           ! 5920                         8,
33412 8644                        08            .byte	8
33413                                           ! 5921                              24,
33414 8645                        18            .byte	$18
33415                                           ! 5922                                0x02,
33416 8646                        02            .byte	2
33417                                           ! 5923                        0xE0000000,
33418 8647                      0000            .word	0
33419 8649                      E000            .word	$E000
33420                                           ! 5924                               0,
33421 864B                      0000            .word	0
33422 864D                      0000            .word	0
33423                                           ! 5925                             0,
33424 864F                      0000            .word	0
33425                                           ! 5926                                4096,
33426 8651                      1000            .word	$1000
33427                                           ! 5927                             0,
33428 8653                        00            .byte	0
33429                                           ! 5928                             0,
33430 8654                        00            .byte	0
33431                                           ! 5929                           8,
33432 8655                        08            .byte	8
33433                                           ! 5930                                16,
33434 8656                        10            .byte	$10
33435                                           ! 5931                             8,
33436 8657                        08            .byte	8
33437                                           ! 5932                                  8,
33438 8658                        08            .byte	8
33439                                           ! 5933                            8,
33440 8659                        08            .byte	8
33441                                           ! 5934           
33442                                           ! 5934                       0,
33443 865A                        00            .byte	0
33444                                           ! 5935                            8,
33445 865B                        08            .byte	8
33446                                           ! 5936                                 24,
33447 865C                        18            .byte	$18
33448                                           ! 5937                          0,
33449 865D                      0000            .word	0
33450 865F                      0000            .word	0
33451                                           ! 5938 } },
33452                                           ! 5939 { 0x0145,
33453 8661                      0145            .word	$145
33454                                           ! 5940 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33455 8663                      009B            .word	$9B
33456                                           ! 5941                           0x01 | 0x02 | 0x04,
33457 8665                        07            .byte	7
33458                                           ! 5942                           0,
33459 8666                        00            .byte	0
33460                                           ! 5943                           64,
33461 8667                      0040            .word	$40
33462                                           ! 5944                    64,
33463 8669                      0040            .word	$40
33464                                           ! 5945                        0xA000,
33465 866B                      A000            .word	$A000
33466                                           ! 5946                        0x0000,
33467 866D                      0000            .word	0
33468                                           ! 5947                       0,
33469 866F                      0000            .word	0
33470 8671                      0000            .word	0
33471                                           ! 5948                             5120,
33472 8673                      1400            .word	$1400
33473                                           ! 5949                        1280,
33474 8675                      0500            .word	$500
33475                                           ! 5950                        1024,
33476 8677                      0400            .word	$400
33477                                           ! 5951                      8,
33478 8679                        08            .byte	8
33479                                           ! 5952                      16,
33480 867A                        10            .byte	$10
33481                                           ! 5953                           1,
33482 867B                        01            .byte	1
33483                                           ! 5954                         32,
33484 867C                        20            .byte	$20
33485                                           ! 5955                          80,
33486 867D                        50            .byte	$50
33487                                           ! 5956                        0x06,
33488 867E                        06            .byte	6
33489                                           ! 5957                     0,
33490 867F                        00            .byte	0
33491                                           ! 5958                               2,
33492 8680                        02            .byte	2
33493                                           ! 5959                          0,
33494 8681                        00            .byte	0
33495                                           ! 5960                        8,
33496 8682                        08            .byte	8
33497                                           ! 5961                             16,
33498 8683                        10            .byte	$10
33499                                           ! 5962                          8,
33500 8684                        08            .byte	8
33501                                           ! 5963                               8,
33502 8685                        08            .byte	8
33503                                           ! 5964                         8,
33504 8686                        08            .byte	8
33505                                           ! 5965                              0,
33506 8687                        00            .byte	0
33507                                           ! 5966                         8,
33508 8688                        08            .byte	8
33509                                           ! 5967                              24,
33510 8689                        18            .byte	$18
33511                                           ! 5968                                0x02,
33512 868A                        02            .byte	2
33513                                           ! 5969                        0xE0000000,
33514 868B                      0000            .word	0
33515 868D                      E000            .word	$E000
33516                                           ! 5970                               0,
33517 868F                      0000            .word	0
33518 8691                      0000            .word	0
33519                                           ! 5971                             0,
33520 8693                      0000            .word	0
33521                                           ! 5972                                5120,
33522 8695                      1400            .word	$1400
33523                                           ! 5973                             0,
33524 8697                        00            .byte	0
33525                                           ! 5974                             0,
33526 8698                        00            .byte	0
33527                                           ! 5975                           8,
33528 8699                        08            .byte	8
33529                                           ! 5976                                16,
33530 869A                        10            .byte	$10
33531                                           ! 5977                             8,
33532 869B                        08            .byte	8
33533                                           ! 5978                                  8,
33534 869C                        08            .byte	8
33535                                           ! 5979                            8,
33536 869D                        08            .byte	8
33537                                           ! 5980                                 0,
33538 869E                        00            .byte	0
33539                                           ! 5981                            8,
33540 869F                        08            .byte	8
33541                                           ! 5982                                 24,
33542 86A0                        18            .byte	$18
33543                                           ! 5983                          0,
33544 86A1                      0000            .word	0
33545 86A3                      0000            .word	0
33546                                           ! 5984 } },
33547                                           ! 5985 { 0x0146,
33548 86A5                      0146            .word	$146
33549                                           ! 5986 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33550 86A7                      009B            .word	$9B
33551                                           ! 5987                           0x01 | 0x02 | 0x04,
33552 86A9                        07            .byte	7
33553                                           ! 5988                           0,
33554 86AA                        00            .byte	0
33555                                           ! 5989                           64,
33556 86AB                      0040            .word	$40
33557                                           ! 5990                    64,
33558 86AD                      0040            .word	$40
33559                                           ! 5991                        0xA000,
33560 86AF                      A000            .word	$A000
33561                                           ! 5992                        0x0000,
33562 86B1                      0000            .word	0
33563                                           ! 5993                       0,
33564 86B3                      0000            .word	0
33565 86B5                      0000            .word	0
33566                                           ! 5994                             320,
33567 86B7                      0140            .word	$140
33568                                           ! 5995                        320,
33569 86B9                      0140            .word	$140
33570                                           ! 5996                        200,
33571 86BB                      00C8            .word	$C8
33572                                           ! 5997                      8,
33573 86BD                        08            .byte	8
33574                                           ! 5998                      16,
33575 86BE                        10            .byte	$10
33576                                           ! 5999                           1,
33577 86BF                        01            .byte	1
33578                                           ! 6000                         8,
33579 86C0                        08            .byte	8
33580                                           ! 6001                          1,
33581 86C1                        01            .byte	1
33582                                           ! 6002                        0x04,
33583 86C2                        04            .byte	4
33584                                           ! 6003                     0,
33585 86C3                        00            .byte	0
33586                                           ! 6004 
33587                                           ! 6004                               261,
33588 86C4                        05            .byte	5
33589                                           ! 6005                          0,
33590 86C5                        00            .byte	0
33591                                           ! 6006                        0,
33592 86C6                        00            .byte	0
33593                                           ! 6007                             0,
33594 86C7                        00            .byte	0
33595                                           ! 6008                          0,
33596 86C8                        00            .byte	0
33597                                           ! 6009                               0,
33598 86C9                        00            .byte	0
33599                                           ! 6010                         0,
33600 86CA                        00            .byte	0
33601                                           ! 6011                              0,
33602 86CB                        00            .byte	0
33603                                           ! 6012                         0,
33604 86CC                        00            .byte	0
33605                                           ! 6013                              0,
33606 86CD                        00            .byte	0
33607                                           ! 6014                                0,
33608 86CE                        00            .byte	0
33609                                           ! 6015                        0xE0000000,
33610 86CF                      0000            .word	0
33611 86D1                      E000            .word	$E000
33612                                           ! 6016                               0,
33613 86D3                      0000            .word	0
33614 86D5                      0000            .word	0
33615                                           ! 6017                             0,
33616 86D7                      0000            .word	0
33617                                           ! 6018                                320,
33618 86D9                      0140            .word	$140
33619                                           ! 6019                             0,
33620 86DB                        00            .byte	0
33621                                           ! 6020                             0,
33622 86DC                        00            .byte	0
33623                                           ! 6021                           0,
33624 86DD                        00            .byte	0
33625                                           ! 6022                                0,
33626 86DE                        00            .byte	0
33627                                           ! 6023                             0,
33628 86DF                        00            .byte	0
33629                                           ! 6024                                  0,
33630 86E0                        00            .byte	0
33631                                           ! 6025                            0,
33632 86E1                        00            .byte	0
33633                                           ! 6026                                 0,
33634 86E2                        00            .byte	0
33635                                           ! 6027                            0,
33636 86E3                        00            .byte	0
33637                                           ! 6028                                 0,
33638 86E4                        00            .byte	0
33639                                           ! 6029                          0,
33640 86E5                      0000            .word	0
33641 86E7                      0000            .word	0
33642                                           ! 6030 } },
33643                                           ! 6031 { 0x0147,
33644 86E9                      0147            .word	$147
33645                                           ! 6032 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33646 86EB                      009B            .word	$9B
33647                                           ! 6033                           0x01 | 0x02 | 0x04,
33648 86ED                        07            .byte	7
33649                                           ! 6034                           0,
33650 86EE                        00            .byte	0
33651                                           ! 6035                           64,
33652 86EF                      0040            .word	$40
33653                                           ! 6036                    64,
33654 86F1                      0040            .word	$40
33655                                           ! 6037                        0xA000,
33656 86F3                      A000            .word	$A000
33657                                           ! 6038                        0x0000,
33658 86F5                      0000            .word	0
33659                                           ! 6039                       0,
33660 86F7                      0000            .word	0
33661 86F9                      0000            .word	0
33662                                           ! 6040                             6400,
33663 86FB                      1900            .word	$1900
33664                                           ! 6041                        1600,
33665 86FD                      0640            .word	$640
33666                                           ! 6042                        1200,
33667 86FF                      04B0            .word	$4B0
33668                                           ! 6043                      8,
33669 8701                        08            .byte	8
33670                                           ! 6044                      16,
33671 8702                        10            .byte	$10
33672                                           ! 6045                           1,
33673 8703                        01            .byte	1
33674                                           ! 6046                         32,
33675 8704                        20            .byte	$20
33676                                           ! 6047                          118,
33677 8705                        76            .byte	$76
33678                                           ! 6048                        0x06,
33679 8706                        06            .byte	6
33680                                           ! 6049                     0,
33681 8707                        00            .byte	0
33682                                           ! 6050                               1,
33683 8708                        01            .byte	1
33684                                           ! 6051                          0,
33685 8709                        00            .byte	0
33686                                           ! 6052                        8,
33687 870A                        08            .byte	8
33688                                           ! 6053                             16,
33689 870B                        10            .byte	$10
33690                                           ! 6054                          8,
33691 870C                        08            .byte	8
33692                                           ! 6055                               8,
33693 870D                        08            .byte	8
33694                                           ! 6056                         8,
33695 870E                        08            .byte	8
33696                                           ! 6057                              0,
33697 870F                        00            .byte	0
33698                                           ! 6058                         8,
33699 8710                        08            .byte	8
33700                                           ! 6059                              24,
33701 8711                        18            .byte	$18
33702                                           ! 6060                                0x02,
33703 8712                        02            .byte	2
33704                                           ! 6061                        0xE0000000,
33705 8713                      0000            .word	0
33706 8715                      E000            .word	$E000
33707                                           ! 6062                               0,
33708 8717                      0000            .word	0
33709 8719                      0000            .word	0
33710                                           ! 6063                             0,
33711 871B                      0000            .word	0
33712                                           ! 6064                                6400,
33713 871D                      1900            .word	$1900
33714                                           ! 6065                             0,
33715 871F                        00            .byte	0
33716                                           ! 6066                             0,
33717 8720                        00            .byte	0
33718                                           ! 6067                           8,
33719 8721                        08            .byte	8
33720                                           ! 6068                                16,
33721 8722                        10            .byte	$10
33722                                           ! 6069                             8,
33723 8723                        08            .byte	8
33724                                           ! 6070                                  8,
33725 8724                        08            .byte	8
33726                                           ! 6071          
33727                                           ! 6071                   8,
33728 8725                        08            .byte	8
33729                                           ! 6072                                 0,
33730 8726                        00            .byte	0
33731                                           ! 6073                            8,
33732 8727                        08            .byte	8
33733                                           ! 6074                                 24,
33734 8728                        18            .byte	$18
33735                                           ! 6075                          0,
33736 8729                      0000            .word	0
33737 872B                      0000            .word	0
33738                                           ! 6076 } },
33739                                           ! 6077 { 0x0148,
33740 872D                      0148            .word	$148
33741                                           ! 6078 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33742 872F                      009B            .word	$9B
33743                                           ! 6079                           0x01 | 0x02 | 0x04,
33744 8731                        07            .byte	7
33745                                           ! 6080                           0,
33746 8732                        00            .byte	0
33747                                           ! 6081                           64,
33748 8733                      0040            .word	$40
33749                                           ! 6082                    64,
33750 8735                      0040            .word	$40
33751                                           ! 6083                        0xA000,
33752 8737                      A000            .word	$A000
33753                                           ! 6084                        0x0000,
33754 8739                      0000            .word	0
33755                                           ! 6085                       0,
33756 873B                      0000            .word	0
33757 873D                      0000            .word	0
33758                                           ! 6086                             1152,
33759 873F                      0480            .word	$480
33760                                           ! 6087                        1152,
33761 8741                      0480            .word	$480
33762                                           ! 6088                        864,
33763 8743                      0360            .word	$360
33764                                           ! 6089                      8,
33765 8745                        08            .byte	8
33766                                           ! 6090                      16,
33767 8746                        10            .byte	$10
33768                                           ! 6091                           1,
33769 8747                        01            .byte	1
33770                                           ! 6092                         8,
33771 8748                        08            .byte	8
33772                                           ! 6093                          16,
33773 8749                        10            .byte	$10
33774                                           ! 6094                        0x04,
33775 874A                        04            .byte	4
33776                                           ! 6095                     0,
33777 874B                        00            .byte	0
33778                                           ! 6096                               15,
33779 874C                        0F            .byte	$F
33780                                           ! 6097                          0,
33781 874D                        00            .byte	0
33782                                           ! 6098                        0,
33783 874E                        00            .byte	0
33784                                           ! 6099                             0,
33785 874F                        00            .byte	0
33786                                           ! 6100                          0,
33787 8750                        00            .byte	0
33788                                           ! 6101                               0,
33789 8751                        00            .byte	0
33790                                           ! 6102                         0,
33791 8752                        00            .byte	0
33792                                           ! 6103                              0,
33793 8753                        00            .byte	0
33794                                           ! 6104                         0,
33795 8754                        00            .byte	0
33796                                           ! 6105                              0,
33797 8755                        00            .byte	0
33798                                           ! 6106                                0,
33799 8756                        00            .byte	0
33800                                           ! 6107                        0xE0000000,
33801 8757                      0000            .word	0
33802 8759                      E000            .word	$E000
33803                                           ! 6108                               0,
33804 875B                      0000            .word	0
33805 875D                      0000            .word	0
33806                                           ! 6109                             0,
33807 875F                      0000            .word	0
33808                                           ! 6110                                1152,
33809 8761                      0480            .word	$480
33810                                           ! 6111                             0,
33811 8763                        00            .byte	0
33812                                           ! 6112                             0,
33813 8764                        00            .byte	0
33814                                           ! 6113                           0,
33815 8765                        00            .byte	0
33816                                           ! 6114                                0,
33817 8766                        00            .byte	0
33818                                           ! 6115                             0,
33819 8767                        00            .byte	0
33820                                           ! 6116                                  0,
33821 8768                        00            .byte	0
33822                                           ! 6117                            0,
33823 8769                        00            .byte	0
33824                                           ! 6118                                 0,
33825 876A                        00            .byte	0
33826                                           ! 6119                            0,
33827 876B                        00            .byte	0
33828                                           ! 6120                                 0,
33829 876C                        00            .byte	0
33830                                           ! 6121                          0,
33831 876D                      0000            .word	0
33832 876F                      0000            .word	0
33833                                           ! 6122 } },
33834                                           ! 6123 { 0x0149,
33835 8771                      0149            .word	$149
33836                                           ! 6124 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33837 8773                      009B            .word	$9B
33838                                           ! 6125                           0x01 | 0x02 | 0x04,
33839 8775                        07            .byte	7
33840                                           ! 6126                           0,
33841 8776                        00            .byte	0
33842                                           ! 6127                           64,
33843 8777                      0040            .word	$40
33844                                           ! 6128                    64,
33845 8779                      0040            .word	$40
33846                                           ! 6129                        0xA000,
33847 877B                      A000            .word	$A000
33848                                           ! 6130                        0x0000,
33849 877D                      0000            .word	0
33850                                           ! 6131                       0,
33851 877F                      0000            .word	0
33852 8781                      0000            .word	0
33853                                           ! 6132                             2304,
33854 8783                      0900            .word	$900
33855                                           ! 6133                        1152,
33856 8785                      0480            .word	$480
33857                                           ! 6134                        864,
33858 8787                      0360            .word	$360
33859                                           ! 6135                      8,
33860 8789                        08            .byte	8
33861                                           ! 6136                      16,
33862 878A                        10            .byte	$10
33863                                           ! 6137                           1,
33864 878B                        01            .byte	1
33865                                           ! 6138                         15,
33866 878C                        0F            .byte	$F
33867                                           ! 6139                          31,
33868 878D                        1F            .byte	$1F
33869                                           ! 6140                        0x
33870                                           ! 6140 06,
33871 878E                        06            .byte	6
33872                                           ! 6141                     0,
33873 878F                        00            .byte	0
33874                                           ! 6142                               7,
33875 8790                        07            .byte	7
33876                                           ! 6143                          0,
33877 8791                        00            .byte	0
33878                                           ! 6144                        5,
33879 8792                        05            .byte	5
33880                                           ! 6145                             10,
33881 8793                        0A            .byte	$A
33882                                           ! 6146                          5,
33883 8794                        05            .byte	5
33884                                           ! 6147                               5,
33885 8795                        05            .byte	5
33886                                           ! 6148                         5,
33887 8796                        05            .byte	5
33888                                           ! 6149                              0,
33889 8797                        00            .byte	0
33890                                           ! 6150                         1,
33891 8798                        01            .byte	1
33892                                           ! 6151                              15,
33893 8799                        0F            .byte	$F
33894                                           ! 6152                                0,
33895 879A                        00            .byte	0
33896                                           ! 6153                        0xE0000000,
33897 879B                      0000            .word	0
33898 879D                      E000            .word	$E000
33899                                           ! 6154                               0,
33900 879F                      0000            .word	0
33901 87A1                      0000            .word	0
33902                                           ! 6155                             0,
33903 87A3                      0000            .word	0
33904                                           ! 6156                                2304,
33905 87A5                      0900            .word	$900
33906                                           ! 6157                             0,
33907 87A7                        00            .byte	0
33908                                           ! 6158                             0,
33909 87A8                        00            .byte	0
33910                                           ! 6159                           5,
33911 87A9                        05            .byte	5
33912                                           ! 6160                                10,
33913 87AA                        0A            .byte	$A
33914                                           ! 6161                             5,
33915 87AB                        05            .byte	5
33916                                           ! 6162                                  5,
33917 87AC                        05            .byte	5
33918                                           ! 6163                            5,
33919 87AD                        05            .byte	5
33920                                           ! 6164                                 0,
33921 87AE                        00            .byte	0
33922                                           ! 6165                            1,
33923 87AF                        01            .byte	1
33924                                           ! 6166                                 15,
33925 87B0                        0F            .byte	$F
33926                                           ! 6167                          0,
33927 87B1                      0000            .word	0
33928 87B3                      0000            .word	0
33929                                           ! 6168 } },
33930                                           ! 6169 { 0x014a,
33931 87B5                      014A            .word	$14A
33932                                           ! 6170 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33933 87B7                      009B            .word	$9B
33934                                           ! 6171                           0x01 | 0x02 | 0x04,
33935 87B9                        07            .byte	7
33936                                           ! 6172                           0,
33937 87BA                        00            .byte	0
33938                                           ! 6173                           64,
33939 87BB                      0040            .word	$40
33940                                           ! 6174                    64,
33941 87BD                      0040            .word	$40
33942                                           ! 6175                        0xA000,
33943 87BF                      A000            .word	$A000
33944                                           ! 6176                        0x0000,
33945 87C1                      0000            .word	0
33946                                           ! 6177                       0,
33947 87C3                      0000            .word	0
33948 87C5                      0000            .word	0
33949                                           ! 6178                             2304,
33950 87C7                      0900            .word	$900
33951                                           ! 6179                        1152,
33952 87C9                      0480            .word	$480
33953                                           ! 6180                        864,
33954 87CB                      0360            .word	$360
33955                                           ! 6181                      8,
33956 87CD                        08            .byte	8
33957                                           ! 6182                      16,
33958 87CE                        10            .byte	$10
33959                                           ! 6183                           1,
33960 87CF                        01            .byte	1
33961                                           ! 6184                         16,
33962 87D0                        10            .byte	$10
33963                                           ! 6185                          31,
33964 87D1                        1F            .byte	$1F
33965                                           ! 6186                        0x06,
33966 87D2                        06            .byte	6
33967                                           ! 6187                     0,
33968 87D3                        00            .byte	0
33969                                           ! 6188                               7,
33970 87D4                        07            .byte	7
33971                                           ! 6189                          0,
33972 87D5                        00            .byte	0
33973                                           ! 6190                        5,
33974 87D6                        05            .byte	5
33975                                           ! 6191                             11,
33976 87D7                        0B            .byte	$B
33977                                           ! 6192                          6,
33978 87D8                        06            .byte	6
33979                                           ! 6193                               5,
33980 87D9                        05            .byte	5
33981                                           ! 6194                         5,
33982 87DA                        05            .byte	5
33983                                           ! 6195                              0,
33984 87DB                        00            .byte	0
33985                                           ! 6196                         0,
33986 87DC                        00            .byte	0
33987                                           ! 6197                              0,
33988 87DD                        00            .byte	0
33989                                           ! 6198                                0,
33990 87DE                        00            .byte	0
33991                                           ! 6199                        0xE0000000,
33992 87DF                      0000            .word	0
33993 87E1                      E000            .word	$E000
33994                                           ! 6200                               0,
33995 87E3                      0000            .word	0
33996 87E5                      0000            .word	0
33997                                           ! 6201                             0,
33998 87E7                      0000            .word	0
33999                                           ! 6202                                2304,
34000 87E9                      0900            .word	$900
34001                                           ! 6203                             0,
34002 87EB                        00            .byte	0
34003                                           ! 6204                             0,
34004 87EC                        00            .byte	0
34005                                           ! 6205                           5,
34006 87ED                        05            .byte	5
34007                                           ! 6206                                11,
34008 87EE                        0B            .byte	$B
34009                                           ! 6207                             6,
34010 87EF                        06            .byte	6
34011                                           ! 6208                      
34012                                           ! 6208             5,
34013 87F0                        05            .byte	5
34014                                           ! 6209                            5,
34015 87F1                        05            .byte	5
34016                                           ! 6210                                 0,
34017 87F2                        00            .byte	0
34018                                           ! 6211                            0,
34019 87F3                        00            .byte	0
34020                                           ! 6212                                 0,
34021 87F4                        00            .byte	0
34022                                           ! 6213                          0,
34023 87F5                      0000            .word	0
34024 87F7                      0000            .word	0
34025                                           ! 6214 } },
34026                                           ! 6215 { 0x014b,
34027 87F9                      014B            .word	$14B
34028                                           ! 6216 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34029 87FB                      009B            .word	$9B
34030                                           ! 6217                           0x01 | 0x02 | 0x04,
34031 87FD                        07            .byte	7
34032                                           ! 6218                           0,
34033 87FE                        00            .byte	0
34034                                           ! 6219                           64,
34035 87FF                      0040            .word	$40
34036                                           ! 6220                    64,
34037 8801                      0040            .word	$40
34038                                           ! 6221                        0xA000,
34039 8803                      A000            .word	$A000
34040                                           ! 6222                        0x0000,
34041 8805                      0000            .word	0
34042                                           ! 6223                       0,
34043 8807                      0000            .word	0
34044 8809                      0000            .word	0
34045                                           ! 6224                             3456,
34046 880B                      0D80            .word	$D80
34047                                           ! 6225                        1152,
34048 880D                      0480            .word	$480
34049                                           ! 6226                        864,
34050 880F                      0360            .word	$360
34051                                           ! 6227                      8,
34052 8811                        08            .byte	8
34053                                           ! 6228                      16,
34054 8812                        10            .byte	$10
34055                                           ! 6229                           1,
34056 8813                        01            .byte	1
34057                                           ! 6230                         24,
34058 8814                        18            .byte	$18
34059                                           ! 6231                          46,
34060 8815                        2E            .byte	$2E
34061                                           ! 6232                        0x06,
34062 8816                        06            .byte	6
34063                                           ! 6233                     0,
34064 8817                        00            .byte	0
34065                                           ! 6234                               4,
34066 8818                        04            .byte	4
34067                                           ! 6235                          0,
34068 8819                        00            .byte	0
34069                                           ! 6236                        8,
34070 881A                        08            .byte	8
34071                                           ! 6237                             16,
34072 881B                        10            .byte	$10
34073                                           ! 6238                          8,
34074 881C                        08            .byte	8
34075                                           ! 6239                               8,
34076 881D                        08            .byte	8
34077                                           ! 6240                         8,
34078 881E                        08            .byte	8
34079                                           ! 6241                              0,
34080 881F                        00            .byte	0
34081                                           ! 6242                         0,
34082 8820                        00            .byte	0
34083                                           ! 6243                              0,
34084 8821                        00            .byte	0
34085                                           ! 6244                                0,
34086 8822                        00            .byte	0
34087                                           ! 6245                        0xE0000000,
34088 8823                      0000            .word	0
34089 8825                      E000            .word	$E000
34090                                           ! 6246                               0,
34091 8827                      0000            .word	0
34092 8829                      0000            .word	0
34093                                           ! 6247                             0,
34094 882B                      0000            .word	0
34095                                           ! 6248                                3456,
34096 882D                      0D80            .word	$D80
34097                                           ! 6249                             0,
34098 882F                        00            .byte	0
34099                                           ! 6250                             0,
34100 8830                        00            .byte	0
34101                                           ! 6251                           8,
34102 8831                        08            .byte	8
34103                                           ! 6252                                16,
34104 8832                        10            .byte	$10
34105                                           ! 6253                             8,
34106 8833                        08            .byte	8
34107                                           ! 6254                                  8,
34108 8834                        08            .byte	8
34109                                           ! 6255                            8,
34110 8835                        08            .byte	8
34111                                           ! 6256                                 0,
34112 8836                        00            .byte	0
34113                                           ! 6257                            0,
34114 8837                        00            .byte	0
34115                                           ! 6258                                 0,
34116 8838                        00            .byte	0
34117                                           ! 6259                          0,
34118 8839                      0000            .word	0
34119 883B                      0000            .word	0
34120                                           ! 6260 } },
34121                                           ! 6261 { 0x014c,
34122 883D                      014C            .word	$14C
34123                                           ! 6262 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34124 883F                      009B            .word	$9B
34125                                           ! 6263                           0x01 | 0x02 | 0x04,
34126 8841                        07            .byte	7
34127                                           ! 6264                           0,
34128 8842                        00            .byte	0
34129                                           ! 6265                           64,
34130 8843                      0040            .word	$40
34131                                           ! 6266                    64,
34132 8845                      0040            .word	$40
34133                                           ! 6267                        0xA000,
34134 8847                      A000            .word	$A000
34135                                           ! 6268                        0x0000,
34136 8849                      0000            .word	0
34137                                           ! 6269                       0,
34138 884B                      0000            .word	0
34139 884D                      0000            .word	0
34140                                           ! 6270                             4608,
34141 884F                      1200            .word	$1200
34142                                           ! 6271                        1152,
34143 8851                      0480            .word	$480
34144                                           ! 6272                        864,
34145 8853                      0360            .word	$360
34146                                           ! 6273                      8,
34147 8855                        08            .byte	8
34148                                           ! 6274                      16,
34149 8856                        10            .byte	$10
34150                                           ! 6275                           1,
34151 8857                        01            .byte	1
34152                                           ! 6276                         32,
34153 8858                        20            .byte	$20
34154                                           ! 6277                          61,
34155 8859                        3D            .byte	$3D
34156                                           ! 6278 
34157                                           ! 6278                        0x06,
34158 885A                        06            .byte	6
34159                                           ! 6279                     0,
34160 885B                        00            .byte	0
34161                                           ! 6280                               3,
34162 885C                        03            .byte	3
34163                                           ! 6281                          0,
34164 885D                        00            .byte	0
34165                                           ! 6282                        8,
34166 885E                        08            .byte	8
34167                                           ! 6283                             16,
34168 885F                        10            .byte	$10
34169                                           ! 6284                          8,
34170 8860                        08            .byte	8
34171                                           ! 6285                               8,
34172 8861                        08            .byte	8
34173                                           ! 6286                         8,
34174 8862                        08            .byte	8
34175                                           ! 6287                              0,
34176 8863                        00            .byte	0
34177                                           ! 6288                         8,
34178 8864                        08            .byte	8
34179                                           ! 6289                              24,
34180 8865                        18            .byte	$18
34181                                           ! 6290                                0x02,
34182 8866                        02            .byte	2
34183                                           ! 6291                        0xE0000000,
34184 8867                      0000            .word	0
34185 8869                      E000            .word	$E000
34186                                           ! 6292                               0,
34187 886B                      0000            .word	0
34188 886D                      0000            .word	0
34189                                           ! 6293                             0,
34190 886F                      0000            .word	0
34191                                           ! 6294                                4608,
34192 8871                      1200            .word	$1200
34193                                           ! 6295                             0,
34194 8873                        00            .byte	0
34195                                           ! 6296                             0,
34196 8874                        00            .byte	0
34197                                           ! 6297                           8,
34198 8875                        08            .byte	8
34199                                           ! 6298                                16,
34200 8876                        10            .byte	$10
34201                                           ! 6299                             8,
34202 8877                        08            .byte	8
34203                                           ! 6300                                  8,
34204 8878                        08            .byte	8
34205                                           ! 6301                            8,
34206 8879                        08            .byte	8
34207                                           ! 6302                                 0,
34208 887A                        00            .byte	0
34209                                           ! 6303                            8,
34210 887B                        08            .byte	8
34211                                           ! 6304                                 24,
34212 887C                        18            .byte	$18
34213                                           ! 6305                          0,
34214 887D                      0000            .word	0
34215 887F                      0000            .word	0
34216                                           ! 6306 } },
34217                                           ! 6307 { 0x0178,
34218 8881                      0178            .word	$178
34219                                           ! 6308 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34220 8883                      009B            .word	$9B
34221                                           ! 6309                           0x01 | 0x02 | 0x04,
34222 8885                        07            .byte	7
34223                                           ! 6310                           0,
34224 8886                        00            .byte	0
34225                                           ! 6311                           64,
34226 8887                      0040            .word	$40
34227                                           ! 6312                    64,
34228 8889                      0040            .word	$40
34229                                           ! 6313                        0xA000,
34230 888B                      A000            .word	$A000
34231                                           ! 6314                        0x0000,
34232 888D                      0000            .word	0
34233                                           ! 6315                       0,
34234 888F                      0000            .word	0
34235 8891                      0000            .word	0
34236                                           ! 6316                             2560,
34237 8893                      0A00            .word	$A00
34238                                           ! 6317                        1280,
34239 8895                      0500            .word	$500
34240                                           ! 6318                        800,
34241 8897                      0320            .word	$320
34242                                           ! 6319                      8,
34243 8899                        08            .byte	8
34244                                           ! 6320                      16,
34245 889A                        10            .byte	$10
34246                                           ! 6321                           1,
34247 889B                        01            .byte	1
34248                                           ! 6322                         16,
34249 889C                        10            .byte	$10
34250                                           ! 6323                          32,
34251 889D                        20            .byte	$20
34252                                           ! 6324                        0x06,
34253 889E                        06            .byte	6
34254                                           ! 6325                     0,
34255 889F                        00            .byte	0
34256                                           ! 6326                               7,
34257 88A0                        07            .byte	7
34258                                           ! 6327                          0,
34259 88A1                        00            .byte	0
34260                                           ! 6328                        5,
34261 88A2                        05            .byte	5
34262                                           ! 6329                             11,
34263 88A3                        0B            .byte	$B
34264                                           ! 6330                          6,
34265 88A4                        06            .byte	6
34266                                           ! 6331                               5,
34267 88A5                        05            .byte	5
34268                                           ! 6332                         5,
34269 88A6                        05            .byte	5
34270                                           ! 6333                              0,
34271 88A7                        00            .byte	0
34272                                           ! 6334                         0,
34273 88A8                        00            .byte	0
34274                                           ! 6335                              0,
34275 88A9                        00            .byte	0
34276                                           ! 6336                                0,
34277 88AA                        00            .byte	0
34278                                           ! 6337                        0xE0000000,
34279 88AB                      0000            .word	0
34280 88AD                      E000            .word	$E000
34281                                           ! 6338                               0,
34282 88AF                      0000            .word	0
34283 88B1                      0000            .word	0
34284                                           ! 6339                             0,
34285 88B3                      0000            .word	0
34286                                           ! 6340                                2560,
34287 88B5                      0A00            .word	$A00
34288                                           ! 6341                             0,
34289 88B7                        00            .byte	0
34290                                           ! 6342                             0,
34291 88B8                        00            .byte	0
34292                                           ! 6343                           5,
34293 88B9                        05            .byte	5
34294                                           ! 6344                                11,
34295 88BA                        0B            .byte	$B
34296                                           ! 6345                         
34297                                           ! 6345     6,
34298 88BB                        06            .byte	6
34299                                           ! 6346                                  5,
34300 88BC                        05            .byte	5
34301                                           ! 6347                            5,
34302 88BD                        05            .byte	5
34303                                           ! 6348                                 0,
34304 88BE                        00            .byte	0
34305                                           ! 6349                            0,
34306 88BF                        00            .byte	0
34307                                           ! 6350                                 0,
34308 88C0                        00            .byte	0
34309                                           ! 6351                          0,
34310 88C1                      0000            .word	0
34311 88C3                      0000            .word	0
34312                                           ! 6352 } },
34313                                           ! 6353 { 0x0179,
34314 88C5                      0179            .word	$179
34315                                           ! 6354 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34316 88C7                      009B            .word	$9B
34317                                           ! 6355                           0x01 | 0x02 | 0x04,
34318 88C9                        07            .byte	7
34319                                           ! 6356                           0,
34320 88CA                        00            .byte	0
34321                                           ! 6357                           64,
34322 88CB                      0040            .word	$40
34323                                           ! 6358                    64,
34324 88CD                      0040            .word	$40
34325                                           ! 6359                        0xA000,
34326 88CF                      A000            .word	$A000
34327                                           ! 6360                        0x0000,
34328 88D1                      0000            .word	0
34329                                           ! 6361                       0,
34330 88D3                      0000            .word	0
34331 88D5                      0000            .word	0
34332                                           ! 6362                             3840,
34333 88D7                      0F00            .word	$F00
34334                                           ! 6363                        1280,
34335 88D9                      0500            .word	$500
34336                                           ! 6364                        800,
34337 88DB                      0320            .word	$320
34338                                           ! 6365                      8,
34339 88DD                        08            .byte	8
34340                                           ! 6366                      16,
34341 88DE                        10            .byte	$10
34342                                           ! 6367                           1,
34343 88DF                        01            .byte	1
34344                                           ! 6368                         24,
34345 88E0                        18            .byte	$18
34346                                           ! 6369                          47,
34347 88E1                        2F            .byte	$2F
34348                                           ! 6370                        0x06,
34349 88E2                        06            .byte	6
34350                                           ! 6371                     0,
34351 88E3                        00            .byte	0
34352                                           ! 6372                               4,
34353 88E4                        04            .byte	4
34354                                           ! 6373                          0,
34355 88E5                        00            .byte	0
34356                                           ! 6374                        8,
34357 88E6                        08            .byte	8
34358                                           ! 6375                             16,
34359 88E7                        10            .byte	$10
34360                                           ! 6376                          8,
34361 88E8                        08            .byte	8
34362                                           ! 6377                               8,
34363 88E9                        08            .byte	8
34364                                           ! 6378                         8,
34365 88EA                        08            .byte	8
34366                                           ! 6379                              0,
34367 88EB                        00            .byte	0
34368                                           ! 6380                         0,
34369 88EC                        00            .byte	0
34370                                           ! 6381                              0,
34371 88ED                        00            .byte	0
34372                                           ! 6382                                0,
34373 88EE                        00            .byte	0
34374                                           ! 6383                        0xE0000000,
34375 88EF                      0000            .word	0
34376 88F1                      E000            .word	$E000
34377                                           ! 6384                               0,
34378 88F3                      0000            .word	0
34379 88F5                      0000            .word	0
34380                                           ! 6385                             0,
34381 88F7                      0000            .word	0
34382                                           ! 6386                                3840,
34383 88F9                      0F00            .word	$F00
34384                                           ! 6387                             0,
34385 88FB                        00            .byte	0
34386                                           ! 6388                             0,
34387 88FC                        00            .byte	0
34388                                           ! 6389                           8,
34389 88FD                        08            .byte	8
34390                                           ! 6390                                16,
34391 88FE                        10            .byte	$10
34392                                           ! 6391                             8,
34393 88FF                        08            .byte	8
34394                                           ! 6392                                  8,
34395 8900                        08            .byte	8
34396                                           ! 6393                            8,
34397 8901                        08            .byte	8
34398                                           ! 6394                                 0,
34399 8902                        00            .byte	0
34400                                           ! 6395                            0,
34401 8903                        00            .byte	0
34402                                           ! 6396                                 0,
34403 8904                        00            .byte	0
34404                                           ! 6397                          0,
34405 8905                      0000            .word	0
34406 8907                      0000            .word	0
34407                                           ! 6398 } },
34408                                           ! 6399 { 0x017a,
34409 8909                      017A            .word	$17A
34410                                           ! 6400 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34411 890B                      009B            .word	$9B
34412                                           ! 6401                           0x01 | 0x02 | 0x04,
34413 890D                        07            .byte	7
34414                                           ! 6402                           0,
34415 890E                        00            .byte	0
34416                                           ! 6403                           64,
34417 890F                      0040            .word	$40
34418                                           ! 6404                    64,
34419 8911                      0040            .word	$40
34420                                           ! 6405                        0xA000,
34421 8913                      A000            .word	$A000
34422                                           ! 6406                        0x0000,
34423 8915                      0000            .word	0
34424                                           ! 6407                       0,
34425 8917                      0000            .word	0
34426 8919                      0000            .word	0
34427                                           ! 6408                             5120,
34428 891B                      1400            .word	$1400
34429                                           ! 6409                        1280,
34430 891D                      0500            .word	$500
34431                                           ! 6410                        800,
34432 891F                      0320            .word	$320
34433                                           ! 6411                      8,
34434 8921                        08            .byte	8
34435                                           ! 6412                      16,
34436 8922                        10            .byte	$10
34437                                           ! 6413                           1,
34438 8923                        01            .byte	1
34439                                           ! 6414                         32,
34440 8924                        20            .byte	$20
34441                                           ! 6415  
34442                                           ! 6415                         63,
34443 8925                        3F            .byte	$3F
34444                                           ! 6416                        0x06,
34445 8926                        06            .byte	6
34446                                           ! 6417                     0,
34447 8927                        00            .byte	0
34448                                           ! 6418                               3,
34449 8928                        03            .byte	3
34450                                           ! 6419                          0,
34451 8929                        00            .byte	0
34452                                           ! 6420                        8,
34453 892A                        08            .byte	8
34454                                           ! 6421                             16,
34455 892B                        10            .byte	$10
34456                                           ! 6422                          8,
34457 892C                        08            .byte	8
34458                                           ! 6423                               8,
34459 892D                        08            .byte	8
34460                                           ! 6424                         8,
34461 892E                        08            .byte	8
34462                                           ! 6425                              0,
34463 892F                        00            .byte	0
34464                                           ! 6426                         8,
34465 8930                        08            .byte	8
34466                                           ! 6427                              24,
34467 8931                        18            .byte	$18
34468                                           ! 6428                                0x02,
34469 8932                        02            .byte	2
34470                                           ! 6429                        0xE0000000,
34471 8933                      0000            .word	0
34472 8935                      E000            .word	$E000
34473                                           ! 6430                               0,
34474 8937                      0000            .word	0
34475 8939                      0000            .word	0
34476                                           ! 6431                             0,
34477 893B                      0000            .word	0
34478                                           ! 6432                                5120,
34479 893D                      1400            .word	$1400
34480                                           ! 6433                             0,
34481 893F                        00            .byte	0
34482                                           ! 6434                             0,
34483 8940                        00            .byte	0
34484                                           ! 6435                           8,
34485 8941                        08            .byte	8
34486                                           ! 6436                                16,
34487 8942                        10            .byte	$10
34488                                           ! 6437                             8,
34489 8943                        08            .byte	8
34490                                           ! 6438                                  8,
34491 8944                        08            .byte	8
34492                                           ! 6439                            8,
34493 8945                        08            .byte	8
34494                                           ! 6440                                 0,
34495 8946                        00            .byte	0
34496                                           ! 6441                            8,
34497 8947                        08            .byte	8
34498                                           ! 6442                                 24,
34499 8948                        18            .byte	$18
34500                                           ! 6443                          0,
34501 8949                      0000            .word	0
34502 894B                      0000            .word	0
34503                                           ! 6444 } },
34504                                           ! 6445 { 0x017b,
34505 894D                      017B            .word	$17B
34506                                           ! 6446 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34507 894F                      009B            .word	$9B
34508                                           ! 6447                           0x01 | 0x02 | 0x04,
34509 8951                        07            .byte	7
34510                                           ! 6448                           0,
34511 8952                        00            .byte	0
34512                                           ! 6449                           64,
34513 8953                      0040            .word	$40
34514                                           ! 6450                    64,
34515 8955                      0040            .word	$40
34516                                           ! 6451                        0xA000,
34517 8957                      A000            .word	$A000
34518                                           ! 6452                        0x0000,
34519 8959                      0000            .word	0
34520                                           ! 6453                       0,
34521 895B                      0000            .word	0
34522 895D                      0000            .word	0
34523                                           ! 6454                             2560,
34524 895F                      0A00            .word	$A00
34525                                           ! 6455                        1280,
34526 8961                      0500            .word	$500
34527                                           ! 6456                        960,
34528 8963                      03C0            .word	$3C0
34529                                           ! 6457                      8,
34530 8965                        08            .byte	8
34531                                           ! 6458                      16,
34532 8966                        10            .byte	$10
34533                                           ! 6459                           1,
34534 8967                        01            .byte	1
34535                                           ! 6460                         16,
34536 8968                        10            .byte	$10
34537                                           ! 6461                          38,
34538 8969                        26            .byte	$26
34539                                           ! 6462                        0x06,
34540 896A                        06            .byte	6
34541                                           ! 6463                     0,
34542 896B                        00            .byte	0
34543                                           ! 6464                               5,
34544 896C                        05            .byte	5
34545                                           ! 6465                          0,
34546 896D                        00            .byte	0
34547                                           ! 6466                        5,
34548 896E                        05            .byte	5
34549                                           ! 6467                             11,
34550 896F                        0B            .byte	$B
34551                                           ! 6468                          6,
34552 8970                        06            .byte	6
34553                                           ! 6469                               5,
34554 8971                        05            .byte	5
34555                                           ! 6470                         5,
34556 8972                        05            .byte	5
34557                                           ! 6471                              0,
34558 8973                        00            .byte	0
34559                                           ! 6472                         0,
34560 8974                        00            .byte	0
34561                                           ! 6473                              0,
34562 8975                        00            .byte	0
34563                                           ! 6474                                0,
34564 8976                        00            .byte	0
34565                                           ! 6475                        0xE0000000,
34566 8977                      0000            .word	0
34567 8979                      E000            .word	$E000
34568                                           ! 6476                               0,
34569 897B                      0000            .word	0
34570 897D                      0000            .word	0
34571                                           ! 6477                             0,
34572 897F                      0000            .word	0
34573                                           ! 6478                                2560,
34574 8981                      0A00            .word	$A00
34575                                           ! 6479                             0,
34576 8983                        00            .byte	0
34577                                           ! 6480                             0,
34578 8984                        00            .byte	0
34579                                           ! 6481                           5,
34580 8985                        05            .byte	5
34581                                           ! 6482                                
34582                                           ! 6482 11,
34583 8986                        0B            .byte	$B
34584                                           ! 6483                             6,
34585 8987                        06            .byte	6
34586                                           ! 6484                                  5,
34587 8988                        05            .byte	5
34588                                           ! 6485                            5,
34589 8989                        05            .byte	5
34590                                           ! 6486                                 0,
34591 898A                        00            .byte	0
34592                                           ! 6487                            0,
34593 898B                        00            .byte	0
34594                                           ! 6488                                 0,
34595 898C                        00            .byte	0
34596                                           ! 6489                          0,
34597 898D                      0000            .word	0
34598 898F                      0000            .word	0
34599                                           ! 6490 } },
34600                                           ! 6491 { 0x017c,
34601 8991                      017C            .word	$17C
34602                                           ! 6492 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34603 8993                      009B            .word	$9B
34604                                           ! 6493                           0x01 | 0x02 | 0x04,
34605 8995                        07            .byte	7
34606                                           ! 6494                           0,
34607 8996                        00            .byte	0
34608                                           ! 6495                           64,
34609 8997                      0040            .word	$40
34610                                           ! 6496                    64,
34611 8999                      0040            .word	$40
34612                                           ! 6497                        0xA000,
34613 899B                      A000            .word	$A000
34614                                           ! 6498                        0x0000,
34615 899D                      0000            .word	0
34616                                           ! 6499                       0,
34617 899F                      0000            .word	0
34618 89A1                      0000            .word	0
34619                                           ! 6500                             3840,
34620 89A3                      0F00            .word	$F00
34621                                           ! 6501                        1280,
34622 89A5                      0500            .word	$500
34623                                           ! 6502                        960,
34624 89A7                      03C0            .word	$3C0
34625                                           ! 6503                      8,
34626 89A9                        08            .byte	8
34627                                           ! 6504                      16,
34628 89AA                        10            .byte	$10
34629                                           ! 6505                           1,
34630 89AB                        01            .byte	1
34631                                           ! 6506                         24,
34632 89AC                        18            .byte	$18
34633                                           ! 6507                          57,
34634 89AD                        39            .byte	$39
34635                                           ! 6508                        0x06,
34636 89AE                        06            .byte	6
34637                                           ! 6509                     0,
34638 89AF                        00            .byte	0
34639                                           ! 6510                               3,
34640 89B0                        03            .byte	3
34641                                           ! 6511                          0,
34642 89B1                        00            .byte	0
34643                                           ! 6512                        8,
34644 89B2                        08            .byte	8
34645                                           ! 6513                             16,
34646 89B3                        10            .byte	$10
34647                                           ! 6514                          8,
34648 89B4                        08            .byte	8
34649                                           ! 6515                               8,
34650 89B5                        08            .byte	8
34651                                           ! 6516                         8,
34652 89B6                        08            .byte	8
34653                                           ! 6517                              0,
34654 89B7                        00            .byte	0
34655                                           ! 6518                         0,
34656 89B8                        00            .byte	0
34657                                           ! 6519                              0,
34658 89B9                        00            .byte	0
34659                                           ! 6520                                0,
34660 89BA                        00            .byte	0
34661                                           ! 6521                        0xE0000000,
34662 89BB                      0000            .word	0
34663 89BD                      E000            .word	$E000
34664                                           ! 6522                               0,
34665 89BF                      0000            .word	0
34666 89C1                      0000            .word	0
34667                                           ! 6523                             0,
34668 89C3                      0000            .word	0
34669                                           ! 6524                                3840,
34670 89C5                      0F00            .word	$F00
34671                                           ! 6525                             0,
34672 89C7                        00            .byte	0
34673                                           ! 6526                             0,
34674 89C8                        00            .byte	0
34675                                           ! 6527                           8,
34676 89C9                        08            .byte	8
34677                                           ! 6528                                16,
34678 89CA                        10            .byte	$10
34679                                           ! 6529                             8,
34680 89CB                        08            .byte	8
34681                                           ! 6530                                  8,
34682 89CC                        08            .byte	8
34683                                           ! 6531                            8,
34684 89CD                        08            .byte	8
34685                                           ! 6532                                 0,
34686 89CE                        00            .byte	0
34687                                           ! 6533                            0,
34688 89CF                        00            .byte	0
34689                                           ! 6534                                 0,
34690 89D0                        00            .byte	0
34691                                           ! 6535                          0,
34692 89D1                      0000            .word	0
34693 89D3                      0000            .word	0
34694                                           ! 6536 } },
34695                                           ! 6537 { 0x017d,
34696 89D5                      017D            .word	$17D
34697                                           ! 6538 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34698 89D7                      009B            .word	$9B
34699                                           ! 6539                           0x01 | 0x02 | 0x04,
34700 89D9                        07            .byte	7
34701                                           ! 6540                           0,
34702 89DA                        00            .byte	0
34703                                           ! 6541                           64,
34704 89DB                      0040            .word	$40
34705                                           ! 6542                    64,
34706 89DD                      0040            .word	$40
34707                                           ! 6543                        0xA000,
34708 89DF                      A000            .word	$A000
34709                                           ! 6544                        0x0000,
34710 89E1                      0000            .word	0
34711                                           ! 6545                       0,
34712 89E3                      0000            .word	0
34713 89E5                      0000            .word	0
34714                                           ! 6546                             5120,
34715 89E7                      1400            .word	$1400
34716                                           ! 6547                        1280,
34717 89E9                      0500            .word	$500
34718                                           ! 6548                        960,
34719 89EB                      03C0            .word	$3C0
34720                                           ! 6549                      8,
34721 89ED                        08            .byte	8
34722                                           ! 6550                      16,
34723 89EE                        10            .byte	$10
34724                                           ! 6551                           1,
34725 89EF                        01            .byte	1
34726                                           ! 6552  
34727                                           ! 6552                        32,
34728 89F0                        20            .byte	$20
34729                                           ! 6553                          75,
34730 89F1                        4B            .byte	$4B
34731                                           ! 6554                        0x06,
34732 89F2                        06            .byte	6
34733                                           ! 6555                     0,
34734 89F3                        00            .byte	0
34735                                           ! 6556                               2,
34736 89F4                        02            .byte	2
34737                                           ! 6557                          0,
34738 89F5                        00            .byte	0
34739                                           ! 6558                        8,
34740 89F6                        08            .byte	8
34741                                           ! 6559                             16,
34742 89F7                        10            .byte	$10
34743                                           ! 6560                          8,
34744 89F8                        08            .byte	8
34745                                           ! 6561                               8,
34746 89F9                        08            .byte	8
34747                                           ! 6562                         8,
34748 89FA                        08            .byte	8
34749                                           ! 6563                              0,
34750 89FB                        00            .byte	0
34751                                           ! 6564                         8,
34752 89FC                        08            .byte	8
34753                                           ! 6565                              24,
34754 89FD                        18            .byte	$18
34755                                           ! 6566                                0x02,
34756 89FE                        02            .byte	2
34757                                           ! 6567                        0xE0000000,
34758 89FF                      0000            .word	0
34759 8A01                      E000            .word	$E000
34760                                           ! 6568                               0,
34761 8A03                      0000            .word	0
34762 8A05                      0000            .word	0
34763                                           ! 6569                             0,
34764 8A07                      0000            .word	0
34765                                           ! 6570                                5120,
34766 8A09                      1400            .word	$1400
34767                                           ! 6571                             0,
34768 8A0B                        00            .byte	0
34769                                           ! 6572                             0,
34770 8A0C                        00            .byte	0
34771                                           ! 6573                           8,
34772 8A0D                        08            .byte	8
34773                                           ! 6574                                16,
34774 8A0E                        10            .byte	$10
34775                                           ! 6575                             8,
34776 8A0F                        08            .byte	8
34777                                           ! 6576                                  8,
34778 8A10                        08            .byte	8
34779                                           ! 6577                            8,
34780 8A11                        08            .byte	8
34781                                           ! 6578                                 0,
34782 8A12                        00            .byte	0
34783                                           ! 6579                            8,
34784 8A13                        08            .byte	8
34785                                           ! 6580                                 24,
34786 8A14                        18            .byte	$18
34787                                           ! 6581                          0,
34788 8A15                      0000            .word	0
34789 8A17                      0000            .word	0
34790                                           ! 6582 } },
34791                                           ! 6583 { 0x017e,
34792 8A19                      017E            .word	$17E
34793                                           ! 6584 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34794 8A1B                      009B            .word	$9B
34795                                           ! 6585                           0x01 | 0x02 | 0x04,
34796 8A1D                        07            .byte	7
34797                                           ! 6586                           0,
34798 8A1E                        00            .byte	0
34799                                           ! 6587                           64,
34800 8A1F                      0040            .word	$40
34801                                           ! 6588                    64,
34802 8A21                      0040            .word	$40
34803                                           ! 6589                        0xA000,
34804 8A23                      A000            .word	$A000
34805                                           ! 6590                        0x0000,
34806 8A25                      0000            .word	0
34807                                           ! 6591                       0,
34808 8A27                      0000            .word	0
34809 8A29                      0000            .word	0
34810                                           ! 6592                             2880,
34811 8A2B                      0B40            .word	$B40
34812                                           ! 6593                        1440,
34813 8A2D                      05A0            .word	$5A0
34814                                           ! 6594                        900,
34815 8A2F                      0384            .word	$384
34816                                           ! 6595                      8,
34817 8A31                        08            .byte	8
34818                                           ! 6596                      16,
34819 8A32                        10            .byte	$10
34820                                           ! 6597                           1,
34821 8A33                        01            .byte	1
34822                                           ! 6598                         16,
34823 8A34                        10            .byte	$10
34824                                           ! 6599                          40,
34825 8A35                        28            .byte	$28
34826                                           ! 6600                        0x06,
34827 8A36                        06            .byte	6
34828                                           ! 6601                     0,
34829 8A37                        00            .byte	0
34830                                           ! 6602                               5,
34831 8A38                        05            .byte	5
34832                                           ! 6603                          0,
34833 8A39                        00            .byte	0
34834                                           ! 6604                        5,
34835 8A3A                        05            .byte	5
34836                                           ! 6605                             11,
34837 8A3B                        0B            .byte	$B
34838                                           ! 6606                          6,
34839 8A3C                        06            .byte	6
34840                                           ! 6607                               5,
34841 8A3D                        05            .byte	5
34842                                           ! 6608                         5,
34843 8A3E                        05            .byte	5
34844                                           ! 6609                              0,
34845 8A3F                        00            .byte	0
34846                                           ! 6610                         0,
34847 8A40                        00            .byte	0
34848                                           ! 6611                              0,
34849 8A41                        00            .byte	0
34850                                           ! 6612                                0,
34851 8A42                        00            .byte	0
34852                                           ! 6613                        0xE0000000,
34853 8A43                      0000            .word	0
34854 8A45                      E000            .word	$E000
34855                                           ! 6614                               0,
34856 8A47                      0000            .word	0
34857 8A49                      0000            .word	0
34858                                           ! 6615                             0,
34859 8A4B                      0000            .word	0
34860                                           ! 6616                                2880,
34861 8A4D                      0B40            .word	$B40
34862                                           ! 6617                             0,
34863 8A4F                        00            .byte	0
34864                                           ! 6618                             0,
34865 8A50                        00            .byte	0
34866                                           ! 6619                           5,
34867 8A51                        05            .byte	5
34868                                           ! 6620    
34869                                           ! 6620                             11,
34870 8A52                        0B            .byte	$B
34871                                           ! 6621                             6,
34872 8A53                        06            .byte	6
34873                                           ! 6622                                  5,
34874 8A54                        05            .byte	5
34875                                           ! 6623                            5,
34876 8A55                        05            .byte	5
34877                                           ! 6624                                 0,
34878 8A56                        00            .byte	0
34879                                           ! 6625                            0,
34880 8A57                        00            .byte	0
34881                                           ! 6626                                 0,
34882 8A58                        00            .byte	0
34883                                           ! 6627                          0,
34884 8A59                      0000            .word	0
34885 8A5B                      0000            .word	0
34886                                           ! 6628 } },
34887                                           ! 6629 { 0x017f,
34888 8A5D                      017F            .word	$17F
34889                                           ! 6630 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34890 8A5F                      009B            .word	$9B
34891                                           ! 6631                           0x01 | 0x02 | 0x04,
34892 8A61                        07            .byte	7
34893                                           ! 6632                           0,
34894 8A62                        00            .byte	0
34895                                           ! 6633                           64,
34896 8A63                      0040            .word	$40
34897                                           ! 6634                    64,
34898 8A65                      0040            .word	$40
34899                                           ! 6635                        0xA000,
34900 8A67                      A000            .word	$A000
34901                                           ! 6636                        0x0000,
34902 8A69                      0000            .word	0
34903                                           ! 6637                       0,
34904 8A6B                      0000            .word	0
34905 8A6D                      0000            .word	0
34906                                           ! 6638                             4320,
34907 8A6F                      10E0            .word	$10E0
34908                                           ! 6639                        1440,
34909 8A71                      05A0            .word	$5A0
34910                                           ! 6640                        900,
34911 8A73                      0384            .word	$384
34912                                           ! 6641                      8,
34913 8A75                        08            .byte	8
34914                                           ! 6642                      16,
34915 8A76                        10            .byte	$10
34916                                           ! 6643                           1,
34917 8A77                        01            .byte	1
34918                                           ! 6644                         24,
34919 8A78                        18            .byte	$18
34920                                           ! 6645                          60,
34921 8A79                        3C            .byte	$3C
34922                                           ! 6646                        0x06,
34923 8A7A                        06            .byte	6
34924                                           ! 6647                     0,
34925 8A7B                        00            .byte	0
34926                                           ! 6648                               3,
34927 8A7C                        03            .byte	3
34928                                           ! 6649                          0,
34929 8A7D                        00            .byte	0
34930                                           ! 6650                        8,
34931 8A7E                        08            .byte	8
34932                                           ! 6651                             16,
34933 8A7F                        10            .byte	$10
34934                                           ! 6652                          8,
34935 8A80                        08            .byte	8
34936                                           ! 6653                               8,
34937 8A81                        08            .byte	8
34938                                           ! 6654                         8,
34939 8A82                        08            .byte	8
34940                                           ! 6655                              0,
34941 8A83                        00            .byte	0
34942                                           ! 6656                         0,
34943 8A84                        00            .byte	0
34944                                           ! 6657                              0,
34945 8A85                        00            .byte	0
34946                                           ! 6658                                0,
34947 8A86                        00            .byte	0
34948                                           ! 6659                        0xE0000000,
34949 8A87                      0000            .word	0
34950 8A89                      E000            .word	$E000
34951                                           ! 6660                               0,
34952 8A8B                      0000            .word	0
34953 8A8D                      0000            .word	0
34954                                           ! 6661                             0,
34955 8A8F                      0000            .word	0
34956                                           ! 6662                                4320,
34957 8A91                      10E0            .word	$10E0
34958                                           ! 6663                             0,
34959 8A93                        00            .byte	0
34960                                           ! 6664                             0,
34961 8A94                        00            .byte	0
34962                                           ! 6665                           8,
34963 8A95                        08            .byte	8
34964                                           ! 6666                                16,
34965 8A96                        10            .byte	$10
34966                                           ! 6667                             8,
34967 8A97                        08            .byte	8
34968                                           ! 6668                                  8,
34969 8A98                        08            .byte	8
34970                                           ! 6669                            8,
34971 8A99                        08            .byte	8
34972                                           ! 6670                                 0,
34973 8A9A                        00            .byte	0
34974                                           ! 6671                            0,
34975 8A9B                        00            .byte	0
34976                                           ! 6672                                 0,
34977 8A9C                        00            .byte	0
34978                                           ! 6673                          0,
34979 8A9D                      0000            .word	0
34980 8A9F                      0000            .word	0
34981                                           ! 6674 } },
34982                                           ! 6675 { 0x0180,
34983 8AA1                      0180            .word	$180
34984                                           ! 6676 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34985 8AA3                      009B            .word	$9B
34986                                           ! 6677                           0x01 | 0x02 | 0x04,
34987 8AA5                        07            .byte	7
34988                                           ! 6678                           0,
34989 8AA6                        00            .byte	0
34990                                           ! 6679                           64,
34991 8AA7                      0040            .word	$40
34992                                           ! 6680                    64,
34993 8AA9                      0040            .word	$40
34994                                           ! 6681                        0xA000,
34995 8AAB                      A000            .word	$A000
34996                                           ! 6682                        0x0000,
34997 8AAD                      0000            .word	0
34998                                           ! 6683                       0,
34999 8AAF                      0000            .word	0
35000 8AB1                      0000            .word	0
35001                                           ! 6684                             5760,
35002 8AB3                      1680            .word	$1680
35003                                           ! 6685                        1440,
35004 8AB5                      05A0            .word	$5A0
35005                                           ! 6686                        900,
35006 8AB7                      0384            .word	$384
35007                                           ! 6687                      8,
35008 8AB9                        08            .byte	8
35009                                           ! 6688                      16,
35010 8ABA                        10            .byte	$10
35011                                           ! 6689   
35012                                           ! 6689                         1,
35013 8ABB                        01            .byte	1
35014                                           ! 6690                         32,
35015 8ABC                        20            .byte	$20
35016                                           ! 6691                          80,
35017 8ABD                        50            .byte	$50
35018                                           ! 6692                        0x06,
35019 8ABE                        06            .byte	6
35020                                           ! 6693                     0,
35021 8ABF                        00            .byte	0
35022                                           ! 6694                               2,
35023 8AC0                        02            .byte	2
35024                                           ! 6695                          0,
35025 8AC1                        00            .byte	0
35026                                           ! 6696                        8,
35027 8AC2                        08            .byte	8
35028                                           ! 6697                             16,
35029 8AC3                        10            .byte	$10
35030                                           ! 6698                          8,
35031 8AC4                        08            .byte	8
35032                                           ! 6699                               8,
35033 8AC5                        08            .byte	8
35034                                           ! 6700                         8,
35035 8AC6                        08            .byte	8
35036                                           ! 6701                              0,
35037 8AC7                        00            .byte	0
35038                                           ! 6702                         8,
35039 8AC8                        08            .byte	8
35040                                           ! 6703                              24,
35041 8AC9                        18            .byte	$18
35042                                           ! 6704                                0x02,
35043 8ACA                        02            .byte	2
35044                                           ! 6705                        0xE0000000,
35045 8ACB                      0000            .word	0
35046 8ACD                      E000            .word	$E000
35047                                           ! 6706                               0,
35048 8ACF                      0000            .word	0
35049 8AD1                      0000            .word	0
35050                                           ! 6707                             0,
35051 8AD3                      0000            .word	0
35052                                           ! 6708                                5760,
35053 8AD5                      1680            .word	$1680
35054                                           ! 6709                             0,
35055 8AD7                        00            .byte	0
35056                                           ! 6710                             0,
35057 8AD8                        00            .byte	0
35058                                           ! 6711                           8,
35059 8AD9                        08            .byte	8
35060                                           ! 6712                                16,
35061 8ADA                        10            .byte	$10
35062                                           ! 6713                             8,
35063 8ADB                        08            .byte	8
35064                                           ! 6714                                  8,
35065 8ADC                        08            .byte	8
35066                                           ! 6715                            8,
35067 8ADD                        08            .byte	8
35068                                           ! 6716                                 0,
35069 8ADE                        00            .byte	0
35070                                           ! 6717                            8,
35071 8ADF                        08            .byte	8
35072                                           ! 6718                                 24,
35073 8AE0                        18            .byte	$18
35074                                           ! 6719                          0,
35075 8AE1                      0000            .word	0
35076 8AE3                      0000            .word	0
35077                                           ! 6720 } },
35078                                           ! 6721 { 0x0181,
35079 8AE5                      0181            .word	$181
35080                                           ! 6722 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35081 8AE7                      009B            .word	$9B
35082                                           ! 6723                           0x01 | 0x02 | 0x04,
35083 8AE9                        07            .byte	7
35084                                           ! 6724                           0,
35085 8AEA                        00            .byte	0
35086                                           ! 6725                           64,
35087 8AEB                      0040            .word	$40
35088                                           ! 6726                    64,
35089 8AED                      0040            .word	$40
35090                                           ! 6727                        0xA000,
35091 8AEF                      A000            .word	$A000
35092                                           ! 6728                        0x0000,
35093 8AF1                      0000            .word	0
35094                                           ! 6729                       0,
35095 8AF3                      0000            .word	0
35096 8AF5                      0000            .word	0
35097                                           ! 6730                             2800,
35098 8AF7                      0AF0            .word	$AF0
35099                                           ! 6731                        1400,
35100 8AF9                      0578            .word	$578
35101                                           ! 6732                        1050,
35102 8AFB                      041A            .word	$41A
35103                                           ! 6733                      8,
35104 8AFD                        08            .byte	8
35105                                           ! 6734                      16,
35106 8AFE                        10            .byte	$10
35107                                           ! 6735                           1,
35108 8AFF                        01            .byte	1
35109                                           ! 6736                         16,
35110 8B00                        10            .byte	$10
35111                                           ! 6737                          45,
35112 8B01                        2D            .byte	$2D
35113                                           ! 6738                        0x06,
35114 8B02                        06            .byte	6
35115                                           ! 6739                     0,
35116 8B03                        00            .byte	0
35117                                           ! 6740                               4,
35118 8B04                        04            .byte	4
35119                                           ! 6741                          0,
35120 8B05                        00            .byte	0
35121                                           ! 6742                        5,
35122 8B06                        05            .byte	5
35123                                           ! 6743                             11,
35124 8B07                        0B            .byte	$B
35125                                           ! 6744                          6,
35126 8B08                        06            .byte	6
35127                                           ! 6745                               5,
35128 8B09                        05            .byte	5
35129                                           ! 6746                         5,
35130 8B0A                        05            .byte	5
35131                                           ! 6747                              0,
35132 8B0B                        00            .byte	0
35133                                           ! 6748                         0,
35134 8B0C                        00            .byte	0
35135                                           ! 6749                              0,
35136 8B0D                        00            .byte	0
35137                                           ! 6750                                0,
35138 8B0E                        00            .byte	0
35139                                           ! 6751                        0xE0000000,
35140 8B0F                      0000            .word	0
35141 8B11                      E000            .word	$E000
35142                                           ! 6752                               0,
35143 8B13                      0000            .word	0
35144 8B15                      0000            .word	0
35145                                           ! 6753                             0,
35146 8B17                      0000            .word	0
35147                                           ! 6754                                2800,
35148 8B19                      0AF0            .word	$AF0
35149                                           ! 6755                             0,
35150 8B1B                        00            .byte	0
35151                                           ! 6756                             0,
35152 8B1C                        00            .byte	0
35153                                           ! 6757    
35154                                           ! 6757                        5,
35155 8B1D                        05            .byte	5
35156                                           ! 6758                                11,
35157 8B1E                        0B            .byte	$B
35158                                           ! 6759                             6,
35159 8B1F                        06            .byte	6
35160                                           ! 6760                                  5,
35161 8B20                        05            .byte	5
35162                                           ! 6761                            5,
35163 8B21                        05            .byte	5
35164                                           ! 6762                                 0,
35165 8B22                        00            .byte	0
35166                                           ! 6763                            0,
35167 8B23                        00            .byte	0
35168                                           ! 6764                                 0,
35169 8B24                        00            .byte	0
35170                                           ! 6765                          0,
35171 8B25                      0000            .word	0
35172 8B27                      0000            .word	0
35173                                           ! 6766 } },
35174                                           ! 6767 { 0x0182,
35175 8B29                      0182            .word	$182
35176                                           ! 6768 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35177 8B2B                      009B            .word	$9B
35178                                           ! 6769                           0x01 | 0x02 | 0x04,
35179 8B2D                        07            .byte	7
35180                                           ! 6770                           0,
35181 8B2E                        00            .byte	0
35182                                           ! 6771                           64,
35183 8B2F                      0040            .word	$40
35184                                           ! 6772                    64,
35185 8B31                      0040            .word	$40
35186                                           ! 6773                        0xA000,
35187 8B33                      A000            .word	$A000
35188                                           ! 6774                        0x0000,
35189 8B35                      0000            .word	0
35190                                           ! 6775                       0,
35191 8B37                      0000            .word	0
35192 8B39                      0000            .word	0
35193                                           ! 6776                             4200,
35194 8B3B                      1068            .word	$1068
35195                                           ! 6777                        1400,
35196 8B3D                      0578            .word	$578
35197                                           ! 6778                        1050,
35198 8B3F                      041A            .word	$41A
35199                                           ! 6779                      8,
35200 8B41                        08            .byte	8
35201                                           ! 6780                      16,
35202 8B42                        10            .byte	$10
35203                                           ! 6781                           1,
35204 8B43                        01            .byte	1
35205                                           ! 6782                         24,
35206 8B44                        18            .byte	$18
35207                                           ! 6783                          68,
35208 8B45                        44            .byte	$44
35209                                           ! 6784                        0x06,
35210 8B46                        06            .byte	6
35211                                           ! 6785                     0,
35212 8B47                        00            .byte	0
35213                                           ! 6786                               2,
35214 8B48                        02            .byte	2
35215                                           ! 6787                          0,
35216 8B49                        00            .byte	0
35217                                           ! 6788                        8,
35218 8B4A                        08            .byte	8
35219                                           ! 6789                             16,
35220 8B4B                        10            .byte	$10
35221                                           ! 6790                          8,
35222 8B4C                        08            .byte	8
35223                                           ! 6791                               8,
35224 8B4D                        08            .byte	8
35225                                           ! 6792                         8,
35226 8B4E                        08            .byte	8
35227                                           ! 6793                              0,
35228 8B4F                        00            .byte	0
35229                                           ! 6794                         0,
35230 8B50                        00            .byte	0
35231                                           ! 6795                              0,
35232 8B51                        00            .byte	0
35233                                           ! 6796                                0,
35234 8B52                        00            .byte	0
35235                                           ! 6797                        0xE0000000,
35236 8B53                      0000            .word	0
35237 8B55                      E000            .word	$E000
35238                                           ! 6798                               0,
35239 8B57                      0000            .word	0
35240 8B59                      0000            .word	0
35241                                           ! 6799                             0,
35242 8B5B                      0000            .word	0
35243                                           ! 6800                                4200,
35244 8B5D                      1068            .word	$1068
35245                                           ! 6801                             0,
35246 8B5F                        00            .byte	0
35247                                           ! 6802                             0,
35248 8B60                        00            .byte	0
35249                                           ! 6803                           8,
35250 8B61                        08            .byte	8
35251                                           ! 6804                                16,
35252 8B62                        10            .byte	$10
35253                                           ! 6805                             8,
35254 8B63                        08            .byte	8
35255                                           ! 6806                                  8,
35256 8B64                        08            .byte	8
35257                                           ! 6807                            8,
35258 8B65                        08            .byte	8
35259                                           ! 6808                                 0,
35260 8B66                        00            .byte	0
35261                                           ! 6809                            0,
35262 8B67                        00            .byte	0
35263                                           ! 6810                                 0,
35264 8B68                        00            .byte	0
35265                                           ! 6811                          0,
35266 8B69                      0000            .word	0
35267 8B6B                      0000            .word	0
35268                                           ! 6812 } },
35269                                           ! 6813 { 0x0183,
35270 8B6D                      0183            .word	$183
35271                                           ! 6814 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35272 8B6F                      009B            .word	$9B
35273                                           ! 6815                           0x01 | 0x02 | 0x04,
35274 8B71                        07            .byte	7
35275                                           ! 6816                           0,
35276 8B72                        00            .byte	0
35277                                           ! 6817                           64,
35278 8B73                      0040            .word	$40
35279                                           ! 6818                    64,
35280 8B75                      0040            .word	$40
35281                                           ! 6819                        0xA000,
35282 8B77                      A000            .word	$A000
35283                                           ! 6820                        0x0000,
35284 8B79                      0000            .word	0
35285                                           ! 6821                       0,
35286 8B7B                      0000            .word	0
35287 8B7D                      0000            .word	0
35288                                           ! 6822                             5600,
35289 8B7F                      15E0            .word	$15E0
35290                                           ! 6823                        1400,
35291 8B81                      0578            .word	$578
35292                                           ! 6824                        1050,
35293 8B83                      041A            .word	$41A
35294                                           ! 6825                     
35295                                           ! 6825  8,
35296 8B85                        08            .byte	8
35297                                           ! 6826                      16,
35298 8B86                        10            .byte	$10
35299                                           ! 6827                           1,
35300 8B87                        01            .byte	1
35301                                           ! 6828                         32,
35302 8B88                        20            .byte	$20
35303                                           ! 6829                          90,
35304 8B89                        5A            .byte	$5A
35305                                           ! 6830                        0x06,
35306 8B8A                        06            .byte	6
35307                                           ! 6831                     0,
35308 8B8B                        00            .byte	0
35309                                           ! 6832                               1,
35310 8B8C                        01            .byte	1
35311                                           ! 6833                          0,
35312 8B8D                        00            .byte	0
35313                                           ! 6834                        8,
35314 8B8E                        08            .byte	8
35315                                           ! 6835                             16,
35316 8B8F                        10            .byte	$10
35317                                           ! 6836                          8,
35318 8B90                        08            .byte	8
35319                                           ! 6837                               8,
35320 8B91                        08            .byte	8
35321                                           ! 6838                         8,
35322 8B92                        08            .byte	8
35323                                           ! 6839                              0,
35324 8B93                        00            .byte	0
35325                                           ! 6840                         8,
35326 8B94                        08            .byte	8
35327                                           ! 6841                              24,
35328 8B95                        18            .byte	$18
35329                                           ! 6842                                0x02,
35330 8B96                        02            .byte	2
35331                                           ! 6843                        0xE0000000,
35332 8B97                      0000            .word	0
35333 8B99                      E000            .word	$E000
35334                                           ! 6844                               0,
35335 8B9B                      0000            .word	0
35336 8B9D                      0000            .word	0
35337                                           ! 6845                             0,
35338 8B9F                      0000            .word	0
35339                                           ! 6846                                5600,
35340 8BA1                      15E0            .word	$15E0
35341                                           ! 6847                             0,
35342 8BA3                        00            .byte	0
35343                                           ! 6848                             0,
35344 8BA4                        00            .byte	0
35345                                           ! 6849                           8,
35346 8BA5                        08            .byte	8
35347                                           ! 6850                                16,
35348 8BA6                        10            .byte	$10
35349                                           ! 6851                             8,
35350 8BA7                        08            .byte	8
35351                                           ! 6852                                  8,
35352 8BA8                        08            .byte	8
35353                                           ! 6853                            8,
35354 8BA9                        08            .byte	8
35355                                           ! 6854                                 0,
35356 8BAA                        00            .byte	0
35357                                           ! 6855                            8,
35358 8BAB                        08            .byte	8
35359                                           ! 6856                                 24,
35360 8BAC                        18            .byte	$18
35361                                           ! 6857                          0,
35362 8BAD                      0000            .word	0
35363 8BAF                      0000            .word	0
35364                                           ! 6858 } },
35365                                           ! 6859 { 0x0184,
35366 8BB1                      0184            .word	$184
35367                                           ! 6860 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35368 8BB3                      009B            .word	$9B
35369                                           ! 6861                           0x01 | 0x02 | 0x04,
35370 8BB5                        07            .byte	7
35371                                           ! 6862                           0,
35372 8BB6                        00            .byte	0
35373                                           ! 6863                           64,
35374 8BB7                      0040            .word	$40
35375                                           ! 6864                    64,
35376 8BB9                      0040            .word	$40
35377                                           ! 6865                        0xA000,
35378 8BBB                      A000            .word	$A000
35379                                           ! 6866                        0x0000,
35380 8BBD                      0000            .word	0
35381                                           ! 6867                       0,
35382 8BBF                      0000            .word	0
35383 8BC1                      0000            .word	0
35384                                           ! 6868                             3360,
35385 8BC3                      0D20            .word	$D20
35386                                           ! 6869                        1680,
35387 8BC5                      0690            .word	$690
35388                                           ! 6870                        1050,
35389 8BC7                      041A            .word	$41A
35390                                           ! 6871                      8,
35391 8BC9                        08            .byte	8
35392                                           ! 6872                      16,
35393 8BCA                        10            .byte	$10
35394                                           ! 6873                           1,
35395 8BCB                        01            .byte	1
35396                                           ! 6874                         16,
35397 8BCC                        10            .byte	$10
35398                                           ! 6875                          54,
35399 8BCD                        36            .byte	$36
35400                                           ! 6876                        0x06,
35401 8BCE                        06            .byte	6
35402                                           ! 6877                     0,
35403 8BCF                        00            .byte	0
35404                                           ! 6878                               3,
35405 8BD0                        03            .byte	3
35406                                           ! 6879                          0,
35407 8BD1                        00            .byte	0
35408                                           ! 6880                        5,
35409 8BD2                        05            .byte	5
35410                                           ! 6881                             11,
35411 8BD3                        0B            .byte	$B
35412                                           ! 6882                          6,
35413 8BD4                        06            .byte	6
35414                                           ! 6883                               5,
35415 8BD5                        05            .byte	5
35416                                           ! 6884                         5,
35417 8BD6                        05            .byte	5
35418                                           ! 6885                              0,
35419 8BD7                        00            .byte	0
35420                                           ! 6886                         0,
35421 8BD8                        00            .byte	0
35422                                           ! 6887                              0,
35423 8BD9                        00            .byte	0
35424                                           ! 6888                                0,
35425 8BDA                        00            .byte	0
35426                                           ! 6889                        0xE0000000,
35427 8BDB                      0000            .word	0
35428 8BDD                      E000            .word	$E000
35429                                           ! 6890                               0,
35430 8BDF                      0000            .word	0
35431 8BE1                      0000            .word	0
35432                                           ! 6891                             0,
35433 8BE3                      0000            .word	0
35434                                           ! 6892                                3360,
35435 8BE5                      0D20            .word	$D20
35436                                           ! 6893                             0,
35437 8BE7                        00            .byte	0
35438                                           ! 6894    
35439                                           ! 6894                          0,
35440 8BE8                        00            .byte	0
35441                                           ! 6895                           5,
35442 8BE9                        05            .byte	5
35443                                           ! 6896                                11,
35444 8BEA                        0B            .byte	$B
35445                                           ! 6897                             6,
35446 8BEB                        06            .byte	6
35447                                           ! 6898                                  5,
35448 8BEC                        05            .byte	5
35449                                           ! 6899                            5,
35450 8BED                        05            .byte	5
35451                                           ! 6900                                 0,
35452 8BEE                        00            .byte	0
35453                                           ! 6901                            0,
35454 8BEF                        00            .byte	0
35455                                           ! 6902                                 0,
35456 8BF0                        00            .byte	0
35457                                           ! 6903                          0,
35458 8BF1                      0000            .word	0
35459 8BF3                      0000            .word	0
35460                                           ! 6904 } },
35461                                           ! 6905 { 0x0185,
35462 8BF5                      0185            .word	$185
35463                                           ! 6906 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35464 8BF7                      009B            .word	$9B
35465                                           ! 6907                           0x01 | 0x02 | 0x04,
35466 8BF9                        07            .byte	7
35467                                           ! 6908                           0,
35468 8BFA                        00            .byte	0
35469                                           ! 6909                           64,
35470 8BFB                      0040            .word	$40
35471                                           ! 6910                    64,
35472 8BFD                      0040            .word	$40
35473                                           ! 6911                        0xA000,
35474 8BFF                      A000            .word	$A000
35475                                           ! 6912                        0x0000,
35476 8C01                      0000            .word	0
35477                                           ! 6913                       0,
35478 8C03                      0000            .word	0
35479 8C05                      0000            .word	0
35480                                           ! 6914                             5040,
35481 8C07                      13B0            .word	$13B0
35482                                           ! 6915                        1680,
35483 8C09                      0690            .word	$690
35484                                           ! 6916                        1050,
35485 8C0B                      041A            .word	$41A
35486                                           ! 6917                      8,
35487 8C0D                        08            .byte	8
35488                                           ! 6918                      16,
35489 8C0E                        10            .byte	$10
35490                                           ! 6919                           1,
35491 8C0F                        01            .byte	1
35492                                           ! 6920                         24,
35493 8C10                        18            .byte	$18
35494                                           ! 6921                          81,
35495 8C11                        51            .byte	$51
35496                                           ! 6922                        0x06,
35497 8C12                        06            .byte	6
35498                                           ! 6923                     0,
35499 8C13                        00            .byte	0
35500                                           ! 6924                               2,
35501 8C14                        02            .byte	2
35502                                           ! 6925                          0,
35503 8C15                        00            .byte	0
35504                                           ! 6926                        8,
35505 8C16                        08            .byte	8
35506                                           ! 6927                             16,
35507 8C17                        10            .byte	$10
35508                                           ! 6928                          8,
35509 8C18                        08            .byte	8
35510                                           ! 6929                               8,
35511 8C19                        08            .byte	8
35512                                           ! 6930                         8,
35513 8C1A                        08            .byte	8
35514                                           ! 6931                              0,
35515 8C1B                        00            .byte	0
35516                                           ! 6932                         0,
35517 8C1C                        00            .byte	0
35518                                           ! 6933                              0,
35519 8C1D                        00            .byte	0
35520                                           ! 6934                                0,
35521 8C1E                        00            .byte	0
35522                                           ! 6935                        0xE0000000,
35523 8C1F                      0000            .word	0
35524 8C21                      E000            .word	$E000
35525                                           ! 6936                               0,
35526 8C23                      0000            .word	0
35527 8C25                      0000            .word	0
35528                                           ! 6937                             0,
35529 8C27                      0000            .word	0
35530                                           ! 6938                                5040,
35531 8C29                      13B0            .word	$13B0
35532                                           ! 6939                             0,
35533 8C2B                        00            .byte	0
35534                                           ! 6940                             0,
35535 8C2C                        00            .byte	0
35536                                           ! 6941                           8,
35537 8C2D                        08            .byte	8
35538                                           ! 6942                                16,
35539 8C2E                        10            .byte	$10
35540                                           ! 6943                             8,
35541 8C2F                        08            .byte	8
35542                                           ! 6944                                  8,
35543 8C30                        08            .byte	8
35544                                           ! 6945                            8,
35545 8C31                        08            .byte	8
35546                                           ! 6946                                 0,
35547 8C32                        00            .byte	0
35548                                           ! 6947                            0,
35549 8C33                        00            .byte	0
35550                                           ! 6948                                 0,
35551 8C34                        00            .byte	0
35552                                           ! 6949                          0,
35553 8C35                      0000            .word	0
35554 8C37                      0000            .word	0
35555                                           ! 6950 } },
35556                                           ! 6951 { 0x0186,
35557 8C39                      0186            .word	$186
35558                                           ! 6952 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35559 8C3B                      009B            .word	$9B
35560                                           ! 6953                           0x01 | 0x02 | 0x04,
35561 8C3D                        07            .byte	7
35562                                           ! 6954                           0,
35563 8C3E                        00            .byte	0
35564                                           ! 6955                           64,
35565 8C3F                      0040            .word	$40
35566                                           ! 6956                    64,
35567 8C41                      0040            .word	$40
35568                                           ! 6957                        0xA000,
35569 8C43                      A000            .word	$A000
35570                                           ! 6958                        0x0000,
35571 8C45                      0000            .word	0
35572                                           ! 6959                       0,
35573 8C47                      0000            .word	0
35574 8C49                      0000            .word	0
35575                                           ! 6960                             6720,
35576 8C4B                      1A40            .word	$1A40
35577                                           ! 6961                        1680,
35578 8C4D                      0690            .word	$690
35579                                           ! 6962                   
35580                                           ! 6962      1050,
35581 8C4F                      041A            .word	$41A
35582                                           ! 6963                      8,
35583 8C51                        08            .byte	8
35584                                           ! 6964                      16,
35585 8C52                        10            .byte	$10
35586                                           ! 6965                           1,
35587 8C53                        01            .byte	1
35588                                           ! 6966                         32,
35589 8C54                        20            .byte	$20
35590                                           ! 6967                          108,
35591 8C55                        6C            .byte	$6C
35592                                           ! 6968                        0x06,
35593 8C56                        06            .byte	6
35594                                           ! 6969                     0,
35595 8C57                        00            .byte	0
35596                                           ! 6970                               1,
35597 8C58                        01            .byte	1
35598                                           ! 6971                          0,
35599 8C59                        00            .byte	0
35600                                           ! 6972                        8,
35601 8C5A                        08            .byte	8
35602                                           ! 6973                             16,
35603 8C5B                        10            .byte	$10
35604                                           ! 6974                          8,
35605 8C5C                        08            .byte	8
35606                                           ! 6975                               8,
35607 8C5D                        08            .byte	8
35608                                           ! 6976                         8,
35609 8C5E                        08            .byte	8
35610                                           ! 6977                              0,
35611 8C5F                        00            .byte	0
35612                                           ! 6978                         8,
35613 8C60                        08            .byte	8
35614                                           ! 6979                              24,
35615 8C61                        18            .byte	$18
35616                                           ! 6980                                0x02,
35617 8C62                        02            .byte	2
35618                                           ! 6981                        0xE0000000,
35619 8C63                      0000            .word	0
35620 8C65                      E000            .word	$E000
35621                                           ! 6982                               0,
35622 8C67                      0000            .word	0
35623 8C69                      0000            .word	0
35624                                           ! 6983                             0,
35625 8C6B                      0000            .word	0
35626                                           ! 6984                                6720,
35627 8C6D                      1A40            .word	$1A40
35628                                           ! 6985                             0,
35629 8C6F                        00            .byte	0
35630                                           ! 6986                             0,
35631 8C70                        00            .byte	0
35632                                           ! 6987                           8,
35633 8C71                        08            .byte	8
35634                                           ! 6988                                16,
35635 8C72                        10            .byte	$10
35636                                           ! 6989                             8,
35637 8C73                        08            .byte	8
35638                                           ! 6990                                  8,
35639 8C74                        08            .byte	8
35640                                           ! 6991                            8,
35641 8C75                        08            .byte	8
35642                                           ! 6992                                 0,
35643 8C76                        00            .byte	0
35644                                           ! 6993                            8,
35645 8C77                        08            .byte	8
35646                                           ! 6994                                 24,
35647 8C78                        18            .byte	$18
35648                                           ! 6995                          0,
35649 8C79                      0000            .word	0
35650 8C7B                      0000            .word	0
35651                                           ! 6996 } },
35652                                           ! 6997 { 0x0187,
35653 8C7D                      0187            .word	$187
35654                                           ! 6998 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35655 8C7F                      009B            .word	$9B
35656                                           ! 6999                           0x01 | 0x02 | 0x04,
35657 8C81                        07            .byte	7
35658                                           ! 7000                           0,
35659 8C82                        00            .byte	0
35660                                           ! 7001                           64,
35661 8C83                      0040            .word	$40
35662                                           ! 7002                    64,
35663 8C85                      0040            .word	$40
35664                                           ! 7003                        0xA000,
35665 8C87                      A000            .word	$A000
35666                                           ! 7004                        0x0000,
35667 8C89                      0000            .word	0
35668                                           ! 7005                       0,
35669 8C8B                      0000            .word	0
35670 8C8D                      0000            .word	0
35671                                           ! 7006                             3840,
35672 8C8F                      0F00            .word	$F00
35673                                           ! 7007                        1920,
35674 8C91                      0780            .word	$780
35675                                           ! 7008                        1200,
35676 8C93                      04B0            .word	$4B0
35677                                           ! 7009                      8,
35678 8C95                        08            .byte	8
35679                                           ! 7010                      16,
35680 8C96                        10            .byte	$10
35681                                           ! 7011                           1,
35682 8C97                        01            .byte	1
35683                                           ! 7012                         16,
35684 8C98                        10            .byte	$10
35685                                           ! 7013                          71,
35686 8C99                        47            .byte	$47
35687                                           ! 7014                        0x06,
35688 8C9A                        06            .byte	6
35689                                           ! 7015                     0,
35690 8C9B                        00            .byte	0
35691                                           ! 7016                               2,
35692 8C9C                        02            .byte	2
35693                                           ! 7017                          0,
35694 8C9D                        00            .byte	0
35695                                           ! 7018                        5,
35696 8C9E                        05            .byte	5
35697                                           ! 7019                             11,
35698 8C9F                        0B            .byte	$B
35699                                           ! 7020                          6,
35700 8CA0                        06            .byte	6
35701                                           ! 7021                               5,
35702 8CA1                        05            .byte	5
35703                                           ! 7022                         5,
35704 8CA2                        05            .byte	5
35705                                           ! 7023                              0,
35706 8CA3                        00            .byte	0
35707                                           ! 7024                         0,
35708 8CA4                        00            .byte	0
35709                                           ! 7025                              0,
35710 8CA5                        00            .byte	0
35711                                           ! 7026                                0,
35712 8CA6                        00            .byte	0
35713                                           ! 7027                        0xE0000000,
35714 8CA7                      0000            .word	0
35715 8CA9                      E000            .word	$E000
35716                                           ! 7028                               0,
35717 8CAB                      0000            .word	0
35718 8CAD                      0000            .word	0
35719                                           ! 7029                             0,
35720 8CAF                      0000            .word	0
35721                                           ! 7030                                3840,
35722 8CB1                      0F00            .word	$F00
35723                                           ! 7031   
35724                                           ! 7031                           0,
35725 8CB3                        00            .byte	0
35726                                           ! 7032                             0,
35727 8CB4                        00            .byte	0
35728                                           ! 7033                           5,
35729 8CB5                        05            .byte	5
35730                                           ! 7034                                11,
35731 8CB6                        0B            .byte	$B
35732                                           ! 7035                             6,
35733 8CB7                        06            .byte	6
35734                                           ! 7036                                  5,
35735 8CB8                        05            .byte	5
35736                                           ! 7037                            5,
35737 8CB9                        05            .byte	5
35738                                           ! 7038                                 0,
35739 8CBA                        00            .byte	0
35740                                           ! 7039                            0,
35741 8CBB                        00            .byte	0
35742                                           ! 7040                                 0,
35743 8CBC                        00            .byte	0
35744                                           ! 7041                          0,
35745 8CBD                      0000            .word	0
35746 8CBF                      0000            .word	0
35747                                           ! 7042 } },
35748                                           ! 7043 { 0x0188,
35749 8CC1                      0188            .word	$188
35750                                           ! 7044 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35751 8CC3                      009B            .word	$9B
35752                                           ! 7045                           0x01 | 0x02 | 0x04,
35753 8CC5                        07            .byte	7
35754                                           ! 7046                           0,
35755 8CC6                        00            .byte	0
35756                                           ! 7047                           64,
35757 8CC7                      0040            .word	$40
35758                                           ! 7048                    64,
35759 8CC9                      0040            .word	$40
35760                                           ! 7049                        0xA000,
35761 8CCB                      A000            .word	$A000
35762                                           ! 7050                        0x0000,
35763 8CCD                      0000            .word	0
35764                                           ! 7051                       0,
35765 8CCF                      0000            .word	0
35766 8CD1                      0000            .word	0
35767                                           ! 7052                             5760,
35768 8CD3                      1680            .word	$1680
35769                                           ! 7053                        1920,
35770 8CD5                      0780            .word	$780
35771                                           ! 7054                        1200,
35772 8CD7                      04B0            .word	$4B0
35773                                           ! 7055                      8,
35774 8CD9                        08            .byte	8
35775                                           ! 7056                      16,
35776 8CDA                        10            .byte	$10
35777                                           ! 7057                           1,
35778 8CDB                        01            .byte	1
35779                                           ! 7058                         24,
35780 8CDC                        18            .byte	$18
35781                                           ! 7059                          106,
35782 8CDD                        6A            .byte	$6A
35783                                           ! 7060                        0x06,
35784 8CDE                        06            .byte	6
35785                                           ! 7061                     0,
35786 8CDF                        00            .byte	0
35787                                           ! 7062                               1,
35788 8CE0                        01            .byte	1
35789                                           ! 7063                          0,
35790 8CE1                        00            .byte	0
35791                                           ! 7064                        8,
35792 8CE2                        08            .byte	8
35793                                           ! 7065                             16,
35794 8CE3                        10            .byte	$10
35795                                           ! 7066                          8,
35796 8CE4                        08            .byte	8
35797                                           ! 7067                               8,
35798 8CE5                        08            .byte	8
35799                                           ! 7068                         8,
35800 8CE6                        08            .byte	8
35801                                           ! 7069                              0,
35802 8CE7                        00            .byte	0
35803                                           ! 7070                         0,
35804 8CE8                        00            .byte	0
35805                                           ! 7071                              0,
35806 8CE9                        00            .byte	0
35807                                           ! 7072                                0,
35808 8CEA                        00            .byte	0
35809                                           ! 7073                        0xE0000000,
35810 8CEB                      0000            .word	0
35811 8CED                      E000            .word	$E000
35812                                           ! 7074                               0,
35813 8CEF                      0000            .word	0
35814 8CF1                      0000            .word	0
35815                                           ! 7075                             0,
35816 8CF3                      0000            .word	0
35817                                           ! 7076                                5760,
35818 8CF5                      1680            .word	$1680
35819                                           ! 7077                             0,
35820 8CF7                        00            .byte	0
35821                                           ! 7078                             0,
35822 8CF8                        00            .byte	0
35823                                           ! 7079                           8,
35824 8CF9                        08            .byte	8
35825                                           ! 7080                                16,
35826 8CFA                        10            .byte	$10
35827                                           ! 7081                             8,
35828 8CFB                        08            .byte	8
35829                                           ! 7082                                  8,
35830 8CFC                        08            .byte	8
35831                                           ! 7083                            8,
35832 8CFD                        08            .byte	8
35833                                           ! 7084                                 0,
35834 8CFE                        00            .byte	0
35835                                           ! 7085                            0,
35836 8CFF                        00            .byte	0
35837                                           ! 7086                                 0,
35838 8D00                        00            .byte	0
35839                                           ! 7087                          0,
35840 8D01                      0000            .word	0
35841 8D03                      0000            .word	0
35842                                           ! 7088 } },
35843                                           ! 7089 { 0x0189,
35844 8D05                      0189            .word	$189
35845                                           ! 7090 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35846 8D07                      009B            .word	$9B
35847                                           ! 7091                           0x01 | 0x02 | 0x04,
35848 8D09                        07            .byte	7
35849                                           ! 7092                           0,
35850 8D0A                        00            .byte	0
35851                                           ! 7093                           64,
35852 8D0B                      0040            .word	$40
35853                                           ! 7094                    64,
35854 8D0D                      0040            .word	$40
35855                                           ! 7095                        0xA000,
35856 8D0F                      A000            .word	$A000
35857                                           ! 7096                        0x0000,
35858 8D11                      0000            .word	0
35859                                           ! 7097                       0,
35860 8D13                      0000            .word	0
35861 8D15                      0000            .word	0
35862                                           ! 7098                             7680,
35863 8D17                      1E00            .word	$1E00
35864                                           ! 7099               
35865                                           ! 7099          1920,
35866 8D19                      0780            .word	$780
35867                                           ! 7100                        1200,
35868 8D1B                      04B0            .word	$4B0
35869                                           ! 7101                      8,
35870 8D1D                        08            .byte	8
35871                                           ! 7102                      16,
35872 8D1E                        10            .byte	$10
35873                                           ! 7103                           1,
35874 8D1F                        01            .byte	1
35875                                           ! 7104                         32,
35876 8D20                        20            .byte	$20
35877                                           ! 7105                          141,
35878 8D21                        8D            .byte	$8D
35879                                           ! 7106                        0x06,
35880 8D22                        06            .byte	6
35881                                           ! 7107                     0,
35882 8D23                        00            .byte	0
35883                                           ! 7108                               0,
35884 8D24                        00            .byte	0
35885                                           ! 7109                          0,
35886 8D25                        00            .byte	0
35887                                           ! 7110                        8,
35888 8D26                        08            .byte	8
35889                                           ! 7111                             16,
35890 8D27                        10            .byte	$10
35891                                           ! 7112                          8,
35892 8D28                        08            .byte	8
35893                                           ! 7113                               8,
35894 8D29                        08            .byte	8
35895                                           ! 7114                         8,
35896 8D2A                        08            .byte	8
35897                                           ! 7115                              0,
35898 8D2B                        00            .byte	0
35899                                           ! 7116                         8,
35900 8D2C                        08            .byte	8
35901                                           ! 7117                              24,
35902 8D2D                        18            .byte	$18
35903                                           ! 7118                                0x02,
35904 8D2E                        02            .byte	2
35905                                           ! 7119                        0xE0000000,
35906 8D2F                      0000            .word	0
35907 8D31                      E000            .word	$E000
35908                                           ! 7120                               0,
35909 8D33                      0000            .word	0
35910 8D35                      0000            .word	0
35911                                           ! 7121                             0,
35912 8D37                      0000            .word	0
35913                                           ! 7122                                7680,
35914 8D39                      1E00            .word	$1E00
35915                                           ! 7123                             0,
35916 8D3B                        00            .byte	0
35917                                           ! 7124                             0,
35918 8D3C                        00            .byte	0
35919                                           ! 7125                           8,
35920 8D3D                        08            .byte	8
35921                                           ! 7126                                16,
35922 8D3E                        10            .byte	$10
35923                                           ! 7127                             8,
35924 8D3F                        08            .byte	8
35925                                           ! 7128                                  8,
35926 8D40                        08            .byte	8
35927                                           ! 7129                            8,
35928 8D41                        08            .byte	8
35929                                           ! 7130                                 0,
35930 8D42                        00            .byte	0
35931                                           ! 7131                            8,
35932 8D43                        08            .byte	8
35933                                           ! 7132                                 24,
35934 8D44                        18            .byte	$18
35935                                           ! 7133                          0,
35936 8D45                      0000            .word	0
35937 8D47                      0000            .word	0
35938                                           ! 7134 } },
35939                                           ! 7135 { 0x018a,
35940 8D49                      018A            .word	$18A
35941                                           ! 7136 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35942 8D4B                      009B            .word	$9B
35943                                           ! 7137                           0x01 | 0x02 | 0x04,
35944 8D4D                        07            .byte	7
35945                                           ! 7138                           0,
35946 8D4E                        00            .byte	0
35947                                           ! 7139                           64,
35948 8D4F                      0040            .word	$40
35949                                           ! 7140                    64,
35950 8D51                      0040            .word	$40
35951                                           ! 7141                        0xA000,
35952 8D53                      A000            .word	$A000
35953                                           ! 7142                        0x0000,
35954 8D55                      0000            .word	0
35955                                           ! 7143                       0,
35956 8D57                      0000            .word	0
35957 8D59                      0000            .word	0
35958                                           ! 7144                             5120,
35959 8D5B                      1400            .word	$1400
35960                                           ! 7145                        2560,
35961 8D5D                      0A00            .word	$A00
35962                                           ! 7146                        1600,
35963 8D5F                      0640            .word	$640
35964                                           ! 7147                      8,
35965 8D61                        08            .byte	8
35966                                           ! 7148                      16,
35967 8D62                        10            .byte	$10
35968                                           ! 7149                           1,
35969 8D63                        01            .byte	1
35970                                           ! 7150                         16,
35971 8D64                        10            .byte	$10
35972                                           ! 7151                          125,
35973 8D65                        7D            .byte	$7D
35974                                           ! 7152                        0x06,
35975 8D66                        06            .byte	6
35976                                           ! 7153                     0,
35977 8D67                        00            .byte	0
35978                                           ! 7154                               1,
35979 8D68                        01            .byte	1
35980                                           ! 7155                          0,
35981 8D69                        00            .byte	0
35982                                           ! 7156                        5,
35983 8D6A                        05            .byte	5
35984                                           ! 7157                             11,
35985 8D6B                        0B            .byte	$B
35986                                           ! 7158                          6,
35987 8D6C                        06            .byte	6
35988                                           ! 7159                               5,
35989 8D6D                        05            .byte	5
35990                                           ! 7160                         5,
35991 8D6E                        05            .byte	5
35992                                           ! 7161                              0,
35993 8D6F                        00            .byte	0
35994                                           ! 7162                         0,
35995 8D70                        00            .byte	0
35996                                           ! 7163                              0,
35997 8D71                        00            .byte	0
35998                                           ! 7164                                0,
35999 8D72                        00            .byte	0
36000                                           ! 7165                        0xE0000000,
36001 8D73                      0000            .word	0
36002 8D75                      E000            .word	$E000
36003                                           ! 7166                               0,
36004 8D77                      0000            .word	0
36005 8D79                      0000            .word	0
36006                                           ! 7167                             0,
36007 8D7B                      0000            .word	0
36008                                           ! 7168      
36009                                           ! 7168                           5120,
36010 8D7D                      1400            .word	$1400
36011                                           ! 7169                             0,
36012 8D7F                        00            .byte	0
36013                                           ! 7170                             0,
36014 8D80                        00            .byte	0
36015                                           ! 7171                           5,
36016 8D81                        05            .byte	5
36017                                           ! 7172                                11,
36018 8D82                        0B            .byte	$B
36019                                           ! 7173                             6,
36020 8D83                        06            .byte	6
36021                                           ! 7174                                  5,
36022 8D84                        05            .byte	5
36023                                           ! 7175                            5,
36024 8D85                        05            .byte	5
36025                                           ! 7176                                 0,
36026 8D86                        00            .byte	0
36027                                           ! 7177                            0,
36028 8D87                        00            .byte	0
36029                                           ! 7178                                 0,
36030 8D88                        00            .byte	0
36031                                           ! 7179                          0,
36032 8D89                      0000            .word	0
36033 8D8B                      0000            .word	0
36034                                           ! 7180 } },
36035                                           ! 7181 { 0x018b,
36036 8D8D                      018B            .word	$18B
36037                                           ! 7182 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36038 8D8F                      009B            .word	$9B
36039                                           ! 7183                           0x01 | 0x02 | 0x04,
36040 8D91                        07            .byte	7
36041                                           ! 7184                           0,
36042 8D92                        00            .byte	0
36043                                           ! 7185                           64,
36044 8D93                      0040            .word	$40
36045                                           ! 7186                    64,
36046 8D95                      0040            .word	$40
36047                                           ! 7187                        0xA000,
36048 8D97                      A000            .word	$A000
36049                                           ! 7188                        0x0000,
36050 8D99                      0000            .word	0
36051                                           ! 7189                       0,
36052 8D9B                      0000            .word	0
36053 8D9D                      0000            .word	0
36054                                           ! 7190                             7680,
36055 8D9F                      1E00            .word	$1E00
36056                                           ! 7191                        2560,
36057 8DA1                      0A00            .word	$A00
36058                                           ! 7192                        1600,
36059 8DA3                      0640            .word	$640
36060                                           ! 7193                      8,
36061 8DA5                        08            .byte	8
36062                                           ! 7194                      16,
36063 8DA6                        10            .byte	$10
36064                                           ! 7195                           1,
36065 8DA7                        01            .byte	1
36066                                           ! 7196                         24,
36067 8DA8                        18            .byte	$18
36068                                           ! 7197                          188,
36069 8DA9                        BC            .byte	$BC
36070                                           ! 7198                        0x06,
36071 8DAA                        06            .byte	6
36072                                           ! 7199                     0,
36073 8DAB                        00            .byte	0
36074                                           ! 7200                               0,
36075 8DAC                        00            .byte	0
36076                                           ! 7201                          0,
36077 8DAD                        00            .byte	0
36078                                           ! 7202                        8,
36079 8DAE                        08            .byte	8
36080                                           ! 7203                             16,
36081 8DAF                        10            .byte	$10
36082                                           ! 7204                          8,
36083 8DB0                        08            .byte	8
36084                                           ! 7205                               8,
36085 8DB1                        08            .byte	8
36086                                           ! 7206                         8,
36087 8DB2                        08            .byte	8
36088                                           ! 7207                              0,
36089 8DB3                        00            .byte	0
36090                                           ! 7208                         0,
36091 8DB4                        00            .byte	0
36092                                           ! 7209                              0,
36093 8DB5                        00            .byte	0
36094                                           ! 7210                                0,
36095 8DB6                        00            .byte	0
36096                                           ! 7211                        0xE0000000,
36097 8DB7                      0000            .word	0
36098 8DB9                      E000            .word	$E000
36099                                           ! 7212                               0,
36100 8DBB                      0000            .word	0
36101 8DBD                      0000            .word	0
36102                                           ! 7213                             0,
36103 8DBF                      0000            .word	0
36104                                           ! 7214                                7680,
36105 8DC1                      1E00            .word	$1E00
36106                                           ! 7215                             0,
36107 8DC3                        00            .byte	0
36108                                           ! 7216                             0,
36109 8DC4                        00            .byte	0
36110                                           ! 7217                           8,
36111 8DC5                        08            .byte	8
36112                                           ! 7218                                16,
36113 8DC6                        10            .byte	$10
36114                                           ! 7219                             8,
36115 8DC7                        08            .byte	8
36116                                           ! 7220                                  8,
36117 8DC8                        08            .byte	8
36118                                           ! 7221                            8,
36119 8DC9                        08            .byte	8
36120                                           ! 7222                                 0,
36121 8DCA                        00            .byte	0
36122                                           ! 7223                            0,
36123 8DCB                        00            .byte	0
36124                                           ! 7224                                 0,
36125 8DCC                        00            .byte	0
36126                                           ! 7225                          0,
36127 8DCD                      0000            .word	0
36128 8DCF                      0000            .word	0
36129                                           ! 7226 } },
36130                                           ! 7227 { 0x018c,
36131 8DD1                      018C            .word	$18C
36132                                           ! 7228 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36133 8DD3                      009B            .word	$9B
36134                                           ! 7229                           0x01 | 0x02 | 0x04,
36135 8DD5                        07            .byte	7
36136                                           ! 7230                           0,
36137 8DD6                        00            .byte	0
36138                                           ! 7231                           64,
36139 8DD7                      0040            .word	$40
36140                                           ! 7232                    64,
36141 8DD9                      0040            .word	$40
36142                                           ! 7233                        0xA000,
36143 8DDB                      A000            .word	$A000
36144                                           ! 7234                        0x0000,
36145 8DDD                      0000            .word	0
36146                                           ! 7235                       0,
36147 8DDF                      0000            .word	0
36148 8DE1                      0000            .word	0
36149                                           ! 7236               
36150                                           ! 7236               10240,
36151 8DE3                      2800            .word	$2800
36152                                           ! 7237                        2560,
36153 8DE5                      0A00            .word	$A00
36154                                           ! 7238                        1600,
36155 8DE7                      0640            .word	$640
36156                                           ! 7239                      8,
36157 8DE9                        08            .byte	8
36158                                           ! 7240                      16,
36159 8DEA                        10            .byte	$10
36160                                           ! 7241                           1,
36161 8DEB                        01            .byte	1
36162                                           ! 7242                         32,
36163 8DEC                        20            .byte	$20
36164                                           ! 7243                          250,
36165 8DED                        FA            .byte	$FA
36166                                           ! 7244                        0x06,
36167 8DEE                        06            .byte	6
36168                                           ! 7245                     0,
36169 8DEF                        00            .byte	0
36170                                           ! 7246                               0,
36171 8DF0                        00            .byte	0
36172                                           ! 7247                          0,
36173 8DF1                        00            .byte	0
36174                                           ! 7248                        8,
36175 8DF2                        08            .byte	8
36176                                           ! 7249                             16,
36177 8DF3                        10            .byte	$10
36178                                           ! 7250                          8,
36179 8DF4                        08            .byte	8
36180                                           ! 7251                               8,
36181 8DF5                        08            .byte	8
36182                                           ! 7252                         8,
36183 8DF6                        08            .byte	8
36184                                           ! 7253                              0,
36185 8DF7                        00            .byte	0
36186                                           ! 7254                         8,
36187 8DF8                        08            .byte	8
36188                                           ! 7255                              24,
36189 8DF9                        18            .byte	$18
36190                                           ! 7256                                0x02,
36191 8DFA                        02            .byte	2
36192                                           ! 7257                        0xE0000000,
36193 8DFB                      0000            .word	0
36194 8DFD                      E000            .word	$E000
36195                                           ! 7258                               0,
36196 8DFF                      0000            .word	0
36197 8E01                      0000            .word	0
36198                                           ! 7259                             0,
36199 8E03                      0000            .word	0
36200                                           ! 7260                                10240,
36201 8E05                      2800            .word	$2800
36202                                           ! 7261                             0,
36203 8E07                        00            .byte	0
36204                                           ! 7262                             0,
36205 8E08                        00            .byte	0
36206                                           ! 7263                           8,
36207 8E09                        08            .byte	8
36208                                           ! 7264                                16,
36209 8E0A                        10            .byte	$10
36210                                           ! 7265                             8,
36211 8E0B                        08            .byte	8
36212                                           ! 7266                                  8,
36213 8E0C                        08            .byte	8
36214                                           ! 7267                            8,
36215 8E0D                        08            .byte	8
36216                                           ! 7268                                 0,
36217 8E0E                        00            .byte	0
36218                                           ! 7269                            8,
36219 8E0F                        08            .byte	8
36220                                           ! 7270                                 24,
36221 8E10                        18            .byte	$18
36222                                           ! 7271                          0,
36223 8E11                      0000            .word	0
36224 8E13                      0000            .word	0
36225                                           ! 7272 } },
36226                                           ! 7273 { 0x018d,
36227 8E15                      018D            .word	$18D
36228                                           ! 7274 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36229 8E17                      009B            .word	$9B
36230                                           ! 7275                           0x01 | 0x02 | 0x04,
36231 8E19                        07            .byte	7
36232                                           ! 7276                           0,
36233 8E1A                        00            .byte	0
36234                                           ! 7277                           64,
36235 8E1B                      0040            .word	$40
36236                                           ! 7278                    64,
36237 8E1D                      0040            .word	$40
36238                                           ! 7279                        0xA000,
36239 8E1F                      A000            .word	$A000
36240                                           ! 7280                        0x0000,
36241 8E21                      0000            .word	0
36242                                           ! 7281                       0,
36243 8E23                      0000            .word	0
36244 8E25                      0000            .word	0
36245                                           ! 7282                             640,
36246 8E27                      0280            .word	$280
36247                                           ! 7283                        320,
36248 8E29                      0140            .word	$140
36249                                           ! 7284                        480,
36250 8E2B                      01E0            .word	$1E0
36251                                           ! 7285                      8,
36252 8E2D                        08            .byte	8
36253                                           ! 7286                      16,
36254 8E2E                        10            .byte	$10
36255                                           ! 7287                           1,
36256 8E2F                        01            .byte	1
36257                                           ! 7288                         16,
36258 8E30                        10            .byte	$10
36259                                           ! 7289                          5,
36260 8E31                        05            .byte	5
36261                                           ! 7290                        0x06,
36262 8E32                        06            .byte	6
36263                                           ! 7291                     0,
36264 8E33                        00            .byte	0
36265                                           ! 7292                               53,
36266 8E34                        35            .byte	$35
36267                                           ! 7293                          0,
36268 8E35                        00            .byte	0
36269                                           ! 7294                        5,
36270 8E36                        05            .byte	5
36271                                           ! 7295                             11,
36272 8E37                        0B            .byte	$B
36273                                           ! 7296                          6,
36274 8E38                        06            .byte	6
36275                                           ! 7297                               5,
36276 8E39                        05            .byte	5
36277                                           ! 7298                         5,
36278 8E3A                        05            .byte	5
36279                                           ! 7299                              0,
36280 8E3B                        00            .byte	0
36281                                           ! 7300                         0,
36282 8E3C                        00            .byte	0
36283                                           ! 7301                              0,
36284 8E3D                        00            .byte	0
36285                                           ! 7302                                0,
36286 8E3E                        00            .byte	0
36287                                           ! 7303                        0xE0000000,
36288 8E3F                      0000            .word	0
36289 8E41                      E000            .word	$E000
36290                                           ! 7304                               0,
36291 8E43                      0000            .word	0
36292 8E45                      0000            .word	0
36293                                           ! 7305     
36294                                           ! 7305                         0,
36295 8E47                      0000            .word	0
36296                                           ! 7306                                640,
36297 8E49                      0280            .word	$280
36298                                           ! 7307                             0,
36299 8E4B                        00            .byte	0
36300                                           ! 7308                             0,
36301 8E4C                        00            .byte	0
36302                                           ! 7309                           5,
36303 8E4D                        05            .byte	5
36304                                           ! 7310                                11,
36305 8E4E                        0B            .byte	$B
36306                                           ! 7311                             6,
36307 8E4F                        06            .byte	6
36308                                           ! 7312                                  5,
36309 8E50                        05            .byte	5
36310                                           ! 7313                            5,
36311 8E51                        05            .byte	5
36312                                           ! 7314                                 0,
36313 8E52                        00            .byte	0
36314                                           ! 7315                            0,
36315 8E53                        00            .byte	0
36316                                           ! 7316                                 0,
36317 8E54                        00            .byte	0
36318                                           ! 7317                          0,
36319 8E55                      0000            .word	0
36320 8E57                      0000            .word	0
36321                                           ! 7318 } },
36322                                           ! 7319 { 0x018e,
36323 8E59                      018E            .word	$18E
36324                                           ! 7320 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36325 8E5B                      009B            .word	$9B
36326                                           ! 7321                           0x01 | 0x02 | 0x04,
36327 8E5D                        07            .byte	7
36328                                           ! 7322                           0,
36329 8E5E                        00            .byte	0
36330                                           ! 7323                           64,
36331 8E5F                      0040            .word	$40
36332                                           ! 7324                    64,
36333 8E61                      0040            .word	$40
36334                                           ! 7325                        0xA000,
36335 8E63                      A000            .word	$A000
36336                                           ! 7326                        0x0000,
36337 8E65                      0000            .word	0
36338                                           ! 7327                       0,
36339 8E67                      0000            .word	0
36340 8E69                      0000            .word	0
36341                                           ! 7328                             960,
36342 8E6B                      03C0            .word	$3C0
36343                                           ! 7329                        320,
36344 8E6D                      0140            .word	$140
36345                                           ! 7330                        480,
36346 8E6F                      01E0            .word	$1E0
36347                                           ! 7331                      8,
36348 8E71                        08            .byte	8
36349                                           ! 7332                      16,
36350 8E72                        10            .byte	$10
36351                                           ! 7333                           1,
36352 8E73                        01            .byte	1
36353                                           ! 7334                         24,
36354 8E74                        18            .byte	$18
36355                                           ! 7335                          8,
36356 8E75                        08            .byte	8
36357                                           ! 7336                        0x06,
36358 8E76                        06            .byte	6
36359                                           ! 7337                     0,
36360 8E77                        00            .byte	0
36361                                           ! 7338                               35,
36362 8E78                        23            .byte	$23
36363                                           ! 7339                          0,
36364 8E79                        00            .byte	0
36365                                           ! 7340                        8,
36366 8E7A                        08            .byte	8
36367                                           ! 7341                             16,
36368 8E7B                        10            .byte	$10
36369                                           ! 7342                          8,
36370 8E7C                        08            .byte	8
36371                                           ! 7343                               8,
36372 8E7D                        08            .byte	8
36373                                           ! 7344                         8,
36374 8E7E                        08            .byte	8
36375                                           ! 7345                              0,
36376 8E7F                        00            .byte	0
36377                                           ! 7346                         0,
36378 8E80                        00            .byte	0
36379                                           ! 7347                              0,
36380 8E81                        00            .byte	0
36381                                           ! 7348                                0,
36382 8E82                        00            .byte	0
36383                                           ! 7349                        0xE0000000,
36384 8E83                      0000            .word	0
36385 8E85                      E000            .word	$E000
36386                                           ! 7350                               0,
36387 8E87                      0000            .word	0
36388 8E89                      0000            .word	0
36389                                           ! 7351                             0,
36390 8E8B                      0000            .word	0
36391                                           ! 7352                                960,
36392 8E8D                      03C0            .word	$3C0
36393                                           ! 7353                             0,
36394 8E8F                        00            .byte	0
36395                                           ! 7354                             0,
36396 8E90                        00            .byte	0
36397                                           ! 7355                           8,
36398 8E91                        08            .byte	8
36399                                           ! 7356                                16,
36400 8E92                        10            .byte	$10
36401                                           ! 7357                             8,
36402 8E93                        08            .byte	8
36403                                           ! 7358                                  8,
36404 8E94                        08            .byte	8
36405                                           ! 7359                            8,
36406 8E95                        08            .byte	8
36407                                           ! 7360                                 0,
36408 8E96                        00            .byte	0
36409                                           ! 7361                            0,
36410 8E97                        00            .byte	0
36411                                           ! 7362                                 0,
36412 8E98                        00            .byte	0
36413                                           ! 7363                          0,
36414 8E99                      0000            .word	0
36415 8E9B                      0000            .word	0
36416                                           ! 7364 } },
36417                                           ! 7365 { 0x018f,
36418 8E9D                      018F            .word	$18F
36419                                           ! 7366 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36420 8E9F                      009B            .word	$9B
36421                                           ! 7367                           0x01 | 0x02 | 0x04,
36422 8EA1                        07            .byte	7
36423                                           ! 7368                           0,
36424 8EA2                        00            .byte	0
36425                                           ! 7369                           64,
36426 8EA3                      0040            .word	$40
36427                                           ! 7370                    64,
36428 8EA5                      0040            .word	$40
36429                                           ! 7371                        0xA000,
36430 8EA7                      A000            .word	$A000
36431                                           ! 7372                        0x0000,
36432 8EA9                      0000            .word	0
36433                                           ! 7373              
36434                                           ! 7373          0,
36435 8EAB                      0000            .word	0
36436 8EAD                      0000            .word	0
36437                                           ! 7374                             1280,
36438 8EAF                      0500            .word	$500
36439                                           ! 7375                        320,
36440 8EB1                      0140            .word	$140
36441                                           ! 7376                        480,
36442 8EB3                      01E0            .word	$1E0
36443                                           ! 7377                      8,
36444 8EB5                        08            .byte	8
36445                                           ! 7378                      16,
36446 8EB6                        10            .byte	$10
36447                                           ! 7379                           1,
36448 8EB7                        01            .byte	1
36449                                           ! 7380                         32,
36450 8EB8                        20            .byte	$20
36451                                           ! 7381                          10,
36452 8EB9                        0A            .byte	$A
36453                                           ! 7382                        0x06,
36454 8EBA                        06            .byte	6
36455                                           ! 7383                     0,
36456 8EBB                        00            .byte	0
36457                                           ! 7384                               26,
36458 8EBC                        1A            .byte	$1A
36459                                           ! 7385                          0,
36460 8EBD                        00            .byte	0
36461                                           ! 7386                        8,
36462 8EBE                        08            .byte	8
36463                                           ! 7387                             16,
36464 8EBF                        10            .byte	$10
36465                                           ! 7388                          8,
36466 8EC0                        08            .byte	8
36467                                           ! 7389                               8,
36468 8EC1                        08            .byte	8
36469                                           ! 7390                         8,
36470 8EC2                        08            .byte	8
36471                                           ! 7391                              0,
36472 8EC3                        00            .byte	0
36473                                           ! 7392                         8,
36474 8EC4                        08            .byte	8
36475                                           ! 7393                              24,
36476 8EC5                        18            .byte	$18
36477                                           ! 7394                                0x02,
36478 8EC6                        02            .byte	2
36479                                           ! 7395                        0xE0000000,
36480 8EC7                      0000            .word	0
36481 8EC9                      E000            .word	$E000
36482                                           ! 7396                               0,
36483 8ECB                      0000            .word	0
36484 8ECD                      0000            .word	0
36485                                           ! 7397                             0,
36486 8ECF                      0000            .word	0
36487                                           ! 7398                                1280,
36488 8ED1                      0500            .word	$500
36489                                           ! 7399                             0,
36490 8ED3                        00            .byte	0
36491                                           ! 7400                             0,
36492 8ED4                        00            .byte	0
36493                                           ! 7401                           8,
36494 8ED5                        08            .byte	8
36495                                           ! 7402                                16,
36496 8ED6                        10            .byte	$10
36497                                           ! 7403                             8,
36498 8ED7                        08            .byte	8
36499                                           ! 7404                                  8,
36500 8ED8                        08            .byte	8
36501                                           ! 7405                            8,
36502 8ED9                        08            .byte	8
36503                                           ! 7406                                 0,
36504 8EDA                        00            .byte	0
36505                                           ! 7407                            8,
36506 8EDB                        08            .byte	8
36507                                           ! 7408                                 24,
36508 8EDC                        18            .byte	$18
36509                                           ! 7409                          0,
36510 8EDD                      0000            .word	0
36511 8EDF                      0000            .word	0
36512                                           ! 7410 } },
36513                                           ! 7411 { 0x0190,
36514 8EE1                      0190            .word	$190
36515                                           ! 7412 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36516 8EE3                      009B            .word	$9B
36517                                           ! 7413                           0x01 | 0x02 | 0x04,
36518 8EE5                        07            .byte	7
36519                                           ! 7414                           0,
36520 8EE6                        00            .byte	0
36521                                           ! 7415                           64,
36522 8EE7                      0040            .word	$40
36523                                           ! 7416                    64,
36524 8EE9                      0040            .word	$40
36525                                           ! 7417                        0xA000,
36526 8EEB                      A000            .word	$A000
36527                                           ! 7418                        0x0000,
36528 8EED                      0000            .word	0
36529                                           ! 7419                       0,
36530 8EEF                      0000            .word	0
36531 8EF1                      0000            .word	0
36532                                           ! 7420                             960,
36533 8EF3                      03C0            .word	$3C0
36534                                           ! 7421                        480,
36535 8EF5                      01E0            .word	$1E0
36536                                           ! 7422                        800,
36537 8EF7                      0320            .word	$320
36538                                           ! 7423                      8,
36539 8EF9                        08            .byte	8
36540                                           ! 7424                      16,
36541 8EFA                        10            .byte	$10
36542                                           ! 7425                           1,
36543 8EFB                        01            .byte	1
36544                                           ! 7426                         16,
36545 8EFC                        10            .byte	$10
36546                                           ! 7427                          12,
36547 8EFD                        0C            .byte	$C
36548                                           ! 7428                        0x06,
36549 8EFE                        06            .byte	6
36550                                           ! 7429                     0,
36551 8EFF                        00            .byte	0
36552                                           ! 7430                               20,
36553 8F00                        14            .byte	$14
36554                                           ! 7431                          0,
36555 8F01                        00            .byte	0
36556                                           ! 7432                        5,
36557 8F02                        05            .byte	5
36558                                           ! 7433                             11,
36559 8F03                        0B            .byte	$B
36560                                           ! 7434                          6,
36561 8F04                        06            .byte	6
36562                                           ! 7435                               5,
36563 8F05                        05            .byte	5
36564                                           ! 7436                         5,
36565 8F06                        05            .byte	5
36566                                           ! 7437                              0,
36567 8F07                        00            .byte	0
36568                                           ! 7438                         0,
36569 8F08                        00            .byte	0
36570                                           ! 7439                              0,
36571 8F09                        00            .byte	0
36572                                           ! 7440                                0,
36573 8F0A                        00            .byte	0
36574                                           ! 7441                        0xE0000000,
36575 8F0B                      0000            .word	0
36576 8F0D                      E000            .word	$E000
36577                                           ! 7442               
36578                                           ! 7442                 0,
36579 8F0F                      0000            .word	0
36580 8F11                      0000            .word	0
36581                                           ! 7443                             0,
36582 8F13                      0000            .word	0
36583                                           ! 7444                                960,
36584 8F15                      03C0            .word	$3C0
36585                                           ! 7445                             0,
36586 8F17                        00            .byte	0
36587                                           ! 7446                             0,
36588 8F18                        00            .byte	0
36589                                           ! 7447                           5,
36590 8F19                        05            .byte	5
36591                                           ! 7448                                11,
36592 8F1A                        0B            .byte	$B
36593                                           ! 7449                             6,
36594 8F1B                        06            .byte	6
36595                                           ! 7450                                  5,
36596 8F1C                        05            .byte	5
36597                                           ! 7451                            5,
36598 8F1D                        05            .byte	5
36599                                           ! 7452                                 0,
36600 8F1E                        00            .byte	0
36601                                           ! 7453                            0,
36602 8F1F                        00            .byte	0
36603                                           ! 7454                                 0,
36604 8F20                        00            .byte	0
36605                                           ! 7455                          0,
36606 8F21                      0000            .word	0
36607 8F23                      0000            .word	0
36608                                           ! 7456 } },
36609                                           ! 7457 { 0x0191,
36610 8F25                      0191            .word	$191
36611                                           ! 7458 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36612 8F27                      009B            .word	$9B
36613                                           ! 7459                           0x01 | 0x02 | 0x04,
36614 8F29                        07            .byte	7
36615                                           ! 7460                           0,
36616 8F2A                        00            .byte	0
36617                                           ! 7461                           64,
36618 8F2B                      0040            .word	$40
36619                                           ! 7462                    64,
36620 8F2D                      0040            .word	$40
36621                                           ! 7463                        0xA000,
36622 8F2F                      A000            .word	$A000
36623                                           ! 7464                        0x0000,
36624 8F31                      0000            .word	0
36625                                           ! 7465                       0,
36626 8F33                      0000            .word	0
36627 8F35                      0000            .word	0
36628                                           ! 7466                             1440,
36629 8F37                      05A0            .word	$5A0
36630                                           ! 7467                        480,
36631 8F39                      01E0            .word	$1E0
36632                                           ! 7468                        800,
36633 8F3B                      0320            .word	$320
36634                                           ! 7469                      8,
36635 8F3D                        08            .byte	8
36636                                           ! 7470                      16,
36637 8F3E                        10            .byte	$10
36638                                           ! 7471                           1,
36639 8F3F                        01            .byte	1
36640                                           ! 7472                         24,
36641 8F40                        18            .byte	$18
36642                                           ! 7473                          18,
36643 8F41                        12            .byte	$12
36644                                           ! 7474                        0x06,
36645 8F42                        06            .byte	6
36646                                           ! 7475                     0,
36647 8F43                        00            .byte	0
36648                                           ! 7476                               13,
36649 8F44                        0D            .byte	$D
36650                                           ! 7477                          0,
36651 8F45                        00            .byte	0
36652                                           ! 7478                        8,
36653 8F46                        08            .byte	8
36654                                           ! 7479                             16,
36655 8F47                        10            .byte	$10
36656                                           ! 7480                          8,
36657 8F48                        08            .byte	8
36658                                           ! 7481                               8,
36659 8F49                        08            .byte	8
36660                                           ! 7482                         8,
36661 8F4A                        08            .byte	8
36662                                           ! 7483                              0,
36663 8F4B                        00            .byte	0
36664                                           ! 7484                         0,
36665 8F4C                        00            .byte	0
36666                                           ! 7485                              0,
36667 8F4D                        00            .byte	0
36668                                           ! 7486                                0,
36669 8F4E                        00            .byte	0
36670                                           ! 7487                        0xE0000000,
36671 8F4F                      0000            .word	0
36672 8F51                      E000            .word	$E000
36673                                           ! 7488                               0,
36674 8F53                      0000            .word	0
36675 8F55                      0000            .word	0
36676                                           ! 7489                             0,
36677 8F57                      0000            .word	0
36678                                           ! 7490                                1440,
36679 8F59                      05A0            .word	$5A0
36680                                           ! 7491                             0,
36681 8F5B                        00            .byte	0
36682                                           ! 7492                             0,
36683 8F5C                        00            .byte	0
36684                                           ! 7493                           8,
36685 8F5D                        08            .byte	8
36686                                           ! 7494                                16,
36687 8F5E                        10            .byte	$10
36688                                           ! 7495                             8,
36689 8F5F                        08            .byte	8
36690                                           ! 7496                                  8,
36691 8F60                        08            .byte	8
36692                                           ! 7497                            8,
36693 8F61                        08            .byte	8
36694                                           ! 7498                                 0,
36695 8F62                        00            .byte	0
36696                                           ! 7499                            0,
36697 8F63                        00            .byte	0
36698                                           ! 7500                                 0,
36699 8F64                        00            .byte	0
36700                                           ! 7501                          0,
36701 8F65                      0000            .word	0
36702 8F67                      0000            .word	0
36703                                           ! 7502 } },
36704                                           ! 7503 { 0x0192,
36705 8F69                      0192            .word	$192
36706                                           ! 7504 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36707 8F6B                      009B            .word	$9B
36708                                           ! 7505                           0x01 | 0x02 | 0x04,
36709 8F6D                        07            .byte	7
36710                                           ! 7506                           0,
36711 8F6E                        00            .byte	0
36712                                           ! 7507                           64,
36713 8F6F                      0040            .word	$40
36714                                           ! 7508                    64,
36715 8F71                      0040            .word	$40
36716                                           ! 7509                        0xA000,
36717 8F73                      A000            .word	$A000
36718                                           ! 7510                   
36719                                           ! 7510      0x0000,
36720 8F75                      0000            .word	0
36721                                           ! 7511                       0,
36722 8F77                      0000            .word	0
36723 8F79                      0000            .word	0
36724                                           ! 7512                             1920,
36725 8F7B                      0780            .word	$780
36726                                           ! 7513                        480,
36727 8F7D                      01E0            .word	$1E0
36728                                           ! 7514                        800,
36729 8F7F                      0320            .word	$320
36730                                           ! 7515                      8,
36731 8F81                        08            .byte	8
36732                                           ! 7516                      16,
36733 8F82                        10            .byte	$10
36734                                           ! 7517                           1,
36735 8F83                        01            .byte	1
36736                                           ! 7518                         32,
36737 8F84                        20            .byte	$20
36738                                           ! 7519                          24,
36739 8F85                        18            .byte	$18
36740                                           ! 7520                        0x06,
36741 8F86                        06            .byte	6
36742                                           ! 7521                     0,
36743 8F87                        00            .byte	0
36744                                           ! 7522                               9,
36745 8F88                        09            .byte	9
36746                                           ! 7523                          0,
36747 8F89                        00            .byte	0
36748                                           ! 7524                        8,
36749 8F8A                        08            .byte	8
36750                                           ! 7525                             16,
36751 8F8B                        10            .byte	$10
36752                                           ! 7526                          8,
36753 8F8C                        08            .byte	8
36754                                           ! 7527                               8,
36755 8F8D                        08            .byte	8
36756                                           ! 7528                         8,
36757 8F8E                        08            .byte	8
36758                                           ! 7529                              0,
36759 8F8F                        00            .byte	0
36760                                           ! 7530                         8,
36761 8F90                        08            .byte	8
36762                                           ! 7531                              24,
36763 8F91                        18            .byte	$18
36764                                           ! 7532                                0x02,
36765 8F92                        02            .byte	2
36766                                           ! 7533                        0xE0000000,
36767 8F93                      0000            .word	0
36768 8F95                      E000            .word	$E000
36769                                           ! 7534                               0,
36770 8F97                      0000            .word	0
36771 8F99                      0000            .word	0
36772                                           ! 7535                             0,
36773 8F9B                      0000            .word	0
36774                                           ! 7536                                1920,
36775 8F9D                      0780            .word	$780
36776                                           ! 7537                             0,
36777 8F9F                        00            .byte	0
36778                                           ! 7538                             0,
36779 8FA0                        00            .byte	0
36780                                           ! 7539                           8,
36781 8FA1                        08            .byte	8
36782                                           ! 7540                                16,
36783 8FA2                        10            .byte	$10
36784                                           ! 7541                             8,
36785 8FA3                        08            .byte	8
36786                                           ! 7542                                  8,
36787 8FA4                        08            .byte	8
36788                                           ! 7543                            8,
36789 8FA5                        08            .byte	8
36790                                           ! 7544                                 0,
36791 8FA6                        00            .byte	0
36792                                           ! 7545                            8,
36793 8FA7                        08            .byte	8
36794                                           ! 7546                                 24,
36795 8FA8                        18            .byte	$18
36796                                           ! 7547                          0,
36797 8FA9                      0000            .word	0
36798 8FAB                      0000            .word	0
36799                                           ! 7548 } },
36800                                           ! 7549 { 0x0193,
36801 8FAD                      0193            .word	$193
36802                                           ! 7550 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36803 8FAF                      009B            .word	$9B
36804                                           ! 7551                           0x01 | 0x02 | 0x04,
36805 8FB1                        07            .byte	7
36806                                           ! 7552                           0,
36807 8FB2                        00            .byte	0
36808                                           ! 7553                           64,
36809 8FB3                      0040            .word	$40
36810                                           ! 7554                    64,
36811 8FB5                      0040            .word	$40
36812                                           ! 7555                        0xA000,
36813 8FB7                      A000            .word	$A000
36814                                           ! 7556                        0x0000,
36815 8FB9                      0000            .word	0
36816                                           ! 7557                       0,
36817 8FBB                      0000            .word	0
36818 8FBD                      0000            .word	0
36819                                           ! 7558                             960,
36820 8FBF                      03C0            .word	$3C0
36821                                           ! 7559                        480,
36822 8FC1                      01E0            .word	$1E0
36823                                           ! 7560                        854,
36824 8FC3                      0356            .word	$356
36825                                           ! 7561                      8,
36826 8FC5                        08            .byte	8
36827                                           ! 7562                      16,
36828 8FC6                        10            .byte	$10
36829                                           ! 7563                           1,
36830 8FC7                        01            .byte	1
36831                                           ! 7564                         16,
36832 8FC8                        10            .byte	$10
36833                                           ! 7565                          13,
36834 8FC9                        0D            .byte	$D
36835                                           ! 7566                        0x06,
36836 8FCA                        06            .byte	6
36837                                           ! 7567                     0,
36838 8FCB                        00            .byte	0
36839                                           ! 7568                               19,
36840 8FCC                        13            .byte	$13
36841                                           ! 7569                          0,
36842 8FCD                        00            .byte	0
36843                                           ! 7570                        5,
36844 8FCE                        05            .byte	5
36845                                           ! 7571                             11,
36846 8FCF                        0B            .byte	$B
36847                                           ! 7572                          6,
36848 8FD0                        06            .byte	6
36849                                           ! 7573                               5,
36850 8FD1                        05            .byte	5
36851                                           ! 7574                         5,
36852 8FD2                        05            .byte	5
36853                                           ! 7575                              0,
36854 8FD3                        00            .byte	0
36855                                           ! 7576                         0,
36856 8FD4                        00            .byte	0
36857                                           ! 7577                              0,
36858 8FD5                        00            .byte	0
36859                                           ! 7578                                0,
36860 8FD6                        00            .byte	0
36861                                           ! 7579                        0
36862                                           ! 7579 xE0000000,
36863 8FD7                      0000            .word	0
36864 8FD9                      E000            .word	$E000
36865                                           ! 7580                               0,
36866 8FDB                      0000            .word	0
36867 8FDD                      0000            .word	0
36868                                           ! 7581                             0,
36869 8FDF                      0000            .word	0
36870                                           ! 7582                                960,
36871 8FE1                      03C0            .word	$3C0
36872                                           ! 7583                             0,
36873 8FE3                        00            .byte	0
36874                                           ! 7584                             0,
36875 8FE4                        00            .byte	0
36876                                           ! 7585                           5,
36877 8FE5                        05            .byte	5
36878                                           ! 7586                                11,
36879 8FE6                        0B            .byte	$B
36880                                           ! 7587                             6,
36881 8FE7                        06            .byte	6
36882                                           ! 7588                                  5,
36883 8FE8                        05            .byte	5
36884                                           ! 7589                            5,
36885 8FE9                        05            .byte	5
36886                                           ! 7590                                 0,
36887 8FEA                        00            .byte	0
36888                                           ! 7591                            0,
36889 8FEB                        00            .byte	0
36890                                           ! 7592                                 0,
36891 8FEC                        00            .byte	0
36892                                           ! 7593                          0,
36893 8FED                      0000            .word	0
36894 8FEF                      0000            .word	0
36895                                           ! 7594 } },
36896                                           ! 7595 { 0x0194,
36897 8FF1                      0194            .word	$194
36898                                           ! 7596 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36899 8FF3                      009B            .word	$9B
36900                                           ! 7597                           0x01 | 0x02 | 0x04,
36901 8FF5                        07            .byte	7
36902                                           ! 7598                           0,
36903 8FF6                        00            .byte	0
36904                                           ! 7599                           64,
36905 8FF7                      0040            .word	$40
36906                                           ! 7600                    64,
36907 8FF9                      0040            .word	$40
36908                                           ! 7601                        0xA000,
36909 8FFB                      A000            .word	$A000
36910                                           ! 7602                        0x0000,
36911 8FFD                      0000            .word	0
36912                                           ! 7603                       0,
36913 8FFF                      0000            .word	0
36914 9001                      0000            .word	0
36915                                           ! 7604                             1440,
36916 9003                      05A0            .word	$5A0
36917                                           ! 7605                        480,
36918 9005                      01E0            .word	$1E0
36919                                           ! 7606                        854,
36920 9007                      0356            .word	$356
36921                                           ! 7607                      8,
36922 9009                        08            .byte	8
36923                                           ! 7608                      16,
36924 900A                        10            .byte	$10
36925                                           ! 7609                           1,
36926 900B                        01            .byte	1
36927                                           ! 7610                         24,
36928 900C                        18            .byte	$18
36929                                           ! 7611                          19,
36930 900D                        13            .byte	$13
36931                                           ! 7612                        0x06,
36932 900E                        06            .byte	6
36933                                           ! 7613                     0,
36934 900F                        00            .byte	0
36935                                           ! 7614                               12,
36936 9010                        0C            .byte	$C
36937                                           ! 7615                          0,
36938 9011                        00            .byte	0
36939                                           ! 7616                        8,
36940 9012                        08            .byte	8
36941                                           ! 7617                             16,
36942 9013                        10            .byte	$10
36943                                           ! 7618                          8,
36944 9014                        08            .byte	8
36945                                           ! 7619                               8,
36946 9015                        08            .byte	8
36947                                           ! 7620                         8,
36948 9016                        08            .byte	8
36949                                           ! 7621                              0,
36950 9017                        00            .byte	0
36951                                           ! 7622                         0,
36952 9018                        00            .byte	0
36953                                           ! 7623                              0,
36954 9019                        00            .byte	0
36955                                           ! 7624                                0,
36956 901A                        00            .byte	0
36957                                           ! 7625                        0xE0000000,
36958 901B                      0000            .word	0
36959 901D                      E000            .word	$E000
36960                                           ! 7626                               0,
36961 901F                      0000            .word	0
36962 9021                      0000            .word	0
36963                                           ! 7627                             0,
36964 9023                      0000            .word	0
36965                                           ! 7628                                1440,
36966 9025                      05A0            .word	$5A0
36967                                           ! 7629                             0,
36968 9027                        00            .byte	0
36969                                           ! 7630                             0,
36970 9028                        00            .byte	0
36971                                           ! 7631                           8,
36972 9029                        08            .byte	8
36973                                           ! 7632                                16,
36974 902A                        10            .byte	$10
36975                                           ! 7633                             8,
36976 902B                        08            .byte	8
36977                                           ! 7634                                  8,
36978 902C                        08            .byte	8
36979                                           ! 7635                            8,
36980 902D                        08            .byte	8
36981                                           ! 7636                                 0,
36982 902E                        00            .byte	0
36983                                           ! 7637                            0,
36984 902F                        00            .byte	0
36985                                           ! 7638                                 0,
36986 9030                        00            .byte	0
36987                                           ! 7639                          0,
36988 9031                      0000            .word	0
36989 9033                      0000            .word	0
36990                                           ! 7640 } },
36991                                           ! 7641 { 0x0195,
36992 9035                      0195            .word	$195
36993                                           ! 7642 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36994 9037                      009B            .word	$9B
36995                                           ! 7643                           0x01 | 0x02 | 0x04,
36996 9039                        07            .byte	7
36997                                           ! 7644                           0,
36998 903A                        00            .byte	0
36999                                           ! 7645                           64,
37000 903B                      0040            .word	$40
37001                                           ! 7646                    64,
37002 903D                      0040            .word	$40
37003                                           ! 7647                        0
37004                                           ! 7647 xA000,
37005 903F                      A000            .word	$A000
37006                                           ! 7648                        0x0000,
37007 9041                      0000            .word	0
37008                                           ! 7649                       0,
37009 9043                      0000            .word	0
37010 9045                      0000            .word	0
37011                                           ! 7650                             1920,
37012 9047                      0780            .word	$780
37013                                           ! 7651                        480,
37014 9049                      01E0            .word	$1E0
37015                                           ! 7652                        854,
37016 904B                      0356            .word	$356
37017                                           ! 7653                      8,
37018 904D                        08            .byte	8
37019                                           ! 7654                      16,
37020 904E                        10            .byte	$10
37021                                           ! 7655                           1,
37022 904F                        01            .byte	1
37023                                           ! 7656                         32,
37024 9050                        20            .byte	$20
37025                                           ! 7657                          26,
37026 9051                        1A            .byte	$1A
37027                                           ! 7658                        0x06,
37028 9052                        06            .byte	6
37029                                           ! 7659                     0,
37030 9053                        00            .byte	0
37031                                           ! 7660                               9,
37032 9054                        09            .byte	9
37033                                           ! 7661                          0,
37034 9055                        00            .byte	0
37035                                           ! 7662                        8,
37036 9056                        08            .byte	8
37037                                           ! 7663                             16,
37038 9057                        10            .byte	$10
37039                                           ! 7664                          8,
37040 9058                        08            .byte	8
37041                                           ! 7665                               8,
37042 9059                        08            .byte	8
37043                                           ! 7666                         8,
37044 905A                        08            .byte	8
37045                                           ! 7667                              0,
37046 905B                        00            .byte	0
37047                                           ! 7668                         8,
37048 905C                        08            .byte	8
37049                                           ! 7669                              24,
37050 905D                        18            .byte	$18
37051                                           ! 7670                                0x02,
37052 905E                        02            .byte	2
37053                                           ! 7671                        0xE0000000,
37054 905F                      0000            .word	0
37055 9061                      E000            .word	$E000
37056                                           ! 7672                               0,
37057 9063                      0000            .word	0
37058 9065                      0000            .word	0
37059                                           ! 7673                             0,
37060 9067                      0000            .word	0
37061                                           ! 7674                                1920,
37062 9069                      0780            .word	$780
37063                                           ! 7675                             0,
37064 906B                        00            .byte	0
37065                                           ! 7676                             0,
37066 906C                        00            .byte	0
37067                                           ! 7677                           8,
37068 906D                        08            .byte	8
37069                                           ! 7678                                16,
37070 906E                        10            .byte	$10
37071                                           ! 7679                             8,
37072 906F                        08            .byte	8
37073                                           ! 7680                                  8,
37074 9070                        08            .byte	8
37075                                           ! 7681                            8,
37076 9071                        08            .byte	8
37077                                           ! 7682                                 0,
37078 9072                        00            .byte	0
37079                                           ! 7683                            8,
37080 9073                        08            .byte	8
37081                                           ! 7684                                 24,
37082 9074                        18            .byte	$18
37083                                           ! 7685                          0,
37084 9075                      0000            .word	0
37085 9077                      0000            .word	0
37086                                           ! 7686 } },
37087                                           ! 7687 { 0x0196,
37088 9079                      0196            .word	$196
37089                                           ! 7688 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37090 907B                      009B            .word	$9B
37091                                           ! 7689                           0x01 | 0x02 | 0x04,
37092 907D                        07            .byte	7
37093                                           ! 7690                           0,
37094 907E                        00            .byte	0
37095                                           ! 7691                           64,
37096 907F                      0040            .word	$40
37097                                           ! 7692                    64,
37098 9081                      0040            .word	$40
37099                                           ! 7693                        0xA000,
37100 9083                      A000            .word	$A000
37101                                           ! 7694                        0x0000,
37102 9085                      0000            .word	0
37103                                           ! 7695                       0,
37104 9087                      0000            .word	0
37105 9089                      0000            .word	0
37106                                           ! 7696                             1080,
37107 908B                      0438            .word	$438
37108                                           ! 7697                        540,
37109 908D                      021C            .word	$21C
37110                                           ! 7698                        960,
37111 908F                      03C0            .word	$3C0
37112                                           ! 7699                      8,
37113 9091                        08            .byte	8
37114                                           ! 7700                      16,
37115 9092                        10            .byte	$10
37116                                           ! 7701                           1,
37117 9093                        01            .byte	1
37118                                           ! 7702                         16,
37119 9094                        10            .byte	$10
37120                                           ! 7703                          16,
37121 9095                        10            .byte	$10
37122                                           ! 7704                        0x06,
37123 9096                        06            .byte	6
37124                                           ! 7705                     0,
37125 9097                        00            .byte	0
37126                                           ! 7706                               15,
37127 9098                        0F            .byte	$F
37128                                           ! 7707                          0,
37129 9099                        00            .byte	0
37130                                           ! 7708                        5,
37131 909A                        05            .byte	5
37132                                           ! 7709                             11,
37133 909B                        0B            .byte	$B
37134                                           ! 7710                          6,
37135 909C                        06            .byte	6
37136                                           ! 7711                               5,
37137 909D                        05            .byte	5
37138                                           ! 7712                         5,
37139 909E                        05            .byte	5
37140                                           ! 7713                              0,
37141 909F                        00            .byte	0
37142                                           ! 7714                         0,
37143 90A0                        00            .byte	0
37144                                           ! 7715                              0,
37145 90A1                        00            .byte	0
37146                                           ! 7716                                0
37147                                           ! 7716 ,
37148 90A2                        00            .byte	0
37149                                           ! 7717                        0xE0000000,
37150 90A3                      0000            .word	0
37151 90A5                      E000            .word	$E000
37152                                           ! 7718                               0,
37153 90A7                      0000            .word	0
37154 90A9                      0000            .word	0
37155                                           ! 7719                             0,
37156 90AB                      0000            .word	0
37157                                           ! 7720                                1080,
37158 90AD                      0438            .word	$438
37159                                           ! 7721                             0,
37160 90AF                        00            .byte	0
37161                                           ! 7722                             0,
37162 90B0                        00            .byte	0
37163                                           ! 7723                           5,
37164 90B1                        05            .byte	5
37165                                           ! 7724                                11,
37166 90B2                        0B            .byte	$B
37167                                           ! 7725                             6,
37168 90B3                        06            .byte	6
37169                                           ! 7726                                  5,
37170 90B4                        05            .byte	5
37171                                           ! 7727                            5,
37172 90B5                        05            .byte	5
37173                                           ! 7728                                 0,
37174 90B6                        00            .byte	0
37175                                           ! 7729                            0,
37176 90B7                        00            .byte	0
37177                                           ! 7730                                 0,
37178 90B8                        00            .byte	0
37179                                           ! 7731                          0,
37180 90B9                      0000            .word	0
37181 90BB                      0000            .word	0
37182                                           ! 7732 } },
37183                                           ! 7733 { 0x0197,
37184 90BD                      0197            .word	$197
37185                                           ! 7734 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37186 90BF                      009B            .word	$9B
37187                                           ! 7735                           0x01 | 0x02 | 0x04,
37188 90C1                        07            .byte	7
37189                                           ! 7736                           0,
37190 90C2                        00            .byte	0
37191                                           ! 7737                           64,
37192 90C3                      0040            .word	$40
37193                                           ! 7738                    64,
37194 90C5                      0040            .word	$40
37195                                           ! 7739                        0xA000,
37196 90C7                      A000            .word	$A000
37197                                           ! 7740                        0x0000,
37198 90C9                      0000            .word	0
37199                                           ! 7741                       0,
37200 90CB                      0000            .word	0
37201 90CD                      0000            .word	0
37202                                           ! 7742                             1620,
37203 90CF                      0654            .word	$654
37204                                           ! 7743                        540,
37205 90D1                      021C            .word	$21C
37206                                           ! 7744                        960,
37207 90D3                      03C0            .word	$3C0
37208                                           ! 7745                      8,
37209 90D5                        08            .byte	8
37210                                           ! 7746                      16,
37211 90D6                        10            .byte	$10
37212                                           ! 7747                           1,
37213 90D7                        01            .byte	1
37214                                           ! 7748                         24,
37215 90D8                        18            .byte	$18
37216                                           ! 7749                          24,
37217 90D9                        18            .byte	$18
37218                                           ! 7750                        0x06,
37219 90DA                        06            .byte	6
37220                                           ! 7751                     0,
37221 90DB                        00            .byte	0
37222                                           ! 7752                               9,
37223 90DC                        09            .byte	9
37224                                           ! 7753                          0,
37225 90DD                        00            .byte	0
37226                                           ! 7754                        8,
37227 90DE                        08            .byte	8
37228                                           ! 7755                             16,
37229 90DF                        10            .byte	$10
37230                                           ! 7756                          8,
37231 90E0                        08            .byte	8
37232                                           ! 7757                               8,
37233 90E1                        08            .byte	8
37234                                           ! 7758                         8,
37235 90E2                        08            .byte	8
37236                                           ! 7759                              0,
37237 90E3                        00            .byte	0
37238                                           ! 7760                         0,
37239 90E4                        00            .byte	0
37240                                           ! 7761                              0,
37241 90E5                        00            .byte	0
37242                                           ! 7762                                0,
37243 90E6                        00            .byte	0
37244                                           ! 7763                        0xE0000000,
37245 90E7                      0000            .word	0
37246 90E9                      E000            .word	$E000
37247                                           ! 7764                               0,
37248 90EB                      0000            .word	0
37249 90ED                      0000            .word	0
37250                                           ! 7765                             0,
37251 90EF                      0000            .word	0
37252                                           ! 7766                                1620,
37253 90F1                      0654            .word	$654
37254                                           ! 7767                             0,
37255 90F3                        00            .byte	0
37256                                           ! 7768                             0,
37257 90F4                        00            .byte	0
37258                                           ! 7769                           8,
37259 90F5                        08            .byte	8
37260                                           ! 7770                                16,
37261 90F6                        10            .byte	$10
37262                                           ! 7771                             8,
37263 90F7                        08            .byte	8
37264                                           ! 7772                                  8,
37265 90F8                        08            .byte	8
37266                                           ! 7773                            8,
37267 90F9                        08            .byte	8
37268                                           ! 7774                                 0,
37269 90FA                        00            .byte	0
37270                                           ! 7775                            0,
37271 90FB                        00            .byte	0
37272                                           ! 7776                                 0,
37273 90FC                        00            .byte	0
37274                                           ! 7777                          0,
37275 90FD                      0000            .word	0
37276 90FF                      0000            .word	0
37277                                           ! 7778 } },
37278                                           ! 7779 { 0x0198,
37279 9101                      0198            .word	$198
37280                                           ! 7780 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37281 9103                      009B            .word	$9B
37282                                           ! 7781                           0x01 | 0x02 | 0x04,
37283 9105                        07            .byte	7
37284                                           ! 7782                           0,
37285 9106                        00            .byte	0
37286                                           ! 7783                           64,
37287 9107                      0040            .word	$40
37288                                           ! 7784                    64
37289                                           ! 7784 ,
37290 9109                      0040            .word	$40
37291                                           ! 7785                        0xA000,
37292 910B                      A000            .word	$A000
37293                                           ! 7786                        0x0000,
37294 910D                      0000            .word	0
37295                                           ! 7787                       0,
37296 910F                      0000            .word	0
37297 9111                      0000            .word	0
37298                                           ! 7788                             2160,
37299 9113                      0870            .word	$870
37300                                           ! 7789                        540,
37301 9115                      021C            .word	$21C
37302                                           ! 7790                        960,
37303 9117                      03C0            .word	$3C0
37304                                           ! 7791                      8,
37305 9119                        08            .byte	8
37306                                           ! 7792                      16,
37307 911A                        10            .byte	$10
37308                                           ! 7793                           1,
37309 911B                        01            .byte	1
37310                                           ! 7794                         32,
37311 911C                        20            .byte	$20
37312                                           ! 7795                          32,
37313 911D                        20            .byte	$20
37314                                           ! 7796                        0x06,
37315 911E                        06            .byte	6
37316                                           ! 7797                     0,
37317 911F                        00            .byte	0
37318                                           ! 7798                               7,
37319 9120                        07            .byte	7
37320                                           ! 7799                          0,
37321 9121                        00            .byte	0
37322                                           ! 7800                        8,
37323 9122                        08            .byte	8
37324                                           ! 7801                             16,
37325 9123                        10            .byte	$10
37326                                           ! 7802                          8,
37327 9124                        08            .byte	8
37328                                           ! 7803                               8,
37329 9125                        08            .byte	8
37330                                           ! 7804                         8,
37331 9126                        08            .byte	8
37332                                           ! 7805                              0,
37333 9127                        00            .byte	0
37334                                           ! 7806                         8,
37335 9128                        08            .byte	8
37336                                           ! 7807                              24,
37337 9129                        18            .byte	$18
37338                                           ! 7808                                0x02,
37339 912A                        02            .byte	2
37340                                           ! 7809                        0xE0000000,
37341 912B                      0000            .word	0
37342 912D                      E000            .word	$E000
37343                                           ! 7810                               0,
37344 912F                      0000            .word	0
37345 9131                      0000            .word	0
37346                                           ! 7811                             0,
37347 9133                      0000            .word	0
37348                                           ! 7812                                2160,
37349 9135                      0870            .word	$870
37350                                           ! 7813                             0,
37351 9137                        00            .byte	0
37352                                           ! 7814                             0,
37353 9138                        00            .byte	0
37354                                           ! 7815                           8,
37355 9139                        08            .byte	8
37356                                           ! 7816                                16,
37357 913A                        10            .byte	$10
37358                                           ! 7817                             8,
37359 913B                        08            .byte	8
37360                                           ! 7818                                  8,
37361 913C                        08            .byte	8
37362                                           ! 7819                            8,
37363 913D                        08            .byte	8
37364                                           ! 7820                                 0,
37365 913E                        00            .byte	0
37366                                           ! 7821                            8,
37367 913F                        08            .byte	8
37368                                           ! 7822                                 24,
37369 9140                        18            .byte	$18
37370                                           ! 7823                          0,
37371 9141                      0000            .word	0
37372 9143                      0000            .word	0
37373                                           ! 7824 } },
37374                                           ! 7825 { 0x0199,
37375 9145                      0199            .word	$199
37376                                           ! 7826 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37377 9147                      009B            .word	$9B
37378                                           ! 7827                           0x01 | 0x02 | 0x04,
37379 9149                        07            .byte	7
37380                                           ! 7828                           0,
37381 914A                        00            .byte	0
37382                                           ! 7829                           64,
37383 914B                      0040            .word	$40
37384                                           ! 7830                    64,
37385 914D                      0040            .word	$40
37386                                           ! 7831                        0xA000,
37387 914F                      A000            .word	$A000
37388                                           ! 7832                        0x0000,
37389 9151                      0000            .word	0
37390                                           ! 7833                       0,
37391 9153                      0000            .word	0
37392 9155                      0000            .word	0
37393                                           ! 7834                             1440,
37394 9157                      05A0            .word	$5A0
37395                                           ! 7835                        720,
37396 9159                      02D0            .word	$2D0
37397                                           ! 7836                        1280,
37398 915B                      0500            .word	$500
37399                                           ! 7837                      8,
37400 915D                        08            .byte	8
37401                                           ! 7838                      16,
37402 915E                        10            .byte	$10
37403                                           ! 7839                           1,
37404 915F                        01            .byte	1
37405                                           ! 7840                         16,
37406 9160                        10            .byte	$10
37407                                           ! 7841                          29,
37408 9161                        1D            .byte	$1D
37409                                           ! 7842                        0x06,
37410 9162                        06            .byte	6
37411                                           ! 7843                     0,
37412 9163                        00            .byte	0
37413                                           ! 7844                               8,
37414 9164                        08            .byte	8
37415                                           ! 7845                          0,
37416 9165                        00            .byte	0
37417                                           ! 7846                        5,
37418 9166                        05            .byte	5
37419                                           ! 7847                             11,
37420 9167                        0B            .byte	$B
37421                                           ! 7848                          6,
37422 9168                        06            .byte	6
37423                                           ! 7849                               5,
37424 9169                        05            .byte	5
37425                                           ! 7850                         5,
37426 916A                        05            .byte	5
37427                                           ! 7851                              0,
37428 916B                        00            .byte	0
37429                                           ! 7852                         0,
37430 916C                        00            .byte	0
37431                                           ! 7853                              0,
37432 916D                        00            .byte	0
37433                                           ! 7854       
37434                                           ! 7854                          0,
37435 916E                        00            .byte	0
37436                                           ! 7855                        0xE0000000,
37437 916F                      0000            .word	0
37438 9171                      E000            .word	$E000
37439                                           ! 7856                               0,
37440 9173                      0000            .word	0
37441 9175                      0000            .word	0
37442                                           ! 7857                             0,
37443 9177                      0000            .word	0
37444                                           ! 7858                                1440,
37445 9179                      05A0            .word	$5A0
37446                                           ! 7859                             0,
37447 917B                        00            .byte	0
37448                                           ! 7860                             0,
37449 917C                        00            .byte	0
37450                                           ! 7861                           5,
37451 917D                        05            .byte	5
37452                                           ! 7862                                11,
37453 917E                        0B            .byte	$B
37454                                           ! 7863                             6,
37455 917F                        06            .byte	6
37456                                           ! 7864                                  5,
37457 9180                        05            .byte	5
37458                                           ! 7865                            5,
37459 9181                        05            .byte	5
37460                                           ! 7866                                 0,
37461 9182                        00            .byte	0
37462                                           ! 7867                            0,
37463 9183                        00            .byte	0
37464                                           ! 7868                                 0,
37465 9184                        00            .byte	0
37466                                           ! 7869                          0,
37467 9185                      0000            .word	0
37468 9187                      0000            .word	0
37469                                           ! 7870 } },
37470                                           ! 7871 { 0x019a,
37471 9189                      019A            .word	$19A
37472                                           ! 7872 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37473 918B                      009B            .word	$9B
37474                                           ! 7873                           0x01 | 0x02 | 0x04,
37475 918D                        07            .byte	7
37476                                           ! 7874                           0,
37477 918E                        00            .byte	0
37478                                           ! 7875                           64,
37479 918F                      0040            .word	$40
37480                                           ! 7876                    64,
37481 9191                      0040            .word	$40
37482                                           ! 7877                        0xA000,
37483 9193                      A000            .word	$A000
37484                                           ! 7878                        0x0000,
37485 9195                      0000            .word	0
37486                                           ! 7879                       0,
37487 9197                      0000            .word	0
37488 9199                      0000            .word	0
37489                                           ! 7880                             2160,
37490 919B                      0870            .word	$870
37491                                           ! 7881                        720,
37492 919D                      02D0            .word	$2D0
37493                                           ! 7882                        1280,
37494 919F                      0500            .word	$500
37495                                           ! 7883                      8,
37496 91A1                        08            .byte	8
37497                                           ! 7884                      16,
37498 91A2                        10            .byte	$10
37499                                           ! 7885                           1,
37500 91A3                        01            .byte	1
37501                                           ! 7886                         24,
37502 91A4                        18            .byte	$18
37503                                           ! 7887                          43,
37504 91A5                        2B            .byte	$2B
37505                                           ! 7888                        0x06,
37506 91A6                        06            .byte	6
37507                                           ! 7889                     0,
37508 91A7                        00            .byte	0
37509                                           ! 7890                               5,
37510 91A8                        05            .byte	5
37511                                           ! 7891                          0,
37512 91A9                        00            .byte	0
37513                                           ! 7892                        8,
37514 91AA                        08            .byte	8
37515                                           ! 7893                             16,
37516 91AB                        10            .byte	$10
37517                                           ! 7894                          8,
37518 91AC                        08            .byte	8
37519                                           ! 7895                               8,
37520 91AD                        08            .byte	8
37521                                           ! 7896                         8,
37522 91AE                        08            .byte	8
37523                                           ! 7897                              0,
37524 91AF                        00            .byte	0
37525                                           ! 7898                         0,
37526 91B0                        00            .byte	0
37527                                           ! 7899                              0,
37528 91B1                        00            .byte	0
37529                                           ! 7900                                0,
37530 91B2                        00            .byte	0
37531                                           ! 7901                        0xE0000000,
37532 91B3                      0000            .word	0
37533 91B5                      E000            .word	$E000
37534                                           ! 7902                               0,
37535 91B7                      0000            .word	0
37536 91B9                      0000            .word	0
37537                                           ! 7903                             0,
37538 91BB                      0000            .word	0
37539                                           ! 7904                                2160,
37540 91BD                      0870            .word	$870
37541                                           ! 7905                             0,
37542 91BF                        00            .byte	0
37543                                           ! 7906                             0,
37544 91C0                        00            .byte	0
37545                                           ! 7907                           8,
37546 91C1                        08            .byte	8
37547                                           ! 7908                                16,
37548 91C2                        10            .byte	$10
37549                                           ! 7909                             8,
37550 91C3                        08            .byte	8
37551                                           ! 7910                                  8,
37552 91C4                        08            .byte	8
37553                                           ! 7911                            8,
37554 91C5                        08            .byte	8
37555                                           ! 7912                                 0,
37556 91C6                        00            .byte	0
37557                                           ! 7913                            0,
37558 91C7                        00            .byte	0
37559                                           ! 7914                                 0,
37560 91C8                        00            .byte	0
37561                                           ! 7915                          0,
37562 91C9                      0000            .word	0
37563 91CB                      0000            .word	0
37564                                           ! 7916 } },
37565                                           ! 7917 { 0x019b,
37566 91CD                      019B            .word	$19B
37567                                           ! 7918 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37568 91CF                      009B            .word	$9B
37569                                           ! 7919                           0x01 | 0x02 | 0x04,
37570 91D1                        07            .byte	7
37571                                           ! 7920                           0,
37572 91D2                        00            .byte	0
37573                                           ! 7921                         
37574                                           ! 7921   64,
37575 91D3                      0040            .word	$40
37576                                           ! 7922                    64,
37577 91D5                      0040            .word	$40
37578                                           ! 7923                        0xA000,
37579 91D7                      A000            .word	$A000
37580                                           ! 7924                        0x0000,
37581 91D9                      0000            .word	0
37582                                           ! 7925                       0,
37583 91DB                      0000            .word	0
37584 91DD                      0000            .word	0
37585                                           ! 7926                             2880,
37586 91DF                      0B40            .word	$B40
37587                                           ! 7927                        720,
37588 91E1                      02D0            .word	$2D0
37589                                           ! 7928                        1280,
37590 91E3                      0500            .word	$500
37591                                           ! 7929                      8,
37592 91E5                        08            .byte	8
37593                                           ! 7930                      16,
37594 91E6                        10            .byte	$10
37595                                           ! 7931                           1,
37596 91E7                        01            .byte	1
37597                                           ! 7932                         32,
37598 91E8                        20            .byte	$20
37599                                           ! 7933                          57,
37600 91E9                        39            .byte	$39
37601                                           ! 7934                        0x06,
37602 91EA                        06            .byte	6
37603                                           ! 7935                     0,
37604 91EB                        00            .byte	0
37605                                           ! 7936                               3,
37606 91EC                        03            .byte	3
37607                                           ! 7937                          0,
37608 91ED                        00            .byte	0
37609                                           ! 7938                        8,
37610 91EE                        08            .byte	8
37611                                           ! 7939                             16,
37612 91EF                        10            .byte	$10
37613                                           ! 7940                          8,
37614 91F0                        08            .byte	8
37615                                           ! 7941                               8,
37616 91F1                        08            .byte	8
37617                                           ! 7942                         8,
37618 91F2                        08            .byte	8
37619                                           ! 7943                              0,
37620 91F3                        00            .byte	0
37621                                           ! 7944                         8,
37622 91F4                        08            .byte	8
37623                                           ! 7945                              24,
37624 91F5                        18            .byte	$18
37625                                           ! 7946                                0x02,
37626 91F6                        02            .byte	2
37627                                           ! 7947                        0xE0000000,
37628 91F7                      0000            .word	0
37629 91F9                      E000            .word	$E000
37630                                           ! 7948                               0,
37631 91FB                      0000            .word	0
37632 91FD                      0000            .word	0
37633                                           ! 7949                             0,
37634 91FF                      0000            .word	0
37635                                           ! 7950                                2880,
37636 9201                      0B40            .word	$B40
37637                                           ! 7951                             0,
37638 9203                        00            .byte	0
37639                                           ! 7952                             0,
37640 9204                        00            .byte	0
37641                                           ! 7953                           8,
37642 9205                        08            .byte	8
37643                                           ! 7954                                16,
37644 9206                        10            .byte	$10
37645                                           ! 7955                             8,
37646 9207                        08            .byte	8
37647                                           ! 7956                                  8,
37648 9208                        08            .byte	8
37649                                           ! 7957                            8,
37650 9209                        08            .byte	8
37651                                           ! 7958                                 0,
37652 920A                        00            .byte	0
37653                                           ! 7959                            8,
37654 920B                        08            .byte	8
37655                                           ! 7960                                 24,
37656 920C                        18            .byte	$18
37657                                           ! 7961                          0,
37658 920D                      0000            .word	0
37659 920F                      0000            .word	0
37660                                           ! 7962 } },
37661                                           ! 7963 { 0x019c,
37662 9211                      019C            .word	$19C
37663                                           ! 7964 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37664 9213                      009B            .word	$9B
37665                                           ! 7965                           0x01 | 0x02 | 0x04,
37666 9215                        07            .byte	7
37667                                           ! 7966                           0,
37668 9216                        00            .byte	0
37669                                           ! 7967                           64,
37670 9217                      0040            .word	$40
37671                                           ! 7968                    64,
37672 9219                      0040            .word	$40
37673                                           ! 7969                        0xA000,
37674 921B                      A000            .word	$A000
37675                                           ! 7970                        0x0000,
37676 921D                      0000            .word	0
37677                                           ! 7971                       0,
37678 921F                      0000            .word	0
37679 9221                      0000            .word	0
37680                                           ! 7972                             1600,
37681 9223                      0640            .word	$640
37682                                           ! 7973                        800,
37683 9225                      0320            .word	$320
37684                                           ! 7974                        1280,
37685 9227                      0500            .word	$500
37686                                           ! 7975                      8,
37687 9229                        08            .byte	8
37688                                           ! 7976                      16,
37689 922A                        10            .byte	$10
37690                                           ! 7977                           1,
37691 922B                        01            .byte	1
37692                                           ! 7978                         16,
37693 922C                        10            .byte	$10
37694                                           ! 7979                          32,
37695 922D                        20            .byte	$20
37696                                           ! 7980                        0x06,
37697 922E                        06            .byte	6
37698                                           ! 7981                     0,
37699 922F                        00            .byte	0
37700                                           ! 7982                               7,
37701 9230                        07            .byte	7
37702                                           ! 7983                          0,
37703 9231                        00            .byte	0
37704                                           ! 7984                        5,
37705 9232                        05            .byte	5
37706                                           ! 7985                             11,
37707 9233                        0B            .byte	$B
37708                                           ! 7986                          6,
37709 9234                        06            .byte	6
37710                                           ! 7987                               5,
37711 9235                        05            .byte	5
37712                                           ! 7988                         5,
37713 9236                        05            .byte	5
37714                                           ! 7989                              0,
37715 9237                        00            .byte	0
37716                                           ! 7990                         0,
37717 9238                        00            .byte	0
37718                                           ! 7991           
37719                                           ! 7991                    0,
37720 9239                        00            .byte	0
37721                                           ! 7992                                0,
37722 923A                        00            .byte	0
37723                                           ! 7993                        0xE0000000,
37724 923B                      0000            .word	0
37725 923D                      E000            .word	$E000
37726                                           ! 7994                               0,
37727 923F                      0000            .word	0
37728 9241                      0000            .word	0
37729                                           ! 7995                             0,
37730 9243                      0000            .word	0
37731                                           ! 7996                                1600,
37732 9245                      0640            .word	$640
37733                                           ! 7997                             0,
37734 9247                        00            .byte	0
37735                                           ! 7998                             0,
37736 9248                        00            .byte	0
37737                                           ! 7999                           5,
37738 9249                        05            .byte	5
37739                                           ! 8000                                11,
37740 924A                        0B            .byte	$B
37741                                           ! 8001                             6,
37742 924B                        06            .byte	6
37743                                           ! 8002                                  5,
37744 924C                        05            .byte	5
37745                                           ! 8003                            5,
37746 924D                        05            .byte	5
37747                                           ! 8004                                 0,
37748 924E                        00            .byte	0
37749                                           ! 8005                            0,
37750 924F                        00            .byte	0
37751                                           ! 8006                                 0,
37752 9250                        00            .byte	0
37753                                           ! 8007                          0,
37754 9251                      0000            .word	0
37755 9253                      0000            .word	0
37756                                           ! 8008 } },
37757                                           ! 8009 { 0x019d,
37758 9255                      019D            .word	$19D
37759                                           ! 8010 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37760 9257                      009B            .word	$9B
37761                                           ! 8011                           0x01 | 0x02 | 0x04,
37762 9259                        07            .byte	7
37763                                           ! 8012                           0,
37764 925A                        00            .byte	0
37765                                           ! 8013                           64,
37766 925B                      0040            .word	$40
37767                                           ! 8014                    64,
37768 925D                      0040            .word	$40
37769                                           ! 8015                        0xA000,
37770 925F                      A000            .word	$A000
37771                                           ! 8016                        0x0000,
37772 9261                      0000            .word	0
37773                                           ! 8017                       0,
37774 9263                      0000            .word	0
37775 9265                      0000            .word	0
37776                                           ! 8018                             2400,
37777 9267                      0960            .word	$960
37778                                           ! 8019                        800,
37779 9269                      0320            .word	$320
37780                                           ! 8020                        1280,
37781 926B                      0500            .word	$500
37782                                           ! 8021                      8,
37783 926D                        08            .byte	8
37784                                           ! 8022                      16,
37785 926E                        10            .byte	$10
37786                                           ! 8023                           1,
37787 926F                        01            .byte	1
37788                                           ! 8024                         24,
37789 9270                        18            .byte	$18
37790                                           ! 8025                          47,
37791 9271                        2F            .byte	$2F
37792                                           ! 8026                        0x06,
37793 9272                        06            .byte	6
37794                                           ! 8027                     0,
37795 9273                        00            .byte	0
37796                                           ! 8028                               4,
37797 9274                        04            .byte	4
37798                                           ! 8029                          0,
37799 9275                        00            .byte	0
37800                                           ! 8030                        8,
37801 9276                        08            .byte	8
37802                                           ! 8031                             16,
37803 9277                        10            .byte	$10
37804                                           ! 8032                          8,
37805 9278                        08            .byte	8
37806                                           ! 8033                               8,
37807 9279                        08            .byte	8
37808                                           ! 8034                         8,
37809 927A                        08            .byte	8
37810                                           ! 8035                              0,
37811 927B                        00            .byte	0
37812                                           ! 8036                         0,
37813 927C                        00            .byte	0
37814                                           ! 8037                              0,
37815 927D                        00            .byte	0
37816                                           ! 8038                                0,
37817 927E                        00            .byte	0
37818                                           ! 8039                        0xE0000000,
37819 927F                      0000            .word	0
37820 9281                      E000            .word	$E000
37821                                           ! 8040                               0,
37822 9283                      0000            .word	0
37823 9285                      0000            .word	0
37824                                           ! 8041                             0,
37825 9287                      0000            .word	0
37826                                           ! 8042                                2400,
37827 9289                      0960            .word	$960
37828                                           ! 8043                             0,
37829 928B                        00            .byte	0
37830                                           ! 8044                             0,
37831 928C                        00            .byte	0
37832                                           ! 8045                           8,
37833 928D                        08            .byte	8
37834                                           ! 8046                                16,
37835 928E                        10            .byte	$10
37836                                           ! 8047                             8,
37837 928F                        08            .byte	8
37838                                           ! 8048                                  8,
37839 9290                        08            .byte	8
37840                                           ! 8049                            8,
37841 9291                        08            .byte	8
37842                                           ! 8050                                 0,
37843 9292                        00            .byte	0
37844                                           ! 8051                            0,
37845 9293                        00            .byte	0
37846                                           ! 8052                                 0,
37847 9294                        00            .byte	0
37848                                           ! 8053                          0,
37849 9295                      0000            .word	0
37850 9297                      0000            .word	0
37851                                           ! 8054 } },
37852                                           ! 8055 { 0x019e,
37853 9299                      019E            .word	$19E
37854                                           ! 8056 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37855 929B                      009B            .word	$9B
37856                                           ! 8057                           0x01 | 0x02 | 0x04,
37857 929D                        07            .byte	7
37858                                           ! 8058                          
37859                                           ! 8058  0,
37860 929E                        00            .byte	0
37861                                           ! 8059                           64,
37862 929F                      0040            .word	$40
37863                                           ! 8060                    64,
37864 92A1                      0040            .word	$40
37865                                           ! 8061                        0xA000,
37866 92A3                      A000            .word	$A000
37867                                           ! 8062                        0x0000,
37868 92A5                      0000            .word	0
37869                                           ! 8063                       0,
37870 92A7                      0000            .word	0
37871 92A9                      0000            .word	0
37872                                           ! 8064                             3200,
37873 92AB                      0C80            .word	$C80
37874                                           ! 8065                        800,
37875 92AD                      0320            .word	$320
37876                                           ! 8066                        1280,
37877 92AF                      0500            .word	$500
37878                                           ! 8067                      8,
37879 92B1                        08            .byte	8
37880                                           ! 8068                      16,
37881 92B2                        10            .byte	$10
37882                                           ! 8069                           1,
37883 92B3                        01            .byte	1
37884                                           ! 8070                         32,
37885 92B4                        20            .byte	$20
37886                                           ! 8071                          63,
37887 92B5                        3F            .byte	$3F
37888                                           ! 8072                        0x06,
37889 92B6                        06            .byte	6
37890                                           ! 8073                     0,
37891 92B7                        00            .byte	0
37892                                           ! 8074                               3,
37893 92B8                        03            .byte	3
37894                                           ! 8075                          0,
37895 92B9                        00            .byte	0
37896                                           ! 8076                        8,
37897 92BA                        08            .byte	8
37898                                           ! 8077                             16,
37899 92BB                        10            .byte	$10
37900                                           ! 8078                          8,
37901 92BC                        08            .byte	8
37902                                           ! 8079                               8,
37903 92BD                        08            .byte	8
37904                                           ! 8080                         8,
37905 92BE                        08            .byte	8
37906                                           ! 8081                              0,
37907 92BF                        00            .byte	0
37908                                           ! 8082                         8,
37909 92C0                        08            .byte	8
37910                                           ! 8083                              24,
37911 92C1                        18            .byte	$18
37912                                           ! 8084                                0x02,
37913 92C2                        02            .byte	2
37914                                           ! 8085                        0xE0000000,
37915 92C3                      0000            .word	0
37916 92C5                      E000            .word	$E000
37917                                           ! 8086                               0,
37918 92C7                      0000            .word	0
37919 92C9                      0000            .word	0
37920                                           ! 8087                             0,
37921 92CB                      0000            .word	0
37922                                           ! 8088                                3200,
37923 92CD                      0C80            .word	$C80
37924                                           ! 8089                             0,
37925 92CF                        00            .byte	0
37926                                           ! 8090                             0,
37927 92D0                        00            .byte	0
37928                                           ! 8091                           8,
37929 92D1                        08            .byte	8
37930                                           ! 8092                                16,
37931 92D2                        10            .byte	$10
37932                                           ! 8093                             8,
37933 92D3                        08            .byte	8
37934                                           ! 8094                                  8,
37935 92D4                        08            .byte	8
37936                                           ! 8095                            8,
37937 92D5                        08            .byte	8
37938                                           ! 8096                                 0,
37939 92D6                        00            .byte	0
37940                                           ! 8097                            8,
37941 92D7                        08            .byte	8
37942                                           ! 8098                                 24,
37943 92D8                        18            .byte	$18
37944                                           ! 8099                          0,
37945 92D9                      0000            .word	0
37946 92DB                      0000            .word	0
37947                                           ! 8100 } },
37948                                           ! 8101 { 0xFFFF,
37949 92DD                      FFFF            .word	$FFFF
37950                                           ! 8102 { 0,
37951 92DF                      0000            .word	0
37952                                           ! 8103 } },
37953 92E1                  00000040            .blkb	$40
37954                                           ! 8104 };
37955                                           !BCC_EOS
37956                                           ! 8105 extern char vbebios_copyright;
37957                                           !BCC_EOS
37958                                           ! 8106 extern char vbebios_vendor_name;
37959                                           !BCC_EOS
37960                                           ! 8107 extern char vbebios_product_name;
37961                                           !BCC_EOS
37962                                           ! 8108 extern char vbebios_product_revision;
37963                                           !BCC_EOS
37964                                           ! 8109 #asm
37965                                           !BCC_ASM
37966                       00009321            _vbebios_copyright:
37967 9321                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
37968 9366                        00            .byte 0x00
37969                       00009367            _vbebios_vendor_name:
37970 9367                        42            .ascii "Bochs/Plex86 Developers"
37971 937E                        00            .byte 0x00
37972                       0000937F            _vbebios_product_name:
37973 937F                        42            .ascii "Bochs/Plex86 VBE Adapter"
37974 9397                        00            .byte 0x00
37975                       00009398            _vbebios_product_revision:
37976 9398                        24            .ascii "$Id$"
37977 939C                        00            .byte 0x00
37978                       0000939D            _vbebios_info_string:
37979 939D                        42            .ascii "Bochs VBE Display Adapter enabled"
37980 93BE                        0A            .byte 0x0a,0x0d
37981 93C0                        0A            .byte 0x0a,0x0d
37982 93C2                        00            .byte 0x00
37983                       000093C3            _no_vbebios_info_string:
37984 93C3                        4E            .ascii "NO Bochs VBE Support available!"
37985 93E2                        0A            .byte 0x0a,0x0d
37986 93E4                        0A            .byte 0x0a,0x0d
37987 93E6                        00            .byte 0x00
37988                       000093E7            msg_vbe_init:
37989 93E7                        56            .ascii "VBE Bios $Id$"
37990 93F4                        0A            .byte 0x0a,0x0d, 0x00
37991 93F7                  00000002              .align 2
37992                       000093F8            vesa_pm_start:
37993 93F8                      0014              dw vesa_pm_set_window - vesa_pm_start
37994 93FA                      004B              dw vesa_pm_set_display_start - vesa_pm_start
37995 93FC                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
37996 93FE                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
37997                       00009400            vesa_pm_io_ports_table:
37998 9400                      01CE              dw 0x01CE
37999 9402                      01CF              dw 0x01CE + 1
38000 9404                      01CF              dw 0x01CF
38001 9406                      01D0              dw 0x01CF + 1
38002 9408                      FFFF              dw 0xffff
38003 940A                      FFFF              dw 0xffff
38004                                             USE32
38005                       0000940C            vesa_pm_set_window:
38006 940C     66    83FB                   00    cmp bx, #0x00
38007 9410           74           05              je vesa_pm_set_display_window1
38008 9412     66    B8                   0100    mov ax, #0x0100
38009 9416           C3                           ret
38010                       00009417            vesa_pm_set_display_window1:
38011 9417     66    89D0                         mov ax, dx
38012 941A     66    52                           push dx
38013 941C     66    50                           push ax
38014 941E     66    BA                   01CE    mov dx, # 0x01CE
38015 9422     66    B8                   0005    mov ax, # 0x5
38016 9426     66    EF                           out dx, ax
38017 9428     66    58                           pop ax
38018 942A     66    BA                   01CF    mov dx, # 0x01CF
38019 942E     66    EF                           out dx, ax
38020 9430     66    ED                           in ax, dx
38021 9432     66    5A                           pop dx
38022 9434     66    39C2                         cmp dx, ax
38023 9437           75           05              jne illegal_window
38024 9439     66    B8                   004F    mov ax, #0x004f
38025 943D           C3                           ret
38026                       0000943E            illegal_window:
38027 943E     66    B8                   014F    mov ax, #0x014f
38028 9442           C3                           ret
38029                       00009443            vesa_pm_set_display_start:
38030 9443           80FB                   80    cmp bl, #0x80
38031 9446           74           0A              je vesa_pm_set_display_start1
38032 9448           80FB                   00    cmp bl, #0x00
38033 944B           74           05              je vesa_pm_set_display_start1
38034 944D     66    B8                   0100    mov ax, #0x0100
38035 9451           C3                           ret
38036                       00009452            vesa_pm_set_display_start1:
38037                                           ; convert offset to (X, Y) coordinate
38038                                           ; (would be simpler to change Bochs 1 API...)
38039 9452           50                           push eax
38040 9453           51                           push ecx
38041 9454           52                           push edx
38042 9455           56                           push esi
38043 9456           57                           push edi
38044 9457           C1E2                   10    shl edx, #16
38045 945A           81E1             0000FFFF    and ecx, #0xffff
38046 9460           09D1                         or ecx, edx
38047 9462           C1E1                   02    shl ecx, #2
38048 9465           89C8                         mov eax, ecx
38049 9467           50                           push eax
38050 9468     66    BA                   01CE    mov dx, # 0x01CE
38051 946C     66    B8                   0006    mov ax, # 0x6
38052 9470     66    EF                           out dx, ax
38053 9472     66    BA                   01CF    mov dx, # 0x01CF
38054 9476     66    ED                           in ax, dx
38055 9478         0FB7C8                         movzx ecx, ax
38056 947B     66    BA                   01CE    mov dx, # 0x01CE
38057 947F     66    B8                   0003    mov ax, # 0x3
38058 9483     66    EF                           out dx, ax
38059 9485     66    BA                   01CF    mov dx, # 0x01CF
38060 9489     66    ED                           in ax, dx
38061 948B         0FB7F0                         movzx esi, ax
38062 948E           58                           pop eax
38063 948F           83FE                   04    cmp esi, #4
38064 9492           74           17              jz bpp4_mode
38065 9494           83C6                   07    add esi, #7
38066 9497           C1EE                   03    shr esi, #3
38067 949A         0FAFCE                         imul ecx, esi
38068 949D           31D2                         xor edx, edx
38069 949F           F7F1                         div ecx
38070 94A1           89C7                         mov edi, eax
38071 94A3           89D0                         mov eax, edx
38072 94A5           31D2                         xor edx, edx
38073 94A7           F7F6                         div esi
38074 94A9           EB           0C              jmp set_xy_regs
38075                       000094AB            bpp4_mode:
38076 94AB           D1E9                         shr ecx, #1
38077 94AD           31D2                         xor edx, edx
38078 94AF           F7F1                         div ecx
38079 94B1           89C7                         mov edi, eax
38080 94B3           89D0                         mov eax, edx
38081 94B5           D1E0                         shl eax, #1
38082                       000094B7            set_xy_regs:
38083 94B7     66    52                           push dx
38084 94B9     66    50                           push ax
38085 94BB     66    BA                   01CE    mov dx, # 0x01CE
38086 94BF     66    B8                   0008    mov ax, # 0x8
38087 94C3     66    EF                           out dx, ax
38088 94C5     66    58                           pop ax
38089 94C7     66    BA                   01CF    mov dx, # 0x01CF
38090 94CB     66    EF                           out dx, ax
38091 94CD     66    5A                           pop dx
38092 94CF     66    89F8                         mov ax, di
38093 94D2     66    52                           push dx
38094 94D4     66    50                           push ax
38095 94D6     66    BA                   01CE    mov dx, # 0x01CE
38096 94DA     66    B8                   0009    mov ax, # 0x9
38097 94DE     66    EF                           out dx, ax
38098 94E0     66    58                           pop ax
38099 94E2     66    BA                   01CF    mov dx, # 0x01CF
38100 94E6     66    EF                           out dx, ax
38101 94E8     66    5A                           pop dx
38102 94EA           5F                           pop edi
38103 94EB           5E                           pop esi
38104 94EC           5A                           pop edx
38105 94ED           59                           pop ecx
38106 94EE           58                           pop eax
38107 94EF     66    B8                   004F    mov ax, #0x004f
38108 94F3           C3                           ret
38109                       000094F4            vesa_pm_unimplemented:
38110 94F4     66    B8                   014F    mov ax, #0x014f
38111 94F8           C3                           ret
38112                                             USE16
38113                       000094F9            vesa_pm_end:
38114                                           ; DISPI ioport functions
38115                       000094F9            dispi_get_id:
38116 94F9           52                           push dx
38117 94FA           BA                   01CE    mov dx, # 0x01CE
38118 94FD           B8                   0000    mov ax, # 0x0
38119 9500           EF                           out dx, ax
38120 9501           BA                   01CF    mov dx, # 0x01CF
38121 9504           ED                           in ax, dx
38122 9505           5A                           pop dx
38123 9506           C3                           ret
38124                       00009507            dispi_set_id:
38125 9507           52                           push dx
38126 9508           50                           push ax
38127 9509           BA                   01CE    mov dx, # 0x01CE
38128 950C           B8                   0000    mov ax, # 0x0
38129 950F           EF                           out dx, ax
38130 9510           58                           pop ax
38131 9511           BA                   01CF    mov dx, # 0x01CF
38132 9514           EF                           out dx, ax
38133 9515           5A                           pop dx
38134 9516           C3                           ret
38135                                           ! 8279 endasm
38136                                           !BCC_ENDASM
38137                                           ! 8280 static void dispi_set_xres(xres)
38138                                           ! 8281   Bit16u xres;
38139                                           
38140                       00009517            _dispi_set_xres:
38141                                           !BCC_EOS
38142                                           ! 8282 {
38143                                           ! 8283 #asm
38144                                           !BCC_ASM
38145                       00000002            _dispi_set_xres.xres	set	2
38146 9517           55                           push bp
38147 9518           89E5                         mov bp, sp
38148 951A           50                           push ax
38149 951B           52                           push dx
38150 951C           BA                   01CE    mov dx, # 0x01CE
38151 951F           B8                   0001    mov ax, # 0x1
38152 9522           EF                           out dx, ax
38153 9523           BA                   01CF    mov dx, # 0x01CF
38154 9526           8B46         04              mov ax, 4[bp] ; xres
38155 9529           EF                           out dx, ax
38156 952A           5A                           pop dx
38157 952B           58                           pop ax
38158 952C           5D                           pop bp
38159                                           ! 8297 endasm
38160                                           !BCC_ENDASM
38161                                           ! 8298 }
38162 952D           C3                         ret
38163                                           ! 8299 static void dispi_set_yres(yres)
38164                                           ! 8300   Bit16u yres;
38165                       0000952E            _dispi_set_yres:
38166                                           !BCC_EOS
38167                                           ! 8301 {
38168                                           ! 8302   outw(0x01CE,0x2);
38169 952E           55                         push	bp
38170 952F           89E5                       mov	bp,sp
38171                                           ! Debug: list int = const 2 (used reg = )
38172 9531           B8                   0002  mov	ax,*2
38173 9534           50                         push	ax
38174                                           ! Debug: list int = const $1CE (used reg = )
38175 9535           B8                   01CE  mov	ax,#$1CE
38176 9538           50                         push	ax
38177                                           ! Debug: func () void = outw+0 (used reg = )
38178 9539           E8         E6F1            call	_outw
38179 953C           89EC                       mov	sp,bp
38180                                           !BCC_EOS
38181                                           ! 8303   outw(0x01CF,yres);
38182                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
38183 953E           FF76         04            push	4[bp]
38184                                           ! Debug: list int = const $1CF (used reg = )
38185 9541           B8                   01CF  mov	ax,#$1CF
38186 9544           50                         push	ax
38187                                           ! Debug: func () void = outw+0 (used reg = )
38188 9545           E8         E6E5            call	_outw
38189 9548           89EC                       mov	sp,bp
38190                                           !BCC_EOS
38191                                           ! 8304 }
38192 954A           5D                         pop	bp
38193 954B           C3                         ret
38194                                           ! 8305 static void dispi_set_bpp(bpp)
38195                                           ! 8306   Bit16u bpp;
38196                       0000954C            _dispi_set_bpp:
38197                                           !BCC_EOS
38198                                           ! 8307 {
38199                                           ! 8308   outw(0x01CE,0x3);
38200 954C           55                         push	bp
38201 954D           89E5                       mov	bp,sp
38202                                           ! Debug: list int = const 3 (used reg = )
38203 954F           B8                   0003  mov	ax,*3
38204 9552           50                         push	ax
38205                                           ! Debug: list int = const $1CE (used reg = )
38206 9553           B8                   01CE  mov	ax,#$1CE
38207 9556           50                         push	ax
38208                                           ! Debug: func () void = outw+0 (used reg = )
38209 9557           E8         E6D3            call	_outw
38210 955A           89EC                       mov	sp,bp
38211                                           !BCC_EOS
38212                                           ! 8309   outw(0x01CF,bpp);
38213                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
38214 955C           FF76         04            push	4[bp]
38215                                           ! Debug: list int = const $1CF (used reg = )
38216 955F           B8                   01CF  mov	ax,#$1CF
38217 9562           50                         push	ax
38218                                           ! Debug: func () void = outw+0 (used reg = )
38219 9563           E8         E6C7            call	_outw
38220 9566           89EC                       mov	sp,bp
38221                                           !BCC_EOS
38222                                           ! 8310 }
38223 9568           5D                         pop	bp
38224 9569           C3                         ret
38225                                           ! 8311 #asm
38226                                           !BCC_ASM
38227                       00000002            _dispi_set_bpp.bpp	set	2
38228                                           ; AL = bits per pixel / AH = bytes per pixel
38229                       0000956A            dispi_get_bpp:
38230 956A           52                           push dx
38231 956B           BA                   01CE    mov dx, # 0x01CE
38232 956E           B8                   0003    mov ax, # 0x3
38233 9571           EF                           out dx, ax
38234 9572           BA                   01CF    mov dx, # 0x01CF
38235 9575           ED                           in ax, dx
38236 9576           88C4                         mov ah, al
38237 9578           C0EC                   03    shr ah, 3
38238 957B           A8                     07    test al, #0x07
38239 957D           74           02              jz get_bpp_noinc
38240 957F           FEC4                         inc ah
38241                       00009581            get_bpp_noinc:
38242 9581           5A                           pop dx
38243 9582           C3                           ret
38244                                           ; get display capabilities
38245                       00009583            _dispi_get_max_xres:
38246 9583           52                           push dx
38247 9584           53                           push bx
38248 9585           E8         004F              call dispi_get_enable
38249 9588           89C3                         mov bx, ax
38250 958A           0D                   0002    or ax, # 0x02
38251 958D           E8         0037              call _dispi_set_enable
38252 9590           BA                   01CE    mov dx, # 0x01CE
38253 9593           B8                   0001    mov ax, # 0x1
38254 9596           EF                           out dx, ax
38255 9597           BA                   01CF    mov dx, # 0x01CF
38256 959A           ED                           in ax, dx
38257 959B           50                           push ax
38258 959C           89D8                         mov ax, bx
38259 959E           E8         0026              call _dispi_set_enable
38260 95A1           58                           pop ax
38261 95A2           5B                           pop bx
38262 95A3           5A                           pop dx
38263 95A4           C3                           ret
38264                       000095A5            _dispi_get_max_bpp:
38265 95A5           52                           push dx
38266 95A6           53                           push bx
38267 95A7           E8         002D              call dispi_get_enable
38268 95AA           89C3                         mov bx, ax
38269 95AC           0D                   0002    or ax, # 0x02
38270 95AF           E8         0015              call _dispi_set_enable
38271 95B2           BA                   01CE    mov dx, # 0x01CE
38272 95B5           B8                   0003    mov ax, # 0x3
38273 95B8           EF                           out dx, ax
38274 95B9           BA                   01CF    mov dx, # 0x01CF
38275 95BC           ED                           in ax, dx
38276 95BD           50                           push ax
38277 95BE           89D8                         mov ax, bx
38278 95C0           E8         0004              call _dispi_set_enable
38279 95C3           58                           pop ax
38280 95C4           5B                           pop bx
38281 95C5           5A                           pop dx
38282 95C6           C3                           ret
38283                       000095C7            _dispi_set_enable:
38284 95C7           52                           push dx
38285 95C8           50                           push ax
38286 95C9           BA                   01CE    mov dx, # 0x01CE
38287 95CC           B8                   0004    mov ax, # 0x4
38288 95CF           EF                           out dx, ax
38289 95D0           58                           pop ax
38290 95D1           BA                   01CF    mov dx, # 0x01CF
38291 95D4           EF                           out dx, ax
38292 95D5           5A                           pop dx
38293 95D6           C3                           ret
38294                       000095D7            dispi_get_enable:
38295 95D7           52                           push dx
38296 95D8           BA                   01CE    mov dx, # 0x01CE
38297 95DB           B8                   0004    mov ax, # 0x4
38298 95DE           EF                           out dx, ax
38299 95DF           BA                   01CF    mov dx, # 0x01CF
38300 95E2           ED                           in ax, dx
38301 95E3           5A                           pop dx
38302 95E4           C3                           ret
38303                       000095E5            _dispi_set_bank:
38304 95E5           52                           push dx
38305 95E6           50                           push ax
38306 95E7           BA                   01CE    mov dx, # 0x01CE
38307 95EA           B8                   0005    mov ax, # 0x5
38308 95ED           EF                           out dx, ax
38309 95EE           58                           pop ax
38310 95EF           BA                   01CF    mov dx, # 0x01CF
38311 95F2           EF                           out dx, ax
38312 95F3           5A                           pop dx
38313 95F4           C3                           ret
38314                       000095F5            dispi_get_bank:
38315 95F5           52                           push dx
38316 95F6           BA                   01CE    mov dx, # 0x01CE
38317 95F9           B8                   0005    mov ax, # 0x5
38318 95FC           EF                           out dx, ax
38319 95FD           BA                   01CF    mov dx, # 0x01CF
38320 9600           ED                           in ax, dx
38321 9601           5A                           pop dx
38322 9602           C3                           ret
38323                                           ! 8407 endasm
38324                                           !BCC_ENDASM
38325                                           ! 8408 static void dispi_set_bank_farcall()
38326                                           ! 8409 {
38327                       00009603            _dispi_set_bank_farcall:
38328                                           ! 8410 #asm
38329                                           !BCC_ASM
38330 9603           81FB                 0100    cmp bx,#0x0100
38331 9607           74           1E              je dispi_set_bank_farcall_get
38332 9609           09DB                         or bx,bx
38333 960B           75           28              jnz dispi_set_bank_farcall_error
38334 960D           89D0                         mov ax,dx
38335 960F           52                           push dx
38336 9610           50                           push ax
38337 9611           B8                   0005    mov ax,# 0x5
38338 9614           BA                   01CE    mov dx,# 0x01CE
38339 9617           EF                           out dx,ax
38340 9618           58                           pop ax
38341 9619           BA                   01CF    mov dx,# 0x01CF
38342 961C           EF                           out dx,ax
38343 961D           ED                           in ax,dx
38344 961E           5A                           pop dx
38345 961F           39C2                         cmp dx,ax
38346 9621           75           12              jne dispi_set_bank_farcall_error
38347 9623           B8                   004F    mov ax, #0x004f
38348 9626           CB                           retf
38349                       00009627            dispi_set_bank_farcall_get:
38350 9627           B8                   0005    mov ax,# 0x5
38351 962A           BA                   01CE    mov dx,# 0x01CE
38352 962D           EF                           out dx,ax
38353 962E           BA                   01CF    mov dx,# 0x01CF
38354 9631           ED                           in ax,dx
38355 9632           89C2                         mov dx,ax
38356 9634           CB                           retf
38357                       00009635            dispi_set_bank_farcall_error:
38358 9635           B8                   014F    mov ax,#0x014F
38359 9638           CB                           retf
38360                                           ! 8441 endasm
38361                                           !BCC_ENDASM
38362                                           ! 8442 }
38363 9639           C3                         ret
38364                                           ! 8443 #asm
38365                                           !BCC_ASM
38366                       0000963A            dispi_set_x_offset:
38367 963A           52                           push dx
38368 963B           50                           push ax
38369 963C           BA                   01CE    mov dx, # 0x01CE
38370 963F           B8                   0008    mov ax, # 0x8
38371 9642           EF                           out dx, ax
38372 9643           58                           pop ax
38373 9644           BA                   01CF    mov dx, # 0x01CF
38374 9647           EF                           out dx, ax
38375 9648           5A                           pop dx
38376 9649           C3                           ret
38377                       0000964A            dispi_get_x_offset:
38378 964A           52                           push dx
38379 964B           BA                   01CE    mov dx, # 0x01CE
38380 964E           B8                   0008    mov ax, # 0x8
38381 9651           EF                           out dx, ax
38382 9652           BA                   01CF    mov dx, # 0x01CF
38383 9655           ED                           in ax, dx
38384 9656           5A                           pop dx
38385 9657           C3                           ret
38386                       00009658            dispi_set_y_offset:
38387 9658           52                           push dx
38388 9659           50                           push ax
38389 965A           BA                   01CE    mov dx, # 0x01CE
38390 965D           B8                   0009    mov ax, # 0x9
38391 9660           EF                           out dx, ax
38392 9661           58                           pop ax
38393 9662           BA                   01CF    mov dx, # 0x01CF
38394 9665           EF                           out dx, ax
38395 9666           5A                           pop dx
38396 9667           C3                           ret
38397                       00009668            dispi_get_y_offset:
38398 9668           52                           push dx
38399 9669           BA                   01CE    mov dx, # 0x01CE
38400 966C           B8                   0009    mov ax, # 0x9
38401 966F           EF                           out dx, ax
38402 9670           BA                   01CF    mov dx, # 0x01CF
38403 9673           ED                           in ax, dx
38404 9674           5A                           pop dx
38405 9675           C3                           ret
38406                       00009676            vga_set_virt_width:
38407 9676           50                           push ax
38408 9677           53                           push bx
38409 9678           52                           push dx
38410 9679           89C3                         mov bx, ax
38411 967B           E8         FEEC              call dispi_get_bpp
38412 967E           3C                     04    cmp al, #0x04
38413 9680           77           02              ja set_width_svga
38414 9682           D1EB                         shr bx, #1
38415                       00009684            set_width_svga:
38416 9684           C1EB                   03    shr bx, #3
38417 9687           BA                   03D4    mov dx, # 0x3d4
38418 968A           88DC                         mov ah, bl
38419 968C           B0                     13    mov al, #0x13
38420 968E           EF                           out dx, ax
38421 968F           5A                           pop dx
38422 9690           5B                           pop bx
38423 9691           58                           pop ax
38424 9692           C3                           ret
38425                       00009693            dispi_set_virt_width:
38426 9693           E8         FFE0              call vga_set_virt_width
38427 9696           52                           push dx
38428 9697           50                           push ax
38429 9698           BA                   01CE    mov dx, # 0x01CE
38430 969B           B8                   0006    mov ax, # 0x6
38431 969E           EF                           out dx, ax
38432 969F           58                           pop ax
38433 96A0           BA                   01CF    mov dx, # 0x01CF
38434 96A3           EF                           out dx, ax
38435 96A4           5A                           pop dx
38436 96A5           C3                           ret
38437                       000096A6            dispi_get_virt_width:
38438 96A6           52                           push dx
38439 96A7           BA                   01CE    mov dx, # 0x01CE
38440 96AA           B8                   0006    mov ax, # 0x6
38441 96AD           EF                           out dx, ax
38442 96AE           BA                   01CF    mov dx, # 0x01CF
38443 96B1           ED                           in ax, dx
38444 96B2           5A                           pop dx
38445 96B3           C3                           ret
38446                       000096B4            dispi_get_virt_height:
38447 96B4           52                           push dx
38448 96B5           BA                   01CE    mov dx, # 0x01CE
38449 96B8           B8                   0007    mov ax, # 0x7
38450 96BB           EF                           out dx, ax
38451 96BC           BA                   01CF    mov dx, # 0x01CF
38452 96BF           ED                           in ax, dx
38453 96C0           5A                           pop dx
38454 96C1           C3                           ret
38455                       000096C2            _vga_compat_setup:
38456 96C2           50                           push ax
38457 96C3           52                           push dx
38458                                             ; set CRT X resolution
38459 96C4           BA                   01CE    mov dx, # 0x01CE
38460 96C7           B8                   0001    mov ax, # 0x1
38461 96CA           EF                           out dx, ax
38462 96CB           BA                   01CF    mov dx, # 0x01CF
38463 96CE           ED                           in ax, dx
38464 96CF           50                           push ax
38465 96D0           BA                   03D4    mov dx, # 0x3d4
38466 96D3           B8                   0011    mov ax, #0x0011
38467 96D6           EF                           out dx, ax
38468 96D7           58                           pop ax
38469 96D8           50                           push ax
38470 96D9           C1E8                   03    shr ax, #3
38471 96DC           48                           dec ax
38472 96DD           88C4                         mov ah, al
38473 96DF           B0                     01    mov al, #0x01
38474 96E1           EF                           out dx, ax
38475 96E2           58                           pop ax
38476 96E3           E8         FF90              call vga_set_virt_width
38477                                             ; set CRT Y resolution
38478 96E6           BA                   01CE    mov dx, # 0x01CE
38479 96E9           B8                   0002    mov ax, # 0x2
38480 96EC           EF                           out dx, ax
38481 96ED           BA                   01CF    mov dx, # 0x01CF
38482 96F0           ED                           in ax, dx
38483 96F1           48                           dec ax
38484 96F2           50                           push ax
38485 96F3           BA                   03D4    mov dx, # 0x3d4
38486 96F6           88C4                         mov ah, al
38487 96F8           B0                     12    mov al, #0x12
38488 96FA           EF                           out dx, ax
38489 96FB           58                           pop ax
38490 96FC           B0                     07    mov al, #0x07
38491 96FE           EE                           out dx, al
38492 96FF           42                           inc dx
38493 9700           EC                           in al, dx
38494 9701           24                     BD    and al, #0xbd
38495 9703           F6C4                   01    test ah, #0x01
38496 9706           74           02              jz bit8_clear
38497 9708           0C                     02    or al, #0x02
38498                       0000970A            bit8_clear:
38499 970A           F6C4                   02    test ah, #0x02
38500 970D           74           02              jz bit9_clear
38501 970F           0C                     40    or al, #0x40
38502                       00009711            bit9_clear:
38503 9711           EE                           out dx, al
38504                                             ; other settings
38505 9712           BA                   03D4    mov dx, # 0x3d4
38506 9715           B8                   0009    mov ax, #0x0009
38507 9718           EF                           out dx, ax
38508 9719           B0                     17    mov al, #0x17
38509 971B           EE                           out dx, al
38510 971C           BA                   03D5    mov dx, # 0x3d5
38511 971F           EC                           in al, dx
38512 9720           0C                     03    or al, #0x03
38513 9722           EE                           out dx, al
38514 9723           BA                   03DA    mov dx, # 0x3da
38515 9726           EC                           in al, dx
38516 9727           BA                   03C0    mov dx, # 0x3c0
38517 972A           B0                     10    mov al, #0x10
38518 972C           EE                           out dx, al
38519 972D           BA                   03C1    mov dx, # 0x3c1
38520 9730           EC                           in al, dx
38521 9731           0C                     01    or al, #0x01
38522 9733           BA                   03C0    mov dx, # 0x3c0
38523 9736           EE                           out dx, al
38524 9737           B0                     20    mov al, #0x20
38525 9739           EE                           out dx, al
38526 973A           BA                   03CE    mov dx, # 0x3ce
38527 973D           B8                   0506    mov ax, #0x0506
38528 9740           EF                           out dx, ax
38529 9741           BA                   03C4    mov dx, # 0x3c4
38530 9744           B8                   0F02    mov ax, #0x0f02
38531 9747           EF                           out dx, ax
38532                                             ; settings for >= 8bpp
38533 9748           BA                   01CE    mov dx, # 0x01CE
38534 974B           B8                   0003    mov ax, # 0x3
38535 974E           EF                           out dx, ax
38536 974F           BA                   01CF    mov dx, # 0x01CF
38537 9752           ED                           in ax, dx
38538 9753           3C                     08    cmp al, #0x08
38539 9755           72           40              jb vga_compat_end
38540 9757           BA                   03D4    mov dx, # 0x3d4
38541 975A           B0                     14    mov al, #0x14
38542 975C           EE                           out dx, al
38543 975D           BA                   03D5    mov dx, # 0x3d5
38544 9760           EC                           in al, dx
38545 9761           0C                     40    or al, #0x40
38546 9763           EE                           out dx, al
38547 9764           BA                   03DA    mov dx, # 0x3da
38548 9767           EC                           in al, dx
38549 9768           BA                   03C0    mov dx, # 0x3c0
38550 976B           B0                     10    mov al, #0x10
38551 976D           EE                           out dx, al
38552 976E           BA                   03C1    mov dx, # 0x3c1
38553 9771           EC                           in al, dx
38554 9772           0C                     40    or al, #0x40
38555 9774           BA                   03C0    mov dx, # 0x3c0
38556 9777           EE                           out dx, al
38557 9778           B0                     20    mov al, #0x20
38558 977A           EE                           out dx, al
38559 977B           BA                   03C4    mov dx, # 0x3c4
38560 977E           B0                     04    mov al, #0x04
38561 9780           EE                           out dx, al
38562 9781           BA                   03C5    mov dx, # 0x3c5
38563 9784           EC                           in al, dx
38564 9785           0C                     08    or al, #0x08
38565 9787           EE                           out dx, al
38566 9788           BA                   03CE    mov dx, # 0x3ce
38567 978B           B0                     05    mov al, #0x05
38568 978D           EE                           out dx, al
38569 978E           BA                   03CF    mov dx, # 0x3cf
38570 9791           EC                           in al, dx
38571 9792           24                     9F    and al, #0x9f
38572 9794           0C                     40    or al, #0x40
38573 9796           EE                           out dx, al
38574                       00009797            vga_compat_end:
38575 9797           5A                           pop dx
38576 9798           58                           pop ax
38577                                           ! 8655 endasm
38578                                           !BCC_ENDASM
38579                                           ! 8656 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38580                                           ! 8657   Bit16u mode; Boolean using_lfb;
38581                       00009799            _mode_info_find_mode:
38582                                           !BCC_EOS
38583                                           !BCC_EOS
38584                                           ! 8658 {
38585                                           ! 8659   ModeInfoListItem *cur_info=&mode_info_list;
38586 9799           55                         push	bp
38587 979A           89E5                       mov	bp,sp
38588 979C           4C                         dec	sp
38589 979D           4C                         dec	sp
38590                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38591 979E           BB                   7DE1  mov	bx,#_mode_info_list
38592 97A1           895E         FE            mov	-2[bp],bx
38593                                           !BCC_EOS
38594                                           ! 8660   while (cur_info->mode != 0xFFFF)
38595                                           ! 8661   {
38596 97A4           EB           43            jmp .2B9
38597                       000097A6            .2BA:
38598                                           ! 8662     if (cur_info->mode == mode)
38599 97A6           8B5E         FE            mov	bx,-2[bp]
38600                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38601 97A9           8B1F                       mov	bx,[bx]
38602 97AB           3B5E         04            cmp	bx,4[bp]
38603 97AE           75           30            jne 	.2BB
38604                       000097B0            .2BC:
38605                                           ! 8663     {
38606                                           ! 8664       if (!using_lfb)
38607 97B0           8B46         06            mov	ax,6[bp]
38608 97B3           85C0                       test	ax,ax
38609 97B5           75           09            jne 	.2BD
38610                       000097B7            .2BE:
38611                                           ! 8665       {
38612                                           ! 8666         return cur_info;
38613 97B7           8B46         FE            mov	ax,-2[bp]
38614 97BA           89EC                       mov	sp,bp
38615 97BC           5D                         pop	bp
38616 97BD           C3                         ret
38617                                           !BCC_EOS
38618                                           ! 8667       }
38619                                           ! 8668       else if (cur_info->info.ModeAttributes & 0x0080)
38620 97BE           EB           1E            jmp .2BF
38621                       000097C0            .2BD:
38622 97C0           8B5E         FE            mov	bx,-2[bp]
38623                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38624 97C3           8A47         02            mov	al,2[bx]
38625 97C6           24                     80  and	al,#$80
38626 97C8           84C0                       test	al,al
38627 97CA           74           09            je  	.2C0
38628                       000097CC            .2C1:
38629                                           ! 8669       {
38630                                           ! 8670         return cur_info;
38631 97CC           8B46         FE            mov	ax,-2[bp]
38632 97CF           89EC                       mov	sp,bp
38633 97D1           5D                         pop	bp
38634 97D2           C3                         ret
38635                                           !BCC_EOS
38636                                           ! 8671       }
38637                                           ! 8672       else
38638                                           ! 8673       {
38639 97D3           EB           09            jmp .2C2
38640                       000097D5            .2C0:
38641                                           ! 8674         cur_info++;
38642                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38643 97D5           8B5E         FE            mov	bx,-2[bp]
38644 97D8           83C3                   44  add	bx,*$44
38645 97DB           895E         FE            mov	-2[bp],bx
38646                                           !BCC_EOS
38647                                           ! 8675       }
38648                                           ! 8676     }
38649                       000097DE            .2C2:
38650                       000097DE            .2BF:
38651                                           ! 8677     else
38652                                           ! 8678     {
38653 97DE           EB           09            jmp .2C3
38654                       000097E0            .2BB:
38655                                           ! 8679       cur_info++;
38656                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38657 97E0           8B5E         FE            mov	bx,-2[bp]
38658 97E3           83C3                   44  add	bx,*$44
38659 97E6           895E         FE            mov	-2[bp],bx
38660                                           !BCC_EOS
38661                                           ! 8680     }
38662                                           ! 8681   }
38663                       000097E9            .2C3:
38664                                           ! 8682   return 0;
38665                       000097E9            .2B9:
38666 97E9           8B5E         FE            mov	bx,-2[bp]
38667                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38668 97EC           8B1F                       mov	bx,[bx]
38669 97EE           81FB                 FFFF  cmp	bx,#$FFFF
38670 97F2           75           B2            jne	.2BA
38671                       000097F4            .2C4:
38672                       000097F4            .2B8:
38673 97F4           31C0                       xor	ax,ax
38674 97F6           89EC                       mov	sp,bp
38675 97F8           5D                         pop	bp
38676 97F9           C3                         ret
38677                                           !BCC_EOS
38678                                           ! 8683 }
38679                                           ! 8684 #asm
38680                                           !BCC_ASM
38681                       00000004            _mode_info_find_mode.using_lfb	set	4
38682                       00000002            _mode_info_find_mode.mode	set	2
38683                                           ; Has 1 display - Returns true if 1 display detected
38684                       000097FA            _vbe_has_vbe_display:
38685 97FA           1E                           push ds
38686 97FB           53                           push bx
38687 97FC           B8                   0040    mov ax, # 0x40
38688 97FF           8ED8                         mov ds, ax
38689 9801           BB                   00B9    mov bx, # 0xB9
38690 9804           8A07                         mov al, [bx]
38691 9806           24                     01    and al, #0x01
38692 9808           30E4                         xor ah, ah
38693 980A           5B                           pop bx
38694 980B           1F                           pop ds
38695 980C           C3                           ret
38696                                           ; 1 Init - Initialise the Vesa Bios Extension Code
38697                                           ; This function does a sanity check on the host side display code interface.
38698                       0000980D            vbe_init:
38699 980D           B8                   B0C0    mov ax, # 0xB0C0
38700 9810           E8         FCF4              call dispi_set_id
38701 9813           E8         FCE3              call dispi_get_id
38702 9816           3D                   B0C0    cmp ax, # 0xB0C0
38703 9819           75           16              jne no_vbe_interface
38704 981B           1E                           push ds
38705 981C           53                           push bx
38706 981D           B8                   0040    mov ax, # 0x40
38707 9820           8ED8                         mov ds, ax
38708 9822           BB                   00B9    mov bx, # 0xB9
38709 9825           B0                     01    mov al, #0x01
38710 9827           8807                         mov [bx], al
38711 9829           5B                           pop bx
38712 982A           1F                           pop ds
38713 982B           B8                   B0C5    mov ax, # 0xB0C5
38714 982E           E8         FCD6              call dispi_set_id
38715                       00009831            no_vbe_interface:
38716 9831           BB                   93E7    mov bx, #msg_vbe_init
38717 9834           53                           push bx
38718 9835           E8         E408              call _printf
38719 9838           44                           inc sp
38720 9839           44                           inc sp
38721 983A           C3                           ret
38722                                           ; 1 Display Info - Display information on screen about the 1
38723                       0000983B            vbe_display_info:
38724 983B           E8         FFBC              call _vbe_has_vbe_display
38725 983E           85C0                         test ax, ax
38726 9840           74           0B              jz no_vbe_flag
38727 9842           B8                   C000    mov ax, #0xc000
38728 9845           8ED8                         mov ds, ax
38729 9847           BE                   939D    mov si, #_vbebios_info_string
38730 984A           E9         9DB4              jmp _display_string
38731                       0000984D            no_vbe_flag:
38732 984D           B8                   C000    mov ax, #0xc000
38733 9850           8ED8                         mov ds, ax
38734 9852           BE                   93C3    mov si, #_no_vbebios_info_string
38735 9855           E9         9DA9              jmp _display_string
38736                                           ; helper function for memory size calculation
38737                       00009858            lmulul:
38738 9858     66    25               0000FFFF    and eax, #0x0000FFFF
38739 985E     66    C1E3                   10    shl ebx, #16
38740 9862     66    09D8                         or eax, ebx
38741 9865           36                           SEG SS
38742 9866     66    F725                         mul eax, dword ptr [di]
38743 9869     66    89C3                         mov ebx, eax
38744 986C     66    C1EB                   10    shr ebx, #16
38745 9870           C3                           ret
38746                                           ! 8748 endasm
38747                                           !BCC_ENDASM
38748                                           ! 8749 void vbe_biosfn_return_controller_information(AX, ES, DI)
38749                                           ! Register BX used in function mode_info_find_mode
38750                                           ! 8750 Bit16u *AX;Bit16u ES;Bit16u DI;
38751                                           export	_vbe_biosfn_return_controller_information
38752                       00009871            _vbe_biosfn_return_controller_information:
38753                                           !BCC_EOS
38754                                           !BCC_EOS
38755                                           !BCC_EOS
38756                                           ! 8751 {
38757                                           ! 8752         Bit16u ss=get_SS();
38758 9871           55                         push	bp
38759 9872           89E5                       mov	bp,sp
38760 9874           4C                         dec	sp
38761 9875           4C                         dec	sp
38762                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38763 9876           E8         E3C4            call	_get_SS
38764                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38765 9879           8946         FE            mov	-2[bp],ax
38766                                           !BCC_EOS
38767                                           ! 8753         VbeInfoBlock vbe_info_block;
38768                                           !BCC_EOS
38769                                           ! 8754         Bit16u status;
38770                                           !BCC_EOS
38771                                           ! 8755         Bit16u result;
38772                                           !BCC_EOS
38773                                           ! 8756         Bit16u vbe2_info;
38774                                           !BCC_EOS
38775                                           ! 8757         Bit16u cur_mode=0;
38776 987C           81C4                 FDF8  add	sp,#-$208
38777                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
38778 9880           31C0                       xor	ax,ax
38779 9882           8986       FDF6            mov	-$20A[bp],ax
38780                                           !BCC_EOS
38781                                           ! 8758         Bit16u cur_ptr=34;
38782 9886           4C                         dec	sp
38783 9887           4C                         dec	sp
38784                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
38785 9888           B8                   0022  mov	ax,*$22
38786 988B           8986       FDF4            mov	-$20C[bp],ax
38787                                           !BCC_EOS
38788                                           ! 8759         Bit16u size_64k;
38789                                           !BCC_EOS
38790                                           ! 8760         ModeInfoListItem *cur_info=&mode_info_list;
38791 988F           83C4                   FC  add	sp,*-4
38792                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
38793 9892           BB                   7DE1  mov	bx,#_mode_info_list
38794 9895           899E       FDF0            mov	-$210[bp],bx
38795                                           !BCC_EOS
38796                                           ! 8761         status = read_word(ss, AX);
38797                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
38798 9899           FF76         04            push	4[bp]
38799                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
38800 989C           FF76         FE            push	-2[bp]
38801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38802 989F           E8         E322            call	_read_word
38803 98A2           83C4                   04  add	sp,*4
38804                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
38805 98A5           8986       FDFC            mov	-$204[bp],ax
38806                                           !BCC_EOS
38807                                           ! 8762         vbe2_info = 0;
38808                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38809 98A9           31C0                       xor	ax,ax
38810 98AB           8986       FDF8            mov	-$208[bp],ax
38811                                           !BCC_EOS
38812                                           ! 8763         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
38813                                           ! Debug: list int = const $200 (used reg = )
38814 98AF           B8                   0200  mov	ax,#$200
38815 98B2           50                         push	ax
38816                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
38817 98B3           FF76         08            push	8[bp]
38818                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
38819 98B6           FF76         06            push	6[bp]
38820                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
38821 98B9           8D9E       FDFE            lea	bx,-$202[bp]
38822 98BD           53                         push	bx
38823                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
38824 98BE           FF76         FE            push	-2[bp]
38825                                           ! Debug: func () void = memcpyb+0 (used reg = )
38826 98C1           E8         E28D            call	_memcpyb
38827 98C4           83C4                   0A  add	sp,*$A
38828                                           !BCC_EOS
38829                                           ! 8764         if (((vbe_info_block.VbeSignature[0] == 'V') &&
38830                                           ! 8765              (vbe_info_block.VbeSignature[1] == 'B') &&
38831                                           ! 8766              (vbe_info_block.VbeSignature[2] == 'E') &&
38832                                           ! 8767              (vbe_info_block.VbeSignature[3] == '2')) ||
38833                                           ! 8768             ((vbe_info_block.VbeSignature[0] == 'V') &&
38834                                           ! 8769              (vbe_info_block.VbeSignature[1] == 'E') &&
38835                                           ! 8770              (vbe_info_block.VbeSignature[2] == 'S') &&
38836                                           ! 8771              (vbe_info_block.VbeSignature[3] == 'A')) )
38837                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38838 98C7           8A86       FDFE            mov	al,-$202[bp]
38839 98CB           3C                     56  cmp	al,*$56
38840 98CD           75           18            jne 	.2C7
38841                       000098CF            .2CA:
38842                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38843 98CF           8A86       FDFF            mov	al,-$201[bp]
38844 98D3           3C                     42  cmp	al,*$42
38845 98D5           75           10            jne 	.2C7
38846                       000098D7            .2C9:
38847                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38848 98D7           8A86       FE00            mov	al,-$200[bp]
38849 98DB           3C                     45  cmp	al,*$45
38850 98DD           75           08            jne 	.2C7
38851                       000098DF            .2C8:
38852                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38853 98DF           8A86       FE01            mov	al,-$1FF[bp]
38854 98E3           3C                     32  cmp	al,*$32
38855 98E5           74           20            je  	.2C6
38856                       000098E7            .2C7:
38857                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38858 98E7           8A86       FDFE            mov	al,-$202[bp]
38859 98EB           3C                     56  cmp	al,*$56
38860 98ED           75           1F            jne 	.2C5
38861                       000098EF            .2CD:
38862                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38863 98EF           8A86       FDFF            mov	al,-$201[bp]
38864 98F3           3C                     45  cmp	al,*$45
38865 98F5           75           17            jne 	.2C5
38866                       000098F7            .2CC:
38867                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38868 98F7           8A86       FE00            mov	al,-$200[bp]
38869 98FB           3C                     53  cmp	al,*$53
38870 98FD           75           0F            jne 	.2C5
38871                       000098FF            .2CB:
38872                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38873 98FF           8A86       FE01            mov	al,-$1FF[bp]
38874 9903           3C                     41  cmp	al,*$41
38875 9905           75           07            jne 	.2C5
38876                       00009907            .2C6:
38877                                           ! 8772         {
38878                                           ! 8773                 vbe2_info = 1;
38879                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38880 9907           B8                   0001  mov	ax,*1
38881 990A           8986       FDF8            mov	-$208[bp],ax
38882                                           !BCC_EOS
38883                                           ! 8774   
38884                                           ! 8774       }
38885                                           ! 8775         vbe_info_block.VbeSignature[0] = 'V';
38886                       0000990E            .2C5:
38887                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38888 990E           B0                     56  mov	al,*$56
38889 9910           8886       FDFE            mov	-$202[bp],al
38890                                           !BCC_EOS
38891                                           ! 8776         vbe_info_block.VbeSignature[1] = 'E';
38892                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38893 9914           B0                     45  mov	al,*$45
38894 9916           8886       FDFF            mov	-$201[bp],al
38895                                           !BCC_EOS
38896                                           ! 8777         vbe_info_block.VbeSignature[2] = 'S';
38897                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38898 991A           B0                     53  mov	al,*$53
38899 991C           8886       FE00            mov	-$200[bp],al
38900                                           !BCC_EOS
38901                                           ! 8778         vbe_info_block.VbeSignature[3] = 'A';
38902                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38903 9920           B0                     41  mov	al,*$41
38904 9922           8886       FE01            mov	-$1FF[bp],al
38905                                           !BCC_EOS
38906                                           ! 8779         vbe_info_block.VbeVersion = 0x0200;
38907                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
38908 9926           B8                   0200  mov	ax,#$200
38909 9929           8986       FE02            mov	-$1FE[bp],ax
38910                                           !BCC_EOS
38911                                           ! 8780         vbe_info_block.OemStringPtr_Seg = 0xc000;
38912                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
38913 992D           B8                   C000  mov	ax,#$C000
38914 9930           8986       FE06            mov	-$1FA[bp],ax
38915                                           !BCC_EOS
38916                                           ! 8781         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
38917                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
38918 9934           BB                   9321  mov	bx,#_vbebios_copyright
38919 9937           899E       FE04            mov	-$1FC[bp],bx
38920                                           !BCC_EOS
38921                                           ! 8782         vbe_info_block.Capabilities[0] = 0x0001;
38922                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
38923 993B           B0                     01  mov	al,*1
38924 993D           8886       FE08            mov	-$1F8[bp],al
38925                                           !BCC_EOS
38926                                           ! 8783         vbe_info_block.Capabilities[1] = 0;
38927                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
38928 9941           30C0                       xor	al,al
38929 9943           8886       FE09            mov	-$1F7[bp],al
38930                                           !BCC_EOS
38931                                           ! 8784         vbe_info_block.Capabilities[2] = 0;
38932                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
38933 9947           30C0                       xor	al,al
38934 9949           8886       FE0A            mov	-$1F6[bp],al
38935                                           !BCC_EOS
38936                                           ! 8785         vbe_info_block.Capabilities[3] = 0;
38937                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
38938 994D           30C0                       xor	al,al
38939 994F           8886       FE0B            mov	-$1F5[bp],al
38940                                           !BCC_EOS
38941                                           ! 8786         vbe_info_block.VideoModePtr_Seg= ES ;
38942                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
38943 9953           8B46         06            mov	ax,6[bp]
38944 9956           8986       FE0E            mov	-$1F2[bp],ax
38945                                           !BCC_EOS
38946                                           ! 8787         vbe_info_block.VideoModePtr_Off= DI + 34;
38947                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
38948 995A           8B46         08            mov	ax,8[bp]
38949                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
38950 995D           05                   0022  add	ax,*$22
38951 9960           8986       FE0C            mov	-$1F4[bp],ax
38952                                           !BCC_EOS
38953                                           ! 8788         outw(0x01CE, 0xa);
38954                                           ! Debug: list int = const $A (used reg = )
38955 9964           B8                   000A  mov	ax,*$A
38956 9967           50                         push	ax
38957                                           ! Debug: list int = const $1CE (used reg = )
38958 9968           B8                   01CE  mov	ax,#$1CE
38959 996B           50                         push	ax
38960                                           ! Debug: func () void = outw+0 (used reg = )
38961 996C           E8         E2BE            call	_outw
38962 996F           83C4                   04  add	sp,*4
38963                                           !BCC_EOS
38964                                           ! 8789         vbe_info_block.TotalMemory = inw(0x01CF);
38965                                           ! Debug: list int = const $1CF (used reg = )
38966 9972           B8                   01CF  mov	ax,#$1CF
38967 9975           50                         push	ax
38968                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38969 9976           E8         E299            call	_inw
38970 9979           44                         inc	sp
38971 997A           44                         inc	sp
38972                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
38973 997B           8986       FE10            mov	-$1F0[bp],ax
38974                                           !BCC_EOS
38975                                           ! 8790         if (vbe2_info)
38976 997F           8B86       FDF8            mov	ax,-$208[bp]
38977 9983           85C0                       test	ax,ax
38978 9985           74           4B            je  	.2CE
38979                       00009987            .2CF:
38980                                           ! 8791         {
38981                                           ! 8792                 vbe_info_block.OemSoftwareRev = 0x0002;;
38982                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
38983 9987           B8                   0002  mov	ax,*2
38984 998A           8986       FE12            mov	-$1EE[bp],ax
38985                                           !BCC_EOS
38986                                           !BCC_EOS
38987                                           ! 8793                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
38988                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
38989 998E           B8                   C000  mov	ax,#$C000
38990 9991           8986       FE16            mov	-$1EA[bp],ax
38991                                           !BCC_EOS
38992                                           ! 8794                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
38993                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
38994 9995           BB                   9367  mov	bx,#_vbebios_vendor_name
38995 9998           899E       FE14            mov	-$1EC[bp],bx
38996                                           !BCC_EOS
38997                                           ! 8795                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
38998                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
38999 999C           B8                   C000  mov	ax,#$C000
39000 999F           8986       FE1A            mov	-$1E6[bp],ax
39001                                           !BCC_EOS
39002                                           ! 8796                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
39003                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
39004 99A3           BB                   937F  mov	bx,#_vbebios_product_name
39005 99A6           899E       FE18            mov	-$1E8[bp],bx
39006                                           !BCC_EOS
39007                                           ! 8797                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
39008                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
39009 99AA           B8                   C000  mov	ax,#$C000
39010 99AD           8986       FE1E            mov	-$1E2[bp],ax
39011                                           !BCC_EOS
39012                                           ! 8798                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
39013                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
39014 99B1           BB                   9398  mov	bx,#_vbebios_product_revision
39015 99B4           899E       FE1C            mov	-$1E4[bp],bx
39016                                           !BCC_EOS
39017                                           ! 8799                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
39018                                           ! Debug: list int = const $200 (used reg = )
39019 99B8           B8                   0200  mov	ax,#$200
39020 99BB           50                         push	ax
39021                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39022 99BC           8D9E       FDFE            lea	bx,-$202[bp]
39023 99C0           53                         push	bx
39024                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39025 99C1           FF76         FE            push	-2[bp]
39026                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39027 99C4           FF76         08            push	8[bp]
39028                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39029 99C7           FF76         06            push	6[bp]
39030                                           ! Debug: func () void = memcpyb+0 (used reg = )
39031 99CA           E8         E184            call	_memcpyb
39032 99CD           83C4                   0A  add	sp,*$A
39033                                           !BCC_EOS
39034                                           ! 8800         }
39035                                           ! 8801         else
39036                                           ! 8802         {
39037 99D0           EB           18            jmp .2D0
39038                       000099D2            .2CE:
39039                                           ! 8803                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
39040                                           ! Debug: list int = const $100 (used reg = )
39041 99D2           B8                   0100  mov	ax,#$100
39042 99D5           50                         push	ax
39043                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39044 99D6           8D9E       FDFE            lea	bx,-$202[bp]
39045 99DA           53                         push	bx
39046                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39047 99DB           FF76         FE            push	-2[bp]
39048                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39049 99DE           FF76         08            push	8[bp]
39050                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39051 99E1           FF76         06            push	6[bp]
39052                                           ! Debug: func () void = memcpyb+0 (used reg = )
39053 99E4           E8         E16A            call	_memcpyb
39054 99E7           83C4                   0A  add	sp,*$A
39055                                           !BCC_EOS
39056                                           ! 8804         }
39057                                           ! 8805         do
39058                       000099EA            .2D0:
39059                                           ! 8806         {
39060                       000099EA            .2D3:
39061                                           ! 8807                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
39062 99EA           8B9E       FDF0            mov	bx,-$210[bp]
39063                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
39064 99EE           8A47         1B            mov	al,$1B[bx]
39065 99F1           30E4                       xor	ah,ah
39066 99F3           31DB                       xor	bx,bx
39067 99F5           53                         push	bx
39068 99F6           50                         push	ax
39069 99F7           8B9E       FDF0            mov	bx,-$210[bp]
39070                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39071 99FB           8B47         14            mov	ax,$14[bx]
39072 99FE           31DB                       xor	bx,bx
39073 9A00           53                         push	bx
39074 9A01           50                         push	ax
39075 9A02           8B9E       FDF0            mov	bx,-$210[bp]
39076                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39077 9A06           8B47         14            mov	ax,$14[bx]
39078 9A09           31DB                       xor	bx,bx
39079                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
39080 9A0B           8DBE       FDE8            lea	di,-$218[bp]
39081 9A0F           E8         FE46            call	lmulul
39082 9A12           83C4                   04  add	sp,*4
39083                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
39084 9A15           8DBE       FDEC            lea	di,-$214[bp]
39085 9A19           E8         FE3C            call	lmulul
39086 9A1C           83C4                   04  add	sp,*4
39087                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
39088                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
39089 9A1F           31C0                       xor	ax,ax
39090                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
39091 9A21           8986       FDF2            mov	-$20E[bp],ax
39092                                           !BCC_EOS
39093                                           ! 8808                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
39094                                           ! 8809                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
39095                                           ! 8810                     (size_64k <= vbe_info_block.TotalMemory)) {
39096                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
39097 9A25           E8         FB5B            call	_dispi_get_max_xres
39098 9A28           8B9E       FDF0            mov	bx,-$210[bp]
39099                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
39100 9A2C           3B47         14            cmp	ax,$14[bx]
39101 9A2F           72           4D            jb  	.2D4
39102                       00009A31            .2D7:
39103                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
39104 9A31           E8         FB71            call	_dispi_get_max_bpp
39105 9A34           8B9E       FDF0            mov	bx,-$210[bp]
39106                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
39107 9A38           50                         push	ax
39108 9A39           8A47         1B            mov	al,$1B[bx]
39109 9A3C           30E4                       xor	ah,ah
39110 9A3E           3B86       FDEE            cmp	ax,-$212[bp]
39111 9A42           8DA6       FDF0            lea	sp,-$210[bp]
39112 9A46           77           36            ja  	.2D4
39113                       00009A48            .2D6:
39114                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
39115 9A48           8B86       FDF2            mov	ax,-$20E[bp]
39116 9A4C           3B86       FE10            cmp	ax,-$1F0[bp]
39117 9A50           77           2C            ja  	.2D4
39118                       00009A52            .2D5:
39119                                           ! 8811                   write_word(ES, DI + cur_ptr, cur_info->mode);
39120 9A52           8B9E       FDF0            mov	bx,-$210[bp]
39121                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39122 9A56           FF37                       push	[bx]
39123                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39124 9A58           8B46         08            mov	ax,8[bp]
39125 9A5B           0386       FDF4            add	ax,-$20C[bp]
39126                                           ! Debug: list unsigned int = ax+0 (used reg = )
39127 9A5F           50                         push	ax
39128                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39129 9A60           FF76         06            push	6[bp]
39130                                           ! Debug: func () void = write_word+0 (used reg = )
39131 9A63           E8         E189            call	_write_word
39132 9A66           83C4                   06  add	sp,*6
39133                                           !BCC_EOS
39134                                           ! 8812                   cur_mode++;
39135                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
39136 9A69           8B86       FDF6            mov	ax,-$20A[bp]
39137 9A6D           40                         inc	ax
39138 9A6E           8986       FDF6            mov	-$20A[bp],ax
39139                                           !BCC_EOS
39140                                           ! 8813                   cur_ptr+=2;
39141                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
39142 9A72           8B86       FDF4            mov	ax,-$20C[bp]
39143 9A76           40                         inc	ax
39144 9A77           40                         inc	ax
39145 9A78           8986       FDF4            mov	-$20C[bp],ax
39146                                           !BCC_EOS
39147                                           ! 8814                 } else {
39148 9A7C           EB           00            jmp .2D8
39149                       00009A7E            .2D4:
39150                                           ! 8815                 }
39151                                           ! 8816                 cur_info++;
39152                       00009A7E            .2D8:
39153                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39154 9A7E           8B9E       FDF0            mov	bx,-$210[bp]
39155 9A82           83C3                   44  add	bx,*$44
39156 9A85           899E       FDF0            mov	-$210[bp],bx
39157                                           !BCC_EOS
39158                                           ! 8817         } while (cur_info->mode != 0xFFFF);
39159                       00009A89            .2D2:
39160 9A89           8B9E       FDF0            mov	bx,-$210[bp]
39161                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
39162 9A8D           8B1F                       mov	bx,[bx]
39163 9A8F           81FB                 FFFF  cmp	bx,#$FFFF
39164 9A93         0F85         FF53            bne 	.2D3
39165                       00009A97            .2D9:
39166                                           !BCC_EOS
39167                                           ! 8818         write_word(ES, DI + cur_ptr, cur
39168                       00009A97            .2D1:
39169                                           ! 8818 _info->mode);
39170 9A97           8B9E       FDF0            mov	bx,-$210[bp]
39171                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39172 9A9B           FF37                       push	[bx]
39173                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39174 9A9D           8B46         08            mov	ax,8[bp]
39175 9AA0           0386       FDF4            add	ax,-$20C[bp]
39176                                           ! Debug: list unsigned int = ax+0 (used reg = )
39177 9AA4           50                         push	ax
39178                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39179 9AA5           FF76         06            push	6[bp]
39180                                           ! Debug: func () void = write_word+0 (used reg = )
39181 9AA8           E8         E144            call	_write_word
39182 9AAB           83C4                   06  add	sp,*6
39183                                           !BCC_EOS
39184                                           ! 8819         result = 0x4f;
39185                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
39186 9AAE           B8                   004F  mov	ax,*$4F
39187 9AB1           8986       FDFA            mov	-$206[bp],ax
39188                                           !BCC_EOS
39189                                           ! 8820         write_word(ss, AX, result);
39190                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
39191 9AB5           FFB6       FDFA            push	-$206[bp]
39192                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
39193 9AB9           FF76         04            push	4[bp]
39194                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39195 9ABC           FF76         FE            push	-2[bp]
39196                                           ! Debug: func () void = write_word+0 (used reg = )
39197 9ABF           E8         E12D            call	_write_word
39198 9AC2           83C4                   06  add	sp,*6
39199                                           !BCC_EOS
39200                                           ! 8821 }
39201 9AC5           89EC                       mov	sp,bp
39202 9AC7           5D                         pop	bp
39203 9AC8           C3                         ret
39204                                           ! 8822 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
39205                                           ! Register BX used in function vbe_biosfn_return_controller_information
39206                                           ! 8823 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
39207                                           export	_vbe_biosfn_return_mode_information
39208                       00009AC9            _vbe_biosfn_return_mode_information:
39209                                           !BCC_EOS
39210                                           !BCC_EOS
39211                                           !BCC_EOS
39212                                           !BCC_EOS
39213                                           ! 8824 {
39214                                           ! 8825         Bit16u result=0x0100;
39215 9AC9           55                         push	bp
39216 9ACA           89E5                       mov	bp,sp
39217 9ACC           4C                         dec	sp
39218 9ACD           4C                         dec	sp
39219                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
39220 9ACE           B8                   0100  mov	ax,#$100
39221 9AD1           8946         FE            mov	-2[bp],ax
39222                                           !BCC_EOS
39223                                           ! 8826         Bit16u ss=get_SS();
39224 9AD4           4C                         dec	sp
39225 9AD5           4C                         dec	sp
39226                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39227 9AD6           E8         E164            call	_get_SS
39228                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
39229 9AD9           8946         FC            mov	-4[bp],ax
39230                                           !BCC_EOS
39231                                           ! 8827         ModeInfoBlock info;
39232                                           !BCC_EOS
39233                                           ! 8828         ModeInfoListItem *cur_info;
39234                                           !BCC_EOS
39235                                           ! 8829         Boolean using_lfb;
39236                                           !BCC_EOS
39237                                           ! 8830         Bit16u lfb_addr;
39238                                           !BCC_EOS
39239                                           ! 8831         using_lfb=((CX & 0x4000) == 0x4000);
39240 9ADC           81C4                 FEFA  add	sp,#-$106
39241                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
39242 9AE0           8B46         06            mov	ax,6[bp]
39243 9AE3           25                   4000  and	ax,#$4000
39244                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39245 9AE6           3D                   4000  cmp	ax,#$4000
39246 9AE9           75           04            jne	.2DA
39247 9AEB           B0                     01  mov	al,*1
39248 9AED           EB           02            jmp	.2DB
39249                       00009AEF            .2DA:
39250 9AEF           30C0                       xor	al,al
39251                       00009AF1            .2DB:
39252                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
39253 9AF1           30E4                       xor	ah,ah
39254 9AF3           8986       FEF8            mov	-$108[bp],ax
39255                                           !BCC_EOS
39256                                           ! 8832         CX = (CX & 0x1ff);
39257                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
39258 9AF7           8B46         06            mov	ax,6[bp]
39259 9AFA           25                   01FF  and	ax,#$1FF
39260                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
39261 9AFD           8946         06            mov	6[bp],ax
39262                                           !BCC_EOS
39263                                           ! 8833         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
39264                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
39265 9B00           8D9E       FEFA            lea	bx,-$106[bp]
39266 9B04           53                         push	bx
39267                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
39268 9B05           FFB6       FEF8            push	-$108[bp]
39269                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
39270 9B09           FF76         06            push	6[bp]
39271                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39272 9B0C           E8         FC8A            call	_mode_info_find_mode
39273 9B0F           83C4                   06  add	sp,*6
39274                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39275 9B12           8986       FEFA            mov	-$106[bp],ax
39276                                           !BCC_EOS
39277                                           ! 8834         if (cur_info != 0)
39278                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39279 9B16           8B86       FEFA            mov	ax,-$106[bp]
39280 9B1A           85C0                       test	ax,ax
39281 9B1C         0F84         008C            beq 	.2DC
39282                       00009B20            .2DD:
39283                                           ! 8835         {
39284                                           ! 8836                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
39285                                           ! Debug: list int = const $100 (used reg = )
39286 9B20           B8                   0100  mov	ax,#$100
39287 9B23           50                         push	ax
39288                                           ! Debug: list int = const 0 (used reg = )
39289 9B24           31C0                       xor	ax,ax
39290 9B26           50                         push	ax
39291                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
39292 9B27           8D9E       FEFC            lea	bx,-$104[bp]
39293 9B2B           53                         push	bx
39294                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
39295 9B2C           FF76         FC            push	-4[bp]
39296                                           ! Debug: func () void = memsetb+0 (used reg = )
39297 9B2F           E8         DFD5            call	_memsetb
39298 9B32           83C4                   08  add	sp,*8
39299                                           !BCC_EOS
39300                                           ! 8837                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
39301                                           ! Debug: list int = const $42 (used reg = )
39302 9B35           B8                   0042  mov	ax,*$42
39303 9B38           50                         push	ax
39304 9B39           8B9E       FEFA            mov	bx,-$106[bp]
39305                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
39306                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
39307 9B3D           43                         inc	bx
39308 9B3E           43                         inc	bx
39309 9B3F           53                         push	bx
39310                                           ! Debug: list unsigned int = const $C000 (used reg = )
39311 9B40           B8                   C000  mov	ax,#$C000
39312 9B43           50                         push	ax
39313                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
39314 9B44           8D9E       FEFC            lea	bx,-$104[bp]
39315 9B48           53                         push	bx
39316                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
39317 9B49           FF76         FC            push	-4[bp]
39318                                           ! Debug: func () void = memcpyb+0 (used reg = )
39319 9B4C           E8         E002            call	_memcpyb
39320 9B4F           83C4                   0A  add	sp,*$A
39321                                           !BCC_EOS
39322                                           ! 8838                 if (using_lfb) {
39323 9B52           8B86       FEF8            mov	ax,-$108[bp]
39324 9B56           85C0                       test	ax,ax
39325 9B58           74           06            je  	.2DE
39326                       00009B5A            .2DF:
39327                                           ! 8839                   info.NumberOfBanks = 1;
39328                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
39329 9B5A           B0                     01  mov	al,*1
39330 9B5C           8886       FF16            mov	-$EA[bp],al
39331                                           !BCC_EOS
39332                                           ! 8840                 }
39333                                           ! 8841                 lfb_addr = pci_get_lfb_addr(0x1234);
39334                       00009B60            .2DE:
39335                                           ! Debug: list int = const $1234 (used reg = )
39336 9B60           B8                   1234  mov	ax,#$1234
39337 9B63           50                         push	ax
39338                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
39339 9B64           E8         E216            call	_pci_get_lfb_addr
39340 9B67           44                         inc	sp
39341 9B68           44                         inc	sp
39342                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39343 9B69           8986       FEF6            mov	-$10A[bp],ax
39344                                           !BCC_EOS
39345                                           ! 8842                 if (lfb_addr > 0) {
39346                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39347 9B6D           8B86       FEF6            mov	ax,-$10A[bp]
39348 9B71           85C0                       test	ax,ax
39349 9B73           74           11            je  	.2E0
39350                       00009B75            .2E1:
39351                                           ! 8843                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
39352                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39353 9B75           8B86       FEF6            mov	ax,-$10A[bp]
39354 9B79           31DB                       xor	bx,bx
39355                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
39356 9B7B           93                         xchg	bx,ax
39357 9B7C           31C0                       xor	ax,ax
39358                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
39359 9B7E           8986       FF24            mov	-$DC[bp],ax
39360 9B82           899E       FF26            mov	-$DA[bp],bx
39361                                           !BCC_EOS
39362                                           ! 8844                 }
39363                                           ! 8845                 if (info.WinAAttributes & 0x01) {
39364                       00009B86            .2E0:
39365                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
39366 9B86           8A86       FEFE            mov	al,-$102[bp]
39367 9B8A           24                     01  and	al,*1
39368 9B8C           84C0                       test	al,al
39369 9B8E           74           14            je  	.2E2
39370                       00009B90            .2E3:
39371                                           ! 8846                   info.WinFuncPtr = 0xC0000000UL;
39372                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
39373 9B90           31C0                       xor	ax,ax
39374 9B92           BB                   C000  mov	bx,#$C000
39375 9B95           8986       FF08            mov	-$F8[bp],ax
39376 9B99           899E       FF0A            mov	-$F6[bp],bx
39377                                           !BCC_EOS
39378                                           ! 8847                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
39379                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
39380                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
39381 9B9D           BB                   9603  mov	bx,#_dispi_set_bank_farcall
39382 9BA0           899E       FF08            mov	-$F8[bp],bx
39383                                           !BCC_EOS
39384                                           ! 8848                 }
39385                                           ! 8849                 result = 0x4f;
39386                       00009BA4            .2E2:
39387                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39388 9BA4           B8                   004F  mov	ax,*$4F
39389 9BA7           8946         FE            mov	-2[bp],ax
39390                                           !BCC_EOS
39391                                           ! 8850         }
39392                                           ! 8851         else
39393                                           ! 8852         {
39394 9BAA           EB           06            jmp .2E4
39395                       00009BAC            .2DC:
39396                                           ! 8853                 result = 0x100;
39397                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
39398 9BAC           B8                   0100  mov	ax,#$100
39399 9BAF           8946         FE            mov	-2[bp],ax
39400                                           !BCC_EOS
39401                                           ! 8854         }
39402                                           ! 8855         if (result == 0x4f)
39403                       00009BB2            .2E4:
39404                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39405 9BB2           8B46         FE            mov	ax,-2[bp]
39406 9BB5           3D                   004F  cmp	ax,*$4F
39407 9BB8           75           18            jne 	.2E5
39408                       00009BBA            .2E6:
39409                                           ! 8856         {
39410                                           ! 8857                 memcpyb(ES, DI, ss, &info, sizeof(info));
39411                                           ! Debug: list int = const $100 (used reg = )
39412 9BBA           B8                   0100  mov	ax,#$100
39413 9BBD           50                         push	ax
39414                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
39415 9BBE           8D9E       FEFC            lea	bx,-$104[bp]
39416 9BC2           53                         push	bx
39417                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39418 9BC3           FF76         FC            push	-4[bp]
39419                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
39420 9BC6           FF76         0A            push	$A[bp]
39421                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
39422 9BC9           FF76         08            push	8[bp]
39423                                           ! Debug: func () void = memcpyb+0 (used reg = )
39424 9BCC           E8         DF82            call	_memcpyb
39425 9BCF           83C4                   0A  add	sp,*$A
39426                                           !BCC_EOS
39427                                           ! 8858         }
39428                                           ! 8859         write_word(ss, AX, result);
39429                       00009BD2            .2E5:
39430                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
39431 9BD2           FF76         FE            push	-2[bp]
39432                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
39433 9BD5           FF76         04            push	4[bp]
39434                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39435 9BD8           FF76         FC            push	-4[bp]
39436                                           ! Debug: func () void = write_word+0 (used reg = )
39437 9BDB           E8         E011            call	_write_word
39438 9BDE           83C4                   06  add	sp,*6
39439                                           !BCC_EOS
39440                                           ! 8860 }
39441 9BE1           89EC                       mov	sp,bp
39442 9BE3           5D                         pop	bp
39443 9BE4           C3                         ret
39444                                           ! 8861 void vbe_biosfn_set_mode(AX, BX, ES, DI)
39445                                           ! Register BX used in function vbe_biosfn_return_mode_information
39446                                           ! 8862 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
39447                                           export	_vbe_biosfn_set_mode
39448                       00009BE5            _vbe_biosfn_set_mode:
39449                                           !BCC_EOS
39450                                           !BCC_EOS
39451                                           !BCC_EOS
39452                                           !BCC_EOS
39453                                           ! 8863 {
39454                                           ! 8864         Bit16u ss = get_SS();
39455 9BE5           55                         push	bp
39456 9BE6           89E5                       mov	bp,sp
39457 9BE8           4C                         dec	sp
39458 9BE9           4C                         dec	sp
39459                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39460 9BEA           E8         E050            call	_get_SS
39461                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39462 9BED           8946         FE            mov	-2[bp],ax
39463                                           !BCC_EOS
39464                                           ! 8865         Bit16u result;
39465                                           !BCC_EOS
39466                                           ! 8866         ModeInfoListItem *cur_info;
39467                                           !BCC_EOS
39468                                           ! 8867         Boolean using_lfb;
39469                                           !BCC_EOS
39470                                           ! 8868         Bit8u no_clear;
39471                                           !BCC_EOS
39472                                           ! 8869         Bit8u lfb_flag;
39473                                           !BCC_EOS
39474                                           ! 8870         using_lfb=((BX & 0x4000) == 0x4000);
39475 9BF0           83C4                   F8  add	sp,*-8
39476                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
39477 9BF3           8B46         06            mov	ax,6[bp]
39478 9BF6           25                   4000  and	ax,#$4000
39479                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39480 9BF9           3D                   4000  cmp	ax,#$4000
39481 9BFC           75           04            jne	.2E7
39482 9BFE           B0                     01  mov	al,*1
39483 9C00           EB           02            jmp	.2E8
39484                       00009C02            .2E7:
39485 9C02           30C0                       xor	al,al
39486                       00009C04            .2E8:
39487                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
39488 9C04           30E4                       xor	ah,ah
39489 9C06           8946         F8            mov	-8[bp],ax
39490                                           !BCC_EOS
39491                                           ! 8871         lfb_flag=using_lfb?0x40:0;
39492 9C09           8B46         F8            mov	ax,-8[bp]
39493 9C0C           85C0                       test	ax,ax
39494 9C0E           74           04            je  	.2E9
39495                       00009C10            .2EA:
39496 9C10           B0                     40  mov	al,*$40
39497 9C12           EB           02            jmp .2EB
39498                       00009C14            .2E9:
39499 9C14           30C0                       xor	al,al
39500                       00009C16            .2EB:
39501                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
39502 9C16           8846         F6            mov	-$A[bp],al
39503                                           !BCC_EOS
39504                                           ! 8872         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
39505                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
39506 9C19           8B46         06            mov	ax,6[bp]
39507 9C1C           25                   8000  and	ax,#$8000
39508                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
39509 9C1F           3D                   8000  cmp	ax,#$8000
39510 9C22           75           04            jne 	.2EC
39511                       00009C24            .2ED:
39512 9C24           B0                     80  mov	al,#$80
39513 9C26           EB           02            jmp .2EE
39514                       00009C28            .2EC:
39515 9C28           30C0                       xor	al,al
39516                       00009C2A            .2EE:
39517                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
39518 9C2A           8846         F7            mov	-9[bp],al
39519                                           !BCC_EOS
39520                                           ! 8873         BX = (BX & 0x1ff);
39521                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
39522 9C2D           8B46         06            mov	ax,6[bp]
39523 9C30           25                   01FF  and	ax,#$1FF
39524                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
39525 9C33           8946         06            mov	6[bp],ax
39526                                           !BCC_EOS
39527                                           ! 8874         if (BX<0x0100)
39528                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
39529 9C36           8B46         06            mov	ax,6[bp]
39530 9C39           3D                   0100  cmp	ax,#$100
39531 9C3C           73           23            jae 	.2EF
39532                       00009C3E            .2F0:
39533                                           ! 8875         {
39534                                           ! 8876                 Bit8u mode;
39535                                           !BCC_EOS
39536                                           ! 8877                 dispi_set_enable(0x00);
39537 9C3E           4C                         dec	sp
39538 9C3F           4C                         dec	sp
39539                                           ! Debug: list int = const 0 (used reg = )
39540 9C40           31C0                       xor	ax,ax
39541 9C42           50                         push	ax
39542                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39543 9C43           E8         F981            call	_dispi_set_enable
39544 9C46           44                         inc	sp
39545 9C47           44                         inc	sp
39546                                           !BCC_EOS
39547                                           ! 8878                 mode=(BX & 0xff);
39548                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
39549 9C48           8A46         06            mov	al,6[bp]
39550                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
39551 9C4B           8846         F5            mov	-$B[bp],al
39552                                           !BCC_EOS
39553                                           ! 8879                 biosfn_set_video_mode(mode);
39554                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
39555 9C4E           8A46         F5            mov	al,-$B[bp]
39556 9C51           30E4                       xor	ah,ah
39557 9C53           50                         push	ax
39558                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39559 9C54           E8         9F0B            call	_biosfn_set_video_mode
39560 9C57           44                         inc	sp
39561 9C58           44                         inc	sp
39562                                           !BCC_EOS
39563                                           ! 8880                 result = 0x4f;
39564                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
39565 9C59           B8                   004F  mov	ax,*$4F
39566 9C5C           8946         FC            mov	-4[bp],ax
39567                                           !BCC_EOS
39568                                           ! 8881         }
39569 9C5F           44                         inc	sp
39570 9C60           44                         inc	sp
39571                                           ! 8882         cur_info = mode_
39572                       00009C61            .2EF:
39573                                           ! 8882 info_find_mode(BX, using_lfb, &cur_info);
39574                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
39575 9C61           8D5E         FA            lea	bx,-6[bp]
39576 9C64           53                         push	bx
39577                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
39578 9C65           FF76         F8            push	-8[bp]
39579                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39580 9C68           FF76         06            push	6[bp]
39581                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39582 9C6B           E8         FB2B            call	_mode_info_find_mode
39583 9C6E           83C4                   06  add	sp,*6
39584                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39585 9C71           8946         FA            mov	-6[bp],ax
39586                                           !BCC_EOS
39587                                           ! 8883         if (cur_info != 0)
39588                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39589 9C74           8B46         FA            mov	ax,-6[bp]
39590 9C77           85C0                       test	ax,ax
39591 9C79         0F84         0089            beq 	.2F1
39592                       00009C7D            .2F2:
39593                                           ! 8884         {
39594                                           ! 8885                 dispi_set_enable(0x00);
39595                                           ! Debug: list int = const 0 (used reg = )
39596 9C7D           31C0                       xor	ax,ax
39597 9C7F           50                         push	ax
39598                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39599 9C80           E8         F944            call	_dispi_set_enable
39600 9C83           44                         inc	sp
39601 9C84           44                         inc	sp
39602                                           !BCC_EOS
39603                                           ! 8886                 if (cur_info->info.BitsPerPixel == 4)
39604 9C85           8B5E         FA            mov	bx,-6[bp]
39605                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
39606 9C88           8A47         1B            mov	al,$1B[bx]
39607 9C8B           3C                     04  cmp	al,*4
39608 9C8D           75           09            jne 	.2F3
39609                       00009C8F            .2F4:
39610                                           ! 8887                 {
39611                                           ! 8888                   biosfn_set_video_mode(0x6a);
39612                                           ! Debug: list int = const $6A (used reg = )
39613 9C8F           B8                   006A  mov	ax,*$6A
39614 9C92           50                         push	ax
39615                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39616 9C93           E8         9ECC            call	_biosfn_set_video_mode
39617 9C96           44                         inc	sp
39618 9C97           44                         inc	sp
39619                                           !BCC_EOS
39620                                           ! 8889                 }
39621                                           ! 8890                 dispi_set_bpp(cur_info->info.BitsPerPixel);
39622                       00009C98            .2F3:
39623 9C98           8B5E         FA            mov	bx,-6[bp]
39624                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39625 9C9B           8A47         1B            mov	al,$1B[bx]
39626 9C9E           30E4                       xor	ah,ah
39627 9CA0           50                         push	ax
39628                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
39629 9CA1           E8         F8A8            call	_dispi_set_bpp
39630 9CA4           44                         inc	sp
39631 9CA5           44                         inc	sp
39632                                           !BCC_EOS
39633                                           ! 8891                 dispi_set_xres(cur_info->info.XResolution);
39634 9CA6           8B5E         FA            mov	bx,-6[bp]
39635                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39636 9CA9           FF77         14            push	$14[bx]
39637                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
39638 9CAC           E8         F868            call	_dispi_set_xres
39639 9CAF           44                         inc	sp
39640 9CB0           44                         inc	sp
39641                                           !BCC_EOS
39642                                           ! 8892                 dispi_set_yres(cur_info->info.YResolution);
39643 9CB1           8B5E         FA            mov	bx,-6[bp]
39644                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
39645 9CB4           FF77         16            push	$16[bx]
39646                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
39647 9CB7           E8         F874            call	_dispi_set_yres
39648 9CBA           44                         inc	sp
39649 9CBB           44                         inc	sp
39650                                           !BCC_EOS
39651                                           ! 8893                 dispi_set_bank(0);
39652                                           ! Debug: list int = const 0 (used reg = )
39653 9CBC           31C0                       xor	ax,ax
39654 9CBE           50                         push	ax
39655                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
39656 9CBF           E8         F923            call	_dispi_set_bank
39657 9CC2           44                         inc	sp
39658 9CC3           44                         inc	sp
39659                                           !BCC_EOS
39660                                           ! 8894                 dispi_set_enable(0x01 | no_clear | lfb_flag);
39661                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
39662                                           ! Debug: expression subtree swapping
39663 9CC4           8A46         F7            mov	al,-9[bp]
39664 9CC7           0C                     01  or	al,*1
39665                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
39666 9CC9           0A46         F6            or	al,-$A[bp]
39667                                           ! Debug: list unsigned char = al+0 (used reg = )
39668 9CCC           30E4                       xor	ah,ah
39669 9CCE           50                         push	ax
39670                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39671 9CCF           E8         F8F5            call	_dispi_set_enable
39672 9CD2           44                         inc	sp
39673 9CD3           44                         inc	sp
39674                                           !BCC_EOS
39675                                           ! 8895                 vga_compat_setup();
39676                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
39677 9CD4           E8         F9EB            call	_vga_compat_setup
39678                                           !BCC_EOS
39679                                           ! 8896                 write_word(0x40,0xBA,BX);
39680                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
39681 9CD7           FF76         06            push	6[bp]
39682                                           ! Debug: list int = const $BA (used reg = )
39683 9CDA           B8                   00BA  mov	ax,#$BA
39684 9CDD           50                         push	ax
39685                                           ! Debug: list int = const $40 (used reg = )
39686 9CDE           B8                   0040  mov	ax,*$40
39687 9CE1           50                         push	ax
39688                                           ! Debug: func () void = write_word+0 (used reg = )
39689 9CE2           E8         DF0A            call	_write_word
39690 9CE5           83C4                   06  add	sp,*6
39691                                           !BCC_EOS
39692                                           ! 8897                 write_byte(0x40,0x87,(0x60 | no_clear));
39693                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
39694                                           ! Debug: expression subtree swapping
39695 9CE8           8A46         F7            mov	al,-9[bp]
39696 9CEB           0C                     60  or	al,*$60
39697                                           ! Debug: list unsigned char = al+0 (used reg = )
39698 9CED           30E4                       xor	ah,ah
39699 9CEF           50                         push	ax
39700                                           ! Debug: list int = const $87 (used reg = )
39701 9CF0           B8                   0087  mov	ax,#$87
39702 9CF3           50                         push	ax
39703                                           ! Debug: list int = const $40 (used reg = )
39704 9CF4           B8                   0040  mov	ax,*$40
39705 9CF7           50                         push	ax
39706                                           ! Debug: func () void = write_byte+0 (used reg = )
39707 9CF8           E8         DEDC            call	_write_byte
39708 9CFB           83C4                   06  add	sp,*6
39709                                           !BCC_EOS
39710                                           ! 8898                 result = 0x4f;
39711                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39712 9CFE           B8                   004F  mov	ax,*$4F
39713 9D01           8946         FC            mov	-4[bp],ax
39714                                           !BCC_EOS
39715                                           ! 8899         }
39716                                           ! 8900         else
39717                                           ! 8901         {
39718 9D04           EB           14            jmp .2F5
39719                       00009D06            .2F1:
39720                                           ! 8902                 result = 0x100;
39721                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
39722 9D06           B8                   0100  mov	ax,#$100
39723 9D09           8946         FC            mov	-4[bp],ax
39724                                           !BCC_EOS
39725                                           ! 8903                 if (BX == 3)
39726                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
39727 9D0C           8B46         06            mov	ax,6[bp]
39728 9D0F           3D                   0003  cmp	ax,*3
39729 9D12           75           06            jne 	.2F6
39730                       00009D14            .2F7:
39731                                           ! 8904                         result = 0x4f;
39732                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39733 9D14           B8                   004F  mov	ax,*$4F
39734 9D17           8946         FC            mov	-4[bp],ax
39735                                           !BCC_EOS
39736                                           ! 8905         }
39737                       00009D1A            .2F6:
39738                                           ! 8906         write_word(ss, AX, result);
39739                       00009D1A            .2F5:
39740                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
39741 9D1A           FF76         FC            push	-4[bp]
39742                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
39743 9D1D           FF76         04            push	4[bp]
39744                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
39745 9D20           FF76         FE            push	-2[bp]
39746                                           ! Debug: func () void = write_word+0 (used reg = )
39747 9D23           E8         DEC9            call	_write_word
39748 9D26           83C4                   06  add	sp,*6
39749                                           !BCC_EOS
39750                                           ! 8907 }
39751 9D29           89EC                       mov	sp,bp
39752 9D2B           5D                         pop	bp
39753 9D2C           C3                         ret
39754                                           ! 8908 #asm
39755                                           !BCC_ASM
39756                       00000008            _vbe_biosfn_set_mode.DI	set	8
39757                       00000006            _vbe_biosfn_set_mode.ES	set	6
39758                       00000002            _vbe_biosfn_set_mode.AX	set	2
39759                       00000004            _vbe_biosfn_set_mode.BX	set	4
39760                       00009D2D            vbe_biosfn_return_current_mode:
39761 9D2D           1E                           push ds
39762 9D2E           B8                   0040    mov ax, # 0x40
39763 9D31           8ED8                         mov ds, ax
39764 9D33           E8         F8A1              call dispi_get_enable
39765 9D36           25                   0001    and ax, # 0x01
39766 9D39           74           09              jz no_vbe_mode
39767 9D3B           BB                   00BA    mov bx, # 0xBA
39768 9D3E           8B07                         mov ax, [bx]
39769 9D40           89C3                         mov bx, ax
39770 9D42           75           09              jnz vbe_03_ok
39771                       00009D44            no_vbe_mode:
39772 9D44           BB                   0049    mov bx, # 0x49
39773 9D47           8A07                         mov al, [bx]
39774 9D49           88C3                         mov bl, al
39775 9D4B           30FF                         xor bh, bh
39776                       00009D4D            vbe_03_ok:
39777 9D4D           B8                   004F    mov ax, #0x004f
39778 9D50           1F                           pop ds
39779 9D51           C3                           ret
39780                                           ! 8929 endasm
39781                                           !BCC_ENDASM
39782                                           ! 8930 Bit16u vbe_biosfn_read_video_state_size()
39783                                           ! Register BX used in function vbe_biosfn_set_mode
39784                                           ! 8931 {
39785                                           export	_vbe_biosfn_read_video_state_size
39786                       00009D52            _vbe_biosfn_read_video_state_size:
39787                                           ! 8932     return 9 * 2;
39788 9D52           55                         push	bp
39789 9D53           89E5                       mov	bp,sp
39790 9D55           B8                   0012  mov	ax,*$12
39791 9D58           5D                         pop	bp
39792 9D59           C3                         ret
39793                                           !BCC_EOS
39794                                           ! 8933 }
39795                                           ! 8934 void vbe_biosfn_save_video_state(ES, BX)
39796                                           ! 8935      Bit16u ES; Bit16u BX;
39797                                           export	_vbe_biosfn_save_video_state
39798                       00009D5A            _vbe_biosfn_save_video_state:
39799                                           !BCC_EOS
39800                                           !BCC_EOS
39801                                           ! 8936 {
39802                                           ! 8937     Bit16u enable, i;
39803                                           !BCC_EOS
39804                                           ! 8938     outw(0x01CE,0x4);
39805 9D5A           55                         push	bp
39806 9D5B           89E5                       mov	bp,sp
39807 9D5D           83C4                   FC  add	sp,*-4
39808                                           ! Debug: list int = const 4 (used reg = )
39809 9D60           B8                   0004  mov	ax,*4
39810 9D63           50                         push	ax
39811                                           ! Debug: list int = const $1CE (used reg = )
39812 9D64           B8                   01CE  mov	ax,#$1CE
39813 9D67           50                         push	ax
39814                                           ! Debug: func () void = outw+0 (used reg = )
39815 9D68           E8         DEC2            call	_outw
39816 9D6B           83C4                   04  add	sp,*4
39817                                           !BCC_EOS
39818                                           ! 8939     enable = inw(0x01CF);
39819                                           ! Debug: list int = const $1CF (used reg = )
39820 9D6E           B8                   01CF  mov	ax,#$1CF
39821 9D71           50                         push	ax
39822                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39823 9D72           E8         DE9D            call	_inw
39824 9D75           44                         inc	sp
39825 9D76           44                         inc	sp
39826                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39827 9D77           8946         FE            mov	-2[bp],ax
39828                                           !BCC_EOS
39829                                           ! 8940     write_word(ES, BX, enable);
39830                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39831 9D7A           FF76         FE            push	-2[bp]
39832                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39833 9D7D           FF76         06            push	6[bp]
39834                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39835 9D80           FF76         04            push	4[bp]
39836                                           ! Debug: func () void = write_word+0 (used reg = )
39837 9D83           E8         DE69            call	_write_word
39838 9D86           83C4                   06  add	sp,*6
39839                                           !BCC_EOS
39840                                           ! 8941     BX += 2;
39841                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39842 9D89           8B46         06            mov	ax,6[bp]
39843 9D8C           40                         inc	ax
39844 9D8D           40                         inc	ax
39845 9D8E           8946         06            mov	6[bp],ax
39846                                           !BCC_EOS
39847                                           ! 8942     if (!(enable & 0x01))
39848                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39849 9D91           8A46         FE            mov	al,-2[bp]
39850 9D94           24                     01  and	al,*1
39851 9D96           84C0                       test	al,al
39852 9D98           75           04            jne 	.2F8
39853                       00009D9A            .2F9:
39854                                           ! 8943         return;
39855 9D9A           89EC                       mov	sp,bp
39856 9D9C           5D                         pop	bp
39857 9D9D           C3                         ret
39858                                           !BCC_EOS
39859                                           ! 8944     for(i = 0x1; i <= 0x9; i++) {
39860                       00009D9E            .2F8:
39861                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
39862 9D9E           B8                   0001  mov	ax,*1
39863 9DA1           8946         FC            mov	-4[bp],ax
39864                                           !BCC_EOS
39865                                           !BCC_EOS
39866 9DA4           EB           3A            jmp .2FC
39867                       00009DA6            .2FD:
39868                                           ! 8945         if (i != 0x4) {
39869                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
39870 9DA6           8B46         FC            mov	ax,-4[bp]
39871 9DA9           3D                   0004  cmp	ax,*4
39872 9DAC           74           2B            je  	.2FE
39873                       00009DAE            .2FF:
39874                                           ! 8946             outw(0x01CE, i);
39875                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
39876 9DAE           FF76         FC            push	-4[bp]
39877                                           ! Debug: list int = const $1CE (used reg = )
39878 9DB1           B8                   01CE  mov	ax,#$1CE
39879 9DB4           50                         push	ax
39880                                           ! Debug: func () void = outw+0 (used reg = )
39881 9DB5           E8         DE75            call	_outw
39882 9DB8           83C4                   04  add	sp,*4
39883                                           !BCC_EOS
39884                                           ! 8947             write_word(ES, BX, inw(0x01CF));
39885                                           ! Debug: list int = const $1CF (used reg = )
39886 9DBB           B8                   01CF  mov	ax,#$1CF
39887 9DBE           50                         push	ax
39888                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39889 9DBF           E8         DE50            call	_inw
39890 9DC2           44                         inc	sp
39891 9DC3           44                         inc	sp
39892                                           ! Debug: list unsigned short = ax+0 (used reg = )
39893 9DC4           50                         push	ax
39894                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39895 9DC5           FF76         06            push	6[bp]
39896                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39897 9DC8           FF76         04            push	4[bp]
39898                                           ! Debug: func () void = write_word+0 (used reg = )
39899 9DCB           E8         DE21            call	_write_word
39900 9DCE           83C4                   06  add	sp,*6
39901                                           !BCC_EOS
39902                                           ! 8948             BX += 2;
39903                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39904 9DD1           8B46         06            mov	ax,6[bp]
39905 9DD4           40                         inc	ax
39906 9DD5           40                         inc	ax
39907 9DD6           8946         06            mov	6[bp],ax
39908                                           !BCC_EOS
39909                                           ! 8949         }
39910                                           ! 8950     }
39911                       00009DD9            .2FE:
39912                                           ! 8951 }
39913                       00009DD9            .2FB:
39914                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
39915 9DD9           8B46         FC            mov	ax,-4[bp]
39916 9DDC           40                         inc	ax
39917 9DDD           8946         FC            mov	-4[bp],ax
39918                       00009DE0            .2FC:
39919                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
39920 9DE0           8B46         FC            mov	ax,-4[bp]
39921 9DE3           3D                   0009  cmp	ax,*9
39922 9DE6           76           BE            jbe	.2FD
39923                       00009DE8            .300:
39924                       00009DE8            .2FA:
39925 9DE8           89EC                       mov	sp,bp
39926 9DEA           5D                         pop	bp
39927 9DEB           C3                         ret
39928                                           ! 8952 void vbe_biosfn_restore_video_state(ES, BX)
39929                                           ! 8953      Bit16u ES; Bit16u BX;
39930                                           export	_vbe_biosfn_restore_video_state
39931                       00009DEC            _vbe_biosfn_restore_video_state:
39932                                           !BCC_EOS
39933                                           !BCC_EOS
39934                                           ! 8954 {
39935                                           ! 8955     Bit16u enable, i;
39936                                           !BCC_EOS
39937                                           ! 8956     enable = read_word(ES, BX);
39938 9DEC           55                         push	bp
39939 9DED           89E5                       mov	bp,sp
39940 9DEF           83C4                   FC  add	sp,*-4
39941                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39942 9DF2           FF76         06            push	6[bp]
39943                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39944 9DF5           FF76         04            push	4[bp]
39945                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39946 9DF8           E8         DDC9            call	_read_word
39947 9DFB           83C4                   04  add	sp,*4
39948                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39949 9DFE           8946         FE            mov	-2[bp],ax
39950                                           !BCC_EOS
39951                                           ! 8957     BX += 2;
39952                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39953 9E01           8B46         06            mov	ax,6[bp]
39954 9E04           40                         inc	ax
39955 9E05           40                         inc	ax
39956 9E06           8946         06            mov	6[bp],ax
39957                                           !BCC_EOS
39958                                           ! 8958     if (!(enable & 0x01)) {
39959                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39960 9E09           8A46         FE            mov	al,-2[bp]
39961 9E0C           24                     01  and	al,*1
39962 9E0E           84C0                       test	al,al
39963 9E10           75           1E            jne 	.301
39964                       00009E12            .302:
39965                                           ! 8959         outw(0x01CE,0x4);
39966                                           ! Debug: list int = const 4 (used reg = )
39967 9E12           B8                   0004  mov	ax,*4
39968 9E15           50                         push	ax
39969                                           ! Debug: list int = const $1CE (used reg = )
39970 9E16           B8                   01CE  mov	ax,#$1CE
39971 9E19           50                         push	ax
39972                                           ! Debug: func () void = outw+0 (used reg = )
39973 9E1A           E8         DE10            call	_outw
39974 9E1D           83C4                   04  add	sp,*4
39975                                           !BCC_EOS
39976                                           ! 8960         outw(0x01CF, enable);
39977                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39978 9E20           FF76         FE            push	-2[bp]
39979                                           ! Debug: list int = const $1CF (used reg = )
39980 9E23           B8                   01CF  mov	ax,#$1CF
39981 9E26           50                         push	ax
39982                                           ! Debug: func () void = outw+0 (used reg = )
39983 9E27           E8         DE03            call	_outw
39984 9E2A           83C4                   04  add	sp,*4
39985                                           !BCC_EOS
39986                                           ! 8961     } else {
39987 9E2D           E9         00E5            br 	.303
39988                       00009E30            .301:
39989                                           ! 8962         outw(0x01CE, 0x1);
39990                                           ! Debug: list int = const 1 (used reg = )
39991 9E30           B8                   0001  mov	ax,*1
39992 9E33           50                         push	ax
39993                                           ! Debug: list int = const $1CE (used reg = )
39994 9E34           B8                   01CE  mov	ax,#$1CE
39995 9E37           50                         push	ax
39996                                           ! Debug: func () void = outw+0 (used reg = )
39997 9E38           E8         DDF2            call	_outw
39998 9E3B           83C4                   04  add	sp,*4
39999                                           !BCC_EOS
40000                                           ! 8963         outw(0x01CF, read_word(ES, BX));
40001                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40002 9E3E           FF76         06            push	6[bp]
40003                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40004 9E41           FF76         04            push	4[bp]
40005                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40006 9E44           E8         DD7D            call	_read_word
40007 9E47           83C4                   04  add	sp,*4
40008                                           ! Debug: list unsigned short = ax+0 (used reg = )
40009 9E4A           50                         push	ax
40010                                           ! Debug: list int = const $1CF (used reg = )
40011 9E4B           B8                   01CF  mov	ax,#$1CF
40012 9E4E           50                         push	ax
40013                                           ! Debug: func () void = outw+0 (used reg = )
40014 9E4F           E8         DDDB            call	_outw
40015 9E52           83C4                   04  add	sp,*4
40016                                           !BCC_EOS
40017                                           ! 8964         BX += 2;
40018                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40019 9E55           8B46         06            mov	ax,6[bp]
40020 9E58           40                         inc	ax
40021 9E59           40                         inc	ax
40022 9E5A           8946         06            mov	6[bp],ax
40023                                           !BCC_EOS
40024                                           ! 8965         outw(0x01CE, 0x2);
40025                                           ! Debug: list int = const 2 (used reg = )
40026 9E5D           B8                   0002  mov	ax,*2
40027 9E60           50                         push	ax
40028                                           ! Debug: list int = const $1CE (used reg = )
40029 9E61           B8                   01CE  mov	ax,#$1CE
40030 9E64           50                         push	ax
40031                                           ! Debug: func () void = outw+0 (used reg = )
40032 9E65           E8         DDC5            call	_outw
40033 9E68           83C4                   04  add	sp,*4
40034                                           !BCC_EOS
40035                                           ! 8966         outw(0x01CF, read_word(ES, BX)
40036                                           ! 8966 );
40037                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40038 9E6B           FF76         06            push	6[bp]
40039                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40040 9E6E           FF76         04            push	4[bp]
40041                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40042 9E71           E8         DD50            call	_read_word
40043 9E74           83C4                   04  add	sp,*4
40044                                           ! Debug: list unsigned short = ax+0 (used reg = )
40045 9E77           50                         push	ax
40046                                           ! Debug: list int = const $1CF (used reg = )
40047 9E78           B8                   01CF  mov	ax,#$1CF
40048 9E7B           50                         push	ax
40049                                           ! Debug: func () void = outw+0 (used reg = )
40050 9E7C           E8         DDAE            call	_outw
40051 9E7F           83C4                   04  add	sp,*4
40052                                           !BCC_EOS
40053                                           ! 8967         BX += 2;
40054                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40055 9E82           8B46         06            mov	ax,6[bp]
40056 9E85           40                         inc	ax
40057 9E86           40                         inc	ax
40058 9E87           8946         06            mov	6[bp],ax
40059                                           !BCC_EOS
40060                                           ! 8968         outw(0x01CE, 0x3);
40061                                           ! Debug: list int = const 3 (used reg = )
40062 9E8A           B8                   0003  mov	ax,*3
40063 9E8D           50                         push	ax
40064                                           ! Debug: list int = const $1CE (used reg = )
40065 9E8E           B8                   01CE  mov	ax,#$1CE
40066 9E91           50                         push	ax
40067                                           ! Debug: func () void = outw+0 (used reg = )
40068 9E92           E8         DD98            call	_outw
40069 9E95           83C4                   04  add	sp,*4
40070                                           !BCC_EOS
40071                                           ! 8969         outw(0x01CF, read_word(ES, BX));
40072                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40073 9E98           FF76         06            push	6[bp]
40074                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40075 9E9B           FF76         04            push	4[bp]
40076                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40077 9E9E           E8         DD23            call	_read_word
40078 9EA1           83C4                   04  add	sp,*4
40079                                           ! Debug: list unsigned short = ax+0 (used reg = )
40080 9EA4           50                         push	ax
40081                                           ! Debug: list int = const $1CF (used reg = )
40082 9EA5           B8                   01CF  mov	ax,#$1CF
40083 9EA8           50                         push	ax
40084                                           ! Debug: func () void = outw+0 (used reg = )
40085 9EA9           E8         DD81            call	_outw
40086 9EAC           83C4                   04  add	sp,*4
40087                                           !BCC_EOS
40088                                           ! 8970         BX += 2;
40089                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40090 9EAF           8B46         06            mov	ax,6[bp]
40091 9EB2           40                         inc	ax
40092 9EB3           40                         inc	ax
40093 9EB4           8946         06            mov	6[bp],ax
40094                                           !BCC_EOS
40095                                           ! 8971         outw(0x01CE,0x4);
40096                                           ! Debug: list int = const 4 (used reg = )
40097 9EB7           B8                   0004  mov	ax,*4
40098 9EBA           50                         push	ax
40099                                           ! Debug: list int = const $1CE (used reg = )
40100 9EBB           B8                   01CE  mov	ax,#$1CE
40101 9EBE           50                         push	ax
40102                                           ! Debug: func () void = outw+0 (used reg = )
40103 9EBF           E8         DD6B            call	_outw
40104 9EC2           83C4                   04  add	sp,*4
40105                                           !BCC_EOS
40106                                           ! 8972         outw(0x01CF, enable);
40107                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40108 9EC5           FF76         FE            push	-2[bp]
40109                                           ! Debug: list int = const $1CF (used reg = )
40110 9EC8           B8                   01CF  mov	ax,#$1CF
40111 9ECB           50                         push	ax
40112                                           ! Debug: func () void = outw+0 (used reg = )
40113 9ECC           E8         DD5E            call	_outw
40114 9ECF           83C4                   04  add	sp,*4
40115                                           !BCC_EOS
40116                                           ! 8973         for(i = 0x5; i <= 0x9; i++) {
40117                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
40118 9ED2           B8                   0005  mov	ax,*5
40119 9ED5           8946         FC            mov	-4[bp],ax
40120                                           !BCC_EOS
40121                                           !BCC_EOS
40122 9ED8           EB           33            jmp .306
40123                       00009EDA            .307:
40124                                           ! 8974             outw(0x01CE, i);
40125                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40126 9EDA           FF76         FC            push	-4[bp]
40127                                           ! Debug: list int = const $1CE (used reg = )
40128 9EDD           B8                   01CE  mov	ax,#$1CE
40129 9EE0           50                         push	ax
40130                                           ! Debug: func () void = outw+0 (used reg = )
40131 9EE1           E8         DD49            call	_outw
40132 9EE4           83C4                   04  add	sp,*4
40133                                           !BCC_EOS
40134                                           ! 8975             outw(0x01CF, read_word(ES, BX));
40135                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40136 9EE7           FF76         06            push	6[bp]
40137                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40138 9EEA           FF76         04            push	4[bp]
40139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40140 9EED           E8         DCD4            call	_read_word
40141 9EF0           83C4                   04  add	sp,*4
40142                                           ! Debug: list unsigned short = ax+0 (used reg = )
40143 9EF3           50                         push	ax
40144                                           ! Debug: list int = const $1CF (used reg = )
40145 9EF4           B8                   01CF  mov	ax,#$1CF
40146 9EF7           50                         push	ax
40147                                           ! Debug: func () void = outw+0 (used reg = )
40148 9EF8           E8         DD32            call	_outw
40149 9EFB           83C4                   04  add	sp,*4
40150                                           !BCC_EOS
40151                                           ! 8976             BX += 2;
40152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40153 9EFE           8B46         06            mov	ax,6[bp]
40154 9F01           40                         inc	ax
40155 9F02           40                         inc	ax
40156 9F03           8946         06            mov	6[bp],ax
40157                                           !BCC_EOS
40158                                           ! 8977         }
40159                                           ! 8978     }
40160                       00009F06            .305:
40161                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40162 9F06           8B46         FC            mov	ax,-4[bp]
40163 9F09           40                         inc	ax
40164 9F0A           8946         FC            mov	-4[bp],ax
40165                       00009F0D            .306:
40166                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40167 9F0D           8B46         FC            mov	ax,-4[bp]
40168 9F10           3D                   0009  cmp	ax,*9
40169 9F13           76           C5            jbe	.307
40170                       00009F15            .308:
40171                       00009F15            .304:
40172                                           ! 8979 }
40173                       00009F15            .303:
40174 9F15           89EC                       mov	sp,bp
40175 9F17           5D                         pop	bp
40176 9F18           C3                         ret
40177                                           ! 8980 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
40178                                           ! 8981 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
40179                                           export	_vbe_biosfn_save_restore_state
40180                       00009F19            _vbe_biosfn_save_restore_state:
40181                                           !BCC_EOS
40182                                           !BCC_EOS
40183                                           !BCC_EOS
40184                                           !BCC_EOS
40185                                           !BCC_EOS
40186                                           ! 8982 {
40187                                           ! 8983     Bit16u ss=get_SS();
40188 9F19           55                         push	bp
40189 9F1A           89E5                       mov	bp,sp
40190 9F1C           4C                         dec	sp
40191 9F1D           4C                         dec	sp
40192                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
40193 9F1E           E8         DD1C            call	_get_SS
40194                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
40195 9F21           8946         FE            mov	-2[bp],ax
40196                                           !BCC_EOS
40197                                           ! 8984     Bit16u result, val;
40198                                           !BCC_EOS
40199                                           ! 8985     result = 0x4f;
40200 9F24           83C4                   FC  add	sp,*-4
40201                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
40202 9F27           B8                   004F  mov	ax,*$4F
40203 9F2A           8946         FC            mov	-4[bp],ax
40204                                           !BCC_EOS
40205                                           ! 8986     switch(( DX & 0x00ff )) {
40206                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
40207 9F2D           8A46         08            mov	al,8[bp]
40208 9F30           E9         00A9            br 	.30B
40209                                           ! 8987     case 0x00:
40210                                           ! 8988         val = biosfn_read_video_state_size2(CX);
40211                       00009F33            .30C:
40212                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
40213 9F33           FF76         06            push	6[bp]
40214                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
40215 9F36           E8         CF79            call	_biosfn_read_video_state_size2
40216 9F39           44                         inc	sp
40217 9F3A           44                         inc	sp
40218                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40219 9F3B           8946         FA            mov	-6[bp],ax
40220                                           !BCC_EOS
40221                                           ! 8989         if (CX & 8)
40222                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40223 9F3E           8A46         06            mov	al,6[bp]
40224 9F41           24                     08  and	al,*8
40225 9F43           84C0                       test	al,al
40226 9F45           74           09            je  	.30D
40227                       00009F47            .30E:
40228                                           ! 8990             val += vbe_biosfn_read_video_state_size();
40229                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
40230 9F47           E8         FE08            call	_vbe_biosfn_read_video_state_size
40231                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40232 9F4A           0346         FA            add	ax,-6[bp]
40233 9F4D           8946         FA            mov	-6[bp],ax
40234                                           !BCC_EOS
40235                                           ! 8991         write_word(ss, BX, val);
40236                       00009F50            .30D:
40237                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40238 9F50           FF76         FA            push	-6[bp]
40239                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
40240 9F53           FF76         0C            push	$C[bp]
40241                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40242 9F56           FF76         FE            push	-2[bp]
40243                                           ! Debug: func () void = write_word+0 (used reg = )
40244 9F59           E8         DC93            call	_write_word
40245 9F5C           83C4                   06  add	sp,*6
40246                                           !BCC_EOS
40247                                           ! 8992         break;
40248 9F5F           E9         008C            br 	.309
40249                                           !BCC_EOS
40250                                           ! 8993     case 0x01:
40251                                           ! 8994         val = read_word(ss, BX);
40252                       00009F62            .30F:
40253                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40254 9F62           FF76         0C            push	$C[bp]
40255                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40256 9F65           FF76         FE            push	-2[bp]
40257                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40258 9F68           E8         DC59            call	_read_word
40259 9F6B           83C4                   04  add	sp,*4
40260                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40261 9F6E           8946         FA            mov	-6[bp],ax
40262                                           !BCC_EOS
40263                                           ! 8995         val = biosfn_save_video_state(CX, ES, val);
40264                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40265 9F71           FF76         FA            push	-6[bp]
40266                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40267 9F74           FF76         0A            push	$A[bp]
40268                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40269 9F77           FF76         06            push	6[bp]
40270                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
40271 9F7A           E8         CFA0            call	_biosfn_save_video_state
40272 9F7D           83C4                   06  add	sp,*6
40273                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40274 9F80           8946         FA            mov	-6[bp],ax
40275                                           !BCC_EOS
40276                                           ! 8996         if (CX & 8)
40277                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40278 9F83           8A46         06            mov	al,6[bp]
40279 9F86           24                     08  and	al,*8
40280 9F88           84C0                       test	al,al
40281 9F8A           74           0C            je  	.310
40282                       00009F8C            .311:
40283                                           ! 8997             vbe_biosfn_save_video_state(ES, val);
40284                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40285 9F8C           FF76         FA            push	-6[bp]
40286                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40287 9F8F           FF76         0A            push	$A[bp]
40288                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
40289 9F92           E8         FDC5            call	_vbe_biosfn_save_video_state
40290 9F95           83C4                   04  add	sp,*4
40291                                           !BCC_EOS
40292                                           ! 8998         break;
40293                       00009F98            .310:
40294 9F98           EB           54            jmp .309
40295                                           !BCC_EOS
40296                                           ! 8999     case 0x02:
40297                                           ! 9000         val = read_word(ss, BX);
40298                       00009F9A            .312:
40299                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40300 9F9A           FF76         0C            push	$C[bp]
40301                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40302 9F9D           FF76         FE            push	-2[bp]
40303                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40304 9FA0           E8         DC21            call	_read_word
40305 9FA3           83C4                   04  add	sp,*4
40306                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40307 9FA6           8946         FA            mov	-6[bp],ax
40308                                           !BCC_EOS
40309                                           ! 9001         val = biosfn_restore_video_state(CX, ES, val);
40310                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40311 9FA9           FF76         FA            push	-6[bp]
40312                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40313 9FAC           FF76         0A            push	$A[bp]
40314                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40315 9FAF           FF76         06            push	6[bp]
40316                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
40317 9FB2           E8         D532            call	_biosfn_restore_video_state
40318 9FB5           83C4                   06  add	sp,*6
40319                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40320 9FB8           8946         FA            mov	-6[bp],ax
40321                                           !BCC_EOS
40322                                           ! 9002         if (CX & 8)
40323                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40324 9FBB           8A46         06            mov	al,6[bp]
40325 9FBE           24                     08  and	al,*8
40326 9FC0           84C0                       test	al,al
40327 9FC2           74           0C            je  	.313
40328                       00009FC4            .314:
40329                                           ! 9003             vbe_biosfn_restore_video_state(ES, val);
40330                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40331 9FC4           FF76         FA            push	-6[bp]
40332                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40333 9FC7           FF76         0A            push	$A[bp]
40334                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
40335 9FCA           E8         FE1F            call	_vbe_biosfn_restore_video_state
40336 9FCD           83C4                   04  add	sp,*4
40337                                           !BCC_EOS
40338                                           ! 9004         break;
40339                       00009FD0            .313:
40340 9FD0           EB           1C            jmp .309
40341                                           !BCC_EOS
40342                                           ! 9005     default:
40343                                           ! 9006         result = 0x100;
40344                       00009FD2            .315:
40345                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
40346 9FD2           B8                   0100  mov	ax,#$100
40347 9FD5           8946         FC            mov	-4[bp],ax
40348                                           !BCC_EOS
40349                                           ! 9007         break;
40350 9FD8           EB           14            jmp .309
40351                                           !BCC_EOS
40352                                           ! 9008     }
40353                                           ! 9009     write_word(ss, AX, result);
40354 9FDA           EB           12            jmp .309
40355                       00009FDC            .30B:
40356 9FDC           2C                     00  sub	al,*0
40357 9FDE         0F84         FF51            beq 	.30C
40358 9FE2           2C                     01  sub	al,*1
40359 9FE4         0F84         FF7A            beq 	.30F
40360 9FE8           2C                     01  sub	al,*1
40361 9FEA           74           AE            je 	.312
40362 9FEC           EB           E4            jmp	.315
40363                       00009FEE            .309:
40364                       FFFFFFF8            ..FFF4	=	-8
40365                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
40366 9FEE           FF76         FC            push	-4[bp]
40367                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
40368 9FF1           FF76         04            push	4[bp]
40369                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40370 9FF4           FF76         FE            push	-2[bp]
40371                                           ! Debug: func () void = write_word+0 (used reg = )
40372 9FF7           E8         DBF5            call	_write_word
40373 9FFA           83C4                   06  add	sp,*6
40374                                           !BCC_EOS
40375                                           ! 9010 }
40376 9FFD           89EC                       mov	sp,bp
40377 9FFF           5D                         pop	bp
40378 A000           C3                         ret
40379                                           ! 9011 #asm
40380                                           !BCC_ASM
40381                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40382                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40383                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40384                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40385                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40386                       0000A001            vbe_biosfn_display_window_control:
40387 A001           80FB                   00    cmp bl, #0x00
40388 A004           75           24              jne vbe_05_failed
40389 A006           80FF                   01    cmp bh, #0x01
40390 A009           74           16              je get_display_window
40391 A00B           72           04              jb set_display_window
40392 A00D           B8                   0100    mov ax, #0x0100
40393 A010           C3                           ret
40394                       0000A011            set_display_window:
40395 A011           89D0                         mov ax, dx
40396 A013           E8         F5CF              call _dispi_set_bank
40397 A016           E8         F5DC              call dispi_get_bank
40398 A019           39D0                         cmp ax, dx
40399 A01B           75           0D              jne vbe_05_failed
40400 A01D           B8                   004F    mov ax, #0x004f
40401 A020           C3                           ret
40402                       0000A021            get_display_window:
40403 A021           E8         F5D1              call dispi_get_bank
40404 A024           89C2                         mov dx, ax
40405 A026           B8                   004F    mov ax, #0x004f
40406 A029           C3                           ret
40407                       0000A02A            vbe_05_failed:
40408 A02A           B8                   014F    mov ax, #0x014f
40409 A02D           C3                           ret
40410                                           ! 9036 endasm
40411                                           !BCC_ENDASM
40412                                           ! 9037 #asm
40413                                           !BCC_ASM
40414                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40415                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40416                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40417                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40418                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40419                       0000A02E            vbe_biosfn_set_get_logical_scan_line_length:
40420 A02E           89C8                         mov ax, cx
40421 A030           80FB                   01    cmp bl, #0x01
40422 A033           74           24              je get_logical_scan_line_length
40423 A035           80FB                   02    cmp bl, #0x02
40424 A038           74           06              je set_logical_scan_line_bytes
40425 A03A           72           1A              jb set_logical_scan_line_pixels
40426 A03C           B8                   0100    mov ax, #0x0100
40427 A03F           C3                           ret
40428                       0000A040            set_logical_scan_line_bytes:
40429 A040           50                           push ax
40430 A041           E8         F526              call dispi_get_bpp
40431 A044           30FF                         xor bh, bh
40432 A046           88E3                         mov bl, ah
40433 A048           08DB                         or bl, bl
40434 A04A           75           05              jnz no_4bpp_1
40435 A04C           C1E0                   03    shl ax, #3
40436 A04F           B3                     01    mov bl, #1
40437                       0000A051            no_4bpp_1:
40438 A051           31D2                         xor dx, dx
40439 A053           58                           pop ax
40440 A054           F7F3                         div bx
40441                       0000A056            set_logical_scan_line_pixels:
40442 A056           E8         F63A              call dispi_set_virt_width
40443                       0000A059            get_logical_scan_line_length:
40444 A059           E8         F50E              call dispi_get_bpp
40445 A05C           30FF                         xor bh, bh
40446 A05E           88E3                         mov bl, ah
40447 A060           E8         F643              call dispi_get_virt_width
40448 A063           89C1                         mov cx, ax
40449 A065           08DB                         or bl, bl
40450 A067           75           05              jnz no_4bpp_2
40451 A069           C1E8                   03    shr ax, #3
40452 A06C           B3                     01    mov bl, #1
40453                       0000A06E            no_4bpp_2:
40454 A06E           F7E3                         mul bx
40455 A070           89C3                         mov bx, ax
40456 A072           E8         F63F              call dispi_get_virt_height
40457 A075           89C2                         mov dx, ax
40458 A077           B8                   004F    mov ax, #0x004f
40459 A07A           C3                           ret
40460                                           ! 9079 endasm
40461                                           !BCC_ENDASM
40462                                           ! 9080 #asm
40463                                           !BCC_ASM
40464                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40465                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40466                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40467                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40468                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40469                       0000A07B            vbe_biosfn_set_get_display_start:
40470 A07B           80FB                   80    cmp bl, #0x80
40471 A07E           74           0B              je set_display_start
40472 A080           80FB                   01    cmp bl, #0x01
40473 A083           74           14              je get_display_start
40474 A085           72           04              jb set_display_start
40475 A087           B8                   0100    mov ax, #0x0100
40476 A08A           C3                           ret
40477                       0000A08B            set_display_start:
40478 A08B           89C8                         mov ax, cx
40479 A08D           E8         F5AA              call dispi_set_x_offset
40480 A090           89D0                         mov ax, dx
40481 A092           E8         F5C3              call dispi_set_y_offset
40482 A095           B8                   004F    mov ax, #0x004f
40483 A098           C3                           ret
40484                       0000A099            get_display_start:
40485 A099           E8         F5AE              call dispi_get_x_offset
40486 A09C           89C1                         mov cx, ax
40487 A09E           E8         F5C7              call dispi_get_y_offset
40488 A0A1           89C2                         mov dx, ax
40489 A0A3           30FF                         xor bh, bh
40490 A0A5           B8                   004F    mov ax, #0x004f
40491 A0A8           C3                           ret
40492                                           ! 9104 endasm
40493                                           !BCC_ENDASM
40494                                           ! 9105 #asm
40495                                           !BCC_ASM
40496                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40497                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40498                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40499                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40500                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40501                       0000A0A9            vbe_biosfn_set_get_dac_palette_format:
40502 A0A9           80FB                   01    cmp bl, #0x01
40503 A0AC           74           1E              je get_dac_palette_format
40504 A0AE           72           04              jb set_dac_palette_format
40505 A0B0           B8                   0100    mov ax, #0x0100
40506 A0B3           C3                           ret
40507                       0000A0B4            set_dac_palette_format:
40508 A0B4           E8         F520              call dispi_get_enable
40509 A0B7           80FF                   06    cmp bh, #0x06
40510 A0BA           74           0A              je set_normal_dac
40511 A0BC           80FF                   08    cmp bh, #0x08
40512 A0BF           75           1B              jne vbe_08_unsupported
40513 A0C1           0D                   0020    or ax, # 0x20
40514 A0C4           75           03              jnz set_dac_mode
40515                       0000A0C6            set_normal_dac:
40516 A0C6           25                   FFDF    and ax, #~ 0x20
40517                       0000A0C9            set_dac_mode:
40518 A0C9           E8         F4FB              call _dispi_set_enable
40519                       0000A0CC            get_dac_palette_format:
40520 A0CC           B7                     06    mov bh, #0x06
40521 A0CE           E8         F506              call dispi_get_enable
40522 A0D1           25                   0020    and ax, # 0x20
40523 A0D4           74           02              jz vbe_08_ok
40524 A0D6           B7                     08    mov bh, #0x08
40525                       0000A0D8            vbe_08_ok:
40526 A0D8           B8                   004F    mov ax, #0x004f
40527 A0DB           C3                           ret
40528                       0000A0DC            vbe_08_unsupported:
40529 A0DC           B8                   014F    mov ax, #0x014f
40530 A0DF           C3                           ret
40531                                           ! 9136 endasm
40532                                           !BCC_ENDASM
40533                                           ! 9137 void vbe_biosfn_set_get_palette_data(AX)
40534                                           ! 9138 {
40535                                           export	_vbe_biosfn_set_get_palette_data
40536                       0000A0E0            _vbe_biosfn_set_get_palette_data:
40537                                           ! 9139 }
40538 A0E0           C3                         ret
40539                                           ! 9140 #asm
40540                                           !BCC_ASM
40541                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40542                       0000A0E1            vbe_biosfn_return_protected_mode_interface:
40543 A0E1           84DB                         test bl, bl
40544 A0E3           75           11              jnz _fail
40545 A0E5           BF                   C000    mov di, #0xc000
40546 A0E8           8EC7                         mov es, di
40547 A0EA           BF                   93F8    mov di, # vesa_pm_start
40548 A0ED           B9                   94F9    mov cx, # vesa_pm_end
40549 A0F0           29F9                         sub cx, di
40550 A0F2           B8                   004F    mov ax, #0x004f
40551 A0F5           C3                           ret
40552                       0000A0F6            _fail:
40553 A0F6           B8                   014F    mov ax, #0x014f
40554 A0F9           C3                           ret
40555                                           ! 9154 endasm
40556                                           !BCC_ENDASM
40557                                           ! 9155 #asm
40558                                           !BCC_ASM
40559                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40560                                           ;; DATA_SEG_DEFS_HERE
40561                                           ! 9157 endasm
40562                                           !BCC_ENDASM
40563                                           ! 9158 #asm
40564                                           !BCC_ASM
40565                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40566 A0FA                        76            .ascii "vgabios ends here"
40567 A10B                        00            .byte 0x00
40568                       0000A10C            vgabios_end:
40569 A10C                        CB            .byte 0xCB
40570                                           ;; BLOCK_STRINGS_BEGIN
40571                                           ! 9164 endasm
40572                                           !BCC_ENDASM
40573                                           ! 9165 
40574                                           
40575 A10D                                      .bss
40576                                           
40577                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B60 A   .10                         0 365F A   
.100                        0 4C85 A   .101                        0 4C7E A   
.102                        0 4C75 A   .103                        0 4E1F A   
.104                        0 4D91 A   .105                        0 4D07 A   
.106                        0 4D8E A   .107                        0 4D7D A   
.108                        0 4D84 A   .109                        0 4D11 A   
.10A                        0 4D55 A   .10B                        0 4D2F A   
.10C                        0 4D28 A   .10D                        0 4D7D A   
.10E                        0 4D8E A   .10F                        0 4E1F A   
.11                         0 368E A   .110                        0 4E1F A   
.111                        0 4E0C A   .112                        0 4E13 A   
.113                        0 4D9B A   .114                        0 4DD8 A   
.115                        0 4DB2 A   .116                        0 4DAB A   
.117                        0 4E00 A   .118                        0 4E0C A   
.119                        0 4E0A A   .11A                        0 4E1F A   
.11B                        0 4E22 A   .11C                        0 4EB5 A   
.11D                        0 4E70 A   .11E                        0 4E5E A   
.11F                        0 4E4C A   .12                         0 367E A   
.120                        0 4E45 A   .121                        0 4E3E A   
.122                        0 4FF9 A   .123                        0 4ED8 A   
.124                        0 4EBC A   .125                        0 4F6B A   
.126                        0 4EE1 A   .127                        0 4F68 A   
.128                        0 4F57 A   .129                        0 4F5E A   
.12A                        0 4EEB A   .12B                        0 4F2F A   
.12C                        0 4F09 A   .12D                        0 4F02 A   
.12E                        0 4F57 A   .12F                        0 4F68 A   
.13                         0 3693 A   .130                        0 4FF9 A   
.131                        0 4FF9 A   .132                        0 4FE6 A   
.133                        0 4FED A   .134                        0 4F75 A   
.135                        0 4FB2 A   .136                        0 4F8C A   
.137                        0 4F85 A   .138                        0 4FDA A   
.139                        0 4FE6 A   .13A                        0 4FE4 A   
.13B                        0 4FF9 A   .13C                        0 504B A   
.13D                        0 5047 A   .13E                        0 510A A   
.13F                        0 50AC A   .14                         0 36AA A   
.140                        0 510A A   .141                        0 513B A   
.143                        0 5131 A   .144                        0 5119 A   
.145                        0 5121 A   .146                        0 5129 A   
.147                        0 51A8 A   .148                        0 5198 A   
.149                        0 51B6 A   .14A                        0 526E A   
.14B                        0 525D A   .14C                        0 5264 A   
.14D                        0 51BE A   .14E                        0 525D A   
.14F                        0 524D A   .15                         0 36BE A   
.150                        0 5254 A   .151                        0 51DB A   
.152                        0 523D A   .153                        0 5226 A   
.154                        0 524D A   .155                        0 525D A   
.156                        0 526E A   .157                        0 5480 A   
.158                        0 5470 A   .159                        0 5477 A   
.15A                        0 52C4 A   .15B                        0 52E8 A   
.15C                        0 52DF A   .15D                        0 53A9 A   
.15E                        0 52F6 A   .15F                        0 5311 A   
.16                         0 36D7 A   .160                        0 52FF A   
.161                        0 5316 A   .162                        0 5393 A   
.163                        0 5385 A   .164                        0 538C A   
.165                        0 531D A   .166                        0 537B A   
.167                        0 5334 A   .168                        0 535D A   
.169                        0 533D A   .16A                        0 537B A   
.16B                        0 5393 A   .16C                        0 5470 A   
.16D                        0 5470 A   .16E                        0 5467 A   
.16F                        0 53AC A   .17                         0 36EE A   
.170                        0 53C7 A   .171                        0 53B5 A   
.172                        0 53CC A   .173                        0 544D A   
.174                        0 543F A   .175                        0 5446 A   
.176                        0 53D3 A   .177                        0 5435 A   
.178                        0 53EA A   .179                        0 5415 A   
.17A                        0 53F3 A   .17B                        0 5435 A   
.17C                        0 544D A   .17D                        0 5470 A   
.17E                        0 5480 A   .17F                        0 5554 A   
.18                         0 36FC A   .180                        0 5544 A   
.181                        0 554B A   .182                        0 54CA A   
.183                        0 5544 A   .184                        0 5536 A   
.185                        0 553D A   .186                        0 54F0 A   
.187                        0 5512 A   .188                        0 550C A   
.189                        0 5544 A   .18A                        0 5554 A   
.18B                        0 5588 A   .18C                        0 5584 A   
.18D                        0 5653 A   .18E                        0 55E9 A   
.18F                        0 5746 A   .19                         0 3737 A   
.190                        0 5746 A   .191                        0 572E A   
.192                        0 5688 A   .193                        0 5727 A   
.195                        0 5713 A   .196                        0 569C A   
.197                        0 569C A   .198                        0 56C5 A   
.199                        0 56EE A   .19A                        0 5746 A   
.19B                        0 573A A   .19C                        0 577A A   
.19D                        0 5776 A   .19E                        0 5849 A   
.19F                        0 57DB A   .1A                         0 3771 A   
.1A0                        0 5846 A   .1A1                        0 583A A   
.1A2                        0 5811 A   .1A3                        0 5846 A   
.1A4                        0 593C A   .1A5                        0 593C A   
.1A6                        0 5924 A   .1A7                        0 587E A   
.1A8                        0 591D A   .1AA                        0 5909 A   
.1AB                        0 5892 A   .1AC                        0 5892 A   
.1AD                        0 58BB A   .1AE                        0 58E4 A   
.1AF                        0 593C A   .1B                         0 3786 A   
.1B0                        0 5930 A   .1B1                        0 59E8 A   
.1B2                        0 59E4 A   .1B3                        0 5A02 A   
.1B4                        0 59FE A   .1B5                        0 5C50 A   
.1B7                        0 5C3A A   .1B8                        0 5A17 A   
.1B9                        0 5A17 A   .1BA                        0 5A98 A   
.1BB                        0 5A8A A   .1BC                        0 5ABD A   
.1BD                        0 5AEF A   .1BE                        0 5AD3 A   
.1BF                        0 5B09 A   .1C                         0 37A6 A   
.1C0                        0 5B1B A   .1C1                        0 5B12 A   
.1C2                        0 5B87 A   .1C3                        0 5B41 A   
.1C4                        0 5BC7 A   .1C5                        0 5BDB A   
.1C6                        0 5BD0 A   .1C7                        0 5BF1 A   
.1C8                        0 5C06 A   .1C9                        0 5C8A A   
.1CA                        0 5C86 A   .1CB                        0 5CA4 A   
.1CC                        0 5CA0 A   .1CD                        0 5E38 A   
.1CF                        0 5E20 A   .1D                         0 37C6 A   
.1D0                        0 5CB9 A   .1D1                        0 5CB9 A   
.1D2                        0 5D4D A   .1D3                        0 5D3F A   
.1D4                        0 5D46 A   .1D5                        0 5CFB A   
.1D6                        0 5D3F A   .1D7                        0 5D2B A   
.1D8                        0 5D4D A   .1D9                        0 5D50 A   
.1DA                        0 5D7C A   .1DB                        0 5D73 A   
.1DC                        0 5DC7 A   .1DD                        0 5DA2 A   
.1DE                        0 5DE8 A   .1DF                        0 5DEA A   
.1E                         0 37E3 A   .1E0                        0 5E19 A   
.1E1                        0 5E78 A   .1E2                        0 5E67 A   
.1E3                        0 5EA2 A   .1E4                        0 5E9E A   
.1E5                        0 60FE A   .1E7                        0 60DD A   
.1E8                        0 5EF3 A   .1E9                        0 5EF6 A   
.1EA                        0 5F04 A   .1EB                        0 5EFD A   
.1EC                        0 5F07 A   .1ED                        0 5F0F A   
.1EE                        0 5F19 A   .1EF                        0 5F66 A   
.1F                         0 37FE A   .1F0                        0 5F5B A   
.1F1                        0 5F19 A   .1F2                        0 5F66 A   
.1F3                        0 5F69 A   .1F4                        0 6003 A   
.1F5                        0 5F81 A   .1F6                        0 6000 A   
.1F7                        0 5FDD A   .1F8                        0 60D4 A   
.1F9                        0 60D4 A   .1FB                        0 60C0 A   
.1FC                        0 6049 A   .1FD                        0 6049 A   
.1FE                        0 6072 A   .1FF                        0 609B A   
.20                         0 381B A   .200                        0 6114 A   
.201                        0 6108 A   .202                        0 61E9 A   
.203                        0 6120 A   .204                        0 61B9 A   
.205                        0 6138 A   .206                        0 61E0 A   
.207                        0 6596 A   .208                        0 6585 A   
.209                        0 658C A   .20A                        0 64CE A   
.20B                        0 6541 A   .20C                        0 653B A   
.20D                        0 6596 A   .20E                        0 6677 A   
.20F                        0 6667 A   .21                         0 382A A   
.210                        0 668F A   .211                        0 67D4 A   
.212                        0 67C5 A   .213                        0 67CC A   
.214                        0 6788 A   .215                        0 67D4 A   
.216                        0 67E9 A   .217                        0 67DE A   
.218                        0 686D A   .219                        0 685E A   
.21A                        0 6865 A   .21B                        0 6824 A   
.21C                        0 686D A   .21D                        0 6880 A   
.21E                        0 6877 A   .21F                        0 68FE A   
.22                         0 3965 A   .220                        0 68EF A   
.221                        0 68F6 A   .222                        0 68BB A   
.223                        0 68FE A   .224                        0 6911 A   
.225                        0 6908 A   .226                        0 699C A   
.227                        0 698D A   .228                        0 6994 A   
.229                        0 6959 A   .22A                        0 699C A   
.22B                        0 69AF A   .22C                        0 69A6 A   
.22D                        0 6B31 A   .22F                        0 6B0C A   
.230                        0 69C9 A   .231                        0 6A00 A   
.232                        0 6A37 A   .233                        0 6A5A A   
.234                        0 6A7D A   .235                        0 6AA0 A   
.236                        0 6AC2 A   .237                        0 6AE4 A   
.238                        0 6B06 A   .239                        0 6B2F A   
.23A                        0 6B1F A   .23B                        0 6CA1 A   
.23C                        0 6C8F A   .23D                        0 6D2B A   
.23E                        0 6D1F A   .23F                        0 6CD0 A   
.24                         0 3911 A   .240                        0 6D03 A   
.241                        0 6CEE A   .242                        0 6D2B A   
.243                        0 6D43 A   .244                        0 6D34 A   
.245                        0 6ECE A   .246                        0 6EC5 A   
.247                        0 6EE0 A   .248                        0 6ED7 A   
.249                        0 6EF2 A   .24A                        0 6EE9 A   
.24B                        0 71A5 A   .24C                        0 6F3F A   
.24D                        0 702A A   .24E                        0 701B A   
.24F                        0 7022 A   .25                         0 3830 A   
.250                        0 6FEF A   .251                        0 702A A   
.252                        0 7098 A   .253                        0 7089 A   
.254                        0 7090 A   .255                        0 705D A   
.256                        0 7098 A   .257                        0 70EB A   
.258                        0 70DC A   .259                        0 70E3 A   
.25A                        0 709F A   .25B                        0 70EB A   
.25C                        0 7136 A   .25D                        0 7127 A   
.25E                        0 712E A   .25F                        0 70FB A   
.26                         0 3830 A   .260                        0 7136 A   
.261                        0 7420 A   .262                        0 71B0 A   
.263                        0 7351 A   .264                        0 7342 A   
.265                        0 7349 A   .266                        0 731A A   
.267                        0 7351 A   .268                        0 74E0 A   
.269                        0 742B A   .26A                        0 74CA A   
.26B                        0 74BB A   .26C                        0 74C2 A   
.26D                        0 749C A   .26E                        0 74CA A   
.26F                        0 77A2 A   .27                         0 3859 A   
.270                        0 74F8 A   .271                        0 7567 A   
.272                        0 7558 A   .273                        0 755F A   
.274                        0 752B A   .275                        0 7567 A   
.276                        0 75EC A   .277                        0 75DD A   
.278                        0 75E4 A   .279                        0 75A8 A   
.27A                        0 75D6 A   .27B                        0 75B0 A   
.27C                        0 75EC A   .27D                        0 760E A   
.27E                        0 7606 A   .27F                        0 76AF A   
.28                         0 3859 A   .280                        0 76A0 A   
.281                        0 76A7 A   .282                        0 766B A   
.283                        0 76AF A   .284                        0 7708 A   
.285                        0 76F9 A   .286                        0 7700 A   
.287                        0 76CC A   .288                        0 7708 A   
.289                        0 7A1D A   .28A                        0 77AD A   
.28B                        0 794E A   .28C                        0 793F A   
.28D                        0 7946 A   .28E                        0 7917 A   
.28F                        0 794E A   .29                         0 386E A   
.290                        0 7ABE A   .291                        0 7A28 A   
.292                        0 7AAA A   .293                        0 7A9B A   
.294                        0 7AA2 A   .295                        0 7A7B A   
.296                        0 7AAA A   .297                        0 7B00 A   
.298                        0 7AF2 A   .299                        0 7AF9 A   
.29A                        0 7AD6 A   .29B                        0 7AF2 A   
.29C                        0 7AEA A   .29D                        0 7B00 A   
.29E                        0 7D79 A   .29F                        0 7D63 A   
.2A                         0 386E A   .2A0                        0 7C5F A   
.2A1                        0 7C74 A   .2A2                        0 7C66 A   
.2A3                        0 7D5C A   .2A4                        0 7D4C A   
.2A5                        0 7C7D A   .2A6                        0 7CAC A   
.2A7                        0 7C8B A   .2A8                        0 7C84 A   
.2A9                        0 7D4A A   .2AA                        0 7D4A A   
.2AB                        0 7CB5 A   .2AC                        0 7CD9 A   
.2AD                        0 7CD3 A   .2AE                        0 7D45 A   
.2AF                        0 7D36 A   .2B                         0 3883 A   
.2B0                        0 7D3D A   .2B1                        0 7CEC A   
.2B2                        0 7D1E A   .2B3                        0 7D0B A   
.2B4                        0 7D2F A   .2B5                        0 7D45 A   
.2B6                        0 7D5C A   .2B7                        0 7D79 A   
.2B8                        0 97F4 A   .2B9                        0 97E9 A   
.2BA                        0 97A6 A   .2BB                        0 97E0 A   
.2BC                        0 97B0 A   .2BD                        0 97C0 A   
.2BE                        0 97B7 A   .2BF                        0 97DE A   
.2C                         0 3883 A   .2C0                        0 97D5 A   
.2C1                        0 97CC A   .2C2                        0 97DE A   
.2C3                        0 97E9 A   .2C4                        0 97F4 A   
.2C5                        0 990E A   .2C6                        0 9907 A   
.2C7                        0 98E7 A   .2C8                        0 98DF A   
.2C9                        0 98D7 A   .2CA                        0 98CF A   
.2CB                        0 98FF A   .2CC                        0 98F7 A   
.2CD                        0 98EF A   .2CE                        0 99D2 A   
.2CF                        0 9987 A   .2D                         0 3898 A   
.2D0                        0 99EA A   .2D1                        0 9A97 A   
.2D2                        0 9A89 A   .2D3                        0 99EA A   
.2D4                        0 9A7E A   .2D5                        0 9A52 A   
.2D6                        0 9A48 A   .2D7                        0 9A31 A   
.2D8                        0 9A7E A   .2D9                        0 9A97 A   
.2DA                        0 9AEF A   .2DB                        0 9AF1 A   
.2DC                        0 9BAC A   .2DD                        0 9B20 A   
.2DE                        0 9B60 A   .2DF                        0 9B5A A   
.2E                         0 38A7 A   .2E0                        0 9B86 A   
.2E1                        0 9B75 A   .2E2                        0 9BA4 A   
.2E3                        0 9B90 A   .2E4                        0 9BB2 A   
.2E5                        0 9BD2 A   .2E6                        0 9BBA A   
.2E7                        0 9C02 A   .2E8                        0 9C04 A   
.2E9                        0 9C14 A   .2EA                        0 9C10 A   
.2EB                        0 9C16 A   .2EC                        0 9C28 A   
.2ED                        0 9C24 A   .2EE                        0 9C2A A   
.2EF                        0 9C61 A   .2F                         0 38C5 A   
.2F0                        0 9C3E A   .2F1                        0 9D06 A   
.2F2                        0 9C7D A   .2F3                        0 9C98 A   
.2F4                        0 9C8F A   .2F5                        0 9D1A A   
.2F6                        0 9D1A A   .2F7                        0 9D14 A   
.2F8                        0 9D9E A   .2F9                        0 9D9A A   
.2FA                        0 9DE8 A   .2FB                        0 9DD9 A   
.2FC                        0 9DE0 A   .2FD                        0 9DA6 A   
.2FE                        0 9DD9 A   .2FF                        0 9DAE A   
.3                          0 3B0C A   .30                         0 38D3 A   
.300                        0 9DE8 A   .301                        0 9E30 A   
.302                        0 9E12 A   .303                        0 9F15 A   
.304                        0 9F15 A   .305                        0 9F06 A   
.306                        0 9F0D A   .307                        0 9EDA A   
.308                        0 9F15 A   .309                        0 9FEE A   
.30B                        0 9FDC A   .30C                        0 9F33 A   
.30D                        0 9F50 A   .30E                        0 9F47 A   
.30F                        0 9F62 A   .31                         0 38E1 A   
.310                        0 9F98 A   .311                        0 9F8C A   
.312                        0 9F9A A   .313                        0 9FD0 A   
.314                        0 9FC4 A   .315                        0 9FD2 A   
.32                         0 38EF A   .33                         0 3968 A   
.34                         0 39B5 A   .36                         0 39A9 A   
.37                         0 396D A   .38                         0 3972 A   
.39                         0 3990 A   .3A                         0 39B8 A   
.3B                         0 39EC A   .3C                         0 3A08 A   
.3D                         0 3A4C A   .3F                         0 3A40 A   
.4                          0 3635 A   .40                         0 3A0D A   
.41                         0 3A1C A   .42                         0 3A2D A   
.43                         0 3A59 A   .44                         0 3B02 A   
.45                         0 3A62 A   .46                         0 3B00 A   
.48                         0 3AD5 A   .49                         0 3A67 A   
.4A                         0 3A7A A   .4B                         0 3A8F A   
.4C                         0 3AA4 A   .4D                         0 3ABD A   
.4E                         0 3AC5 A   .4F                         0 3ACD A   
.5                          0 3690 A   .50                         0 3AFE A   
.51                         0 3AE8 A   .52                         0 3B08 A   
.53                         0 3B59 A   .54                         0 3B1F A   
.55                         0 3B80 A   .56                         0 3B78 A   
.57                         0 3BA1 A   .58                         0 3B9D A   
.59                         0 3D74 A   .5A                         0 3C2F A   
.5B                         0 3CA1 A   .5D                         0 3C91 A   
.5E                         0 3C6F A   .5F                         0 3C77 A   
.60                         0 3C7F A   .61                         0 3C87 A   
.62                         0 3D5E A   .63                         0 3D4D A   
.64                         0 3D54 A   .65                         0 3CA9 A   
.66                         0 3D26 A   .67                         0 3CCA A   
.68                         0 3D4D A   .69                         0 3D5E A   
.6A                         0 3D74 A   .6B                         0 3D67 A   
.6C                         0 3DC4 A   .6D                         0 3DB5 A   
.6E                         0 3DBC A   .6F                         0 3D84 A   
.7                          0 366B A   .70                         0 3DC4 A   
.71                         0 3E49 A   .72                         0 3E3A A   
.73                         0 3E41 A   .74                         0 3E02 A   
.75                         0 3E49 A   .76                         0 3E90 A   
.77                         0 3E81 A   .78                         0 3E88 A   
.79                         0 3E50 A   .7A                         0 3E90 A   
.7B                         0 3EAB A   .7C                         0 3EA6 A   
.7D                         0 3EAE A   .7E                         0 3F05 A   
.7F                         0 3EF6 A   .8                          0 3647 A   
.80                         0 3EFD A   .81                         0 3EC5 A   
.82                         0 3F05 A   .83                         0 4005 A   
.84                         0 3F44 A   .85                         0 3F80 A   
.86                         0 3F5A A   .87                         0 4005 A   
.88                         0 3FAB A   .89                         0 3F87 A   
.8A                         0 4005 A   .8B                         0 4142 A   
.8C                         0 4134 A   .8D                         0 4164 A   
.8E                         0 4155 A   .8F                         0 415C A   
.9                          0 3653 A   .90                         0 4149 A   
.91                         0 4164 A   .92                         0 4190 A   
.93                         0 4182 A   .94                         0 41F6 A   
.96                         0 41E7 A   .97                         0 41A8 A   
.98                         0 41BD A   .99                         0 41D1 A   
.9A                         0 42C4 A   .9B                         0 4274 A   
.9C                         0 426D A   .9D                         0 4266 A   
.9E                         0 425E A   .9F                         0 429D A   
.A                          0 3653 A   .A0                         0 4288 A   
.A1                         0 42B1 A   .A2                         0 4326 A   
.A3                         0 4322 A   .A4                         0 4411 A   
.A5                         0 4359 A   .A6                         0 4449 A   
.A7                         0 4445 A   .A8                         0 449B A   
.A9                         0 4497 A   .AA                         0 44C5 A   
.AB                         0 44C1 A   .AC                         0 455D A   
.AD                         0 44EF A   .AE                         0 4581 A   
.AF                         0 46A9 A   .B                          0 3653 A   
.B0                         0 469A A   .B1                         0 46A1 A   
.B2                         0 465E A   .B3                         0 46A9 A   
.B4                         0 4734 A   .B5                         0 4725 A   
.B6                         0 472C A   .B7                         0 46FB A   
.B8                         0 4734 A   .B9                         0 4854 A   
.BA                         0 4843 A   .BB                         0 484A A   
.BC                         0 47A2 A   .BD                         0 4801 A   
.BE                         0 47AB A   .BF                         0 4843 A   
.C                          0 3653 A   .C0                         0 4854 A   
.C1                         0 4909 A   .C2                         0 48FA A   
.C3                         0 4901 A   .C4                         0 488C A   
.C5                         0 48CD A   .C6                         0 4895 A   
.C7                         0 48FA A   .C8                         0 4909 A   
.C9                         0 491F A   .CA                         0 491B A   
.CB                         0 492B A   .CC                         0 4927 A   
.CD                         0 4955 A   .CE                         0 4951 A   
.CF                         0 4992 A   .D                          0 3653 A   
.D0                         0 4981 A   .D1                         0 49A3 A   
.D2                         0 499C A   .D3                         0 49B4 A   
.D4                         0 49AD A   .D5                         0 49C3 A   
.D6                         0 49BE A   .D7                         0 4C3A A   
.D8                         0 49EA A   .D9                         0 4A74 A   
.DA                         0 4A3F A   .DB                         0 4A2D A   
.DC                         0 4A1B A   .DD                         0 4A14 A   
.DE                         0 4A0D A   .DF                         0 4C37 A   
.E                          0 3653 A   .E0                         0 4B59 A   
.E1                         0 4A7D A   .E2                         0 4B56 A   
.E3                         0 4B43 A   .E4                         0 4B4A A   
.E5                         0 4A88 A   .E6                         0 4AE8 A   
.E7                         0 4AA6 A   .E8                         0 4A9F A   
.E9                         0 4B43 A   .EA                         0 4B56 A   
.EB                         0 4C37 A   .EC                         0 4C37 A   
.ED                         0 4C24 A   .EE                         0 4C2B A   
.EF                         0 4B64 A   .F                          0 3653 A   
.F0                         0 4BBD A   .F1                         0 4B7B A   
.F2                         0 4B74 A   .F3                         0 4C18 A   
.F4                         0 4C24 A   .F5                         0 4C22 A   
.F6                         0 4C37 A   .F7                         0 500F A   
.F8                         0 500F A   .FA                         0 4FFD A   
.FB                         0 4C6C A   .FC                         0 4C6C A   
.FD                         0 4CFE A   .FE                         0 4CA9 A   
.FF                         0 4C97 A   _biosfn_alternate_prtsc     0 6B92 A   
_biosfn_enable_video_refre+ 0 6C6D A   _biosfn_get_cursor_pos      0 4415 A   
_biosfn_get_font_info       0 69B8 A   _biosfn_load_gfx_8_14_char+ 0 69B5 A   
_biosfn_load_gfx_8_16_char+ 0 69B7 A   _biosfn_load_gfx_8_8_chars  0 69B3 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 69B6 A   _biosfn_load_gfx_user_char+ 0 69B4 A   
_biosfn_load_text_8_14_pat  0 67ED A   _biosfn_load_text_8_16_pat  0 6922 A   
_biosfn_load_text_8_8_pat   0 6884 A   _biosfn_load_text_user_pat  0 6751 A   
_biosfn_perform_gray_scale+ 0 64AA A   _biosfn_read_char_attr      0 5013 A   
_biosfn_read_pixel          0 5C54 A   _biosfn_read_state_info     0 6D7A A   
_biosfn_read_video_state_s+ 0 6EF9 A   _biosfn_read_video_state_s+ 0 6EB2 A   
_biosfn_restore_video_stat+ 0 74E7 A   _biosfn_save_video_state    0 6F1D A   
_biosfn_scroll              0 490D A   _biosfn_set_active_page     0 448A A   
_biosfn_set_cursor_pos      0 4315 A   _biosfn_set_cursor_shape    0 41FA A   
_biosfn_set_video_mode      0 3B62 A   _biosfn_switch_video_inter+ 0 6C6C A   
_biosfn_write_char_attr     0 5558 A   _biosfn_write_char_only     0 574A A   
_biosfn_write_pixel         0 59B8 A   _biosfn_write_string        0 6C6E A   
_biosfn_write_teletype      0 5E5A A   _dac_regs                   0 028D A   
_dispi_get_max_bpp          0 95A5 A   _dispi_get_max_xres         0 9583 A   
_dispi_set_bank             0 95E5 A   _dispi_set_bank_farcall     0 9603 A   
_dispi_set_bpp              0 954C A   _dispi_set_enable           0 95C7 A   
_dispi_set_xres             0 9517 A   _dispi_set_yres             0 952E A   
_display_info               0 35E3 A   _display_splash_screen      0 35E2 A   
_display_string             0 3601 A   _fail                       0 A0F6 A   
_find_vga_entry             0 7AC5 A   _get_SS                     0 7C3D A E 
_get_font_access            0 65B1 A   _inb                        0 7C07 A E 
_int10_func                 0 3628 A   _inw                        0 7C12 A E 
_line_to_vpti               0 027D A   _memcpyb                    0 7B51 A   
_memcpyw                    0 7B81 A   _memsetb                    0 7B07 A   
_memsetw                    0 7B2C A   _mode_info_find_mode        0 9799 A   
_mode_info_list             0 7DE1 A   _no_vbebios_info_string     0 93C3 A   
_outb                       0 7C1D A E _outw                       0 7C2D A E 
_palette0                   0 0A11 A   _palette1                   0 0AD1 A   
_palette2                   0 0B91 A   _palette3                   0 0C51 A   
_pci_get_lfb_addr           0 7D7D A   _printf                     0 7C40 A E 
_read_byte                  0 7BB1 A   _read_word                  0 7BC4 A   
_release_font_access        0 65D4 A   _set_scan_lines             0 6608 A   
_static_functionality       0 0F51 A   _vbe_biosfn_read_video_sta+ 0 9D52 A E 
_vbe_biosfn_restore_video_+ 0 9DEC A E _vbe_biosfn_return_control+ 0 9871 A E 
_vbe_biosfn_return_mode_in+ 0 9AC9 A E _vbe_biosfn_save_restore_s+ 0 9F19 A E 
_vbe_biosfn_save_video_sta+ 0 9D5A A E _vbe_biosfn_set_get_palett+ 0 A0E0 A E 
_vbe_biosfn_set_mode        0 9BE5 A E _vbe_has_vbe_display        0 97FA A   
_vbebios_copyright          0 9321 A   _vbebios_info_string        0 939D A   
_vbebios_product_name       0 937F A   _vbebios_product_revision   0 9398 A   
_vbebios_vendor_name        0 9367 A   _vga_compat_setup           0 96C2 A   
_vga_modes                  0 01FD A   _vgafont14                  0 1761 A   
_vgafont14alt               0 3561 A   _vgafont16                  0 2561 A   
_vgafont16alt               0 3562 A   _vgafont8                   0 0F61 A   
_vgamem_copy_cga            0 4746 A   _vgamem_copy_pl4            0 45F9 A   
_vgamem_fill_cga            0 4858 A   _vgamem_fill_pl4            0 46BB A   
_video_param_table          0 0291 A   _video_save_pointer_table   0 35C6 A   
_write_byte                 0 7BD7 A   _write_gfx_char_cga         0 5281 A   
_write_gfx_char_lin         0 5484 A   _write_gfx_char_pl4         0 510E A   
_write_word                 0 7BEF A   biosfn_enable_cursor_emula+ 0 6C4A A   
biosfn_enable_default_pale+ 0 6BE6 A   biosfn_enable_grayscale_su+ 0 6C26 A   
biosfn_enable_video_addres+ 0 6C08 A   biosfn_get_all_palette_reg  0 634F A   
biosfn_get_ega_info         0 6B6F A   biosfn_get_single_palette_+ 0 631D A   
biosfn_get_video_mode       0 621A A   biosfn_group_0B             0 5940 A   
biosfn_group_10             0 6241 A   biosfn_group_1A             0 6D47 A   
biosfn_read_all_dac_reg     0 642F A   biosfn_read_display_code    0 6D50 A   
biosfn_read_overscan_borde+ 0 6341 A   biosfn_read_pel_mask        0 6462 A   
biosfn_read_single_dac_reg  0 6414 A   biosfn_read_video_dac_stat+ 0 646D A   
biosfn_select_vert_res      0 6B93 A   biosfn_select_video_dac_co+ 0 63D1 A   
biosfn_set_all_dac_reg      0 63A9 A   biosfn_set_all_palette_reg  0 62CA A   
biosfn_set_border_color     0 594B A   biosfn_set_display_code     0 6D65 A   
biosfn_set_overscan_border+ 0 62C2 A   biosfn_set_palette          0 598A A   
biosfn_set_pel_mask         0 6457 A   biosfn_set_single_dac_reg   0 6390 A   
biosfn_set_single_palette_+ 0 62A8 A   biosfn_set_text_block_spec+ 0 6915 A   
biosfn_toggle_intensity     0 62F7 A   bit8_clear                  0 970A A   
bit9_clear                  0 9711 A   bpp4_mode                   0 94AB A   
dispi_get_bank              0 95F5 A   dispi_get_bpp               0 956A A   
dispi_get_enable            0 95D7 A   dispi_get_id                0 94F9 A   
dispi_get_virt_height       0 96B4 A   dispi_get_virt_width        0 96A6 A   
dispi_get_x_offset          0 964A A   dispi_get_y_offset          0 9668 A   
dispi_set_bank_farcall_err+ 0 9635 A   dispi_set_bank_farcall_get  0 9627 A   
dispi_set_id                0 9507 A   dispi_set_virt_width        0 9693 A   
dispi_set_x_offset          0 963A A   dispi_set_y_offset          0 9658 A   
get_bpp_noinc               0 9581 A   get_dac_16_page             0 649D A   
get_dac_palette_format      0 A0CC A   get_display_start           0 A099 A   
get_display_window          0 A021 A   get_logical_scan_line_leng+ 0 A059 A   
get_palette_loop            0 6357 A   idiv_u                      0 6603 A   
illegal_window              0 943E A   init_bios_area              0 358E A   
init_vga_card               0 3563 A   int10_end                   0 01FB A   
int10_group_10_unknown      0 62A7 A   int10_normal                0 01ED A   
int10_test_0B               0 014A A   int10_test_1001             0 6247 A   
int10_test_1002             0 624D A   int10_test_1003             0 6253 A   
int10_test_1007             0 625A A   int10_test_1008             0 6261 A   
int10_test_1009             0 6268 A   int10_test_1010             0 626F A   
int10_test_1012             0 6276 A   int10_test_1013             0 627D A   
int10_test_1015             0 6284 A   int10_test_1017             0 628B A   
int10_test_1018             0 6292 A   int10_test_1019             0 6299 A   
int10_test_101A             0 62A0 A   int10_test_101B             0 01A3 A   
int10_test_1103             0 0155 A   int10_test_12               0 0160 A   
int10_test_1A               0 013F A   int10_test_4F               0 01B2 A   
int10_test_BL30             0 0170 A   int10_test_BL31             0 017B A   
int10_test_BL32             0 0185 A   int10_test_BL33             0 018F A   
int10_test_BL34             0 0199 A   int10_test_vbe_05           0 01C0 A   
int10_test_vbe_06           0 01C9 A   int10_test_vbe_07           0 01D2 A   
int10_test_vbe_08           0 01DB A   int10_test_vbe_0A           0 01E4 A   
lmulul                      0 9858 A   memcpyb_end                 0 7B79 A   
memcpyw_end                 0 7BA9 A   memsetb_end                 0 7B26 A   
memsetw_end                 0 7B4B A   mode_ega_color              0 6B8F A   
msg_vbe_init                0 93E7 A   msg_vga_init                0 357F A   
no_4bpp_1                   0 A051 A   no_4bpp_2                   0 A06E A   
no_actl_reg1                0 62C1 A   no_actl_reg2                0 6340 A   
no_vbe_flag                 0 984D A   no_vbe_interface            0 9831 A   
no_vbe_mode                 0 9D44 A   pci_get_lfb_addr_fail       0 7DA2 A   
pci_get_lfb_addr_found      0 7DA6 A   pci_get_lfb_addr_next_dev   0 7D90 A   
pci_get_lfb_addr_return     0 7DC0 A   pci_get_lfb_addr_success    0 7DBA A   
pci_read_reg                0 7DC8 A   read_dac_loop               0 6440 A   
set_actl_normal             0 640D A   set_cga_palette_loop        0 5997 A   
set_dac_16_page             0 6407 A   set_dac_loop                0 63BA A   
set_dac_mode                0 A0C9 A   set_dac_page                0 63F4 A   
set_dac_palette_format      0 A0B4 A   set_display_start           0 A08B A   
set_display_window          0 A011 A   set_intensity_loop          0 5969 A   
set_logical_scan_line_byte+ 0 A040 A   set_logical_scan_line_pixe+ 0 A056 A   
set_low_border              0 5963 A   set_normal_dac              0 A0C6 A   
set_palette_loop            0 62D9 A   set_retcode                 0 6BDF A   
set_vert_res                0 6BD5 A   set_width_svga              0 9684 A   
set_xy_regs                 0 94B7 A   vbe_03_ok                   0 9D4D A   
vbe_05_failed               0 A02A A   vbe_08_ok                   0 A0D8 A   
vbe_08_unsupported          0 A0DC A   vbe_biosfn_display_window_+ 0 A001 A   
vbe_biosfn_return_current_+ 0 9D2D A   vbe_biosfn_return_protecte+ 0 A0E1 A   
vbe_biosfn_set_get_dac_pal+ 0 A0A9 A   vbe_biosfn_set_get_display+ 0 A07B A   
vbe_biosfn_set_get_logical+ 0 A02E A   vbe_display_info            0 983B A   
vbe_init                    0 980D A   vert_res_200                0 6BCB A   
vert_res_350                0 6BC1 A   vert_res_400                0 6BB5 A   
vesa_pm_end                 0 94F9 A   vesa_pm_io_ports_table      0 9400 A   
vesa_pm_set_display_start   0 9443 A   vesa_pm_set_display_start1  0 9452 A   
vesa_pm_set_display_window+ 0 9417 A   vesa_pm_set_window          0 940C A   
vesa_pm_start               0 93F8 A   vesa_pm_unimplemented       0 94F4 A   
vga_compat_end              0 9797 A   vga_set_virt_width          0 9676 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 A10C A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 0133 A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
