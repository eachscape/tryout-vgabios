00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 # 7
00004                                           ! 7 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 8 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 9 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 10 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 11 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 12 
00015                                           ! 13 
00016                                           ! 14 
00017                                           ! 15 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 16 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 17 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 18 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 19 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 20 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 21 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 22 
00032                                           ! 23 
00033                                           ! 24 typedef struct VbeInfoBlock
00034                                           ! 25 {
00035                                           ! 26    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 27    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 28    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 29    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 30    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 31    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 32    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 33    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 34    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 35    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 36    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 37    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 38    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 39    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 40    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 41    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 42    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 43 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 44 # 48
00072                                           ! 48 typedef struct ModeInfoBlockCompact
00073                                           ! 49 {
00074                                           ! 50 
00075                                           ! 51    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 52    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 53    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 54    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 55    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 56    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 57    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 58    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 59    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 60 
00094                                           ! 61    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 62    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 63    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 64    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 65    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 66    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 67    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 68    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 69    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 70    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 71    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 72 
00117                                           ! 73    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 74    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 75    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 76    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 77    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 78    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 79    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 80    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 81    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 82 
00136                                           ! 83    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 84    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 85    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 86 
00143                                           ! 87    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 88    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 89    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 90    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 91    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 92    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 93    Bit
00156                                           ! 93 8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 94    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 95    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 96    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 97    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 98    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 99 
00169                                           ! 100 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 101 
00172                                           ! 102 typedef struct ModeInfoBlock
00173                                           ! 103 {
00174                                           ! 104 
00175                                           ! 105    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 106    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 107    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 108    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 109    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 110    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 111    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 112    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 113    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 114 
00194                                           ! 115    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 116    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 117    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 118    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 119    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 120    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 121    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 122    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 123    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 124    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 125    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 126 
00217                                           ! 127    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 128    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 129    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 130    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 131    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 132    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 133    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 134    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 135    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 136 
00236                                           ! 137    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 138    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 139    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 140 
00243                                           ! 141    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 142    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 143    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 144    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 145    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 146    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 147    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 148    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 149    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 150    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 151    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 152    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 153    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 154 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 155 
00272                                           ! 156 typedef struct ModeInfoListItem
00273                                           ! 157 {
00274                                           ! 158   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 159   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 160 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 161 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 162 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 163 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 164 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 165 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 166 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 167 static void outb();
00293                                           !BCC_EOS
00294                                           ! 168 static void outw();
00295                                           !BCC_EOS
00296                                           ! 169 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 170 static void printf();
00299                                           !BCC_EOS
00300                                           ! 171 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 172 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 173 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 174 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 175 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 176 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 177 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 178 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 179 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 180 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 181 static void biosfn_get_cursor_pos();
00321                                           !BCC_EOS
00322                                           ! 182 st
00323                                           ! 182 atic void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 183 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 184 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 185 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 186 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 187 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 188 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 189 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 190 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 191 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 192 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 193 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 194 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 195 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 196 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 197 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 198 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 199 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 200 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 201 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 202 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 203 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 204 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 205 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 206 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 207 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 208 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 209 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 210 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 221 endasm
00392                                           !BCC_ENDASM
00393                                           ! 222 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         00FC              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        30            .ascii "0.6c"
00413 003C                        20            .ascii " "
00414                       0000003D            vgabios_date:
00415 003D                        30            .ascii "08 Apr 2009"
00416 0048                        0A            .byte 0x0a,0x0d
00417 004A                        00            .byte 0x00
00418                       0000004B            vgabios_copyright:
00419 004B                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 0074                        0A            .byte 0x0a,0x0d
00421 0076                        00            .byte 0x00
00422                       00000077            vgabios_license:
00423 0077                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00A7                        0A            .byte 0x0a,0x0d
00425 00A9                        0A            .byte 0x0a,0x0d
00426 00AB                        00            .byte 0x00
00427                       000000AC            vgabios_website:
00428 00AC                        50            .ascii "Please visit :"
00429 00BA                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00BC                        20            .ascii " . http://bochs.sourceforge.net"
00433 00DB                        0A            .byte 0x0a,0x0d
00434 00DD                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 00FD                        0A            .byte 0x0a,0x0d
00436 00FF                        0A            .byte 0x0a,0x0d
00437 0101                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000102            vgabios_init_func:
00444                                           ;; init vga card
00445 0102           E8         3457              call init_vga_card
00446                                           ;; init basic bios vars
00447 0105           E8         34B3              call init_bios_area
00448                                           ;; init vbe functions
00449 0108           E8         92C0              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010B           1E                           push ds
 +a   010C           31C0                         xor ax, ax
 +a   010E           8ED8                         mov ds, ax
 +a   0110           B8                   012C    mov ax,  #vgabios_int10_handler
 +a   0113           A3         0040              mov 0x10*4, ax
 +a   0116           B8                   C000    mov ax,  #0xC000
 +a   0119           A3         0042              mov 0x10*4+2, ax
 +a   011C           1F                           pop ds
00452                                           ;; display splash screen
00453 011D           E8         34EF              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0120           B8                   0003    mov ax,#0x0003
00456 0123           CD                     10    int #0x10
00457                                           ;; show info
00458 0125           E8         34E8              call _display_info
00459                                           ;; show vbe info
00460 0128           E8         92CE              call vbe_display_info
00461 012B           CB                           retf
00462                                           ! 290 endasm
00463                                           !BCC_ENDASM
00464                                           ! 291 #asm
00465                                           !BCC_ASM
00466                       0000012C            vgabios_int10_handler:
00467 012C           9C                           pushf
00468                                           
00469 012D           80FC                   0F    cmp ah, #0x0f
00470 0130           75           06              jne int10_test_1A
00471 0132           E8         6115              call biosfn_get_video_mode
00472 0135           E9         00BC              jmp int10_end
00473                       00000138            int10_test_1A:
00474 0138           80FC                   1A    cmp ah, #0x1a
00475 013B           75           06              jne int10_test_0B
00476 013D           E8         6C37              call biosfn_group_1A
00477 0140           E9         00B1              jmp int10_end
00478                       00000143            int10_test_0B:
00479 0143           80FC                   0B    cmp ah, #0x0b
00480 0146           75           06              jne int10_test_1103
00481 0148           E8         5822              call biosfn_group_0B
00482 014B           E9         00A6              jmp int10_end
00483                       0000014E            int10_test_1103:
00484 014E           3D                   1103    cmp ax, #0x1103
00485 0151           75           06              jne int10_test_12
00486 0153           E8         67EF              call biosfn_set_text_block_specifier
00487 0156           E9         009B              jmp int10_end
00488                       00000159            int10_test_12:
00489 0159           80FC                   12    cmp ah, #0x12
00490 015C           75           3E              jne int10_test_101B
00491 015E           80FB                   10    cmp bl, #0x10
00492 0161           75           06              jne int10_test_BL30
00493 0163           E8         6A39              call biosfn_get_ega_info
00494 0166           E9         008B              jmp int10_end
00495                       00000169            int10_test_BL30:
00496 0169           80FB                   30    cmp bl, #0x30
00497 016C           75           06              jne int10_test_BL31
00498 016E           E8         6A52              call biosfn_select_vert_res
00499 0171           E9         0080              jmp int10_end
00500                       00000174            int10_test_BL31:
00501 0174           80FB                   31    cmp bl, #0x31
00502 0177           75           05              jne int10_test_BL32
00503 0179           E8         6A9A              call biosfn_enable_default_palette_loading
00504 017C           EB           76              jmp int10_end
00505                       0000017E            int10_test_BL32:
00506 017E           80FB                   32    cmp bl, #0x32
00507 0181           75           05              jne int10_test_BL33
00508 0183           E8         6AB2              call biosfn_enable_video_addressing
00509 0186           EB           6C              jmp int10_end
00510                       00000188            int10_test_BL33:
00511 0188           80FB                   33    cmp bl, #0x33
00512 018B           75           05              jne int10_test_BL34
00513 018D           E8         6AC6              call biosfn_enable_grayscale_summing
00514 0190           EB           62              jmp int10_end
00515                       00000192            int10_test_BL34:
00516 0192           80FB                   34    cmp bl, #0x34
00517 0195           75           4F              jne int10_normal
00518 0197           E8         6AE0              call biosfn_enable_cursor_emulation
00519 019A           EB           58              jmp int10_end
00520                       0000019C            int10_test_101B:
00521 019C           3D                   101B    cmp ax, #0x101b
00522 019F           74           45              je int10_normal
00523 01A1           80FC                   10    cmp ah, #0x10
00524                                           
00525                                           
00526                                           
00527 01A4           75           05              jne int10_test_4F
00528                                           
00529 01A6           E8         60C8              call biosfn_group_10
00530 01A9           EB           49              jmp int10_end
00531                                           
00532                       000001AB            int10_test_4F:
00533 01AB           80FC                   4F    cmp ah, #0x4f
00534 01AE           75           36              jne int10_normal
00535 01B0           3C                     03    cmp al, #0x03
00536 01B2           75           05              jne int10_test_vbe_05
00537 01B4           E8         9734              call vbe_biosfn_return_current_mode
00538 01B7           EB           3B              jmp int10_end
00539                       000001B9            int10_test_vbe_05:
00540 01B9           3C                     05    cmp al, #0x05
00541 01BB           75           05              jne int10_test_vbe_06
00542 01BD           E8         99FF              call vbe_biosfn_display_window_control
00543 01C0           EB           32              jmp int10_end
00544                       000001C2            int10_test_vbe_06:
00545 01C2           3C                     06    cmp al, #0x06
00546 01C4           75           05              jne int10_test_vbe_07
00547 01C6           E8         9A23              call vbe_biosfn_set_get_logical_scan_line_length
00548 01C9           EB           29              jmp int10_end
00549                       000001CB            int10_test_vbe_07:
00550 01CB           3C                     07    cmp al, #0x07
00551 01CD           75           05              jne int10_test_vbe_08
00552 01CF           E8         9A67              call vbe_biosfn_set_get_display_start
00553 01D2           EB           20              jmp int10_end
00554                       000001D4            int10_test_vbe_08:
00555 01D4           3C                     08    cmp al, #0x08
00556 01D6           75           05              jne int10_test_vbe_0A
00557 01D8           E8         9A8C              call vbe_biosfn_set_get_dac_palette_format
00558 01DB           EB           17              jmp int10_end
00559                       000001DD            int10_test_vbe_0A:
00560 01DD           3C                     0A    cmp al, #0x0A
00561 01DF           75           05              jne int10_normal
00562 01E1           E8         9ABB              call vbe_biosfn_return_protected_mode_interface
00563 01E4           EB           0E              jmp int10_end
00564                                           
00565                                           
00566                       000001E6            int10_normal:
00567 01E6           06                           push es
00568 01E7           1E                           push ds
00569 01E8           60                           pusha
00570                                           
00571                                           ;; We have to set ds to access the right data segment
00572 01E9           BB                   C000    mov bx, #0xc000
00573 01EC           8EDB                         mov ds, bx
00574 01EE           E8         3464              call _int10_func
00575                                           
00576 01F1           61                           popa
00577 01F2           1F                           pop ds
00578 01F3           07                           pop es
00579                       000001F4            int10_end:
00580 01F4           9D                           popf
00581 01F5           CF                           iret
00582                                           ! 408 endasm
00583                                           !BCC_ENDASM
00584                                           ! 409 typedef struct
00585                                           ! 410 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 411  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 412  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 413  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 414  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 415  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 416  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 417 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 418 static VGAMODES vga_modes[15 +1]=
00602                                           ! 419 {
00603                                           
00604                       000001F6            _vga_modes:
00605                                           ! 420  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 01F6                        00            .byte	0
00607 01F7                        00            .byte	0
00608 01F8                        00            .byte	0
00609 01F9                        04            .byte	4
00610 01FA                      B800            .word	$B800
00611 01FC                        FF            .byte	$FF
00612 01FD                        02            .byte	2
00613                                           ! 421  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 01FE                        01            .byte	1
00615 01FF                        00            .byte	0
00616 0200                        00            .byte	0
00617 0201                        04            .byte	4
00618 0202                      B800            .word	$B800
00619 0204                        FF            .byte	$FF
00620 0205                        02            .byte	2
00621                                           ! 422  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 0206                        02            .byte	2
00623 0207                        00            .byte	0
00624 0208                        00            .byte	0
00625 0209                        04            .byte	4
00626 020A                      B800            .word	$B800
00627 020C                        FF            .byte	$FF
00628 020D                        02            .byte	2
00629                                           ! 423  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 020E                        03            .byte	3
00631 020F                        00            .byte	0
00632 0210                        00            .byte	0
00633 0211                        04            .byte	4
00634 0212                      B800            .word	$B800
00635 0214                        FF            .byte	$FF
00636 0215                        02            .byte	2
00637                                           ! 424  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 0216                        04            .byte	4
00639 0217                        01            .byte	1
00640 0218                        02            .byte	2
00641 0219                        02            .byte	2
00642 021A                      B800            .word	$B800
00643 021C                        FF            .byte	$FF
00644 021D                        01            .byte	1
00645                                           ! 425  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 021E                        05            .byte	5
00647 021F                        01            .byte	1
00648 0220                        02            .byte	2
00649 0221                        02            .byte	2
00650 0222                      B800            .word	$B800
00651 0224                        FF            .byte	$FF
00652 0225                        01            .byte	1
00653                                           ! 426  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 0226                        06            .byte	6
00655 0227                        01            .byte	1
00656 0228                        02            .byte	2
00657 0229                        01            .byte	1
00658 022A                      B800            .word	$B800
00659 022C                        FF            .byte	$FF
00660 022D                        01            .byte	1
00661                                           ! 427  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 022E                        07            .byte	7
00663 022F                        00            .byte	0
00664 0230                        01            .byte	1
00665 0231                        04            .byte	4
00666 0232                      B000            .word	$B000
00667 0234                        FF            .byte	$FF
00668 0235                        00            .byte	0
00669                                           ! 428  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 0236                        0D            .byte	$D
00671 0237                        01            .byte	1
00672 0238                        04            .byte	4
00673 0239                        04            .byte	4
00674 023A                      A000            .word	$A000
00675 023C                        FF            .byte	$FF
00676 023D                        01            .byte	1
00677                                           ! 429  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 023E                        0E            .byte	$E
00679 023F                        01            .byte	1
00680 0240                        04            .byte	4
00681 0241                        04            .byte	4
00682 0242                      A000            .word	$A000
00683 0244                        FF            .byte	$FF
00684 0245                        01            .byte	1
00685                                           ! 430  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 0246                        0F            .byte	$F
00687 0247                        01            .byte	1
00688 0248                        03            .byte	3
00689 0249                        01            .byte	1
00690 024A                      A000            .word	$A000
00691 024C                        FF            .byte	$FF
00692 024D                        00            .byte	0
00693                                           ! 431  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 024E                        10            .byte	$10
00695 024F                        01            .byte	1
00696 0250                        04            .byte	4
00697 0251                        04            .byte	4
00698 0252                      A000            .word	$A000
00699 0254                        FF            .byte	$FF
00700 0255                        02            .byte	2
00701                                           ! 432  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 0256                        11            .byte	$11
00703 0257                        01            .byte	1
00704 0258                        03            .byte	3
00705 0259                        01            .byte	1
00706 025A                      A000            .word	$A000
00707 025C                        FF            .byte	$FF
00708 025D                        02            .byte	2
00709                                           ! 433  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 025E                        12            .byte	$12
00711 025F                        01            .byte	1
00712 0260                        04            .byte	4
00713 0261                        04            .byte	4
00714 0262                      A000            .word	$A000
00715 0264                        FF            .byte	$FF
00716 0265                        02            .byte	2
00717                                           ! 434  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 0266                        13            .byte	$13
00719 0267                        01            .byte	1
00720 0268                        05            .byte	5
00721 0269                        08            .byte	8
00722 026A                      A000            .word	$A000
00723 026C                        FF            .byte	$FF
00724 026D                        03            .byte	3
00725                                           ! 435  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 026E                        6A            .byte	$6A
00727 026F                        01            .byte	1
00728 0270                        04            .byte	4
00729 0271                        04            .byte	4
00730 0272                      A000            .word	$A000
00731 0274                        FF            .byte	$FF
00732 0275                        02            .byte	2
00733                                           ! 436 };
00734                                           !BCC_EOS
00735                                           ! 437 static Bit8u line_to_vpti[15 +1]={
00736                       00000276            _line_to_vpti:
00737                                           ! 438     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 0276                        17            .byte	$17
00739 0277                        17            .byte	$17
00740 0278                        18            .byte	$18
00741 0279                        18            .byte	$18
00742 027A                        04            .byte	4
00743 027B                        05            .byte	5
00744 027C                        06            .byte	6
00745 027D                        07            .byte	7
00746                                           ! 439     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 027E                        0D            .byte	$D
00748 027F                        0E            .byte	$E
00749 0280                        11            .byte	$11
00750 0281                        12            .byte	$12
00751 0282                        1A            .byte	$1A
00752 0283                        1B            .byte	$1B
00753 0284                        1C            .byte	$1C
00754 0285                        1D            .byte	$1D
00755                                           ! 440 };
00756                                           !BCC_EOS
00757                                           ! 441 static Bit8u dac_regs[3 +1]=
00758                                           ! 442 {0x3f,0x3f,0x3f,0xff};
00759                       00000286            _dac_regs:
00760 0286                        3F            .byte	$3F
00761 0287                        3F            .byte	$3F
00762 0288                        3F            .byte	$3F
00763 0289                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 443 typedef struct {
00766                                           ! 444     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 445     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 446     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 447     Bit8u slength_l;
00773                                           !BCC_EOS
00774                                           ! 448     Bit8u slength_h;
00775                                           !BCC_EOS
00776                                           ! 449     Bit8u sequ_regs[4];
00777                                           !BCC_EOS
00778                                           ! 450     Bit8u miscreg;
00779                                           !BCC_EOS
00780                                           ! 451     Bit8u crtc_regs[25];
00781                                           !BCC_EOS
00782                                           ! 452     Bit8u actl_
00783                                           ! 452 regs[20];
00784                                           !BCC_EOS
00785                                           ! 453     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 454 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 455 static VideoParamTableEntry video_param_table[30] = {
00790                       0000028A            _video_param_table:
00791                                           ! 456 {
00792                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 028A                        00            .byte	0
00794 028B                        00            .byte	0
00795 028C                        00            .byte	0
00796 028D                        00            .byte	0
00797 028E                        00            .byte	0
00798 028F                        00            .byte	0
00799 0290                        00            .byte	0
00800 0291                        00            .byte	0
00801                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 0292                        00            .byte	0
00803 0293                        00            .byte	0
00804 0294                        00            .byte	0
00805 0295                        00            .byte	0
00806 0296                        00            .byte	0
00807 0297                        00            .byte	0
00808 0298                        00            .byte	0
00809 0299                        00            .byte	0
00810                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 029A                        00            .byte	0
00812 029B                        00            .byte	0
00813 029C                        00            .byte	0
00814 029D                        00            .byte	0
00815 029E                        00            .byte	0
00816 029F                        00            .byte	0
00817 02A0                        00            .byte	0
00818 02A1                        00            .byte	0
00819                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02A2                        00            .byte	0
00821 02A3                        00            .byte	0
00822 02A4                        00            .byte	0
00823 02A5                        00            .byte	0
00824 02A6                        00            .byte	0
00825 02A7                        00            .byte	0
00826 02A8                        00            .byte	0
00827 02A9                        00            .byte	0
00828                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02AA                        00            .byte	0
00830 02AB                        00            .byte	0
00831 02AC                        00            .byte	0
00832 02AD                        00            .byte	0
00833 02AE                        00            .byte	0
00834 02AF                        00            .byte	0
00835 02B0                        00            .byte	0
00836 02B1                        00            .byte	0
00837                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02B2                        00            .byte	0
00839 02B3                        00            .byte	0
00840 02B4                        00            .byte	0
00841 02B5                        00            .byte	0
00842 02B6                        00            .byte	0
00843 02B7                        00            .byte	0
00844 02B8                        00            .byte	0
00845 02B9                        00            .byte	0
00846                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02BA                        00            .byte	0
00848 02BB                        00            .byte	0
00849 02BC                        00            .byte	0
00850 02BD                        00            .byte	0
00851 02BE                        00            .byte	0
00852 02BF                        00            .byte	0
00853 02C0                        00            .byte	0
00854 02C1                        00            .byte	0
00855                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02C2                        00            .byte	0
00857 02C3                        00            .byte	0
00858 02C4                        00            .byte	0
00859 02C5                        00            .byte	0
00860 02C6                        00            .byte	0
00861 02C7                        00            .byte	0
00862 02C8                        00            .byte	0
00863 02C9                        00            .byte	0
00864                                           ! 465 },
00865                                           ! 466 {
00866                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02CA                        00            .byte	0
00868 02CB                        00            .byte	0
00869 02CC                        00            .byte	0
00870 02CD                        00            .byte	0
00871 02CE                        00            .byte	0
00872 02CF                        00            .byte	0
00873 02D0                        00            .byte	0
00874 02D1                        00            .byte	0
00875                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02D2                        00            .byte	0
00877 02D3                        00            .byte	0
00878 02D4                        00            .byte	0
00879 02D5                        00            .byte	0
00880 02D6                        00            .byte	0
00881 02D7                        00            .byte	0
00882 02D8                        00            .byte	0
00883 02D9                        00            .byte	0
00884                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02DA                        00            .byte	0
00886 02DB                        00            .byte	0
00887 02DC                        00            .byte	0
00888 02DD                        00            .byte	0
00889 02DE                        00            .byte	0
00890 02DF                        00            .byte	0
00891 02E0                        00            .byte	0
00892 02E1                        00            .byte	0
00893                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02E2                        00            .byte	0
00895 02E3                        00            .byte	0
00896 02E4                        00            .byte	0
00897 02E5                        00            .byte	0
00898 02E6                        00            .byte	0
00899 02E7                        00            .byte	0
00900 02E8                        00            .byte	0
00901 02E9                        00            .byte	0
00902                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02EA                        00            .byte	0
00904 02EB                        00            .byte	0
00905 02EC                        00            .byte	0
00906 02ED                        00            .byte	0
00907 02EE                        00            .byte	0
00908 02EF                        00            .byte	0
00909 02F0                        00            .byte	0
00910 02F1                        00            .byte	0
00911                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 02F2                        00            .byte	0
00913 02F3                        00            .byte	0
00914 02F4                        00            .byte	0
00915 02F5                        00            .byte	0
00916 02F6                        00            .byte	0
00917 02F7                        00            .byte	0
00918 02F8                        00            .byte	0
00919 02F9                        00            .byte	0
00920                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 02FA                        00            .byte	0
00922 02FB                        00            .byte	0
00923 02FC                        00            .byte	0
00924 02FD                        00            .byte	0
00925 02FE                        00            .byte	0
00926 02FF                        00            .byte	0
00927 0300                        00            .byte	0
00928 0301                        00            .byte	0
00929                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0302                        00            .byte	0
00931 0303                        00            .byte	0
00932 0304                        00            .byte	0
00933 0305                        00            .byte	0
00934 0306                        00            .byte	0
00935 0307                        00            .byte	0
00936 0308                        00            .byte	0
00937 0309                        00            .byte	0
00938                                           ! 475 },
00939                                           ! 476 {
00940                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 030A                        00            .byte	0
00942 030B                        00            .byte	0
00943 030C                        00            .byte	0
00944 030D                        00            .byte	0
00945 030E                        00            .byte	0
00946 030F                        00            .byte	0
00947 0310                        00            .byte	0
00948 0311                        00            .byte	0
00949                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0312                        00            .byte	0
00951 0313                        00            .byte	0
00952 0314                        00            .byte	0
00953 0315                        00            .byte	0
00954 0316                        00            .byte	0
00955 0317                        00            .byte	0
00956 0318                        00            .byte	0
00957 0319                        00            .byte	0
00958                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 031A                        00            .byte	0
00960 031B                        00            .byte	0
00961 031C                        00            .byte	0
00962 031D                        00            .byte	0
00963 031E                        00            .byte	0
00964 031F                        00            .byte	0
00965 0320                        00            .byte	0
00966 0321                        00            .byte	0
00967                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0322                        00            .byte	0
00969 0323                        00            .byte	0
00970 0324                        00            .byte	0
00971 0325                        00            .byte	0
00972 0326                        00            .byte	0
00973 0327                        00            .byte	0
00974 0328                        00            .byte	0
00975 0329                        00            .byte	0
00976                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 032A                        00            .byte	0
00978 032B                        00            .byte	0
00979 032C                        00            .byte	0
00980 032D                        00            .byte	0
00981 032E                        00            .byte	0
00982 032F                        00            .byte	0
00983 0330                        00            .byte	0
00984 0331                        00            .byte	0
00985                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0332                        00            .byte	0
00987 0333                        00            .byte	0
00988 0334                        00            .byte	0
00989 0335                        00            .byte	0
00990 0336                        00            .byte	0
00991 0337                        00            .byte	0
00992 0338                        00            .byte	0
00993 0339                        00            .byte	0
00994                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 033A                        00            .byte	0
00996 033B                        00            .byte	0
00997 033C                        00            .byte	0
00998 033D                        00            .byte	0
00999 033E                        00            .byte	0
01000 033F                        00            .byte	0
01001 0340                        00            .byte	0
01002 0341                        00            .byte	0
01003                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0342                        00            .byte	0
01005 0343                        00            .byte	0
01006 0344                        00            .byte	0
01007 0345                        00            .byte	0
01008 0346                        00            .byte	0
01009 0347                        00            .byte	0
01010 0348                        00            .byte	0
01011 0349                        00            .byte	0
01012                                           ! 485 },
01013                                           ! 486 {
01014                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 034A                        00            .byte	0
01016 034B                        00            .byte	0
01017 034C                        00            .byte	0
01018 034D                        00            .byte	0
01019 034E                        00            .byte	0
01020 034F                        00            .byte	0
01021 0350                        00            .byte	0
01022 0351                        00            .byte	0
01023                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0352                        00            .byte	0
01025 0353                        00            .byte	0
01026 0354                        00            .byte	0
01027 0355                        00            .byte	0
01028 0356                        00            .byte	0
01029 0357                        00            .byte	0
01030 0358                        00            .byte	0
01031 0359                        00            .byte	0
01032                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 035A                        00            .byte	0
01034 035B                        00            .byte	0
01035 035C                        00            .byte	0
01036 035D                        00            .byte	0
01037 035E                        00            .byte	0
01038 035F                        00            .byte	0
01039 0360                        00            .byte	0
01040 0361                        00            .byte	0
01041                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0362                        00            .byte	0
01043 0363                        00            .byte	0
01044 0364                        00            .byte	0
01045 0365                        00            .byte	0
01046 0366                        00            .byte	0
01047 0367                        00            .byte	0
01048 0368                        00            .byte	0
01049 0369                        00            .byte	0
01050                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 036A                        00            .byte	0
01052 036B                        00            .byte	0
01053 036C                        00            .byte	0
01054 036D                        00            .byte	0
01055 036E                        00            .byte	0
01056 036F                        00            .byte	0
01057 0370                        00            .byte	0
01058 0371                        00            .byte	0
01059                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0372                        00            .byte	0
01061 0373                        00            .byte	0
01062 0374                        00            .byte	0
01063 0375                        00            .byte	0
01064 0376                        00            .byte	0
01065 0377                        00            .byte	0
01066 0378                        00            .byte	0
01067 0379                        00            .byte	0
01068                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 037A                        00            .byte	0
01070 037B                        00            .byte	0
01071 037C                        00            .byte	0
01072 037D                        00            .byte	0
01073 037E                        00            .byte	0
01074 037F                        00            .byte	0
01075 0380                        00            .byte	0
01076 0381                        00            .byte	0
01077                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0382                        00            .byte	0
01079 0383                        00            .byte	0
01080 0384                        00            .byte	0
01081 0385                        00            .byte	0
01082 0386                        00            .byte	0
01083 0387                        00            .byte	0
01084 0388                        00            .byte	0
01085 0389                        00            .byte	0
01086                                           ! 495 },
01087                                           ! 496 {
01088                                           ! 497  40, 24, 8, 0x00, 0x08,
01089 038A                        28            .byte	$28
01090 038B                        18            .byte	$18
01091 038C                        08            .byte	8
01092 038D                        00            .byte	0
01093 038E                        08            .byte	8
01094                                           ! 498  0x09, 0x03, 0x00, 0x02,
01095 038F                        09            .byte	9
01096 0390                        03            .byte	3
01097 0391                        00            .byte	0
01098 0392                        02            .byte	2
01099                                           ! 499  0x63,
01100 0393                        63            .byte	$63
01101                                           ! 500  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 0394                        2D            .byte	$2D
01103 0395                        27            .byte	$27
01104 0396                        28            .byte	$28
01105 0397                        90            .byte	$90
01106 0398                        2B            .byte	$2B
01107 0399                        80            .byte	$80
01108 039A                        BF            .byte	$BF
01109 039B                        1F            .byte	$1F
01110                                           ! 501  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 039C                        00            .byte	0
01112 039D                        C1            .byte	$C1
01113 039E                        00            .byte	0
01114 039F                        00            .byte	0
01115 03A0                        00            .byte	0
01116 03A1                        00            .byte	0
01117 03A2                        00            .byte	0
01118 03A3                        00            .byte	0
01119                                           ! 502  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03A4                        9C            .byte	$9C
01121 03A5                        8E            .byte	$8E
01122 03A6                        8F            .byte	$8F
01123 03A7                        14            .byte	$14
01124 03A8                        00            .byte	0
01125 03A9                        96            .byte	$96
01126 03AA                        B9            .byte	$B9
01127 03AB                        A2            .byte	$A2
01128                                           ! 503  0xff,
01129 03AC                        FF            .byte	$FF
01130                                           ! 504  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01131 03AD                        00            .byte	0
01132 03AE                        13            .byte	$13
01133 03AF                        15            .byte	$15
01134 03B0                        17            .byte	$17
01135 03B1                        02            .byte	2
01136 03B2                        04            .byte	4
01137 03B3                        06            .byte	6
01138 03B4                        07            .byte	7
01139                                           ! 505  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01140 03B5                        10            .byte	$10
01141 03B6                        11            .byte	$11
01142 03B7                        12            .byte	$12
01143 03B8                        13            .byte	$13
01144 03B9                        14            .byte	$14
01145 03BA                        15            .byte	$15
01146 03BB                        16            .byte	$16
01147 03BC                        17            .byte	$17
01148                                           ! 506  0x01, 0x00, 0x03, 0x00,
01149 03BD                        01            .byte	1
01150 03BE                        00            .byte	0
01151 03BF                        03            .byte	3
01152 03C0                        00            .byte	0
01153                                           ! 507  0x00, 0x00, 
01154 03C1                        00            .byte	0
01155 03C2                        00            .byte	0
01156                                           ! 507 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01157 03C3                        00            .byte	0
01158 03C4                        00            .byte	0
01159 03C5                        00            .byte	0
01160 03C6                        30            .byte	$30
01161 03C7                        0F            .byte	$F
01162 03C8                        0F            .byte	$F
01163 03C9                        FF            .byte	$FF
01164                                           ! 508 },
01165                                           ! 509 {
01166                                           ! 510  40, 24, 8, 0x00, 0x08,
01167 03CA                        28            .byte	$28
01168 03CB                        18            .byte	$18
01169 03CC                        08            .byte	8
01170 03CD                        00            .byte	0
01171 03CE                        08            .byte	8
01172                                           ! 511  0x09, 0x03, 0x00, 0x02,
01173 03CF                        09            .byte	9
01174 03D0                        03            .byte	3
01175 03D1                        00            .byte	0
01176 03D2                        02            .byte	2
01177                                           ! 512  0x63,
01178 03D3                        63            .byte	$63
01179                                           ! 513  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03D4                        2D            .byte	$2D
01181 03D5                        27            .byte	$27
01182 03D6                        28            .byte	$28
01183 03D7                        90            .byte	$90
01184 03D8                        2B            .byte	$2B
01185 03D9                        80            .byte	$80
01186 03DA                        BF            .byte	$BF
01187 03DB                        1F            .byte	$1F
01188                                           ! 514  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03DC                        00            .byte	0
01190 03DD                        C1            .byte	$C1
01191 03DE                        00            .byte	0
01192 03DF                        00            .byte	0
01193 03E0                        00            .byte	0
01194 03E1                        00            .byte	0
01195 03E2                        00            .byte	0
01196 03E3                        00            .byte	0
01197                                           ! 515  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03E4                        9C            .byte	$9C
01199 03E5                        8E            .byte	$8E
01200 03E6                        8F            .byte	$8F
01201 03E7                        14            .byte	$14
01202 03E8                        00            .byte	0
01203 03E9                        96            .byte	$96
01204 03EA                        B9            .byte	$B9
01205 03EB                        A2            .byte	$A2
01206                                           ! 516  0xff,
01207 03EC                        FF            .byte	$FF
01208                                           ! 517  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 03ED                        00            .byte	0
01210 03EE                        13            .byte	$13
01211 03EF                        15            .byte	$15
01212 03F0                        17            .byte	$17
01213 03F1                        02            .byte	2
01214 03F2                        04            .byte	4
01215 03F3                        06            .byte	6
01216 03F4                        07            .byte	7
01217                                           ! 518  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 03F5                        10            .byte	$10
01219 03F6                        11            .byte	$11
01220 03F7                        12            .byte	$12
01221 03F8                        13            .byte	$13
01222 03F9                        14            .byte	$14
01223 03FA                        15            .byte	$15
01224 03FB                        16            .byte	$16
01225 03FC                        17            .byte	$17
01226                                           ! 519  0x01, 0x00, 0x03, 0x00,
01227 03FD                        01            .byte	1
01228 03FE                        00            .byte	0
01229 03FF                        03            .byte	3
01230 0400                        00            .byte	0
01231                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 0401                        00            .byte	0
01233 0402                        00            .byte	0
01234 0403                        00            .byte	0
01235 0404                        00            .byte	0
01236 0405                        00            .byte	0
01237 0406                        30            .byte	$30
01238 0407                        0F            .byte	$F
01239 0408                        0F            .byte	$F
01240 0409                        FF            .byte	$FF
01241                                           ! 521 },
01242                                           ! 522 {
01243                                           ! 523  80, 24, 8, 0x00, 0x10,
01244 040A                        50            .byte	$50
01245 040B                        18            .byte	$18
01246 040C                        08            .byte	8
01247 040D                        00            .byte	0
01248 040E                        10            .byte	$10
01249                                           ! 524  0x01, 0x01, 0x00, 0x06,
01250 040F                        01            .byte	1
01251 0410                        01            .byte	1
01252 0411                        00            .byte	0
01253 0412                        06            .byte	6
01254                                           ! 525  0x63,
01255 0413                        63            .byte	$63
01256                                           ! 526  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 0414                        5F            .byte	$5F
01258 0415                        4F            .byte	$4F
01259 0416                        50            .byte	$50
01260 0417                        82            .byte	$82
01261 0418                        54            .byte	$54
01262 0419                        80            .byte	$80
01263 041A                        BF            .byte	$BF
01264 041B                        1F            .byte	$1F
01265                                           ! 527  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 041C                        00            .byte	0
01267 041D                        C1            .byte	$C1
01268 041E                        00            .byte	0
01269 041F                        00            .byte	0
01270 0420                        00            .byte	0
01271 0421                        00            .byte	0
01272 0422                        00            .byte	0
01273 0423                        00            .byte	0
01274                                           ! 528  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 0424                        9C            .byte	$9C
01276 0425                        8E            .byte	$8E
01277 0426                        8F            .byte	$8F
01278 0427                        28            .byte	$28
01279 0428                        00            .byte	0
01280 0429                        96            .byte	$96
01281 042A                        B9            .byte	$B9
01282 042B                        C2            .byte	$C2
01283                                           ! 529  0xff,
01284 042C                        FF            .byte	$FF
01285                                           ! 530  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 042D                        00            .byte	0
01287 042E                        17            .byte	$17
01288 042F                        17            .byte	$17
01289 0430                        17            .byte	$17
01290 0431                        17            .byte	$17
01291 0432                        17            .byte	$17
01292 0433                        17            .byte	$17
01293 0434                        17            .byte	$17
01294                                           ! 531  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 0435                        17            .byte	$17
01296 0436                        17            .byte	$17
01297 0437                        17            .byte	$17
01298 0438                        17            .byte	$17
01299 0439                        17            .byte	$17
01300 043A                        17            .byte	$17
01301 043B                        17            .byte	$17
01302 043C                        17            .byte	$17
01303                                           ! 532  0x01, 0x00, 0x01, 0x00,
01304 043D                        01            .byte	1
01305 043E                        00            .byte	0
01306 043F                        01            .byte	1
01307 0440                        00            .byte	0
01308                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 0441                        00            .byte	0
01310 0442                        00            .byte	0
01311 0443                        00            .byte	0
01312 0444                        00            .byte	0
01313 0445                        00            .byte	0
01314 0446                        00            .byte	0
01315 0447                        0D            .byte	$D
01316 0448                        0F            .byte	$F
01317 0449                        FF            .byte	$FF
01318                                           ! 534 },
01319                                           ! 535 {
01320                                           ! 536  80, 24, 16, 0x00, 0x10,
01321 044A                        50            .byte	$50
01322 044B                        18            .byte	$18
01323 044C                        10            .byte	$10
01324 044D                        00            .byte	0
01325 044E                        10            .byte	$10
01326                                           ! 537  0x00, 0x03, 0x00, 0x02,
01327 044F                        00            .byte	0
01328 0450                        03            .byte	3
01329 0451                        00            .byte	0
01330 0452                        02            .byte	2
01331                                           ! 538  0x66,
01332 0453                        66            .byte	$66
01333                                           ! 539  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 0454                        5F            .byte	$5F
01335 0455                        4F            .byte	$4F
01336 0456                        50            .byte	$50
01337 0457                        82            .byte	$82
01338 0458                        55            .byte	$55
01339 0459                        81            .byte	$81
01340 045A                        BF            .byte	$BF
01341 045B                        1F            .byte	$1F
01342                                           ! 540  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 045C                        00            .byte	0
01344 045D                        4F            .byte	$4F
01345 045E                        0D            .byte	$D
01346 045F                        0E            .byte	$E
01347 0460                        00            .byte	0
01348 0461                        00            .byte	0
01349 0462                        00            .byte	0
01350 0463                        00            .byte	0
01351                                           ! 541  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 0464                        9C            .byte	$9C
01353 0465                        8E            .byte	$8E
01354 0466                        8F            .byte	$8F
01355 0467                        28            .byte	$28
01356 0468                        0F            .byte	$F
01357 0469                        96            .byte	$96
01358 046A                        B9            .byte	$B9
01359 046B                        A3            .byte	$A3
01360                                           ! 542  0xff,
01361 046C                        FF            .byte	$FF
01362                                           ! 543  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 046D                        00            .byte	0
01364 046E                        08            .byte	8
01365 046F                        08            .byte	8
01366 0470                        08            .byte	8
01367 0471                        08            .byte	8
01368 0472                        08            .byte	8
01369 0473                        08            .byte	8
01370 0474                        08            .byte	8
01371                                           ! 544  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 0475                        10            .byte	$10
01373 0476                        18            .byte	$18
01374 0477                        18            .byte	$18
01375 0478                        18            .byte	$18
01376 0479                        18            .byte	$18
01377 047A                        18            .byte	$18
01378 047B                        18            .byte	$18
01379 047C                        18            .byte	$18
01380                                           ! 545  0x0e, 0x00, 0x0f, 0x08,
01381 047D                        0E            .byte	$E
01382 047E                        00            .byte	0
01383 047F                        0F            .byte	$F
01384 0480                        08            .byte	8
01385                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 0481                        00            .byte	0
01387 0482                        00            .byte	0
01388 0483                        00            .byte	0
01389 0484                        00            .byte	0
01390 0485                        00            .byte	0
01391 0486                        10            .byte	$10
01392 0487                        0A            .byte	$A
01393 0488                        0F            .byte	$F
01394 0489                        FF            .byte	$FF
01395                                           ! 547 },
01396                                           ! 548 {
01397                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 048A                        00            .byte	0
01399 048B                        00            .byte	0
01400 048C                        00            .byte	0
01401 048D                        00            .byte	0
01402 048E                        00            .byte	0
01403 048F                        00            .byte	0
01404 0490                        00            .byte	0
01405 0491                        00            .byte	0
01406                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 0492                        00            .byte	0
01408 0493                        00            .byte	0
01409 0494                        00            .byte	0
01410 0495                        00            .byte	0
01411 0496                        00            .byte	0
01412 0497                        00            .byte	0
01413 0498                        00            .byte	0
01414 0499                        00            .byte	0
01415                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 049A                        00            .byte	0
01417 049B                        00            .byte	0
01418 049C                        00            .byte	0
01419 049D                        00            .byte	0
01420 049E                        00            .byte	0
01421 049F                        00            .byte	0
01422 04A0                        00            .byte	0
01423 04A1                        00            .byte	0
01424                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04A2                        00            .byte	0
01426 04A3                        00            .byte	0
01427 04A4                        00            .byte	0
01428 04A5                        00            .byte	0
01429 04A6                        00            .byte	0
01430 04A7                        00            .byte	0
01431 04A8                        00            .byte	0
01432 04A9                        00            .byte	0
01433                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04AA                        00            .byte	0
01435 04AB                        00            .byte	0
01436 04AC                        00            .byte	0
01437 04AD                        00            .byte	0
01438 04AE                        00            .byte	0
01439 04AF                        00            .byte	0
01440 04B0                        00            .byte	0
01441 04B1                        00            .byte	0
01442                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04B2                        00            .byte	0
01444 04B3                        00            .byte	0
01445 04B4                        00            .byte	0
01446 04B5                        00            .byte	0
01447 04B6                        00            .byte	0
01448 04B7                        00            .byte	0
01449 04B8                        00            .byte	0
01450 04B9                        00            .byte	0
01451                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04BA                        00            .byte	0
01453 04BB                        00            .byte	0
01454 04BC                        00            .byte	0
01455 04BD                        00            .byte	0
01456 04BE                        00            .byte	0
01457 04BF                        00            .byte	0
01458 04C0                        00            .byte	0
01459 04C1                        00            .byte	0
01460                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04C2                        00            .byte	0
01462 04C3                        00            .byte	0
01463 04C4                        00            .byte	0
01464 04C5                        00            .byte	0
01465 04C6                        00            .byte	0
01466 04C7                        00            .byte	0
01467 04C8                        00            .byte	0
01468 04C9                        00            .byte	0
01469                                           ! 557 },
01470                                           ! 558 {
01471                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04CA                        00            .byte	0
01473 04CB                        00            .byte	0
01474 04CC                        00            .byte	0
01475 04CD                        00            .byte	0
01476 04CE                        00            .byte	0
01477 04CF                        00            .byte	0
01478 04D0                        00            .byte	0
01479 04D1                        00            .byte	0
01480                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04D2                        00            .byte	0
01482 04D3                        00            .byte	0
01483 04D4                        00            .byte	0
01484 04D5                        00            .byte	0
01485 04D6                        00            .byte	0
01486 04D7                        00            .byte	0
01487 04D8                        00            .byte	0
01488 04D9                        00            .byte	0
01489                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04DA                        00            .byte	0
01491 04DB                        00            .byte	0
01492 04DC                        00            .byte	0
01493 04DD                        00            .byte	0
01494 04DE                        00            .byte	0
01495 04DF                        00            .byte	0
01496 04E0                        00            .byte	0
01497 04E1                        00            .byte	0
01498                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04E2                        00            .byte	0
01500 04E3                        00            .byte	0
01501 04E4                        00            .byte	0
01502 04E5                        00            .byte	0
01503 04E6                        00            .byte	0
01504 04E7                        00            .byte	0
01505 04E8                        00            .byte	0
01506 04E9                        00            .byte	0
01507                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04EA                        00            .byte	0
01509 04EB                        00            .byte	0
01510 04EC                        00            .byte	0
01511 04ED                        00            .byte	0
01512 04EE                        00            .byte	0
01513 04EF                        00            .byte	0
01514 04F0                        00            .byte	0
01515 04F1                        00            .byte	0
01516                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 04F2                        00            .byte	0
01518 04F3                        00            .byte	0
01519 04F4                        00            .byte	0
01520 04F5                        00            .byte	0
01521 04F6                        00            .byte	0
01522 04F7                        00            .byte	0
01523 04F8                        00            .byte	0
01524 04F9                        00            .byte	0
01525                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 04FA                        00            .byte	0
01527 04FB                        00            .byte	0
01528 04FC                        00            .byte	0
01529 04FD                        00            .byte	0
01530 04FE                        00            .byte	0
01531 04FF                        00            .byte	0
01532 0500                        00            .byte	0
01533 0501                        00            .byte	0
01534                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0502                        00            .byte	0
01536 0503                        00            .byte	0
01537 0504                        00            .byte	0
01538 0505                        00            .byte	0
01539 0506                        00            .byte	0
01540 0507                        00            .byte	0
01541 0508                        00            .byte	0
01542 0509                        00            .byte	0
01543                                           ! 567 },
01544                                           ! 568 {
01545                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x
01546 050A                        00            .byte	0
01547 050B                        00            .byte	0
01548 050C                        00            .byte	0
01549 050D                        00            .byte	0
01550                                           ! 569 00, 0x00, 0x00, 0x00,
01551 050E                        00            .byte	0
01552 050F                        00            .byte	0
01553 0510                        00            .byte	0
01554 0511                        00            .byte	0
01555                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0512                        00            .byte	0
01557 0513                        00            .byte	0
01558 0514                        00            .byte	0
01559 0515                        00            .byte	0
01560 0516                        00            .byte	0
01561 0517                        00            .byte	0
01562 0518                        00            .byte	0
01563 0519                        00            .byte	0
01564                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 051A                        00            .byte	0
01566 051B                        00            .byte	0
01567 051C                        00            .byte	0
01568 051D                        00            .byte	0
01569 051E                        00            .byte	0
01570 051F                        00            .byte	0
01571 0520                        00            .byte	0
01572 0521                        00            .byte	0
01573                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0522                        00            .byte	0
01575 0523                        00            .byte	0
01576 0524                        00            .byte	0
01577 0525                        00            .byte	0
01578 0526                        00            .byte	0
01579 0527                        00            .byte	0
01580 0528                        00            .byte	0
01581 0529                        00            .byte	0
01582                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 052A                        00            .byte	0
01584 052B                        00            .byte	0
01585 052C                        00            .byte	0
01586 052D                        00            .byte	0
01587 052E                        00            .byte	0
01588 052F                        00            .byte	0
01589 0530                        00            .byte	0
01590 0531                        00            .byte	0
01591                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0532                        00            .byte	0
01593 0533                        00            .byte	0
01594 0534                        00            .byte	0
01595 0535                        00            .byte	0
01596 0536                        00            .byte	0
01597 0537                        00            .byte	0
01598 0538                        00            .byte	0
01599 0539                        00            .byte	0
01600                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 053A                        00            .byte	0
01602 053B                        00            .byte	0
01603 053C                        00            .byte	0
01604 053D                        00            .byte	0
01605 053E                        00            .byte	0
01606 053F                        00            .byte	0
01607 0540                        00            .byte	0
01608 0541                        00            .byte	0
01609                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0542                        00            .byte	0
01611 0543                        00            .byte	0
01612 0544                        00            .byte	0
01613 0545                        00            .byte	0
01614 0546                        00            .byte	0
01615 0547                        00            .byte	0
01616 0548                        00            .byte	0
01617 0549                        00            .byte	0
01618                                           ! 577 },
01619                                           ! 578 {
01620                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 054A                        00            .byte	0
01622 054B                        00            .byte	0
01623 054C                        00            .byte	0
01624 054D                        00            .byte	0
01625 054E                        00            .byte	0
01626 054F                        00            .byte	0
01627 0550                        00            .byte	0
01628 0551                        00            .byte	0
01629                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0552                        00            .byte	0
01631 0553                        00            .byte	0
01632 0554                        00            .byte	0
01633 0555                        00            .byte	0
01634 0556                        00            .byte	0
01635 0557                        00            .byte	0
01636 0558                        00            .byte	0
01637 0559                        00            .byte	0
01638                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 055A                        00            .byte	0
01640 055B                        00            .byte	0
01641 055C                        00            .byte	0
01642 055D                        00            .byte	0
01643 055E                        00            .byte	0
01644 055F                        00            .byte	0
01645 0560                        00            .byte	0
01646 0561                        00            .byte	0
01647                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0562                        00            .byte	0
01649 0563                        00            .byte	0
01650 0564                        00            .byte	0
01651 0565                        00            .byte	0
01652 0566                        00            .byte	0
01653 0567                        00            .byte	0
01654 0568                        00            .byte	0
01655 0569                        00            .byte	0
01656                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 056A                        00            .byte	0
01658 056B                        00            .byte	0
01659 056C                        00            .byte	0
01660 056D                        00            .byte	0
01661 056E                        00            .byte	0
01662 056F                        00            .byte	0
01663 0570                        00            .byte	0
01664 0571                        00            .byte	0
01665                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0572                        00            .byte	0
01667 0573                        00            .byte	0
01668 0574                        00            .byte	0
01669 0575                        00            .byte	0
01670 0576                        00            .byte	0
01671 0577                        00            .byte	0
01672 0578                        00            .byte	0
01673 0579                        00            .byte	0
01674                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 057A                        00            .byte	0
01676 057B                        00            .byte	0
01677 057C                        00            .byte	0
01678 057D                        00            .byte	0
01679 057E                        00            .byte	0
01680 057F                        00            .byte	0
01681 0580                        00            .byte	0
01682 0581                        00            .byte	0
01683                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0582                        00            .byte	0
01685 0583                        00            .byte	0
01686 0584                        00            .byte	0
01687 0585                        00            .byte	0
01688 0586                        00            .byte	0
01689 0587                        00            .byte	0
01690 0588                        00            .byte	0
01691 0589                        00            .byte	0
01692                                           ! 587 },
01693                                           ! 588 {
01694                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 058A                        00            .byte	0
01696 058B                        00            .byte	0
01697 058C                        00            .byte	0
01698 058D                        00            .byte	0
01699 058E                        00            .byte	0
01700 058F                        00            .byte	0
01701 0590                        00            .byte	0
01702 0591                        00            .byte	0
01703                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 0592                        00            .byte	0
01705 0593                        00            .byte	0
01706 0594                        00            .byte	0
01707 0595                        00            .byte	0
01708 0596                        00            .byte	0
01709 0597                        00            .byte	0
01710 0598                        00            .byte	0
01711 0599                        00            .byte	0
01712                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 059A                        00            .byte	0
01714 059B                        00            .byte	0
01715 059C                        00            .byte	0
01716 059D                        00            .byte	0
01717 059E                        00            .byte	0
01718 059F                        00            .byte	0
01719 05A0                        00            .byte	0
01720 05A1                        00            .byte	0
01721                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05A2                        00            .byte	0
01723 05A3                        00            .byte	0
01724 05A4                        00            .byte	0
01725 05A5                        00            .byte	0
01726 05A6                        00            .byte	0
01727 05A7                        00            .byte	0
01728 05A8                        00            .byte	0
01729 05A9                        00            .byte	0
01730                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05AA                        00            .byte	0
01732 05AB                        00            .byte	0
01733 05AC                        00            .byte	0
01734 05AD                        00            .byte	0
01735 05AE                        00            .byte	0
01736 05AF                        00            .byte	0
01737 05B0                        00            .byte	0
01738 05B1                        00            .byte	0
01739                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05B2                        00            .byte	0
01741 05B3                        00            .byte	0
01742 05B4                        00            .byte	0
01743 05B5                        00            .byte	0
01744 05B6                        00            .byte	0
01745 05B7                        00            .byte	0
01746 05B8                        00            .byte	0
01747 05B9                        00            .byte	0
01748                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05BA                        00            .byte	0
01750 05BB                        00            .byte	0
01751 05BC                        00            .byte	0
01752 05BD                        00            .byte	0
01753 05BE                        00            .byte	0
01754 05BF                        00            .byte	0
01755 05C0                        00            .byte	0
01756 05C1                        00            .byte	0
01757                                           ! 596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05C2                        00            .byte	0
01759 05C3                        00            .byte	0
01760 05C4                        00            .byte	0
01761 05C5                        00            .byte	0
01762 05C6                        00            .byte	0
01763 05C7                        00            .byte	0
01764 05C8                        00            .byte	0
01765 05C9                        00            .byte	0
01766                                           ! 597 },
01767                                           ! 598 {
01768                                           ! 599  40, 24, 8, 0x00, 0x20,
01769 05CA                        28            .byte	$28
01770 05CB                        18            .byte	$18
01771 05CC                        08            .byte	8
01772 05CD                        00            .byte	0
01773 05CE                        20            .byte	$20
01774                                           ! 600  0x09, 0x0f, 0x00, 0x06,
01775 05CF                        09            .byte	9
01776 05D0                        0F            .byte	$F
01777 05D1                        00            .byte	0
01778 05D2                        06            .byte	6
01779                                           ! 601  0x63,
01780 05D3                        63            .byte	$63
01781                                           ! 602  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05D4                        2D            .byte	$2D
01783 05D5                        27            .byte	$27
01784 05D6                        28            .byte	$28
01785 05D7                        90            .byte	$90
01786 05D8                        2B            .byte	$2B
01787 05D9                        80            .byte	$80
01788 05DA                        BF            .byte	$BF
01789 05DB                        1F            .byte	$1F
01790                                           ! 603  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05DC                        00            .byte	0
01792 05DD                        C0            .byte	$C0
01793 05DE                        00            .byte	0
01794 05DF                        00            .byte	0
01795 05E0                        00            .byte	0
01796 05E1                        00            .byte	0
01797 05E2                        00            .byte	0
01798 05E3                        00            .byte	0
01799                                           ! 604  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05E4                        9C            .byte	$9C
01801 05E5                        8E            .byte	$8E
01802 05E6                        8F            .byte	$8F
01803 05E7                        14            .byte	$14
01804 05E8                        00            .byte	0
01805 05E9                        96            .byte	$96
01806 05EA                        B9            .byte	$B9
01807 05EB                        E3            .byte	$E3
01808                                           ! 605  0xff,
01809 05EC                        FF            .byte	$FF
01810                                           ! 606  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 05ED                        00            .byte	0
01812 05EE                        01            .byte	1
01813 05EF                        02            .byte	2
01814 05F0                        03            .byte	3
01815 05F1                        04            .byte	4
01816 05F2                        05            .byte	5
01817 05F3                        06            .byte	6
01818 05F4                        07            .byte	7
01819                                           ! 607  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 05F5                        10            .byte	$10
01821 05F6                        11            .byte	$11
01822 05F7                        12            .byte	$12
01823 05F8                        13            .byte	$13
01824 05F9                        14            .byte	$14
01825 05FA                        15            .byte	$15
01826 05FB                        16            .byte	$16
01827 05FC                        17            .byte	$17
01828                                           ! 608  0x01, 0x00, 0x0f, 0x00,
01829 05FD                        01            .byte	1
01830 05FE                        00            .byte	0
01831 05FF                        0F            .byte	$F
01832 0600                        00            .byte	0
01833                                           ! 609  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 0601                        00            .byte	0
01835 0602                        00            .byte	0
01836 0603                        00            .byte	0
01837 0604                        00            .byte	0
01838 0605                        00            .byte	0
01839 0606                        00            .byte	0
01840 0607                        05            .byte	5
01841 0608                        0F            .byte	$F
01842 0609                        FF            .byte	$FF
01843                                           ! 610 },
01844                                           ! 611 {
01845                                           ! 612  80, 24, 8, 0x00, 0x40,
01846 060A                        50            .byte	$50
01847 060B                        18            .byte	$18
01848 060C                        08            .byte	8
01849 060D                        00            .byte	0
01850 060E                        40            .byte	$40
01851                                           ! 613  0x01, 0x0f, 0x00, 0x06,
01852 060F                        01            .byte	1
01853 0610                        0F            .byte	$F
01854 0611                        00            .byte	0
01855 0612                        06            .byte	6
01856                                           ! 614  0x63,
01857 0613                        63            .byte	$63
01858                                           ! 615  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 0614                        5F            .byte	$5F
01860 0615                        4F            .byte	$4F
01861 0616                        50            .byte	$50
01862 0617                        82            .byte	$82
01863 0618                        54            .byte	$54
01864 0619                        80            .byte	$80
01865 061A                        BF            .byte	$BF
01866 061B                        1F            .byte	$1F
01867                                           ! 616  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 061C                        00            .byte	0
01869 061D                        C0            .byte	$C0
01870 061E                        00            .byte	0
01871 061F                        00            .byte	0
01872 0620                        00            .byte	0
01873 0621                        00            .byte	0
01874 0622                        00            .byte	0
01875 0623                        00            .byte	0
01876                                           ! 617  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 0624                        9C            .byte	$9C
01878 0625                        8E            .byte	$8E
01879 0626                        8F            .byte	$8F
01880 0627                        28            .byte	$28
01881 0628                        00            .byte	0
01882 0629                        96            .byte	$96
01883 062A                        B9            .byte	$B9
01884 062B                        E3            .byte	$E3
01885                                           ! 618  0xff,
01886 062C                        FF            .byte	$FF
01887                                           ! 619  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 062D                        00            .byte	0
01889 062E                        01            .byte	1
01890 062F                        02            .byte	2
01891 0630                        03            .byte	3
01892 0631                        04            .byte	4
01893 0632                        05            .byte	5
01894 0633                        06            .byte	6
01895 0634                        07            .byte	7
01896                                           ! 620  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 0635                        10            .byte	$10
01898 0636                        11            .byte	$11
01899 0637                        12            .byte	$12
01900 0638                        13            .byte	$13
01901 0639                        14            .byte	$14
01902 063A                        15            .byte	$15
01903 063B                        16            .byte	$16
01904 063C                        17            .byte	$17
01905                                           ! 621  0x01, 0x00, 0x0f, 0x00,
01906 063D                        01            .byte	1
01907 063E                        00            .byte	0
01908 063F                        0F            .byte	$F
01909 0640                        00            .byte	0
01910                                           ! 622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01911 0641                        00            .byte	0
01912 0642                        00            .byte	0
01913 0643                        00            .byte	0
01914 0644                        00            .byte	0
01915 0645                        00            .byte	0
01916 0646                        00            .byte	0
01917 0647                        05            .byte	5
01918 0648                        0F            .byte	$F
01919 0649                        FF            .byte	$FF
01920                                           ! 623 },
01921                                           ! 624 {
01922                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01923 064A                        00            .byte	0
01924 064B                        00            .byte	0
01925 064C                        00            .byte	0
01926 064D                        00            .byte	0
01927 064E                        00            .byte	0
01928 064F                        00            .byte	0
01929 0650                        00            .byte	0
01930 0651                        00            .byte	0
01931                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01932 0652                        00            .byte	0
01933 0653                        00            .byte	0
01934 0654                        00            .byte	0
01935 0655                        00            .byte	0
01936 0656                        00            .byte	0
01937 0657                        00            .byte	0
01938 0658                        00            .byte	0
01939 0659                        00            .byte	0
01940                                           ! 627 
01941                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 065A                        00            .byte	0
01943 065B                        00            .byte	0
01944 065C                        00            .byte	0
01945 065D                        00            .byte	0
01946 065E                        00            .byte	0
01947 065F                        00            .byte	0
01948 0660                        00            .byte	0
01949 0661                        00            .byte	0
01950                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0662                        00            .byte	0
01952 0663                        00            .byte	0
01953 0664                        00            .byte	0
01954 0665                        00            .byte	0
01955 0666                        00            .byte	0
01956 0667                        00            .byte	0
01957 0668                        00            .byte	0
01958 0669                        00            .byte	0
01959                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 066A                        00            .byte	0
01961 066B                        00            .byte	0
01962 066C                        00            .byte	0
01963 066D                        00            .byte	0
01964 066E                        00            .byte	0
01965 066F                        00            .byte	0
01966 0670                        00            .byte	0
01967 0671                        00            .byte	0
01968                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0672                        00            .byte	0
01970 0673                        00            .byte	0
01971 0674                        00            .byte	0
01972 0675                        00            .byte	0
01973 0676                        00            .byte	0
01974 0677                        00            .byte	0
01975 0678                        00            .byte	0
01976 0679                        00            .byte	0
01977                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 067A                        00            .byte	0
01979 067B                        00            .byte	0
01980 067C                        00            .byte	0
01981 067D                        00            .byte	0
01982 067E                        00            .byte	0
01983 067F                        00            .byte	0
01984 0680                        00            .byte	0
01985 0681                        00            .byte	0
01986                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0682                        00            .byte	0
01988 0683                        00            .byte	0
01989 0684                        00            .byte	0
01990 0685                        00            .byte	0
01991 0686                        00            .byte	0
01992 0687                        00            .byte	0
01993 0688                        00            .byte	0
01994 0689                        00            .byte	0
01995                                           ! 633 },
01996                                           ! 634 {
01997                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 068A                        00            .byte	0
01999 068B                        00            .byte	0
02000 068C                        00            .byte	0
02001 068D                        00            .byte	0
02002 068E                        00            .byte	0
02003 068F                        00            .byte	0
02004 0690                        00            .byte	0
02005 0691                        00            .byte	0
02006                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0692                        00            .byte	0
02008 0693                        00            .byte	0
02009 0694                        00            .byte	0
02010 0695                        00            .byte	0
02011 0696                        00            .byte	0
02012 0697                        00            .byte	0
02013 0698                        00            .byte	0
02014 0699                        00            .byte	0
02015                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 069A                        00            .byte	0
02017 069B                        00            .byte	0
02018 069C                        00            .byte	0
02019 069D                        00            .byte	0
02020 069E                        00            .byte	0
02021 069F                        00            .byte	0
02022 06A0                        00            .byte	0
02023 06A1                        00            .byte	0
02024                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06A2                        00            .byte	0
02026 06A3                        00            .byte	0
02027 06A4                        00            .byte	0
02028 06A5                        00            .byte	0
02029 06A6                        00            .byte	0
02030 06A7                        00            .byte	0
02031 06A8                        00            .byte	0
02032 06A9                        00            .byte	0
02033                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06AA                        00            .byte	0
02035 06AB                        00            .byte	0
02036 06AC                        00            .byte	0
02037 06AD                        00            .byte	0
02038 06AE                        00            .byte	0
02039 06AF                        00            .byte	0
02040 06B0                        00            .byte	0
02041 06B1                        00            .byte	0
02042                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06B2                        00            .byte	0
02044 06B3                        00            .byte	0
02045 06B4                        00            .byte	0
02046 06B5                        00            .byte	0
02047 06B6                        00            .byte	0
02048 06B7                        00            .byte	0
02049 06B8                        00            .byte	0
02050 06B9                        00            .byte	0
02051                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06BA                        00            .byte	0
02053 06BB                        00            .byte	0
02054 06BC                        00            .byte	0
02055 06BD                        00            .byte	0
02056 06BE                        00            .byte	0
02057 06BF                        00            .byte	0
02058 06C0                        00            .byte	0
02059 06C1                        00            .byte	0
02060                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06C2                        00            .byte	0
02062 06C3                        00            .byte	0
02063 06C4                        00            .byte	0
02064 06C5                        00            .byte	0
02065 06C6                        00            .byte	0
02066 06C7                        00            .byte	0
02067 06C8                        00            .byte	0
02068 06C9                        00            .byte	0
02069                                           ! 643 },
02070                                           ! 644 {
02071                                           ! 645  80, 24, 14, 0x00, 0x80,
02072 06CA                        50            .byte	$50
02073 06CB                        18            .byte	$18
02074 06CC                        0E            .byte	$E
02075 06CD                        00            .byte	0
02076 06CE                        80            .byte	$80
02077                                           ! 646  0x01, 0x0f, 0x00, 0x06,
02078 06CF                        01            .byte	1
02079 06D0                        0F            .byte	$F
02080 06D1                        00            .byte	0
02081 06D2                        06            .byte	6
02082                                           ! 647  0xa3,
02083 06D3                        A3            .byte	$A3
02084                                           ! 648  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06D4                        5F            .byte	$5F
02086 06D5                        4F            .byte	$4F
02087 06D6                        50            .byte	$50
02088 06D7                        82            .byte	$82
02089 06D8                        54            .byte	$54
02090 06D9                        80            .byte	$80
02091 06DA                        BF            .byte	$BF
02092 06DB                        1F            .byte	$1F
02093                                           ! 649  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06DC                        00            .byte	0
02095 06DD                        40            .byte	$40
02096 06DE                        00            .byte	0
02097 06DF                        00            .byte	0
02098 06E0                        00            .byte	0
02099 06E1                        00            .byte	0
02100 06E2                        00            .byte	0
02101 06E3                        00            .byte	0
02102                                           ! 650  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06E4                        83            .byte	$83
02104 06E5                        85            .byte	$85
02105 06E6                        5D            .byte	$5D
02106 06E7                        28            .byte	$28
02107 06E8                        0F            .byte	$F
02108 06E9                        63            .byte	$63
02109 06EA                        BA            .byte	$BA
02110 06EB                        E3            .byte	$E3
02111                                           ! 651  0xff,
02112 06EC                        FF            .byte	$FF
02113                                           ! 652  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 06ED                        00            .byte	0
02115 06EE                        08            .byte	8
02116 06EF                        00            .byte	0
02117 06F0                        00            .byte	0
02118 06F1                        18            .byte	$18
02119 06F2                        18            .byte	$18
02120 06F3                        00            .byte	0
02121 06F4                        00            .byte	0
02122                                           ! 653  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 06F5                        00            .byte	0
02124 06F6                        08            .byte	8
02125 06F7                        00            .byte	0
02126 06F8                        00            .byte	0
02127 06F9                        00            .byte	0
02128 06FA                        18            .byte	$18
02129 06FB                        00            .byte	0
02130 06FC                        00            .byte	0
02131                                           ! 654  0x01, 0x00, 0x01, 0x00,
02132 06FD                        01            .byte	1
02133 06FE                        00            .byte	0
02134 06FF                        01            .byte	1
02135 0700                        00            .byte	0
02136                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 0701                        00            .byte	0
02138 0702                        00            .byte	0
02139 0703                        00            .byte	0
02140 0704                        00            .byte	0
02141 0705                        00            .byte	0
02142 0706                        00            .byte	0
02143 0707                        05            .byte	5
02144 0708                        0F            .byte	$F
02145 0709                        FF            .byte	$FF
02146                                           ! 656 },
02147                                           ! 657 {
02148                                           ! 658  80, 24, 14, 0x00, 0x80,
02149 070A                        50            .byte	$50
02150 070B                        18            .byte	$18
02151 070C                        0E            .byte	$E
02152 070D                        00            .byte	0
02153 070E                        80            .byte	$80
02154                                           ! 659  0x01, 0x0f, 0x00, 0x06,
02155 070F                        01            .byte	1
02156 0710                        0F            .byte	$F
02157 0711                        00            .byte	0
02158 0712                        06            .byte	6
02159                                           ! 660  0xa3,
02160 0713                        A3            .byte	$A3
02161                                           ! 661  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 0714                        5F            .byte	$5F
02163 0715                        4F            .byte	$4F
02164 0716                        50            .byte	$50
02165 0717                        82            .byte	$82
02166 0718                        54            .byte	$54
02167 0719                        80            .byte	$80
02168 071A                        BF            .byte	$BF
02169 071B                        1F            .byte	$1F
02170                                           ! 662  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 071C                        00            .byte	0
02172 071D                        40            .byte	$40
02173 071E                        00            .byte	0
02174 071F                        00            .byte	0
02175 0720                        00            .byte	0
02176 0721                        00            .byte	0
02177 0722                        00            .byte	0
02178 0723                        00            .byte	0
02179                                           ! 663  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 0724                        83            .byte	$83
02181 0725                        85            .byte	$85
02182 0726                        5D            .byte	$5D
02183 0727                        28            .byte	$28
02184 0728                        0F            .byte	$F
02185 0729                        63            .byte	$63
02186 072A                        BA            .byte	$BA
02187 072B                        E3            .byte	$E3
02188                                           ! 664  0xff,
02189 072C                        FF            .byte	$FF
02190                                           ! 665  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 072D                        00            .byte	0
02192 072E                        01            .byte	1
02193 072F                        02            .byte	2
02194 0730                        03            .byte	3
02195 0731                        04            .byte	4
02196 0732                        05            .byte	5
02197 0733                        14            .byte	$14
02198 0734                        07            .byte	7
02199                                           ! 666  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 0735                        38            .byte	$38
02201 0736                        39            .byte	$39
02202 0737                        3A            .byte	$3A
02203 0738                        3B            .byte	$3B
02204 0739                        3C            .byte	$3C
02205 073A                        3D            .byte	$3D
02206 073B                        3E            .byte	$3E
02207 073C                        3F            .byte	$3F
02208                                           ! 667  0x01, 0x00, 0x0f, 0x00,
02209 073D                        01            .byte	1
02210 073E                        00            .byte	0
02211 073F                        0F            .byte	$F
02212 0740                        00            .byte	0
02213                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 0741                        00            .byte	0
02215 0742                        00            .byte	0
02216 0743                        00            .byte	0
02217 0744                        00            .byte	0
02218 0745                        00            .byte	0
02219 0746                        00            .byte	0
02220 0747                        05            .byte	5
02221 0748                        0F            .byte	$F
02222 0749                        FF            .byte	$FF
02223                                           ! 669 },
02224                                           ! 670 {
02225                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 074A                        00            .byte	0
02227 074B                        00            .byte	0
02228 074C                        00            .byte	0
02229 074D                        00            .byte	0
02230 074E                        00            .byte	0
02231 074F                        00            .byte	0
02232 0750                        00            .byte	0
02233 0751                        00            .byte	0
02234                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0752                        00            .byte	0
02236 0753                        00            .byte	0
02237 0754                        00            .byte	0
02238 0755                        00            .byte	0
02239 0756                        00            .byte	0
02240 0757                        00            .byte	0
02241 0758                        00            .byte	0
02242 0759                        00            .byte	0
02243                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 075A                        00            .byte	0
02245 075B                        00            .byte	0
02246 075C                        00            .byte	0
02247 075D                        00            .byte	0
02248 075E                        00            .byte	0
02249 075F                        00            .byte	0
02250 0760                        00            .byte	0
02251 0761                        00            .byte	0
02252                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0762                        00            .byte	0
02254 0763                        00            .byte	0
02255 0764                        00            .byte	0
02256 0765                        00            .byte	0
02257 0766                        00            .byte	0
02258 0767                        00            .byte	0
02259 0768                        00            .byte	0
02260 0769                        00            .byte	0
02261                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 076A                        00            .byte	0
02263 076B                        00            .byte	0
02264 076C                        00            .byte	0
02265 076D                        00            .byte	0
02266 076E                        00            .byte	0
02267 076F                        00            .byte	0
02268 0770                        00            .byte	0
02269 0771                        00            .byte	0
02270                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0772                        00            .byte	0
02272 0773                        00            .byte	0
02273 0774                        00            .byte	0
02274 0775                        00            .byte	0
02275 0776                        00            .byte	0
02276 0777                        00            .byte	0
02277 0778                        00            .byte	0
02278 0779                        00            .byte	0
02279                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 077A                        00            .byte	0
02281 077B                        00            .byte	0
02282 077C                        00            .byte	0
02283 077D                        00            .byte	0
02284 077E                        00            .byte	0
02285 077F                        00            .byte	0
02286 0780                        00            .byte	0
02287 0781                        00            .byte	0
02288                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0782                        00            .byte	0
02290 0783                        00            .byte	0
02291 0784                        00            .byte	0
02292 0785                        00            .byte	0
02293 0786                        00            .byte	0
02294 0787                        00            .byte	0
02295 0788                        00            .byte	0
02296 0789                        00            .byte	0
02297                                           ! 679 },
02298                                           ! 680 {
02299                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 078A                        00            .byte	0
02301 078B                        00            .byte	0
02302 078C                        00            .byte	0
02303 078D                        00            .byte	0
02304 078E                        00            .byte	0
02305 078F                        00            .byte	0
02306 0790                        00            .byte	0
02307 0791                        00            .byte	0
02308                                           ! 682  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02309 0792                        00            .byte	0
02310 0793                        00            .byte	0
02311 0794                        00            .byte	0
02312 0795                        00            .byte	0
02313 0796                        00            .byte	0
02314 0797                        00            .byte	0
02315 0798                        00            .byte	0
02316 0799                        00            .byte	0
02317                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02318 079A                        00            .byte	0
02319 079B                        00            .byte	0
02320 079C                        00            .byte	0
02321 079D                        00            .byte	0
02322 079E                        00            .byte	0
02323 079F                        00            .byte	0
02324 07A0                        00            .byte	0
02325 07A1                        00            .byte	0
02326                                           ! 684  0x00, 0x00, 0x00, 0
02327 07A2                        00            .byte	0
02328 07A3                        00            .byte	0
02329 07A4                        00            .byte	0
02330                                           ! 684 x00, 0x00, 0x00, 0x00, 0x00,
02331 07A5                        00            .byte	0
02332 07A6                        00            .byte	0
02333 07A7                        00            .byte	0
02334 07A8                        00            .byte	0
02335 07A9                        00            .byte	0
02336                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07AA                        00            .byte	0
02338 07AB                        00            .byte	0
02339 07AC                        00            .byte	0
02340 07AD                        00            .byte	0
02341 07AE                        00            .byte	0
02342 07AF                        00            .byte	0
02343 07B0                        00            .byte	0
02344 07B1                        00            .byte	0
02345                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07B2                        00            .byte	0
02347 07B3                        00            .byte	0
02348 07B4                        00            .byte	0
02349 07B5                        00            .byte	0
02350 07B6                        00            .byte	0
02351 07B7                        00            .byte	0
02352 07B8                        00            .byte	0
02353 07B9                        00            .byte	0
02354                                           ! 687  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07BA                        00            .byte	0
02356 07BB                        00            .byte	0
02357 07BC                        00            .byte	0
02358 07BD                        00            .byte	0
02359 07BE                        00            .byte	0
02360 07BF                        00            .byte	0
02361 07C0                        00            .byte	0
02362 07C1                        00            .byte	0
02363                                           ! 688  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07C2                        00            .byte	0
02365 07C3                        00            .byte	0
02366 07C4                        00            .byte	0
02367 07C5                        00            .byte	0
02368 07C6                        00            .byte	0
02369 07C7                        00            .byte	0
02370 07C8                        00            .byte	0
02371 07C9                        00            .byte	0
02372                                           ! 689 },
02373                                           ! 690 {
02374                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07CA                        00            .byte	0
02376 07CB                        00            .byte	0
02377 07CC                        00            .byte	0
02378 07CD                        00            .byte	0
02379 07CE                        00            .byte	0
02380 07CF                        00            .byte	0
02381 07D0                        00            .byte	0
02382 07D1                        00            .byte	0
02383                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07D2                        00            .byte	0
02385 07D3                        00            .byte	0
02386 07D4                        00            .byte	0
02387 07D5                        00            .byte	0
02388 07D6                        00            .byte	0
02389 07D7                        00            .byte	0
02390 07D8                        00            .byte	0
02391 07D9                        00            .byte	0
02392                                           ! 693  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07DA                        00            .byte	0
02394 07DB                        00            .byte	0
02395 07DC                        00            .byte	0
02396 07DD                        00            .byte	0
02397 07DE                        00            .byte	0
02398 07DF                        00            .byte	0
02399 07E0                        00            .byte	0
02400 07E1                        00            .byte	0
02401                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07E2                        00            .byte	0
02403 07E3                        00            .byte	0
02404 07E4                        00            .byte	0
02405 07E5                        00            .byte	0
02406 07E6                        00            .byte	0
02407 07E7                        00            .byte	0
02408 07E8                        00            .byte	0
02409 07E9                        00            .byte	0
02410                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07EA                        00            .byte	0
02412 07EB                        00            .byte	0
02413 07EC                        00            .byte	0
02414 07ED                        00            .byte	0
02415 07EE                        00            .byte	0
02416 07EF                        00            .byte	0
02417 07F0                        00            .byte	0
02418 07F1                        00            .byte	0
02419                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 07F2                        00            .byte	0
02421 07F3                        00            .byte	0
02422 07F4                        00            .byte	0
02423 07F5                        00            .byte	0
02424 07F6                        00            .byte	0
02425 07F7                        00            .byte	0
02426 07F8                        00            .byte	0
02427 07F9                        00            .byte	0
02428                                           ! 697  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 07FA                        00            .byte	0
02430 07FB                        00            .byte	0
02431 07FC                        00            .byte	0
02432 07FD                        00            .byte	0
02433 07FE                        00            .byte	0
02434 07FF                        00            .byte	0
02435 0800                        00            .byte	0
02436 0801                        00            .byte	0
02437                                           ! 698  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0802                        00            .byte	0
02439 0803                        00            .byte	0
02440 0804                        00            .byte	0
02441 0805                        00            .byte	0
02442 0806                        00            .byte	0
02443 0807                        00            .byte	0
02444 0808                        00            .byte	0
02445 0809                        00            .byte	0
02446                                           ! 699 },
02447                                           ! 700 {
02448                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 080A                        00            .byte	0
02450 080B                        00            .byte	0
02451 080C                        00            .byte	0
02452 080D                        00            .byte	0
02453 080E                        00            .byte	0
02454 080F                        00            .byte	0
02455 0810                        00            .byte	0
02456 0811                        00            .byte	0
02457                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0812                        00            .byte	0
02459 0813                        00            .byte	0
02460 0814                        00            .byte	0
02461 0815                        00            .byte	0
02462 0816                        00            .byte	0
02463 0817                        00            .byte	0
02464 0818                        00            .byte	0
02465 0819                        00            .byte	0
02466                                           ! 703  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 081A                        00            .byte	0
02468 081B                        00            .byte	0
02469 081C                        00            .byte	0
02470 081D                        00            .byte	0
02471 081E                        00            .byte	0
02472 081F                        00            .byte	0
02473 0820                        00            .byte	0
02474 0821                        00            .byte	0
02475                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0822                        00            .byte	0
02477 0823                        00            .byte	0
02478 0824                        00            .byte	0
02479 0825                        00            .byte	0
02480 0826                        00            .byte	0
02481 0827                        00            .byte	0
02482 0828                        00            .byte	0
02483 0829                        00            .byte	0
02484                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 082A                        00            .byte	0
02486 082B                        00            .byte	0
02487 082C                        00            .byte	0
02488 082D                        00            .byte	0
02489 082E                        00            .byte	0
02490 082F                        00            .byte	0
02491 0830                        00            .byte	0
02492 0831                        00            .byte	0
02493                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0832                        00            .byte	0
02495 0833                        00            .byte	0
02496 0834                        00            .byte	0
02497 0835                        00            .byte	0
02498 0836                        00            .byte	0
02499 0837                        00            .byte	0
02500 0838                        00            .byte	0
02501 0839                        00            .byte	0
02502                                           ! 707  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 083A                        00            .byte	0
02504 083B                        00            .byte	0
02505 083C                        00            .byte	0
02506 083D                        00            .byte	0
02507 083E                        00            .byte	0
02508 083F                        00            .byte	0
02509 0840                        00            .byte	0
02510 0841                        00            .byte	0
02511                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0842                        00            .byte	0
02513 0843                        00            .byte	0
02514 0844                        00            .byte	0
02515 0845                        00            .byte	0
02516 0846                        00            .byte	0
02517 0847                        00            .byte	0
02518 0848                        00            .byte	0
02519 0849                        00            .byte	0
02520                                           ! 709 },
02521                                           ! 710 {
02522                                           ! 711  40, 24, 16, 0x00, 0x08,
02523 084A                        28            .byte	$28
02524 084B                        18            .byte	$18
02525 084C                        10            .byte	$10
02526 084D                        00            .byte	0
02527 084E                        08            .byte	8
02528                                           ! 712  0x08, 0x03, 0x00, 0x02,
02529 084F                        08            .byte	8
02530 0850                        03            .byte	3
02531 0851                        00            .byte	0
02532 0852                        02            .byte	2
02533                                           ! 713  0x67,
02534 0853                        67            .byte	$67
02535                                           ! 714  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 0854                        2D            .byte	$2D
02537 0855                        27            .byte	$27
02538 0856                        28            .byte	$28
02539 0857                        90            .byte	$90
02540 0858                        2B            .byte	$2B
02541 0859                        A0            .byte	$A0
02542 085A                        BF            .byte	$BF
02543 085B                        1F            .byte	$1F
02544                                           ! 715  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 085C                        00            .byte	0
02546 085D                        4F            .byte	$4F
02547 085E                        0D            .byte	$D
02548 085F                        0E            .byte	$E
02549 0860                        00            .byte	0
02550 0861                        00            .byte	0
02551 0862                        00            .byte	0
02552 0863                        00            .byte	0
02553                                           ! 716  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 0864                        9C            .byte	$9C
02555 0865                        8E            .byte	$8E
02556 0866                        8F            .byte	$8F
02557 0867                        14            .byte	$14
02558 0868                        1F            .byte	$1F
02559 0869                        96            .byte	$96
02560 086A                        B9            .byte	$B9
02561 086B                        A3            .byte	$A3
02562                                           ! 717  0xff,
02563 086C                        FF            .byte	$FF
02564                                           ! 718  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 086D                        00            .byte	0
02566 086E                        01            .byte	1
02567 086F                        02            .byte	2
02568 0870                        03            .byte	3
02569 0871                        04            .byte	4
02570 0872                        05            .byte	5
02571 0873                        14            .byte	$14
02572 0874                        07            .byte	7
02573                                           ! 719  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 0875                        38            .byte	$38
02575 0876                        39            .byte	$39
02576 0877                        3A            .byte	$3A
02577 0878                        3B            .byte	$3B
02578 0879                        3C            .byte	$3C
02579 087A                        3D            .byte	$3D
02580 087B                        3E            .byte	$3E
02581 087C                        3F            .byte	$3F
02582                                           ! 720  0x0c, 0x00, 0x0f, 0x08,
02583 087D                        0C            .byte	$C
02584 087E                        00            .byte	0
02585 087F                        0F            .byte	$F
02586 0880                        08            .byte	8
02587                                           ! 721  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 0881                        00            .byte	0
02589 0882                        00            .byte	0
02590 0883                        00            .byte	0
02591 0884                        00            .byte	0
02592 0885                        00            .byte	0
02593 0886                        10            .byte	$10
02594 0887                        0E            .byte	$E
02595 0888                        0F            .byte	$F
02596 0889                        FF            .byte	$FF
02597                                           ! 722 },
02598                                           ! 723 {
02599                                           ! 724  80, 24, 16, 0x00, 0x10,
02600 088A                        50            .byte	$50
02601 088B                        18            .byte	$18
02602 088C                        10            .byte	$10
02603 088D                        00            .byte	0
02604 088E                        10            .byte	$10
02605                                           ! 725  0x00, 0x03, 0x00, 0x02,
02606 088F                        00            .byte	0
02607 0890                        03            .byte	3
02608 0891                        00            .byte	0
02609 0892                        02            .byte	2
02610                                           ! 726  0x67,
02611 0893                        67            .byte	$67
02612                                           ! 727  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 0894                        5F            .byte	$5F
02614 0895                        4F            .byte	$4F
02615 0896                        50            .byte	$50
02616 0897                        82            .byte	$82
02617 0898                        55            .byte	$55
02618 0899                        81            .byte	$81
02619 089A                        BF            .byte	$BF
02620 089B                        1F            .byte	$1F
02621                                           ! 728  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 089C                        00            .byte	0
02623 089D                        4F            .byte	$4F
02624 089E                        0D            .byte	$D
02625 089F                        0E            .byte	$E
02626 08A0                        00            .byte	0
02627 08A1                        00            .byte	0
02628 08A2                        00            .byte	0
02629 08A3                        00            .byte	0
02630                                           ! 729  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08A4                        9C            .byte	$9C
02632 08A5                        8E            .byte	$8E
02633 08A6                        8F            .byte	$8F
02634 08A7                        28            .byte	$28
02635 08A8                        1F            .byte	$1F
02636 08A9                        96            .byte	$96
02637 08AA                        B9            .byte	$B9
02638 08AB                        A3            .byte	$A3
02639                                           ! 730  0xff,
02640 08AC                        FF            .byte	$FF
02641                                           ! 731  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08AD                        00            .byte	0
02643 08AE                        01            .byte	1
02644 08AF                        02            .byte	2
02645 08B0                        03            .byte	3
02646 08B1                        04            .byte	4
02647 08B2                        05            .byte	5
02648 08B3                        14            .byte	$14
02649 08B4                        07            .byte	7
02650                                           ! 732  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08B5                        38            .byte	$38
02652 08B6                        39            .byte	$39
02653 08B7                        3A            .byte	$3A
02654 08B8                        3B            .byte	$3B
02655 08B9                        3C            .byte	$3C
02656 08BA                        3D            .byte	$3D
02657 08BB                        3E            .byte	$3E
02658 08BC                        3F            .byte	$3F
02659                                           ! 733  0x0c, 0x00, 0x0f, 0x08,
02660 08BD                        0C            .byte	$C
02661 08BE                        00            .byte	0
02662 08BF                        0F            .byte	$F
02663 08C0                        08            .byte	8
02664                                           ! 734  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08C1                        00            .byte	0
02666 08C2                        00            .byte	0
02667 08C3                        00            .byte	0
02668 08C4                        00            .byte	0
02669 08C5                        00            .byte	0
02670 08C6                        10            .byte	$10
02671 08C7                        0E            .byte	$E
02672 08C8                        0F            .byte	$F
02673 08C9                        FF            .byte	$FF
02674                                           ! 735 },
02675                                           ! 736 {
02676                                           ! 737  80, 24, 16, 0x00, 0x10,
02677 08CA                        50            .byte	$50
02678 08CB                        18            .byte	$18
02679 08CC                        10            .byte	$10
02680 08CD                        00            .byte	0
02681 08CE                        10            .byte	$10
02682                                           ! 738  0x00, 0x03, 0x00, 0x02,
02683 08CF                        00            .byte	0
02684 08D0                        03            .byte	3
02685 08D1                        00            .byte	0
02686 08D2                        02            .byte	2
02687                                           ! 739  0x66,
02688 08D3                        66            .byte	$66
02689                                           ! 740  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08D4                        5F            .byte	$5F
02691 08D5                        4F            .byte	$4F
02692 08D6                        50            .byte	$50
02693 08D7                        82            .byte	$82
02694 08D8                        55            .byte	$55
02695 08D9                        81            .byte	$81
02696 08DA                        BF            .byte	$BF
02697 08DB                        1F            .byte	$1F
02698                                           ! 741  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02699 08DC                        00            .byte	0
02700 08DD                        4F            .byte	$4F
02701 08DE                        0D            .byte	$D
02702 08DF                        0E            .byte	$E
02703 08E0                        00            .byte	0
02704 08E1                        00            .byte	0
02705 08E2                        00            .byte	0
02706 08E3                        00            .byte	0
02707                                           ! 742  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02708 08E4                        9C            .byte	$9C
02709 08E5                        8E            .byte	$8E
02710 08E6                        8F            .byte	$8F
02711 08E7                        28            .byte	$28
02712 08E8                        0F            .byte	$F
02713 08E9                        96            .byte	$96
02714 08EA                        B9            .byte	$B9
02715 08EB                        A3            .byte	$A3
02716                                           ! 743  0xff,
02717 08EC                        FF            .byte	$FF
02718                                           ! 744  0x00, 0x08, 0x08, 0x08, 
02719 08ED                        00            .byte	0
02720 08EE                        08            .byte	8
02721 08EF                        08            .byte	8
02722 08F0                        08            .byte	8
02723                                           ! 744 0x08, 0x08, 0x08, 0x08,
02724 08F1                        08            .byte	8
02725 08F2                        08            .byte	8
02726 08F3                        08            .byte	8
02727 08F4                        08            .byte	8
02728                                           ! 745  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 08F5                        10            .byte	$10
02730 08F6                        18            .byte	$18
02731 08F7                        18            .byte	$18
02732 08F8                        18            .byte	$18
02733 08F9                        18            .byte	$18
02734 08FA                        18            .byte	$18
02735 08FB                        18            .byte	$18
02736 08FC                        18            .byte	$18
02737                                           ! 746  0x0e, 0x00, 0x0f, 0x08,
02738 08FD                        0E            .byte	$E
02739 08FE                        00            .byte	0
02740 08FF                        0F            .byte	$F
02741 0900                        08            .byte	8
02742                                           ! 747  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 0901                        00            .byte	0
02744 0902                        00            .byte	0
02745 0903                        00            .byte	0
02746 0904                        00            .byte	0
02747 0905                        00            .byte	0
02748 0906                        10            .byte	$10
02749 0907                        0A            .byte	$A
02750 0908                        0F            .byte	$F
02751 0909                        FF            .byte	$FF
02752                                           ! 748 },
02753                                           ! 749 {
02754                                           ! 750  80, 29, 16, 0x00, 0x00,
02755 090A                        50            .byte	$50
02756 090B                        1D            .byte	$1D
02757 090C                        10            .byte	$10
02758 090D                        00            .byte	0
02759 090E                        00            .byte	0
02760                                           ! 751  0x01, 0x0f, 0x00, 0x06,
02761 090F                        01            .byte	1
02762 0910                        0F            .byte	$F
02763 0911                        00            .byte	0
02764 0912                        06            .byte	6
02765                                           ! 752  0xe3,
02766 0913                        E3            .byte	$E3
02767                                           ! 753  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 0914                        5F            .byte	$5F
02769 0915                        4F            .byte	$4F
02770 0916                        50            .byte	$50
02771 0917                        82            .byte	$82
02772 0918                        54            .byte	$54
02773 0919                        80            .byte	$80
02774 091A                        0B            .byte	$B
02775 091B                        3E            .byte	$3E
02776                                           ! 754  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 091C                        00            .byte	0
02778 091D                        40            .byte	$40
02779 091E                        00            .byte	0
02780 091F                        00            .byte	0
02781 0920                        00            .byte	0
02782 0921                        00            .byte	0
02783 0922                        00            .byte	0
02784 0923                        00            .byte	0
02785                                           ! 755  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 0924                        EA            .byte	$EA
02787 0925                        8C            .byte	$8C
02788 0926                        DF            .byte	$DF
02789 0927                        28            .byte	$28
02790 0928                        00            .byte	0
02791 0929                        E7            .byte	$E7
02792 092A                        04            .byte	4
02793 092B                        E3            .byte	$E3
02794                                           ! 756  0xff,
02795 092C                        FF            .byte	$FF
02796                                           ! 757  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 092D                        00            .byte	0
02798 092E                        3F            .byte	$3F
02799 092F                        00            .byte	0
02800 0930                        3F            .byte	$3F
02801 0931                        00            .byte	0
02802 0932                        3F            .byte	$3F
02803 0933                        00            .byte	0
02804 0934                        3F            .byte	$3F
02805                                           ! 758  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 0935                        00            .byte	0
02807 0936                        3F            .byte	$3F
02808 0937                        00            .byte	0
02809 0938                        3F            .byte	$3F
02810 0939                        00            .byte	0
02811 093A                        3F            .byte	$3F
02812 093B                        00            .byte	0
02813 093C                        3F            .byte	$3F
02814                                           ! 759  0x01, 0x00, 0x0f, 0x00,
02815 093D                        01            .byte	1
02816 093E                        00            .byte	0
02817 093F                        0F            .byte	$F
02818 0940                        00            .byte	0
02819                                           ! 760  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 0941                        00            .byte	0
02821 0942                        00            .byte	0
02822 0943                        00            .byte	0
02823 0944                        00            .byte	0
02824 0945                        00            .byte	0
02825 0946                        00            .byte	0
02826 0947                        05            .byte	5
02827 0948                        0F            .byte	$F
02828 0949                        FF            .byte	$FF
02829                                           ! 761 },
02830                                           ! 762 {
02831                                           ! 763  80, 29, 16, 0x00, 0x00,
02832 094A                        50            .byte	$50
02833 094B                        1D            .byte	$1D
02834 094C                        10            .byte	$10
02835 094D                        00            .byte	0
02836 094E                        00            .byte	0
02837                                           ! 764  0x01, 0x0f, 0x00, 0x06,
02838 094F                        01            .byte	1
02839 0950                        0F            .byte	$F
02840 0951                        00            .byte	0
02841 0952                        06            .byte	6
02842                                           ! 765  0xe3,
02843 0953                        E3            .byte	$E3
02844                                           ! 766  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 0954                        5F            .byte	$5F
02846 0955                        4F            .byte	$4F
02847 0956                        50            .byte	$50
02848 0957                        82            .byte	$82
02849 0958                        54            .byte	$54
02850 0959                        80            .byte	$80
02851 095A                        0B            .byte	$B
02852 095B                        3E            .byte	$3E
02853                                           ! 767  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 095C                        00            .byte	0
02855 095D                        40            .byte	$40
02856 095E                        00            .byte	0
02857 095F                        00            .byte	0
02858 0960                        00            .byte	0
02859 0961                        00            .byte	0
02860 0962                        00            .byte	0
02861 0963                        00            .byte	0
02862                                           ! 768  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 0964                        EA            .byte	$EA
02864 0965                        8C            .byte	$8C
02865 0966                        DF            .byte	$DF
02866 0967                        28            .byte	$28
02867 0968                        00            .byte	0
02868 0969                        E7            .byte	$E7
02869 096A                        04            .byte	4
02870 096B                        E3            .byte	$E3
02871                                           ! 769  0xff,
02872 096C                        FF            .byte	$FF
02873                                           ! 770  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 096D                        00            .byte	0
02875 096E                        01            .byte	1
02876 096F                        02            .byte	2
02877 0970                        03            .byte	3
02878 0971                        04            .byte	4
02879 0972                        05            .byte	5
02880 0973                        14            .byte	$14
02881 0974                        07            .byte	7
02882                                           ! 771  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 0975                        38            .byte	$38
02884 0976                        39            .byte	$39
02885 0977                        3A            .byte	$3A
02886 0978                        3B            .byte	$3B
02887 0979                        3C            .byte	$3C
02888 097A                        3D            .byte	$3D
02889 097B                        3E            .byte	$3E
02890 097C                        3F            .byte	$3F
02891                                           ! 772  0x01, 0x00, 0x0f, 0x00,
02892 097D                        01            .byte	1
02893 097E                        00            .byte	0
02894 097F                        0F            .byte	$F
02895 0980                        00            .byte	0
02896                                           ! 773  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 0981                        00            .byte	0
02898 0982                        00            .byte	0
02899 0983                        00            .byte	0
02900 0984                        00            .byte	0
02901 0985                        00            .byte	0
02902 0986                        00            .byte	0
02903 0987                        05            .byte	5
02904 0988                        0F            .byte	$F
02905 0989                        FF            .byte	$FF
02906                                           ! 774 },
02907                                           ! 775 {
02908                                           ! 776  40, 24, 8, 0x00, 0x00,
02909 098A                        28            .byte	$28
02910 098B                        18            .byte	$18
02911 098C                        08            .byte	8
02912 098D                        00            .byte	0
02913 098E                        00            .byte	0
02914                                           ! 777  0x01, 0x0f, 0x00, 0x0e,
02915 098F                        01            .byte	1
02916 0990                        0F            .byte	$F
02917 0991                        00            .byte	0
02918 0992                        0E            .byte	$E
02919                                           ! 778  0x63,
02920 0993                        63            .byte	$63
02921                                           ! 779  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 0994                        5F            .byte	$5F
02923 0995                        4F            .byte	$4F
02924 0996                        50            .byte	$50
02925 0997                        82            .byte	$82
02926 0998                        54            .byte	$54
02927 0999                        80            .byte	$80
02928 099A                        BF            .byte	$BF
02929 099B                        1F            .byte	$1F
02930                                           ! 780  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 099C                        00            .byte	0
02932 099D                        41            .byte	$41
02933 099E                        00            .byte	0
02934 099F                        00            .byte	0
02935 09A0                        00            .byte	0
02936 09A1                        00            .byte	0
02937 09A2                        00            .byte	0
02938 09A3                        00            .byte	0
02939                                           ! 781  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09A4                        9C            .byte	$9C
02941 09A5                        8E            .byte	$8E
02942 09A6                        8F            .byte	$8F
02943 09A7                        28            .byte	$28
02944 09A8                        40            .byte	$40
02945 09A9                        96            .byte	$96
02946 09AA                        B9            .byte	$B9
02947 09AB                        A3            .byte	$A3
02948                                           ! 782  0xff,
02949 09AC                        FF            .byte	$FF
02950                                           ! 783  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09AD                        00            .byte	0
02952 09AE                        01            .byte	1
02953 09AF                        02            .byte	2
02954 09B0                        03            .byte	3
02955 09B1                        04            .byte	4
02956 09B2                        05            .byte	5
02957 09B3                        06            .byte	6
02958 09B4                        07            .byte	7
02959                                           ! 784  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09B5                        08            .byte	8
02961 09B6                        09            .byte	9
02962 09B7                        0A            .byte	$A
02963 09B8                        0B            .byte	$B
02964 09B9                        0C            .byte	$C
02965 09BA                        0D            .byte	$D
02966 09BB                        0E            .byte	$E
02967 09BC                        0F            .byte	$F
02968                                           ! 785  0x41, 0x00, 0x0f, 0x00,
02969 09BD                        41            .byte	$41
02970 09BE                        00            .byte	0
02971 09BF                        0F            .byte	$F
02972 09C0                        00            .byte	0
02973                                           ! 786  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09C1                        00            .byte	0
02975 09C2                        00            .byte	0
02976 09C3                        00            .byte	0
02977 09C4                        00            .byte	0
02978 09C5                        00            .byte	0
02979 09C6                        40            .byte	$40
02980 09C7                        05            .byte	5
02981 09C8                        0F            .byte	$F
02982 09C9                        FF            .byte	$FF
02983                                           ! 787 },
02984                                           ! 788 {
02985                                           ! 789  100, 36, 16, 0x00, 0x00,
02986 09CA                        64            .byte	$64
02987 09CB                        24            .byte	$24
02988 09CC                        10            .byte	$10
02989 09CD                        00            .byte	0
02990 09CE                        00            .byte	0
02991                                           ! 790  0x01, 0x0f, 0x00, 0x06,
02992 09CF                        01            .byte	1
02993 09D0                        0F            .byte	$F
02994 09D1                        00            .byte	0
02995 09D2                        06            .byte	6
02996                                           ! 791  0xe3,
02997 09D3                        E3            .byte	$E3
02998                                           ! 792  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09D4                        7F            .byte	$7F
03000 09D5                        63            .byte	$63
03001 09D6                        63            .byte	$63
03002 09D7                        83            .byte	$83
03003 09D8                        6B            .byte	$6B
03004 09D9                        1B            .byte	$1B
03005 09DA                        72            .byte	$72
03006 09DB                        F0            .byte	$F0
03007                                           ! 793  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09DC                        00            .byte	0
03009 09DD                        60            .byte	$60
03010 09DE                        00            .byte	0
03011 09DF                        00            .byte	0
03012 09E0                        00            .byte	0
03013 09E1                        00            .byte	0
03014 09E2                        00            .byte	0
03015 09E3                        00            .byte	0
03016                                           ! 794  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09E4                        59            .byte	$59
03018 09E5                        8D            .byte	$8D
03019 09E6                        57            .byte	$57
03020 09E7                        32            .byte	$32
03021 09E8                        00            .byte	0
03022 09E9                        57            .byte	$57
03023 09EA                        73            .byte	$73
03024 09EB                        E3            .byte	$E3
03025                                           ! 795  0xff,
03026 09EC                        FF            .byte	$FF
03027                                           ! 796  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 09ED                        00            .byte	0
03029 09EE                        01            .byte	1
03030 09EF                        02            .byte	2
03031 09F0                        03            .byte	3
03032 09F1                        04            .byte	4
03033 09F2                        05            .byte	5
03034 09F3                        14            .byte	$14
03035 09F4                        07            .byte	7
03036                                           ! 797  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 09F5                        38            .byte	$38
03038 09F6                        39            .byte	$39
03039 09F7                        3A            .byte	$3A
03040 09F8                        3B            .byte	$3B
03041 09F9                        3C            .byte	$3C
03042 09FA                        3D            .byte	$3D
03043 09FB                        3E            .byte	$3E
03044 09FC                        3F            .byte	$3F
03045                                           ! 798  0x01, 0x00, 0x0f, 0x00,
03046 09FD                        01            .byte	1
03047 09FE                        00            .byte	0
03048 09FF                        0F            .byte	$F
03049 0A00                        00            .byte	0
03050                                           ! 799  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A01                        00            .byte	0
03052 0A02                        00            .byte	0
03053 0A03                        00            .byte	0
03054 0A04                        00            .byte	0
03055 0A05                        00            .byte	0
03056 0A06                        00            .byte	0
03057 0A07                        05            .byte	5
03058 0A08                        0F            .byte	$F
03059 0A09                        FF            .byte	$FF
03060                                           ! 800 },
03061                                           ! 801 };
03062                                           !BCC_EOS
03063                                           ! 802 static Bit8u palette0[63+1][3]=
03064                                           ! 803 {
03065                       00000A0A            _palette0:
03066                                           ! 804   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A0A                        00            .byte	0
03068 0A0B                        00            .byte	0
03069 0A0C                        00            .byte	0
03070 0A0D                        00            .byte	0
03071 0A0E                        00            .byte	0
03072 0A0F                        00            .byte	0
03073 0A10                        00            .byte	0
03074 0A11                        00            .byte	0
03075 0A12                        00            .byte	0
03076 0A13                        00            .byte	0
03077 0A14                        00            .byte	0
03078 0A15                        00            .byte	0
03079 0A16                        00            .byte	0
03080 0A17                        00            .byte	0
03081 0A18                        00            .byte	0
03082 0A19                        00            .byte	0
03083 0A1A                        00            .byte	0
03084 0A1B                        00            .byte	0
03085 0A1C                        00            .byte	0
03086 0A1D                        00            .byte	0
03087 0A1E                        00            .byte	0
03088 0A1F                        00            .byte	0
03089 0A20                        00            .byte	0
03090 0A21                        00            .byte	0
03091                                           ! 805   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03092 0A22                        2A            .byte	$2A
03093 0A23                        2A            .byte	$2A
03094 0A24                        2A            .byte	$2A
03095 0A25                        2A            .byte	$2A
03096 0A26                        2A            .byte	$2A
03097 0A27                        2A            .byte	$2A
03098 0A28                        2A            .byte	$2A
03099 0A29                        2A            .byte	$2A
03100 0A2A                        2A            .byte	$2A
03101 0A2B                        2A            .byte	$2A
03102 0A2C                        2A            .byte	$2A
03103 0A2D                        2A            .byte	$2A
03104 0A2E                        2A            .byte	$2A
03105 0A2F                        2A            .byte	$2A
03106 0A30                        2A            .byte	$2A
03107 0A31                        2A            .byte	$2A
03108 0A32                        2A            .byte	$2A
03109 0A33                        2A            .byte	$2A
03110 0A34                        2A            .byte	$2A
03111 0A35                        2A            .byte	$2A
03112 0A36                        2A            .byte	$2A
03113 0A37                        2A            .byte	$2A
03114 0A38                        2A            .byte	$2A
03115 0A39                        2A            .byte	$2A
03116                                           ! 806   0x2a,0x2a,0x2a, 0
03117 0A3A                        2A            .byte	$2A
03118 0A3B                        2A            .byte	$2A
03119 0A3C                        2A            .byte	$2A
03120                                           ! 806 x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03121 0A3D                        2A            .byte	$2A
03122 0A3E                        2A            .byte	$2A
03123 0A3F                        2A            .byte	$2A
03124 0A40                        2A            .byte	$2A
03125 0A41                        2A            .byte	$2A
03126 0A42                        2A            .byte	$2A
03127 0A43                        2A            .byte	$2A
03128 0A44                        2A            .byte	$2A
03129 0A45                        2A            .byte	$2A
03130 0A46                        2A            .byte	$2A
03131 0A47                        2A            .byte	$2A
03132 0A48                        2A            .byte	$2A
03133 0A49                        2A            .byte	$2A
03134 0A4A                        2A            .byte	$2A
03135 0A4B                        2A            .byte	$2A
03136 0A4C                        2A            .byte	$2A
03137 0A4D                        2A            .byte	$2A
03138 0A4E                        2A            .byte	$2A
03139 0A4F                        2A            .byte	$2A
03140 0A50                        2A            .byte	$2A
03141 0A51                        2A            .byte	$2A
03142                                           ! 807   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A52                        3F            .byte	$3F
03144 0A53                        3F            .byte	$3F
03145 0A54                        3F            .byte	$3F
03146 0A55                        3F            .byte	$3F
03147 0A56                        3F            .byte	$3F
03148 0A57                        3F            .byte	$3F
03149 0A58                        3F            .byte	$3F
03150 0A59                        3F            .byte	$3F
03151 0A5A                        3F            .byte	$3F
03152 0A5B                        3F            .byte	$3F
03153 0A5C                        3F            .byte	$3F
03154 0A5D                        3F            .byte	$3F
03155 0A5E                        3F            .byte	$3F
03156 0A5F                        3F            .byte	$3F
03157 0A60                        3F            .byte	$3F
03158 0A61                        3F            .byte	$3F
03159 0A62                        3F            .byte	$3F
03160 0A63                        3F            .byte	$3F
03161 0A64                        3F            .byte	$3F
03162 0A65                        3F            .byte	$3F
03163 0A66                        3F            .byte	$3F
03164 0A67                        3F            .byte	$3F
03165 0A68                        3F            .byte	$3F
03166 0A69                        3F            .byte	$3F
03167                                           ! 808   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A6A                        00            .byte	0
03169 0A6B                        00            .byte	0
03170 0A6C                        00            .byte	0
03171 0A6D                        00            .byte	0
03172 0A6E                        00            .byte	0
03173 0A6F                        00            .byte	0
03174 0A70                        00            .byte	0
03175 0A71                        00            .byte	0
03176 0A72                        00            .byte	0
03177 0A73                        00            .byte	0
03178 0A74                        00            .byte	0
03179 0A75                        00            .byte	0
03180 0A76                        00            .byte	0
03181 0A77                        00            .byte	0
03182 0A78                        00            .byte	0
03183 0A79                        00            .byte	0
03184 0A7A                        00            .byte	0
03185 0A7B                        00            .byte	0
03186 0A7C                        00            .byte	0
03187 0A7D                        00            .byte	0
03188 0A7E                        00            .byte	0
03189 0A7F                        00            .byte	0
03190 0A80                        00            .byte	0
03191 0A81                        00            .byte	0
03192                                           ! 809   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A82                        2A            .byte	$2A
03194 0A83                        2A            .byte	$2A
03195 0A84                        2A            .byte	$2A
03196 0A85                        2A            .byte	$2A
03197 0A86                        2A            .byte	$2A
03198 0A87                        2A            .byte	$2A
03199 0A88                        2A            .byte	$2A
03200 0A89                        2A            .byte	$2A
03201 0A8A                        2A            .byte	$2A
03202 0A8B                        2A            .byte	$2A
03203 0A8C                        2A            .byte	$2A
03204 0A8D                        2A            .byte	$2A
03205 0A8E                        2A            .byte	$2A
03206 0A8F                        2A            .byte	$2A
03207 0A90                        2A            .byte	$2A
03208 0A91                        2A            .byte	$2A
03209 0A92                        2A            .byte	$2A
03210 0A93                        2A            .byte	$2A
03211 0A94                        2A            .byte	$2A
03212 0A95                        2A            .byte	$2A
03213 0A96                        2A            .byte	$2A
03214 0A97                        2A            .byte	$2A
03215 0A98                        2A            .byte	$2A
03216 0A99                        2A            .byte	$2A
03217                                           ! 810   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0A9A                        2A            .byte	$2A
03219 0A9B                        2A            .byte	$2A
03220 0A9C                        2A            .byte	$2A
03221 0A9D                        2A            .byte	$2A
03222 0A9E                        2A            .byte	$2A
03223 0A9F                        2A            .byte	$2A
03224 0AA0                        2A            .byte	$2A
03225 0AA1                        2A            .byte	$2A
03226 0AA2                        2A            .byte	$2A
03227 0AA3                        2A            .byte	$2A
03228 0AA4                        2A            .byte	$2A
03229 0AA5                        2A            .byte	$2A
03230 0AA6                        2A            .byte	$2A
03231 0AA7                        2A            .byte	$2A
03232 0AA8                        2A            .byte	$2A
03233 0AA9                        2A            .byte	$2A
03234 0AAA                        2A            .byte	$2A
03235 0AAB                        2A            .byte	$2A
03236 0AAC                        2A            .byte	$2A
03237 0AAD                        2A            .byte	$2A
03238 0AAE                        2A            .byte	$2A
03239 0AAF                        2A            .byte	$2A
03240 0AB0                        2A            .byte	$2A
03241 0AB1                        2A            .byte	$2A
03242                                           ! 811   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AB2                        3F            .byte	$3F
03244 0AB3                        3F            .byte	$3F
03245 0AB4                        3F            .byte	$3F
03246 0AB5                        3F            .byte	$3F
03247 0AB6                        3F            .byte	$3F
03248 0AB7                        3F            .byte	$3F
03249 0AB8                        3F            .byte	$3F
03250 0AB9                        3F            .byte	$3F
03251 0ABA                        3F            .byte	$3F
03252 0ABB                        3F            .byte	$3F
03253 0ABC                        3F            .byte	$3F
03254 0ABD                        3F            .byte	$3F
03255 0ABE                        3F            .byte	$3F
03256 0ABF                        3F            .byte	$3F
03257 0AC0                        3F            .byte	$3F
03258 0AC1                        3F            .byte	$3F
03259 0AC2                        3F            .byte	$3F
03260 0AC3                        3F            .byte	$3F
03261 0AC4                        3F            .byte	$3F
03262 0AC5                        3F            .byte	$3F
03263 0AC6                        3F            .byte	$3F
03264 0AC7                        3F            .byte	$3F
03265 0AC8                        3F            .byte	$3F
03266                                           ! 812 };
03267 0AC9                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 813 static Bit8u palette1[63+1][3]=
03270                                           ! 814 {
03271                       00000ACA            _palette1:
03272                                           ! 815   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0ACA                        00            .byte	0
03274 0ACB                        00            .byte	0
03275 0ACC                        00            .byte	0
03276 0ACD                        00            .byte	0
03277 0ACE                        00            .byte	0
03278 0ACF                        2A            .byte	$2A
03279 0AD0                        00            .byte	0
03280 0AD1                        2A            .byte	$2A
03281 0AD2                        00            .byte	0
03282 0AD3                        00            .byte	0
03283 0AD4                        2A            .byte	$2A
03284 0AD5                        2A            .byte	$2A
03285 0AD6                        2A            .byte	$2A
03286 0AD7                        00            .byte	0
03287 0AD8                        00            .byte	0
03288 0AD9                        2A            .byte	$2A
03289 0ADA                        00            .byte	0
03290 0ADB                        2A            .byte	$2A
03291 0ADC                        2A            .byte	$2A
03292 0ADD                        15            .byte	$15
03293 0ADE                        00            .byte	0
03294 0ADF                        2A            .byte	$2A
03295 0AE0                        2A            .byte	$2A
03296 0AE1                        2A            .byte	$2A
03297                                           ! 816   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AE2                        00            .byte	0
03299 0AE3                        00            .byte	0
03300 0AE4                        00            .byte	0
03301 0AE5                        00            .byte	0
03302 0AE6                        00            .byte	0
03303 0AE7                        2A            .byte	$2A
03304 0AE8                        00            .byte	0
03305 0AE9                        2A            .byte	$2A
03306 0AEA                        00            .byte	0
03307 0AEB                        00            .byte	0
03308 0AEC                        2A            .byte	$2A
03309 0AED                        2A            .byte	$2A
03310 0AEE                        2A            .byte	$2A
03311 0AEF                        00            .byte	0
03312 0AF0                        00            .byte	0
03313 0AF1                        2A            .byte	$2A
03314 0AF2                        00            .byte	0
03315 0AF3                        2A            .byte	$2A
03316 0AF4                        2A            .byte	$2A
03317 0AF5                        15            .byte	$15
03318 0AF6                        00            .byte	0
03319 0AF7                        2A            .byte	$2A
03320 0AF8                        2A            .byte	$2A
03321 0AF9                        2A            .byte	$2A
03322                                           ! 817   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0AFA                        15            .byte	$15
03324 0AFB                        15            .byte	$15
03325 0AFC                        15            .byte	$15
03326 0AFD                        15            .byte	$15
03327 0AFE                        15            .byte	$15
03328 0AFF                        3F            .byte	$3F
03329 0B00                        15            .byte	$15
03330 0B01                        3F            .byte	$3F
03331 0B02                        15            .byte	$15
03332 0B03                        15            .byte	$15
03333 0B04                        3F            .byte	$3F
03334 0B05                        3F            .byte	$3F
03335 0B06                        3F            .byte	$3F
03336 0B07                        15            .byte	$15
03337 0B08                        15            .byte	$15
03338 0B09                        3F            .byte	$3F
03339 0B0A                        15            .byte	$15
03340 0B0B                        3F            .byte	$3F
03341 0B0C                        3F            .byte	$3F
03342 0B0D                        3F            .byte	$3F
03343 0B0E                        15            .byte	$15
03344 0B0F                        3F            .byte	$3F
03345 0B10                        3F            .byte	$3F
03346 0B11                        3F            .byte	$3F
03347                                           ! 818   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B12                        15            .byte	$15
03349 0B13                        15            .byte	$15
03350 0B14                        15            .byte	$15
03351 0B15                        15            .byte	$15
03352 0B16                        15            .byte	$15
03353 0B17                        3F            .byte	$3F
03354 0B18                        15            .byte	$15
03355 0B19                        3F            .byte	$3F
03356 0B1A                        15            .byte	$15
03357 0B1B                        15            .byte	$15
03358 0B1C                        3F            .byte	$3F
03359 0B1D                        3F            .byte	$3F
03360 0B1E                        3F            .byte	$3F
03361 0B1F                        15            .byte	$15
03362 0B20                        15            .byte	$15
03363 0B21                        3F            .byte	$3F
03364 0B22                        15            .byte	$15
03365 0B23                        3F            .byte	$3F
03366 0B24                        3F            .byte	$3F
03367 0B25                        3F            .byte	$3F
03368 0B26                        15            .byte	$15
03369 0B27                        3F            .byte	$3F
03370 0B28                        3F            .byte	$3F
03371 0B29                        3F            .byte	$3F
03372                                           ! 819   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B2A                        00            .byte	0
03374 0B2B                        00            .byte	0
03375 0B2C                        00            .byte	0
03376 0B2D                        00            .byte	0
03377 0B2E                        00            .byte	0
03378 0B2F                        2A            .byte	$2A
03379 0B30                        00            .byte	0
03380 0B31                        2A            .byte	$2A
03381 0B32                        00            .byte	0
03382 0B33                        00            .byte	0
03383 0B34                        2A            .byte	$2A
03384 0B35                        2A            .byte	$2A
03385 0B36                        2A            .byte	$2A
03386 0B37                        00            .byte	0
03387 0B38                        00            .byte	0
03388 0B39                        2A            .byte	$2A
03389 0B3A                        00            .byte	0
03390 0B3B                        2A            .byte	$2A
03391 0B3C                        2A            .byte	$2A
03392 0B3D                        15            .byte	$15
03393 0B3E                        00            .byte	0
03394 0B3F                        2A            .byte	$2A
03395 0B40                        2A            .byte	$2A
03396 0B41                        2A            .byte	$2A
03397                                           ! 820   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B42                        00            .byte	0
03399 0B43                        00            .byte	0
03400 0B44                        00            .byte	0
03401 0B45                        00            .byte	0
03402 0B46                        00            .byte	0
03403 0B47                        2A            .byte	$2A
03404 0B48                        00            .byte	0
03405 0B49                        2A            .byte	$2A
03406 0B4A                        00            .byte	0
03407 0B4B                        00            .byte	0
03408 0B4C                        2A            .byte	$2A
03409 0B4D                        2A            .byte	$2A
03410 0B4E                        2A            .byte	$2A
03411 0B4F                        00            .byte	0
03412 0B50                        00            .byte	0
03413 0B51                        2A            .byte	$2A
03414 0B52                        00            .byte	0
03415 0B53                        2A            .byte	$2A
03416 0B54                        2A            .byte	$2A
03417 0B55                        15            .byte	$15
03418 0B56                        00            .byte	0
03419 0B57                        2A            .byte	$2A
03420 0B58                        2A            .byte	$2A
03421 0B59                        2A            .byte	$2A
03422                                           ! 821   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B5A                        15            .byte	$15
03424 0B5B                        15            .byte	$15
03425 0B5C                        15            .byte	$15
03426 0B5D                        15            .byte	$15
03427 0B5E                        15            .byte	$15
03428 0B5F                        3F            .byte	$3F
03429 0B60                        15            .byte	$15
03430 0B61                        3F            .byte	$3F
03431 0B62                        15            .byte	$15
03432 0B63                        15            .byte	$15
03433 0B64                        3F            .byte	$3F
03434 0B65                        3F            .byte	$3F
03435 0B66                        3F            .byte	$3F
03436 0B67                        15            .byte	$15
03437 0B68                        15            .byte	$15
03438 0B69                        3F            .byte	$3F
03439 0B6A                        15            .byte	$15
03440 0B6B                        3F            .byte	$3F
03441 0B6C                        3F            .byte	$3F
03442 0B6D                        3F            .byte	$3F
03443 0B6E                        15            .byte	$15
03444 0B6F                        3F            .byte	$3F
03445 0B70                        3F            .byte	$3F
03446 0B71                        3F            .byte	$3F
03447                                           ! 822   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B72                        15            .byte	$15
03449 0B73                        15            .byte	$15
03450 0B74                        15            .byte	$15
03451 0B75                        15            .byte	$15
03452 0B76                        15            .byte	$15
03453 0B77                        3F            .byte	$3F
03454 0B78                        15            .byte	$15
03455 0B79                        3F            .byte	$3F
03456 0B7A                        15            .byte	$15
03457 0B7B                        15            .byte	$15
03458 0B7C                        3F            .byte	$3F
03459 0B7D                        3F            .byte	$3F
03460 0B7E                        3F            .byte	$3F
03461 0B7F                        15            .byte	$15
03462 0B80                        15            .byte	$15
03463 0B81                        3F            .byte	$3F
03464 0B82                        15            .byte	$15
03465 0B83                        3F            .byte	$3F
03466 0B84                        3F            .byte	$3F
03467 0B85                        3F            .byte	$3F
03468 0B86                        15            .byte	$15
03469 0B87                        3F            .byte	$3F
03470 0B88                        3F            .byte	$3F
03471                                           ! 823 };
03472 0B89                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 824 static Bit8u palette2[63+1][3]=
03475                                           ! 825 {
03476                       00000B8A            _palette2:
03477                                           ! 826   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03478 0B8A                        00            .byte	0
03479 0B8B                        00            .byte	0
03480 0B8C                        00            .byte	0
03481 0B8D                        00            .byte	0
03482 0B8E                        00            .byte	0
03483 0B8F                        2A            .byte	$2A
03484 0B90                        00            .byte	0
03485 0B91                        2A            .byte	$2A
03486 0B92                        00            .byte	0
03487 0B93                        00            .byte	0
03488 0B94                        2A            .byte	$2A
03489 0B95                        2A            .byte	$2A
03490 0B96                        2A            .byte	$2A
03491 0B97                        00            .byte	0
03492 0B98                        00            .byte	0
03493 0B99                        2A            .byte	$2A
03494 0B9A                        00            .byte	0
03495 0B9B                        2A            .byte	$2A
03496 0B9C                        2A            .byte	$2A
03497 0B9D                        2A            .byte	$2A
03498 0B9E                        00            .byte	0
03499 0B9F                        2A            .byte	$2A
03500 0BA0                        2A            .byte	$2A
03501 0BA1                        2A            .byte	$2A
03502                                           ! 827   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0
03503 0BA2                        00            .byte	0
03504 0BA3                        00            .byte	0
03505 0BA4                        15            .byte	$15
03506 0BA5                        00            .byte	0
03507 0BA6                        00            .byte	0
03508 0BA7                        3F            .byte	$3F
03509 0BA8                        00            .byte	0
03510 0BA9                        2A            .byte	$2A
03511                                           ! 827 x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03512 0BAA                        15            .byte	$15
03513 0BAB                        00            .byte	0
03514 0BAC                        2A            .byte	$2A
03515 0BAD                        3F            .byte	$3F
03516 0BAE                        2A            .byte	$2A
03517 0BAF                        00            .byte	0
03518 0BB0                        15            .byte	$15
03519 0BB1                        2A            .byte	$2A
03520 0BB2                        00            .byte	0
03521 0BB3                        3F            .byte	$3F
03522 0BB4                        2A            .byte	$2A
03523 0BB5                        2A            .byte	$2A
03524 0BB6                        15            .byte	$15
03525 0BB7                        2A            .byte	$2A
03526 0BB8                        2A            .byte	$2A
03527 0BB9                        3F            .byte	$3F
03528                                           ! 828   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BBA                        00            .byte	0
03530 0BBB                        15            .byte	$15
03531 0BBC                        00            .byte	0
03532 0BBD                        00            .byte	0
03533 0BBE                        15            .byte	$15
03534 0BBF                        2A            .byte	$2A
03535 0BC0                        00            .byte	0
03536 0BC1                        3F            .byte	$3F
03537 0BC2                        00            .byte	0
03538 0BC3                        00            .byte	0
03539 0BC4                        3F            .byte	$3F
03540 0BC5                        2A            .byte	$2A
03541 0BC6                        2A            .byte	$2A
03542 0BC7                        15            .byte	$15
03543 0BC8                        00            .byte	0
03544 0BC9                        2A            .byte	$2A
03545 0BCA                        15            .byte	$15
03546 0BCB                        2A            .byte	$2A
03547 0BCC                        2A            .byte	$2A
03548 0BCD                        3F            .byte	$3F
03549 0BCE                        00            .byte	0
03550 0BCF                        2A            .byte	$2A
03551 0BD0                        3F            .byte	$3F
03552 0BD1                        2A            .byte	$2A
03553                                           ! 829   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BD2                        00            .byte	0
03555 0BD3                        15            .byte	$15
03556 0BD4                        15            .byte	$15
03557 0BD5                        00            .byte	0
03558 0BD6                        15            .byte	$15
03559 0BD7                        3F            .byte	$3F
03560 0BD8                        00            .byte	0
03561 0BD9                        3F            .byte	$3F
03562 0BDA                        15            .byte	$15
03563 0BDB                        00            .byte	0
03564 0BDC                        3F            .byte	$3F
03565 0BDD                        3F            .byte	$3F
03566 0BDE                        2A            .byte	$2A
03567 0BDF                        15            .byte	$15
03568 0BE0                        15            .byte	$15
03569 0BE1                        2A            .byte	$2A
03570 0BE2                        15            .byte	$15
03571 0BE3                        3F            .byte	$3F
03572 0BE4                        2A            .byte	$2A
03573 0BE5                        3F            .byte	$3F
03574 0BE6                        15            .byte	$15
03575 0BE7                        2A            .byte	$2A
03576 0BE8                        3F            .byte	$3F
03577 0BE9                        3F            .byte	$3F
03578                                           ! 830   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BEA                        15            .byte	$15
03580 0BEB                        00            .byte	0
03581 0BEC                        00            .byte	0
03582 0BED                        15            .byte	$15
03583 0BEE                        00            .byte	0
03584 0BEF                        2A            .byte	$2A
03585 0BF0                        15            .byte	$15
03586 0BF1                        2A            .byte	$2A
03587 0BF2                        00            .byte	0
03588 0BF3                        15            .byte	$15
03589 0BF4                        2A            .byte	$2A
03590 0BF5                        2A            .byte	$2A
03591 0BF6                        3F            .byte	$3F
03592 0BF7                        00            .byte	0
03593 0BF8                        00            .byte	0
03594 0BF9                        3F            .byte	$3F
03595 0BFA                        00            .byte	0
03596 0BFB                        2A            .byte	$2A
03597 0BFC                        3F            .byte	$3F
03598 0BFD                        2A            .byte	$2A
03599 0BFE                        00            .byte	0
03600 0BFF                        3F            .byte	$3F
03601 0C00                        2A            .byte	$2A
03602 0C01                        2A            .byte	$2A
03603                                           ! 831   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C02                        15            .byte	$15
03605 0C03                        00            .byte	0
03606 0C04                        15            .byte	$15
03607 0C05                        15            .byte	$15
03608 0C06                        00            .byte	0
03609 0C07                        3F            .byte	$3F
03610 0C08                        15            .byte	$15
03611 0C09                        2A            .byte	$2A
03612 0C0A                        15            .byte	$15
03613 0C0B                        15            .byte	$15
03614 0C0C                        2A            .byte	$2A
03615 0C0D                        3F            .byte	$3F
03616 0C0E                        3F            .byte	$3F
03617 0C0F                        00            .byte	0
03618 0C10                        15            .byte	$15
03619 0C11                        3F            .byte	$3F
03620 0C12                        00            .byte	0
03621 0C13                        3F            .byte	$3F
03622 0C14                        3F            .byte	$3F
03623 0C15                        2A            .byte	$2A
03624 0C16                        15            .byte	$15
03625 0C17                        3F            .byte	$3F
03626 0C18                        2A            .byte	$2A
03627 0C19                        3F            .byte	$3F
03628                                           ! 832   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C1A                        15            .byte	$15
03630 0C1B                        15            .byte	$15
03631 0C1C                        00            .byte	0
03632 0C1D                        15            .byte	$15
03633 0C1E                        15            .byte	$15
03634 0C1F                        2A            .byte	$2A
03635 0C20                        15            .byte	$15
03636 0C21                        3F            .byte	$3F
03637 0C22                        00            .byte	0
03638 0C23                        15            .byte	$15
03639 0C24                        3F            .byte	$3F
03640 0C25                        2A            .byte	$2A
03641 0C26                        3F            .byte	$3F
03642 0C27                        15            .byte	$15
03643 0C28                        00            .byte	0
03644 0C29                        3F            .byte	$3F
03645 0C2A                        15            .byte	$15
03646 0C2B                        2A            .byte	$2A
03647 0C2C                        3F            .byte	$3F
03648 0C2D                        3F            .byte	$3F
03649 0C2E                        00            .byte	0
03650 0C2F                        3F            .byte	$3F
03651 0C30                        3F            .byte	$3F
03652 0C31                        2A            .byte	$2A
03653                                           ! 833   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C32                        15            .byte	$15
03655 0C33                        15            .byte	$15
03656 0C34                        15            .byte	$15
03657 0C35                        15            .byte	$15
03658 0C36                        15            .byte	$15
03659 0C37                        3F            .byte	$3F
03660 0C38                        15            .byte	$15
03661 0C39                        3F            .byte	$3F
03662 0C3A                        15            .byte	$15
03663 0C3B                        15            .byte	$15
03664 0C3C                        3F            .byte	$3F
03665 0C3D                        3F            .byte	$3F
03666 0C3E                        3F            .byte	$3F
03667 0C3F                        15            .byte	$15
03668 0C40                        15            .byte	$15
03669 0C41                        3F            .byte	$3F
03670 0C42                        15            .byte	$15
03671 0C43                        3F            .byte	$3F
03672 0C44                        3F            .byte	$3F
03673 0C45                        3F            .byte	$3F
03674 0C46                        15            .byte	$15
03675 0C47                        3F            .byte	$3F
03676 0C48                        3F            .byte	$3F
03677                                           ! 834 };
03678 0C49                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 835 static Bit8u palette3[256][3]=
03681                                           ! 836 {
03682                       00000C4A            _palette3:
03683                                           ! 837   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C4A                        00            .byte	0
03685 0C4B                        00            .byte	0
03686 0C4C                        00            .byte	0
03687 0C4D                        00            .byte	0
03688 0C4E                        00            .byte	0
03689 0C4F                        2A            .byte	$2A
03690 0C50                        00            .byte	0
03691 0C51                        2A            .byte	$2A
03692 0C52                        00            .byte	0
03693 0C53                        00            .byte	0
03694 0C54                        2A            .byte	$2A
03695 0C55                        2A            .byte	$2A
03696 0C56                        2A            .byte	$2A
03697 0C57                        00            .byte	0
03698 0C58                        00            .byte	0
03699 0C59                        2A            .byte	$2A
03700 0C5A                        00            .byte	0
03701 0C5B                        2A            .byte	$2A
03702 0C5C                        2A            .byte	$2A
03703 0C5D                        15            .byte	$15
03704 0C5E                        00            .byte	0
03705 0C5F                        2A            .byte	$2A
03706 0C60                        2A            .byte	$2A
03707 0C61                        2A            .byte	$2A
03708                                           ! 838   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C62                        15            .byte	$15
03710 0C63                        15            .byte	$15
03711 0C64                        15            .byte	$15
03712 0C65                        15            .byte	$15
03713 0C66                        15            .byte	$15
03714 0C67                        3F            .byte	$3F
03715 0C68                        15            .byte	$15
03716 0C69                        3F            .byte	$3F
03717 0C6A                        15            .byte	$15
03718 0C6B                        15            .byte	$15
03719 0C6C                        3F            .byte	$3F
03720 0C6D                        3F            .byte	$3F
03721 0C6E                        3F            .byte	$3F
03722 0C6F                        15            .byte	$15
03723 0C70                        15            .byte	$15
03724 0C71                        3F            .byte	$3F
03725 0C72                        15            .byte	$15
03726 0C73                        3F            .byte	$3F
03727 0C74                        3F            .byte	$3F
03728 0C75                        3F            .byte	$3F
03729 0C76                        15            .byte	$15
03730 0C77                        3F            .byte	$3F
03731 0C78                        3F            .byte	$3F
03732 0C79                        3F            .byte	$3F
03733                                           ! 839   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C7A                        00            .byte	0
03735 0C7B                        00            .byte	0
03736 0C7C                        00            .byte	0
03737 0C7D                        05            .byte	5
03738 0C7E                        05            .byte	5
03739 0C7F                        05            .byte	5
03740 0C80                        08            .byte	8
03741 0C81                        08            .byte	8
03742 0C82                        08            .byte	8
03743 0C83                        0B            .byte	$B
03744 0C84                        0B            .byte	$B
03745 0C85                        0B            .byte	$B
03746 0C86                        0E            .byte	$E
03747 0C87                        0E            .byte	$E
03748 0C88                        0E            .byte	$E
03749 0C89                        11            .byte	$11
03750 0C8A                        11            .byte	$11
03751 0C8B                        11            .byte	$11
03752 0C8C                        14            .byte	$14
03753 0C8D                        14            .byte	$14
03754 0C8E                        14            .byte	$14
03755 0C8F                        18            .byte	$18
03756 0C90                        18            .byte	$18
03757 0C91                        18            .byte	$18
03758                                           ! 840   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0C92                        1C            .byte	$1C
03760 0C93                        1C            .byte	$1C
03761 0C94                        1C            .byte	$1C
03762 0C95                        20            .byte	$20
03763 0C96                        20            .byte	$20
03764 0C97                        20            .byte	$20
03765 0C98                        24            .byte	$24
03766 0C99                        24            .byte	$24
03767 0C9A                        24            .byte	$24
03768 0C9B                        28            .byte	$28
03769 0C9C                        28            .byte	$28
03770 0C9D                        28            .byte	$28
03771 0C9E                        2D            .byte	$2D
03772 0C9F                        2D            .byte	$2D
03773 0CA0                        2D            .byte	$2D
03774 0CA1                        32            .byte	$32
03775 0CA2                        32            .byte	$32
03776 0CA3                        32            .byte	$32
03777 0CA4                        38            .byte	$38
03778 0CA5                        38            .byte	$38
03779 0CA6                        38            .byte	$38
03780 0CA7                        3F            .byte	$3F
03781 0CA8                        3F            .byte	$3F
03782 0CA9                        3F            .byte	$3F
03783                                           ! 841   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CAA                        00            .byte	0
03785 0CAB                        00            .byte	0
03786 0CAC                        3F            .byte	$3F
03787 0CAD                        10            .byte	$10
03788 0CAE                        00            .byte	0
03789 0CAF                        3F            .byte	$3F
03790 0CB0                        1F            .byte	$1F
03791 0CB1                        00            .byte	0
03792 0CB2                        3F            .byte	$3F
03793 0CB3                        2F            .byte	$2F
03794 0CB4                        00            .byte	0
03795 0CB5                        3F            .byte	$3F
03796 0CB6                        3F            .byte	$3F
03797 0CB7                        00            .byte	0
03798 0CB8                        3F            .byte	$3F
03799 0CB9                        3F            .byte	$3F
03800 0CBA                        00            .byte	0
03801 0CBB                        2F            .byte	$2F
03802 0CBC                        3F            .byte	$3F
03803 0CBD                        00            .byte	0
03804 0CBE                        1F            .byte	$1F
03805 0CBF                        3F            .byte	$3F
03806 0CC0                        00            .byte	0
03807 0CC1                        10            .byte	$10
03808                                           ! 842   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CC2                        3F            .byte	$3F
03810 0CC3                        00            .byte	0
03811 0CC4                        00            .byte	0
03812 0CC5                        3F            .byte	$3F
03813 0CC6                        10            .byte	$10
03814 0CC7                        00            .byte	0
03815 0CC8                        3F            .byte	$3F
03816 0CC9                        1F            .byte	$1F
03817 0CCA                        00            .byte	0
03818 0CCB                        3F            .byte	$3F
03819 0CCC                        2F            .byte	$2F
03820 0CCD                        00            .byte	0
03821 0CCE                        3F            .byte	$3F
03822 0CCF                        3F            .byte	$3F
03823 0CD0                        00            .byte	0
03824 0CD1                        2F            .byte	$2F
03825 0CD2                        3F            .byte	$3F
03826 0CD3                        00            .byte	0
03827 0CD4                        1F            .byte	$1F
03828 0CD5                        3F            .byte	$3F
03829 0CD6                        00            .byte	0
03830 0CD7                        10            .byte	$10
03831 0CD8                        3F            .byte	$3F
03832 0CD9                        00            .byte	0
03833                                           ! 843   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CDA                        00            .byte	0
03835 0CDB                        3F            .byte	$3F
03836 0CDC                        00            .byte	0
03837 0CDD                        00            .byte	0
03838 0CDE                        3F            .byte	$3F
03839 0CDF                        10            .byte	$10
03840 0CE0                        00            .byte	0
03841 0CE1                        3F            .byte	$3F
03842 0CE2                        1F            .byte	$1F
03843 0CE3                        00            .byte	0
03844 0CE4                        3F            .byte	$3F
03845 0CE5                        2F            .byte	$2F
03846 0CE6                        00            .byte	0
03847 0CE7                        3F            .byte	$3F
03848 0CE8                        3F            .byte	$3F
03849 0CE9                        00            .byte	0
03850 0CEA                        2F            .byte	$2F
03851 0CEB                        3F            .byte	$3F
03852 0CEC                        00            .byte	0
03853 0CED                        1F            .byte	$1F
03854 0CEE                        3F            .byte	$3F
03855 0CEF                        00            .byte	0
03856 0CF0                        10            .byte	$10
03857 0CF1                        3F            .byte	$3F
03858                                           ! 844   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03859 0CF2                        1F            .byte	$1F
03860 0CF3                        1F            .byte	$1F
03861 0CF4                        3F            .byte	$3F
03862 0CF5                        27            .byte	$27
03863 0CF6                        1F            .byte	$1F
03864 0CF7                        3F            .byte	$3F
03865 0CF8                        2F            .byte	$2F
03866 0CF9                        1F            .byte	$1F
03867 0CFA                        3F            .byte	$3F
03868 0CFB                        37            .byte	$37
03869 0CFC                        1F            .byte	$1F
03870 0CFD                        3F            .byte	$3F
03871 0CFE                        3F            .byte	$3F
03872 0CFF                        1F            .byte	$1F
03873 0D00                        3F            .byte	$3F
03874 0D01                        3F            .byte	$3F
03875 0D02                        1F            .byte	$1F
03876 0D03                        37            .byte	$37
03877 0D04                        3F            .byte	$3F
03878 0D05                        1F            .byte	$1F
03879 0D06                        2F            .byte	$2F
03880 0D07                        3F            .byte	$3F
03881 0D08                        1F            .byte	$1F
03882 0D09                        27            .byte	$27
03883                                           ! 845   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,
03884 0D0A                        3F            .byte	$3F
03885 0D0B                        1F            .byte	$1F
03886 0D0C                        1F            .byte	$1F
03887 0D0D                        3F            .byte	$3F
03888 0D0E                        27            .byte	$27
03889 0D0F                        1F            .byte	$1F
03890 0D10                        3F            .byte	$3F
03891 0D11                        2F            .byte	$2F
03892 0D12                        1F            .byte	$1F
03893 0D13                        3F            .byte	$3F
03894 0D14                        37            .byte	$37
03895 0D15                        1F            .byte	$1F
03896 0D16                        3F            .byte	$3F
03897 0D17                        3F            .byte	$3F
03898 0D18                        1F            .byte	$1F
03899 0D19                        37            .byte	$37
03900 0D1A                        3F            .byte	$3F
03901 0D1B                        1F            .byte	$1F
03902 0D1C                        2F            .byte	$2F
03903                                           ! 845 0x1f, 0x27,0x3f,0x1f,
03904 0D1D                        3F            .byte	$3F
03905 0D1E                        1F            .byte	$1F
03906 0D1F                        27            .byte	$27
03907 0D20                        3F            .byte	$3F
03908 0D21                        1F            .byte	$1F
03909                                           ! 846   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D22                        1F            .byte	$1F
03911 0D23                        3F            .byte	$3F
03912 0D24                        1F            .byte	$1F
03913 0D25                        1F            .byte	$1F
03914 0D26                        3F            .byte	$3F
03915 0D27                        27            .byte	$27
03916 0D28                        1F            .byte	$1F
03917 0D29                        3F            .byte	$3F
03918 0D2A                        2F            .byte	$2F
03919 0D2B                        1F            .byte	$1F
03920 0D2C                        3F            .byte	$3F
03921 0D2D                        37            .byte	$37
03922 0D2E                        1F            .byte	$1F
03923 0D2F                        3F            .byte	$3F
03924 0D30                        3F            .byte	$3F
03925 0D31                        1F            .byte	$1F
03926 0D32                        37            .byte	$37
03927 0D33                        3F            .byte	$3F
03928 0D34                        1F            .byte	$1F
03929 0D35                        2F            .byte	$2F
03930 0D36                        3F            .byte	$3F
03931 0D37                        1F            .byte	$1F
03932 0D38                        27            .byte	$27
03933 0D39                        3F            .byte	$3F
03934                                           ! 847   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D3A                        2D            .byte	$2D
03936 0D3B                        2D            .byte	$2D
03937 0D3C                        3F            .byte	$3F
03938 0D3D                        31            .byte	$31
03939 0D3E                        2D            .byte	$2D
03940 0D3F                        3F            .byte	$3F
03941 0D40                        36            .byte	$36
03942 0D41                        2D            .byte	$2D
03943 0D42                        3F            .byte	$3F
03944 0D43                        3A            .byte	$3A
03945 0D44                        2D            .byte	$2D
03946 0D45                        3F            .byte	$3F
03947 0D46                        3F            .byte	$3F
03948 0D47                        2D            .byte	$2D
03949 0D48                        3F            .byte	$3F
03950 0D49                        3F            .byte	$3F
03951 0D4A                        2D            .byte	$2D
03952 0D4B                        3A            .byte	$3A
03953 0D4C                        3F            .byte	$3F
03954 0D4D                        2D            .byte	$2D
03955 0D4E                        36            .byte	$36
03956 0D4F                        3F            .byte	$3F
03957 0D50                        2D            .byte	$2D
03958 0D51                        31            .byte	$31
03959                                           ! 848   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D52                        3F            .byte	$3F
03961 0D53                        2D            .byte	$2D
03962 0D54                        2D            .byte	$2D
03963 0D55                        3F            .byte	$3F
03964 0D56                        31            .byte	$31
03965 0D57                        2D            .byte	$2D
03966 0D58                        3F            .byte	$3F
03967 0D59                        36            .byte	$36
03968 0D5A                        2D            .byte	$2D
03969 0D5B                        3F            .byte	$3F
03970 0D5C                        3A            .byte	$3A
03971 0D5D                        2D            .byte	$2D
03972 0D5E                        3F            .byte	$3F
03973 0D5F                        3F            .byte	$3F
03974 0D60                        2D            .byte	$2D
03975 0D61                        3A            .byte	$3A
03976 0D62                        3F            .byte	$3F
03977 0D63                        2D            .byte	$2D
03978 0D64                        36            .byte	$36
03979 0D65                        3F            .byte	$3F
03980 0D66                        2D            .byte	$2D
03981 0D67                        31            .byte	$31
03982 0D68                        3F            .byte	$3F
03983 0D69                        2D            .byte	$2D
03984                                           ! 849   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D6A                        2D            .byte	$2D
03986 0D6B                        3F            .byte	$3F
03987 0D6C                        2D            .byte	$2D
03988 0D6D                        2D            .byte	$2D
03989 0D6E                        3F            .byte	$3F
03990 0D6F                        31            .byte	$31
03991 0D70                        2D            .byte	$2D
03992 0D71                        3F            .byte	$3F
03993 0D72                        36            .byte	$36
03994 0D73                        2D            .byte	$2D
03995 0D74                        3F            .byte	$3F
03996 0D75                        3A            .byte	$3A
03997 0D76                        2D            .byte	$2D
03998 0D77                        3F            .byte	$3F
03999 0D78                        3F            .byte	$3F
04000 0D79                        2D            .byte	$2D
04001 0D7A                        3A            .byte	$3A
04002 0D7B                        3F            .byte	$3F
04003 0D7C                        2D            .byte	$2D
04004 0D7D                        36            .byte	$36
04005 0D7E                        3F            .byte	$3F
04006 0D7F                        2D            .byte	$2D
04007 0D80                        31            .byte	$31
04008 0D81                        3F            .byte	$3F
04009                                           ! 850   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D82                        00            .byte	0
04011 0D83                        00            .byte	0
04012 0D84                        1C            .byte	$1C
04013 0D85                        07            .byte	7
04014 0D86                        00            .byte	0
04015 0D87                        1C            .byte	$1C
04016 0D88                        0E            .byte	$E
04017 0D89                        00            .byte	0
04018 0D8A                        1C            .byte	$1C
04019 0D8B                        15            .byte	$15
04020 0D8C                        00            .byte	0
04021 0D8D                        1C            .byte	$1C
04022 0D8E                        1C            .byte	$1C
04023 0D8F                        00            .byte	0
04024 0D90                        1C            .byte	$1C
04025 0D91                        1C            .byte	$1C
04026 0D92                        00            .byte	0
04027 0D93                        15            .byte	$15
04028 0D94                        1C            .byte	$1C
04029 0D95                        00            .byte	0
04030 0D96                        0E            .byte	$E
04031 0D97                        1C            .byte	$1C
04032 0D98                        00            .byte	0
04033 0D99                        07            .byte	7
04034                                           ! 851   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0D9A                        1C            .byte	$1C
04036 0D9B                        00            .byte	0
04037 0D9C                        00            .byte	0
04038 0D9D                        1C            .byte	$1C
04039 0D9E                        07            .byte	7
04040 0D9F                        00            .byte	0
04041 0DA0                        1C            .byte	$1C
04042 0DA1                        0E            .byte	$E
04043 0DA2                        00            .byte	0
04044 0DA3                        1C            .byte	$1C
04045 0DA4                        15            .byte	$15
04046 0DA5                        00            .byte	0
04047 0DA6                        1C            .byte	$1C
04048 0DA7                        1C            .byte	$1C
04049 0DA8                        00            .byte	0
04050 0DA9                        15            .byte	$15
04051 0DAA                        1C            .byte	$1C
04052 0DAB                        00            .byte	0
04053 0DAC                        0E            .byte	$E
04054 0DAD                        1C            .byte	$1C
04055 0DAE                        00            .byte	0
04056 0DAF                        07            .byte	7
04057 0DB0                        1C            .byte	$1C
04058 0DB1                        00            .byte	0
04059                                           ! 852   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DB2                        00            .byte	0
04061 0DB3                        1C            .byte	$1C
04062 0DB4                        00            .byte	0
04063 0DB5                        00            .byte	0
04064 0DB6                        1C            .byte	$1C
04065 0DB7                        07            .byte	7
04066 0DB8                        00            .byte	0
04067 0DB9                        1C            .byte	$1C
04068 0DBA                        0E            .byte	$E
04069 0DBB                        00            .byte	0
04070 0DBC                        1C            .byte	$1C
04071 0DBD                        15            .byte	$15
04072 0DBE                        00            .byte	0
04073 0DBF                        1C            .byte	$1C
04074 0DC0                        1C            .byte	$1C
04075 0DC1                        00            .byte	0
04076 0DC2                        15            .byte	$15
04077 0DC3                        1C            .byte	$1C
04078 0DC4                        00            .byte	0
04079 0DC5                        0E            .byte	$E
04080 0DC6                        1C            .byte	$1C
04081 0DC7                        00            .byte	0
04082 0DC8                        07            .byte	7
04083 0DC9                        1C            .byte	$1C
04084                                           ! 853   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DCA                        0E            .byte	$E
04086 0DCB                        0E            .byte	$E
04087 0DCC                        1C            .byte	$1C
04088 0DCD                        11            .byte	$11
04089 0DCE                        0E            .byte	$E
04090 0DCF                        1C            .byte	$1C
04091 0DD0                        15            .byte	$15
04092 0DD1                        0E            .byte	$E
04093 0DD2                        1C            .byte	$1C
04094 0DD3                        18            .byte	$18
04095 0DD4                        0E            .byte	$E
04096 0DD5                        1C            .byte	$1C
04097 0DD6                        1C            .byte	$1C
04098 0DD7                        0E            .byte	$E
04099 0DD8                        1C            .byte	$1C
04100 0DD9                        1C            .byte	$1C
04101 0DDA                        0E            .byte	$E
04102 0DDB                        18            .byte	$18
04103 0DDC                        1C            .byte	$1C
04104 0DDD                        0E            .byte	$E
04105 0DDE                        15            .byte	$15
04106 0DDF                        1C            .byte	$1C
04107 0DE0                        0E            .byte	$E
04108 0DE1                        11            .byte	$11
04109                                           ! 854   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DE2                        1C            .byte	$1C
04111 0DE3                        0E            .byte	$E
04112 0DE4                        0E            .byte	$E
04113 0DE5                        1C            .byte	$1C
04114 0DE6                        11            .byte	$11
04115 0DE7                        0E            .byte	$E
04116 0DE8                        1C            .byte	$1C
04117 0DE9                        15            .byte	$15
04118 0DEA                        0E            .byte	$E
04119 0DEB                        1C            .byte	$1C
04120 0DEC                        18            .byte	$18
04121 0DED                        0E            .byte	$E
04122 0DEE                        1C            .byte	$1C
04123 0DEF                        1C            .byte	$1C
04124 0DF0                        0E            .byte	$E
04125 0DF1                        18            .byte	$18
04126 0DF2                        1C            .byte	$1C
04127 0DF3                        0E            .byte	$E
04128 0DF4                        15            .byte	$15
04129 0DF5                        1C            .byte	$1C
04130 0DF6                        0E            .byte	$E
04131 0DF7                        11            .byte	$11
04132 0DF8                        1C            .byte	$1C
04133 0DF9                        0E            .byte	$E
04134                                           ! 855   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0DFA                        0E            .byte	$E
04136 0DFB                        1C            .byte	$1C
04137 0DFC                        0E            .byte	$E
04138 0DFD                        0E            .byte	$E
04139 0DFE                        1C            .byte	$1C
04140 0DFF                        11            .byte	$11
04141 0E00                        0E            .byte	$E
04142 0E01                        1C            .byte	$1C
04143 0E02                        15            .byte	$15
04144 0E03                        0E            .byte	$E
04145 0E04                        1C            .byte	$1C
04146 0E05                        18            .byte	$18
04147 0E06                        0E            .byte	$E
04148 0E07                        1C            .byte	$1C
04149 0E08                        1C            .byte	$1C
04150 0E09                        0E            .byte	$E
04151 0E0A                        18            .byte	$18
04152 0E0B                        1C            .byte	$1C
04153 0E0C                        0E            .byte	$E
04154 0E0D                        15            .byte	$15
04155 0E0E                        1C            .byte	$1C
04156 0E0F                        0E            .byte	$E
04157 0E10                        11            .byte	$11
04158 0E11                        1C            .byte	$1C
04159                                           ! 856   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E12                        14            .byte	$14
04161 0E13                        14            .byte	$14
04162 0E14                        1C            .byte	$1C
04163 0E15                        16            .byte	$16
04164 0E16                        14            .byte	$14
04165 0E17                        1C            .byte	$1C
04166 0E18                        18            .byte	$18
04167 0E19                        14            .byte	$14
04168 0E1A                        1C            .byte	$1C
04169 0E1B                        1A            .byte	$1A
04170 0E1C                        14            .byte	$14
04171 0E1D                        1C            .byte	$1C
04172 0E1E                        1C            .byte	$1C
04173 0E1F                        14            .byte	$14
04174 0E20                        1C            .byte	$1C
04175 0E21                        1C            .byte	$1C
04176 0E22                        14            .byte	$14
04177 0E23                        1A            .byte	$1A
04178 0E24                        1C            .byte	$1C
04179 0E25                        14            .byte	$14
04180 0E26                        18            .byte	$18
04181 0E27                        1C            .byte	$1C
04182 0E28                        14            .byte	$14
04183 0E29                        16            .byte	$16
04184                                           ! 857   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E2A                        1C            .byte	$1C
04186 0E2B                        14            .byte	$14
04187 0E2C                        14            .byte	$14
04188 0E2D                        1C            .byte	$1C
04189 0E2E                        16            .byte	$16
04190 0E2F                        14            .byte	$14
04191 0E30                        1C            .byte	$1C
04192 0E31                        18            .byte	$18
04193 0E32                        14            .byte	$14
04194 0E33                        1C            .byte	$1C
04195 0E34                        1A            .byte	$1A
04196 0E35                        14            .byte	$14
04197 0E36                        1C            .byte	$1C
04198 0E37                        1C            .byte	$1C
04199 0E38                        14            .byte	$14
04200 0E39                        1A            .byte	$1A
04201 0E3A                        1C            .byte	$1C
04202 0E3B                        14            .byte	$14
04203 0E3C                        18            .byte	$18
04204 0E3D                        1C            .byte	$1C
04205 0E3E                        14            .byte	$14
04206 0E3F                        16            .byte	$16
04207 0E40                        1C            .byte	$1C
04208 0E41                        14            .byte	$14
04209                                           ! 858   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E42                        14            .byte	$14
04211 0E43                        1C            .byte	$1C
04212 0E44                        14            .byte	$14
04213 0E45                        14            .byte	$14
04214 0E46                        1C            .byte	$1C
04215 0E47                        16            .byte	$16
04216 0E48                        14            .byte	$14
04217 0E49                        1C            .byte	$1C
04218 0E4A                        18            .byte	$18
04219 0E4B                        14            .byte	$14
04220 0E4C                        1C            .byte	$1C
04221 0E4D                        1A            .byte	$1A
04222 0E4E                        14            .byte	$14
04223 0E4F                        1C            .byte	$1C
04224 0E50                        1C            .byte	$1C
04225 0E51                        14            .byte	$14
04226 0E52                        1A            .byte	$1A
04227 0E53                        1C            .byte	$1C
04228 0E54                        14            .byte	$14
04229 0E55                        18            .byte	$18
04230 0E56                        1C            .byte	$1C
04231 0E57                        14            .byte	$14
04232 0E58                        16            .byte	$16
04233 0E59                        1C            .byte	$1C
04234                                           ! 859   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E5A                        00            .byte	0
04236 0E5B                        00            .byte	0
04237 0E5C                        10            .byte	$10
04238 0E5D                        04            .byte	4
04239 0E5E                        00            .byte	0
04240 0E5F                        10            .byte	$10
04241 0E60                        08            .byte	8
04242 0E61                        00            .byte	0
04243 0E62                        10            .byte	$10
04244 0E63                        0C            .byte	$C
04245 0E64                        00            .byte	0
04246 0E65                        10            .byte	$10
04247 0E66                        10            .byte	$10
04248 0E67                        00            .byte	0
04249 0E68                        10            .byte	$10
04250 0E69                        10            .byte	$10
04251 0E6A                        00            .byte	0
04252 0E6B                        0C            .byte	$C
04253 0E6C                        10            .byte	$10
04254 0E6D                        00            .byte	0
04255 0E6E                        08            .byte	8
04256 0E6F                        10            .byte	$10
04257 0E70                        00            .byte	0
04258 0E71                        04            .byte	4
04259                                           ! 860   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04260 0E72                        10            .byte	$10
04261 0E73                        00            .byte	0
04262 0E74                        00            .byte	0
04263 0E75                        10            .byte	$10
04264 0E76                        04            .byte	4
04265 0E77                        00            .byte	0
04266 0E78                        10            .byte	$10
04267 0E79                        08            .byte	8
04268 0E7A                        00            .byte	0
04269 0E7B                        10            .byte	$10
04270 0E7C                        0C            .byte	$C
04271 0E7D                        00            .byte	0
04272 0E7E                        10            .byte	$10
04273 0E7F                        10            .byte	$10
04274 0E80                        00            .byte	0
04275 0E81                        0C            .byte	$C
04276 0E82                        10            .byte	$10
04277 0E83                        00            .byte	0
04278 0E84                        08            .byte	8
04279 0E85                        10            .byte	$10
04280 0E86                        00            .byte	0
04281 0E87                        04            .byte	4
04282 0E88                        10            .byte	$10
04283 0E89                        00            .byte	0
04284                                           ! 861   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,
04285 0E8A                        00            .byte	0
04286 0E8B                        10            .byte	$10
04287 0E8C                        00            .byte	0
04288 0E8D                        00            .byte	0
04289 0E8E                        10            .byte	$10
04290 0E8F                        04            .byte	4
04291 0E90                        00            .byte	0
04292 0E91                        10            .byte	$10
04293 0E92                        08            .byte	8
04294 0E93                        00            .byte	0
04295 0E94                        10            .byte	$10
04296 0E95                        0C            .byte	$C
04297 0E96                        00            .byte	0
04298                                           ! 861 0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04299 0E97                        10            .byte	$10
04300 0E98                        10            .byte	$10
04301 0E99                        00            .byte	0
04302 0E9A                        0C            .byte	$C
04303 0E9B                        10            .byte	$10
04304 0E9C                        00            .byte	0
04305 0E9D                        08            .byte	8
04306 0E9E                        10            .byte	$10
04307 0E9F                        00            .byte	0
04308 0EA0                        04            .byte	4
04309 0EA1                        10            .byte	$10
04310                                           ! 862   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EA2                        08            .byte	8
04312 0EA3                        08            .byte	8
04313 0EA4                        10            .byte	$10
04314 0EA5                        0A            .byte	$A
04315 0EA6                        08            .byte	8
04316 0EA7                        10            .byte	$10
04317 0EA8                        0C            .byte	$C
04318 0EA9                        08            .byte	8
04319 0EAA                        10            .byte	$10
04320 0EAB                        0E            .byte	$E
04321 0EAC                        08            .byte	8
04322 0EAD                        10            .byte	$10
04323 0EAE                        10            .byte	$10
04324 0EAF                        08            .byte	8
04325 0EB0                        10            .byte	$10
04326 0EB1                        10            .byte	$10
04327 0EB2                        08            .byte	8
04328 0EB3                        0E            .byte	$E
04329 0EB4                        10            .byte	$10
04330 0EB5                        08            .byte	8
04331 0EB6                        0C            .byte	$C
04332 0EB7                        10            .byte	$10
04333 0EB8                        08            .byte	8
04334 0EB9                        0A            .byte	$A
04335                                           ! 863   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0EBA                        10            .byte	$10
04337 0EBB                        08            .byte	8
04338 0EBC                        08            .byte	8
04339 0EBD                        10            .byte	$10
04340 0EBE                        0A            .byte	$A
04341 0EBF                        08            .byte	8
04342 0EC0                        10            .byte	$10
04343 0EC1                        0C            .byte	$C
04344 0EC2                        08            .byte	8
04345 0EC3                        10            .byte	$10
04346 0EC4                        0E            .byte	$E
04347 0EC5                        08            .byte	8
04348 0EC6                        10            .byte	$10
04349 0EC7                        10            .byte	$10
04350 0EC8                        08            .byte	8
04351 0EC9                        0E            .byte	$E
04352 0ECA                        10            .byte	$10
04353 0ECB                        08            .byte	8
04354 0ECC                        0C            .byte	$C
04355 0ECD                        10            .byte	$10
04356 0ECE                        08            .byte	8
04357 0ECF                        0A            .byte	$A
04358 0ED0                        10            .byte	$10
04359 0ED1                        08            .byte	8
04360                                           ! 864   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0ED2                        08            .byte	8
04362 0ED3                        10            .byte	$10
04363 0ED4                        08            .byte	8
04364 0ED5                        08            .byte	8
04365 0ED6                        10            .byte	$10
04366 0ED7                        0A            .byte	$A
04367 0ED8                        08            .byte	8
04368 0ED9                        10            .byte	$10
04369 0EDA                        0C            .byte	$C
04370 0EDB                        08            .byte	8
04371 0EDC                        10            .byte	$10
04372 0EDD                        0E            .byte	$E
04373 0EDE                        08            .byte	8
04374 0EDF                        10            .byte	$10
04375 0EE0                        10            .byte	$10
04376 0EE1                        08            .byte	8
04377 0EE2                        0E            .byte	$E
04378 0EE3                        10            .byte	$10
04379 0EE4                        08            .byte	8
04380 0EE5                        0C            .byte	$C
04381 0EE6                        10            .byte	$10
04382 0EE7                        08            .byte	8
04383 0EE8                        0A            .byte	$A
04384 0EE9                        10            .byte	$10
04385                                           ! 865   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EEA                        0B            .byte	$B
04387 0EEB                        0B            .byte	$B
04388 0EEC                        10            .byte	$10
04389 0EED                        0C            .byte	$C
04390 0EEE                        0B            .byte	$B
04391 0EEF                        10            .byte	$10
04392 0EF0                        0D            .byte	$D
04393 0EF1                        0B            .byte	$B
04394 0EF2                        10            .byte	$10
04395 0EF3                        0F            .byte	$F
04396 0EF4                        0B            .byte	$B
04397 0EF5                        10            .byte	$10
04398 0EF6                        10            .byte	$10
04399 0EF7                        0B            .byte	$B
04400 0EF8                        10            .byte	$10
04401 0EF9                        10            .byte	$10
04402 0EFA                        0B            .byte	$B
04403 0EFB                        0F            .byte	$F
04404 0EFC                        10            .byte	$10
04405 0EFD                        0B            .byte	$B
04406 0EFE                        0D            .byte	$D
04407 0EFF                        10            .byte	$10
04408 0F00                        0B            .byte	$B
04409 0F01                        0C            .byte	$C
04410                                           ! 866   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F02                        10            .byte	$10
04412 0F03                        0B            .byte	$B
04413 0F04                        0B            .byte	$B
04414 0F05                        10            .byte	$10
04415 0F06                        0C            .byte	$C
04416 0F07                        0B            .byte	$B
04417 0F08                        10            .byte	$10
04418 0F09                        0D            .byte	$D
04419 0F0A                        0B            .byte	$B
04420 0F0B                        10            .byte	$10
04421 0F0C                        0F            .byte	$F
04422 0F0D                        0B            .byte	$B
04423 0F0E                        10            .byte	$10
04424 0F0F                        10            .byte	$10
04425 0F10                        0B            .byte	$B
04426 0F11                        0F            .byte	$F
04427 0F12                        10            .byte	$10
04428 0F13                        0B            .byte	$B
04429 0F14                        0D            .byte	$D
04430 0F15                        10            .byte	$10
04431 0F16                        0B            .byte	$B
04432 0F17                        0C            .byte	$C
04433 0F18                        10            .byte	$10
04434 0F19                        0B            .byte	$B
04435                                           ! 867   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F1A                        0B            .byte	$B
04437 0F1B                        10            .byte	$10
04438 0F1C                        0B            .byte	$B
04439 0F1D                        0B            .byte	$B
04440 0F1E                        10            .byte	$10
04441 0F1F                        0C            .byte	$C
04442 0F20                        0B            .byte	$B
04443 0F21                        10            .byte	$10
04444 0F22                        0D            .byte	$D
04445 0F23                        0B            .byte	$B
04446 0F24                        10            .byte	$10
04447 0F25                        0F            .byte	$F
04448 0F26                        0B            .byte	$B
04449 0F27                        10            .byte	$10
04450 0F28                        10            .byte	$10
04451 0F29                        0B            .byte	$B
04452 0F2A                        0F            .byte	$F
04453 0F2B                        10            .byte	$10
04454 0F2C                        0B            .byte	$B
04455 0F2D                        0D            .byte	$D
04456 0F2E                        10            .byte	$10
04457 0F2F                        0B            .byte	$B
04458 0F30                        0C            .byte	$C
04459 0F31                        10            .byte	$10
04460                                           ! 868   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F32                        00            .byte	0
04462 0F33                        00            .byte	0
04463 0F34                        00            .byte	0
04464 0F35                        00            .byte	0
04465 0F36                        00            .byte	0
04466 0F37                        00            .byte	0
04467 0F38                        00            .byte	0
04468 0F39                        00            .byte	0
04469 0F3A                        00            .byte	0
04470 0F3B                        00            .byte	0
04471 0F3C                        00            .byte	0
04472 0F3D                        00            .byte	0
04473 0F3E                        00            .byte	0
04474 0F3F                        00            .byte	0
04475 0F40                        00            .byte	0
04476 0F41                        00            .byte	0
04477 0F42                        00            .byte	0
04478 0F43                        00            .byte	0
04479 0F44                        00            .byte	0
04480 0F45                        00            .byte	0
04481 0F46                        00            .byte	0
04482 0F47                        00            .byte	0
04483 0F48                        00            .byte	0
04484                                           ! 869 };
04485 0F49                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 870 static Bit8u static_functionality[0x10]=
04488                                           ! 871 {
04489                       00000F4A            _static_functionality:
04490                                           ! 872          0xff,
04491 0F4A                        FF            .byte	$FF
04492                                           ! 873          0xe0,
04493 0F4B                        E0            .byte	$E0
04494                                           ! 874          0x0f,
04495 0F4C                        0F            .byte	$F
04496                                           ! 875          0x00, 0x00, 0x00, 0x00,
04497 0F4D                        00            .byte	0
04498 0F4E                        00            .byte	0
04499 0F4F                        00            .byte	0
04500 0F50                        00            .byte	0
04501                                           ! 876          0x07,
04502 0F51                        07            .byte	7
04503                                           ! 877          0x02,
04504 0F52                        02            .byte	2
04505                                           ! 878          0x08,
04506 0F53                        08            .byte	8
04507                                           ! 879          0xe7,
04508 0F54                        E7            .byte	$E7
04509                                           ! 880          0x0c,
04510 0F55                        0C            .byte	$C
04511                                           ! 881          0x00,
04512 0F56                        00            .byte	0
04513                                           ! 882          0x00,
04514 0F57                        00            .byte	0
04515                                           ! 883          0x00,
04516 0F58                        00            .byte	0
04517                                           ! 884          0x00
04518                                           ! 885 };
04519 0F59                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 886 static Bit8u vgafont8[256*8]=
04522                                           ! 887 {
04523                       00000F5A            _vgafont8:
04524                                           ! 888  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F5A                        00            .byte	0
04526 0F5B                        00            .byte	0
04527 0F5C                        00            .byte	0
04528 0F5D                        00            .byte	0
04529 0F5E                        00            .byte	0
04530 0F5F                        00            .byte	0
04531 0F60                        00            .byte	0
04532 0F61                        00            .byte	0
04533                                           ! 889  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F62                        7E            .byte	$7E
04535 0F63                        81            .byte	$81
04536 0F64                        A5            .byte	$A5
04537 0F65                        81            .byte	$81
04538 0F66                        BD            .byte	$BD
04539 0F67                        99            .byte	$99
04540 0F68                        81            .byte	$81
04541 0F69                        7E            .byte	$7E
04542                                           ! 890  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F6A                        7E            .byte	$7E
04544 0F6B                        FF            .byte	$FF
04545 0F6C                        DB            .byte	$DB
04546 0F6D                        FF            .byte	$FF
04547 0F6E                        C3            .byte	$C3
04548 0F6F                        E7            .byte	$E7
04549 0F70                        FF            .byte	$FF
04550 0F71                        7E            .byte	$7E
04551                                           ! 891  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F72                        6C            .byte	$6C
04553 0F73                        FE            .byte	$FE
04554 0F74                        FE            .byte	$FE
04555 0F75                        FE            .byte	$FE
04556 0F76                        7C            .byte	$7C
04557 0F77                        38            .byte	$38
04558 0F78                        10            .byte	$10
04559 0F79                        00            .byte	0
04560                                           ! 892  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F7A                        10            .byte	$10
04562 0F7B                        38            .byte	$38
04563 0F7C                        7C            .byte	$7C
04564 0F7D                        FE            .byte	$FE
04565 0F7E                        7C            .byte	$7C
04566 0F7F                        38            .byte	$38
04567 0F80                        10            .byte	$10
04568 0F81                        00            .byte	0
04569                                           ! 893  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F82                        38            .byte	$38
04571 0F83                        7C            .byte	$7C
04572 0F84                        38            .byte	$38
04573 0F85                        FE            .byte	$FE
04574 0F86                        FE            .byte	$FE
04575 0F87                        7C            .byte	$7C
04576 0F88                        38            .byte	$38
04577 0F89                        7C            .byte	$7C
04578                                           ! 894  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F8A                        10            .byte	$10
04580 0F8B                        10            .byte	$10
04581 0F8C                        38            .byte	$38
04582 0F8D                        7C            .byte	$7C
04583 0F8E                        FE            .byte	$FE
04584 0F8F                        7C            .byte	$7C
04585 0F90                        38            .byte	$38
04586 0F91                        7C            .byte	$7C
04587                                           ! 895  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0F92                        00            .byte	0
04589 0F93                        00            .byte	0
04590 0F94                        18            .byte	$18
04591 0F95                        3C            .byte	$3C
04592 0F96                        3C            .byte	$3C
04593 0F97                        18            .byte	$18
04594 0F98                        00            .byte	0
04595 0F99                        00            .byte	0
04596                                           ! 896  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0F9A                        FF            .byte	$FF
04598 0F9B                        FF            .byte	$FF
04599 0F9C                        E7            .byte	$E7
04600 0F9D                        C3            .byte	$C3
04601 0F9E                        C3            .byte	$C3
04602 0F9F                        E7            .byte	$E7
04603 0FA0                        FF            .byte	$FF
04604 0FA1                        FF            .byte	$FF
04605                                           ! 897  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FA2                        00            .byte	0
04607 0FA3                        3C            .byte	$3C
04608 0FA4                        66            .byte	$66
04609 0FA5                        42            .byte	$42
04610 0FA6                        42            .byte	$42
04611 0FA7                        66            .byte	$66
04612 0FA8                        3C            .byte	$3C
04613 0FA9                        00            .byte	0
04614                                           ! 898  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FAA                        FF            .byte	$FF
04616 0FAB                        C3            .byte	$C3
04617 0FAC                        99            .byte	$99
04618 0FAD                        BD            .byte	$BD
04619 0FAE                        BD            .byte	$BD
04620 0FAF                        99            .byte	$99
04621 0FB0                        C3            .byte	$C3
04622 0FB1                        FF            .byte	$FF
04623                                           ! 899  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FB2                        0F            .byte	$F
04625 0FB3                        07            .byte	7
04626 0FB4                        0F            .byte	$F
04627 0FB5                        7D            .byte	$7D
04628 0FB6                        CC            .byte	$CC
04629 0FB7                        CC            .byte	$CC
04630 0FB8                        CC            .byte	$CC
04631 0FB9                        78            .byte	$78
04632                                           ! 900  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FBA                        3C            .byte	$3C
04634 0FBB                        66            .byte	$66
04635 0FBC                        66            .byte	$66
04636 0FBD                        66            .byte	$66
04637 0FBE                        3C            .byte	$3C
04638 0FBF                        18            .byte	$18
04639 0FC0                        7E            .byte	$7E
04640 0FC1                        18            .byte	$18
04641                                           ! 901  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04642 0FC2                        3F            .byte	$3F
04643 0FC3                        33            .byte	$33
04644 0FC4                        3F            .byte	$3F
04645 0FC5                        30            .byte	$30
04646 0FC6                        30            .byte	$30
04647 0FC7                        70            .byte	$70
04648 0FC8                        F0            .byte	$F0
04649 0FC9                        E0            .byte	$E0
04650                                           ! 902  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04651 0FCA                        7F            .byte	$7F
04652 0FCB                        63            .byte	$63
04653 0FCC                        7F            .byte	$7F
04654 0FCD                        63            .byte	$63
04655 0FCE                        63            .byte	$63
04656 0FCF                        67            .byte	$67
04657 0FD0                        E6            .byte	$E6
04658 0FD1                        C0            .byte	$C0
04659                                           ! 903  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04660 0FD2                        99            .byte	$99
04661 0FD3                        5A            .byte	$5A
04662 0FD4                        3C            .byte	$3C
04663 0FD5                        E7            .byte	$E7
04664 0FD6                        E7            .byte	$E7
04665 0FD7                        3C            .byte	$3C
04666 0FD8                        5A            .byte	$5A
04667 0FD9                        99            .byte	$99
04668                                           ! 904  0x80, 0
04669 0FDA                        80            .byte	$80
04670                                           ! 904 xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04671 0FDB                        E0            .byte	$E0
04672 0FDC                        F8            .byte	$F8
04673 0FDD                        FE            .byte	$FE
04674 0FDE                        F8            .byte	$F8
04675 0FDF                        E0            .byte	$E0
04676 0FE0                        80            .byte	$80
04677 0FE1                        00            .byte	0
04678                                           ! 905  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FE2                        02            .byte	2
04680 0FE3                        0E            .byte	$E
04681 0FE4                        3E            .byte	$3E
04682 0FE5                        FE            .byte	$FE
04683 0FE6                        3E            .byte	$3E
04684 0FE7                        0E            .byte	$E
04685 0FE8                        02            .byte	2
04686 0FE9                        00            .byte	0
04687                                           ! 906  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FEA                        18            .byte	$18
04689 0FEB                        3C            .byte	$3C
04690 0FEC                        7E            .byte	$7E
04691 0FED                        18            .byte	$18
04692 0FEE                        18            .byte	$18
04693 0FEF                        7E            .byte	$7E
04694 0FF0                        3C            .byte	$3C
04695 0FF1                        18            .byte	$18
04696                                           ! 907  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 0FF2                        66            .byte	$66
04698 0FF3                        66            .byte	$66
04699 0FF4                        66            .byte	$66
04700 0FF5                        66            .byte	$66
04701 0FF6                        66            .byte	$66
04702 0FF7                        00            .byte	0
04703 0FF8                        66            .byte	$66
04704 0FF9                        00            .byte	0
04705                                           ! 908  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 0FFA                        7F            .byte	$7F
04707 0FFB                        DB            .byte	$DB
04708 0FFC                        DB            .byte	$DB
04709 0FFD                        7B            .byte	$7B
04710 0FFE                        1B            .byte	$1B
04711 0FFF                        1B            .byte	$1B
04712 1000                        1B            .byte	$1B
04713 1001                        00            .byte	0
04714                                           ! 909  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1002                        3E            .byte	$3E
04716 1003                        63            .byte	$63
04717 1004                        38            .byte	$38
04718 1005                        6C            .byte	$6C
04719 1006                        6C            .byte	$6C
04720 1007                        38            .byte	$38
04721 1008                        CC            .byte	$CC
04722 1009                        78            .byte	$78
04723                                           ! 910  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 100A                        00            .byte	0
04725 100B                        00            .byte	0
04726 100C                        00            .byte	0
04727 100D                        00            .byte	0
04728 100E                        7E            .byte	$7E
04729 100F                        7E            .byte	$7E
04730 1010                        7E            .byte	$7E
04731 1011                        00            .byte	0
04732                                           ! 911  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1012                        18            .byte	$18
04734 1013                        3C            .byte	$3C
04735 1014                        7E            .byte	$7E
04736 1015                        18            .byte	$18
04737 1016                        7E            .byte	$7E
04738 1017                        3C            .byte	$3C
04739 1018                        18            .byte	$18
04740 1019                        FF            .byte	$FF
04741                                           ! 912  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 101A                        18            .byte	$18
04743 101B                        3C            .byte	$3C
04744 101C                        7E            .byte	$7E
04745 101D                        18            .byte	$18
04746 101E                        18            .byte	$18
04747 101F                        18            .byte	$18
04748 1020                        18            .byte	$18
04749 1021                        00            .byte	0
04750                                           ! 913  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1022                        18            .byte	$18
04752 1023                        18            .byte	$18
04753 1024                        18            .byte	$18
04754 1025                        18            .byte	$18
04755 1026                        7E            .byte	$7E
04756 1027                        3C            .byte	$3C
04757 1028                        18            .byte	$18
04758 1029                        00            .byte	0
04759                                           ! 914  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 102A                        00            .byte	0
04761 102B                        18            .byte	$18
04762 102C                        0C            .byte	$C
04763 102D                        FE            .byte	$FE
04764 102E                        0C            .byte	$C
04765 102F                        18            .byte	$18
04766 1030                        00            .byte	0
04767 1031                        00            .byte	0
04768                                           ! 915  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1032                        00            .byte	0
04770 1033                        30            .byte	$30
04771 1034                        60            .byte	$60
04772 1035                        FE            .byte	$FE
04773 1036                        60            .byte	$60
04774 1037                        30            .byte	$30
04775 1038                        00            .byte	0
04776 1039                        00            .byte	0
04777                                           ! 916  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 103A                        00            .byte	0
04779 103B                        00            .byte	0
04780 103C                        C0            .byte	$C0
04781 103D                        C0            .byte	$C0
04782 103E                        C0            .byte	$C0
04783 103F                        FE            .byte	$FE
04784 1040                        00            .byte	0
04785 1041                        00            .byte	0
04786                                           ! 917  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1042                        00            .byte	0
04788 1043                        24            .byte	$24
04789 1044                        66            .byte	$66
04790 1045                        FF            .byte	$FF
04791 1046                        66            .byte	$66
04792 1047                        24            .byte	$24
04793 1048                        00            .byte	0
04794 1049                        00            .byte	0
04795                                           ! 918  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 104A                        00            .byte	0
04797 104B                        18            .byte	$18
04798 104C                        3C            .byte	$3C
04799 104D                        7E            .byte	$7E
04800 104E                        FF            .byte	$FF
04801 104F                        FF            .byte	$FF
04802 1050                        00            .byte	0
04803 1051                        00            .byte	0
04804                                           ! 919  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1052                        00            .byte	0
04806 1053                        FF            .byte	$FF
04807 1054                        FF            .byte	$FF
04808 1055                        7E            .byte	$7E
04809 1056                        3C            .byte	$3C
04810 1057                        18            .byte	$18
04811 1058                        00            .byte	0
04812 1059                        00            .byte	0
04813                                           ! 920  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 105A                        00            .byte	0
04815 105B                        00            .byte	0
04816 105C                        00            .byte	0
04817 105D                        00            .byte	0
04818 105E                        00            .byte	0
04819 105F                        00            .byte	0
04820 1060                        00            .byte	0
04821 1061                        00            .byte	0
04822                                           ! 921  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1062                        30            .byte	$30
04824 1063                        78            .byte	$78
04825 1064                        78            .byte	$78
04826 1065                        30            .byte	$30
04827 1066                        30            .byte	$30
04828 1067                        00            .byte	0
04829 1068                        30            .byte	$30
04830 1069                        00            .byte	0
04831                                           ! 922  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 106A                        6C            .byte	$6C
04833 106B                        6C            .byte	$6C
04834 106C                        6C            .byte	$6C
04835 106D                        00            .byte	0
04836 106E                        00            .byte	0
04837 106F                        00            .byte	0
04838 1070                        00            .byte	0
04839 1071                        00            .byte	0
04840                                           ! 923  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1072                        6C            .byte	$6C
04842 1073                        6C            .byte	$6C
04843 1074                        FE            .byte	$FE
04844 1075                        6C            .byte	$6C
04845 1076                        FE            .byte	$FE
04846 1077                        6C            .byte	$6C
04847 1078                        6C            .byte	$6C
04848 1079                        00            .byte	0
04849                                           ! 924  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 107A                        30            .byte	$30
04851 107B                        7C            .byte	$7C
04852 107C                        C0            .byte	$C0
04853 107D                        78            .byte	$78
04854 107E                        0C            .byte	$C
04855 107F                        F8            .byte	$F8
04856 1080                        30            .byte	$30
04857 1081                        00            .byte	0
04858                                           ! 925  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1082                        00            .byte	0
04860 1083                        C6            .byte	$C6
04861 1084                        CC            .byte	$CC
04862 1085                        18            .byte	$18
04863 1086                        30            .byte	$30
04864 1087                        66            .byte	$66
04865 1088                        C6            .byte	$C6
04866 1089                        00            .byte	0
04867                                           ! 926  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 108A                        38            .byte	$38
04869 108B                        6C            .byte	$6C
04870 108C                        38            .byte	$38
04871 108D                        76            .byte	$76
04872 108E                        DC            .byte	$DC
04873 108F                        CC            .byte	$CC
04874 1090                        76            .byte	$76
04875 1091                        00            .byte	0
04876                                           ! 927  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 1092                        60            .byte	$60
04878 1093                        60            .byte	$60
04879 1094                        C0            .byte	$C0
04880 1095                        00            .byte	0
04881 1096                        00            .byte	0
04882 1097                        00            .byte	0
04883 1098                        00            .byte	0
04884 1099                        00            .byte	0
04885                                           ! 928  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 109A                        18            .byte	$18
04887 109B                        30            .byte	$30
04888 109C                        60            .byte	$60
04889 109D                        60            .byte	$60
04890 109E                        60            .byte	$60
04891 109F                        30            .byte	$30
04892 10A0                        18            .byte	$18
04893 10A1                        00            .byte	0
04894                                           ! 929  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10A2                        60            .byte	$60
04896 10A3                        30            .byte	$30
04897 10A4                        18            .byte	$18
04898 10A5                        18            .byte	$18
04899 10A6                        18            .byte	$18
04900 10A7                        30            .byte	$30
04901 10A8                        60            .byte	$60
04902 10A9                        00            .byte	0
04903                                           ! 930  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10AA                        00            .byte	0
04905 10AB                        66            .byte	$66
04906 10AC                        3C            .byte	$3C
04907 10AD                        FF            .byte	$FF
04908 10AE                        3C            .byte	$3C
04909 10AF                        66            .byte	$66
04910 10B0                        00            .byte	0
04911 10B1                        00            .byte	0
04912                                           ! 931  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10B2                        00            .byte	0
04914 10B3                        30            .byte	$30
04915 10B4                        30            .byte	$30
04916 10B5                        FC            .byte	$FC
04917 10B6                        30            .byte	$30
04918 10B7                        30            .byte	$30
04919 10B8                        00            .byte	0
04920 10B9                        00            .byte	0
04921                                           ! 932  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10BA                        00            .byte	0
04923 10BB                        00            .byte	0
04924 10BC                        00            .byte	0
04925 10BD                        00            .byte	0
04926 10BE                        00            .byte	0
04927 10BF                        30            .byte	$30
04928 10C0                        30            .byte	$30
04929 10C1                        60            .byte	$60
04930                                           ! 933  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10C2                        00            .byte	0
04932 10C3                        00            .byte	0
04933 10C4                        00            .byte	0
04934 10C5                        FC            .byte	$FC
04935 10C6                        00            .byte	0
04936 10C7                        00            .byte	0
04937 10C8                        00            .byte	0
04938 10C9                        00            .byte	0
04939                                           ! 934  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10CA                        00            .byte	0
04941 10CB                        00            .byte	0
04942 10CC                        00            .byte	0
04943 10CD                        00            .byte	0
04944 10CE                        00            .byte	0
04945 10CF                        30            .byte	$30
04946 10D0                        30            .byte	$30
04947 10D1                        00            .byte	0
04948                                           ! 935  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10D2                        06            .byte	6
04950 10D3                        0C            .byte	$C
04951 10D4                        18            .byte	$18
04952 10D5                        30            .byte	$30
04953 10D6                        60            .byte	$60
04954 10D7                        C0            .byte	$C0
04955 10D8                        80            .byte	$80
04956 10D9                        00            .byte	0
04957                                           ! 936  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10DA                        7C            .byte	$7C
04959 10DB                        C6            .byte	$C6
04960 10DC                        CE            .byte	$CE
04961 10DD                        DE            .byte	$DE
04962 10DE                        F6            .byte	$F6
04963 10DF                        E6            .byte	$E6
04964 10E0                        7C            .byte	$7C
04965 10E1                        00            .byte	0
04966                                           ! 937  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10E2                        30            .byte	$30
04968 10E3                        70            .byte	$70
04969 10E4                        30            .byte	$30
04970 10E5                        30            .byte	$30
04971 10E6                        30            .byte	$30
04972 10E7                        30            .byte	$30
04973 10E8                        FC            .byte	$FC
04974 10E9                        00            .byte	0
04975                                           ! 938  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10EA                        78            .byte	$78
04977 10EB                        CC            .byte	$CC
04978 10EC                        0C            .byte	$C
04979 10ED                        38            .byte	$38
04980 10EE                        60            .byte	$60
04981 10EF                        CC            .byte	$CC
04982 10F0                        FC            .byte	$FC
04983 10F1                        00            .byte	0
04984                                           ! 939  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 10F2                        78            .byte	$78
04986 10F3                        CC            .byte	$CC
04987 10F4                        0C            .byte	$C
04988 10F5                        38            .byte	$38
04989 10F6                        0C            .byte	$C
04990 10F7                        CC            .byte	$CC
04991 10F8                        78            .byte	$78
04992 10F9                        00            .byte	0
04993                                           ! 940  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 10FA                        1C            .byte	$1C
04995 10FB                        3C            .byte	$3C
04996 10FC                        6C            .byte	$6C
04997 10FD                        CC            .byte	$CC
04998 10FE                        FE            .byte	$FE
04999 10FF                        0C            .byte	$C
05000 1100                        1E            .byte	$1E
05001 1101                        00            .byte	0
05002                                           ! 941  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1102                        FC            .byte	$FC
05004 1103                        C0            .byte	$C0
05005 1104                        F8            .byte	$F8
05006 1105                        0C            .byte	$C
05007 1106                        0C            .byte	$C
05008 1107                        CC            .byte	$CC
05009 1108                        78            .byte	$78
05010 1109                        00            .byte	0
05011                                           ! 942  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 110A                        38            .byte	$38
05013 110B                        60            .byte	$60
05014 110C                        C0            .byte	$C0
05015 110D                        F8            .byte	$F8
05016 110E                        CC            .byte	$CC
05017 110F                        CC            .byte	$CC
05018 1110                        78            .byte	$78
05019 1111                        00            .byte	0
05020                                           ! 943  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05021 1112                        FC            .byte	$FC
05022 1113                        CC            .byte	$CC
05023 1114                        0C            .byte	$C
05024 1115                        18            .byte	$18
05025 1116                        30            .byte	$30
05026 1117                        30            .byte	$30
05027 1118                        30            .byte	$30
05028 1119                        00            .byte	0
05029                                           ! 944  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05030 111A                        78            .byte	$78
05031 111B                        CC            .byte	$CC
05032 111C                        CC            .byte	$CC
05033 111D                        78            .byte	$78
05034 111E                        CC            .byte	$CC
05035 111F                        CC            .byte	$CC
05036 1120                        78            .byte	$78
05037 1121                        00            .byte	0
05038                                           ! 945  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00
05039 1122                        78            .byte	$78
05040 1123                        CC            .byte	$CC
05041 1124                        CC            .byte	$CC
05042 1125                        7C            .byte	$7C
05043 1126                        0C            .byte	$C
05044 1127                        18            .byte	$18
05045 1128                        70            .byte	$70
05046                                           ! 945 ,
05047 1129                        00            .byte	0
05048                                           ! 946  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 112A                        00            .byte	0
05050 112B                        30            .byte	$30
05051 112C                        30            .byte	$30
05052 112D                        00            .byte	0
05053 112E                        00            .byte	0
05054 112F                        30            .byte	$30
05055 1130                        30            .byte	$30
05056 1131                        00            .byte	0
05057                                           ! 947  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1132                        00            .byte	0
05059 1133                        30            .byte	$30
05060 1134                        30            .byte	$30
05061 1135                        00            .byte	0
05062 1136                        00            .byte	0
05063 1137                        30            .byte	$30
05064 1138                        30            .byte	$30
05065 1139                        60            .byte	$60
05066                                           ! 948  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 113A                        18            .byte	$18
05068 113B                        30            .byte	$30
05069 113C                        60            .byte	$60
05070 113D                        C0            .byte	$C0
05071 113E                        60            .byte	$60
05072 113F                        30            .byte	$30
05073 1140                        18            .byte	$18
05074 1141                        00            .byte	0
05075                                           ! 949  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1142                        00            .byte	0
05077 1143                        00            .byte	0
05078 1144                        FC            .byte	$FC
05079 1145                        00            .byte	0
05080 1146                        00            .byte	0
05081 1147                        FC            .byte	$FC
05082 1148                        00            .byte	0
05083 1149                        00            .byte	0
05084                                           ! 950  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 114A                        60            .byte	$60
05086 114B                        30            .byte	$30
05087 114C                        18            .byte	$18
05088 114D                        0C            .byte	$C
05089 114E                        18            .byte	$18
05090 114F                        30            .byte	$30
05091 1150                        60            .byte	$60
05092 1151                        00            .byte	0
05093                                           ! 951  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1152                        78            .byte	$78
05095 1153                        CC            .byte	$CC
05096 1154                        0C            .byte	$C
05097 1155                        18            .byte	$18
05098 1156                        30            .byte	$30
05099 1157                        00            .byte	0
05100 1158                        30            .byte	$30
05101 1159                        00            .byte	0
05102                                           ! 952  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 115A                        7C            .byte	$7C
05104 115B                        C6            .byte	$C6
05105 115C                        DE            .byte	$DE
05106 115D                        DE            .byte	$DE
05107 115E                        DE            .byte	$DE
05108 115F                        C0            .byte	$C0
05109 1160                        78            .byte	$78
05110 1161                        00            .byte	0
05111                                           ! 953  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1162                        30            .byte	$30
05113 1163                        78            .byte	$78
05114 1164                        CC            .byte	$CC
05115 1165                        CC            .byte	$CC
05116 1166                        FC            .byte	$FC
05117 1167                        CC            .byte	$CC
05118 1168                        CC            .byte	$CC
05119 1169                        00            .byte	0
05120                                           ! 954  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 116A                        FC            .byte	$FC
05122 116B                        66            .byte	$66
05123 116C                        66            .byte	$66
05124 116D                        7C            .byte	$7C
05125 116E                        66            .byte	$66
05126 116F                        66            .byte	$66
05127 1170                        FC            .byte	$FC
05128 1171                        00            .byte	0
05129                                           ! 955  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1172                        3C            .byte	$3C
05131 1173                        66            .byte	$66
05132 1174                        C0            .byte	$C0
05133 1175                        C0            .byte	$C0
05134 1176                        C0            .byte	$C0
05135 1177                        66            .byte	$66
05136 1178                        3C            .byte	$3C
05137 1179                        00            .byte	0
05138                                           ! 956  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 117A                        F8            .byte	$F8
05140 117B                        6C            .byte	$6C
05141 117C                        66            .byte	$66
05142 117D                        66            .byte	$66
05143 117E                        66            .byte	$66
05144 117F                        6C            .byte	$6C
05145 1180                        F8            .byte	$F8
05146 1181                        00            .byte	0
05147                                           ! 957  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1182                        FE            .byte	$FE
05149 1183                        62            .byte	$62
05150 1184                        68            .byte	$68
05151 1185                        78            .byte	$78
05152 1186                        68            .byte	$68
05153 1187                        62            .byte	$62
05154 1188                        FE            .byte	$FE
05155 1189                        00            .byte	0
05156                                           ! 958  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 118A                        FE            .byte	$FE
05158 118B                        62            .byte	$62
05159 118C                        68            .byte	$68
05160 118D                        78            .byte	$78
05161 118E                        68            .byte	$68
05162 118F                        60            .byte	$60
05163 1190                        F0            .byte	$F0
05164 1191                        00            .byte	0
05165                                           ! 959  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 1192                        3C            .byte	$3C
05167 1193                        66            .byte	$66
05168 1194                        C0            .byte	$C0
05169 1195                        C0            .byte	$C0
05170 1196                        CE            .byte	$CE
05171 1197                        66            .byte	$66
05172 1198                        3E            .byte	$3E
05173 1199                        00            .byte	0
05174                                           ! 960  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 119A                        CC            .byte	$CC
05176 119B                        CC            .byte	$CC
05177 119C                        CC            .byte	$CC
05178 119D                        FC            .byte	$FC
05179 119E                        CC            .byte	$CC
05180 119F                        CC            .byte	$CC
05181 11A0                        CC            .byte	$CC
05182 11A1                        00            .byte	0
05183                                           ! 961  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11A2                        78            .byte	$78
05185 11A3                        30            .byte	$30
05186 11A4                        30            .byte	$30
05187 11A5                        30            .byte	$30
05188 11A6                        30            .byte	$30
05189 11A7                        30            .byte	$30
05190 11A8                        78            .byte	$78
05191 11A9                        00            .byte	0
05192                                           ! 962  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11AA                        1E            .byte	$1E
05194 11AB                        0C            .byte	$C
05195 11AC                        0C            .byte	$C
05196 11AD                        0C            .byte	$C
05197 11AE                        CC            .byte	$CC
05198 11AF                        CC            .byte	$CC
05199 11B0                        78            .byte	$78
05200 11B1                        00            .byte	0
05201                                           ! 963  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11B2                        E6            .byte	$E6
05203 11B3                        66            .byte	$66
05204 11B4                        6C            .byte	$6C
05205 11B5                        78            .byte	$78
05206 11B6                        6C            .byte	$6C
05207 11B7                        66            .byte	$66
05208 11B8                        E6            .byte	$E6
05209 11B9                        00            .byte	0
05210                                           ! 964  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11BA                        F0            .byte	$F0
05212 11BB                        60            .byte	$60
05213 11BC                        60            .byte	$60
05214 11BD                        60            .byte	$60
05215 11BE                        62            .byte	$62
05216 11BF                        66            .byte	$66
05217 11C0                        FE            .byte	$FE
05218 11C1                        00            .byte	0
05219                                           ! 965  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11C2                        C6            .byte	$C6
05221 11C3                        EE            .byte	$EE
05222 11C4                        FE            .byte	$FE
05223 11C5                        FE            .byte	$FE
05224 11C6                        D6            .byte	$D6
05225 11C7                        C6            .byte	$C6
05226 11C8                        C6            .byte	$C6
05227 11C9                        00            .byte	0
05228                                           ! 966  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11CA                        C6            .byte	$C6
05230 11CB                        E6            .byte	$E6
05231 11CC                        F6            .byte	$F6
05232 11CD                        DE            .byte	$DE
05233 11CE                        CE            .byte	$CE
05234 11CF                        C6            .byte	$C6
05235 11D0                        C6            .byte	$C6
05236 11D1                        00            .byte	0
05237                                           ! 967  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11D2                        38            .byte	$38
05239 11D3                        6C            .byte	$6C
05240 11D4                        C6            .byte	$C6
05241 11D5                        C6            .byte	$C6
05242 11D6                        C6            .byte	$C6
05243 11D7                        6C            .byte	$6C
05244 11D8                        38            .byte	$38
05245 11D9                        00            .byte	0
05246                                           ! 968  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11DA                        FC            .byte	$FC
05248 11DB                        66            .byte	$66
05249 11DC                        66            .byte	$66
05250 11DD                        7C            .byte	$7C
05251 11DE                        60            .byte	$60
05252 11DF                        60            .byte	$60
05253 11E0                        F0            .byte	$F0
05254 11E1                        00            .byte	0
05255                                           ! 969  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11E2                        78            .byte	$78
05257 11E3                        CC            .byte	$CC
05258 11E4                        CC            .byte	$CC
05259 11E5                        CC            .byte	$CC
05260 11E6                        DC            .byte	$DC
05261 11E7                        78            .byte	$78
05262 11E8                        1C            .byte	$1C
05263 11E9                        00            .byte	0
05264                                           ! 970  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11EA                        FC            .byte	$FC
05266 11EB                        66            .byte	$66
05267 11EC                        66            .byte	$66
05268 11ED                        7C            .byte	$7C
05269 11EE                        6C            .byte	$6C
05270 11EF                        66            .byte	$66
05271 11F0                        E6            .byte	$E6
05272 11F1                        00            .byte	0
05273                                           ! 971  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 11F2                        78            .byte	$78
05275 11F3                        CC            .byte	$CC
05276 11F4                        E0            .byte	$E0
05277 11F5                        70            .byte	$70
05278 11F6                        1C            .byte	$1C
05279 11F7                        CC            .byte	$CC
05280 11F8                        78            .byte	$78
05281 11F9                        00            .byte	0
05282                                           ! 972  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 11FA                        FC            .byte	$FC
05284 11FB                        B4            .byte	$B4
05285 11FC                        30            .byte	$30
05286 11FD                        30            .byte	$30
05287 11FE                        30            .byte	$30
05288 11FF                        30            .byte	$30
05289 1200                        78            .byte	$78
05290 1201                        00            .byte	0
05291                                           ! 973  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1202                        CC            .byte	$CC
05293 1203                        CC            .byte	$CC
05294 1204                        CC            .byte	$CC
05295 1205                        CC            .byte	$CC
05296 1206                        CC            .byte	$CC
05297 1207                        CC            .byte	$CC
05298 1208                        FC            .byte	$FC
05299 1209                        00            .byte	0
05300                                           ! 974  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 120A                        CC            .byte	$CC
05302 120B                        CC            .byte	$CC
05303 120C                        CC            .byte	$CC
05304 120D                        CC            .byte	$CC
05305 120E                        CC            .byte	$CC
05306 120F                        78            .byte	$78
05307 1210                        30            .byte	$30
05308 1211                        00            .byte	0
05309                                           ! 975  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1212                        C6            .byte	$C6
05311 1213                        C6            .byte	$C6
05312 1214                        C6            .byte	$C6
05313 1215                        D6            .byte	$D6
05314 1216                        FE            .byte	$FE
05315 1217                        EE            .byte	$EE
05316 1218                        C6            .byte	$C6
05317 1219                        00            .byte	0
05318                                           ! 976  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 121A                        C6            .byte	$C6
05320 121B                        C6            .byte	$C6
05321 121C                        6C            .byte	$6C
05322 121D                        38            .byte	$38
05323 121E                        38            .byte	$38
05324 121F                        6C            .byte	$6C
05325 1220                        C6            .byte	$C6
05326 1221                        00            .byte	0
05327                                           ! 977  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1222                        CC            .byte	$CC
05329 1223                        CC            .byte	$CC
05330 1224                        CC            .byte	$CC
05331 1225                        78            .byte	$78
05332 1226                        30            .byte	$30
05333 1227                        30            .byte	$30
05334 1228                        78            .byte	$78
05335 1229                        00            .byte	0
05336                                           ! 978  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 122A                        FE            .byte	$FE
05338 122B                        C6            .byte	$C6
05339 122C                        8C            .byte	$8C
05340 122D                        18            .byte	$18
05341 122E                        32            .byte	$32
05342 122F                        66            .byte	$66
05343 1230                        FE            .byte	$FE
05344 1231                        00            .byte	0
05345                                           ! 979  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1232                        78            .byte	$78
05347 1233                        60            .byte	$60
05348 1234                        60            .byte	$60
05349 1235                        60            .byte	$60
05350 1236                        60            .byte	$60
05351 1237                        60            .byte	$60
05352 1238                        78            .byte	$78
05353 1239                        00            .byte	0
05354                                           ! 980  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 123A                        C0            .byte	$C0
05356 123B                        60            .byte	$60
05357 123C                        30            .byte	$30
05358 123D                        18            .byte	$18
05359 123E                        0C            .byte	$C
05360 123F                        06            .byte	6
05361 1240                        02            .byte	2
05362 1241                        00            .byte	0
05363                                           ! 981  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1242                        78            .byte	$78
05365 1243                        18            .byte	$18
05366 1244                        18            .byte	$18
05367 1245                        18            .byte	$18
05368 1246                        18            .byte	$18
05369 1247                        18            .byte	$18
05370 1248                        78            .byte	$78
05371 1249                        00            .byte	0
05372                                           ! 982  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 124A                        10            .byte	$10
05374 124B                        38            .byte	$38
05375 124C                        6C            .byte	$6C
05376 124D                        C6            .byte	$C6
05377 124E                        00            .byte	0
05378 124F                        00            .byte	0
05379 1250                        00            .byte	0
05380 1251                        00            .byte	0
05381                                           ! 983  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1252                        00            .byte	0
05383 1253                        00            .byte	0
05384 1254                        00            .byte	0
05385 1255                        00            .byte	0
05386 1256                        00            .byte	0
05387 1257                        00            .byte	0
05388 1258                        00            .byte	0
05389 1259                        FF            .byte	$FF
05390                                           ! 984  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 125A                        30            .byte	$30
05392 125B                        30            .byte	$30
05393 125C                        18            .byte	$18
05394 125D                        00            .byte	0
05395 125E                        00            .byte	0
05396 125F                        00            .byte	0
05397 1260                        00            .byte	0
05398 1261                        00            .byte	0
05399                                           ! 985  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05400 1262                        00            .byte	0
05401 1263                        00            .byte	0
05402 1264                        78            .byte	$78
05403 1265                        0C            .byte	$C
05404 1266                        7C            .byte	$7C
05405 1267                        CC            .byte	$CC
05406 1268                        76            .byte	$76
05407 1269                        00            .byte	0
05408                                           ! 986  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05409 126A                        E0            .byte	$E0
05410 126B                        60            .byte	$60
05411 126C                        60            .byte	$60
05412 126D                        7C            .byte	$7C
05413 126E                        66            .byte	$66
05414 126F                        66            .byte	$66
05415 1270                        DC            .byte	$DC
05416 1271                        00            .byte	0
05417                                           ! 987  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 
05418 1272                        00            .byte	0
05419 1273                        00            .byte	0
05420 1274                        78            .byte	$78
05421 1275                        CC            .byte	$CC
05422 1276                        C0            .byte	$C0
05423 1277                        CC            .byte	$CC
05424                                           ! 987 0x78, 0x00,
05425 1278                        78            .byte	$78
05426 1279                        00            .byte	0
05427                                           ! 988  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 127A                        1C            .byte	$1C
05429 127B                        0C            .byte	$C
05430 127C                        0C            .byte	$C
05431 127D                        7C            .byte	$7C
05432 127E                        CC            .byte	$CC
05433 127F                        CC            .byte	$CC
05434 1280                        76            .byte	$76
05435 1281                        00            .byte	0
05436                                           ! 989  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1282                        00            .byte	0
05438 1283                        00            .byte	0
05439 1284                        78            .byte	$78
05440 1285                        CC            .byte	$CC
05441 1286                        FC            .byte	$FC
05442 1287                        C0            .byte	$C0
05443 1288                        78            .byte	$78
05444 1289                        00            .byte	0
05445                                           ! 990  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 128A                        38            .byte	$38
05447 128B                        6C            .byte	$6C
05448 128C                        60            .byte	$60
05449 128D                        F0            .byte	$F0
05450 128E                        60            .byte	$60
05451 128F                        60            .byte	$60
05452 1290                        F0            .byte	$F0
05453 1291                        00            .byte	0
05454                                           ! 991  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 1292                        00            .byte	0
05456 1293                        00            .byte	0
05457 1294                        76            .byte	$76
05458 1295                        CC            .byte	$CC
05459 1296                        CC            .byte	$CC
05460 1297                        7C            .byte	$7C
05461 1298                        0C            .byte	$C
05462 1299                        F8            .byte	$F8
05463                                           ! 992  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 129A                        E0            .byte	$E0
05465 129B                        60            .byte	$60
05466 129C                        6C            .byte	$6C
05467 129D                        76            .byte	$76
05468 129E                        66            .byte	$66
05469 129F                        66            .byte	$66
05470 12A0                        E6            .byte	$E6
05471 12A1                        00            .byte	0
05472                                           ! 993  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12A2                        30            .byte	$30
05474 12A3                        00            .byte	0
05475 12A4                        70            .byte	$70
05476 12A5                        30            .byte	$30
05477 12A6                        30            .byte	$30
05478 12A7                        30            .byte	$30
05479 12A8                        78            .byte	$78
05480 12A9                        00            .byte	0
05481                                           ! 994  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12AA                        0C            .byte	$C
05483 12AB                        00            .byte	0
05484 12AC                        0C            .byte	$C
05485 12AD                        0C            .byte	$C
05486 12AE                        0C            .byte	$C
05487 12AF                        CC            .byte	$CC
05488 12B0                        CC            .byte	$CC
05489 12B1                        78            .byte	$78
05490                                           ! 995  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12B2                        E0            .byte	$E0
05492 12B3                        60            .byte	$60
05493 12B4                        66            .byte	$66
05494 12B5                        6C            .byte	$6C
05495 12B6                        78            .byte	$78
05496 12B7                        6C            .byte	$6C
05497 12B8                        E6            .byte	$E6
05498 12B9                        00            .byte	0
05499                                           ! 996  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12BA                        70            .byte	$70
05501 12BB                        30            .byte	$30
05502 12BC                        30            .byte	$30
05503 12BD                        30            .byte	$30
05504 12BE                        30            .byte	$30
05505 12BF                        30            .byte	$30
05506 12C0                        78            .byte	$78
05507 12C1                        00            .byte	0
05508                                           ! 997  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12C2                        00            .byte	0
05510 12C3                        00            .byte	0
05511 12C4                        CC            .byte	$CC
05512 12C5                        FE            .byte	$FE
05513 12C6                        FE            .byte	$FE
05514 12C7                        D6            .byte	$D6
05515 12C8                        C6            .byte	$C6
05516 12C9                        00            .byte	0
05517                                           ! 998  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12CA                        00            .byte	0
05519 12CB                        00            .byte	0
05520 12CC                        F8            .byte	$F8
05521 12CD                        CC            .byte	$CC
05522 12CE                        CC            .byte	$CC
05523 12CF                        CC            .byte	$CC
05524 12D0                        CC            .byte	$CC
05525 12D1                        00            .byte	0
05526                                           ! 999  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12D2                        00            .byte	0
05528 12D3                        00            .byte	0
05529 12D4                        78            .byte	$78
05530 12D5                        CC            .byte	$CC
05531 12D6                        CC            .byte	$CC
05532 12D7                        CC            .byte	$CC
05533 12D8                        78            .byte	$78
05534 12D9                        00            .byte	0
05535                                           ! 1000  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12DA                        00            .byte	0
05537 12DB                        00            .byte	0
05538 12DC                        DC            .byte	$DC
05539 12DD                        66            .byte	$66
05540 12DE                        66            .byte	$66
05541 12DF                        7C            .byte	$7C
05542 12E0                        60            .byte	$60
05543 12E1                        F0            .byte	$F0
05544                                           ! 1001  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12E2                        00            .byte	0
05546 12E3                        00            .byte	0
05547 12E4                        76            .byte	$76
05548 12E5                        CC            .byte	$CC
05549 12E6                        CC            .byte	$CC
05550 12E7                        7C            .byte	$7C
05551 12E8                        0C            .byte	$C
05552 12E9                        1E            .byte	$1E
05553                                           ! 1002  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12EA                        00            .byte	0
05555 12EB                        00            .byte	0
05556 12EC                        DC            .byte	$DC
05557 12ED                        76            .byte	$76
05558 12EE                        66            .byte	$66
05559 12EF                        60            .byte	$60
05560 12F0                        F0            .byte	$F0
05561 12F1                        00            .byte	0
05562                                           ! 1003  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 12F2                        00            .byte	0
05564 12F3                        00            .byte	0
05565 12F4                        7C            .byte	$7C
05566 12F5                        C0            .byte	$C0
05567 12F6                        78            .byte	$78
05568 12F7                        0C            .byte	$C
05569 12F8                        F8            .byte	$F8
05570 12F9                        00            .byte	0
05571                                           ! 1004  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 12FA                        10            .byte	$10
05573 12FB                        30            .byte	$30
05574 12FC                        7C            .byte	$7C
05575 12FD                        30            .byte	$30
05576 12FE                        30            .byte	$30
05577 12FF                        34            .byte	$34
05578 1300                        18            .byte	$18
05579 1301                        00            .byte	0
05580                                           ! 1005  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1302                        00            .byte	0
05582 1303                        00            .byte	0
05583 1304                        CC            .byte	$CC
05584 1305                        CC            .byte	$CC
05585 1306                        CC            .byte	$CC
05586 1307                        CC            .byte	$CC
05587 1308                        76            .byte	$76
05588 1309                        00            .byte	0
05589                                           ! 1006  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 130A                        00            .byte	0
05591 130B                        00            .byte	0
05592 130C                        CC            .byte	$CC
05593 130D                        CC            .byte	$CC
05594 130E                        CC            .byte	$CC
05595 130F                        78            .byte	$78
05596 1310                        30            .byte	$30
05597 1311                        00            .byte	0
05598                                           ! 1007  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1312                        00            .byte	0
05600 1313                        00            .byte	0
05601 1314                        C6            .byte	$C6
05602 1315                        D6            .byte	$D6
05603 1316                        FE            .byte	$FE
05604 1317                        FE            .byte	$FE
05605 1318                        6C            .byte	$6C
05606 1319                        00            .byte	0
05607                                           ! 1008  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 131A                        00            .byte	0
05609 131B                        00            .byte	0
05610 131C                        C6            .byte	$C6
05611 131D                        6C            .byte	$6C
05612 131E                        38            .byte	$38
05613 131F                        6C            .byte	$6C
05614 1320                        C6            .byte	$C6
05615 1321                        00            .byte	0
05616                                           ! 1009  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1322                        00            .byte	0
05618 1323                        00            .byte	0
05619 1324                        CC            .byte	$CC
05620 1325                        CC            .byte	$CC
05621 1326                        CC            .byte	$CC
05622 1327                        7C            .byte	$7C
05623 1328                        0C            .byte	$C
05624 1329                        F8            .byte	$F8
05625                                           ! 1010  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 132A                        00            .byte	0
05627 132B                        00            .byte	0
05628 132C                        FC            .byte	$FC
05629 132D                        98            .byte	$98
05630 132E                        30            .byte	$30
05631 132F                        64            .byte	$64
05632 1330                        FC            .byte	$FC
05633 1331                        00            .byte	0
05634                                           ! 1011  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1332                        1C            .byte	$1C
05636 1333                        30            .byte	$30
05637 1334                        30            .byte	$30
05638 1335                        E0            .byte	$E0
05639 1336                        30            .byte	$30
05640 1337                        30            .byte	$30
05641 1338                        1C            .byte	$1C
05642 1339                        00            .byte	0
05643                                           ! 1012  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 133A                        18            .byte	$18
05645 133B                        18            .byte	$18
05646 133C                        18            .byte	$18
05647 133D                        00            .byte	0
05648 133E                        18            .byte	$18
05649 133F                        18            .byte	$18
05650 1340                        18            .byte	$18
05651 1341                        00            .byte	0
05652                                           ! 1013  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1342                        E0            .byte	$E0
05654 1343                        30            .byte	$30
05655 1344                        30            .byte	$30
05656 1345                        1C            .byte	$1C
05657 1346                        30            .byte	$30
05658 1347                        30            .byte	$30
05659 1348                        E0            .byte	$E0
05660 1349                        00            .byte	0
05661                                           ! 1014  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 134A                        76            .byte	$76
05663 134B                        DC            .byte	$DC
05664 134C                        00            .byte	0
05665 134D                        00            .byte	0
05666 134E                        00            .byte	0
05667 134F                        00            .byte	0
05668 1350                        00            .byte	0
05669 1351                        00            .byte	0
05670                                           ! 1015  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1352                        00            .byte	0
05672 1353                        10            .byte	$10
05673 1354                        38            .byte	$38
05674 1355                        6C            .byte	$6C
05675 1356                        C6            .byte	$C6
05676 1357                        C6            .byte	$C6
05677 1358                        FE            .byte	$FE
05678 1359                        00            .byte	0
05679                                           ! 1016  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 135A                        78            .byte	$78
05681 135B                        CC            .byte	$CC
05682 135C                        C0            .byte	$C0
05683 135D                        CC            .byte	$CC
05684 135E                        78            .byte	$78
05685 135F                        18            .byte	$18
05686 1360                        0C            .byte	$C
05687 1361                        78            .byte	$78
05688                                           ! 1017  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1362                        00            .byte	0
05690 1363                        CC            .byte	$CC
05691 1364                        00            .byte	0
05692 1365                        CC            .byte	$CC
05693 1366                        CC            .byte	$CC
05694 1367                        CC            .byte	$CC
05695 1368                        7E            .byte	$7E
05696 1369                        00            .byte	0
05697                                           ! 1018  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 136A                        1C            .byte	$1C
05699 136B                        00            .byte	0
05700 136C                        78            .byte	$78
05701 136D                        CC            .byte	$CC
05702 136E                        FC            .byte	$FC
05703 136F                        C0            .byte	$C0
05704 1370                        78            .byte	$78
05705 1371                        00            .byte	0
05706                                           ! 1019  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1372                        7E            .byte	$7E
05708 1373                        C3            .byte	$C3
05709 1374                        3C            .byte	$3C
05710 1375                        06            .byte	6
05711 1376                        3E            .byte	$3E
05712 1377                        66            .byte	$66
05713 1378                        3F            .byte	$3F
05714 1379                        00            .byte	0
05715                                           ! 1020  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 137A                        CC            .byte	$CC
05717 137B                        00            .byte	0
05718 137C                        78            .byte	$78
05719 137D                        0C            .byte	$C
05720 137E                        7C            .byte	$7C
05721 137F                        CC            .byte	$CC
05722 1380                        7E            .byte	$7E
05723 1381                        00            .byte	0
05724                                           ! 1021  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1382                        E0            .byte	$E0
05726 1383                        00            .byte	0
05727 1384                        78            .byte	$78
05728 1385                        0C            .byte	$C
05729 1386                        7C            .byte	$7C
05730 1387                        CC            .byte	$CC
05731 1388                        7E            .byte	$7E
05732 1389                        00            .byte	0
05733                                           ! 1022  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 138A                        30            .byte	$30
05735 138B                        30            .byte	$30
05736 138C                        78            .byte	$78
05737 138D                        0C            .byte	$C
05738 138E                        7C            .byte	$7C
05739 138F                        CC            .byte	$CC
05740 1390                        7E            .byte	$7E
05741 1391                        00            .byte	0
05742                                           ! 1023  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 1392                        00            .byte	0
05744 1393                        00            .byte	0
05745 1394                        78            .byte	$78
05746 1395                        C0            .byte	$C0
05747 1396                        C0            .byte	$C0
05748 1397                        78            .byte	$78
05749 1398                        0C            .byte	$C
05750 1399                        38            .byte	$38
05751                                           ! 1024  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 139A                        7E            .byte	$7E
05753 139B                        C3            .byte	$C3
05754 139C                        3C            .byte	$3C
05755 139D                        66            .byte	$66
05756 139E                        7E            .byte	$7E
05757 139F                        60            .byte	$60
05758 13A0                        3C            .byte	$3C
05759 13A1                        00            .byte	0
05760                                           ! 1025  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13A2                        CC            .byte	$CC
05762 13A3                        00            .byte	0
05763 13A4                        78            .byte	$78
05764 13A5                        CC            .byte	$CC
05765 13A6                        FC            .byte	$FC
05766 13A7                        C0            .byte	$C0
05767 13A8                        78            .byte	$78
05768 13A9                        00            .byte	0
05769                                           ! 1026  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13AA                        E0            .byte	$E0
05771 13AB                        00            .byte	0
05772 13AC                        78            .byte	$78
05773 13AD                        CC            .byte	$CC
05774 13AE                        FC            .byte	$FC
05775 13AF                        C0            .byte	$C0
05776 13B0                        78            .byte	$78
05777 13B1                        00            .byte	0
05778                                           ! 1027  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05779 13B2                        CC            .byte	$CC
05780 13B3                        00            .byte	0
05781 13B4                        70            .byte	$70
05782 13B5                        30            .byte	$30
05783 13B6                        30            .byte	$30
05784 13B7                        30            .byte	$30
05785 13B8                        78            .byte	$78
05786 13B9                        00            .byte	0
05787                                           ! 1028  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05788 13BA                        7C            .byte	$7C
05789 13BB                        C6            .byte	$C6
05790 13BC                        38            .byte	$38
05791 13BD                        18            .byte	$18
05792 13BE                        18            .byte	$18
05793 13BF                        18            .byte	$18
05794 13C0                        3C            .byte	$3C
05795 13C1                        00            .byte	0
05796                                           ! 1029  0xe0, 0x00, 0x70, 0x30, 0x
05797 13C2                        E0            .byte	$E0
05798 13C3                        00            .byte	0
05799 13C4                        70            .byte	$70
05800 13C5                        30            .byte	$30
05801                                           ! 1029 30, 0x30, 0x78, 0x00,
05802 13C6                        30            .byte	$30
05803 13C7                        30            .byte	$30
05804 13C8                        78            .byte	$78
05805 13C9                        00            .byte	0
05806                                           ! 1030  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13CA                        C6            .byte	$C6
05808 13CB                        38            .byte	$38
05809 13CC                        6C            .byte	$6C
05810 13CD                        C6            .byte	$C6
05811 13CE                        FE            .byte	$FE
05812 13CF                        C6            .byte	$C6
05813 13D0                        C6            .byte	$C6
05814 13D1                        00            .byte	0
05815                                           ! 1031  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13D2                        30            .byte	$30
05817 13D3                        30            .byte	$30
05818 13D4                        00            .byte	0
05819 13D5                        78            .byte	$78
05820 13D6                        CC            .byte	$CC
05821 13D7                        FC            .byte	$FC
05822 13D8                        CC            .byte	$CC
05823 13D9                        00            .byte	0
05824                                           ! 1032  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13DA                        1C            .byte	$1C
05826 13DB                        00            .byte	0
05827 13DC                        FC            .byte	$FC
05828 13DD                        60            .byte	$60
05829 13DE                        78            .byte	$78
05830 13DF                        60            .byte	$60
05831 13E0                        FC            .byte	$FC
05832 13E1                        00            .byte	0
05833                                           ! 1033  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13E2                        00            .byte	0
05835 13E3                        00            .byte	0
05836 13E4                        7F            .byte	$7F
05837 13E5                        0C            .byte	$C
05838 13E6                        7F            .byte	$7F
05839 13E7                        CC            .byte	$CC
05840 13E8                        7F            .byte	$7F
05841 13E9                        00            .byte	0
05842                                           ! 1034  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13EA                        3E            .byte	$3E
05844 13EB                        6C            .byte	$6C
05845 13EC                        CC            .byte	$CC
05846 13ED                        FE            .byte	$FE
05847 13EE                        CC            .byte	$CC
05848 13EF                        CC            .byte	$CC
05849 13F0                        CE            .byte	$CE
05850 13F1                        00            .byte	0
05851                                           ! 1035  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 13F2                        78            .byte	$78
05853 13F3                        CC            .byte	$CC
05854 13F4                        00            .byte	0
05855 13F5                        78            .byte	$78
05856 13F6                        CC            .byte	$CC
05857 13F7                        CC            .byte	$CC
05858 13F8                        78            .byte	$78
05859 13F9                        00            .byte	0
05860                                           ! 1036  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 13FA                        00            .byte	0
05862 13FB                        CC            .byte	$CC
05863 13FC                        00            .byte	0
05864 13FD                        78            .byte	$78
05865 13FE                        CC            .byte	$CC
05866 13FF                        CC            .byte	$CC
05867 1400                        78            .byte	$78
05868 1401                        00            .byte	0
05869                                           ! 1037  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1402                        00            .byte	0
05871 1403                        E0            .byte	$E0
05872 1404                        00            .byte	0
05873 1405                        78            .byte	$78
05874 1406                        CC            .byte	$CC
05875 1407                        CC            .byte	$CC
05876 1408                        78            .byte	$78
05877 1409                        00            .byte	0
05878                                           ! 1038  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 140A                        78            .byte	$78
05880 140B                        CC            .byte	$CC
05881 140C                        00            .byte	0
05882 140D                        CC            .byte	$CC
05883 140E                        CC            .byte	$CC
05884 140F                        CC            .byte	$CC
05885 1410                        7E            .byte	$7E
05886 1411                        00            .byte	0
05887                                           ! 1039  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1412                        00            .byte	0
05889 1413                        E0            .byte	$E0
05890 1414                        00            .byte	0
05891 1415                        CC            .byte	$CC
05892 1416                        CC            .byte	$CC
05893 1417                        CC            .byte	$CC
05894 1418                        7E            .byte	$7E
05895 1419                        00            .byte	0
05896                                           ! 1040  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 141A                        00            .byte	0
05898 141B                        CC            .byte	$CC
05899 141C                        00            .byte	0
05900 141D                        CC            .byte	$CC
05901 141E                        CC            .byte	$CC
05902 141F                        7C            .byte	$7C
05903 1420                        0C            .byte	$C
05904 1421                        F8            .byte	$F8
05905                                           ! 1041  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1422                        C3            .byte	$C3
05907 1423                        18            .byte	$18
05908 1424                        3C            .byte	$3C
05909 1425                        66            .byte	$66
05910 1426                        66            .byte	$66
05911 1427                        3C            .byte	$3C
05912 1428                        18            .byte	$18
05913 1429                        00            .byte	0
05914                                           ! 1042  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 142A                        CC            .byte	$CC
05916 142B                        00            .byte	0
05917 142C                        CC            .byte	$CC
05918 142D                        CC            .byte	$CC
05919 142E                        CC            .byte	$CC
05920 142F                        CC            .byte	$CC
05921 1430                        78            .byte	$78
05922 1431                        00            .byte	0
05923                                           ! 1043  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1432                        18            .byte	$18
05925 1433                        18            .byte	$18
05926 1434                        7E            .byte	$7E
05927 1435                        C0            .byte	$C0
05928 1436                        C0            .byte	$C0
05929 1437                        7E            .byte	$7E
05930 1438                        18            .byte	$18
05931 1439                        18            .byte	$18
05932                                           ! 1044  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 143A                        38            .byte	$38
05934 143B                        6C            .byte	$6C
05935 143C                        64            .byte	$64
05936 143D                        F0            .byte	$F0
05937 143E                        60            .byte	$60
05938 143F                        E6            .byte	$E6
05939 1440                        FC            .byte	$FC
05940 1441                        00            .byte	0
05941                                           ! 1045  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1442                        CC            .byte	$CC
05943 1443                        CC            .byte	$CC
05944 1444                        78            .byte	$78
05945 1445                        FC            .byte	$FC
05946 1446                        30            .byte	$30
05947 1447                        FC            .byte	$FC
05948 1448                        30            .byte	$30
05949 1449                        30            .byte	$30
05950                                           ! 1046  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 144A                        F8            .byte	$F8
05952 144B                        CC            .byte	$CC
05953 144C                        CC            .byte	$CC
05954 144D                        FA            .byte	$FA
05955 144E                        C6            .byte	$C6
05956 144F                        CF            .byte	$CF
05957 1450                        C6            .byte	$C6
05958 1451                        C7            .byte	$C7
05959                                           ! 1047  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1452                        0E            .byte	$E
05961 1453                        1B            .byte	$1B
05962 1454                        18            .byte	$18
05963 1455                        3C            .byte	$3C
05964 1456                        18            .byte	$18
05965 1457                        18            .byte	$18
05966 1458                        D8            .byte	$D8
05967 1459                        70            .byte	$70
05968                                           ! 1048  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 145A                        1C            .byte	$1C
05970 145B                        00            .byte	0
05971 145C                        78            .byte	$78
05972 145D                        0C            .byte	$C
05973 145E                        7C            .byte	$7C
05974 145F                        CC            .byte	$CC
05975 1460                        7E            .byte	$7E
05976 1461                        00            .byte	0
05977                                           ! 1049  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1462                        38            .byte	$38
05979 1463                        00            .byte	0
05980 1464                        70            .byte	$70
05981 1465                        30            .byte	$30
05982 1466                        30            .byte	$30
05983 1467                        30            .byte	$30
05984 1468                        78            .byte	$78
05985 1469                        00            .byte	0
05986                                           ! 1050  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 146A                        00            .byte	0
05988 146B                        1C            .byte	$1C
05989 146C                        00            .byte	0
05990 146D                        78            .byte	$78
05991 146E                        CC            .byte	$CC
05992 146F                        CC            .byte	$CC
05993 1470                        78            .byte	$78
05994 1471                        00            .byte	0
05995                                           ! 1051  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1472                        00            .byte	0
05997 1473                        1C            .byte	$1C
05998 1474                        00            .byte	0
05999 1475                        CC            .byte	$CC
06000 1476                        CC            .byte	$CC
06001 1477                        CC            .byte	$CC
06002 1478                        7E            .byte	$7E
06003 1479                        00            .byte	0
06004                                           ! 1052  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 147A                        00            .byte	0
06006 147B                        F8            .byte	$F8
06007 147C                        00            .byte	0
06008 147D                        F8            .byte	$F8
06009 147E                        CC            .byte	$CC
06010 147F                        CC            .byte	$CC
06011 1480                        CC            .byte	$CC
06012 1481                        00            .byte	0
06013                                           ! 1053  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1482                        FC            .byte	$FC
06015 1483                        00            .byte	0
06016 1484                        CC            .byte	$CC
06017 1485                        EC            .byte	$EC
06018 1486                        FC            .byte	$FC
06019 1487                        DC            .byte	$DC
06020 1488                        CC            .byte	$CC
06021 1489                        00            .byte	0
06022                                           ! 1054  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 148A                        3C            .byte	$3C
06024 148B                        6C            .byte	$6C
06025 148C                        6C            .byte	$6C
06026 148D                        3E            .byte	$3E
06027 148E                        00            .byte	0
06028 148F                        7E            .byte	$7E
06029 1490                        00            .byte	0
06030 1491                        00            .byte	0
06031                                           ! 1055  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 1492                        38            .byte	$38
06033 1493                        6C            .byte	$6C
06034 1494                        6C            .byte	$6C
06035 1495                        38            .byte	$38
06036 1496                        00            .byte	0
06037 1497                        7C            .byte	$7C
06038 1498                        00            .byte	0
06039 1499                        00            .byte	0
06040                                           ! 1056  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 149A                        30            .byte	$30
06042 149B                        00            .byte	0
06043 149C                        30            .byte	$30
06044 149D                        60            .byte	$60
06045 149E                        C0            .byte	$C0
06046 149F                        CC            .byte	$CC
06047 14A0                        78            .byte	$78
06048 14A1                        00            .byte	0
06049                                           ! 1057  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14A2                        00            .byte	0
06051 14A3                        00            .byte	0
06052 14A4                        00            .byte	0
06053 14A5                        FC            .byte	$FC
06054 14A6                        C0            .byte	$C0
06055 14A7                        C0            .byte	$C0
06056 14A8                        00            .byte	0
06057 14A9                        00            .byte	0
06058                                           ! 1058  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14AA                        00            .byte	0
06060 14AB                        00            .byte	0
06061 14AC                        00            .byte	0
06062 14AD                        FC            .byte	$FC
06063 14AE                        0C            .byte	$C
06064 14AF                        0C            .byte	$C
06065 14B0                        00            .byte	0
06066 14B1                        00            .byte	0
06067                                           ! 1059  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14B2                        C3            .byte	$C3
06069 14B3                        C6            .byte	$C6
06070 14B4                        CC            .byte	$CC
06071 14B5                        DE            .byte	$DE
06072 14B6                        33            .byte	$33
06073 14B7                        66            .byte	$66
06074 14B8                        CC            .byte	$CC
06075 14B9                        0F            .byte	$F
06076                                           ! 1060  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14BA                        C3            .byte	$C3
06078 14BB                        C6            .byte	$C6
06079 14BC                        CC            .byte	$CC
06080 14BD                        DB            .byte	$DB
06081 14BE                        37            .byte	$37
06082 14BF                        6F            .byte	$6F
06083 14C0                        CF            .byte	$CF
06084 14C1                        03            .byte	3
06085                                           ! 1061  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14C2                        18            .byte	$18
06087 14C3                        18            .byte	$18
06088 14C4                        00            .byte	0
06089 14C5                        18            .byte	$18
06090 14C6                        18            .byte	$18
06091 14C7                        18            .byte	$18
06092 14C8                        18            .byte	$18
06093 14C9                        00            .byte	0
06094                                           ! 1062  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14CA                        00            .byte	0
06096 14CB                        33            .byte	$33
06097 14CC                        66            .byte	$66
06098 14CD                        CC            .byte	$CC
06099 14CE                        66            .byte	$66
06100 14CF                        33            .byte	$33
06101 14D0                        00            .byte	0
06102 14D1                        00            .byte	0
06103                                           ! 1063  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14D2                        00            .byte	0
06105 14D3                        CC            .byte	$CC
06106 14D4                        66            .byte	$66
06107 14D5                        33            .byte	$33
06108 14D6                        66            .byte	$66
06109 14D7                        CC            .byte	$CC
06110 14D8                        00            .byte	0
06111 14D9                        00            .byte	0
06112                                           ! 1064  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14DA                        22            .byte	$22
06114 14DB                        88            .byte	$88
06115 14DC                        22            .byte	$22
06116 14DD                        88            .byte	$88
06117 14DE                        22            .byte	$22
06118 14DF                        88            .byte	$88
06119 14E0                        22            .byte	$22
06120 14E1                        88            .byte	$88
06121                                           ! 1065  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14E2                        55            .byte	$55
06123 14E3                        AA            .byte	$AA
06124 14E4                        55            .byte	$55
06125 14E5                        AA            .byte	$AA
06126 14E6                        55            .byte	$55
06127 14E7                        AA            .byte	$AA
06128 14E8                        55            .byte	$55
06129 14E9                        AA            .byte	$AA
06130                                           ! 1066  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14EA                        DB            .byte	$DB
06132 14EB                        77            .byte	$77
06133 14EC                        DB            .byte	$DB
06134 14ED                        EE            .byte	$EE
06135 14EE                        DB            .byte	$DB
06136 14EF                        77            .byte	$77
06137 14F0                        DB            .byte	$DB
06138 14F1                        EE            .byte	$EE
06139                                           ! 1067  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 14F2                        18            .byte	$18
06141 14F3                        18            .byte	$18
06142 14F4                        18            .byte	$18
06143 14F5                        18            .byte	$18
06144 14F6                        18            .byte	$18
06145 14F7                        18            .byte	$18
06146 14F8                        18            .byte	$18
06147 14F9                        18            .byte	$18
06148                                           ! 1068  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 14FA                        18            .byte	$18
06150 14FB                        18            .byte	$18
06151 14FC                        18            .byte	$18
06152 14FD                        18            .byte	$18
06153 14FE                        F8            .byte	$F8
06154 14FF                        18            .byte	$18
06155 1500                        18            .byte	$18
06156 1501                        18            .byte	$18
06157                                           ! 1069  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06158 1502                        18            .byte	$18
06159 1503                        18            .byte	$18
06160 1504                        F8            .byte	$F8
06161 1505                        18            .byte	$18
06162 1506                        F8            .byte	$F8
06163 1507                        18            .byte	$18
06164 1508                        18            .byte	$18
06165 1509                        18            .byte	$18
06166                                           ! 1070  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06167 150A                        36            .byte	$36
06168 150B                        36            .byte	$36
06169 150C                        36            .byte	$36
06170 150D                        36            .byte	$36
06171 150E                        F6            .byte	$F6
06172 150F                        36            .byte	$36
06173 1510                        36            .byte	$36
06174 1511                        36            .byte	$36
06175                                           ! 1071  0x00, 0x00, 0x00
06176 1512                        00            .byte	0
06177 1513                        00            .byte	0
06178                                           ! 1071 , 0x00, 0xfe, 0x36, 0x36, 0x36,
06179 1514                        00            .byte	0
06180 1515                        00            .byte	0
06181 1516                        FE            .byte	$FE
06182 1517                        36            .byte	$36
06183 1518                        36            .byte	$36
06184 1519                        36            .byte	$36
06185                                           ! 1072  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 151A                        00            .byte	0
06187 151B                        00            .byte	0
06188 151C                        F8            .byte	$F8
06189 151D                        18            .byte	$18
06190 151E                        F8            .byte	$F8
06191 151F                        18            .byte	$18
06192 1520                        18            .byte	$18
06193 1521                        18            .byte	$18
06194                                           ! 1073  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1522                        36            .byte	$36
06196 1523                        36            .byte	$36
06197 1524                        F6            .byte	$F6
06198 1525                        06            .byte	6
06199 1526                        F6            .byte	$F6
06200 1527                        36            .byte	$36
06201 1528                        36            .byte	$36
06202 1529                        36            .byte	$36
06203                                           ! 1074  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 152A                        36            .byte	$36
06205 152B                        36            .byte	$36
06206 152C                        36            .byte	$36
06207 152D                        36            .byte	$36
06208 152E                        36            .byte	$36
06209 152F                        36            .byte	$36
06210 1530                        36            .byte	$36
06211 1531                        36            .byte	$36
06212                                           ! 1075  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1532                        00            .byte	0
06214 1533                        00            .byte	0
06215 1534                        FE            .byte	$FE
06216 1535                        06            .byte	6
06217 1536                        F6            .byte	$F6
06218 1537                        36            .byte	$36
06219 1538                        36            .byte	$36
06220 1539                        36            .byte	$36
06221                                           ! 1076  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 153A                        36            .byte	$36
06223 153B                        36            .byte	$36
06224 153C                        F6            .byte	$F6
06225 153D                        06            .byte	6
06226 153E                        FE            .byte	$FE
06227 153F                        00            .byte	0
06228 1540                        00            .byte	0
06229 1541                        00            .byte	0
06230                                           ! 1077  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1542                        36            .byte	$36
06232 1543                        36            .byte	$36
06233 1544                        36            .byte	$36
06234 1545                        36            .byte	$36
06235 1546                        FE            .byte	$FE
06236 1547                        00            .byte	0
06237 1548                        00            .byte	0
06238 1549                        00            .byte	0
06239                                           ! 1078  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 154A                        18            .byte	$18
06241 154B                        18            .byte	$18
06242 154C                        F8            .byte	$F8
06243 154D                        18            .byte	$18
06244 154E                        F8            .byte	$F8
06245 154F                        00            .byte	0
06246 1550                        00            .byte	0
06247 1551                        00            .byte	0
06248                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1552                        00            .byte	0
06250 1553                        00            .byte	0
06251 1554                        00            .byte	0
06252 1555                        00            .byte	0
06253 1556                        F8            .byte	$F8
06254 1557                        18            .byte	$18
06255 1558                        18            .byte	$18
06256 1559                        18            .byte	$18
06257                                           ! 1080  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 155A                        18            .byte	$18
06259 155B                        18            .byte	$18
06260 155C                        18            .byte	$18
06261 155D                        18            .byte	$18
06262 155E                        1F            .byte	$1F
06263 155F                        00            .byte	0
06264 1560                        00            .byte	0
06265 1561                        00            .byte	0
06266                                           ! 1081  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1562                        18            .byte	$18
06268 1563                        18            .byte	$18
06269 1564                        18            .byte	$18
06270 1565                        18            .byte	$18
06271 1566                        FF            .byte	$FF
06272 1567                        00            .byte	0
06273 1568                        00            .byte	0
06274 1569                        00            .byte	0
06275                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 156A                        00            .byte	0
06277 156B                        00            .byte	0
06278 156C                        00            .byte	0
06279 156D                        00            .byte	0
06280 156E                        FF            .byte	$FF
06281 156F                        18            .byte	$18
06282 1570                        18            .byte	$18
06283 1571                        18            .byte	$18
06284                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1572                        18            .byte	$18
06286 1573                        18            .byte	$18
06287 1574                        18            .byte	$18
06288 1575                        18            .byte	$18
06289 1576                        1F            .byte	$1F
06290 1577                        18            .byte	$18
06291 1578                        18            .byte	$18
06292 1579                        18            .byte	$18
06293                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 157A                        00            .byte	0
06295 157B                        00            .byte	0
06296 157C                        00            .byte	0
06297 157D                        00            .byte	0
06298 157E                        FF            .byte	$FF
06299 157F                        00            .byte	0
06300 1580                        00            .byte	0
06301 1581                        00            .byte	0
06302                                           ! 1085  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1582                        18            .byte	$18
06304 1583                        18            .byte	$18
06305 1584                        18            .byte	$18
06306 1585                        18            .byte	$18
06307 1586                        FF            .byte	$FF
06308 1587                        18            .byte	$18
06309 1588                        18            .byte	$18
06310 1589                        18            .byte	$18
06311                                           ! 1086  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 158A                        18            .byte	$18
06313 158B                        18            .byte	$18
06314 158C                        1F            .byte	$1F
06315 158D                        18            .byte	$18
06316 158E                        1F            .byte	$1F
06317 158F                        18            .byte	$18
06318 1590                        18            .byte	$18
06319 1591                        18            .byte	$18
06320                                           ! 1087  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 1592                        36            .byte	$36
06322 1593                        36            .byte	$36
06323 1594                        36            .byte	$36
06324 1595                        36            .byte	$36
06325 1596                        37            .byte	$37
06326 1597                        36            .byte	$36
06327 1598                        36            .byte	$36
06328 1599                        36            .byte	$36
06329                                           ! 1088  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 159A                        36            .byte	$36
06331 159B                        36            .byte	$36
06332 159C                        37            .byte	$37
06333 159D                        30            .byte	$30
06334 159E                        3F            .byte	$3F
06335 159F                        00            .byte	0
06336 15A0                        00            .byte	0
06337 15A1                        00            .byte	0
06338                                           ! 1089  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15A2                        00            .byte	0
06340 15A3                        00            .byte	0
06341 15A4                        3F            .byte	$3F
06342 15A5                        30            .byte	$30
06343 15A6                        37            .byte	$37
06344 15A7                        36            .byte	$36
06345 15A8                        36            .byte	$36
06346 15A9                        36            .byte	$36
06347                                           ! 1090  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15AA                        36            .byte	$36
06349 15AB                        36            .byte	$36
06350 15AC                        F7            .byte	$F7
06351 15AD                        00            .byte	0
06352 15AE                        FF            .byte	$FF
06353 15AF                        00            .byte	0
06354 15B0                        00            .byte	0
06355 15B1                        00            .byte	0
06356                                           ! 1091  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15B2                        00            .byte	0
06358 15B3                        00            .byte	0
06359 15B4                        FF            .byte	$FF
06360 15B5                        00            .byte	0
06361 15B6                        F7            .byte	$F7
06362 15B7                        36            .byte	$36
06363 15B8                        36            .byte	$36
06364 15B9                        36            .byte	$36
06365                                           ! 1092  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15BA                        36            .byte	$36
06367 15BB                        36            .byte	$36
06368 15BC                        37            .byte	$37
06369 15BD                        30            .byte	$30
06370 15BE                        37            .byte	$37
06371 15BF                        36            .byte	$36
06372 15C0                        36            .byte	$36
06373 15C1                        36            .byte	$36
06374                                           ! 1093  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15C2                        00            .byte	0
06376 15C3                        00            .byte	0
06377 15C4                        FF            .byte	$FF
06378 15C5                        00            .byte	0
06379 15C6                        FF            .byte	$FF
06380 15C7                        00            .byte	0
06381 15C8                        00            .byte	0
06382 15C9                        00            .byte	0
06383                                           ! 1094  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15CA                        36            .byte	$36
06385 15CB                        36            .byte	$36
06386 15CC                        F7            .byte	$F7
06387 15CD                        00            .byte	0
06388 15CE                        F7            .byte	$F7
06389 15CF                        36            .byte	$36
06390 15D0                        36            .byte	$36
06391 15D1                        36            .byte	$36
06392                                           ! 1095  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15D2                        18            .byte	$18
06394 15D3                        18            .byte	$18
06395 15D4                        FF            .byte	$FF
06396 15D5                        00            .byte	0
06397 15D6                        FF            .byte	$FF
06398 15D7                        00            .byte	0
06399 15D8                        00            .byte	0
06400 15D9                        00            .byte	0
06401                                           ! 1096  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15DA                        36            .byte	$36
06403 15DB                        36            .byte	$36
06404 15DC                        36            .byte	$36
06405 15DD                        36            .byte	$36
06406 15DE                        FF            .byte	$FF
06407 15DF                        00            .byte	0
06408 15E0                        00            .byte	0
06409 15E1                        00            .byte	0
06410                                           ! 1097  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15E2                        00            .byte	0
06412 15E3                        00            .byte	0
06413 15E4                        FF            .byte	$FF
06414 15E5                        00            .byte	0
06415 15E6                        FF            .byte	$FF
06416 15E7                        18            .byte	$18
06417 15E8                        18            .byte	$18
06418 15E9                        18            .byte	$18
06419                                           ! 1098  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15EA                        00            .byte	0
06421 15EB                        00            .byte	0
06422 15EC                        00            .byte	0
06423 15ED                        00            .byte	0
06424 15EE                        FF            .byte	$FF
06425 15EF                        36            .byte	$36
06426 15F0                        36            .byte	$36
06427 15F1                        36            .byte	$36
06428                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 15F2                        36            .byte	$36
06430 15F3                        36            .byte	$36
06431 15F4                        36            .byte	$36
06432 15F5                        36            .byte	$36
06433 15F6                        3F            .byte	$3F
06434 15F7                        00            .byte	0
06435 15F8                        00            .byte	0
06436 15F9                        00            .byte	0
06437                                           ! 1100  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 15FA                        18            .byte	$18
06439 15FB                        18            .byte	$18
06440 15FC                        1F            .byte	$1F
06441 15FD                        18            .byte	$18
06442 15FE                        1F            .byte	$1F
06443 15FF                        00            .byte	0
06444 1600                        00            .byte	0
06445 1601                        00            .byte	0
06446                                           ! 1101  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1602                        00            .byte	0
06448 1603                        00            .byte	0
06449 1604                        1F            .byte	$1F
06450 1605                        18            .byte	$18
06451 1606                        1F            .byte	$1F
06452 1607                        18            .byte	$18
06453 1608                        18            .byte	$18
06454 1609                        18            .byte	$18
06455                                           ! 1102  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 160A                        00            .byte	0
06457 160B                        00            .byte	0
06458 160C                        00            .byte	0
06459 160D                        00            .byte	0
06460 160E                        3F            .byte	$3F
06461 160F                        36            .byte	$36
06462 1610                        36            .byte	$36
06463 1611                        36            .byte	$36
06464                                           ! 1103  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1612                        36            .byte	$36
06466 1613                        36            .byte	$36
06467 1614                        36            .byte	$36
06468 1615                        36            .byte	$36
06469 1616                        FF            .byte	$FF
06470 1617                        36            .byte	$36
06471 1618                        36            .byte	$36
06472 1619                        36            .byte	$36
06473                                           ! 1104  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 161A                        18            .byte	$18
06475 161B                        18            .byte	$18
06476 161C                        FF            .byte	$FF
06477 161D                        18            .byte	$18
06478 161E                        FF            .byte	$FF
06479 161F                        18            .byte	$18
06480 1620                        18            .byte	$18
06481 1621                        18            .byte	$18
06482                                           ! 1105  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1622                        18            .byte	$18
06484 1623                        18            .byte	$18
06485 1624                        18            .byte	$18
06486 1625                        18            .byte	$18
06487 1626                        F8            .byte	$F8
06488 1627                        00            .byte	0
06489 1628                        00            .byte	0
06490 1629                        00            .byte	0
06491                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 162A                        00            .byte	0
06493 162B                        00            .byte	0
06494 162C                        00            .byte	0
06495 162D                        00            .byte	0
06496 162E                        1F            .byte	$1F
06497 162F                        18            .byte	$18
06498 1630                        18            .byte	$18
06499 1631                        18            .byte	$18
06500                                           ! 1107  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1632                        FF            .byte	$FF
06502 1633                        FF            .byte	$FF
06503 1634                        FF            .byte	$FF
06504 1635                        FF            .byte	$FF
06505 1636                        FF            .byte	$FF
06506 1637                        FF            .byte	$FF
06507 1638                        FF            .byte	$FF
06508 1639                        FF            .byte	$FF
06509                                           ! 1108  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 163A                        00            .byte	0
06511 163B                        00            .byte	0
06512 163C                        00            .byte	0
06513 163D                        00            .byte	0
06514 163E                        FF            .byte	$FF
06515 163F                        FF            .byte	$FF
06516 1640                        FF            .byte	$FF
06517 1641                        FF            .byte	$FF
06518                                           ! 1109  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1642                        F0            .byte	$F0
06520 1643                        F0            .byte	$F0
06521 1644                        F0            .byte	$F0
06522 1645                        F0            .byte	$F0
06523 1646                        F0            .byte	$F0
06524 1647                        F0            .byte	$F0
06525 1648                        F0            .byte	$F0
06526 1649                        F0            .byte	$F0
06527                                           ! 1110  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06528 164A                        0F            .byte	$F
06529 164B                        0F            .byte	$F
06530 164C                        0F            .byte	$F
06531 164D                        0F            .byte	$F
06532 164E                        0F            .byte	$F
06533 164F                        0F            .byte	$F
06534 1650                        0F            .byte	$F
06535 1651                        0F            .byte	$F
06536                                           ! 1111  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06537 1652                        FF            .byte	$FF
06538 1653                        FF            .byte	$FF
06539 1654                        FF            .byte	$FF
06540 1655                        FF            .byte	$FF
06541 1656                        00            .byte	0
06542 1657                        00            .byte	0
06543 1658                        00            .byte	0
06544 1659                        00            .byte	0
06545                                           ! 1112  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06546 165A                        00            .byte	0
06547 165B                        00            .byte	0
06548 165C                        76            .byte	$76
06549 165D                        DC            .byte	$DC
06550 165E                        C8            .byte	$C8
06551 165F                        DC            .byte	$DC
06552 1660                        76            .byte	$76
06553 1661                        00            .byte	0
06554                                           ! 1113  0x00, 
06555 1662                        00            .byte	0
06556                                           ! 1113 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06557 1663                        78            .byte	$78
06558 1664                        CC            .byte	$CC
06559 1665                        F8            .byte	$F8
06560 1666                        CC            .byte	$CC
06561 1667                        F8            .byte	$F8
06562 1668                        C0            .byte	$C0
06563 1669                        C0            .byte	$C0
06564                                           ! 1114  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 166A                        00            .byte	0
06566 166B                        FC            .byte	$FC
06567 166C                        CC            .byte	$CC
06568 166D                        C0            .byte	$C0
06569 166E                        C0            .byte	$C0
06570 166F                        C0            .byte	$C0
06571 1670                        C0            .byte	$C0
06572 1671                        00            .byte	0
06573                                           ! 1115  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1672                        00            .byte	0
06575 1673                        FE            .byte	$FE
06576 1674                        6C            .byte	$6C
06577 1675                        6C            .byte	$6C
06578 1676                        6C            .byte	$6C
06579 1677                        6C            .byte	$6C
06580 1678                        6C            .byte	$6C
06581 1679                        00            .byte	0
06582                                           ! 1116  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 167A                        FC            .byte	$FC
06584 167B                        CC            .byte	$CC
06585 167C                        60            .byte	$60
06586 167D                        30            .byte	$30
06587 167E                        60            .byte	$60
06588 167F                        CC            .byte	$CC
06589 1680                        FC            .byte	$FC
06590 1681                        00            .byte	0
06591                                           ! 1117  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1682                        00            .byte	0
06593 1683                        00            .byte	0
06594 1684                        7E            .byte	$7E
06595 1685                        D8            .byte	$D8
06596 1686                        D8            .byte	$D8
06597 1687                        D8            .byte	$D8
06598 1688                        70            .byte	$70
06599 1689                        00            .byte	0
06600                                           ! 1118  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 168A                        00            .byte	0
06602 168B                        66            .byte	$66
06603 168C                        66            .byte	$66
06604 168D                        66            .byte	$66
06605 168E                        66            .byte	$66
06606 168F                        7C            .byte	$7C
06607 1690                        60            .byte	$60
06608 1691                        C0            .byte	$C0
06609                                           ! 1119  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 1692                        00            .byte	0
06611 1693                        76            .byte	$76
06612 1694                        DC            .byte	$DC
06613 1695                        18            .byte	$18
06614 1696                        18            .byte	$18
06615 1697                        18            .byte	$18
06616 1698                        18            .byte	$18
06617 1699                        00            .byte	0
06618                                           ! 1120  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 169A                        FC            .byte	$FC
06620 169B                        30            .byte	$30
06621 169C                        78            .byte	$78
06622 169D                        CC            .byte	$CC
06623 169E                        CC            .byte	$CC
06624 169F                        78            .byte	$78
06625 16A0                        30            .byte	$30
06626 16A1                        FC            .byte	$FC
06627                                           ! 1121  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16A2                        38            .byte	$38
06629 16A3                        6C            .byte	$6C
06630 16A4                        C6            .byte	$C6
06631 16A5                        FE            .byte	$FE
06632 16A6                        C6            .byte	$C6
06633 16A7                        6C            .byte	$6C
06634 16A8                        38            .byte	$38
06635 16A9                        00            .byte	0
06636                                           ! 1122  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16AA                        38            .byte	$38
06638 16AB                        6C            .byte	$6C
06639 16AC                        C6            .byte	$C6
06640 16AD                        C6            .byte	$C6
06641 16AE                        6C            .byte	$6C
06642 16AF                        6C            .byte	$6C
06643 16B0                        EE            .byte	$EE
06644 16B1                        00            .byte	0
06645                                           ! 1123  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16B2                        1C            .byte	$1C
06647 16B3                        30            .byte	$30
06648 16B4                        18            .byte	$18
06649 16B5                        7C            .byte	$7C
06650 16B6                        CC            .byte	$CC
06651 16B7                        CC            .byte	$CC
06652 16B8                        78            .byte	$78
06653 16B9                        00            .byte	0
06654                                           ! 1124  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16BA                        00            .byte	0
06656 16BB                        00            .byte	0
06657 16BC                        7E            .byte	$7E
06658 16BD                        DB            .byte	$DB
06659 16BE                        DB            .byte	$DB
06660 16BF                        7E            .byte	$7E
06661 16C0                        00            .byte	0
06662 16C1                        00            .byte	0
06663                                           ! 1125  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16C2                        06            .byte	6
06665 16C3                        0C            .byte	$C
06666 16C4                        7E            .byte	$7E
06667 16C5                        DB            .byte	$DB
06668 16C6                        DB            .byte	$DB
06669 16C7                        7E            .byte	$7E
06670 16C8                        60            .byte	$60
06671 16C9                        C0            .byte	$C0
06672                                           ! 1126  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16CA                        38            .byte	$38
06674 16CB                        60            .byte	$60
06675 16CC                        C0            .byte	$C0
06676 16CD                        F8            .byte	$F8
06677 16CE                        C0            .byte	$C0
06678 16CF                        60            .byte	$60
06679 16D0                        38            .byte	$38
06680 16D1                        00            .byte	0
06681                                           ! 1127  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16D2                        78            .byte	$78
06683 16D3                        CC            .byte	$CC
06684 16D4                        CC            .byte	$CC
06685 16D5                        CC            .byte	$CC
06686 16D6                        CC            .byte	$CC
06687 16D7                        CC            .byte	$CC
06688 16D8                        CC            .byte	$CC
06689 16D9                        00            .byte	0
06690                                           ! 1128  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16DA                        00            .byte	0
06692 16DB                        FC            .byte	$FC
06693 16DC                        00            .byte	0
06694 16DD                        FC            .byte	$FC
06695 16DE                        00            .byte	0
06696 16DF                        FC            .byte	$FC
06697 16E0                        00            .byte	0
06698 16E1                        00            .byte	0
06699                                           ! 1129  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16E2                        30            .byte	$30
06701 16E3                        30            .byte	$30
06702 16E4                        FC            .byte	$FC
06703 16E5                        30            .byte	$30
06704 16E6                        30            .byte	$30
06705 16E7                        00            .byte	0
06706 16E8                        FC            .byte	$FC
06707 16E9                        00            .byte	0
06708                                           ! 1130  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16EA                        60            .byte	$60
06710 16EB                        30            .byte	$30
06711 16EC                        18            .byte	$18
06712 16ED                        30            .byte	$30
06713 16EE                        60            .byte	$60
06714 16EF                        00            .byte	0
06715 16F0                        FC            .byte	$FC
06716 16F1                        00            .byte	0
06717                                           ! 1131  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 16F2                        18            .byte	$18
06719 16F3                        30            .byte	$30
06720 16F4                        60            .byte	$60
06721 16F5                        30            .byte	$30
06722 16F6                        18            .byte	$18
06723 16F7                        00            .byte	0
06724 16F8                        FC            .byte	$FC
06725 16F9                        00            .byte	0
06726                                           ! 1132  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 16FA                        0E            .byte	$E
06728 16FB                        1B            .byte	$1B
06729 16FC                        1B            .byte	$1B
06730 16FD                        18            .byte	$18
06731 16FE                        18            .byte	$18
06732 16FF                        18            .byte	$18
06733 1700                        18            .byte	$18
06734 1701                        18            .byte	$18
06735                                           ! 1133  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1702                        18            .byte	$18
06737 1703                        18            .byte	$18
06738 1704                        18            .byte	$18
06739 1705                        18            .byte	$18
06740 1706                        18            .byte	$18
06741 1707                        D8            .byte	$D8
06742 1708                        D8            .byte	$D8
06743 1709                        70            .byte	$70
06744                                           ! 1134  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 170A                        30            .byte	$30
06746 170B                        30            .byte	$30
06747 170C                        00            .byte	0
06748 170D                        FC            .byte	$FC
06749 170E                        00            .byte	0
06750 170F                        30            .byte	$30
06751 1710                        30            .byte	$30
06752 1711                        00            .byte	0
06753                                           ! 1135  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1712                        00            .byte	0
06755 1713                        76            .byte	$76
06756 1714                        DC            .byte	$DC
06757 1715                        00            .byte	0
06758 1716                        76            .byte	$76
06759 1717                        DC            .byte	$DC
06760 1718                        00            .byte	0
06761 1719                        00            .byte	0
06762                                           ! 1136  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 171A                        38            .byte	$38
06764 171B                        6C            .byte	$6C
06765 171C                        6C            .byte	$6C
06766 171D                        38            .byte	$38
06767 171E                        00            .byte	0
06768 171F                        00            .byte	0
06769 1720                        00            .byte	0
06770 1721                        00            .byte	0
06771                                           ! 1137  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1722                        00            .byte	0
06773 1723                        00            .byte	0
06774 1724                        00            .byte	0
06775 1725                        18            .byte	$18
06776 1726                        18            .byte	$18
06777 1727                        00            .byte	0
06778 1728                        00            .byte	0
06779 1729                        00            .byte	0
06780                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 172A                        00            .byte	0
06782 172B                        00            .byte	0
06783 172C                        00            .byte	0
06784 172D                        00            .byte	0
06785 172E                        18            .byte	$18
06786 172F                        00            .byte	0
06787 1730                        00            .byte	0
06788 1731                        00            .byte	0
06789                                           ! 1139  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1732                        0F            .byte	$F
06791 1733                        0C            .byte	$C
06792 1734                        0C            .byte	$C
06793 1735                        0C            .byte	$C
06794 1736                        EC            .byte	$EC
06795 1737                        6C            .byte	$6C
06796 1738                        3C            .byte	$3C
06797 1739                        1C            .byte	$1C
06798                                           ! 1140  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 173A                        78            .byte	$78
06800 173B                        6C            .byte	$6C
06801 173C                        6C            .byte	$6C
06802 173D                        6C            .byte	$6C
06803 173E                        6C            .byte	$6C
06804 173F                        00            .byte	0
06805 1740                        00            .byte	0
06806 1741                        00            .byte	0
06807                                           ! 1141  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1742                        70            .byte	$70
06809 1743                        18            .byte	$18
06810 1744                        30            .byte	$30
06811 1745                        60            .byte	$60
06812 1746                        78            .byte	$78
06813 1747                        00            .byte	0
06814 1748                        00            .byte	0
06815 1749                        00            .byte	0
06816                                           ! 1142  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 174A                        00            .byte	0
06818 174B                        00            .byte	0
06819 174C                        3C            .byte	$3C
06820 174D                        3C            .byte	$3C
06821 174E                        3C            .byte	$3C
06822 174F                        3C            .byte	$3C
06823 1750                        00            .byte	0
06824 1751                        00            .byte	0
06825                                           ! 1143  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1752                        00            .byte	0
06827 1753                        00            .byte	0
06828 1754                        00            .byte	0
06829 1755                        00            .byte	0
06830 1756                        00            .byte	0
06831 1757                        00            .byte	0
06832 1758                        00            .byte	0
06833                                           ! 1144 };
06834 1759                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1145 static Bit8u vgafont14[256*14]=
06837                                           ! 1146 {
06838                       0000175A            _vgafont14:
06839                                           ! 1147  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 175A                        00            .byte	0
06841 175B                        00            .byte	0
06842 175C                        00            .byte	0
06843 175D                        00            .byte	0
06844 175E                        00            .byte	0
06845 175F                        00            .byte	0
06846 1760                        00            .byte	0
06847 1761                        00            .byte	0
06848 1762                        00            .byte	0
06849 1763                        00            .byte	0
06850 1764                        00            .byte	0
06851 1765                        00            .byte	0
06852 1766                        00            .byte	0
06853 1767                        00            .byte	0
06854                                           ! 1148  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 1768                        00            .byte	0
06856 1769                        00            .byte	0
06857 176A                        7E            .byte	$7E
06858 176B                        81            .byte	$81
06859 176C                        A5            .byte	$A5
06860 176D                        81            .byte	$81
06861 176E                        81            .byte	$81
06862 176F                        BD            .byte	$BD
06863 1770                        99            .byte	$99
06864 1771                        81            .byte	$81
06865 1772                        7E            .byte	$7E
06866 1773                        00            .byte	0
06867 1774                        00            .byte	0
06868 1775                        00            .byte	0
06869                                           ! 1149  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 1776                        00            .byte	0
06871 1777                        00            .byte	0
06872 1778                        7E            .byte	$7E
06873 1779                        FF            .byte	$FF
06874 177A                        DB            .byte	$DB
06875 177B                        FF            .byte	$FF
06876 177C                        FF            .byte	$FF
06877 177D                        C3            .byte	$C3
06878 177E                        E7            .byte	$E7
06879 177F                        FF            .byte	$FF
06880 1780                        7E            .byte	$7E
06881 1781                        00            .byte	0
06882 1782                        00            .byte	0
06883 1783                        00            .byte	0
06884                                           ! 1150  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 1784                        00            .byte	0
06886 1785                        00            .byte	0
06887 1786                        00            .byte	0
06888 1787                        6C            .byte	$6C
06889 1788                        FE            .byte	$FE
06890 1789                        FE            .byte	$FE
06891 178A                        FE            .byte	$FE
06892 178B                        FE            .byte	$FE
06893 178C                        7C            .byte	$7C
06894 178D                        38            .byte	$38
06895 178E                        10            .byte	$10
06896 178F                        00            .byte	0
06897 1790                        00            .byte	0
06898 1791                        00            .byte	0
06899                                           ! 1151  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06900 1792                        00            .byte	0
06901 1793                        00            .byte	0
06902 1794                        00            .byte	0
06903 1795                        10            .byte	$10
06904 1796                        38            .byte	$38
06905 1797                        7C            .byte	$7C
06906 1798                        FE            .byte	$FE
06907 1799                        7C            .byte	$7C
06908 179A                        38            .byte	$38
06909 179B                        10            .byte	$10
06910 179C                        00            .byte	0
06911 179D                        00            .byte	0
06912 179E                        00            .byte	0
06913 179F                        00            .byte	0
06914                                           ! 1152  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x
06915 17A0                        00            .byte	0
06916 17A1                        00            .byte	0
06917 17A2                        18            .byte	$18
06918 17A3                        3C            .byte	$3C
06919 17A4                        3C            .byte	$3C
06920 17A5                        E7            .byte	$E7
06921 17A6                        E7            .byte	$E7
06922 17A7                        E7            .byte	$E7
06923 17A8                        18            .byte	$18
06924 17A9                        18            .byte	$18
06925 17AA                        3C            .byte	$3C
06926 17AB                        00            .byte	0
06927                                           ! 1152 00, 0x00,
06928 17AC                        00            .byte	0
06929 17AD                        00            .byte	0
06930                                           ! 1153  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17AE                        00            .byte	0
06932 17AF                        00            .byte	0
06933 17B0                        18            .byte	$18
06934 17B1                        3C            .byte	$3C
06935 17B2                        7E            .byte	$7E
06936 17B3                        FF            .byte	$FF
06937 17B4                        FF            .byte	$FF
06938 17B5                        7E            .byte	$7E
06939 17B6                        18            .byte	$18
06940 17B7                        18            .byte	$18
06941 17B8                        3C            .byte	$3C
06942 17B9                        00            .byte	0
06943 17BA                        00            .byte	0
06944 17BB                        00            .byte	0
06945                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17BC                        00            .byte	0
06947 17BD                        00            .byte	0
06948 17BE                        00            .byte	0
06949 17BF                        00            .byte	0
06950 17C0                        00            .byte	0
06951 17C1                        18            .byte	$18
06952 17C2                        3C            .byte	$3C
06953 17C3                        3C            .byte	$3C
06954 17C4                        18            .byte	$18
06955 17C5                        00            .byte	0
06956 17C6                        00            .byte	0
06957 17C7                        00            .byte	0
06958 17C8                        00            .byte	0
06959 17C9                        00            .byte	0
06960                                           ! 1155  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17CA                        FF            .byte	$FF
06962 17CB                        FF            .byte	$FF
06963 17CC                        FF            .byte	$FF
06964 17CD                        FF            .byte	$FF
06965 17CE                        FF            .byte	$FF
06966 17CF                        E7            .byte	$E7
06967 17D0                        C3            .byte	$C3
06968 17D1                        C3            .byte	$C3
06969 17D2                        E7            .byte	$E7
06970 17D3                        FF            .byte	$FF
06971 17D4                        FF            .byte	$FF
06972 17D5                        FF            .byte	$FF
06973 17D6                        FF            .byte	$FF
06974 17D7                        FF            .byte	$FF
06975                                           ! 1156  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17D8                        00            .byte	0
06977 17D9                        00            .byte	0
06978 17DA                        00            .byte	0
06979 17DB                        00            .byte	0
06980 17DC                        3C            .byte	$3C
06981 17DD                        66            .byte	$66
06982 17DE                        42            .byte	$42
06983 17DF                        42            .byte	$42
06984 17E0                        66            .byte	$66
06985 17E1                        3C            .byte	$3C
06986 17E2                        00            .byte	0
06987 17E3                        00            .byte	0
06988 17E4                        00            .byte	0
06989 17E5                        00            .byte	0
06990                                           ! 1157  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17E6                        FF            .byte	$FF
06992 17E7                        FF            .byte	$FF
06993 17E8                        FF            .byte	$FF
06994 17E9                        FF            .byte	$FF
06995 17EA                        C3            .byte	$C3
06996 17EB                        99            .byte	$99
06997 17EC                        BD            .byte	$BD
06998 17ED                        BD            .byte	$BD
06999 17EE                        99            .byte	$99
07000 17EF                        C3            .byte	$C3
07001 17F0                        FF            .byte	$FF
07002 17F1                        FF            .byte	$FF
07003 17F2                        FF            .byte	$FF
07004 17F3                        FF            .byte	$FF
07005                                           ! 1158  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 17F4                        00            .byte	0
07007 17F5                        00            .byte	0
07008 17F6                        1E            .byte	$1E
07009 17F7                        0E            .byte	$E
07010 17F8                        1A            .byte	$1A
07011 17F9                        32            .byte	$32
07012 17FA                        78            .byte	$78
07013 17FB                        CC            .byte	$CC
07014 17FC                        CC            .byte	$CC
07015 17FD                        CC            .byte	$CC
07016 17FE                        78            .byte	$78
07017 17FF                        00            .byte	0
07018 1800                        00            .byte	0
07019 1801                        00            .byte	0
07020                                           ! 1159  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1802                        00            .byte	0
07022 1803                        00            .byte	0
07023 1804                        3C            .byte	$3C
07024 1805                        66            .byte	$66
07025 1806                        66            .byte	$66
07026 1807                        66            .byte	$66
07027 1808                        3C            .byte	$3C
07028 1809                        18            .byte	$18
07029 180A                        7E            .byte	$7E
07030 180B                        18            .byte	$18
07031 180C                        18            .byte	$18
07032 180D                        00            .byte	0
07033 180E                        00            .byte	0
07034 180F                        00            .byte	0
07035                                           ! 1160  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 1810                        00            .byte	0
07037 1811                        00            .byte	0
07038 1812                        3F            .byte	$3F
07039 1813                        33            .byte	$33
07040 1814                        3F            .byte	$3F
07041 1815                        30            .byte	$30
07042 1816                        30            .byte	$30
07043 1817                        30            .byte	$30
07044 1818                        70            .byte	$70
07045 1819                        F0            .byte	$F0
07046 181A                        E0            .byte	$E0
07047 181B                        00            .byte	0
07048 181C                        00            .byte	0
07049 181D                        00            .byte	0
07050                                           ! 1161  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 181E                        00            .byte	0
07052 181F                        00            .byte	0
07053 1820                        7F            .byte	$7F
07054 1821                        63            .byte	$63
07055 1822                        7F            .byte	$7F
07056 1823                        63            .byte	$63
07057 1824                        63            .byte	$63
07058 1825                        63            .byte	$63
07059 1826                        67            .byte	$67
07060 1827                        E7            .byte	$E7
07061 1828                        E6            .byte	$E6
07062 1829                        C0            .byte	$C0
07063 182A                        00            .byte	0
07064 182B                        00            .byte	0
07065                                           ! 1162  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 182C                        00            .byte	0
07067 182D                        00            .byte	0
07068 182E                        18            .byte	$18
07069 182F                        18            .byte	$18
07070 1830                        DB            .byte	$DB
07071 1831                        3C            .byte	$3C
07072 1832                        E7            .byte	$E7
07073 1833                        3C            .byte	$3C
07074 1834                        DB            .byte	$DB
07075 1835                        18            .byte	$18
07076 1836                        18            .byte	$18
07077 1837                        00            .byte	0
07078 1838                        00            .byte	0
07079 1839                        00            .byte	0
07080                                           ! 1163  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 183A                        00            .byte	0
07082 183B                        00            .byte	0
07083 183C                        80            .byte	$80
07084 183D                        C0            .byte	$C0
07085 183E                        E0            .byte	$E0
07086 183F                        F8            .byte	$F8
07087 1840                        FE            .byte	$FE
07088 1841                        F8            .byte	$F8
07089 1842                        E0            .byte	$E0
07090 1843                        C0            .byte	$C0
07091 1844                        80            .byte	$80
07092 1845                        00            .byte	0
07093 1846                        00            .byte	0
07094 1847                        00            .byte	0
07095                                           ! 1164  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 1848                        00            .byte	0
07097 1849                        00            .byte	0
07098 184A                        02            .byte	2
07099 184B                        06            .byte	6
07100 184C                        0E            .byte	$E
07101 184D                        3E            .byte	$3E
07102 184E                        FE            .byte	$FE
07103 184F                        3E            .byte	$3E
07104 1850                        0E            .byte	$E
07105 1851                        06            .byte	6
07106 1852                        02            .byte	2
07107 1853                        00            .byte	0
07108 1854                        00            .byte	0
07109 1855                        00            .byte	0
07110                                           ! 1165  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 1856                        00            .byte	0
07112 1857                        00            .byte	0
07113 1858                        18            .byte	$18
07114 1859                        3C            .byte	$3C
07115 185A                        7E            .byte	$7E
07116 185B                        18            .byte	$18
07117 185C                        18            .byte	$18
07118 185D                        18            .byte	$18
07119 185E                        7E            .byte	$7E
07120 185F                        3C            .byte	$3C
07121 1860                        18            .byte	$18
07122 1861                        00            .byte	0
07123 1862                        00            .byte	0
07124 1863                        00            .byte	0
07125                                           ! 1166  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 1864                        00            .byte	0
07127 1865                        00            .byte	0
07128 1866                        66            .byte	$66
07129 1867                        66            .byte	$66
07130 1868                        66            .byte	$66
07131 1869                        66            .byte	$66
07132 186A                        66            .byte	$66
07133 186B                        66            .byte	$66
07134 186C                        00            .byte	0
07135 186D                        66            .byte	$66
07136 186E                        66            .byte	$66
07137 186F                        00            .byte	0
07138 1870                        00            .byte	0
07139 1871                        00            .byte	0
07140                                           ! 1167  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1872                        00            .byte	0
07142 1873                        00            .byte	0
07143 1874                        7F            .byte	$7F
07144 1875                        DB            .byte	$DB
07145 1876                        DB            .byte	$DB
07146 1877                        DB            .byte	$DB
07147 1878                        7B            .byte	$7B
07148 1879                        1B            .byte	$1B
07149 187A                        1B            .byte	$1B
07150 187B                        1B            .byte	$1B
07151 187C                        1B            .byte	$1B
07152 187D                        00            .byte	0
07153 187E                        00            .byte	0
07154 187F                        00            .byte	0
07155                                           ! 1168  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 1880                        00            .byte	0
07157 1881                        7C            .byte	$7C
07158 1882                        C6            .byte	$C6
07159 1883                        60            .byte	$60
07160 1884                        38            .byte	$38
07161 1885                        6C            .byte	$6C
07162 1886                        C6            .byte	$C6
07163 1887                        C6            .byte	$C6
07164 1888                        6C            .byte	$6C
07165 1889                        38            .byte	$38
07166 188A                        0C            .byte	$C
07167 188B                        C6            .byte	$C6
07168 188C                        7C            .byte	$7C
07169 188D                        00            .byte	0
07170                                           ! 1169  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 188E                        00            .byte	0
07172 188F                        00            .byte	0
07173 1890                        00            .byte	0
07174 1891                        00            .byte	0
07175 1892                        00            .byte	0
07176 1893                        00            .byte	0
07177 1894                        00            .byte	0
07178 1895                        00            .byte	0
07179 1896                        FE            .byte	$FE
07180 1897                        FE            .byte	$FE
07181 1898                        FE            .byte	$FE
07182 1899                        00            .byte	0
07183 189A                        00            .byte	0
07184 189B                        00            .byte	0
07185                                           ! 1170  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 189C                        00            .byte	0
07187 189D                        00            .byte	0
07188 189E                        18            .byte	$18
07189 189F                        3C            .byte	$3C
07190 18A0                        7E            .byte	$7E
07191 18A1                        18            .byte	$18
07192 18A2                        18            .byte	$18
07193 18A3                        18            .byte	$18
07194 18A4                        7E            .byte	$7E
07195 18A5                        3C            .byte	$3C
07196 18A6                        18            .byte	$18
07197 18A7                        7E            .byte	$7E
07198 18A8                        00            .byte	0
07199 18A9                        00            .byte	0
07200                                           ! 1171  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18AA                        00            .byte	0
07202 18AB                        00            .byte	0
07203 18AC                        18            .byte	$18
07204 18AD                        3C            .byte	$3C
07205 18AE                        7E            .byte	$7E
07206 18AF                        18            .byte	$18
07207 18B0                        18            .byte	$18
07208 18B1                        18            .byte	$18
07209 18B2                        18            .byte	$18
07210 18B3                        18            .byte	$18
07211 18B4                        18            .byte	$18
07212 18B5                        00            .byte	0
07213 18B6                        00            .byte	0
07214 18B7                        00            .byte	0
07215                                           ! 1172  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18B8                        00            .byte	0
07217 18B9                        00            .byte	0
07218 18BA                        18            .byte	$18
07219 18BB                        18            .byte	$18
07220 18BC                        18            .byte	$18
07221 18BD                        18            .byte	$18
07222 18BE                        18            .byte	$18
07223 18BF                        18            .byte	$18
07224 18C0                        7E            .byte	$7E
07225 18C1                        3C            .byte	$3C
07226 18C2                        18            .byte	$18
07227 18C3                        00            .byte	0
07228 18C4                        00            .byte	0
07229 18C5                        00            .byte	0
07230                                           ! 1173  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18C6                        00            .byte	0
07232 18C7                        00            .byte	0
07233 18C8                        00            .byte	0
07234 18C9                        00            .byte	0
07235 18CA                        18            .byte	$18
07236 18CB                        0C            .byte	$C
07237 18CC                        FE            .byte	$FE
07238 18CD                        0C            .byte	$C
07239 18CE                        18            .byte	$18
07240 18CF                        00            .byte	0
07241 18D0                        00            .byte	0
07242 18D1                        00            .byte	0
07243 18D2                        00            .byte	0
07244 18D3                        00            .byte	0
07245                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18D4                        00            .byte	0
07247 18D5                        00            .byte	0
07248 18D6                        00            .byte	0
07249 18D7                        00            .byte	0
07250 18D8                        30            .byte	$30
07251 18D9                        60            .byte	$60
07252 18DA                        FE            .byte	$FE
07253 18DB                        60            .byte	$60
07254 18DC                        30            .byte	$30
07255 18DD                        00            .byte	0
07256 18DE                        00            .byte	0
07257 18DF                        00            .byte	0
07258 18E0                        00            .byte	0
07259 18E1                        00            .byte	0
07260                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07261 18E2                        00            .byte	0
07262 18E3                        00            .byte	0
07263 18E4                        00            .byte	0
07264 18E5                        00            .byte	0
07265 18E6                        00            .byte	0
07266 18E7                        C0            .byte	$C0
07267 18E8                        C0            .byte	$C0
07268 18E9                        C0            .byte	$C0
07269 18EA                        FE            .byte	$FE
07270 18EB                        00            .byte	0
07271 18EC                        00            .byte	0
07272 18ED                        00            .byte	0
07273 18EE                        00            .byte	0
07274 18EF                        00            .byte	0
07275                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00
07276 18F0                        00            .byte	0
07277 18F1                        00            .byte	0
07278 18F2                        00            .byte	0
07279 18F3                        00            .byte	0
07280 18F4                        28            .byte	$28
07281 18F5                        6C            .byte	$6C
07282 18F6                        FE            .byte	$FE
07283 18F7                        6C            .byte	$6C
07284 18F8                        28            .byte	$28
07285 18F9                        00            .byte	0
07286 18FA                        00            .byte	0
07287 18FB                        00            .byte	0
07288 18FC                        00            .byte	0
07289                                           ! 1176 ,
07290 18FD                        00            .byte	0
07291                                           ! 1177  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 18FE                        00            .byte	0
07293 18FF                        00            .byte	0
07294 1900                        00            .byte	0
07295 1901                        10            .byte	$10
07296 1902                        38            .byte	$38
07297 1903                        38            .byte	$38
07298 1904                        7C            .byte	$7C
07299 1905                        7C            .byte	$7C
07300 1906                        FE            .byte	$FE
07301 1907                        FE            .byte	$FE
07302 1908                        00            .byte	0
07303 1909                        00            .byte	0
07304 190A                        00            .byte	0
07305 190B                        00            .byte	0
07306                                           ! 1178  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 190C                        00            .byte	0
07308 190D                        00            .byte	0
07309 190E                        00            .byte	0
07310 190F                        FE            .byte	$FE
07311 1910                        FE            .byte	$FE
07312 1911                        7C            .byte	$7C
07313 1912                        7C            .byte	$7C
07314 1913                        38            .byte	$38
07315 1914                        38            .byte	$38
07316 1915                        10            .byte	$10
07317 1916                        00            .byte	0
07318 1917                        00            .byte	0
07319 1918                        00            .byte	0
07320 1919                        00            .byte	0
07321                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 191A                        00            .byte	0
07323 191B                        00            .byte	0
07324 191C                        00            .byte	0
07325 191D                        00            .byte	0
07326 191E                        00            .byte	0
07327 191F                        00            .byte	0
07328 1920                        00            .byte	0
07329 1921                        00            .byte	0
07330 1922                        00            .byte	0
07331 1923                        00            .byte	0
07332 1924                        00            .byte	0
07333 1925                        00            .byte	0
07334 1926                        00            .byte	0
07335 1927                        00            .byte	0
07336                                           ! 1180  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 1928                        00            .byte	0
07338 1929                        00            .byte	0
07339 192A                        18            .byte	$18
07340 192B                        3C            .byte	$3C
07341 192C                        3C            .byte	$3C
07342 192D                        3C            .byte	$3C
07343 192E                        18            .byte	$18
07344 192F                        18            .byte	$18
07345 1930                        00            .byte	0
07346 1931                        18            .byte	$18
07347 1932                        18            .byte	$18
07348 1933                        00            .byte	0
07349 1934                        00            .byte	0
07350 1935                        00            .byte	0
07351                                           ! 1181  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 1936                        00            .byte	0
07353 1937                        66            .byte	$66
07354 1938                        66            .byte	$66
07355 1939                        66            .byte	$66
07356 193A                        24            .byte	$24
07357 193B                        00            .byte	0
07358 193C                        00            .byte	0
07359 193D                        00            .byte	0
07360 193E                        00            .byte	0
07361 193F                        00            .byte	0
07362 1940                        00            .byte	0
07363 1941                        00            .byte	0
07364 1942                        00            .byte	0
07365 1943                        00            .byte	0
07366                                           ! 1182  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 1944                        00            .byte	0
07368 1945                        00            .byte	0
07369 1946                        6C            .byte	$6C
07370 1947                        6C            .byte	$6C
07371 1948                        FE            .byte	$FE
07372 1949                        6C            .byte	$6C
07373 194A                        6C            .byte	$6C
07374 194B                        6C            .byte	$6C
07375 194C                        FE            .byte	$FE
07376 194D                        6C            .byte	$6C
07377 194E                        6C            .byte	$6C
07378 194F                        00            .byte	0
07379 1950                        00            .byte	0
07380 1951                        00            .byte	0
07381                                           ! 1183  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1952                        18            .byte	$18
07383 1953                        18            .byte	$18
07384 1954                        7C            .byte	$7C
07385 1955                        C6            .byte	$C6
07386 1956                        C2            .byte	$C2
07387 1957                        C0            .byte	$C0
07388 1958                        7C            .byte	$7C
07389 1959                        06            .byte	6
07390 195A                        86            .byte	$86
07391 195B                        C6            .byte	$C6
07392 195C                        7C            .byte	$7C
07393 195D                        18            .byte	$18
07394 195E                        18            .byte	$18
07395 195F                        00            .byte	0
07396                                           ! 1184  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 1960                        00            .byte	0
07398 1961                        00            .byte	0
07399 1962                        00            .byte	0
07400 1963                        00            .byte	0
07401 1964                        C2            .byte	$C2
07402 1965                        C6            .byte	$C6
07403 1966                        0C            .byte	$C
07404 1967                        18            .byte	$18
07405 1968                        30            .byte	$30
07406 1969                        66            .byte	$66
07407 196A                        C6            .byte	$C6
07408 196B                        00            .byte	0
07409 196C                        00            .byte	0
07410 196D                        00            .byte	0
07411                                           ! 1185  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 196E                        00            .byte	0
07413 196F                        00            .byte	0
07414 1970                        38            .byte	$38
07415 1971                        6C            .byte	$6C
07416 1972                        6C            .byte	$6C
07417 1973                        38            .byte	$38
07418 1974                        76            .byte	$76
07419 1975                        DC            .byte	$DC
07420 1976                        CC            .byte	$CC
07421 1977                        CC            .byte	$CC
07422 1978                        76            .byte	$76
07423 1979                        00            .byte	0
07424 197A                        00            .byte	0
07425 197B                        00            .byte	0
07426                                           ! 1186  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 197C                        00            .byte	0
07428 197D                        30            .byte	$30
07429 197E                        30            .byte	$30
07430 197F                        30            .byte	$30
07431 1980                        60            .byte	$60
07432 1981                        00            .byte	0
07433 1982                        00            .byte	0
07434 1983                        00            .byte	0
07435 1984                        00            .byte	0
07436 1985                        00            .byte	0
07437 1986                        00            .byte	0
07438 1987                        00            .byte	0
07439 1988                        00            .byte	0
07440 1989                        00            .byte	0
07441                                           ! 1187  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 198A                        00            .byte	0
07443 198B                        00            .byte	0
07444 198C                        0C            .byte	$C
07445 198D                        18            .byte	$18
07446 198E                        30            .byte	$30
07447 198F                        30            .byte	$30
07448 1990                        30            .byte	$30
07449 1991                        30            .byte	$30
07450 1992                        30            .byte	$30
07451 1993                        18            .byte	$18
07452 1994                        0C            .byte	$C
07453 1995                        00            .byte	0
07454 1996                        00            .byte	0
07455 1997                        00            .byte	0
07456                                           ! 1188  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 1998                        00            .byte	0
07458 1999                        00            .byte	0
07459 199A                        30            .byte	$30
07460 199B                        18            .byte	$18
07461 199C                        0C            .byte	$C
07462 199D                        0C            .byte	$C
07463 199E                        0C            .byte	$C
07464 199F                        0C            .byte	$C
07465 19A0                        0C            .byte	$C
07466 19A1                        18            .byte	$18
07467 19A2                        30            .byte	$30
07468 19A3                        00            .byte	0
07469 19A4                        00            .byte	0
07470 19A5                        00            .byte	0
07471                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19A6                        00            .byte	0
07473 19A7                        00            .byte	0
07474 19A8                        00            .byte	0
07475 19A9                        00            .byte	0
07476 19AA                        66            .byte	$66
07477 19AB                        3C            .byte	$3C
07478 19AC                        FF            .byte	$FF
07479 19AD                        3C            .byte	$3C
07480 19AE                        66            .byte	$66
07481 19AF                        00            .byte	0
07482 19B0                        00            .byte	0
07483 19B1                        00            .byte	0
07484 19B2                        00            .byte	0
07485 19B3                        00            .byte	0
07486                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19B4                        00            .byte	0
07488 19B5                        00            .byte	0
07489 19B6                        00            .byte	0
07490 19B7                        00            .byte	0
07491 19B8                        18            .byte	$18
07492 19B9                        18            .byte	$18
07493 19BA                        7E            .byte	$7E
07494 19BB                        18            .byte	$18
07495 19BC                        18            .byte	$18
07496 19BD                        00            .byte	0
07497 19BE                        00            .byte	0
07498 19BF                        00            .byte	0
07499 19C0                        00            .byte	0
07500 19C1                        00            .byte	0
07501                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19C2                        00            .byte	0
07503 19C3                        00            .byte	0
07504 19C4                        00            .byte	0
07505 19C5                        00            .byte	0
07506 19C6                        00            .byte	0
07507 19C7                        00            .byte	0
07508 19C8                        00            .byte	0
07509 19C9                        00            .byte	0
07510 19CA                        18            .byte	$18
07511 19CB                        18            .byte	$18
07512 19CC                        18            .byte	$18
07513 19CD                        30            .byte	$30
07514 19CE                        00            .byte	0
07515 19CF                        00            .byte	0
07516                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19D0                        00            .byte	0
07518 19D1                        00            .byte	0
07519 19D2                        00            .byte	0
07520 19D3                        00            .byte	0
07521 19D4                        00            .byte	0
07522 19D5                        00            .byte	0
07523 19D6                        FE            .byte	$FE
07524 19D7                        00            .byte	0
07525 19D8                        00            .byte	0
07526 19D9                        00            .byte	0
07527 19DA                        00            .byte	0
07528 19DB                        00            .byte	0
07529 19DC                        00            .byte	0
07530 19DD                        00            .byte	0
07531                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19DE                        00            .byte	0
07533 19DF                        00            .byte	0
07534 19E0                        00            .byte	0
07535 19E1                        00            .byte	0
07536 19E2                        00            .byte	0
07537 19E3                        00            .byte	0
07538 19E4                        00            .byte	0
07539 19E5                        00            .byte	0
07540 19E6                        00            .byte	0
07541 19E7                        18            .byte	$18
07542 19E8                        18            .byte	$18
07543 19E9                        00            .byte	0
07544 19EA                        00            .byte	0
07545 19EB                        00            .byte	0
07546                                           ! 1194  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 19EC                        00            .byte	0
07548 19ED                        00            .byte	0
07549 19EE                        02            .byte	2
07550 19EF                        06            .byte	6
07551 19F0                        0C            .byte	$C
07552 19F1                        18            .byte	$18
07553 19F2                        30            .byte	$30
07554 19F3                        60            .byte	$60
07555 19F4                        C0            .byte	$C0
07556 19F5                        80            .byte	$80
07557 19F6                        00            .byte	0
07558 19F7                        00            .byte	0
07559 19F8                        00            .byte	0
07560 19F9                        00            .byte	0
07561                                           ! 1195  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 19FA                        00            .byte	0
07563 19FB                        00            .byte	0
07564 19FC                        7C            .byte	$7C
07565 19FD                        C6            .byte	$C6
07566 19FE                        CE            .byte	$CE
07567 19FF                        DE            .byte	$DE
07568 1A00                        F6            .byte	$F6
07569 1A01                        E6            .byte	$E6
07570 1A02                        C6            .byte	$C6
07571 1A03                        C6            .byte	$C6
07572 1A04                        7C            .byte	$7C
07573 1A05                        00            .byte	0
07574 1A06                        00            .byte	0
07575 1A07                        00            .byte	0
07576                                           ! 1196  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A08                        00            .byte	0
07578 1A09                        00            .byte	0
07579 1A0A                        18            .byte	$18
07580 1A0B                        38            .byte	$38
07581 1A0C                        78            .byte	$78
07582 1A0D                        18            .byte	$18
07583 1A0E                        18            .byte	$18
07584 1A0F                        18            .byte	$18
07585 1A10                        18            .byte	$18
07586 1A11                        18            .byte	$18
07587 1A12                        7E            .byte	$7E
07588 1A13                        00            .byte	0
07589 1A14                        00            .byte	0
07590 1A15                        00            .byte	0
07591                                           ! 1197  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A16                        00            .byte	0
07593 1A17                        00            .byte	0
07594 1A18                        7C            .byte	$7C
07595 1A19                        C6            .byte	$C6
07596 1A1A                        06            .byte	6
07597 1A1B                        0C            .byte	$C
07598 1A1C                        18            .byte	$18
07599 1A1D                        30            .byte	$30
07600 1A1E                        60            .byte	$60
07601 1A1F                        C6            .byte	$C6
07602 1A20                        FE            .byte	$FE
07603 1A21                        00            .byte	0
07604 1A22                        00            .byte	0
07605 1A23                        00            .byte	0
07606                                           ! 1198  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A24                        00            .byte	0
07608 1A25                        00            .byte	0
07609 1A26                        7C            .byte	$7C
07610 1A27                        C6            .byte	$C6
07611 1A28                        06            .byte	6
07612 1A29                        06            .byte	6
07613 1A2A                        3C            .byte	$3C
07614 1A2B                        06            .byte	6
07615 1A2C                        06            .byte	6
07616 1A2D                        C6            .byte	$C6
07617 1A2E                        7C            .byte	$7C
07618 1A2F                        00            .byte	0
07619 1A30                        00            .byte	0
07620 1A31                        00            .byte	0
07621                                           ! 1199  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07622 1A32                        00            .byte	0
07623 1A33                        00            .byte	0
07624 1A34                        0C            .byte	$C
07625 1A35                        1C            .byte	$1C
07626 1A36                        3C            .byte	$3C
07627 1A37                        6C            .byte	$6C
07628 1A38                        CC            .byte	$CC
07629 1A39                        FE            .byte	$FE
07630 1A3A                        0C            .byte	$C
07631 1A3B                        0C            .byte	$C
07632 1A3C                        1E            .byte	$1E
07633 1A3D                        00            .byte	0
07634 1A3E                        00            .byte	0
07635 1A3F                        00            .byte	0
07636                                           ! 1200  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07637 1A40                        00            .byte	0
07638 1A41                        00            .byte	0
07639 1A42                        FE            .byte	$FE
07640 1A43                        C0            .byte	$C0
07641 1A44                        C0            .byte	$C0
07642 1A45                        C0            .byte	$C0
07643 1A46                        FC            .byte	$FC
07644 1A47                        06            .byte	6
07645 1A48                        06            .byte	6
07646 1A49                        C6            .byte	$C6
07647 1A4A                        7C            .byte	$7C
07648 1A4B                        00            .byte	0
07649 1A4C                        00            .byte	0
07650 1A4D                        00            .byte	0
07651                                           ! 1201  0x00,
07652                                           ! 1201  0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A4E                        00            .byte	0
07654 1A4F                        00            .byte	0
07655 1A50                        38            .byte	$38
07656 1A51                        60            .byte	$60
07657 1A52                        C0            .byte	$C0
07658 1A53                        C0            .byte	$C0
07659 1A54                        FC            .byte	$FC
07660 1A55                        C6            .byte	$C6
07661 1A56                        C6            .byte	$C6
07662 1A57                        C6            .byte	$C6
07663 1A58                        7C            .byte	$7C
07664 1A59                        00            .byte	0
07665 1A5A                        00            .byte	0
07666 1A5B                        00            .byte	0
07667                                           ! 1202  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A5C                        00            .byte	0
07669 1A5D                        00            .byte	0
07670 1A5E                        FE            .byte	$FE
07671 1A5F                        C6            .byte	$C6
07672 1A60                        06            .byte	6
07673 1A61                        0C            .byte	$C
07674 1A62                        18            .byte	$18
07675 1A63                        30            .byte	$30
07676 1A64                        30            .byte	$30
07677 1A65                        30            .byte	$30
07678 1A66                        30            .byte	$30
07679 1A67                        00            .byte	0
07680 1A68                        00            .byte	0
07681 1A69                        00            .byte	0
07682                                           ! 1203  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A6A                        00            .byte	0
07684 1A6B                        00            .byte	0
07685 1A6C                        7C            .byte	$7C
07686 1A6D                        C6            .byte	$C6
07687 1A6E                        C6            .byte	$C6
07688 1A6F                        C6            .byte	$C6
07689 1A70                        7C            .byte	$7C
07690 1A71                        C6            .byte	$C6
07691 1A72                        C6            .byte	$C6
07692 1A73                        C6            .byte	$C6
07693 1A74                        7C            .byte	$7C
07694 1A75                        00            .byte	0
07695 1A76                        00            .byte	0
07696 1A77                        00            .byte	0
07697                                           ! 1204  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A78                        00            .byte	0
07699 1A79                        00            .byte	0
07700 1A7A                        7C            .byte	$7C
07701 1A7B                        C6            .byte	$C6
07702 1A7C                        C6            .byte	$C6
07703 1A7D                        C6            .byte	$C6
07704 1A7E                        7E            .byte	$7E
07705 1A7F                        06            .byte	6
07706 1A80                        06            .byte	6
07707 1A81                        0C            .byte	$C
07708 1A82                        78            .byte	$78
07709 1A83                        00            .byte	0
07710 1A84                        00            .byte	0
07711 1A85                        00            .byte	0
07712                                           ! 1205  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A86                        00            .byte	0
07714 1A87                        00            .byte	0
07715 1A88                        00            .byte	0
07716 1A89                        18            .byte	$18
07717 1A8A                        18            .byte	$18
07718 1A8B                        00            .byte	0
07719 1A8C                        00            .byte	0
07720 1A8D                        00            .byte	0
07721 1A8E                        18            .byte	$18
07722 1A8F                        18            .byte	$18
07723 1A90                        00            .byte	0
07724 1A91                        00            .byte	0
07725 1A92                        00            .byte	0
07726 1A93                        00            .byte	0
07727                                           ! 1206  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1A94                        00            .byte	0
07729 1A95                        00            .byte	0
07730 1A96                        00            .byte	0
07731 1A97                        18            .byte	$18
07732 1A98                        18            .byte	$18
07733 1A99                        00            .byte	0
07734 1A9A                        00            .byte	0
07735 1A9B                        00            .byte	0
07736 1A9C                        18            .byte	$18
07737 1A9D                        18            .byte	$18
07738 1A9E                        30            .byte	$30
07739 1A9F                        00            .byte	0
07740 1AA0                        00            .byte	0
07741 1AA1                        00            .byte	0
07742                                           ! 1207  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AA2                        00            .byte	0
07744 1AA3                        00            .byte	0
07745 1AA4                        06            .byte	6
07746 1AA5                        0C            .byte	$C
07747 1AA6                        18            .byte	$18
07748 1AA7                        30            .byte	$30
07749 1AA8                        60            .byte	$60
07750 1AA9                        30            .byte	$30
07751 1AAA                        18            .byte	$18
07752 1AAB                        0C            .byte	$C
07753 1AAC                        06            .byte	6
07754 1AAD                        00            .byte	0
07755 1AAE                        00            .byte	0
07756 1AAF                        00            .byte	0
07757                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1AB0                        00            .byte	0
07759 1AB1                        00            .byte	0
07760 1AB2                        00            .byte	0
07761 1AB3                        00            .byte	0
07762 1AB4                        00            .byte	0
07763 1AB5                        7E            .byte	$7E
07764 1AB6                        00            .byte	0
07765 1AB7                        00            .byte	0
07766 1AB8                        7E            .byte	$7E
07767 1AB9                        00            .byte	0
07768 1ABA                        00            .byte	0
07769 1ABB                        00            .byte	0
07770 1ABC                        00            .byte	0
07771 1ABD                        00            .byte	0
07772                                           ! 1209  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1ABE                        00            .byte	0
07774 1ABF                        00            .byte	0
07775 1AC0                        60            .byte	$60
07776 1AC1                        30            .byte	$30
07777 1AC2                        18            .byte	$18
07778 1AC3                        0C            .byte	$C
07779 1AC4                        06            .byte	6
07780 1AC5                        0C            .byte	$C
07781 1AC6                        18            .byte	$18
07782 1AC7                        30            .byte	$30
07783 1AC8                        60            .byte	$60
07784 1AC9                        00            .byte	0
07785 1ACA                        00            .byte	0
07786 1ACB                        00            .byte	0
07787                                           ! 1210  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1ACC                        00            .byte	0
07789 1ACD                        00            .byte	0
07790 1ACE                        7C            .byte	$7C
07791 1ACF                        C6            .byte	$C6
07792 1AD0                        C6            .byte	$C6
07793 1AD1                        0C            .byte	$C
07794 1AD2                        18            .byte	$18
07795 1AD3                        18            .byte	$18
07796 1AD4                        00            .byte	0
07797 1AD5                        18            .byte	$18
07798 1AD6                        18            .byte	$18
07799 1AD7                        00            .byte	0
07800 1AD8                        00            .byte	0
07801 1AD9                        00            .byte	0
07802                                           ! 1211  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1ADA                        00            .byte	0
07804 1ADB                        00            .byte	0
07805 1ADC                        7C            .byte	$7C
07806 1ADD                        C6            .byte	$C6
07807 1ADE                        C6            .byte	$C6
07808 1ADF                        DE            .byte	$DE
07809 1AE0                        DE            .byte	$DE
07810 1AE1                        DE            .byte	$DE
07811 1AE2                        DC            .byte	$DC
07812 1AE3                        C0            .byte	$C0
07813 1AE4                        7C            .byte	$7C
07814 1AE5                        00            .byte	0
07815 1AE6                        00            .byte	0
07816 1AE7                        00            .byte	0
07817                                           ! 1212  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AE8                        00            .byte	0
07819 1AE9                        00            .byte	0
07820 1AEA                        10            .byte	$10
07821 1AEB                        38            .byte	$38
07822 1AEC                        6C            .byte	$6C
07823 1AED                        C6            .byte	$C6
07824 1AEE                        C6            .byte	$C6
07825 1AEF                        FE            .byte	$FE
07826 1AF0                        C6            .byte	$C6
07827 1AF1                        C6            .byte	$C6
07828 1AF2                        C6            .byte	$C6
07829 1AF3                        00            .byte	0
07830 1AF4                        00            .byte	0
07831 1AF5                        00            .byte	0
07832                                           ! 1213  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1AF6                        00            .byte	0
07834 1AF7                        00            .byte	0
07835 1AF8                        FC            .byte	$FC
07836 1AF9                        66            .byte	$66
07837 1AFA                        66            .byte	$66
07838 1AFB                        66            .byte	$66
07839 1AFC                        7C            .byte	$7C
07840 1AFD                        66            .byte	$66
07841 1AFE                        66            .byte	$66
07842 1AFF                        66            .byte	$66
07843 1B00                        FC            .byte	$FC
07844 1B01                        00            .byte	0
07845 1B02                        00            .byte	0
07846 1B03                        00            .byte	0
07847                                           ! 1214  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B04                        00            .byte	0
07849 1B05                        00            .byte	0
07850 1B06                        3C            .byte	$3C
07851 1B07                        66            .byte	$66
07852 1B08                        C2            .byte	$C2
07853 1B09                        C0            .byte	$C0
07854 1B0A                        C0            .byte	$C0
07855 1B0B                        C0            .byte	$C0
07856 1B0C                        C2            .byte	$C2
07857 1B0D                        66            .byte	$66
07858 1B0E                        3C            .byte	$3C
07859 1B0F                        00            .byte	0
07860 1B10                        00            .byte	0
07861 1B11                        00            .byte	0
07862                                           ! 1215  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B12                        00            .byte	0
07864 1B13                        00            .byte	0
07865 1B14                        F8            .byte	$F8
07866 1B15                        6C            .byte	$6C
07867 1B16                        66            .byte	$66
07868 1B17                        66            .byte	$66
07869 1B18                        66            .byte	$66
07870 1B19                        66            .byte	$66
07871 1B1A                        66            .byte	$66
07872 1B1B                        6C            .byte	$6C
07873 1B1C                        F8            .byte	$F8
07874 1B1D                        00            .byte	0
07875 1B1E                        00            .byte	0
07876 1B1F                        00            .byte	0
07877                                           ! 1216  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B20                        00            .byte	0
07879 1B21                        00            .byte	0
07880 1B22                        FE            .byte	$FE
07881 1B23                        66            .byte	$66
07882 1B24                        62            .byte	$62
07883 1B25                        68            .byte	$68
07884 1B26                        78            .byte	$78
07885 1B27                        68            .byte	$68
07886 1B28                        62            .byte	$62
07887 1B29                        66            .byte	$66
07888 1B2A                        FE            .byte	$FE
07889 1B2B                        00            .byte	0
07890 1B2C                        00            .byte	0
07891 1B2D                        00            .byte	0
07892                                           ! 1217  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B2E                        00            .byte	0
07894 1B2F                        00            .byte	0
07895 1B30                        FE            .byte	$FE
07896 1B31                        66            .byte	$66
07897 1B32                        62            .byte	$62
07898 1B33                        68            .byte	$68
07899 1B34                        78            .byte	$78
07900 1B35                        68            .byte	$68
07901 1B36                        60            .byte	$60
07902 1B37                        60            .byte	$60
07903 1B38                        F0            .byte	$F0
07904 1B39                        00            .byte	0
07905 1B3A                        00            .byte	0
07906 1B3B                        00            .byte	0
07907                                           ! 1218  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B3C                        00            .byte	0
07909 1B3D                        00            .byte	0
07910 1B3E                        3C            .byte	$3C
07911 1B3F                        66            .byte	$66
07912 1B40                        C2            .byte	$C2
07913 1B41                        C0            .byte	$C0
07914 1B42                        C0            .byte	$C0
07915 1B43                        DE            .byte	$DE
07916 1B44                        C6            .byte	$C6
07917 1B45                        66            .byte	$66
07918 1B46                        3A            .byte	$3A
07919 1B47                        00            .byte	0
07920 1B48                        00            .byte	0
07921 1B49                        00            .byte	0
07922                                           ! 1219  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B4A                        00            .byte	0
07924 1B4B                        00            .byte	0
07925 1B4C                        C6            .byte	$C6
07926 1B4D                        C6            .byte	$C6
07927 1B4E                        C6            .byte	$C6
07928 1B4F                        C6            .byte	$C6
07929 1B50                        FE            .byte	$FE
07930 1B51                        C6            .byte	$C6
07931 1B52                        C6            .byte	$C6
07932 1B53                        C6            .byte	$C6
07933 1B54                        C6            .byte	$C6
07934 1B55                        00            .byte	0
07935 1B56                        00            .byte	0
07936 1B57                        00            .byte	0
07937                                           ! 1220  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B58                        00            .byte	0
07939 1B59                        00            .byte	0
07940 1B5A                        3C            .byte	$3C
07941 1B5B                        18            .byte	$18
07942 1B5C                        18            .byte	$18
07943 1B5D                        18            .byte	$18
07944 1B5E                        18            .byte	$18
07945 1B5F                        18            .byte	$18
07946 1B60                        18            .byte	$18
07947 1B61                        18            .byte	$18
07948 1B62                        3C            .byte	$3C
07949 1B63                        00            .byte	0
07950 1B64                        00            .byte	0
07951 1B65                        00            .byte	0
07952                                           ! 1221  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B66                        00            .byte	0
07954 1B67                        00            .byte	0
07955 1B68                        1E            .byte	$1E
07956 1B69                        0C            .byte	$C
07957 1B6A                        0C            .byte	$C
07958 1B6B                        0C            .byte	$C
07959 1B6C                        0C            .byte	$C
07960 1B6D                        0C            .byte	$C
07961 1B6E                        CC            .byte	$CC
07962 1B6F                        CC            .byte	$CC
07963 1B70                        78            .byte	$78
07964 1B71                        00            .byte	0
07965 1B72                        00            .byte	0
07966 1B73                        00            .byte	0
07967                                           ! 1222  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B74                        00            .byte	0
07969 1B75                        00            .byte	0
07970 1B76                        E6            .byte	$E6
07971 1B77                        66            .byte	$66
07972 1B78                        6C            .byte	$6C
07973 1B79                        6C            .byte	$6C
07974 1B7A                        78            .byte	$78
07975 1B7B                        6C            .byte	$6C
07976 1B7C                        6C            .byte	$6C
07977 1B7D                        66            .byte	$66
07978 1B7E                        E6            .byte	$E6
07979 1B7F                        00            .byte	0
07980 1B80                        00            .byte	0
07981 1B81                        00            .byte	0
07982                                           ! 1223  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07983 1B82                        00            .byte	0
07984 1B83                        00            .byte	0
07985 1B84                        F0            .byte	$F0
07986 1B85                        60            .byte	$60
07987 1B86                        60            .byte	$60
07988 1B87                        60            .byte	$60
07989 1B88                        60            .byte	$60
07990 1B89                        60            .byte	$60
07991 1B8A                        62            .byte	$62
07992 1B8B                        66            .byte	$66
07993 1B8C                        FE            .byte	$FE
07994 1B8D                        00            .byte	0
07995 1B8E                        00            .byte	0
07996 1B8F                        00            .byte	0
07997                                           ! 1224  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07998 1B90                        00            .byte	0
07999 1B91                        00            .byte	0
08000 1B92                        C6            .byte	$C6
08001 1B93                        EE            .byte	$EE
08002 1B94                        FE            .byte	$FE
08003 1B95                        FE            .byte	$FE
08004 1B96                        D6            .byte	$D6
08005 1B97                        C6            .byte	$C6
08006 1B98                        C6            .byte	$C6
08007 1B99                        C6            .byte	$C6
08008 1B9A                        C6            .byte	$C6
08009 1B9B                        00            .byte	0
08010 1B9C                        00            .byte	0
08011 1B9D                        00            .byte	0
08012                                           ! 1225  0x00, 0x00, 0
08013 1B9E                        00            .byte	0
08014 1B9F                        00            .byte	0
08015                                           ! 1225 xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08016 1BA0                        C6            .byte	$C6
08017 1BA1                        E6            .byte	$E6
08018 1BA2                        F6            .byte	$F6
08019 1BA3                        FE            .byte	$FE
08020 1BA4                        DE            .byte	$DE
08021 1BA5                        CE            .byte	$CE
08022 1BA6                        C6            .byte	$C6
08023 1BA7                        C6            .byte	$C6
08024 1BA8                        C6            .byte	$C6
08025 1BA9                        00            .byte	0
08026 1BAA                        00            .byte	0
08027 1BAB                        00            .byte	0
08028                                           ! 1226  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BAC                        00            .byte	0
08030 1BAD                        00            .byte	0
08031 1BAE                        38            .byte	$38
08032 1BAF                        6C            .byte	$6C
08033 1BB0                        C6            .byte	$C6
08034 1BB1                        C6            .byte	$C6
08035 1BB2                        C6            .byte	$C6
08036 1BB3                        C6            .byte	$C6
08037 1BB4                        C6            .byte	$C6
08038 1BB5                        6C            .byte	$6C
08039 1BB6                        38            .byte	$38
08040 1BB7                        00            .byte	0
08041 1BB8                        00            .byte	0
08042 1BB9                        00            .byte	0
08043                                           ! 1227  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BBA                        00            .byte	0
08045 1BBB                        00            .byte	0
08046 1BBC                        FC            .byte	$FC
08047 1BBD                        66            .byte	$66
08048 1BBE                        66            .byte	$66
08049 1BBF                        66            .byte	$66
08050 1BC0                        7C            .byte	$7C
08051 1BC1                        60            .byte	$60
08052 1BC2                        60            .byte	$60
08053 1BC3                        60            .byte	$60
08054 1BC4                        F0            .byte	$F0
08055 1BC5                        00            .byte	0
08056 1BC6                        00            .byte	0
08057 1BC7                        00            .byte	0
08058                                           ! 1228  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BC8                        00            .byte	0
08060 1BC9                        00            .byte	0
08061 1BCA                        7C            .byte	$7C
08062 1BCB                        C6            .byte	$C6
08063 1BCC                        C6            .byte	$C6
08064 1BCD                        C6            .byte	$C6
08065 1BCE                        C6            .byte	$C6
08066 1BCF                        D6            .byte	$D6
08067 1BD0                        DE            .byte	$DE
08068 1BD1                        7C            .byte	$7C
08069 1BD2                        0C            .byte	$C
08070 1BD3                        0E            .byte	$E
08071 1BD4                        00            .byte	0
08072 1BD5                        00            .byte	0
08073                                           ! 1229  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BD6                        00            .byte	0
08075 1BD7                        00            .byte	0
08076 1BD8                        FC            .byte	$FC
08077 1BD9                        66            .byte	$66
08078 1BDA                        66            .byte	$66
08079 1BDB                        66            .byte	$66
08080 1BDC                        7C            .byte	$7C
08081 1BDD                        6C            .byte	$6C
08082 1BDE                        66            .byte	$66
08083 1BDF                        66            .byte	$66
08084 1BE0                        E6            .byte	$E6
08085 1BE1                        00            .byte	0
08086 1BE2                        00            .byte	0
08087 1BE3                        00            .byte	0
08088                                           ! 1230  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BE4                        00            .byte	0
08090 1BE5                        00            .byte	0
08091 1BE6                        7C            .byte	$7C
08092 1BE7                        C6            .byte	$C6
08093 1BE8                        C6            .byte	$C6
08094 1BE9                        60            .byte	$60
08095 1BEA                        38            .byte	$38
08096 1BEB                        0C            .byte	$C
08097 1BEC                        C6            .byte	$C6
08098 1BED                        C6            .byte	$C6
08099 1BEE                        7C            .byte	$7C
08100 1BEF                        00            .byte	0
08101 1BF0                        00            .byte	0
08102 1BF1                        00            .byte	0
08103                                           ! 1231  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1BF2                        00            .byte	0
08105 1BF3                        00            .byte	0
08106 1BF4                        7E            .byte	$7E
08107 1BF5                        7E            .byte	$7E
08108 1BF6                        5A            .byte	$5A
08109 1BF7                        18            .byte	$18
08110 1BF8                        18            .byte	$18
08111 1BF9                        18            .byte	$18
08112 1BFA                        18            .byte	$18
08113 1BFB                        18            .byte	$18
08114 1BFC                        3C            .byte	$3C
08115 1BFD                        00            .byte	0
08116 1BFE                        00            .byte	0
08117 1BFF                        00            .byte	0
08118                                           ! 1232  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C00                        00            .byte	0
08120 1C01                        00            .byte	0
08121 1C02                        C6            .byte	$C6
08122 1C03                        C6            .byte	$C6
08123 1C04                        C6            .byte	$C6
08124 1C05                        C6            .byte	$C6
08125 1C06                        C6            .byte	$C6
08126 1C07                        C6            .byte	$C6
08127 1C08                        C6            .byte	$C6
08128 1C09                        C6            .byte	$C6
08129 1C0A                        7C            .byte	$7C
08130 1C0B                        00            .byte	0
08131 1C0C                        00            .byte	0
08132 1C0D                        00            .byte	0
08133                                           ! 1233  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C0E                        00            .byte	0
08135 1C0F                        00            .byte	0
08136 1C10                        C6            .byte	$C6
08137 1C11                        C6            .byte	$C6
08138 1C12                        C6            .byte	$C6
08139 1C13                        C6            .byte	$C6
08140 1C14                        C6            .byte	$C6
08141 1C15                        C6            .byte	$C6
08142 1C16                        6C            .byte	$6C
08143 1C17                        38            .byte	$38
08144 1C18                        10            .byte	$10
08145 1C19                        00            .byte	0
08146 1C1A                        00            .byte	0
08147 1C1B                        00            .byte	0
08148                                           ! 1234  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C1C                        00            .byte	0
08150 1C1D                        00            .byte	0
08151 1C1E                        C6            .byte	$C6
08152 1C1F                        C6            .byte	$C6
08153 1C20                        C6            .byte	$C6
08154 1C21                        C6            .byte	$C6
08155 1C22                        D6            .byte	$D6
08156 1C23                        D6            .byte	$D6
08157 1C24                        FE            .byte	$FE
08158 1C25                        7C            .byte	$7C
08159 1C26                        6C            .byte	$6C
08160 1C27                        00            .byte	0
08161 1C28                        00            .byte	0
08162 1C29                        00            .byte	0
08163                                           ! 1235  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C2A                        00            .byte	0
08165 1C2B                        00            .byte	0
08166 1C2C                        C6            .byte	$C6
08167 1C2D                        C6            .byte	$C6
08168 1C2E                        6C            .byte	$6C
08169 1C2F                        38            .byte	$38
08170 1C30                        38            .byte	$38
08171 1C31                        38            .byte	$38
08172 1C32                        6C            .byte	$6C
08173 1C33                        C6            .byte	$C6
08174 1C34                        C6            .byte	$C6
08175 1C35                        00            .byte	0
08176 1C36                        00            .byte	0
08177 1C37                        00            .byte	0
08178                                           ! 1236  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C38                        00            .byte	0
08180 1C39                        00            .byte	0
08181 1C3A                        66            .byte	$66
08182 1C3B                        66            .byte	$66
08183 1C3C                        66            .byte	$66
08184 1C3D                        66            .byte	$66
08185 1C3E                        3C            .byte	$3C
08186 1C3F                        18            .byte	$18
08187 1C40                        18            .byte	$18
08188 1C41                        18            .byte	$18
08189 1C42                        3C            .byte	$3C
08190 1C43                        00            .byte	0
08191 1C44                        00            .byte	0
08192 1C45                        00            .byte	0
08193                                           ! 1237  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C46                        00            .byte	0
08195 1C47                        00            .byte	0
08196 1C48                        FE            .byte	$FE
08197 1C49                        C6            .byte	$C6
08198 1C4A                        8C            .byte	$8C
08199 1C4B                        18            .byte	$18
08200 1C4C                        30            .byte	$30
08201 1C4D                        60            .byte	$60
08202 1C4E                        C2            .byte	$C2
08203 1C4F                        C6            .byte	$C6
08204 1C50                        FE            .byte	$FE
08205 1C51                        00            .byte	0
08206 1C52                        00            .byte	0
08207 1C53                        00            .byte	0
08208                                           ! 1238  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C54                        00            .byte	0
08210 1C55                        00            .byte	0
08211 1C56                        3C            .byte	$3C
08212 1C57                        30            .byte	$30
08213 1C58                        30            .byte	$30
08214 1C59                        30            .byte	$30
08215 1C5A                        30            .byte	$30
08216 1C5B                        30            .byte	$30
08217 1C5C                        30            .byte	$30
08218 1C5D                        30            .byte	$30
08219 1C5E                        3C            .byte	$3C
08220 1C5F                        00            .byte	0
08221 1C60                        00            .byte	0
08222 1C61                        00            .byte	0
08223                                           ! 1239  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C62                        00            .byte	0
08225 1C63                        00            .byte	0
08226 1C64                        80            .byte	$80
08227 1C65                        C0            .byte	$C0
08228 1C66                        E0            .byte	$E0
08229 1C67                        70            .byte	$70
08230 1C68                        38            .byte	$38
08231 1C69                        1C            .byte	$1C
08232 1C6A                        0E            .byte	$E
08233 1C6B                        06            .byte	6
08234 1C6C                        02            .byte	2
08235 1C6D                        00            .byte	0
08236 1C6E                        00            .byte	0
08237 1C6F                        00            .byte	0
08238                                           ! 1240  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C70                        00            .byte	0
08240 1C71                        00            .byte	0
08241 1C72                        3C            .byte	$3C
08242 1C73                        0C            .byte	$C
08243 1C74                        0C            .byte	$C
08244 1C75                        0C            .byte	$C
08245 1C76                        0C            .byte	$C
08246 1C77                        0C            .byte	$C
08247 1C78                        0C            .byte	$C
08248 1C79                        0C            .byte	$C
08249 1C7A                        3C            .byte	$3C
08250 1C7B                        00            .byte	0
08251 1C7C                        00            .byte	0
08252 1C7D                        00            .byte	0
08253                                           ! 1241  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C7E                        10            .byte	$10
08255 1C7F                        38            .byte	$38
08256 1C80                        6C            .byte	$6C
08257 1C81                        C6            .byte	$C6
08258 1C82                        00            .byte	0
08259 1C83                        00            .byte	0
08260 1C84                        00            .byte	0
08261 1C85                        00            .byte	0
08262 1C86                        00            .byte	0
08263 1C87                        00            .byte	0
08264 1C88                        00            .byte	0
08265 1C89                        00            .byte	0
08266 1C8A                        00            .byte	0
08267 1C8B                        00            .byte	0
08268                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1C8C                        00            .byte	0
08270 1C8D                        00            .byte	0
08271 1C8E                        00            .byte	0
08272 1C8F                        00            .byte	0
08273 1C90                        00            .byte	0
08274 1C91                        00            .byte	0
08275 1C92                        00            .byte	0
08276 1C93                        00            .byte	0
08277 1C94                        00            .byte	0
08278 1C95                        00            .byte	0
08279 1C96                        00            .byte	0
08280 1C97                        00            .byte	0
08281 1C98                        FF            .byte	$FF
08282 1C99                        00            .byte	0
08283                                           ! 1243  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1C9A                        30            .byte	$30
08285 1C9B                        30            .byte	$30
08286 1C9C                        18            .byte	$18
08287 1C9D                        00            .byte	0
08288 1C9E                        00            .byte	0
08289 1C9F                        00            .byte	0
08290 1CA0                        00            .byte	0
08291 1CA1                        00            .byte	0
08292 1CA2                        00            .byte	0
08293 1CA3                        00            .byte	0
08294 1CA4                        00            .byte	0
08295 1CA5                        00            .byte	0
08296 1CA6                        00            .byte	0
08297 1CA7                        00            .byte	0
08298                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CA8                        00            .byte	0
08300 1CA9                        00            .byte	0
08301 1CAA                        00            .byte	0
08302 1CAB                        00            .byte	0
08303 1CAC                        00            .byte	0
08304 1CAD                        78            .byte	$78
08305 1CAE                        0C            .byte	$C
08306 1CAF                        7C            .byte	$7C
08307 1CB0                        CC            .byte	$CC
08308 1CB1                        CC            .byte	$CC
08309 1CB2                        76            .byte	$76
08310 1CB3                        00            .byte	0
08311 1CB4                        00            .byte	0
08312 1CB5                        00            .byte	0
08313                                           ! 1245  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CB6                        00            .byte	0
08315 1CB7                        00            .byte	0
08316 1CB8                        E0            .byte	$E0
08317 1CB9                        60            .byte	$60
08318 1CBA                        60            .byte	$60
08319 1CBB                        78            .byte	$78
08320 1CBC                        6C            .byte	$6C
08321 1CBD                        66            .byte	$66
08322 1CBE                        66            .byte	$66
08323 1CBF                        66            .byte	$66
08324 1CC0                        7C            .byte	$7C
08325 1CC1                        00            .byte	0
08326 1CC2                        00            .byte	0
08327 1CC3                        00            .byte	0
08328                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CC4                        00            .byte	0
08330 1CC5                        00            .byte	0
08331 1CC6                        00            .byte	0
08332 1CC7                        00            .byte	0
08333 1CC8                        00            .byte	0
08334 1CC9                        7C            .byte	$7C
08335 1CCA                        C6            .byte	$C6
08336 1CCB                        C0            .byte	$C0
08337 1CCC                        C0            .byte	$C0
08338 1CCD                        C6            .byte	$C6
08339 1CCE                        7C            .byte	$7C
08340 1CCF                        00            .byte	0
08341 1CD0                        00            .byte	0
08342 1CD1                        00            .byte	0
08343                                           ! 1247  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08344 1CD2                        00            .byte	0
08345 1CD3                        00            .byte	0
08346 1CD4                        1C            .byte	$1C
08347 1CD5                        0C            .byte	$C
08348 1CD6                        0C            .byte	$C
08349 1CD7                        3C            .byte	$3C
08350 1CD8                        6C            .byte	$6C
08351 1CD9                        CC            .byte	$CC
08352 1CDA                        CC            .byte	$CC
08353 1CDB                        CC            .byte	$CC
08354 1CDC                        76            .byte	$76
08355 1CDD                        00            .byte	0
08356 1CDE                        00            .byte	0
08357 1CDF                        00            .byte	0
08358                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08359 1CE0                        00            .byte	0
08360 1CE1                        00            .byte	0
08361 1CE2                        00            .byte	0
08362 1CE3                        00            .byte	0
08363 1CE4                        00            .byte	0
08364 1CE5                        7C            .byte	$7C
08365 1CE6                        C6            .byte	$C6
08366 1CE7                        FE            .byte	$FE
08367 1CE8                        C0            .byte	$C0
08368 1CE9                        C6            .byte	$C6
08369 1CEA                        7C            .byte	$7C
08370 1CEB                        00            .byte	0
08371 1CEC                        00            .byte	0
08372 1CED                        00            .byte	0
08373                                           ! 1249  0x00, 0x00, 0x38, 0x6
08374 1CEE                        00            .byte	0
08375 1CEF                        00            .byte	0
08376 1CF0                        38            .byte	$38
08377                                           ! 1249 c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08378 1CF1                        6C            .byte	$6C
08379 1CF2                        64            .byte	$64
08380 1CF3                        60            .byte	$60
08381 1CF4                        F0            .byte	$F0
08382 1CF5                        60            .byte	$60
08383 1CF6                        60            .byte	$60
08384 1CF7                        60            .byte	$60
08385 1CF8                        F0            .byte	$F0
08386 1CF9                        00            .byte	0
08387 1CFA                        00            .byte	0
08388 1CFB                        00            .byte	0
08389                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1CFC                        00            .byte	0
08391 1CFD                        00            .byte	0
08392 1CFE                        00            .byte	0
08393 1CFF                        00            .byte	0
08394 1D00                        00            .byte	0
08395 1D01                        76            .byte	$76
08396 1D02                        CC            .byte	$CC
08397 1D03                        CC            .byte	$CC
08398 1D04                        CC            .byte	$CC
08399 1D05                        7C            .byte	$7C
08400 1D06                        0C            .byte	$C
08401 1D07                        CC            .byte	$CC
08402 1D08                        78            .byte	$78
08403 1D09                        00            .byte	0
08404                                           ! 1251  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D0A                        00            .byte	0
08406 1D0B                        00            .byte	0
08407 1D0C                        E0            .byte	$E0
08408 1D0D                        60            .byte	$60
08409 1D0E                        60            .byte	$60
08410 1D0F                        6C            .byte	$6C
08411 1D10                        76            .byte	$76
08412 1D11                        66            .byte	$66
08413 1D12                        66            .byte	$66
08414 1D13                        66            .byte	$66
08415 1D14                        E6            .byte	$E6
08416 1D15                        00            .byte	0
08417 1D16                        00            .byte	0
08418 1D17                        00            .byte	0
08419                                           ! 1252  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D18                        00            .byte	0
08421 1D19                        00            .byte	0
08422 1D1A                        18            .byte	$18
08423 1D1B                        18            .byte	$18
08424 1D1C                        00            .byte	0
08425 1D1D                        38            .byte	$38
08426 1D1E                        18            .byte	$18
08427 1D1F                        18            .byte	$18
08428 1D20                        18            .byte	$18
08429 1D21                        18            .byte	$18
08430 1D22                        3C            .byte	$3C
08431 1D23                        00            .byte	0
08432 1D24                        00            .byte	0
08433 1D25                        00            .byte	0
08434                                           ! 1253  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D26                        00            .byte	0
08436 1D27                        00            .byte	0
08437 1D28                        06            .byte	6
08438 1D29                        06            .byte	6
08439 1D2A                        00            .byte	0
08440 1D2B                        0E            .byte	$E
08441 1D2C                        06            .byte	6
08442 1D2D                        06            .byte	6
08443 1D2E                        06            .byte	6
08444 1D2F                        06            .byte	6
08445 1D30                        66            .byte	$66
08446 1D31                        66            .byte	$66
08447 1D32                        3C            .byte	$3C
08448 1D33                        00            .byte	0
08449                                           ! 1254  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D34                        00            .byte	0
08451 1D35                        00            .byte	0
08452 1D36                        E0            .byte	$E0
08453 1D37                        60            .byte	$60
08454 1D38                        60            .byte	$60
08455 1D39                        66            .byte	$66
08456 1D3A                        6C            .byte	$6C
08457 1D3B                        78            .byte	$78
08458 1D3C                        6C            .byte	$6C
08459 1D3D                        66            .byte	$66
08460 1D3E                        E6            .byte	$E6
08461 1D3F                        00            .byte	0
08462 1D40                        00            .byte	0
08463 1D41                        00            .byte	0
08464                                           ! 1255  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D42                        00            .byte	0
08466 1D43                        00            .byte	0
08467 1D44                        38            .byte	$38
08468 1D45                        18            .byte	$18
08469 1D46                        18            .byte	$18
08470 1D47                        18            .byte	$18
08471 1D48                        18            .byte	$18
08472 1D49                        18            .byte	$18
08473 1D4A                        18            .byte	$18
08474 1D4B                        18            .byte	$18
08475 1D4C                        3C            .byte	$3C
08476 1D4D                        00            .byte	0
08477 1D4E                        00            .byte	0
08478 1D4F                        00            .byte	0
08479                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D50                        00            .byte	0
08481 1D51                        00            .byte	0
08482 1D52                        00            .byte	0
08483 1D53                        00            .byte	0
08484 1D54                        00            .byte	0
08485 1D55                        EC            .byte	$EC
08486 1D56                        FE            .byte	$FE
08487 1D57                        D6            .byte	$D6
08488 1D58                        D6            .byte	$D6
08489 1D59                        D6            .byte	$D6
08490 1D5A                        C6            .byte	$C6
08491 1D5B                        00            .byte	0
08492 1D5C                        00            .byte	0
08493 1D5D                        00            .byte	0
08494                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D5E                        00            .byte	0
08496 1D5F                        00            .byte	0
08497 1D60                        00            .byte	0
08498 1D61                        00            .byte	0
08499 1D62                        00            .byte	0
08500 1D63                        DC            .byte	$DC
08501 1D64                        66            .byte	$66
08502 1D65                        66            .byte	$66
08503 1D66                        66            .byte	$66
08504 1D67                        66            .byte	$66
08505 1D68                        66            .byte	$66
08506 1D69                        00            .byte	0
08507 1D6A                        00            .byte	0
08508 1D6B                        00            .byte	0
08509                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D6C                        00            .byte	0
08511 1D6D                        00            .byte	0
08512 1D6E                        00            .byte	0
08513 1D6F                        00            .byte	0
08514 1D70                        00            .byte	0
08515 1D71                        7C            .byte	$7C
08516 1D72                        C6            .byte	$C6
08517 1D73                        C6            .byte	$C6
08518 1D74                        C6            .byte	$C6
08519 1D75                        C6            .byte	$C6
08520 1D76                        7C            .byte	$7C
08521 1D77                        00            .byte	0
08522 1D78                        00            .byte	0
08523 1D79                        00            .byte	0
08524                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D7A                        00            .byte	0
08526 1D7B                        00            .byte	0
08527 1D7C                        00            .byte	0
08528 1D7D                        00            .byte	0
08529 1D7E                        00            .byte	0
08530 1D7F                        DC            .byte	$DC
08531 1D80                        66            .byte	$66
08532 1D81                        66            .byte	$66
08533 1D82                        66            .byte	$66
08534 1D83                        7C            .byte	$7C
08535 1D84                        60            .byte	$60
08536 1D85                        60            .byte	$60
08537 1D86                        F0            .byte	$F0
08538 1D87                        00            .byte	0
08539                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D88                        00            .byte	0
08541 1D89                        00            .byte	0
08542 1D8A                        00            .byte	0
08543 1D8B                        00            .byte	0
08544 1D8C                        00            .byte	0
08545 1D8D                        76            .byte	$76
08546 1D8E                        CC            .byte	$CC
08547 1D8F                        CC            .byte	$CC
08548 1D90                        CC            .byte	$CC
08549 1D91                        7C            .byte	$7C
08550 1D92                        0C            .byte	$C
08551 1D93                        0C            .byte	$C
08552 1D94                        1E            .byte	$1E
08553 1D95                        00            .byte	0
08554                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1D96                        00            .byte	0
08556 1D97                        00            .byte	0
08557 1D98                        00            .byte	0
08558 1D99                        00            .byte	0
08559 1D9A                        00            .byte	0
08560 1D9B                        DC            .byte	$DC
08561 1D9C                        76            .byte	$76
08562 1D9D                        66            .byte	$66
08563 1D9E                        60            .byte	$60
08564 1D9F                        60            .byte	$60
08565 1DA0                        F0            .byte	$F0
08566 1DA1                        00            .byte	0
08567 1DA2                        00            .byte	0
08568 1DA3                        00            .byte	0
08569                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DA4                        00            .byte	0
08571 1DA5                        00            .byte	0
08572 1DA6                        00            .byte	0
08573 1DA7                        00            .byte	0
08574 1DA8                        00            .byte	0
08575 1DA9                        7C            .byte	$7C
08576 1DAA                        C6            .byte	$C6
08577 1DAB                        70            .byte	$70
08578 1DAC                        1C            .byte	$1C
08579 1DAD                        C6            .byte	$C6
08580 1DAE                        7C            .byte	$7C
08581 1DAF                        00            .byte	0
08582 1DB0                        00            .byte	0
08583 1DB1                        00            .byte	0
08584                                           ! 1263  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DB2                        00            .byte	0
08586 1DB3                        00            .byte	0
08587 1DB4                        10            .byte	$10
08588 1DB5                        30            .byte	$30
08589 1DB6                        30            .byte	$30
08590 1DB7                        FC            .byte	$FC
08591 1DB8                        30            .byte	$30
08592 1DB9                        30            .byte	$30
08593 1DBA                        30            .byte	$30
08594 1DBB                        36            .byte	$36
08595 1DBC                        1C            .byte	$1C
08596 1DBD                        00            .byte	0
08597 1DBE                        00            .byte	0
08598 1DBF                        00            .byte	0
08599                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DC0                        00            .byte	0
08601 1DC1                        00            .byte	0
08602 1DC2                        00            .byte	0
08603 1DC3                        00            .byte	0
08604 1DC4                        00            .byte	0
08605 1DC5                        CC            .byte	$CC
08606 1DC6                        CC            .byte	$CC
08607 1DC7                        CC            .byte	$CC
08608 1DC8                        CC            .byte	$CC
08609 1DC9                        CC            .byte	$CC
08610 1DCA                        76            .byte	$76
08611 1DCB                        00            .byte	0
08612 1DCC                        00            .byte	0
08613 1DCD                        00            .byte	0
08614                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DCE                        00            .byte	0
08616 1DCF                        00            .byte	0
08617 1DD0                        00            .byte	0
08618 1DD1                        00            .byte	0
08619 1DD2                        00            .byte	0
08620 1DD3                        66            .byte	$66
08621 1DD4                        66            .byte	$66
08622 1DD5                        66            .byte	$66
08623 1DD6                        66            .byte	$66
08624 1DD7                        3C            .byte	$3C
08625 1DD8                        18            .byte	$18
08626 1DD9                        00            .byte	0
08627 1DDA                        00            .byte	0
08628 1DDB                        00            .byte	0
08629                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DDC                        00            .byte	0
08631 1DDD                        00            .byte	0
08632 1DDE                        00            .byte	0
08633 1DDF                        00            .byte	0
08634 1DE0                        00            .byte	0
08635 1DE1                        C6            .byte	$C6
08636 1DE2                        C6            .byte	$C6
08637 1DE3                        D6            .byte	$D6
08638 1DE4                        D6            .byte	$D6
08639 1DE5                        FE            .byte	$FE
08640 1DE6                        6C            .byte	$6C
08641 1DE7                        00            .byte	0
08642 1DE8                        00            .byte	0
08643 1DE9                        00            .byte	0
08644                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DEA                        00            .byte	0
08646 1DEB                        00            .byte	0
08647 1DEC                        00            .byte	0
08648 1DED                        00            .byte	0
08649 1DEE                        00            .byte	0
08650 1DEF                        C6            .byte	$C6
08651 1DF0                        6C            .byte	$6C
08652 1DF1                        38            .byte	$38
08653 1DF2                        38            .byte	$38
08654 1DF3                        6C            .byte	$6C
08655 1DF4                        C6            .byte	$C6
08656 1DF5                        00            .byte	0
08657 1DF6                        00            .byte	0
08658 1DF7                        00            .byte	0
08659                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1DF8                        00            .byte	0
08661 1DF9                        00            .byte	0
08662 1DFA                        00            .byte	0
08663 1DFB                        00            .byte	0
08664 1DFC                        00            .byte	0
08665 1DFD                        C6            .byte	$C6
08666 1DFE                        C6            .byte	$C6
08667 1DFF                        C6            .byte	$C6
08668 1E00                        C6            .byte	$C6
08669 1E01                        7E            .byte	$7E
08670 1E02                        06            .byte	6
08671 1E03                        0C            .byte	$C
08672 1E04                        F8            .byte	$F8
08673 1E05                        00            .byte	0
08674                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E06                        00            .byte	0
08676 1E07                        00            .byte	0
08677 1E08                        00            .byte	0
08678 1E09                        00            .byte	0
08679 1E0A                        00            .byte	0
08680 1E0B                        FE            .byte	$FE
08681 1E0C                        CC            .byte	$CC
08682 1E0D                        18            .byte	$18
08683 1E0E                        30            .byte	$30
08684 1E0F                        66            .byte	$66
08685 1E10                        FE            .byte	$FE
08686 1E11                        00            .byte	0
08687 1E12                        00            .byte	0
08688 1E13                        00            .byte	0
08689                                           ! 1270  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E14                        00            .byte	0
08691 1E15                        00            .byte	0
08692 1E16                        0E            .byte	$E
08693 1E17                        18            .byte	$18
08694 1E18                        18            .byte	$18
08695 1E19                        18            .byte	$18
08696 1E1A                        70            .byte	$70
08697 1E1B                        18            .byte	$18
08698 1E1C                        18            .byte	$18
08699 1E1D                        18            .byte	$18
08700 1E1E                        0E            .byte	$E
08701 1E1F                        00            .byte	0
08702 1E20                        00            .byte	0
08703 1E21                        00            .byte	0
08704                                           ! 1271  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E22                        00            .byte	0
08706 1E23                        00            .byte	0
08707 1E24                        18            .byte	$18
08708 1E25                        18            .byte	$18
08709 1E26                        18            .byte	$18
08710 1E27                        18            .byte	$18
08711 1E28                        00            .byte	0
08712 1E29                        18            .byte	$18
08713 1E2A                        18            .byte	$18
08714 1E2B                        18            .byte	$18
08715 1E2C                        18            .byte	$18
08716 1E2D                        00            .byte	0
08717 1E2E                        00            .byte	0
08718 1E2F                        00            .byte	0
08719                                           ! 1272  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08720 1E30                        00            .byte	0
08721 1E31                        00            .byte	0
08722 1E32                        70            .byte	$70
08723 1E33                        18            .byte	$18
08724 1E34                        18            .byte	$18
08725 1E35                        18            .byte	$18
08726 1E36                        0E            .byte	$E
08727 1E37                        18            .byte	$18
08728 1E38                        18            .byte	$18
08729 1E39                        18            .byte	$18
08730 1E3A                        70            .byte	$70
08731 1E3B                        00            .byte	0
08732 1E3C                        00            .byte	0
08733 1E3D                        00            .byte	0
08734                                           ! 1273  0x00, 0x00, 0x76, 0xdc, 0x00,
08735 1E3E                        00            .byte	0
08736 1E3F                        00            .byte	0
08737 1E40                        76            .byte	$76
08738 1E41                        DC            .byte	$DC
08739                                           ! 1273  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08740 1E42                        00            .byte	0
08741 1E43                        00            .byte	0
08742 1E44                        00            .byte	0
08743 1E45                        00            .byte	0
08744 1E46                        00            .byte	0
08745 1E47                        00            .byte	0
08746 1E48                        00            .byte	0
08747 1E49                        00            .byte	0
08748 1E4A                        00            .byte	0
08749 1E4B                        00            .byte	0
08750                                           ! 1274  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E4C                        00            .byte	0
08752 1E4D                        00            .byte	0
08753 1E4E                        00            .byte	0
08754 1E4F                        00            .byte	0
08755 1E50                        10            .byte	$10
08756 1E51                        38            .byte	$38
08757 1E52                        6C            .byte	$6C
08758 1E53                        C6            .byte	$C6
08759 1E54                        C6            .byte	$C6
08760 1E55                        FE            .byte	$FE
08761 1E56                        00            .byte	0
08762 1E57                        00            .byte	0
08763 1E58                        00            .byte	0
08764 1E59                        00            .byte	0
08765                                           ! 1275  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E5A                        00            .byte	0
08767 1E5B                        00            .byte	0
08768 1E5C                        3C            .byte	$3C
08769 1E5D                        66            .byte	$66
08770 1E5E                        C2            .byte	$C2
08771 1E5F                        C0            .byte	$C0
08772 1E60                        C0            .byte	$C0
08773 1E61                        C2            .byte	$C2
08774 1E62                        66            .byte	$66
08775 1E63                        3C            .byte	$3C
08776 1E64                        0C            .byte	$C
08777 1E65                        06            .byte	6
08778 1E66                        7C            .byte	$7C
08779 1E67                        00            .byte	0
08780                                           ! 1276  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E68                        00            .byte	0
08782 1E69                        00            .byte	0
08783 1E6A                        CC            .byte	$CC
08784 1E6B                        CC            .byte	$CC
08785 1E6C                        00            .byte	0
08786 1E6D                        CC            .byte	$CC
08787 1E6E                        CC            .byte	$CC
08788 1E6F                        CC            .byte	$CC
08789 1E70                        CC            .byte	$CC
08790 1E71                        CC            .byte	$CC
08791 1E72                        76            .byte	$76
08792 1E73                        00            .byte	0
08793 1E74                        00            .byte	0
08794 1E75                        00            .byte	0
08795                                           ! 1277  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E76                        00            .byte	0
08797 1E77                        0C            .byte	$C
08798 1E78                        18            .byte	$18
08799 1E79                        30            .byte	$30
08800 1E7A                        00            .byte	0
08801 1E7B                        7C            .byte	$7C
08802 1E7C                        C6            .byte	$C6
08803 1E7D                        FE            .byte	$FE
08804 1E7E                        C0            .byte	$C0
08805 1E7F                        C6            .byte	$C6
08806 1E80                        7C            .byte	$7C
08807 1E81                        00            .byte	0
08808 1E82                        00            .byte	0
08809 1E83                        00            .byte	0
08810                                           ! 1278  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E84                        00            .byte	0
08812 1E85                        10            .byte	$10
08813 1E86                        38            .byte	$38
08814 1E87                        6C            .byte	$6C
08815 1E88                        00            .byte	0
08816 1E89                        78            .byte	$78
08817 1E8A                        0C            .byte	$C
08818 1E8B                        7C            .byte	$7C
08819 1E8C                        CC            .byte	$CC
08820 1E8D                        CC            .byte	$CC
08821 1E8E                        76            .byte	$76
08822 1E8F                        00            .byte	0
08823 1E90                        00            .byte	0
08824 1E91                        00            .byte	0
08825                                           ! 1279  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1E92                        00            .byte	0
08827 1E93                        00            .byte	0
08828 1E94                        CC            .byte	$CC
08829 1E95                        CC            .byte	$CC
08830 1E96                        00            .byte	0
08831 1E97                        78            .byte	$78
08832 1E98                        0C            .byte	$C
08833 1E99                        7C            .byte	$7C
08834 1E9A                        CC            .byte	$CC
08835 1E9B                        CC            .byte	$CC
08836 1E9C                        76            .byte	$76
08837 1E9D                        00            .byte	0
08838 1E9E                        00            .byte	0
08839 1E9F                        00            .byte	0
08840                                           ! 1280  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EA0                        00            .byte	0
08842 1EA1                        60            .byte	$60
08843 1EA2                        30            .byte	$30
08844 1EA3                        18            .byte	$18
08845 1EA4                        00            .byte	0
08846 1EA5                        78            .byte	$78
08847 1EA6                        0C            .byte	$C
08848 1EA7                        7C            .byte	$7C
08849 1EA8                        CC            .byte	$CC
08850 1EA9                        CC            .byte	$CC
08851 1EAA                        76            .byte	$76
08852 1EAB                        00            .byte	0
08853 1EAC                        00            .byte	0
08854 1EAD                        00            .byte	0
08855                                           ! 1281  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EAE                        00            .byte	0
08857 1EAF                        38            .byte	$38
08858 1EB0                        6C            .byte	$6C
08859 1EB1                        38            .byte	$38
08860 1EB2                        00            .byte	0
08861 1EB3                        78            .byte	$78
08862 1EB4                        0C            .byte	$C
08863 1EB5                        7C            .byte	$7C
08864 1EB6                        CC            .byte	$CC
08865 1EB7                        CC            .byte	$CC
08866 1EB8                        76            .byte	$76
08867 1EB9                        00            .byte	0
08868 1EBA                        00            .byte	0
08869 1EBB                        00            .byte	0
08870                                           ! 1282  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1EBC                        00            .byte	0
08872 1EBD                        00            .byte	0
08873 1EBE                        00            .byte	0
08874 1EBF                        00            .byte	0
08875 1EC0                        3C            .byte	$3C
08876 1EC1                        66            .byte	$66
08877 1EC2                        60            .byte	$60
08878 1EC3                        66            .byte	$66
08879 1EC4                        3C            .byte	$3C
08880 1EC5                        0C            .byte	$C
08881 1EC6                        06            .byte	6
08882 1EC7                        3C            .byte	$3C
08883 1EC8                        00            .byte	0
08884 1EC9                        00            .byte	0
08885                                           ! 1283  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1ECA                        00            .byte	0
08887 1ECB                        10            .byte	$10
08888 1ECC                        38            .byte	$38
08889 1ECD                        6C            .byte	$6C
08890 1ECE                        00            .byte	0
08891 1ECF                        7C            .byte	$7C
08892 1ED0                        C6            .byte	$C6
08893 1ED1                        FE            .byte	$FE
08894 1ED2                        C0            .byte	$C0
08895 1ED3                        C6            .byte	$C6
08896 1ED4                        7C            .byte	$7C
08897 1ED5                        00            .byte	0
08898 1ED6                        00            .byte	0
08899 1ED7                        00            .byte	0
08900                                           ! 1284  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1ED8                        00            .byte	0
08902 1ED9                        00            .byte	0
08903 1EDA                        CC            .byte	$CC
08904 1EDB                        CC            .byte	$CC
08905 1EDC                        00            .byte	0
08906 1EDD                        7C            .byte	$7C
08907 1EDE                        C6            .byte	$C6
08908 1EDF                        FE            .byte	$FE
08909 1EE0                        C0            .byte	$C0
08910 1EE1                        C6            .byte	$C6
08911 1EE2                        7C            .byte	$7C
08912 1EE3                        00            .byte	0
08913 1EE4                        00            .byte	0
08914 1EE5                        00            .byte	0
08915                                           ! 1285  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EE6                        00            .byte	0
08917 1EE7                        60            .byte	$60
08918 1EE8                        30            .byte	$30
08919 1EE9                        18            .byte	$18
08920 1EEA                        00            .byte	0
08921 1EEB                        7C            .byte	$7C
08922 1EEC                        C6            .byte	$C6
08923 1EED                        FE            .byte	$FE
08924 1EEE                        C0            .byte	$C0
08925 1EEF                        C6            .byte	$C6
08926 1EF0                        7C            .byte	$7C
08927 1EF1                        00            .byte	0
08928 1EF2                        00            .byte	0
08929 1EF3                        00            .byte	0
08930                                           ! 1286  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1EF4                        00            .byte	0
08932 1EF5                        00            .byte	0
08933 1EF6                        66            .byte	$66
08934 1EF7                        66            .byte	$66
08935 1EF8                        00            .byte	0
08936 1EF9                        38            .byte	$38
08937 1EFA                        18            .byte	$18
08938 1EFB                        18            .byte	$18
08939 1EFC                        18            .byte	$18
08940 1EFD                        18            .byte	$18
08941 1EFE                        3C            .byte	$3C
08942 1EFF                        00            .byte	0
08943 1F00                        00            .byte	0
08944 1F01                        00            .byte	0
08945                                           ! 1287  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F02                        00            .byte	0
08947 1F03                        18            .byte	$18
08948 1F04                        3C            .byte	$3C
08949 1F05                        66            .byte	$66
08950 1F06                        00            .byte	0
08951 1F07                        38            .byte	$38
08952 1F08                        18            .byte	$18
08953 1F09                        18            .byte	$18
08954 1F0A                        18            .byte	$18
08955 1F0B                        18            .byte	$18
08956 1F0C                        3C            .byte	$3C
08957 1F0D                        00            .byte	0
08958 1F0E                        00            .byte	0
08959 1F0F                        00            .byte	0
08960                                           ! 1288  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F10                        00            .byte	0
08962 1F11                        60            .byte	$60
08963 1F12                        30            .byte	$30
08964 1F13                        18            .byte	$18
08965 1F14                        00            .byte	0
08966 1F15                        38            .byte	$38
08967 1F16                        18            .byte	$18
08968 1F17                        18            .byte	$18
08969 1F18                        18            .byte	$18
08970 1F19                        18            .byte	$18
08971 1F1A                        3C            .byte	$3C
08972 1F1B                        00            .byte	0
08973 1F1C                        00            .byte	0
08974 1F1D                        00            .byte	0
08975                                           ! 1289  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F1E                        00            .byte	0
08977 1F1F                        C6            .byte	$C6
08978 1F20                        C6            .byte	$C6
08979 1F21                        10            .byte	$10
08980 1F22                        38            .byte	$38
08981 1F23                        6C            .byte	$6C
08982 1F24                        C6            .byte	$C6
08983 1F25                        C6            .byte	$C6
08984 1F26                        FE            .byte	$FE
08985 1F27                        C6            .byte	$C6
08986 1F28                        C6            .byte	$C6
08987 1F29                        00            .byte	0
08988 1F2A                        00            .byte	0
08989 1F2B                        00            .byte	0
08990                                           ! 1290  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F2C                        38            .byte	$38
08992 1F2D                        6C            .byte	$6C
08993 1F2E                        38            .byte	$38
08994 1F2F                        00            .byte	0
08995 1F30                        38            .byte	$38
08996 1F31                        6C            .byte	$6C
08997 1F32                        C6            .byte	$C6
08998 1F33                        C6            .byte	$C6
08999 1F34                        FE            .byte	$FE
09000 1F35                        C6            .byte	$C6
09001 1F36                        C6            .byte	$C6
09002 1F37                        00            .byte	0
09003 1F38                        00            .byte	0
09004 1F39                        00            .byte	0
09005                                           ! 1291  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F3A                        18            .byte	$18
09007 1F3B                        30            .byte	$30
09008 1F3C                        60            .byte	$60
09009 1F3D                        00            .byte	0
09010 1F3E                        FE            .byte	$FE
09011 1F3F                        66            .byte	$66
09012 1F40                        60            .byte	$60
09013 1F41                        7C            .byte	$7C
09014 1F42                        60            .byte	$60
09015 1F43                        66            .byte	$66
09016 1F44                        FE            .byte	$FE
09017 1F45                        00            .byte	0
09018 1F46                        00            .byte	0
09019 1F47                        00            .byte	0
09020                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F48                        00            .byte	0
09022 1F49                        00            .byte	0
09023 1F4A                        00            .byte	0
09024 1F4B                        00            .byte	0
09025 1F4C                        CC            .byte	$CC
09026 1F4D                        76            .byte	$76
09027 1F4E                        36            .byte	$36
09028 1F4F                        7E            .byte	$7E
09029 1F50                        D8            .byte	$D8
09030 1F51                        D8            .byte	$D8
09031 1F52                        6E            .byte	$6E
09032 1F53                        00            .byte	0
09033 1F54                        00            .byte	0
09034 1F55                        00            .byte	0
09035                                           ! 1293  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F56                        00            .byte	0
09037 1F57                        00            .byte	0
09038 1F58                        3E            .byte	$3E
09039 1F59                        6C            .byte	$6C
09040 1F5A                        CC            .byte	$CC
09041 1F5B                        CC            .byte	$CC
09042 1F5C                        FE            .byte	$FE
09043 1F5D                        CC            .byte	$CC
09044 1F5E                        CC            .byte	$CC
09045 1F5F                        CC            .byte	$CC
09046 1F60                        CE            .byte	$CE
09047 1F61                        00            .byte	0
09048 1F62                        00            .byte	0
09049 1F63                        00            .byte	0
09050                                           ! 1294  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F64                        00            .byte	0
09052 1F65                        10            .byte	$10
09053 1F66                        38            .byte	$38
09054 1F67                        6C            .byte	$6C
09055 1F68                        00            .byte	0
09056 1F69                        7C            .byte	$7C
09057 1F6A                        C6            .byte	$C6
09058 1F6B                        C6            .byte	$C6
09059 1F6C                        C6            .byte	$C6
09060 1F6D                        C6            .byte	$C6
09061 1F6E                        7C            .byte	$7C
09062 1F6F                        00            .byte	0
09063 1F70                        00            .byte	0
09064 1F71                        00            .byte	0
09065                                           ! 1295  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F72                        00            .byte	0
09067 1F73                        00            .byte	0
09068 1F74                        C6            .byte	$C6
09069 1F75                        C6            .byte	$C6
09070 1F76                        00            .byte	0
09071 1F77                        7C            .byte	$7C
09072 1F78                        C6            .byte	$C6
09073 1F79                        C6            .byte	$C6
09074 1F7A                        C6            .byte	$C6
09075 1F7B                        C6            .byte	$C6
09076 1F7C                        7C            .byte	$7C
09077 1F7D                        00            .byte	0
09078 1F7E                        00            .byte	0
09079 1F7F                        00            .byte	0
09080                                           ! 1296  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09081 1F80                        00            .byte	0
09082 1F81                        60            .byte	$60
09083 1F82                        30            .byte	$30
09084 1F83                        18            .byte	$18
09085 1F84                        00            .byte	0
09086 1F85                        7C            .byte	$7C
09087 1F86                        C6            .byte	$C6
09088 1F87                        C6            .byte	$C6
09089 1F88                        C6            .byte	$C6
09090 1F89                        C6            .byte	$C6
09091 1F8A                        7C            .byte	$7C
09092 1F8B                        00            .byte	0
09093 1F8C                        00            .byte	0
09094 1F8D                        00            .byte	0
09095                                           ! 1297  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0
09096 1F8E                        00            .byte	0
09097 1F8F                        30            .byte	$30
09098 1F90                        78            .byte	$78
09099 1F91                        CC            .byte	$CC
09100 1F92                        00            .byte	0
09101 1F93                        CC            .byte	$CC
09102                                           ! 1297 xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09103 1F94                        CC            .byte	$CC
09104 1F95                        CC            .byte	$CC
09105 1F96                        CC            .byte	$CC
09106 1F97                        CC            .byte	$CC
09107 1F98                        76            .byte	$76
09108 1F99                        00            .byte	0
09109 1F9A                        00            .byte	0
09110 1F9B                        00            .byte	0
09111                                           ! 1298  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1F9C                        00            .byte	0
09113 1F9D                        60            .byte	$60
09114 1F9E                        30            .byte	$30
09115 1F9F                        18            .byte	$18
09116 1FA0                        00            .byte	0
09117 1FA1                        CC            .byte	$CC
09118 1FA2                        CC            .byte	$CC
09119 1FA3                        CC            .byte	$CC
09120 1FA4                        CC            .byte	$CC
09121 1FA5                        CC            .byte	$CC
09122 1FA6                        76            .byte	$76
09123 1FA7                        00            .byte	0
09124 1FA8                        00            .byte	0
09125 1FA9                        00            .byte	0
09126                                           ! 1299  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FAA                        00            .byte	0
09128 1FAB                        00            .byte	0
09129 1FAC                        C6            .byte	$C6
09130 1FAD                        C6            .byte	$C6
09131 1FAE                        00            .byte	0
09132 1FAF                        C6            .byte	$C6
09133 1FB0                        C6            .byte	$C6
09134 1FB1                        C6            .byte	$C6
09135 1FB2                        C6            .byte	$C6
09136 1FB3                        7E            .byte	$7E
09137 1FB4                        06            .byte	6
09138 1FB5                        0C            .byte	$C
09139 1FB6                        78            .byte	$78
09140 1FB7                        00            .byte	0
09141                                           ! 1300  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FB8                        00            .byte	0
09143 1FB9                        C6            .byte	$C6
09144 1FBA                        C6            .byte	$C6
09145 1FBB                        38            .byte	$38
09146 1FBC                        6C            .byte	$6C
09147 1FBD                        C6            .byte	$C6
09148 1FBE                        C6            .byte	$C6
09149 1FBF                        C6            .byte	$C6
09150 1FC0                        C6            .byte	$C6
09151 1FC1                        6C            .byte	$6C
09152 1FC2                        38            .byte	$38
09153 1FC3                        00            .byte	0
09154 1FC4                        00            .byte	0
09155 1FC5                        00            .byte	0
09156                                           ! 1301  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FC6                        00            .byte	0
09158 1FC7                        C6            .byte	$C6
09159 1FC8                        C6            .byte	$C6
09160 1FC9                        00            .byte	0
09161 1FCA                        C6            .byte	$C6
09162 1FCB                        C6            .byte	$C6
09163 1FCC                        C6            .byte	$C6
09164 1FCD                        C6            .byte	$C6
09165 1FCE                        C6            .byte	$C6
09166 1FCF                        C6            .byte	$C6
09167 1FD0                        7C            .byte	$7C
09168 1FD1                        00            .byte	0
09169 1FD2                        00            .byte	0
09170 1FD3                        00            .byte	0
09171                                           ! 1302  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FD4                        00            .byte	0
09173 1FD5                        18            .byte	$18
09174 1FD6                        18            .byte	$18
09175 1FD7                        3C            .byte	$3C
09176 1FD8                        66            .byte	$66
09177 1FD9                        60            .byte	$60
09178 1FDA                        60            .byte	$60
09179 1FDB                        66            .byte	$66
09180 1FDC                        3C            .byte	$3C
09181 1FDD                        18            .byte	$18
09182 1FDE                        18            .byte	$18
09183 1FDF                        00            .byte	0
09184 1FE0                        00            .byte	0
09185 1FE1                        00            .byte	0
09186                                           ! 1303  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FE2                        00            .byte	0
09188 1FE3                        38            .byte	$38
09189 1FE4                        6C            .byte	$6C
09190 1FE5                        64            .byte	$64
09191 1FE6                        60            .byte	$60
09192 1FE7                        F0            .byte	$F0
09193 1FE8                        60            .byte	$60
09194 1FE9                        60            .byte	$60
09195 1FEA                        60            .byte	$60
09196 1FEB                        E6            .byte	$E6
09197 1FEC                        FC            .byte	$FC
09198 1FED                        00            .byte	0
09199 1FEE                        00            .byte	0
09200 1FEF                        00            .byte	0
09201                                           ! 1304  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 1FF0                        00            .byte	0
09203 1FF1                        00            .byte	0
09204 1FF2                        66            .byte	$66
09205 1FF3                        66            .byte	$66
09206 1FF4                        3C            .byte	$3C
09207 1FF5                        18            .byte	$18
09208 1FF6                        7E            .byte	$7E
09209 1FF7                        18            .byte	$18
09210 1FF8                        7E            .byte	$7E
09211 1FF9                        18            .byte	$18
09212 1FFA                        18            .byte	$18
09213 1FFB                        00            .byte	0
09214 1FFC                        00            .byte	0
09215 1FFD                        00            .byte	0
09216                                           ! 1305  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 1FFE                        00            .byte	0
09218 1FFF                        F8            .byte	$F8
09219 2000                        CC            .byte	$CC
09220 2001                        CC            .byte	$CC
09221 2002                        F8            .byte	$F8
09222 2003                        C4            .byte	$C4
09223 2004                        CC            .byte	$CC
09224 2005                        DE            .byte	$DE
09225 2006                        CC            .byte	$CC
09226 2007                        CC            .byte	$CC
09227 2008                        C6            .byte	$C6
09228 2009                        00            .byte	0
09229 200A                        00            .byte	0
09230 200B                        00            .byte	0
09231                                           ! 1306  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 200C                        00            .byte	0
09233 200D                        0E            .byte	$E
09234 200E                        1B            .byte	$1B
09235 200F                        18            .byte	$18
09236 2010                        18            .byte	$18
09237 2011                        18            .byte	$18
09238 2012                        7E            .byte	$7E
09239 2013                        18            .byte	$18
09240 2014                        18            .byte	$18
09241 2015                        18            .byte	$18
09242 2016                        18            .byte	$18
09243 2017                        D8            .byte	$D8
09244 2018                        70            .byte	$70
09245 2019                        00            .byte	0
09246                                           ! 1307  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 201A                        00            .byte	0
09248 201B                        18            .byte	$18
09249 201C                        30            .byte	$30
09250 201D                        60            .byte	$60
09251 201E                        00            .byte	0
09252 201F                        78            .byte	$78
09253 2020                        0C            .byte	$C
09254 2021                        7C            .byte	$7C
09255 2022                        CC            .byte	$CC
09256 2023                        CC            .byte	$CC
09257 2024                        76            .byte	$76
09258 2025                        00            .byte	0
09259 2026                        00            .byte	0
09260 2027                        00            .byte	0
09261                                           ! 1308  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 2028                        00            .byte	0
09263 2029                        0C            .byte	$C
09264 202A                        18            .byte	$18
09265 202B                        30            .byte	$30
09266 202C                        00            .byte	0
09267 202D                        38            .byte	$38
09268 202E                        18            .byte	$18
09269 202F                        18            .byte	$18
09270 2030                        18            .byte	$18
09271 2031                        18            .byte	$18
09272 2032                        3C            .byte	$3C
09273 2033                        00            .byte	0
09274 2034                        00            .byte	0
09275 2035                        00            .byte	0
09276                                           ! 1309  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 2036                        00            .byte	0
09278 2037                        18            .byte	$18
09279 2038                        30            .byte	$30
09280 2039                        60            .byte	$60
09281 203A                        00            .byte	0
09282 203B                        7C            .byte	$7C
09283 203C                        C6            .byte	$C6
09284 203D                        C6            .byte	$C6
09285 203E                        C6            .byte	$C6
09286 203F                        C6            .byte	$C6
09287 2040                        7C            .byte	$7C
09288 2041                        00            .byte	0
09289 2042                        00            .byte	0
09290 2043                        00            .byte	0
09291                                           ! 1310  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 2044                        00            .byte	0
09293 2045                        18            .byte	$18
09294 2046                        30            .byte	$30
09295 2047                        60            .byte	$60
09296 2048                        00            .byte	0
09297 2049                        CC            .byte	$CC
09298 204A                        CC            .byte	$CC
09299 204B                        CC            .byte	$CC
09300 204C                        CC            .byte	$CC
09301 204D                        CC            .byte	$CC
09302 204E                        76            .byte	$76
09303 204F                        00            .byte	0
09304 2050                        00            .byte	0
09305 2051                        00            .byte	0
09306                                           ! 1311  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2052                        00            .byte	0
09308 2053                        00            .byte	0
09309 2054                        76            .byte	$76
09310 2055                        DC            .byte	$DC
09311 2056                        00            .byte	0
09312 2057                        DC            .byte	$DC
09313 2058                        66            .byte	$66
09314 2059                        66            .byte	$66
09315 205A                        66            .byte	$66
09316 205B                        66            .byte	$66
09317 205C                        66            .byte	$66
09318 205D                        00            .byte	0
09319 205E                        00            .byte	0
09320 205F                        00            .byte	0
09321                                           ! 1312  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 2060                        76            .byte	$76
09323 2061                        DC            .byte	$DC
09324 2062                        00            .byte	0
09325 2063                        C6            .byte	$C6
09326 2064                        E6            .byte	$E6
09327 2065                        F6            .byte	$F6
09328 2066                        FE            .byte	$FE
09329 2067                        DE            .byte	$DE
09330 2068                        CE            .byte	$CE
09331 2069                        C6            .byte	$C6
09332 206A                        C6            .byte	$C6
09333 206B                        00            .byte	0
09334 206C                        00            .byte	0
09335 206D                        00            .byte	0
09336                                           ! 1313  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 206E                        00            .byte	0
09338 206F                        3C            .byte	$3C
09339 2070                        6C            .byte	$6C
09340 2071                        6C            .byte	$6C
09341 2072                        3E            .byte	$3E
09342 2073                        00            .byte	0
09343 2074                        7E            .byte	$7E
09344 2075                        00            .byte	0
09345 2076                        00            .byte	0
09346 2077                        00            .byte	0
09347 2078                        00            .byte	0
09348 2079                        00            .byte	0
09349 207A                        00            .byte	0
09350 207B                        00            .byte	0
09351                                           ! 1314  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 207C                        00            .byte	0
09353 207D                        38            .byte	$38
09354 207E                        6C            .byte	$6C
09355 207F                        6C            .byte	$6C
09356 2080                        38            .byte	$38
09357 2081                        00            .byte	0
09358 2082                        7C            .byte	$7C
09359 2083                        00            .byte	0
09360 2084                        00            .byte	0
09361 2085                        00            .byte	0
09362 2086                        00            .byte	0
09363 2087                        00            .byte	0
09364 2088                        00            .byte	0
09365 2089                        00            .byte	0
09366                                           ! 1315  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 208A                        00            .byte	0
09368 208B                        00            .byte	0
09369 208C                        30            .byte	$30
09370 208D                        30            .byte	$30
09371 208E                        00            .byte	0
09372 208F                        30            .byte	$30
09373 2090                        30            .byte	$30
09374 2091                        60            .byte	$60
09375 2092                        C6            .byte	$C6
09376 2093                        C6            .byte	$C6
09377 2094                        7C            .byte	$7C
09378 2095                        00            .byte	0
09379 2096                        00            .byte	0
09380 2097                        00            .byte	0
09381                                           ! 1316  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 2098                        00            .byte	0
09383 2099                        00            .byte	0
09384 209A                        00            .byte	0
09385 209B                        00            .byte	0
09386 209C                        00            .byte	0
09387 209D                        00            .byte	0
09388 209E                        FE            .byte	$FE
09389 209F                        C0            .byte	$C0
09390 20A0                        C0            .byte	$C0
09391 20A1                        C0            .byte	$C0
09392 20A2                        00            .byte	0
09393 20A3                        00            .byte	0
09394 20A4                        00            .byte	0
09395 20A5                        00            .byte	0
09396                                           ! 1317  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20A6                        00            .byte	0
09398 20A7                        00            .byte	0
09399 20A8                        00            .byte	0
09400 20A9                        00            .byte	0
09401 20AA                        00            .byte	0
09402 20AB                        00            .byte	0
09403 20AC                        FE            .byte	$FE
09404 20AD                        06            .byte	6
09405 20AE                        06            .byte	6
09406 20AF                        06            .byte	6
09407 20B0                        00            .byte	0
09408 20B1                        00            .byte	0
09409 20B2                        00            .byte	0
09410 20B3                        00            .byte	0
09411                                           ! 1318  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20B4                        00            .byte	0
09413 20B5                        C0            .byte	$C0
09414 20B6                        C0            .byte	$C0
09415 20B7                        C6            .byte	$C6
09416 20B8                        CC            .byte	$CC
09417 20B9                        D8            .byte	$D8
09418 20BA                        30            .byte	$30
09419 20BB                        60            .byte	$60
09420 20BC                        DC            .byte	$DC
09421 20BD                        86            .byte	$86
09422 20BE                        0C            .byte	$C
09423 20BF                        18            .byte	$18
09424 20C0                        3E            .byte	$3E
09425 20C1                        00            .byte	0
09426                                           ! 1319  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20C2                        00            .byte	0
09428 20C3                        C0            .byte	$C0
09429 20C4                        C0            .byte	$C0
09430 20C5                        C6            .byte	$C6
09431 20C6                        CC            .byte	$CC
09432 20C7                        D8            .byte	$D8
09433 20C8                        30            .byte	$30
09434 20C9                        66            .byte	$66
09435 20CA                        CE            .byte	$CE
09436 20CB                        9E            .byte	$9E
09437 20CC                        3E            .byte	$3E
09438 20CD                        06            .byte	6
09439 20CE                        06            .byte	6
09440 20CF                        00            .byte	0
09441                                           ! 1320  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09442 20D0                        00            .byte	0
09443 20D1                        00            .byte	0
09444 20D2                        18            .byte	$18
09445 20D3                        18            .byte	$18
09446 20D4                        00            .byte	0
09447 20D5                        18            .byte	$18
09448 20D6                        18            .byte	$18
09449 20D7                        3C            .byte	$3C
09450 20D8                        3C            .byte	$3C
09451 20D9                        3C            .byte	$3C
09452 20DA                        18            .byte	$18
09453 20DB                        00            .byte	0
09454 20DC                        00            .byte	0
09455 20DD                        00            .byte	0
09456                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6
09457 20DE                        00            .byte	0
09458 20DF                        00            .byte	0
09459 20E0                        00            .byte	0
09460 20E1                        00            .byte	0
09461 20E2                        36            .byte	$36
09462 20E3                        6C            .byte	$6C
09463 20E4                        D8            .byte	$D8
09464                                           ! 1321 c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09465 20E5                        6C            .byte	$6C
09466 20E6                        36            .byte	$36
09467 20E7                        00            .byte	0
09468 20E8                        00            .byte	0
09469 20E9                        00            .byte	0
09470 20EA                        00            .byte	0
09471 20EB                        00            .byte	0
09472                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 20EC                        00            .byte	0
09474 20ED                        00            .byte	0
09475 20EE                        00            .byte	0
09476 20EF                        00            .byte	0
09477 20F0                        D8            .byte	$D8
09478 20F1                        6C            .byte	$6C
09479 20F2                        36            .byte	$36
09480 20F3                        6C            .byte	$6C
09481 20F4                        D8            .byte	$D8
09482 20F5                        00            .byte	0
09483 20F6                        00            .byte	0
09484 20F7                        00            .byte	0
09485 20F8                        00            .byte	0
09486 20F9                        00            .byte	0
09487                                           ! 1323  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 20FA                        11            .byte	$11
09489 20FB                        44            .byte	$44
09490 20FC                        11            .byte	$11
09491 20FD                        44            .byte	$44
09492 20FE                        11            .byte	$11
09493 20FF                        44            .byte	$44
09494 2100                        11            .byte	$11
09495 2101                        44            .byte	$44
09496 2102                        11            .byte	$11
09497 2103                        44            .byte	$44
09498 2104                        11            .byte	$11
09499 2105                        44            .byte	$44
09500 2106                        11            .byte	$11
09501 2107                        44            .byte	$44
09502                                           ! 1324  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 2108                        55            .byte	$55
09504 2109                        AA            .byte	$AA
09505 210A                        55            .byte	$55
09506 210B                        AA            .byte	$AA
09507 210C                        55            .byte	$55
09508 210D                        AA            .byte	$AA
09509 210E                        55            .byte	$55
09510 210F                        AA            .byte	$AA
09511 2110                        55            .byte	$55
09512 2111                        AA            .byte	$AA
09513 2112                        55            .byte	$55
09514 2113                        AA            .byte	$AA
09515 2114                        55            .byte	$55
09516 2115                        AA            .byte	$AA
09517                                           ! 1325  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 2116                        DD            .byte	$DD
09519 2117                        77            .byte	$77
09520 2118                        DD            .byte	$DD
09521 2119                        77            .byte	$77
09522 211A                        DD            .byte	$DD
09523 211B                        77            .byte	$77
09524 211C                        DD            .byte	$DD
09525 211D                        77            .byte	$77
09526 211E                        DD            .byte	$DD
09527 211F                        77            .byte	$77
09528 2120                        DD            .byte	$DD
09529 2121                        77            .byte	$77
09530 2122                        DD            .byte	$DD
09531 2123                        77            .byte	$77
09532                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2124                        18            .byte	$18
09534 2125                        18            .byte	$18
09535 2126                        18            .byte	$18
09536 2127                        18            .byte	$18
09537 2128                        18            .byte	$18
09538 2129                        18            .byte	$18
09539 212A                        18            .byte	$18
09540 212B                        18            .byte	$18
09541 212C                        18            .byte	$18
09542 212D                        18            .byte	$18
09543 212E                        18            .byte	$18
09544 212F                        18            .byte	$18
09545 2130                        18            .byte	$18
09546 2131                        18            .byte	$18
09547                                           ! 1327  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2132                        18            .byte	$18
09549 2133                        18            .byte	$18
09550 2134                        18            .byte	$18
09551 2135                        18            .byte	$18
09552 2136                        18            .byte	$18
09553 2137                        18            .byte	$18
09554 2138                        18            .byte	$18
09555 2139                        F8            .byte	$F8
09556 213A                        18            .byte	$18
09557 213B                        18            .byte	$18
09558 213C                        18            .byte	$18
09559 213D                        18            .byte	$18
09560 213E                        18            .byte	$18
09561 213F                        18            .byte	$18
09562                                           ! 1328  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 2140                        18            .byte	$18
09564 2141                        18            .byte	$18
09565 2142                        18            .byte	$18
09566 2143                        18            .byte	$18
09567 2144                        18            .byte	$18
09568 2145                        F8            .byte	$F8
09569 2146                        18            .byte	$18
09570 2147                        F8            .byte	$F8
09571 2148                        18            .byte	$18
09572 2149                        18            .byte	$18
09573 214A                        18            .byte	$18
09574 214B                        18            .byte	$18
09575 214C                        18            .byte	$18
09576 214D                        18            .byte	$18
09577                                           ! 1329  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 214E                        36            .byte	$36
09579 214F                        36            .byte	$36
09580 2150                        36            .byte	$36
09581 2151                        36            .byte	$36
09582 2152                        36            .byte	$36
09583 2153                        36            .byte	$36
09584 2154                        36            .byte	$36
09585 2155                        F6            .byte	$F6
09586 2156                        36            .byte	$36
09587 2157                        36            .byte	$36
09588 2158                        36            .byte	$36
09589 2159                        36            .byte	$36
09590 215A                        36            .byte	$36
09591 215B                        36            .byte	$36
09592                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 215C                        00            .byte	0
09594 215D                        00            .byte	0
09595 215E                        00            .byte	0
09596 215F                        00            .byte	0
09597 2160                        00            .byte	0
09598 2161                        00            .byte	0
09599 2162                        00            .byte	0
09600 2163                        FE            .byte	$FE
09601 2164                        36            .byte	$36
09602 2165                        36            .byte	$36
09603 2166                        36            .byte	$36
09604 2167                        36            .byte	$36
09605 2168                        36            .byte	$36
09606 2169                        36            .byte	$36
09607                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 216A                        00            .byte	0
09609 216B                        00            .byte	0
09610 216C                        00            .byte	0
09611 216D                        00            .byte	0
09612 216E                        00            .byte	0
09613 216F                        F8            .byte	$F8
09614 2170                        18            .byte	$18
09615 2171                        F8            .byte	$F8
09616 2172                        18            .byte	$18
09617 2173                        18            .byte	$18
09618 2174                        18            .byte	$18
09619 2175                        18            .byte	$18
09620 2176                        18            .byte	$18
09621 2177                        18            .byte	$18
09622                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 2178                        36            .byte	$36
09624 2179                        36            .byte	$36
09625 217A                        36            .byte	$36
09626 217B                        36            .byte	$36
09627 217C                        36            .byte	$36
09628 217D                        F6            .byte	$F6
09629 217E                        06            .byte	6
09630 217F                        F6            .byte	$F6
09631 2180                        36            .byte	$36
09632 2181                        36            .byte	$36
09633 2182                        36            .byte	$36
09634 2183                        36            .byte	$36
09635 2184                        36            .byte	$36
09636 2185                        36            .byte	$36
09637                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 2186                        36            .byte	$36
09639 2187                        36            .byte	$36
09640 2188                        36            .byte	$36
09641 2189                        36            .byte	$36
09642 218A                        36            .byte	$36
09643 218B                        36            .byte	$36
09644 218C                        36            .byte	$36
09645 218D                        36            .byte	$36
09646 218E                        36            .byte	$36
09647 218F                        36            .byte	$36
09648 2190                        36            .byte	$36
09649 2191                        36            .byte	$36
09650 2192                        36            .byte	$36
09651 2193                        36            .byte	$36
09652                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 2194                        00            .byte	0
09654 2195                        00            .byte	0
09655 2196                        00            .byte	0
09656 2197                        00            .byte	0
09657 2198                        00            .byte	0
09658 2199                        FE            .byte	$FE
09659 219A                        06            .byte	6
09660 219B                        F6            .byte	$F6
09661 219C                        36            .byte	$36
09662 219D                        36            .byte	$36
09663 219E                        36            .byte	$36
09664 219F                        36            .byte	$36
09665 21A0                        36            .byte	$36
09666 21A1                        36            .byte	$36
09667                                           ! 1335  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21A2                        36            .byte	$36
09669 21A3                        36            .byte	$36
09670 21A4                        36            .byte	$36
09671 21A5                        36            .byte	$36
09672 21A6                        36            .byte	$36
09673 21A7                        F6            .byte	$F6
09674 21A8                        06            .byte	6
09675 21A9                        FE            .byte	$FE
09676 21AA                        00            .byte	0
09677 21AB                        00            .byte	0
09678 21AC                        00            .byte	0
09679 21AD                        00            .byte	0
09680 21AE                        00            .byte	0
09681 21AF                        00            .byte	0
09682                                           ! 1336  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21B0                        36            .byte	$36
09684 21B1                        36            .byte	$36
09685 21B2                        36            .byte	$36
09686 21B3                        36            .byte	$36
09687 21B4                        36            .byte	$36
09688 21B5                        36            .byte	$36
09689 21B6                        36            .byte	$36
09690 21B7                        FE            .byte	$FE
09691 21B8                        00            .byte	0
09692 21B9                        00            .byte	0
09693 21BA                        00            .byte	0
09694 21BB                        00            .byte	0
09695 21BC                        00            .byte	0
09696 21BD                        00            .byte	0
09697                                           ! 1337  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21BE                        18            .byte	$18
09699 21BF                        18            .byte	$18
09700 21C0                        18            .byte	$18
09701 21C1                        18            .byte	$18
09702 21C2                        18            .byte	$18
09703 21C3                        F8            .byte	$F8
09704 21C4                        18            .byte	$18
09705 21C5                        F8            .byte	$F8
09706 21C6                        00            .byte	0
09707 21C7                        00            .byte	0
09708 21C8                        00            .byte	0
09709 21C9                        00            .byte	0
09710 21CA                        00            .byte	0
09711 21CB                        00            .byte	0
09712                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21CC                        00            .byte	0
09714 21CD                        00            .byte	0
09715 21CE                        00            .byte	0
09716 21CF                        00            .byte	0
09717 21D0                        00            .byte	0
09718 21D1                        00            .byte	0
09719 21D2                        00            .byte	0
09720 21D3                        F8            .byte	$F8
09721 21D4                        18            .byte	$18
09722 21D5                        18            .byte	$18
09723 21D6                        18            .byte	$18
09724 21D7                        18            .byte	$18
09725 21D8                        18            .byte	$18
09726 21D9                        18            .byte	$18
09727                                           ! 1339  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21DA                        18            .byte	$18
09729 21DB                        18            .byte	$18
09730 21DC                        18            .byte	$18
09731 21DD                        18            .byte	$18
09732 21DE                        18            .byte	$18
09733 21DF                        18            .byte	$18
09734 21E0                        18            .byte	$18
09735 21E1                        1F            .byte	$1F
09736 21E2                        00            .byte	0
09737 21E3                        00            .byte	0
09738 21E4                        00            .byte	0
09739 21E5                        00            .byte	0
09740 21E6                        00            .byte	0
09741 21E7                        00            .byte	0
09742                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21E8                        18            .byte	$18
09744 21E9                        18            .byte	$18
09745 21EA                        18            .byte	$18
09746 21EB                        18            .byte	$18
09747 21EC                        18            .byte	$18
09748 21ED                        18            .byte	$18
09749 21EE                        18            .byte	$18
09750 21EF                        FF            .byte	$FF
09751 21F0                        00            .byte	0
09752 21F1                        00            .byte	0
09753 21F2                        00            .byte	0
09754 21F3                        00            .byte	0
09755 21F4                        00            .byte	0
09756 21F5                        00            .byte	0
09757                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 21F6                        00            .byte	0
09759 21F7                        00            .byte	0
09760 21F8                        00            .byte	0
09761 21F9                        00            .byte	0
09762 21FA                        00            .byte	0
09763 21FB                        00            .byte	0
09764 21FC                        00            .byte	0
09765 21FD                        FF            .byte	$FF
09766 21FE                        18            .byte	$18
09767 21FF                        18            .byte	$18
09768 2200                        18            .byte	$18
09769 2201                        18            .byte	$18
09770 2202                        18            .byte	$18
09771 2203                        18            .byte	$18
09772                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2204                        18            .byte	$18
09774 2205                        18            .byte	$18
09775 2206                        18            .byte	$18
09776 2207                        18            .byte	$18
09777 2208                        18            .byte	$18
09778 2209                        18            .byte	$18
09779 220A                        18            .byte	$18
09780 220B                        1F            .byte	$1F
09781 220C                        18            .byte	$18
09782 220D                        18            .byte	$18
09783 220E                        18            .byte	$18
09784 220F                        18            .byte	$18
09785 2210                        18            .byte	$18
09786 2211                        18            .byte	$18
09787                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2212                        00            .byte	0
09789 2213                        00            .byte	0
09790 2214                        00            .byte	0
09791 2215                        00            .byte	0
09792 2216                        00            .byte	0
09793 2217                        00            .byte	0
09794 2218                        00            .byte	0
09795 2219                        FF            .byte	$FF
09796 221A                        00            .byte	0
09797 221B                        00            .byte	0
09798 221C                        00            .byte	0
09799 221D                        00            .byte	0
09800 221E                        00            .byte	0
09801 221F                        00            .byte	0
09802                                           ! 1344  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09803 2220                        18            .byte	$18
09804 2221                        18            .byte	$18
09805 2222                        18            .byte	$18
09806 2223                        18            .byte	$18
09807 2224                        18            .byte	$18
09808 2225                        18            .byte	$18
09809 2226                        18            .byte	$18
09810 2227                        FF            .byte	$FF
09811 2228                        18            .byte	$18
09812 2229                        18            .byte	$18
09813 222A                        18            .byte	$18
09814 222B                        18            .byte	$18
09815 222C                        18            .byte	$18
09816 222D                        18            .byte	$18
09817                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18,
09818 222E                        18            .byte	$18
09819 222F                        18            .byte	$18
09820 2230                        18            .byte	$18
09821 2231                        18            .byte	$18
09822 2232                        18            .byte	$18
09823 2233                        1F            .byte	$1F
09824 2234                        18            .byte	$18
09825 2235                        1F            .byte	$1F
09826                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18,
09827 2236                        18            .byte	$18
09828 2237                        18            .byte	$18
09829 2238                        18            .byte	$18
09830 2239                        18            .byte	$18
09831 223A                        18            .byte	$18
09832 223B                        18            .byte	$18
09833                                           ! 1346  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 223C                        36            .byte	$36
09835 223D                        36            .byte	$36
09836 223E                        36            .byte	$36
09837 223F                        36            .byte	$36
09838 2240                        36            .byte	$36
09839 2241                        36            .byte	$36
09840 2242                        36            .byte	$36
09841 2243                        37            .byte	$37
09842 2244                        36            .byte	$36
09843 2245                        36            .byte	$36
09844 2246                        36            .byte	$36
09845 2247                        36            .byte	$36
09846 2248                        36            .byte	$36
09847 2249                        36            .byte	$36
09848                                           ! 1347  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 224A                        36            .byte	$36
09850 224B                        36            .byte	$36
09851 224C                        36            .byte	$36
09852 224D                        36            .byte	$36
09853 224E                        36            .byte	$36
09854 224F                        37            .byte	$37
09855 2250                        30            .byte	$30
09856 2251                        3F            .byte	$3F
09857 2252                        00            .byte	0
09858 2253                        00            .byte	0
09859 2254                        00            .byte	0
09860 2255                        00            .byte	0
09861 2256                        00            .byte	0
09862 2257                        00            .byte	0
09863                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 2258                        00            .byte	0
09865 2259                        00            .byte	0
09866 225A                        00            .byte	0
09867 225B                        00            .byte	0
09868 225C                        00            .byte	0
09869 225D                        3F            .byte	$3F
09870 225E                        30            .byte	$30
09871 225F                        37            .byte	$37
09872 2260                        36            .byte	$36
09873 2261                        36            .byte	$36
09874 2262                        36            .byte	$36
09875 2263                        36            .byte	$36
09876 2264                        36            .byte	$36
09877 2265                        36            .byte	$36
09878                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 2266                        36            .byte	$36
09880 2267                        36            .byte	$36
09881 2268                        36            .byte	$36
09882 2269                        36            .byte	$36
09883 226A                        36            .byte	$36
09884 226B                        F7            .byte	$F7
09885 226C                        00            .byte	0
09886 226D                        FF            .byte	$FF
09887 226E                        00            .byte	0
09888 226F                        00            .byte	0
09889 2270                        00            .byte	0
09890 2271                        00            .byte	0
09891 2272                        00            .byte	0
09892 2273                        00            .byte	0
09893                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 2274                        00            .byte	0
09895 2275                        00            .byte	0
09896 2276                        00            .byte	0
09897 2277                        00            .byte	0
09898 2278                        00            .byte	0
09899 2279                        FF            .byte	$FF
09900 227A                        00            .byte	0
09901 227B                        F7            .byte	$F7
09902 227C                        36            .byte	$36
09903 227D                        36            .byte	$36
09904 227E                        36            .byte	$36
09905 227F                        36            .byte	$36
09906 2280                        36            .byte	$36
09907 2281                        36            .byte	$36
09908                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2282                        36            .byte	$36
09910 2283                        36            .byte	$36
09911 2284                        36            .byte	$36
09912 2285                        36            .byte	$36
09913 2286                        36            .byte	$36
09914 2287                        37            .byte	$37
09915 2288                        30            .byte	$30
09916 2289                        37            .byte	$37
09917 228A                        36            .byte	$36
09918 228B                        36            .byte	$36
09919 228C                        36            .byte	$36
09920 228D                        36            .byte	$36
09921 228E                        36            .byte	$36
09922 228F                        36            .byte	$36
09923                                           ! 1352  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 2290                        00            .byte	0
09925 2291                        00            .byte	0
09926 2292                        00            .byte	0
09927 2293                        00            .byte	0
09928 2294                        00            .byte	0
09929 2295                        FF            .byte	$FF
09930 2296                        00            .byte	0
09931 2297                        FF            .byte	$FF
09932 2298                        00            .byte	0
09933 2299                        00            .byte	0
09934 229A                        00            .byte	0
09935 229B                        00            .byte	0
09936 229C                        00            .byte	0
09937 229D                        00            .byte	0
09938                                           ! 1353  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 229E                        36            .byte	$36
09940 229F                        36            .byte	$36
09941 22A0                        36            .byte	$36
09942 22A1                        36            .byte	$36
09943 22A2                        36            .byte	$36
09944 22A3                        F7            .byte	$F7
09945 22A4                        00            .byte	0
09946 22A5                        F7            .byte	$F7
09947 22A6                        36            .byte	$36
09948 22A7                        36            .byte	$36
09949 22A8                        36            .byte	$36
09950 22A9                        36            .byte	$36
09951 22AA                        36            .byte	$36
09952 22AB                        36            .byte	$36
09953                                           ! 1354  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22AC                        18            .byte	$18
09955 22AD                        18            .byte	$18
09956 22AE                        18            .byte	$18
09957 22AF                        18            .byte	$18
09958 22B0                        18            .byte	$18
09959 22B1                        FF            .byte	$FF
09960 22B2                        00            .byte	0
09961 22B3                        FF            .byte	$FF
09962 22B4                        00            .byte	0
09963 22B5                        00            .byte	0
09964 22B6                        00            .byte	0
09965 22B7                        00            .byte	0
09966 22B8                        00            .byte	0
09967 22B9                        00            .byte	0
09968                                           ! 1355  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22BA                        36            .byte	$36
09970 22BB                        36            .byte	$36
09971 22BC                        36            .byte	$36
09972 22BD                        36            .byte	$36
09973 22BE                        36            .byte	$36
09974 22BF                        36            .byte	$36
09975 22C0                        36            .byte	$36
09976 22C1                        FF            .byte	$FF
09977 22C2                        00            .byte	0
09978 22C3                        00            .byte	0
09979 22C4                        00            .byte	0
09980 22C5                        00            .byte	0
09981 22C6                        00            .byte	0
09982 22C7                        00            .byte	0
09983                                           ! 1356  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22C8                        00            .byte	0
09985 22C9                        00            .byte	0
09986 22CA                        00            .byte	0
09987 22CB                        00            .byte	0
09988 22CC                        00            .byte	0
09989 22CD                        FF            .byte	$FF
09990 22CE                        00            .byte	0
09991 22CF                        FF            .byte	$FF
09992 22D0                        18            .byte	$18
09993 22D1                        18            .byte	$18
09994 22D2                        18            .byte	$18
09995 22D3                        18            .byte	$18
09996 22D4                        18            .byte	$18
09997 22D5                        18            .byte	$18
09998                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22D6                        00            .byte	0
10000 22D7                        00            .byte	0
10001 22D8                        00            .byte	0
10002 22D9                        00            .byte	0
10003 22DA                        00            .byte	0
10004 22DB                        00            .byte	0
10005 22DC                        00            .byte	0
10006 22DD                        FF            .byte	$FF
10007 22DE                        36            .byte	$36
10008 22DF                        36            .byte	$36
10009 22E0                        36            .byte	$36
10010 22E1                        36            .byte	$36
10011 22E2                        36            .byte	$36
10012 22E3                        36            .byte	$36
10013                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22E4                        36            .byte	$36
10015 22E5                        36            .byte	$36
10016 22E6                        36            .byte	$36
10017 22E7                        36            .byte	$36
10018 22E8                        36            .byte	$36
10019 22E9                        36            .byte	$36
10020 22EA                        36            .byte	$36
10021 22EB                        3F            .byte	$3F
10022 22EC                        00            .byte	0
10023 22ED                        00            .byte	0
10024 22EE                        00            .byte	0
10025 22EF                        00            .byte	0
10026 22F0                        00            .byte	0
10027 22F1                        00            .byte	0
10028                                           ! 1359  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 22F2                        18            .byte	$18
10030 22F3                        18            .byte	$18
10031 22F4                        18            .byte	$18
10032 22F5                        18            .byte	$18
10033 22F6                        18            .byte	$18
10034 22F7                        1F            .byte	$1F
10035 22F8                        18            .byte	$18
10036 22F9                        1F            .byte	$1F
10037 22FA                        00            .byte	0
10038 22FB                        00            .byte	0
10039 22FC                        00            .byte	0
10040 22FD                        00            .byte	0
10041 22FE                        00            .byte	0
10042 22FF                        00            .byte	0
10043                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 2300                        00            .byte	0
10045 2301                        00            .byte	0
10046 2302                        00            .byte	0
10047 2303                        00            .byte	0
10048 2304                        00            .byte	0
10049 2305                        1F            .byte	$1F
10050 2306                        18            .byte	$18
10051 2307                        1F            .byte	$1F
10052 2308                        18            .byte	$18
10053 2309                        18            .byte	$18
10054 230A                        18            .byte	$18
10055 230B                        18            .byte	$18
10056 230C                        18            .byte	$18
10057 230D                        18            .byte	$18
10058                                           ! 1361  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 230E                        00            .byte	0
10060 230F                        00            .byte	0
10061 2310                        00            .byte	0
10062 2311                        00            .byte	0
10063 2312                        00            .byte	0
10064 2313                        00            .byte	0
10065 2314                        00            .byte	0
10066 2315                        3F            .byte	$3F
10067 2316                        36            .byte	$36
10068 2317                        36            .byte	$36
10069 2318                        36            .byte	$36
10070 2319                        36            .byte	$36
10071 231A                        36            .byte	$36
10072 231B                        36            .byte	$36
10073                                           ! 1362  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 231C                        36            .byte	$36
10075 231D                        36            .byte	$36
10076 231E                        36            .byte	$36
10077 231F                        36            .byte	$36
10078 2320                        36            .byte	$36
10079 2321                        36            .byte	$36
10080 2322                        36            .byte	$36
10081 2323                        FF            .byte	$FF
10082 2324                        36            .byte	$36
10083 2325                        36            .byte	$36
10084 2326                        36            .byte	$36
10085 2327                        36            .byte	$36
10086 2328                        36            .byte	$36
10087 2329                        36            .byte	$36
10088                                           ! 1363  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 232A                        18            .byte	$18
10090 232B                        18            .byte	$18
10091 232C                        18            .byte	$18
10092 232D                        18            .byte	$18
10093 232E                        18            .byte	$18
10094 232F                        FF            .byte	$FF
10095 2330                        18            .byte	$18
10096 2331                        FF            .byte	$FF
10097 2332                        18            .byte	$18
10098 2333                        18            .byte	$18
10099 2334                        18            .byte	$18
10100 2335                        18            .byte	$18
10101 2336                        18            .byte	$18
10102 2337                        18            .byte	$18
10103                                           ! 1364  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 2338                        18            .byte	$18
10105 2339                        18            .byte	$18
10106 233A                        18            .byte	$18
10107 233B                        18            .byte	$18
10108 233C                        18            .byte	$18
10109 233D                        18            .byte	$18
10110 233E                        18            .byte	$18
10111 233F                        F8            .byte	$F8
10112 2340                        00            .byte	0
10113 2341                        00            .byte	0
10114 2342                        00            .byte	0
10115 2343                        00            .byte	0
10116 2344                        00            .byte	0
10117 2345                        00            .byte	0
10118                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 2346                        00            .byte	0
10120 2347                        00            .byte	0
10121 2348                        00            .byte	0
10122 2349                        00            .byte	0
10123 234A                        00            .byte	0
10124 234B                        00            .byte	0
10125 234C                        00            .byte	0
10126 234D                        1F            .byte	$1F
10127 234E                        18            .byte	$18
10128 234F                        18            .byte	$18
10129 2350                        18            .byte	$18
10130 2351                        18            .byte	$18
10131 2352                        18            .byte	$18
10132 2353                        18            .byte	$18
10133                                           ! 1366  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 2354                        FF            .byte	$FF
10135 2355                        FF            .byte	$FF
10136 2356                        FF            .byte	$FF
10137 2357                        FF            .byte	$FF
10138 2358                        FF            .byte	$FF
10139 2359                        FF            .byte	$FF
10140 235A                        FF            .byte	$FF
10141 235B                        FF            .byte	$FF
10142 235C                        FF            .byte	$FF
10143 235D                        FF            .byte	$FF
10144 235E                        FF            .byte	$FF
10145 235F                        FF            .byte	$FF
10146 2360                        FF            .byte	$FF
10147 2361                        FF            .byte	$FF
10148                                           ! 1367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2362                        00            .byte	0
10150 2363                        00            .byte	0
10151 2364                        00            .byte	0
10152 2365                        00            .byte	0
10153 2366                        00            .byte	0
10154 2367                        00            .byte	0
10155 2368                        00            .byte	0
10156 2369                        FF            .byte	$FF
10157 236A                        FF            .byte	$FF
10158 236B                        FF            .byte	$FF
10159 236C                        FF            .byte	$FF
10160 236D                        FF            .byte	$FF
10161 236E                        FF            .byte	$FF
10162 236F                        FF            .byte	$FF
10163                                           ! 1368  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10164 2370                        F0            .byte	$F0
10165 2371                        F0            .byte	$F0
10166 2372                        F0            .byte	$F0
10167 2373                        F0            .byte	$F0
10168 2374                        F0            .byte	$F0
10169 2375                        F0            .byte	$F0
10170 2376                        F0            .byte	$F0
10171 2377                        F0            .byte	$F0
10172 2378                        F0            .byte	$F0
10173 2379                        F0            .byte	$F0
10174 237A                        F0            .byte	$F0
10175 237B                        F0            .byte	$F0
10176 237C                        F0            .byte	$F0
10177 237D                        F0            .byte	$F0
10178                                           ! 1369  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
10179 237E                        0F            .byte	$F
10180 237F                        0F            .byte	$F
10181 2380                        0F            .byte	$F
10182 2381                        0F            .byte	$F
10183 2382                        0F            .byte	$F
10184 2383                        0F            .byte	$F
10185 2384                        0F            .byte	$F
10186 2385                        0F            .byte	$F
10187 2386                        0F            .byte	$F
10188 2387                        0F            .byte	$F
10189                                           ! 1369 x0f, 0x0f, 0x0f, 0x0f,
10190 2388                        0F            .byte	$F
10191 2389                        0F            .byte	$F
10192 238A                        0F            .byte	$F
10193 238B                        0F            .byte	$F
10194                                           ! 1370  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 238C                        FF            .byte	$FF
10196 238D                        FF            .byte	$FF
10197 238E                        FF            .byte	$FF
10198 238F                        FF            .byte	$FF
10199 2390                        FF            .byte	$FF
10200 2391                        FF            .byte	$FF
10201 2392                        FF            .byte	$FF
10202 2393                        00            .byte	0
10203 2394                        00            .byte	0
10204 2395                        00            .byte	0
10205 2396                        00            .byte	0
10206 2397                        00            .byte	0
10207 2398                        00            .byte	0
10208 2399                        00            .byte	0
10209                                           ! 1371  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 239A                        00            .byte	0
10211 239B                        00            .byte	0
10212 239C                        00            .byte	0
10213 239D                        00            .byte	0
10214 239E                        00            .byte	0
10215 239F                        76            .byte	$76
10216 23A0                        DC            .byte	$DC
10217 23A1                        D8            .byte	$D8
10218 23A2                        D8            .byte	$D8
10219 23A3                        DC            .byte	$DC
10220 23A4                        76            .byte	$76
10221 23A5                        00            .byte	0
10222 23A6                        00            .byte	0
10223 23A7                        00            .byte	0
10224                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23A8                        00            .byte	0
10226 23A9                        00            .byte	0
10227 23AA                        00            .byte	0
10228 23AB                        00            .byte	0
10229 23AC                        7C            .byte	$7C
10230 23AD                        C6            .byte	$C6
10231 23AE                        FC            .byte	$FC
10232 23AF                        C6            .byte	$C6
10233 23B0                        C6            .byte	$C6
10234 23B1                        FC            .byte	$FC
10235 23B2                        C0            .byte	$C0
10236 23B3                        C0            .byte	$C0
10237 23B4                        40            .byte	$40
10238 23B5                        00            .byte	0
10239                                           ! 1373  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23B6                        00            .byte	0
10241 23B7                        00            .byte	0
10242 23B8                        FE            .byte	$FE
10243 23B9                        C6            .byte	$C6
10244 23BA                        C6            .byte	$C6
10245 23BB                        C0            .byte	$C0
10246 23BC                        C0            .byte	$C0
10247 23BD                        C0            .byte	$C0
10248 23BE                        C0            .byte	$C0
10249 23BF                        C0            .byte	$C0
10250 23C0                        C0            .byte	$C0
10251 23C1                        00            .byte	0
10252 23C2                        00            .byte	0
10253 23C3                        00            .byte	0
10254                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23C4                        00            .byte	0
10256 23C5                        00            .byte	0
10257 23C6                        00            .byte	0
10258 23C7                        00            .byte	0
10259 23C8                        FE            .byte	$FE
10260 23C9                        6C            .byte	$6C
10261 23CA                        6C            .byte	$6C
10262 23CB                        6C            .byte	$6C
10263 23CC                        6C            .byte	$6C
10264 23CD                        6C            .byte	$6C
10265 23CE                        6C            .byte	$6C
10266 23CF                        00            .byte	0
10267 23D0                        00            .byte	0
10268 23D1                        00            .byte	0
10269                                           ! 1375  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23D2                        00            .byte	0
10271 23D3                        00            .byte	0
10272 23D4                        FE            .byte	$FE
10273 23D5                        C6            .byte	$C6
10274 23D6                        60            .byte	$60
10275 23D7                        30            .byte	$30
10276 23D8                        18            .byte	$18
10277 23D9                        30            .byte	$30
10278 23DA                        60            .byte	$60
10279 23DB                        C6            .byte	$C6
10280 23DC                        FE            .byte	$FE
10281 23DD                        00            .byte	0
10282 23DE                        00            .byte	0
10283 23DF                        00            .byte	0
10284                                           ! 1376  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23E0                        00            .byte	0
10286 23E1                        00            .byte	0
10287 23E2                        00            .byte	0
10288 23E3                        00            .byte	0
10289 23E4                        00            .byte	0
10290 23E5                        7E            .byte	$7E
10291 23E6                        D8            .byte	$D8
10292 23E7                        D8            .byte	$D8
10293 23E8                        D8            .byte	$D8
10294 23E9                        D8            .byte	$D8
10295 23EA                        70            .byte	$70
10296 23EB                        00            .byte	0
10297 23EC                        00            .byte	0
10298 23ED                        00            .byte	0
10299                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 23EE                        00            .byte	0
10301 23EF                        00            .byte	0
10302 23F0                        00            .byte	0
10303 23F1                        00            .byte	0
10304 23F2                        66            .byte	$66
10305 23F3                        66            .byte	$66
10306 23F4                        66            .byte	$66
10307 23F5                        66            .byte	$66
10308 23F6                        7C            .byte	$7C
10309 23F7                        60            .byte	$60
10310 23F8                        60            .byte	$60
10311 23F9                        C0            .byte	$C0
10312 23FA                        00            .byte	0
10313 23FB                        00            .byte	0
10314                                           ! 1378  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 23FC                        00            .byte	0
10316 23FD                        00            .byte	0
10317 23FE                        00            .byte	0
10318 23FF                        00            .byte	0
10319 2400                        76            .byte	$76
10320 2401                        DC            .byte	$DC
10321 2402                        18            .byte	$18
10322 2403                        18            .byte	$18
10323 2404                        18            .byte	$18
10324 2405                        18            .byte	$18
10325 2406                        18            .byte	$18
10326 2407                        00            .byte	0
10327 2408                        00            .byte	0
10328 2409                        00            .byte	0
10329                                           ! 1379  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 240A                        00            .byte	0
10331 240B                        00            .byte	0
10332 240C                        7E            .byte	$7E
10333 240D                        18            .byte	$18
10334 240E                        3C            .byte	$3C
10335 240F                        66            .byte	$66
10336 2410                        66            .byte	$66
10337 2411                        66            .byte	$66
10338 2412                        3C            .byte	$3C
10339 2413                        18            .byte	$18
10340 2414                        7E            .byte	$7E
10341 2415                        00            .byte	0
10342 2416                        00            .byte	0
10343 2417                        00            .byte	0
10344                                           ! 1380  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 2418                        00            .byte	0
10346 2419                        00            .byte	0
10347 241A                        38            .byte	$38
10348 241B                        6C            .byte	$6C
10349 241C                        C6            .byte	$C6
10350 241D                        C6            .byte	$C6
10351 241E                        FE            .byte	$FE
10352 241F                        C6            .byte	$C6
10353 2420                        C6            .byte	$C6
10354 2421                        6C            .byte	$6C
10355 2422                        38            .byte	$38
10356 2423                        00            .byte	0
10357 2424                        00            .byte	0
10358 2425                        00            .byte	0
10359                                           ! 1381  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 2426                        00            .byte	0
10361 2427                        00            .byte	0
10362 2428                        38            .byte	$38
10363 2429                        6C            .byte	$6C
10364 242A                        C6            .byte	$C6
10365 242B                        C6            .byte	$C6
10366 242C                        C6            .byte	$C6
10367 242D                        6C            .byte	$6C
10368 242E                        6C            .byte	$6C
10369 242F                        6C            .byte	$6C
10370 2430                        EE            .byte	$EE
10371 2431                        00            .byte	0
10372 2432                        00            .byte	0
10373 2433                        00            .byte	0
10374                                           ! 1382  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 2434                        00            .byte	0
10376 2435                        00            .byte	0
10377 2436                        1E            .byte	$1E
10378 2437                        30            .byte	$30
10379 2438                        18            .byte	$18
10380 2439                        0C            .byte	$C
10381 243A                        3E            .byte	$3E
10382 243B                        66            .byte	$66
10383 243C                        66            .byte	$66
10384 243D                        66            .byte	$66
10385 243E                        3C            .byte	$3C
10386 243F                        00            .byte	0
10387 2440                        00            .byte	0
10388 2441                        00            .byte	0
10389                                           ! 1383  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2442                        00            .byte	0
10391 2443                        00            .byte	0
10392 2444                        00            .byte	0
10393 2445                        00            .byte	0
10394 2446                        00            .byte	0
10395 2447                        7E            .byte	$7E
10396 2448                        DB            .byte	$DB
10397 2449                        DB            .byte	$DB
10398 244A                        7E            .byte	$7E
10399 244B                        00            .byte	0
10400 244C                        00            .byte	0
10401 244D                        00            .byte	0
10402 244E                        00            .byte	0
10403 244F                        00            .byte	0
10404                                           ! 1384  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 2450                        00            .byte	0
10406 2451                        00            .byte	0
10407 2452                        03            .byte	3
10408 2453                        06            .byte	6
10409 2454                        7E            .byte	$7E
10410 2455                        DB            .byte	$DB
10411 2456                        DB            .byte	$DB
10412 2457                        F3            .byte	$F3
10413 2458                        7E            .byte	$7E
10414 2459                        60            .byte	$60
10415 245A                        C0            .byte	$C0
10416 245B                        00            .byte	0
10417 245C                        00            .byte	0
10418 245D                        00            .byte	0
10419                                           ! 1385  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 245E                        00            .byte	0
10421 245F                        00            .byte	0
10422 2460                        1C            .byte	$1C
10423 2461                        30            .byte	$30
10424 2462                        60            .byte	$60
10425 2463                        60            .byte	$60
10426 2464                        7C            .byte	$7C
10427 2465                        60            .byte	$60
10428 2466                        60            .byte	$60
10429 2467                        30            .byte	$30
10430 2468                        1C            .byte	$1C
10431 2469                        00            .byte	0
10432 246A                        00            .byte	0
10433 246B                        00            .byte	0
10434                                           ! 1386  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 246C                        00            .byte	0
10436 246D                        00            .byte	0
10437 246E                        00            .byte	0
10438 246F                        7C            .byte	$7C
10439 2470                        C6            .byte	$C6
10440 2471                        C6            .byte	$C6
10441 2472                        C6            .byte	$C6
10442 2473                        C6            .byte	$C6
10443 2474                        C6            .byte	$C6
10444 2475                        C6            .byte	$C6
10445 2476                        C6            .byte	$C6
10446 2477                        00            .byte	0
10447 2478                        00            .byte	0
10448 2479                        00            .byte	0
10449                                           ! 1387  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 247A                        00            .byte	0
10451 247B                        00            .byte	0
10452 247C                        00            .byte	0
10453 247D                        FE            .byte	$FE
10454 247E                        00            .byte	0
10455 247F                        00            .byte	0
10456 2480                        FE            .byte	$FE
10457 2481                        00            .byte	0
10458 2482                        00            .byte	0
10459 2483                        FE            .byte	$FE
10460 2484                        00            .byte	0
10461 2485                        00            .byte	0
10462 2486                        00            .byte	0
10463 2487                        00            .byte	0
10464                                           ! 1388  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 2488                        00            .byte	0
10466 2489                        00            .byte	0
10467 248A                        00            .byte	0
10468 248B                        18            .byte	$18
10469 248C                        18            .byte	$18
10470 248D                        7E            .byte	$7E
10471 248E                        18            .byte	$18
10472 248F                        18            .byte	$18
10473 2490                        00            .byte	0
10474 2491                        00            .byte	0
10475 2492                        FF            .byte	$FF
10476 2493                        00            .byte	0
10477 2494                        00            .byte	0
10478 2495                        00            .byte	0
10479                                           ! 1389  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 2496                        00            .byte	0
10481 2497                        00            .byte	0
10482 2498                        30            .byte	$30
10483 2499                        18            .byte	$18
10484 249A                        0C            .byte	$C
10485 249B                        06            .byte	6
10486 249C                        0C            .byte	$C
10487 249D                        18            .byte	$18
10488 249E                        30            .byte	$30
10489 249F                        00            .byte	0
10490 24A0                        7E            .byte	$7E
10491 24A1                        00            .byte	0
10492 24A2                        00            .byte	0
10493 24A3                        00            .byte	0
10494                                           ! 1390  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24A4                        00            .byte	0
10496 24A5                        00            .byte	0
10497 24A6                        0C            .byte	$C
10498 24A7                        18            .byte	$18
10499 24A8                        30            .byte	$30
10500 24A9                        60            .byte	$60
10501 24AA                        30            .byte	$30
10502 24AB                        18            .byte	$18
10503 24AC                        0C            .byte	$C
10504 24AD                        00            .byte	0
10505 24AE                        7E            .byte	$7E
10506 24AF                        00            .byte	0
10507 24B0                        00            .byte	0
10508 24B1                        00            .byte	0
10509                                           ! 1391  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24B2                        00            .byte	0
10511 24B3                        00            .byte	0
10512 24B4                        0E            .byte	$E
10513 24B5                        1B            .byte	$1B
10514 24B6                        1B            .byte	$1B
10515 24B7                        18            .byte	$18
10516 24B8                        18            .byte	$18
10517 24B9                        18            .byte	$18
10518 24BA                        18            .byte	$18
10519 24BB                        18            .byte	$18
10520 24BC                        18            .byte	$18
10521 24BD                        18            .byte	$18
10522 24BE                        18            .byte	$18
10523 24BF                        18            .byte	$18
10524                                           ! 1392  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10525 24C0                        18            .byte	$18
10526 24C1                        18            .byte	$18
10527 24C2                        18            .byte	$18
10528 24C3                        18            .byte	$18
10529 24C4                        18            .byte	$18
10530 24C5                        18            .byte	$18
10531 24C6                        18            .byte	$18
10532 24C7                        18            .byte	$18
10533 24C8                        D8            .byte	$D8
10534 24C9                        D8            .byte	$D8
10535 24CA                        70            .byte	$70
10536 24CB                        00            .byte	0
10537 24CC                        00            .byte	0
10538 24CD                        00            .byte	0
10539                                           ! 1393  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x0
10540 24CE                        00            .byte	0
10541 24CF                        00            .byte	0
10542 24D0                        00            .byte	0
10543 24D1                        18            .byte	$18
10544 24D2                        18            .byte	$18
10545 24D3                        00            .byte	0
10546 24D4                        7E            .byte	$7E
10547 24D5                        00            .byte	0
10548 24D6                        18            .byte	$18
10549 24D7                        18            .byte	$18
10550 24D8                        00            .byte	0
10551                                           ! 1393 0, 0x00, 0x00,
10552 24D9                        00            .byte	0
10553 24DA                        00            .byte	0
10554 24DB                        00            .byte	0
10555                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24DC                        00            .byte	0
10557 24DD                        00            .byte	0
10558 24DE                        00            .byte	0
10559 24DF                        00            .byte	0
10560 24E0                        76            .byte	$76
10561 24E1                        DC            .byte	$DC
10562 24E2                        00            .byte	0
10563 24E3                        76            .byte	$76
10564 24E4                        DC            .byte	$DC
10565 24E5                        00            .byte	0
10566 24E6                        00            .byte	0
10567 24E7                        00            .byte	0
10568 24E8                        00            .byte	0
10569 24E9                        00            .byte	0
10570                                           ! 1395  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24EA                        00            .byte	0
10572 24EB                        38            .byte	$38
10573 24EC                        6C            .byte	$6C
10574 24ED                        6C            .byte	$6C
10575 24EE                        38            .byte	$38
10576 24EF                        00            .byte	0
10577 24F0                        00            .byte	0
10578 24F1                        00            .byte	0
10579 24F2                        00            .byte	0
10580 24F3                        00            .byte	0
10581 24F4                        00            .byte	0
10582 24F5                        00            .byte	0
10583 24F6                        00            .byte	0
10584 24F7                        00            .byte	0
10585                                           ! 1396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 24F8                        00            .byte	0
10587 24F9                        00            .byte	0
10588 24FA                        00            .byte	0
10589 24FB                        00            .byte	0
10590 24FC                        00            .byte	0
10591 24FD                        00            .byte	0
10592 24FE                        18            .byte	$18
10593 24FF                        18            .byte	$18
10594 2500                        00            .byte	0
10595 2501                        00            .byte	0
10596 2502                        00            .byte	0
10597 2503                        00            .byte	0
10598 2504                        00            .byte	0
10599 2505                        00            .byte	0
10600                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 2506                        00            .byte	0
10602 2507                        00            .byte	0
10603 2508                        00            .byte	0
10604 2509                        00            .byte	0
10605 250A                        00            .byte	0
10606 250B                        00            .byte	0
10607 250C                        00            .byte	0
10608 250D                        18            .byte	$18
10609 250E                        00            .byte	0
10610 250F                        00            .byte	0
10611 2510                        00            .byte	0
10612 2511                        00            .byte	0
10613 2512                        00            .byte	0
10614 2513                        00            .byte	0
10615                                           ! 1398  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 2514                        00            .byte	0
10617 2515                        0F            .byte	$F
10618 2516                        0C            .byte	$C
10619 2517                        0C            .byte	$C
10620 2518                        0C            .byte	$C
10621 2519                        0C            .byte	$C
10622 251A                        0C            .byte	$C
10623 251B                        EC            .byte	$EC
10624 251C                        6C            .byte	$6C
10625 251D                        3C            .byte	$3C
10626 251E                        1C            .byte	$1C
10627 251F                        00            .byte	0
10628 2520                        00            .byte	0
10629 2521                        00            .byte	0
10630                                           ! 1399  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2522                        00            .byte	0
10632 2523                        D8            .byte	$D8
10633 2524                        6C            .byte	$6C
10634 2525                        6C            .byte	$6C
10635 2526                        6C            .byte	$6C
10636 2527                        6C            .byte	$6C
10637 2528                        6C            .byte	$6C
10638 2529                        00            .byte	0
10639 252A                        00            .byte	0
10640 252B                        00            .byte	0
10641 252C                        00            .byte	0
10642 252D                        00            .byte	0
10643 252E                        00            .byte	0
10644 252F                        00            .byte	0
10645                                           ! 1400  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 2530                        00            .byte	0
10647 2531                        70            .byte	$70
10648 2532                        D8            .byte	$D8
10649 2533                        30            .byte	$30
10650 2534                        60            .byte	$60
10651 2535                        C8            .byte	$C8
10652 2536                        F8            .byte	$F8
10653 2537                        00            .byte	0
10654 2538                        00            .byte	0
10655 2539                        00            .byte	0
10656 253A                        00            .byte	0
10657 253B                        00            .byte	0
10658 253C                        00            .byte	0
10659 253D                        00            .byte	0
10660                                           ! 1401  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 253E                        00            .byte	0
10662 253F                        00            .byte	0
10663 2540                        00            .byte	0
10664 2541                        00            .byte	0
10665 2542                        7C            .byte	$7C
10666 2543                        7C            .byte	$7C
10667 2544                        7C            .byte	$7C
10668 2545                        7C            .byte	$7C
10669 2546                        7C            .byte	$7C
10670 2547                        7C            .byte	$7C
10671 2548                        00            .byte	0
10672 2549                        00            .byte	0
10673 254A                        00            .byte	0
10674 254B                        00            .byte	0
10675                                           ! 1402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 254C                        00            .byte	0
10677 254D                        00            .byte	0
10678 254E                        00            .byte	0
10679 254F                        00            .byte	0
10680 2550                        00            .byte	0
10681 2551                        00            .byte	0
10682 2552                        00            .byte	0
10683 2553                        00            .byte	0
10684 2554                        00            .byte	0
10685 2555                        00            .byte	0
10686 2556                        00            .byte	0
10687 2557                        00            .byte	0
10688 2558                        00            .byte	0
10689                                           ! 1403 };
10690 2559                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1404 static Bit8u vgafont16[256*16]=
10693                                           ! 1405 {
10694                       0000255A            _vgafont16:
10695                                           ! 1406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 255A                        00            .byte	0
10697 255B                        00            .byte	0
10698 255C                        00            .byte	0
10699 255D                        00            .byte	0
10700 255E                        00            .byte	0
10701 255F                        00            .byte	0
10702 2560                        00            .byte	0
10703 2561                        00            .byte	0
10704 2562                        00            .byte	0
10705 2563                        00            .byte	0
10706 2564                        00            .byte	0
10707 2565                        00            .byte	0
10708 2566                        00            .byte	0
10709 2567                        00            .byte	0
10710 2568                        00            .byte	0
10711 2569                        00            .byte	0
10712                                           ! 1407  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 256A                        00            .byte	0
10714 256B                        00            .byte	0
10715 256C                        7E            .byte	$7E
10716 256D                        81            .byte	$81
10717 256E                        A5            .byte	$A5
10718 256F                        81            .byte	$81
10719 2570                        81            .byte	$81
10720 2571                        BD            .byte	$BD
10721 2572                        99            .byte	$99
10722 2573                        81            .byte	$81
10723 2574                        81            .byte	$81
10724 2575                        7E            .byte	$7E
10725 2576                        00            .byte	0
10726 2577                        00            .byte	0
10727 2578                        00            .byte	0
10728 2579                        00            .byte	0
10729                                           ! 1408  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 257A                        00            .byte	0
10731 257B                        00            .byte	0
10732 257C                        7E            .byte	$7E
10733 257D                        FF            .byte	$FF
10734 257E                        DB            .byte	$DB
10735 257F                        FF            .byte	$FF
10736 2580                        FF            .byte	$FF
10737 2581                        C3            .byte	$C3
10738 2582                        E7            .byte	$E7
10739 2583                        FF            .byte	$FF
10740 2584                        FF            .byte	$FF
10741 2585                        7E            .byte	$7E
10742 2586                        00            .byte	0
10743 2587                        00            .byte	0
10744 2588                        00            .byte	0
10745 2589                        00            .byte	0
10746                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 258A                        00            .byte	0
10748 258B                        00            .byte	0
10749 258C                        00            .byte	0
10750 258D                        00            .byte	0
10751 258E                        6C            .byte	$6C
10752 258F                        FE            .byte	$FE
10753 2590                        FE            .byte	$FE
10754 2591                        FE            .byte	$FE
10755 2592                        FE            .byte	$FE
10756 2593                        7C            .byte	$7C
10757 2594                        38            .byte	$38
10758 2595                        10            .byte	$10
10759 2596                        00            .byte	0
10760 2597                        00            .byte	0
10761 2598                        00            .byte	0
10762 2599                        00            .byte	0
10763                                           ! 1410  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 259A                        00            .byte	0
10765 259B                        00            .byte	0
10766 259C                        00            .byte	0
10767 259D                        00            .byte	0
10768 259E                        10            .byte	$10
10769 259F                        38            .byte	$38
10770 25A0                        7C            .byte	$7C
10771 25A1                        FE            .byte	$FE
10772 25A2                        7C            .byte	$7C
10773 25A3                        38            .byte	$38
10774 25A4                        10            .byte	$10
10775 25A5                        00            .byte	0
10776 25A6                        00            .byte	0
10777 25A7                        00            .byte	0
10778 25A8                        00            .byte	0
10779 25A9                        00            .byte	0
10780                                           ! 1411  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25AA                        00            .byte	0
10782 25AB                        00            .byte	0
10783 25AC                        00            .byte	0
10784 25AD                        18            .byte	$18
10785 25AE                        3C            .byte	$3C
10786 25AF                        3C            .byte	$3C
10787 25B0                        E7            .byte	$E7
10788 25B1                        E7            .byte	$E7
10789 25B2                        E7            .byte	$E7
10790 25B3                        18            .byte	$18
10791 25B4                        18            .byte	$18
10792 25B5                        3C            .byte	$3C
10793 25B6                        00            .byte	0
10794 25B7                        00            .byte	0
10795 25B8                        00            .byte	0
10796 25B9                        00            .byte	0
10797                                           ! 1412  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25BA                        00            .byte	0
10799 25BB                        00            .byte	0
10800 25BC                        00            .byte	0
10801 25BD                        18            .byte	$18
10802 25BE                        3C            .byte	$3C
10803 25BF                        7E            .byte	$7E
10804 25C0                        FF            .byte	$FF
10805 25C1                        FF            .byte	$FF
10806 25C2                        7E            .byte	$7E
10807 25C3                        18            .byte	$18
10808 25C4                        18            .byte	$18
10809 25C5                        3C            .byte	$3C
10810 25C6                        00            .byte	0
10811 25C7                        00            .byte	0
10812 25C8                        00            .byte	0
10813 25C9                        00            .byte	0
10814                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25CA                        00            .byte	0
10816 25CB                        00            .byte	0
10817 25CC                        00            .byte	0
10818 25CD                        00            .byte	0
10819 25CE                        00            .byte	0
10820 25CF                        00            .byte	0
10821 25D0                        18            .byte	$18
10822 25D1                        3C            .byte	$3C
10823 25D2                        3C            .byte	$3C
10824 25D3                        18            .byte	$18
10825 25D4                        00            .byte	0
10826 25D5                        00            .byte	0
10827 25D6                        00            .byte	0
10828 25D7                        00            .byte	0
10829 25D8                        00            .byte	0
10830 25D9                        00            .byte	0
10831                                           ! 1414  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25DA                        FF            .byte	$FF
10833 25DB                        FF            .byte	$FF
10834 25DC                        FF            .byte	$FF
10835 25DD                        FF            .byte	$FF
10836 25DE                        FF            .byte	$FF
10837 25DF                        FF            .byte	$FF
10838 25E0                        E7            .byte	$E7
10839 25E1                        C3            .byte	$C3
10840 25E2                        C3            .byte	$C3
10841 25E3                        E7            .byte	$E7
10842 25E4                        FF            .byte	$FF
10843 25E5                        FF            .byte	$FF
10844 25E6                        FF            .byte	$FF
10845 25E7                        FF            .byte	$FF
10846 25E8                        FF            .byte	$FF
10847 25E9                        FF            .byte	$FF
10848                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25EA                        00            .byte	0
10850 25EB                        00            .byte	0
10851 25EC                        00            .byte	0
10852 25ED                        00            .byte	0
10853 25EE                        00            .byte	0
10854 25EF                        3C            .byte	$3C
10855 25F0                        66            .byte	$66
10856 25F1                        42            .byte	$42
10857 25F2                        42            .byte	$42
10858 25F3                        66            .byte	$66
10859 25F4                        3C            .byte	$3C
10860 25F5                        00            .byte	0
10861 25F6                        00            .byte	0
10862 25F7                        00            .byte	0
10863 25F8                        00            .byte	0
10864 25F9                        00            .byte	0
10865                                           ! 1416  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 25FA                        FF            .byte	$FF
10867 25FB                        FF            .byte	$FF
10868 25FC                        FF            .byte	$FF
10869 25FD                        FF            .byte	$FF
10870 25FE                        FF            .byte	$FF
10871 25FF                        C3            .byte	$C3
10872 2600                        99            .byte	$99
10873 2601                        BD            .byte	$BD
10874 2602                        BD            .byte	$BD
10875 2603                        99            .byte	$99
10876 2604                        C3            .byte	$C3
10877 2605                        FF            .byte	$FF
10878 2606                        FF            .byte	$FF
10879 2607                        FF            .byte	$FF
10880 2608                        FF            .byte	$FF
10881 2609                        FF            .byte	$FF
10882                                           ! 1417  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10883 260A                        00            .byte	0
10884 260B                        00            .byte	0
10885 260C                        1E            .byte	$1E
10886 260D                        0E            .byte	$E
10887 260E                        1A            .byte	$1A
10888 260F                        32            .byte	$32
10889 2610                        78            .byte	$78
10890 2611                        CC            .byte	$CC
10891 2612                        CC            .byte	$CC
10892 2613                        CC            .byte	$CC
10893 2614                        CC            .byte	$CC
10894 2615                        78            .byte	$78
10895 2616                        00            .byte	0
10896 2617                        00            .byte	0
10897 2618                        00            .byte	0
10898 2619                        00            .byte	0
10899                                           ! 1418  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0
10900 261A                        00            .byte	0
10901 261B                        00            .byte	0
10902 261C                        3C            .byte	$3C
10903 261D                        66            .byte	$66
10904 261E                        66            .byte	$66
10905 261F                        66            .byte	$66
10906 2620                        66            .byte	$66
10907 2621                        3C            .byte	$3C
10908 2622                        18            .byte	$18
10909 2623                        7E            .byte	$7E
10910 2624                        18            .byte	$18
10911                                           ! 1418 x18, 0x00, 0x00, 0x00, 0x00,
10912 2625                        18            .byte	$18
10913 2626                        00            .byte	0
10914 2627                        00            .byte	0
10915 2628                        00            .byte	0
10916 2629                        00            .byte	0
10917                                           ! 1419  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 262A                        00            .byte	0
10919 262B                        00            .byte	0
10920 262C                        3F            .byte	$3F
10921 262D                        33            .byte	$33
10922 262E                        3F            .byte	$3F
10923 262F                        30            .byte	$30
10924 2630                        30            .byte	$30
10925 2631                        30            .byte	$30
10926 2632                        30            .byte	$30
10927 2633                        70            .byte	$70
10928 2634                        F0            .byte	$F0
10929 2635                        E0            .byte	$E0
10930 2636                        00            .byte	0
10931 2637                        00            .byte	0
10932 2638                        00            .byte	0
10933 2639                        00            .byte	0
10934                                           ! 1420  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 263A                        00            .byte	0
10936 263B                        00            .byte	0
10937 263C                        7F            .byte	$7F
10938 263D                        63            .byte	$63
10939 263E                        7F            .byte	$7F
10940 263F                        63            .byte	$63
10941 2640                        63            .byte	$63
10942 2641                        63            .byte	$63
10943 2642                        63            .byte	$63
10944 2643                        67            .byte	$67
10945 2644                        E7            .byte	$E7
10946 2645                        E6            .byte	$E6
10947 2646                        C0            .byte	$C0
10948 2647                        00            .byte	0
10949 2648                        00            .byte	0
10950 2649                        00            .byte	0
10951                                           ! 1421  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 264A                        00            .byte	0
10953 264B                        00            .byte	0
10954 264C                        00            .byte	0
10955 264D                        18            .byte	$18
10956 264E                        18            .byte	$18
10957 264F                        DB            .byte	$DB
10958 2650                        3C            .byte	$3C
10959 2651                        E7            .byte	$E7
10960 2652                        3C            .byte	$3C
10961 2653                        DB            .byte	$DB
10962 2654                        18            .byte	$18
10963 2655                        18            .byte	$18
10964 2656                        00            .byte	0
10965 2657                        00            .byte	0
10966 2658                        00            .byte	0
10967 2659                        00            .byte	0
10968                                           ! 1422  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 265A                        00            .byte	0
10970 265B                        80            .byte	$80
10971 265C                        C0            .byte	$C0
10972 265D                        E0            .byte	$E0
10973 265E                        F0            .byte	$F0
10974 265F                        F8            .byte	$F8
10975 2660                        FE            .byte	$FE
10976 2661                        F8            .byte	$F8
10977 2662                        F0            .byte	$F0
10978 2663                        E0            .byte	$E0
10979 2664                        C0            .byte	$C0
10980 2665                        80            .byte	$80
10981 2666                        00            .byte	0
10982 2667                        00            .byte	0
10983 2668                        00            .byte	0
10984 2669                        00            .byte	0
10985                                           ! 1423  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 266A                        00            .byte	0
10987 266B                        02            .byte	2
10988 266C                        06            .byte	6
10989 266D                        0E            .byte	$E
10990 266E                        1E            .byte	$1E
10991 266F                        3E            .byte	$3E
10992 2670                        FE            .byte	$FE
10993 2671                        3E            .byte	$3E
10994 2672                        1E            .byte	$1E
10995 2673                        0E            .byte	$E
10996 2674                        06            .byte	6
10997 2675                        02            .byte	2
10998 2676                        00            .byte	0
10999 2677                        00            .byte	0
11000 2678                        00            .byte	0
11001 2679                        00            .byte	0
11002                                           ! 1424  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 267A                        00            .byte	0
11004 267B                        00            .byte	0
11005 267C                        18            .byte	$18
11006 267D                        3C            .byte	$3C
11007 267E                        7E            .byte	$7E
11008 267F                        18            .byte	$18
11009 2680                        18            .byte	$18
11010 2681                        18            .byte	$18
11011 2682                        7E            .byte	$7E
11012 2683                        3C            .byte	$3C
11013 2684                        18            .byte	$18
11014 2685                        00            .byte	0
11015 2686                        00            .byte	0
11016 2687                        00            .byte	0
11017 2688                        00            .byte	0
11018 2689                        00            .byte	0
11019                                           ! 1425  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 268A                        00            .byte	0
11021 268B                        00            .byte	0
11022 268C                        66            .byte	$66
11023 268D                        66            .byte	$66
11024 268E                        66            .byte	$66
11025 268F                        66            .byte	$66
11026 2690                        66            .byte	$66
11027 2691                        66            .byte	$66
11028 2692                        66            .byte	$66
11029 2693                        00            .byte	0
11030 2694                        66            .byte	$66
11031 2695                        66            .byte	$66
11032 2696                        00            .byte	0
11033 2697                        00            .byte	0
11034 2698                        00            .byte	0
11035 2699                        00            .byte	0
11036                                           ! 1426  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 269A                        00            .byte	0
11038 269B                        00            .byte	0
11039 269C                        7F            .byte	$7F
11040 269D                        DB            .byte	$DB
11041 269E                        DB            .byte	$DB
11042 269F                        DB            .byte	$DB
11043 26A0                        7B            .byte	$7B
11044 26A1                        1B            .byte	$1B
11045 26A2                        1B            .byte	$1B
11046 26A3                        1B            .byte	$1B
11047 26A4                        1B            .byte	$1B
11048 26A5                        1B            .byte	$1B
11049 26A6                        00            .byte	0
11050 26A7                        00            .byte	0
11051 26A8                        00            .byte	0
11052 26A9                        00            .byte	0
11053                                           ! 1427  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26AA                        00            .byte	0
11055 26AB                        7C            .byte	$7C
11056 26AC                        C6            .byte	$C6
11057 26AD                        60            .byte	$60
11058 26AE                        38            .byte	$38
11059 26AF                        6C            .byte	$6C
11060 26B0                        C6            .byte	$C6
11061 26B1                        C6            .byte	$C6
11062 26B2                        6C            .byte	$6C
11063 26B3                        38            .byte	$38
11064 26B4                        0C            .byte	$C
11065 26B5                        C6            .byte	$C6
11066 26B6                        7C            .byte	$7C
11067 26B7                        00            .byte	0
11068 26B8                        00            .byte	0
11069 26B9                        00            .byte	0
11070                                           ! 1428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26BA                        00            .byte	0
11072 26BB                        00            .byte	0
11073 26BC                        00            .byte	0
11074 26BD                        00            .byte	0
11075 26BE                        00            .byte	0
11076 26BF                        00            .byte	0
11077 26C0                        00            .byte	0
11078 26C1                        00            .byte	0
11079 26C2                        FE            .byte	$FE
11080 26C3                        FE            .byte	$FE
11081 26C4                        FE            .byte	$FE
11082 26C5                        FE            .byte	$FE
11083 26C6                        00            .byte	0
11084 26C7                        00            .byte	0
11085 26C8                        00            .byte	0
11086 26C9                        00            .byte	0
11087                                           ! 1429  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26CA                        00            .byte	0
11089 26CB                        00            .byte	0
11090 26CC                        18            .byte	$18
11091 26CD                        3C            .byte	$3C
11092 26CE                        7E            .byte	$7E
11093 26CF                        18            .byte	$18
11094 26D0                        18            .byte	$18
11095 26D1                        18            .byte	$18
11096 26D2                        7E            .byte	$7E
11097 26D3                        3C            .byte	$3C
11098 26D4                        18            .byte	$18
11099 26D5                        7E            .byte	$7E
11100 26D6                        00            .byte	0
11101 26D7                        00            .byte	0
11102 26D8                        00            .byte	0
11103 26D9                        00            .byte	0
11104                                           ! 1430  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26DA                        00            .byte	0
11106 26DB                        00            .byte	0
11107 26DC                        18            .byte	$18
11108 26DD                        3C            .byte	$3C
11109 26DE                        7E            .byte	$7E
11110 26DF                        18            .byte	$18
11111 26E0                        18            .byte	$18
11112 26E1                        18            .byte	$18
11113 26E2                        18            .byte	$18
11114 26E3                        18            .byte	$18
11115 26E4                        18            .byte	$18
11116 26E5                        18            .byte	$18
11117 26E6                        00            .byte	0
11118 26E7                        00            .byte	0
11119 26E8                        00            .byte	0
11120 26E9                        00            .byte	0
11121                                           ! 1431  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26EA                        00            .byte	0
11123 26EB                        00            .byte	0
11124 26EC                        18            .byte	$18
11125 26ED                        18            .byte	$18
11126 26EE                        18            .byte	$18
11127 26EF                        18            .byte	$18
11128 26F0                        18            .byte	$18
11129 26F1                        18            .byte	$18
11130 26F2                        18            .byte	$18
11131 26F3                        7E            .byte	$7E
11132 26F4                        3C            .byte	$3C
11133 26F5                        18            .byte	$18
11134 26F6                        00            .byte	0
11135 26F7                        00            .byte	0
11136 26F8                        00            .byte	0
11137 26F9                        00            .byte	0
11138                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 26FA                        00            .byte	0
11140 26FB                        00            .byte	0
11141 26FC                        00            .byte	0
11142 26FD                        00            .byte	0
11143 26FE                        00            .byte	0
11144 26FF                        18            .byte	$18
11145 2700                        0C            .byte	$C
11146 2701                        FE            .byte	$FE
11147 2702                        0C            .byte	$C
11148 2703                        18            .byte	$18
11149 2704                        00            .byte	0
11150 2705                        00            .byte	0
11151 2706                        00            .byte	0
11152 2707                        00            .byte	0
11153 2708                        00            .byte	0
11154 2709                        00            .byte	0
11155                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 270A                        00            .byte	0
11157 270B                        00            .byte	0
11158 270C                        00            .byte	0
11159 270D                        00            .byte	0
11160 270E                        00            .byte	0
11161 270F                        30            .byte	$30
11162 2710                        60            .byte	$60
11163 2711                        FE            .byte	$FE
11164 2712                        60            .byte	$60
11165 2713                        30            .byte	$30
11166 2714                        00            .byte	0
11167 2715                        00            .byte	0
11168 2716                        00            .byte	0
11169 2717                        00            .byte	0
11170 2718                        00            .byte	0
11171 2719                        00            .byte	0
11172                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 271A                        00            .byte	0
11174 271B                        00            .byte	0
11175 271C                        00            .byte	0
11176 271D                        00            .byte	0
11177 271E                        00            .byte	0
11178 271F                        00            .byte	0
11179 2720                        C0            .byte	$C0
11180 2721                        C0            .byte	$C0
11181 2722                        C0            .byte	$C0
11182 2723                        FE            .byte	$FE
11183 2724                        00            .byte	0
11184 2725                        00            .byte	0
11185 2726                        00            .byte	0
11186 2727                        00            .byte	0
11187 2728                        00            .byte	0
11188 2729                        00            .byte	0
11189                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 272A                        00            .byte	0
11191 272B                        00            .byte	0
11192 272C                        00            .byte	0
11193 272D                        00            .byte	0
11194 272E                        00            .byte	0
11195 272F                        24            .byte	$24
11196 2730                        66            .byte	$66
11197 2731                        FF            .byte	$FF
11198 2732                        66            .byte	$66
11199 2733                        24            .byte	$24
11200 2734                        00            .byte	0
11201 2735                        00            .byte	0
11202 2736                        00            .byte	0
11203 2737                        00            .byte	0
11204 2738                        00            .byte	0
11205 2739                        00            .byte	0
11206                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 273A                        00            .byte	0
11208 273B                        00            .byte	0
11209 273C                        00            .byte	0
11210 273D                        00            .byte	0
11211 273E                        10            .byte	$10
11212 273F                        38            .byte	$38
11213 2740                        38            .byte	$38
11214 2741                        7C            .byte	$7C
11215 2742                        7C            .byte	$7C
11216 2743                        FE            .byte	$FE
11217 2744                        FE            .byte	$FE
11218 2745                        00            .byte	0
11219 2746                        00            .byte	0
11220 2747                        00            .byte	0
11221 2748                        00            .byte	0
11222 2749                        00            .byte	0
11223                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 274A                        00            .byte	0
11225 274B                        00            .byte	0
11226 274C                        00            .byte	0
11227 274D                        00            .byte	0
11228 274E                        FE            .byte	$FE
11229 274F                        FE            .byte	$FE
11230 2750                        7C            .byte	$7C
11231 2751                        7C            .byte	$7C
11232 2752                        38            .byte	$38
11233 2753                        38            .byte	$38
11234 2754                        10            .byte	$10
11235 2755                        00            .byte	0
11236 2756                        00            .byte	0
11237 2757                        00            .byte	0
11238 2758                        00            .byte	0
11239 2759                        00            .byte	0
11240                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11241 275A                        00            .byte	0
11242 275B                        00            .byte	0
11243 275C                        00            .byte	0
11244 275D                        00            .byte	0
11245 275E                        00            .byte	0
11246 275F                        00            .byte	0
11247 2760                        00            .byte	0
11248 2761                        00            .byte	0
11249 2762                        00            .byte	0
11250 2763                        00            .byte	0
11251 2764                        00            .byte	0
11252 2765                        00            .byte	0
11253 2766                        00            .byte	0
11254 2767                        00            .byte	0
11255 2768                        00            .byte	0
11256 2769                        00            .byte	0
11257                                           ! 1439  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 
11258 276A                        00            .byte	0
11259 276B                        00            .byte	0
11260 276C                        18            .byte	$18
11261 276D                        3C            .byte	$3C
11262 276E                        3C            .byte	$3C
11263 276F                        3C            .byte	$3C
11264 2770                        18            .byte	$18
11265 2771                        18            .byte	$18
11266 2772                        18            .byte	$18
11267 2773                        00            .byte	0
11268 2774                        18            .byte	$18
11269 2775                        18            .byte	$18
11270 2776                        00            .byte	0
11271                                           ! 1439 0x00, 0x00, 0x00,
11272 2777                        00            .byte	0
11273 2778                        00            .byte	0
11274 2779                        00            .byte	0
11275                                           ! 1440  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 277A                        00            .byte	0
11277 277B                        66            .byte	$66
11278 277C                        66            .byte	$66
11279 277D                        66            .byte	$66
11280 277E                        24            .byte	$24
11281 277F                        00            .byte	0
11282 2780                        00            .byte	0
11283 2781                        00            .byte	0
11284 2782                        00            .byte	0
11285 2783                        00            .byte	0
11286 2784                        00            .byte	0
11287 2785                        00            .byte	0
11288 2786                        00            .byte	0
11289 2787                        00            .byte	0
11290 2788                        00            .byte	0
11291 2789                        00            .byte	0
11292                                           ! 1441  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 278A                        00            .byte	0
11294 278B                        00            .byte	0
11295 278C                        00            .byte	0
11296 278D                        6C            .byte	$6C
11297 278E                        6C            .byte	$6C
11298 278F                        FE            .byte	$FE
11299 2790                        6C            .byte	$6C
11300 2791                        6C            .byte	$6C
11301 2792                        6C            .byte	$6C
11302 2793                        FE            .byte	$FE
11303 2794                        6C            .byte	$6C
11304 2795                        6C            .byte	$6C
11305 2796                        00            .byte	0
11306 2797                        00            .byte	0
11307 2798                        00            .byte	0
11308 2799                        00            .byte	0
11309                                           ! 1442  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 279A                        18            .byte	$18
11311 279B                        18            .byte	$18
11312 279C                        7C            .byte	$7C
11313 279D                        C6            .byte	$C6
11314 279E                        C2            .byte	$C2
11315 279F                        C0            .byte	$C0
11316 27A0                        7C            .byte	$7C
11317 27A1                        06            .byte	6
11318 27A2                        06            .byte	6
11319 27A3                        86            .byte	$86
11320 27A4                        C6            .byte	$C6
11321 27A5                        7C            .byte	$7C
11322 27A6                        18            .byte	$18
11323 27A7                        18            .byte	$18
11324 27A8                        00            .byte	0
11325 27A9                        00            .byte	0
11326                                           ! 1443  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27AA                        00            .byte	0
11328 27AB                        00            .byte	0
11329 27AC                        00            .byte	0
11330 27AD                        00            .byte	0
11331 27AE                        C2            .byte	$C2
11332 27AF                        C6            .byte	$C6
11333 27B0                        0C            .byte	$C
11334 27B1                        18            .byte	$18
11335 27B2                        30            .byte	$30
11336 27B3                        60            .byte	$60
11337 27B4                        C6            .byte	$C6
11338 27B5                        86            .byte	$86
11339 27B6                        00            .byte	0
11340 27B7                        00            .byte	0
11341 27B8                        00            .byte	0
11342 27B9                        00            .byte	0
11343                                           ! 1444  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27BA                        00            .byte	0
11345 27BB                        00            .byte	0
11346 27BC                        38            .byte	$38
11347 27BD                        6C            .byte	$6C
11348 27BE                        6C            .byte	$6C
11349 27BF                        38            .byte	$38
11350 27C0                        76            .byte	$76
11351 27C1                        DC            .byte	$DC
11352 27C2                        CC            .byte	$CC
11353 27C3                        CC            .byte	$CC
11354 27C4                        CC            .byte	$CC
11355 27C5                        76            .byte	$76
11356 27C6                        00            .byte	0
11357 27C7                        00            .byte	0
11358 27C8                        00            .byte	0
11359 27C9                        00            .byte	0
11360                                           ! 1445  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27CA                        00            .byte	0
11362 27CB                        30            .byte	$30
11363 27CC                        30            .byte	$30
11364 27CD                        30            .byte	$30
11365 27CE                        60            .byte	$60
11366 27CF                        00            .byte	0
11367 27D0                        00            .byte	0
11368 27D1                        00            .byte	0
11369 27D2                        00            .byte	0
11370 27D3                        00            .byte	0
11371 27D4                        00            .byte	0
11372 27D5                        00            .byte	0
11373 27D6                        00            .byte	0
11374 27D7                        00            .byte	0
11375 27D8                        00            .byte	0
11376 27D9                        00            .byte	0
11377                                           ! 1446  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27DA                        00            .byte	0
11379 27DB                        00            .byte	0
11380 27DC                        0C            .byte	$C
11381 27DD                        18            .byte	$18
11382 27DE                        30            .byte	$30
11383 27DF                        30            .byte	$30
11384 27E0                        30            .byte	$30
11385 27E1                        30            .byte	$30
11386 27E2                        30            .byte	$30
11387 27E3                        30            .byte	$30
11388 27E4                        18            .byte	$18
11389 27E5                        0C            .byte	$C
11390 27E6                        00            .byte	0
11391 27E7                        00            .byte	0
11392 27E8                        00            .byte	0
11393 27E9                        00            .byte	0
11394                                           ! 1447  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27EA                        00            .byte	0
11396 27EB                        00            .byte	0
11397 27EC                        30            .byte	$30
11398 27ED                        18            .byte	$18
11399 27EE                        0C            .byte	$C
11400 27EF                        0C            .byte	$C
11401 27F0                        0C            .byte	$C
11402 27F1                        0C            .byte	$C
11403 27F2                        0C            .byte	$C
11404 27F3                        0C            .byte	$C
11405 27F4                        18            .byte	$18
11406 27F5                        30            .byte	$30
11407 27F6                        00            .byte	0
11408 27F7                        00            .byte	0
11409 27F8                        00            .byte	0
11410 27F9                        00            .byte	0
11411                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 27FA                        00            .byte	0
11413 27FB                        00            .byte	0
11414 27FC                        00            .byte	0
11415 27FD                        00            .byte	0
11416 27FE                        00            .byte	0
11417 27FF                        66            .byte	$66
11418 2800                        3C            .byte	$3C
11419 2801                        FF            .byte	$FF
11420 2802                        3C            .byte	$3C
11421 2803                        66            .byte	$66
11422 2804                        00            .byte	0
11423 2805                        00            .byte	0
11424 2806                        00            .byte	0
11425 2807                        00            .byte	0
11426 2808                        00            .byte	0
11427 2809                        00            .byte	0
11428                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 280A                        00            .byte	0
11430 280B                        00            .byte	0
11431 280C                        00            .byte	0
11432 280D                        00            .byte	0
11433 280E                        00            .byte	0
11434 280F                        18            .byte	$18
11435 2810                        18            .byte	$18
11436 2811                        7E            .byte	$7E
11437 2812                        18            .byte	$18
11438 2813                        18            .byte	$18
11439 2814                        00            .byte	0
11440 2815                        00            .byte	0
11441 2816                        00            .byte	0
11442 2817                        00            .byte	0
11443 2818                        00            .byte	0
11444 2819                        00            .byte	0
11445                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 281A                        00            .byte	0
11447 281B                        00            .byte	0
11448 281C                        00            .byte	0
11449 281D                        00            .byte	0
11450 281E                        00            .byte	0
11451 281F                        00            .byte	0
11452 2820                        00            .byte	0
11453 2821                        00            .byte	0
11454 2822                        00            .byte	0
11455 2823                        18            .byte	$18
11456 2824                        18            .byte	$18
11457 2825                        18            .byte	$18
11458 2826                        30            .byte	$30
11459 2827                        00            .byte	0
11460 2828                        00            .byte	0
11461 2829                        00            .byte	0
11462                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 282A                        00            .byte	0
11464 282B                        00            .byte	0
11465 282C                        00            .byte	0
11466 282D                        00            .byte	0
11467 282E                        00            .byte	0
11468 282F                        00            .byte	0
11469 2830                        00            .byte	0
11470 2831                        FE            .byte	$FE
11471 2832                        00            .byte	0
11472 2833                        00            .byte	0
11473 2834                        00            .byte	0
11474 2835                        00            .byte	0
11475 2836                        00            .byte	0
11476 2837                        00            .byte	0
11477 2838                        00            .byte	0
11478 2839                        00            .byte	0
11479                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 283A                        00            .byte	0
11481 283B                        00            .byte	0
11482 283C                        00            .byte	0
11483 283D                        00            .byte	0
11484 283E                        00            .byte	0
11485 283F                        00            .byte	0
11486 2840                        00            .byte	0
11487 2841                        00            .byte	0
11488 2842                        00            .byte	0
11489 2843                        00            .byte	0
11490 2844                        18            .byte	$18
11491 2845                        18            .byte	$18
11492 2846                        00            .byte	0
11493 2847                        00            .byte	0
11494 2848                        00            .byte	0
11495 2849                        00            .byte	0
11496                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 284A                        00            .byte	0
11498 284B                        00            .byte	0
11499 284C                        00            .byte	0
11500 284D                        00            .byte	0
11501 284E                        02            .byte	2
11502 284F                        06            .byte	6
11503 2850                        0C            .byte	$C
11504 2851                        18            .byte	$18
11505 2852                        30            .byte	$30
11506 2853                        60            .byte	$60
11507 2854                        C0            .byte	$C0
11508 2855                        80            .byte	$80
11509 2856                        00            .byte	0
11510 2857                        00            .byte	0
11511 2858                        00            .byte	0
11512 2859                        00            .byte	0
11513                                           ! 1454  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 285A                        00            .byte	0
11515 285B                        00            .byte	0
11516 285C                        3C            .byte	$3C
11517 285D                        66            .byte	$66
11518 285E                        C3            .byte	$C3
11519 285F                        C3            .byte	$C3
11520 2860                        DB            .byte	$DB
11521 2861                        DB            .byte	$DB
11522 2862                        C3            .byte	$C3
11523 2863                        C3            .byte	$C3
11524 2864                        66            .byte	$66
11525 2865                        3C            .byte	$3C
11526 2866                        00            .byte	0
11527 2867                        00            .byte	0
11528 2868                        00            .byte	0
11529 2869                        00            .byte	0
11530                                           ! 1455  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 286A                        00            .byte	0
11532 286B                        00            .byte	0
11533 286C                        18            .byte	$18
11534 286D                        38            .byte	$38
11535 286E                        78            .byte	$78
11536 286F                        18            .byte	$18
11537 2870                        18            .byte	$18
11538 2871                        18            .byte	$18
11539 2872                        18            .byte	$18
11540 2873                        18            .byte	$18
11541 2874                        18            .byte	$18
11542 2875                        7E            .byte	$7E
11543 2876                        00            .byte	0
11544 2877                        00            .byte	0
11545 2878                        00            .byte	0
11546 2879                        00            .byte	0
11547                                           ! 1456  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 287A                        00            .byte	0
11549 287B                        00            .byte	0
11550 287C                        7C            .byte	$7C
11551 287D                        C6            .byte	$C6
11552 287E                        06            .byte	6
11553 287F                        0C            .byte	$C
11554 2880                        18            .byte	$18
11555 2881                        30            .byte	$30
11556 2882                        60            .byte	$60
11557 2883                        C0            .byte	$C0
11558 2884                        C6            .byte	$C6
11559 2885                        FE            .byte	$FE
11560 2886                        00            .byte	0
11561 2887                        00            .byte	0
11562 2888                        00            .byte	0
11563 2889                        00            .byte	0
11564                                           ! 1457  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 288A                        00            .byte	0
11566 288B                        00            .byte	0
11567 288C                        7C            .byte	$7C
11568 288D                        C6            .byte	$C6
11569 288E                        06            .byte	6
11570 288F                        06            .byte	6
11571 2890                        3C            .byte	$3C
11572 2891                        06            .byte	6
11573 2892                        06            .byte	6
11574 2893                        06            .byte	6
11575 2894                        C6            .byte	$C6
11576 2895                        7C            .byte	$7C
11577 2896                        00            .byte	0
11578 2897                        00            .byte	0
11579 2898                        00            .byte	0
11580 2899                        00            .byte	0
11581                                           ! 1458  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 289A                        00            .byte	0
11583 289B                        00            .byte	0
11584 289C                        0C            .byte	$C
11585 289D                        1C            .byte	$1C
11586 289E                        3C            .byte	$3C
11587 289F                        6C            .byte	$6C
11588 28A0                        CC            .byte	$CC
11589 28A1                        FE            .byte	$FE
11590 28A2                        0C            .byte	$C
11591 28A3                        0C            .byte	$C
11592 28A4                        0C            .byte	$C
11593 28A5                        1E            .byte	$1E
11594 28A6                        00            .byte	0
11595 28A7                        00            .byte	0
11596 28A8                        00            .byte	0
11597 28A9                        00            .byte	0
11598                                           ! 1459  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11599 28AA                        00            .byte	0
11600 28AB                        00            .byte	0
11601 28AC                        FE            .byte	$FE
11602 28AD                        C0            .byte	$C0
11603 28AE                        C0            .byte	$C0
11604 28AF                        C0            .byte	$C0
11605 28B0                        FC            .byte	$FC
11606 28B1                        06            .byte	6
11607 28B2                        06            .byte	6
11608 28B3                        06            .byte	6
11609 28B4                        C6            .byte	$C6
11610 28B5                        7C            .byte	$7C
11611 28B6                        00            .byte	0
11612 28B7                        00            .byte	0
11613 28B8                        00            .byte	0
11614 28B9                        00            .byte	0
11615                                           ! 1460  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11616 28BA                        00            .byte	0
11617 28BB                        00            .byte	0
11618 28BC                        38            .byte	$38
11619 28BD                        60            .byte	$60
11620 28BE                        C0            .byte	$C0
11621 28BF                        C0            .byte	$C0
11622 28C0                        FC            .byte	$FC
11623 28C1                        C6            .byte	$C6
11624 28C2                        C6            .byte	$C6
11625 28C3                        C6            .byte	$C6
11626 28C4                        C6            .byte	$C6
11627 28C5                        7C            .byte	$7C
11628 28C6                        00            .byte	0
11629 28C7                        00            .byte	0
11630                                           ! 1460  0x00,
11631 28C8                        00            .byte	0
11632 28C9                        00            .byte	0
11633                                           ! 1461  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28CA                        00            .byte	0
11635 28CB                        00            .byte	0
11636 28CC                        FE            .byte	$FE
11637 28CD                        C6            .byte	$C6
11638 28CE                        06            .byte	6
11639 28CF                        06            .byte	6
11640 28D0                        0C            .byte	$C
11641 28D1                        18            .byte	$18
11642 28D2                        30            .byte	$30
11643 28D3                        30            .byte	$30
11644 28D4                        30            .byte	$30
11645 28D5                        30            .byte	$30
11646 28D6                        00            .byte	0
11647 28D7                        00            .byte	0
11648 28D8                        00            .byte	0
11649 28D9                        00            .byte	0
11650                                           ! 1462  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28DA                        00            .byte	0
11652 28DB                        00            .byte	0
11653 28DC                        7C            .byte	$7C
11654 28DD                        C6            .byte	$C6
11655 28DE                        C6            .byte	$C6
11656 28DF                        C6            .byte	$C6
11657 28E0                        7C            .byte	$7C
11658 28E1                        C6            .byte	$C6
11659 28E2                        C6            .byte	$C6
11660 28E3                        C6            .byte	$C6
11661 28E4                        C6            .byte	$C6
11662 28E5                        7C            .byte	$7C
11663 28E6                        00            .byte	0
11664 28E7                        00            .byte	0
11665 28E8                        00            .byte	0
11666 28E9                        00            .byte	0
11667                                           ! 1463  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28EA                        00            .byte	0
11669 28EB                        00            .byte	0
11670 28EC                        7C            .byte	$7C
11671 28ED                        C6            .byte	$C6
11672 28EE                        C6            .byte	$C6
11673 28EF                        C6            .byte	$C6
11674 28F0                        7E            .byte	$7E
11675 28F1                        06            .byte	6
11676 28F2                        06            .byte	6
11677 28F3                        06            .byte	6
11678 28F4                        0C            .byte	$C
11679 28F5                        78            .byte	$78
11680 28F6                        00            .byte	0
11681 28F7                        00            .byte	0
11682 28F8                        00            .byte	0
11683 28F9                        00            .byte	0
11684                                           ! 1464  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 28FA                        00            .byte	0
11686 28FB                        00            .byte	0
11687 28FC                        00            .byte	0
11688 28FD                        00            .byte	0
11689 28FE                        18            .byte	$18
11690 28FF                        18            .byte	$18
11691 2900                        00            .byte	0
11692 2901                        00            .byte	0
11693 2902                        00            .byte	0
11694 2903                        18            .byte	$18
11695 2904                        18            .byte	$18
11696 2905                        00            .byte	0
11697 2906                        00            .byte	0
11698 2907                        00            .byte	0
11699 2908                        00            .byte	0
11700 2909                        00            .byte	0
11701                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 290A                        00            .byte	0
11703 290B                        00            .byte	0
11704 290C                        00            .byte	0
11705 290D                        00            .byte	0
11706 290E                        18            .byte	$18
11707 290F                        18            .byte	$18
11708 2910                        00            .byte	0
11709 2911                        00            .byte	0
11710 2912                        00            .byte	0
11711 2913                        18            .byte	$18
11712 2914                        18            .byte	$18
11713 2915                        30            .byte	$30
11714 2916                        00            .byte	0
11715 2917                        00            .byte	0
11716 2918                        00            .byte	0
11717 2919                        00            .byte	0
11718                                           ! 1466  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 291A                        00            .byte	0
11720 291B                        00            .byte	0
11721 291C                        00            .byte	0
11722 291D                        06            .byte	6
11723 291E                        0C            .byte	$C
11724 291F                        18            .byte	$18
11725 2920                        30            .byte	$30
11726 2921                        60            .byte	$60
11727 2922                        30            .byte	$30
11728 2923                        18            .byte	$18
11729 2924                        0C            .byte	$C
11730 2925                        06            .byte	6
11731 2926                        00            .byte	0
11732 2927                        00            .byte	0
11733 2928                        00            .byte	0
11734 2929                        00            .byte	0
11735                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 292A                        00            .byte	0
11737 292B                        00            .byte	0
11738 292C                        00            .byte	0
11739 292D                        00            .byte	0
11740 292E                        00            .byte	0
11741 292F                        7E            .byte	$7E
11742 2930                        00            .byte	0
11743 2931                        00            .byte	0
11744 2932                        7E            .byte	$7E
11745 2933                        00            .byte	0
11746 2934                        00            .byte	0
11747 2935                        00            .byte	0
11748 2936                        00            .byte	0
11749 2937                        00            .byte	0
11750 2938                        00            .byte	0
11751 2939                        00            .byte	0
11752                                           ! 1468  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 293A                        00            .byte	0
11754 293B                        00            .byte	0
11755 293C                        00            .byte	0
11756 293D                        60            .byte	$60
11757 293E                        30            .byte	$30
11758 293F                        18            .byte	$18
11759 2940                        0C            .byte	$C
11760 2941                        06            .byte	6
11761 2942                        0C            .byte	$C
11762 2943                        18            .byte	$18
11763 2944                        30            .byte	$30
11764 2945                        60            .byte	$60
11765 2946                        00            .byte	0
11766 2947                        00            .byte	0
11767 2948                        00            .byte	0
11768 2949                        00            .byte	0
11769                                           ! 1469  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 294A                        00            .byte	0
11771 294B                        00            .byte	0
11772 294C                        7C            .byte	$7C
11773 294D                        C6            .byte	$C6
11774 294E                        C6            .byte	$C6
11775 294F                        0C            .byte	$C
11776 2950                        18            .byte	$18
11777 2951                        18            .byte	$18
11778 2952                        18            .byte	$18
11779 2953                        00            .byte	0
11780 2954                        18            .byte	$18
11781 2955                        18            .byte	$18
11782 2956                        00            .byte	0
11783 2957                        00            .byte	0
11784 2958                        00            .byte	0
11785 2959                        00            .byte	0
11786                                           ! 1470  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 295A                        00            .byte	0
11788 295B                        00            .byte	0
11789 295C                        00            .byte	0
11790 295D                        7C            .byte	$7C
11791 295E                        C6            .byte	$C6
11792 295F                        C6            .byte	$C6
11793 2960                        DE            .byte	$DE
11794 2961                        DE            .byte	$DE
11795 2962                        DE            .byte	$DE
11796 2963                        DC            .byte	$DC
11797 2964                        C0            .byte	$C0
11798 2965                        7C            .byte	$7C
11799 2966                        00            .byte	0
11800 2967                        00            .byte	0
11801 2968                        00            .byte	0
11802 2969                        00            .byte	0
11803                                           ! 1471  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 296A                        00            .byte	0
11805 296B                        00            .byte	0
11806 296C                        10            .byte	$10
11807 296D                        38            .byte	$38
11808 296E                        6C            .byte	$6C
11809 296F                        C6            .byte	$C6
11810 2970                        C6            .byte	$C6
11811 2971                        FE            .byte	$FE
11812 2972                        C6            .byte	$C6
11813 2973                        C6            .byte	$C6
11814 2974                        C6            .byte	$C6
11815 2975                        C6            .byte	$C6
11816 2976                        00            .byte	0
11817 2977                        00            .byte	0
11818 2978                        00            .byte	0
11819 2979                        00            .byte	0
11820                                           ! 1472  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 297A                        00            .byte	0
11822 297B                        00            .byte	0
11823 297C                        FC            .byte	$FC
11824 297D                        66            .byte	$66
11825 297E                        66            .byte	$66
11826 297F                        66            .byte	$66
11827 2980                        7C            .byte	$7C
11828 2981                        66            .byte	$66
11829 2982                        66            .byte	$66
11830 2983                        66            .byte	$66
11831 2984                        66            .byte	$66
11832 2985                        FC            .byte	$FC
11833 2986                        00            .byte	0
11834 2987                        00            .byte	0
11835 2988                        00            .byte	0
11836 2989                        00            .byte	0
11837                                           ! 1473  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 298A                        00            .byte	0
11839 298B                        00            .byte	0
11840 298C                        3C            .byte	$3C
11841 298D                        66            .byte	$66
11842 298E                        C2            .byte	$C2
11843 298F                        C0            .byte	$C0
11844 2990                        C0            .byte	$C0
11845 2991                        C0            .byte	$C0
11846 2992                        C0            .byte	$C0
11847 2993                        C2            .byte	$C2
11848 2994                        66            .byte	$66
11849 2995                        3C            .byte	$3C
11850 2996                        00            .byte	0
11851 2997                        00            .byte	0
11852 2998                        00            .byte	0
11853 2999                        00            .byte	0
11854                                           ! 1474  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 299A                        00            .byte	0
11856 299B                        00            .byte	0
11857 299C                        F8            .byte	$F8
11858 299D                        6C            .byte	$6C
11859 299E                        66            .byte	$66
11860 299F                        66            .byte	$66
11861 29A0                        66            .byte	$66
11862 29A1                        66            .byte	$66
11863 29A2                        66            .byte	$66
11864 29A3                        66            .byte	$66
11865 29A4                        6C            .byte	$6C
11866 29A5                        F8            .byte	$F8
11867 29A6                        00            .byte	0
11868 29A7                        00            .byte	0
11869 29A8                        00            .byte	0
11870 29A9                        00            .byte	0
11871                                           ! 1475  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29AA                        00            .byte	0
11873 29AB                        00            .byte	0
11874 29AC                        FE            .byte	$FE
11875 29AD                        66            .byte	$66
11876 29AE                        62            .byte	$62
11877 29AF                        68            .byte	$68
11878 29B0                        78            .byte	$78
11879 29B1                        68            .byte	$68
11880 29B2                        60            .byte	$60
11881 29B3                        62            .byte	$62
11882 29B4                        66            .byte	$66
11883 29B5                        FE            .byte	$FE
11884 29B6                        00            .byte	0
11885 29B7                        00            .byte	0
11886 29B8                        00            .byte	0
11887 29B9                        00            .byte	0
11888                                           ! 1476  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29BA                        00            .byte	0
11890 29BB                        00            .byte	0
11891 29BC                        FE            .byte	$FE
11892 29BD                        66            .byte	$66
11893 29BE                        62            .byte	$62
11894 29BF                        68            .byte	$68
11895 29C0                        78            .byte	$78
11896 29C1                        68            .byte	$68
11897 29C2                        60            .byte	$60
11898 29C3                        60            .byte	$60
11899 29C4                        60            .byte	$60
11900 29C5                        F0            .byte	$F0
11901 29C6                        00            .byte	0
11902 29C7                        00            .byte	0
11903 29C8                        00            .byte	0
11904 29C9                        00            .byte	0
11905                                           ! 1477  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29CA                        00            .byte	0
11907 29CB                        00            .byte	0
11908 29CC                        3C            .byte	$3C
11909 29CD                        66            .byte	$66
11910 29CE                        C2            .byte	$C2
11911 29CF                        C0            .byte	$C0
11912 29D0                        C0            .byte	$C0
11913 29D1                        DE            .byte	$DE
11914 29D2                        C6            .byte	$C6
11915 29D3                        C6            .byte	$C6
11916 29D4                        66            .byte	$66
11917 29D5                        3A            .byte	$3A
11918 29D6                        00            .byte	0
11919 29D7                        00            .byte	0
11920 29D8                        00            .byte	0
11921 29D9                        00            .byte	0
11922                                           ! 1478  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29DA                        00            .byte	0
11924 29DB                        00            .byte	0
11925 29DC                        C6            .byte	$C6
11926 29DD                        C6            .byte	$C6
11927 29DE                        C6            .byte	$C6
11928 29DF                        C6            .byte	$C6
11929 29E0                        FE            .byte	$FE
11930 29E1                        C6            .byte	$C6
11931 29E2                        C6            .byte	$C6
11932 29E3                        C6            .byte	$C6
11933 29E4                        C6            .byte	$C6
11934 29E5                        C6            .byte	$C6
11935 29E6                        00            .byte	0
11936 29E7                        00            .byte	0
11937 29E8                        00            .byte	0
11938 29E9                        00            .byte	0
11939                                           ! 1479  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29EA                        00            .byte	0
11941 29EB                        00            .byte	0
11942 29EC                        3C            .byte	$3C
11943 29ED                        18            .byte	$18
11944 29EE                        18            .byte	$18
11945 29EF                        18            .byte	$18
11946 29F0                        18            .byte	$18
11947 29F1                        18            .byte	$18
11948 29F2                        18            .byte	$18
11949 29F3                        18            .byte	$18
11950 29F4                        18            .byte	$18
11951 29F5                        3C            .byte	$3C
11952 29F6                        00            .byte	0
11953 29F7                        00            .byte	0
11954 29F8                        00            .byte	0
11955 29F9                        00            .byte	0
11956                                           ! 1480  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11957 29FA                        00            .byte	0
11958 29FB                        00            .byte	0
11959 29FC                        1E            .byte	$1E
11960 29FD                        0C            .byte	$C
11961 29FE                        0C            .byte	$C
11962 29FF                        0C            .byte	$C
11963 2A00                        0C            .byte	$C
11964 2A01                        0C            .byte	$C
11965 2A02                        CC            .byte	$CC
11966 2A03                        CC            .byte	$CC
11967 2A04                        CC            .byte	$CC
11968 2A05                        78            .byte	$78
11969 2A06                        00            .byte	0
11970 2A07                        00            .byte	0
11971 2A08                        00            .byte	0
11972 2A09                        00            .byte	0
11973                                           ! 1481  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11974 2A0A                        00            .byte	0
11975 2A0B                        00            .byte	0
11976 2A0C                        E6            .byte	$E6
11977 2A0D                        66            .byte	$66
11978 2A0E                        66            .byte	$66
11979 2A0F                        6C            .byte	$6C
11980 2A10                        78            .byte	$78
11981 2A11                        78            .byte	$78
11982 2A12                        6C            .byte	$6C
11983 2A13                        66            .byte	$66
11984 2A14                        66            .byte	$66
11985 2A15                        E6            .byte	$E6
11986 2A16                        00            .byte	0
11987 2A17                        00            .byte	0
11988 2A18                        00            .byte	0
11989 2A19                        00            .byte	0
11990                                           ! 1482  0x0
11991                                           ! 1482 0, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A1A                        00            .byte	0
11993 2A1B                        00            .byte	0
11994 2A1C                        F0            .byte	$F0
11995 2A1D                        60            .byte	$60
11996 2A1E                        60            .byte	$60
11997 2A1F                        60            .byte	$60
11998 2A20                        60            .byte	$60
11999 2A21                        60            .byte	$60
12000 2A22                        60            .byte	$60
12001 2A23                        62            .byte	$62
12002 2A24                        66            .byte	$66
12003 2A25                        FE            .byte	$FE
12004 2A26                        00            .byte	0
12005 2A27                        00            .byte	0
12006 2A28                        00            .byte	0
12007 2A29                        00            .byte	0
12008                                           ! 1483  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A2A                        00            .byte	0
12010 2A2B                        00            .byte	0
12011 2A2C                        C3            .byte	$C3
12012 2A2D                        E7            .byte	$E7
12013 2A2E                        FF            .byte	$FF
12014 2A2F                        FF            .byte	$FF
12015 2A30                        DB            .byte	$DB
12016 2A31                        C3            .byte	$C3
12017 2A32                        C3            .byte	$C3
12018 2A33                        C3            .byte	$C3
12019 2A34                        C3            .byte	$C3
12020 2A35                        C3            .byte	$C3
12021 2A36                        00            .byte	0
12022 2A37                        00            .byte	0
12023 2A38                        00            .byte	0
12024 2A39                        00            .byte	0
12025                                           ! 1484  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A3A                        00            .byte	0
12027 2A3B                        00            .byte	0
12028 2A3C                        C6            .byte	$C6
12029 2A3D                        E6            .byte	$E6
12030 2A3E                        F6            .byte	$F6
12031 2A3F                        FE            .byte	$FE
12032 2A40                        DE            .byte	$DE
12033 2A41                        CE            .byte	$CE
12034 2A42                        C6            .byte	$C6
12035 2A43                        C6            .byte	$C6
12036 2A44                        C6            .byte	$C6
12037 2A45                        C6            .byte	$C6
12038 2A46                        00            .byte	0
12039 2A47                        00            .byte	0
12040 2A48                        00            .byte	0
12041 2A49                        00            .byte	0
12042                                           ! 1485  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A4A                        00            .byte	0
12044 2A4B                        00            .byte	0
12045 2A4C                        7C            .byte	$7C
12046 2A4D                        C6            .byte	$C6
12047 2A4E                        C6            .byte	$C6
12048 2A4F                        C6            .byte	$C6
12049 2A50                        C6            .byte	$C6
12050 2A51                        C6            .byte	$C6
12051 2A52                        C6            .byte	$C6
12052 2A53                        C6            .byte	$C6
12053 2A54                        C6            .byte	$C6
12054 2A55                        7C            .byte	$7C
12055 2A56                        00            .byte	0
12056 2A57                        00            .byte	0
12057 2A58                        00            .byte	0
12058 2A59                        00            .byte	0
12059                                           ! 1486  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A5A                        00            .byte	0
12061 2A5B                        00            .byte	0
12062 2A5C                        FC            .byte	$FC
12063 2A5D                        66            .byte	$66
12064 2A5E                        66            .byte	$66
12065 2A5F                        66            .byte	$66
12066 2A60                        7C            .byte	$7C
12067 2A61                        60            .byte	$60
12068 2A62                        60            .byte	$60
12069 2A63                        60            .byte	$60
12070 2A64                        60            .byte	$60
12071 2A65                        F0            .byte	$F0
12072 2A66                        00            .byte	0
12073 2A67                        00            .byte	0
12074 2A68                        00            .byte	0
12075 2A69                        00            .byte	0
12076                                           ! 1487  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A6A                        00            .byte	0
12078 2A6B                        00            .byte	0
12079 2A6C                        7C            .byte	$7C
12080 2A6D                        C6            .byte	$C6
12081 2A6E                        C6            .byte	$C6
12082 2A6F                        C6            .byte	$C6
12083 2A70                        C6            .byte	$C6
12084 2A71                        C6            .byte	$C6
12085 2A72                        C6            .byte	$C6
12086 2A73                        D6            .byte	$D6
12087 2A74                        DE            .byte	$DE
12088 2A75                        7C            .byte	$7C
12089 2A76                        0C            .byte	$C
12090 2A77                        0E            .byte	$E
12091 2A78                        00            .byte	0
12092 2A79                        00            .byte	0
12093                                           ! 1488  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A7A                        00            .byte	0
12095 2A7B                        00            .byte	0
12096 2A7C                        FC            .byte	$FC
12097 2A7D                        66            .byte	$66
12098 2A7E                        66            .byte	$66
12099 2A7F                        66            .byte	$66
12100 2A80                        7C            .byte	$7C
12101 2A81                        6C            .byte	$6C
12102 2A82                        66            .byte	$66
12103 2A83                        66            .byte	$66
12104 2A84                        66            .byte	$66
12105 2A85                        E6            .byte	$E6
12106 2A86                        00            .byte	0
12107 2A87                        00            .byte	0
12108 2A88                        00            .byte	0
12109 2A89                        00            .byte	0
12110                                           ! 1489  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A8A                        00            .byte	0
12112 2A8B                        00            .byte	0
12113 2A8C                        7C            .byte	$7C
12114 2A8D                        C6            .byte	$C6
12115 2A8E                        C6            .byte	$C6
12116 2A8F                        60            .byte	$60
12117 2A90                        38            .byte	$38
12118 2A91                        0C            .byte	$C
12119 2A92                        06            .byte	6
12120 2A93                        C6            .byte	$C6
12121 2A94                        C6            .byte	$C6
12122 2A95                        7C            .byte	$7C
12123 2A96                        00            .byte	0
12124 2A97                        00            .byte	0
12125 2A98                        00            .byte	0
12126 2A99                        00            .byte	0
12127                                           ! 1490  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2A9A                        00            .byte	0
12129 2A9B                        00            .byte	0
12130 2A9C                        FF            .byte	$FF
12131 2A9D                        DB            .byte	$DB
12132 2A9E                        99            .byte	$99
12133 2A9F                        18            .byte	$18
12134 2AA0                        18            .byte	$18
12135 2AA1                        18            .byte	$18
12136 2AA2                        18            .byte	$18
12137 2AA3                        18            .byte	$18
12138 2AA4                        18            .byte	$18
12139 2AA5                        3C            .byte	$3C
12140 2AA6                        00            .byte	0
12141 2AA7                        00            .byte	0
12142 2AA8                        00            .byte	0
12143 2AA9                        00            .byte	0
12144                                           ! 1491  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2AAA                        00            .byte	0
12146 2AAB                        00            .byte	0
12147 2AAC                        C6            .byte	$C6
12148 2AAD                        C6            .byte	$C6
12149 2AAE                        C6            .byte	$C6
12150 2AAF                        C6            .byte	$C6
12151 2AB0                        C6            .byte	$C6
12152 2AB1                        C6            .byte	$C6
12153 2AB2                        C6            .byte	$C6
12154 2AB3                        C6            .byte	$C6
12155 2AB4                        C6            .byte	$C6
12156 2AB5                        7C            .byte	$7C
12157 2AB6                        00            .byte	0
12158 2AB7                        00            .byte	0
12159 2AB8                        00            .byte	0
12160 2AB9                        00            .byte	0
12161                                           ! 1492  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2ABA                        00            .byte	0
12163 2ABB                        00            .byte	0
12164 2ABC                        C3            .byte	$C3
12165 2ABD                        C3            .byte	$C3
12166 2ABE                        C3            .byte	$C3
12167 2ABF                        C3            .byte	$C3
12168 2AC0                        C3            .byte	$C3
12169 2AC1                        C3            .byte	$C3
12170 2AC2                        C3            .byte	$C3
12171 2AC3                        66            .byte	$66
12172 2AC4                        3C            .byte	$3C
12173 2AC5                        18            .byte	$18
12174 2AC6                        00            .byte	0
12175 2AC7                        00            .byte	0
12176 2AC8                        00            .byte	0
12177 2AC9                        00            .byte	0
12178                                           ! 1493  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2ACA                        00            .byte	0
12180 2ACB                        00            .byte	0
12181 2ACC                        C3            .byte	$C3
12182 2ACD                        C3            .byte	$C3
12183 2ACE                        C3            .byte	$C3
12184 2ACF                        C3            .byte	$C3
12185 2AD0                        C3            .byte	$C3
12186 2AD1                        DB            .byte	$DB
12187 2AD2                        DB            .byte	$DB
12188 2AD3                        FF            .byte	$FF
12189 2AD4                        66            .byte	$66
12190 2AD5                        66            .byte	$66
12191 2AD6                        00            .byte	0
12192 2AD7                        00            .byte	0
12193 2AD8                        00            .byte	0
12194 2AD9                        00            .byte	0
12195                                           ! 1494  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2ADA                        00            .byte	0
12197 2ADB                        00            .byte	0
12198 2ADC                        C3            .byte	$C3
12199 2ADD                        C3            .byte	$C3
12200 2ADE                        66            .byte	$66
12201 2ADF                        3C            .byte	$3C
12202 2AE0                        18            .byte	$18
12203 2AE1                        18            .byte	$18
12204 2AE2                        3C            .byte	$3C
12205 2AE3                        66            .byte	$66
12206 2AE4                        C3            .byte	$C3
12207 2AE5                        C3            .byte	$C3
12208 2AE6                        00            .byte	0
12209 2AE7                        00            .byte	0
12210 2AE8                        00            .byte	0
12211 2AE9                        00            .byte	0
12212                                           ! 1495  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AEA                        00            .byte	0
12214 2AEB                        00            .byte	0
12215 2AEC                        C3            .byte	$C3
12216 2AED                        C3            .byte	$C3
12217 2AEE                        C3            .byte	$C3
12218 2AEF                        66            .byte	$66
12219 2AF0                        3C            .byte	$3C
12220 2AF1                        18            .byte	$18
12221 2AF2                        18            .byte	$18
12222 2AF3                        18            .byte	$18
12223 2AF4                        18            .byte	$18
12224 2AF5                        3C            .byte	$3C
12225 2AF6                        00            .byte	0
12226 2AF7                        00            .byte	0
12227 2AF8                        00            .byte	0
12228 2AF9                        00            .byte	0
12229                                           ! 1496  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2AFA                        00            .byte	0
12231 2AFB                        00            .byte	0
12232 2AFC                        FF            .byte	$FF
12233 2AFD                        C3            .byte	$C3
12234 2AFE                        86            .byte	$86
12235 2AFF                        0C            .byte	$C
12236 2B00                        18            .byte	$18
12237 2B01                        30            .byte	$30
12238 2B02                        60            .byte	$60
12239 2B03                        C1            .byte	$C1
12240 2B04                        C3            .byte	$C3
12241 2B05                        FF            .byte	$FF
12242 2B06                        00            .byte	0
12243 2B07                        00            .byte	0
12244 2B08                        00            .byte	0
12245 2B09                        00            .byte	0
12246                                           ! 1497  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B0A                        00            .byte	0
12248 2B0B                        00            .byte	0
12249 2B0C                        3C            .byte	$3C
12250 2B0D                        30            .byte	$30
12251 2B0E                        30            .byte	$30
12252 2B0F                        30            .byte	$30
12253 2B10                        30            .byte	$30
12254 2B11                        30            .byte	$30
12255 2B12                        30            .byte	$30
12256 2B13                        30            .byte	$30
12257 2B14                        30            .byte	$30
12258 2B15                        3C            .byte	$3C
12259 2B16                        00            .byte	0
12260 2B17                        00            .byte	0
12261 2B18                        00            .byte	0
12262 2B19                        00            .byte	0
12263                                           ! 1498  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B1A                        00            .byte	0
12265 2B1B                        00            .byte	0
12266 2B1C                        00            .byte	0
12267 2B1D                        80            .byte	$80
12268 2B1E                        C0            .byte	$C0
12269 2B1F                        E0            .byte	$E0
12270 2B20                        70            .byte	$70
12271 2B21                        38            .byte	$38
12272 2B22                        1C            .byte	$1C
12273 2B23                        0E            .byte	$E
12274 2B24                        06            .byte	6
12275 2B25                        02            .byte	2
12276 2B26                        00            .byte	0
12277 2B27                        00            .byte	0
12278 2B28                        00            .byte	0
12279 2B29                        00            .byte	0
12280                                           ! 1499  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B2A                        00            .byte	0
12282 2B2B                        00            .byte	0
12283 2B2C                        3C            .byte	$3C
12284 2B2D                        0C            .byte	$C
12285 2B2E                        0C            .byte	$C
12286 2B2F                        0C            .byte	$C
12287 2B30                        0C            .byte	$C
12288 2B31                        0C            .byte	$C
12289 2B32                        0C            .byte	$C
12290 2B33                        0C            .byte	$C
12291 2B34                        0C            .byte	$C
12292 2B35                        3C            .byte	$3C
12293 2B36                        00            .byte	0
12294 2B37                        00            .byte	0
12295 2B38                        00            .byte	0
12296 2B39                        00            .byte	0
12297                                           ! 1500  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B3A                        10            .byte	$10
12299 2B3B                        38            .byte	$38
12300 2B3C                        6C            .byte	$6C
12301 2B3D                        C6            .byte	$C6
12302 2B3E                        00            .byte	0
12303 2B3F                        00            .byte	0
12304 2B40                        00            .byte	0
12305 2B41                        00            .byte	0
12306 2B42                        00            .byte	0
12307 2B43                        00            .byte	0
12308 2B44                        00            .byte	0
12309 2B45                        00            .byte	0
12310 2B46                        00            .byte	0
12311 2B47                        00            .byte	0
12312 2B48                        00            .byte	0
12313 2B49                        00            .byte	0
12314                                           ! 1501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B4A                        00            .byte	0
12316 2B4B                        00            .byte	0
12317 2B4C                        00            .byte	0
12318 2B4D                        00            .byte	0
12319 2B4E                        00            .byte	0
12320 2B4F                        00            .byte	0
12321 2B50                        00            .byte	0
12322 2B51                        00            .byte	0
12323 2B52                        00            .byte	0
12324 2B53                        00            .byte	0
12325 2B54                        00            .byte	0
12326 2B55                        00            .byte	0
12327 2B56                        00            .byte	0
12328 2B57                        FF            .byte	$FF
12329 2B58                        00            .byte	0
12330 2B59                        00            .byte	0
12331                                           ! 1502  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12332 2B5A                        30            .byte	$30
12333 2B5B                        30            .byte	$30
12334 2B5C                        18            .byte	$18
12335 2B5D                        00            .byte	0
12336 2B5E                        00            .byte	0
12337 2B5F                        00            .byte	0
12338 2B60                        00            .byte	0
12339 2B61                        00            .byte	0
12340 2B62                        00            .byte	0
12341 2B63                        00            .byte	0
12342 2B64                        00            .byte	0
12343 2B65                        00            .byte	0
12344 2B66                        00            .byte	0
12345 2B67                        00            .byte	0
12346 2B68                        00            .byte	0
12347 2B69                        00            .byte	0
12348                                           ! 1503  0x00, 0x00, 0x
12349 2B6A                        00            .byte	0
12350 2B6B                        00            .byte	0
12351                                           ! 1503 00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12352 2B6C                        00            .byte	0
12353 2B6D                        00            .byte	0
12354 2B6E                        00            .byte	0
12355 2B6F                        78            .byte	$78
12356 2B70                        0C            .byte	$C
12357 2B71                        7C            .byte	$7C
12358 2B72                        CC            .byte	$CC
12359 2B73                        CC            .byte	$CC
12360 2B74                        CC            .byte	$CC
12361 2B75                        76            .byte	$76
12362 2B76                        00            .byte	0
12363 2B77                        00            .byte	0
12364 2B78                        00            .byte	0
12365 2B79                        00            .byte	0
12366                                           ! 1504  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B7A                        00            .byte	0
12368 2B7B                        00            .byte	0
12369 2B7C                        E0            .byte	$E0
12370 2B7D                        60            .byte	$60
12371 2B7E                        60            .byte	$60
12372 2B7F                        78            .byte	$78
12373 2B80                        6C            .byte	$6C
12374 2B81                        66            .byte	$66
12375 2B82                        66            .byte	$66
12376 2B83                        66            .byte	$66
12377 2B84                        66            .byte	$66
12378 2B85                        7C            .byte	$7C
12379 2B86                        00            .byte	0
12380 2B87                        00            .byte	0
12381 2B88                        00            .byte	0
12382 2B89                        00            .byte	0
12383                                           ! 1505  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B8A                        00            .byte	0
12385 2B8B                        00            .byte	0
12386 2B8C                        00            .byte	0
12387 2B8D                        00            .byte	0
12388 2B8E                        00            .byte	0
12389 2B8F                        7C            .byte	$7C
12390 2B90                        C6            .byte	$C6
12391 2B91                        C0            .byte	$C0
12392 2B92                        C0            .byte	$C0
12393 2B93                        C0            .byte	$C0
12394 2B94                        C6            .byte	$C6
12395 2B95                        7C            .byte	$7C
12396 2B96                        00            .byte	0
12397 2B97                        00            .byte	0
12398 2B98                        00            .byte	0
12399 2B99                        00            .byte	0
12400                                           ! 1506  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2B9A                        00            .byte	0
12402 2B9B                        00            .byte	0
12403 2B9C                        1C            .byte	$1C
12404 2B9D                        0C            .byte	$C
12405 2B9E                        0C            .byte	$C
12406 2B9F                        3C            .byte	$3C
12407 2BA0                        6C            .byte	$6C
12408 2BA1                        CC            .byte	$CC
12409 2BA2                        CC            .byte	$CC
12410 2BA3                        CC            .byte	$CC
12411 2BA4                        CC            .byte	$CC
12412 2BA5                        76            .byte	$76
12413 2BA6                        00            .byte	0
12414 2BA7                        00            .byte	0
12415 2BA8                        00            .byte	0
12416 2BA9                        00            .byte	0
12417                                           ! 1507  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BAA                        00            .byte	0
12419 2BAB                        00            .byte	0
12420 2BAC                        00            .byte	0
12421 2BAD                        00            .byte	0
12422 2BAE                        00            .byte	0
12423 2BAF                        7C            .byte	$7C
12424 2BB0                        C6            .byte	$C6
12425 2BB1                        FE            .byte	$FE
12426 2BB2                        C0            .byte	$C0
12427 2BB3                        C0            .byte	$C0
12428 2BB4                        C6            .byte	$C6
12429 2BB5                        7C            .byte	$7C
12430 2BB6                        00            .byte	0
12431 2BB7                        00            .byte	0
12432 2BB8                        00            .byte	0
12433 2BB9                        00            .byte	0
12434                                           ! 1508  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BBA                        00            .byte	0
12436 2BBB                        00            .byte	0
12437 2BBC                        38            .byte	$38
12438 2BBD                        6C            .byte	$6C
12439 2BBE                        64            .byte	$64
12440 2BBF                        60            .byte	$60
12441 2BC0                        F0            .byte	$F0
12442 2BC1                        60            .byte	$60
12443 2BC2                        60            .byte	$60
12444 2BC3                        60            .byte	$60
12445 2BC4                        60            .byte	$60
12446 2BC5                        F0            .byte	$F0
12447 2BC6                        00            .byte	0
12448 2BC7                        00            .byte	0
12449 2BC8                        00            .byte	0
12450 2BC9                        00            .byte	0
12451                                           ! 1509  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BCA                        00            .byte	0
12453 2BCB                        00            .byte	0
12454 2BCC                        00            .byte	0
12455 2BCD                        00            .byte	0
12456 2BCE                        00            .byte	0
12457 2BCF                        76            .byte	$76
12458 2BD0                        CC            .byte	$CC
12459 2BD1                        CC            .byte	$CC
12460 2BD2                        CC            .byte	$CC
12461 2BD3                        CC            .byte	$CC
12462 2BD4                        CC            .byte	$CC
12463 2BD5                        7C            .byte	$7C
12464 2BD6                        0C            .byte	$C
12465 2BD7                        CC            .byte	$CC
12466 2BD8                        78            .byte	$78
12467 2BD9                        00            .byte	0
12468                                           ! 1510  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BDA                        00            .byte	0
12470 2BDB                        00            .byte	0
12471 2BDC                        E0            .byte	$E0
12472 2BDD                        60            .byte	$60
12473 2BDE                        60            .byte	$60
12474 2BDF                        6C            .byte	$6C
12475 2BE0                        76            .byte	$76
12476 2BE1                        66            .byte	$66
12477 2BE2                        66            .byte	$66
12478 2BE3                        66            .byte	$66
12479 2BE4                        66            .byte	$66
12480 2BE5                        E6            .byte	$E6
12481 2BE6                        00            .byte	0
12482 2BE7                        00            .byte	0
12483 2BE8                        00            .byte	0
12484 2BE9                        00            .byte	0
12485                                           ! 1511  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BEA                        00            .byte	0
12487 2BEB                        00            .byte	0
12488 2BEC                        18            .byte	$18
12489 2BED                        18            .byte	$18
12490 2BEE                        00            .byte	0
12491 2BEF                        38            .byte	$38
12492 2BF0                        18            .byte	$18
12493 2BF1                        18            .byte	$18
12494 2BF2                        18            .byte	$18
12495 2BF3                        18            .byte	$18
12496 2BF4                        18            .byte	$18
12497 2BF5                        3C            .byte	$3C
12498 2BF6                        00            .byte	0
12499 2BF7                        00            .byte	0
12500 2BF8                        00            .byte	0
12501 2BF9                        00            .byte	0
12502                                           ! 1512  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2BFA                        00            .byte	0
12504 2BFB                        00            .byte	0
12505 2BFC                        06            .byte	6
12506 2BFD                        06            .byte	6
12507 2BFE                        00            .byte	0
12508 2BFF                        0E            .byte	$E
12509 2C00                        06            .byte	6
12510 2C01                        06            .byte	6
12511 2C02                        06            .byte	6
12512 2C03                        06            .byte	6
12513 2C04                        06            .byte	6
12514 2C05                        06            .byte	6
12515 2C06                        66            .byte	$66
12516 2C07                        66            .byte	$66
12517 2C08                        3C            .byte	$3C
12518 2C09                        00            .byte	0
12519                                           ! 1513  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C0A                        00            .byte	0
12521 2C0B                        00            .byte	0
12522 2C0C                        E0            .byte	$E0
12523 2C0D                        60            .byte	$60
12524 2C0E                        60            .byte	$60
12525 2C0F                        66            .byte	$66
12526 2C10                        6C            .byte	$6C
12527 2C11                        78            .byte	$78
12528 2C12                        78            .byte	$78
12529 2C13                        6C            .byte	$6C
12530 2C14                        66            .byte	$66
12531 2C15                        E6            .byte	$E6
12532 2C16                        00            .byte	0
12533 2C17                        00            .byte	0
12534 2C18                        00            .byte	0
12535 2C19                        00            .byte	0
12536                                           ! 1514  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C1A                        00            .byte	0
12538 2C1B                        00            .byte	0
12539 2C1C                        38            .byte	$38
12540 2C1D                        18            .byte	$18
12541 2C1E                        18            .byte	$18
12542 2C1F                        18            .byte	$18
12543 2C20                        18            .byte	$18
12544 2C21                        18            .byte	$18
12545 2C22                        18            .byte	$18
12546 2C23                        18            .byte	$18
12547 2C24                        18            .byte	$18
12548 2C25                        3C            .byte	$3C
12549 2C26                        00            .byte	0
12550 2C27                        00            .byte	0
12551 2C28                        00            .byte	0
12552 2C29                        00            .byte	0
12553                                           ! 1515  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C2A                        00            .byte	0
12555 2C2B                        00            .byte	0
12556 2C2C                        00            .byte	0
12557 2C2D                        00            .byte	0
12558 2C2E                        00            .byte	0
12559 2C2F                        E6            .byte	$E6
12560 2C30                        FF            .byte	$FF
12561 2C31                        DB            .byte	$DB
12562 2C32                        DB            .byte	$DB
12563 2C33                        DB            .byte	$DB
12564 2C34                        DB            .byte	$DB
12565 2C35                        DB            .byte	$DB
12566 2C36                        00            .byte	0
12567 2C37                        00            .byte	0
12568 2C38                        00            .byte	0
12569 2C39                        00            .byte	0
12570                                           ! 1516  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C3A                        00            .byte	0
12572 2C3B                        00            .byte	0
12573 2C3C                        00            .byte	0
12574 2C3D                        00            .byte	0
12575 2C3E                        00            .byte	0
12576 2C3F                        DC            .byte	$DC
12577 2C40                        66            .byte	$66
12578 2C41                        66            .byte	$66
12579 2C42                        66            .byte	$66
12580 2C43                        66            .byte	$66
12581 2C44                        66            .byte	$66
12582 2C45                        66            .byte	$66
12583 2C46                        00            .byte	0
12584 2C47                        00            .byte	0
12585 2C48                        00            .byte	0
12586 2C49                        00            .byte	0
12587                                           ! 1517  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C4A                        00            .byte	0
12589 2C4B                        00            .byte	0
12590 2C4C                        00            .byte	0
12591 2C4D                        00            .byte	0
12592 2C4E                        00            .byte	0
12593 2C4F                        7C            .byte	$7C
12594 2C50                        C6            .byte	$C6
12595 2C51                        C6            .byte	$C6
12596 2C52                        C6            .byte	$C6
12597 2C53                        C6            .byte	$C6
12598 2C54                        C6            .byte	$C6
12599 2C55                        7C            .byte	$7C
12600 2C56                        00            .byte	0
12601 2C57                        00            .byte	0
12602 2C58                        00            .byte	0
12603 2C59                        00            .byte	0
12604                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C5A                        00            .byte	0
12606 2C5B                        00            .byte	0
12607 2C5C                        00            .byte	0
12608 2C5D                        00            .byte	0
12609 2C5E                        00            .byte	0
12610 2C5F                        DC            .byte	$DC
12611 2C60                        66            .byte	$66
12612 2C61                        66            .byte	$66
12613 2C62                        66            .byte	$66
12614 2C63                        66            .byte	$66
12615 2C64                        66            .byte	$66
12616 2C65                        7C            .byte	$7C
12617 2C66                        60            .byte	$60
12618 2C67                        60            .byte	$60
12619 2C68                        F0            .byte	$F0
12620 2C69                        00            .byte	0
12621                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C6A                        00            .byte	0
12623 2C6B                        00            .byte	0
12624 2C6C                        00            .byte	0
12625 2C6D                        00            .byte	0
12626 2C6E                        00            .byte	0
12627 2C6F                        76            .byte	$76
12628 2C70                        CC            .byte	$CC
12629 2C71                        CC            .byte	$CC
12630 2C72                        CC            .byte	$CC
12631 2C73                        CC            .byte	$CC
12632 2C74                        CC            .byte	$CC
12633 2C75                        7C            .byte	$7C
12634 2C76                        0C            .byte	$C
12635 2C77                        0C            .byte	$C
12636 2C78                        1E            .byte	$1E
12637 2C79                        00            .byte	0
12638                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C7A                        00            .byte	0
12640 2C7B                        00            .byte	0
12641 2C7C                        00            .byte	0
12642 2C7D                        00            .byte	0
12643 2C7E                        00            .byte	0
12644 2C7F                        DC            .byte	$DC
12645 2C80                        76            .byte	$76
12646 2C81                        66            .byte	$66
12647 2C82                        60            .byte	$60
12648 2C83                        60            .byte	$60
12649 2C84                        60            .byte	$60
12650 2C85                        F0            .byte	$F0
12651 2C86                        00            .byte	0
12652 2C87                        00            .byte	0
12653 2C88                        00            .byte	0
12654 2C89                        00            .byte	0
12655                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C8A                        00            .byte	0
12657 2C8B                        00            .byte	0
12658 2C8C                        00            .byte	0
12659 2C8D                        00            .byte	0
12660 2C8E                        00            .byte	0
12661 2C8F                        7C            .byte	$7C
12662 2C90                        C6            .byte	$C6
12663 2C91                        60            .byte	$60
12664 2C92                        38            .byte	$38
12665 2C93                        0C            .byte	$C
12666 2C94                        C6            .byte	$C6
12667 2C95                        7C            .byte	$7C
12668 2C96                        00            .byte	0
12669 2C97                        00            .byte	0
12670 2C98                        00            .byte	0
12671 2C99                        00            .byte	0
12672                                           ! 1522  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2C9A                        00            .byte	0
12674 2C9B                        00            .byte	0
12675 2C9C                        10            .byte	$10
12676 2C9D                        30            .byte	$30
12677 2C9E                        30            .byte	$30
12678 2C9F                        FC            .byte	$FC
12679 2CA0                        30            .byte	$30
12680 2CA1                        30            .byte	$30
12681 2CA2                        30            .byte	$30
12682 2CA3                        30            .byte	$30
12683 2CA4                        36            .byte	$36
12684 2CA5                        1C            .byte	$1C
12685 2CA6                        00            .byte	0
12686 2CA7                        00            .byte	0
12687 2CA8                        00            .byte	0
12688 2CA9                        00            .byte	0
12689                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12690 2CAA                        00            .byte	0
12691 2CAB                        00            .byte	0
12692 2CAC                        00            .byte	0
12693 2CAD                        00            .byte	0
12694 2CAE                        00            .byte	0
12695 2CAF                        CC            .byte	$CC
12696 2CB0                        CC            .byte	$CC
12697 2CB1                        CC            .byte	$CC
12698 2CB2                        CC            .byte	$CC
12699 2CB3                        CC            .byte	$CC
12700 2CB4                        CC            .byte	$CC
12701 2CB5                        76            .byte	$76
12702 2CB6                        00            .byte	0
12703 2CB7                        00            .byte	0
12704 2CB8                        00            .byte	0
12705 2CB9                        00            .byte	0
12706                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0
12707 2CBA                        00            .byte	0
12708 2CBB                        00            .byte	0
12709 2CBC                        00            .byte	0
12710 2CBD                        00            .byte	0
12711                                           ! 1524 x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12712 2CBE                        00            .byte	0
12713 2CBF                        C3            .byte	$C3
12714 2CC0                        C3            .byte	$C3
12715 2CC1                        C3            .byte	$C3
12716 2CC2                        C3            .byte	$C3
12717 2CC3                        66            .byte	$66
12718 2CC4                        3C            .byte	$3C
12719 2CC5                        18            .byte	$18
12720 2CC6                        00            .byte	0
12721 2CC7                        00            .byte	0
12722 2CC8                        00            .byte	0
12723 2CC9                        00            .byte	0
12724                                           ! 1525  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CCA                        00            .byte	0
12726 2CCB                        00            .byte	0
12727 2CCC                        00            .byte	0
12728 2CCD                        00            .byte	0
12729 2CCE                        00            .byte	0
12730 2CCF                        C3            .byte	$C3
12731 2CD0                        C3            .byte	$C3
12732 2CD1                        C3            .byte	$C3
12733 2CD2                        DB            .byte	$DB
12734 2CD3                        DB            .byte	$DB
12735 2CD4                        FF            .byte	$FF
12736 2CD5                        66            .byte	$66
12737 2CD6                        00            .byte	0
12738 2CD7                        00            .byte	0
12739 2CD8                        00            .byte	0
12740 2CD9                        00            .byte	0
12741                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CDA                        00            .byte	0
12743 2CDB                        00            .byte	0
12744 2CDC                        00            .byte	0
12745 2CDD                        00            .byte	0
12746 2CDE                        00            .byte	0
12747 2CDF                        C3            .byte	$C3
12748 2CE0                        66            .byte	$66
12749 2CE1                        3C            .byte	$3C
12750 2CE2                        18            .byte	$18
12751 2CE3                        3C            .byte	$3C
12752 2CE4                        66            .byte	$66
12753 2CE5                        C3            .byte	$C3
12754 2CE6                        00            .byte	0
12755 2CE7                        00            .byte	0
12756 2CE8                        00            .byte	0
12757 2CE9                        00            .byte	0
12758                                           ! 1527  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CEA                        00            .byte	0
12760 2CEB                        00            .byte	0
12761 2CEC                        00            .byte	0
12762 2CED                        00            .byte	0
12763 2CEE                        00            .byte	0
12764 2CEF                        C6            .byte	$C6
12765 2CF0                        C6            .byte	$C6
12766 2CF1                        C6            .byte	$C6
12767 2CF2                        C6            .byte	$C6
12768 2CF3                        C6            .byte	$C6
12769 2CF4                        C6            .byte	$C6
12770 2CF5                        7E            .byte	$7E
12771 2CF6                        06            .byte	6
12772 2CF7                        0C            .byte	$C
12773 2CF8                        F8            .byte	$F8
12774 2CF9                        00            .byte	0
12775                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2CFA                        00            .byte	0
12777 2CFB                        00            .byte	0
12778 2CFC                        00            .byte	0
12779 2CFD                        00            .byte	0
12780 2CFE                        00            .byte	0
12781 2CFF                        FE            .byte	$FE
12782 2D00                        CC            .byte	$CC
12783 2D01                        18            .byte	$18
12784 2D02                        30            .byte	$30
12785 2D03                        60            .byte	$60
12786 2D04                        C6            .byte	$C6
12787 2D05                        FE            .byte	$FE
12788 2D06                        00            .byte	0
12789 2D07                        00            .byte	0
12790 2D08                        00            .byte	0
12791 2D09                        00            .byte	0
12792                                           ! 1529  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D0A                        00            .byte	0
12794 2D0B                        00            .byte	0
12795 2D0C                        0E            .byte	$E
12796 2D0D                        18            .byte	$18
12797 2D0E                        18            .byte	$18
12798 2D0F                        18            .byte	$18
12799 2D10                        70            .byte	$70
12800 2D11                        18            .byte	$18
12801 2D12                        18            .byte	$18
12802 2D13                        18            .byte	$18
12803 2D14                        18            .byte	$18
12804 2D15                        0E            .byte	$E
12805 2D16                        00            .byte	0
12806 2D17                        00            .byte	0
12807 2D18                        00            .byte	0
12808 2D19                        00            .byte	0
12809                                           ! 1530  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D1A                        00            .byte	0
12811 2D1B                        00            .byte	0
12812 2D1C                        18            .byte	$18
12813 2D1D                        18            .byte	$18
12814 2D1E                        18            .byte	$18
12815 2D1F                        18            .byte	$18
12816 2D20                        00            .byte	0
12817 2D21                        18            .byte	$18
12818 2D22                        18            .byte	$18
12819 2D23                        18            .byte	$18
12820 2D24                        18            .byte	$18
12821 2D25                        18            .byte	$18
12822 2D26                        00            .byte	0
12823 2D27                        00            .byte	0
12824 2D28                        00            .byte	0
12825 2D29                        00            .byte	0
12826                                           ! 1531  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D2A                        00            .byte	0
12828 2D2B                        00            .byte	0
12829 2D2C                        70            .byte	$70
12830 2D2D                        18            .byte	$18
12831 2D2E                        18            .byte	$18
12832 2D2F                        18            .byte	$18
12833 2D30                        0E            .byte	$E
12834 2D31                        18            .byte	$18
12835 2D32                        18            .byte	$18
12836 2D33                        18            .byte	$18
12837 2D34                        18            .byte	$18
12838 2D35                        70            .byte	$70
12839 2D36                        00            .byte	0
12840 2D37                        00            .byte	0
12841 2D38                        00            .byte	0
12842 2D39                        00            .byte	0
12843                                           ! 1532  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D3A                        00            .byte	0
12845 2D3B                        00            .byte	0
12846 2D3C                        76            .byte	$76
12847 2D3D                        DC            .byte	$DC
12848 2D3E                        00            .byte	0
12849 2D3F                        00            .byte	0
12850 2D40                        00            .byte	0
12851 2D41                        00            .byte	0
12852 2D42                        00            .byte	0
12853 2D43                        00            .byte	0
12854 2D44                        00            .byte	0
12855 2D45                        00            .byte	0
12856 2D46                        00            .byte	0
12857 2D47                        00            .byte	0
12858 2D48                        00            .byte	0
12859 2D49                        00            .byte	0
12860                                           ! 1533  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D4A                        00            .byte	0
12862 2D4B                        00            .byte	0
12863 2D4C                        00            .byte	0
12864 2D4D                        00            .byte	0
12865 2D4E                        10            .byte	$10
12866 2D4F                        38            .byte	$38
12867 2D50                        6C            .byte	$6C
12868 2D51                        C6            .byte	$C6
12869 2D52                        C6            .byte	$C6
12870 2D53                        C6            .byte	$C6
12871 2D54                        FE            .byte	$FE
12872 2D55                        00            .byte	0
12873 2D56                        00            .byte	0
12874 2D57                        00            .byte	0
12875 2D58                        00            .byte	0
12876 2D59                        00            .byte	0
12877                                           ! 1534  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D5A                        00            .byte	0
12879 2D5B                        00            .byte	0
12880 2D5C                        3C            .byte	$3C
12881 2D5D                        66            .byte	$66
12882 2D5E                        C2            .byte	$C2
12883 2D5F                        C0            .byte	$C0
12884 2D60                        C0            .byte	$C0
12885 2D61                        C0            .byte	$C0
12886 2D62                        C2            .byte	$C2
12887 2D63                        66            .byte	$66
12888 2D64                        3C            .byte	$3C
12889 2D65                        0C            .byte	$C
12890 2D66                        06            .byte	6
12891 2D67                        7C            .byte	$7C
12892 2D68                        00            .byte	0
12893 2D69                        00            .byte	0
12894                                           ! 1535  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D6A                        00            .byte	0
12896 2D6B                        00            .byte	0
12897 2D6C                        CC            .byte	$CC
12898 2D6D                        00            .byte	0
12899 2D6E                        00            .byte	0
12900 2D6F                        CC            .byte	$CC
12901 2D70                        CC            .byte	$CC
12902 2D71                        CC            .byte	$CC
12903 2D72                        CC            .byte	$CC
12904 2D73                        CC            .byte	$CC
12905 2D74                        CC            .byte	$CC
12906 2D75                        76            .byte	$76
12907 2D76                        00            .byte	0
12908 2D77                        00            .byte	0
12909 2D78                        00            .byte	0
12910 2D79                        00            .byte	0
12911                                           ! 1536  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D7A                        00            .byte	0
12913 2D7B                        0C            .byte	$C
12914 2D7C                        18            .byte	$18
12915 2D7D                        30            .byte	$30
12916 2D7E                        00            .byte	0
12917 2D7F                        7C            .byte	$7C
12918 2D80                        C6            .byte	$C6
12919 2D81                        FE            .byte	$FE
12920 2D82                        C0            .byte	$C0
12921 2D83                        C0            .byte	$C0
12922 2D84                        C6            .byte	$C6
12923 2D85                        7C            .byte	$7C
12924 2D86                        00            .byte	0
12925 2D87                        00            .byte	0
12926 2D88                        00            .byte	0
12927 2D89                        00            .byte	0
12928                                           ! 1537  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D8A                        00            .byte	0
12930 2D8B                        10            .byte	$10
12931 2D8C                        38            .byte	$38
12932 2D8D                        6C            .byte	$6C
12933 2D8E                        00            .byte	0
12934 2D8F                        78            .byte	$78
12935 2D90                        0C            .byte	$C
12936 2D91                        7C            .byte	$7C
12937 2D92                        CC            .byte	$CC
12938 2D93                        CC            .byte	$CC
12939 2D94                        CC            .byte	$CC
12940 2D95                        76            .byte	$76
12941 2D96                        00            .byte	0
12942 2D97                        00            .byte	0
12943 2D98                        00            .byte	0
12944 2D99                        00            .byte	0
12945                                           ! 1538  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2D9A                        00            .byte	0
12947 2D9B                        00            .byte	0
12948 2D9C                        CC            .byte	$CC
12949 2D9D                        00            .byte	0
12950 2D9E                        00            .byte	0
12951 2D9F                        78            .byte	$78
12952 2DA0                        0C            .byte	$C
12953 2DA1                        7C            .byte	$7C
12954 2DA2                        CC            .byte	$CC
12955 2DA3                        CC            .byte	$CC
12956 2DA4                        CC            .byte	$CC
12957 2DA5                        76            .byte	$76
12958 2DA6                        00            .byte	0
12959 2DA7                        00            .byte	0
12960 2DA8                        00            .byte	0
12961 2DA9                        00            .byte	0
12962                                           ! 1539  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DAA                        00            .byte	0
12964 2DAB                        60            .byte	$60
12965 2DAC                        30            .byte	$30
12966 2DAD                        18            .byte	$18
12967 2DAE                        00            .byte	0
12968 2DAF                        78            .byte	$78
12969 2DB0                        0C            .byte	$C
12970 2DB1                        7C            .byte	$7C
12971 2DB2                        CC            .byte	$CC
12972 2DB3                        CC            .byte	$CC
12973 2DB4                        CC            .byte	$CC
12974 2DB5                        76            .byte	$76
12975 2DB6                        00            .byte	0
12976 2DB7                        00            .byte	0
12977 2DB8                        00            .byte	0
12978 2DB9                        00            .byte	0
12979                                           ! 1540  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DBA                        00            .byte	0
12981 2DBB                        38            .byte	$38
12982 2DBC                        6C            .byte	$6C
12983 2DBD                        38            .byte	$38
12984 2DBE                        00            .byte	0
12985 2DBF                        78            .byte	$78
12986 2DC0                        0C            .byte	$C
12987 2DC1                        7C            .byte	$7C
12988 2DC2                        CC            .byte	$CC
12989 2DC3                        CC            .byte	$CC
12990 2DC4                        CC            .byte	$CC
12991 2DC5                        76            .byte	$76
12992 2DC6                        00            .byte	0
12993 2DC7                        00            .byte	0
12994 2DC8                        00            .byte	0
12995 2DC9                        00            .byte	0
12996                                           ! 1541  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DCA                        00            .byte	0
12998 2DCB                        00            .byte	0
12999 2DCC                        00            .byte	0
13000 2DCD                        00            .byte	0
13001 2DCE                        3C            .byte	$3C
13002 2DCF                        66            .byte	$66
13003 2DD0                        60            .byte	$60
13004 2DD1                        60            .byte	$60
13005 2DD2                        66            .byte	$66
13006 2DD3                        3C            .byte	$3C
13007 2DD4                        0C            .byte	$C
13008 2DD5                        06            .byte	6
13009 2DD6                        3C            .byte	$3C
13010 2DD7                        00            .byte	0
13011 2DD8                        00            .byte	0
13012 2DD9                        00            .byte	0
13013                                           ! 1542  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DDA                        00            .byte	0
13015 2DDB                        10            .byte	$10
13016 2DDC                        38            .byte	$38
13017 2DDD                        6C            .byte	$6C
13018 2DDE                        00            .byte	0
13019 2DDF                        7C            .byte	$7C
13020 2DE0                        C6            .byte	$C6
13021 2DE1                        FE            .byte	$FE
13022 2DE2                        C0            .byte	$C0
13023 2DE3                        C0            .byte	$C0
13024 2DE4                        C6            .byte	$C6
13025 2DE5                        7C            .byte	$7C
13026 2DE6                        00            .byte	0
13027 2DE7                        00            .byte	0
13028 2DE8                        00            .byte	0
13029 2DE9                        00            .byte	0
13030                                           ! 1543  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DEA                        00            .byte	0
13032 2DEB                        00            .byte	0
13033 2DEC                        C6            .byte	$C6
13034 2DED                        00            .byte	0
13035 2DEE                        00            .byte	0
13036 2DEF                        7C            .byte	$7C
13037 2DF0                        C6            .byte	$C6
13038 2DF1                        FE            .byte	$FE
13039 2DF2                        C0            .byte	$C0
13040 2DF3                        C0            .byte	$C0
13041 2DF4                        C6            .byte	$C6
13042 2DF5                        7C            .byte	$7C
13043 2DF6                        00            .byte	0
13044 2DF7                        00            .byte	0
13045 2DF8                        00            .byte	0
13046 2DF9                        00            .byte	0
13047                                           ! 1544  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13048 2DFA                        00            .byte	0
13049 2DFB                        60            .byte	$60
13050 2DFC                        30            .byte	$30
13051 2DFD                        18            .byte	$18
13052 2DFE                        00            .byte	0
13053 2DFF                        7C            .byte	$7C
13054 2E00                        C6            .byte	$C6
13055 2E01                        FE            .byte	$FE
13056 2E02                        C0            .byte	$C0
13057 2E03                        C0            .byte	$C0
13058 2E04                        C6            .byte	$C6
13059 2E05                        7C            .byte	$7C
13060 2E06                        00            .byte	0
13061 2E07                        00            .byte	0
13062 2E08                        00            .byte	0
13063 2E09                        00            .byte	0
13064                                           ! 1545  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 
13065 2E0A                        00            .byte	0
13066 2E0B                        00            .byte	0
13067 2E0C                        66            .byte	$66
13068 2E0D                        00            .byte	0
13069 2E0E                        00            .byte	0
13070 2E0F                        38            .byte	$38
13071                                           ! 1545 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13072 2E10                        18            .byte	$18
13073 2E11                        18            .byte	$18
13074 2E12                        18            .byte	$18
13075 2E13                        18            .byte	$18
13076 2E14                        18            .byte	$18
13077 2E15                        3C            .byte	$3C
13078 2E16                        00            .byte	0
13079 2E17                        00            .byte	0
13080 2E18                        00            .byte	0
13081 2E19                        00            .byte	0
13082                                           ! 1546  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E1A                        00            .byte	0
13084 2E1B                        18            .byte	$18
13085 2E1C                        3C            .byte	$3C
13086 2E1D                        66            .byte	$66
13087 2E1E                        00            .byte	0
13088 2E1F                        38            .byte	$38
13089 2E20                        18            .byte	$18
13090 2E21                        18            .byte	$18
13091 2E22                        18            .byte	$18
13092 2E23                        18            .byte	$18
13093 2E24                        18            .byte	$18
13094 2E25                        3C            .byte	$3C
13095 2E26                        00            .byte	0
13096 2E27                        00            .byte	0
13097 2E28                        00            .byte	0
13098 2E29                        00            .byte	0
13099                                           ! 1547  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E2A                        00            .byte	0
13101 2E2B                        60            .byte	$60
13102 2E2C                        30            .byte	$30
13103 2E2D                        18            .byte	$18
13104 2E2E                        00            .byte	0
13105 2E2F                        38            .byte	$38
13106 2E30                        18            .byte	$18
13107 2E31                        18            .byte	$18
13108 2E32                        18            .byte	$18
13109 2E33                        18            .byte	$18
13110 2E34                        18            .byte	$18
13111 2E35                        3C            .byte	$3C
13112 2E36                        00            .byte	0
13113 2E37                        00            .byte	0
13114 2E38                        00            .byte	0
13115 2E39                        00            .byte	0
13116                                           ! 1548  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E3A                        00            .byte	0
13118 2E3B                        C6            .byte	$C6
13119 2E3C                        00            .byte	0
13120 2E3D                        10            .byte	$10
13121 2E3E                        38            .byte	$38
13122 2E3F                        6C            .byte	$6C
13123 2E40                        C6            .byte	$C6
13124 2E41                        C6            .byte	$C6
13125 2E42                        FE            .byte	$FE
13126 2E43                        C6            .byte	$C6
13127 2E44                        C6            .byte	$C6
13128 2E45                        C6            .byte	$C6
13129 2E46                        00            .byte	0
13130 2E47                        00            .byte	0
13131 2E48                        00            .byte	0
13132 2E49                        00            .byte	0
13133                                           ! 1549  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E4A                        38            .byte	$38
13135 2E4B                        6C            .byte	$6C
13136 2E4C                        38            .byte	$38
13137 2E4D                        00            .byte	0
13138 2E4E                        38            .byte	$38
13139 2E4F                        6C            .byte	$6C
13140 2E50                        C6            .byte	$C6
13141 2E51                        C6            .byte	$C6
13142 2E52                        FE            .byte	$FE
13143 2E53                        C6            .byte	$C6
13144 2E54                        C6            .byte	$C6
13145 2E55                        C6            .byte	$C6
13146 2E56                        00            .byte	0
13147 2E57                        00            .byte	0
13148 2E58                        00            .byte	0
13149 2E59                        00            .byte	0
13150                                           ! 1550  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E5A                        18            .byte	$18
13152 2E5B                        30            .byte	$30
13153 2E5C                        60            .byte	$60
13154 2E5D                        00            .byte	0
13155 2E5E                        FE            .byte	$FE
13156 2E5F                        66            .byte	$66
13157 2E60                        60            .byte	$60
13158 2E61                        7C            .byte	$7C
13159 2E62                        60            .byte	$60
13160 2E63                        60            .byte	$60
13161 2E64                        66            .byte	$66
13162 2E65                        FE            .byte	$FE
13163 2E66                        00            .byte	0
13164 2E67                        00            .byte	0
13165 2E68                        00            .byte	0
13166 2E69                        00            .byte	0
13167                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E6A                        00            .byte	0
13169 2E6B                        00            .byte	0
13170 2E6C                        00            .byte	0
13171 2E6D                        00            .byte	0
13172 2E6E                        00            .byte	0
13173 2E6F                        6E            .byte	$6E
13174 2E70                        3B            .byte	$3B
13175 2E71                        1B            .byte	$1B
13176 2E72                        7E            .byte	$7E
13177 2E73                        D8            .byte	$D8
13178 2E74                        DC            .byte	$DC
13179 2E75                        77            .byte	$77
13180 2E76                        00            .byte	0
13181 2E77                        00            .byte	0
13182 2E78                        00            .byte	0
13183 2E79                        00            .byte	0
13184                                           ! 1552  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E7A                        00            .byte	0
13186 2E7B                        00            .byte	0
13187 2E7C                        3E            .byte	$3E
13188 2E7D                        6C            .byte	$6C
13189 2E7E                        CC            .byte	$CC
13190 2E7F                        CC            .byte	$CC
13191 2E80                        FE            .byte	$FE
13192 2E81                        CC            .byte	$CC
13193 2E82                        CC            .byte	$CC
13194 2E83                        CC            .byte	$CC
13195 2E84                        CC            .byte	$CC
13196 2E85                        CE            .byte	$CE
13197 2E86                        00            .byte	0
13198 2E87                        00            .byte	0
13199 2E88                        00            .byte	0
13200 2E89                        00            .byte	0
13201                                           ! 1553  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E8A                        00            .byte	0
13203 2E8B                        10            .byte	$10
13204 2E8C                        38            .byte	$38
13205 2E8D                        6C            .byte	$6C
13206 2E8E                        00            .byte	0
13207 2E8F                        7C            .byte	$7C
13208 2E90                        C6            .byte	$C6
13209 2E91                        C6            .byte	$C6
13210 2E92                        C6            .byte	$C6
13211 2E93                        C6            .byte	$C6
13212 2E94                        C6            .byte	$C6
13213 2E95                        7C            .byte	$7C
13214 2E96                        00            .byte	0
13215 2E97                        00            .byte	0
13216 2E98                        00            .byte	0
13217 2E99                        00            .byte	0
13218                                           ! 1554  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2E9A                        00            .byte	0
13220 2E9B                        00            .byte	0
13221 2E9C                        C6            .byte	$C6
13222 2E9D                        00            .byte	0
13223 2E9E                        00            .byte	0
13224 2E9F                        7C            .byte	$7C
13225 2EA0                        C6            .byte	$C6
13226 2EA1                        C6            .byte	$C6
13227 2EA2                        C6            .byte	$C6
13228 2EA3                        C6            .byte	$C6
13229 2EA4                        C6            .byte	$C6
13230 2EA5                        7C            .byte	$7C
13231 2EA6                        00            .byte	0
13232 2EA7                        00            .byte	0
13233 2EA8                        00            .byte	0
13234 2EA9                        00            .byte	0
13235                                           ! 1555  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EAA                        00            .byte	0
13237 2EAB                        60            .byte	$60
13238 2EAC                        30            .byte	$30
13239 2EAD                        18            .byte	$18
13240 2EAE                        00            .byte	0
13241 2EAF                        7C            .byte	$7C
13242 2EB0                        C6            .byte	$C6
13243 2EB1                        C6            .byte	$C6
13244 2EB2                        C6            .byte	$C6
13245 2EB3                        C6            .byte	$C6
13246 2EB4                        C6            .byte	$C6
13247 2EB5                        7C            .byte	$7C
13248 2EB6                        00            .byte	0
13249 2EB7                        00            .byte	0
13250 2EB8                        00            .byte	0
13251 2EB9                        00            .byte	0
13252                                           ! 1556  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2EBA                        00            .byte	0
13254 2EBB                        30            .byte	$30
13255 2EBC                        78            .byte	$78
13256 2EBD                        CC            .byte	$CC
13257 2EBE                        00            .byte	0
13258 2EBF                        CC            .byte	$CC
13259 2EC0                        CC            .byte	$CC
13260 2EC1                        CC            .byte	$CC
13261 2EC2                        CC            .byte	$CC
13262 2EC3                        CC            .byte	$CC
13263 2EC4                        CC            .byte	$CC
13264 2EC5                        76            .byte	$76
13265 2EC6                        00            .byte	0
13266 2EC7                        00            .byte	0
13267 2EC8                        00            .byte	0
13268 2EC9                        00            .byte	0
13269                                           ! 1557  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2ECA                        00            .byte	0
13271 2ECB                        60            .byte	$60
13272 2ECC                        30            .byte	$30
13273 2ECD                        18            .byte	$18
13274 2ECE                        00            .byte	0
13275 2ECF                        CC            .byte	$CC
13276 2ED0                        CC            .byte	$CC
13277 2ED1                        CC            .byte	$CC
13278 2ED2                        CC            .byte	$CC
13279 2ED3                        CC            .byte	$CC
13280 2ED4                        CC            .byte	$CC
13281 2ED5                        76            .byte	$76
13282 2ED6                        00            .byte	0
13283 2ED7                        00            .byte	0
13284 2ED8                        00            .byte	0
13285 2ED9                        00            .byte	0
13286                                           ! 1558  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EDA                        00            .byte	0
13288 2EDB                        00            .byte	0
13289 2EDC                        C6            .byte	$C6
13290 2EDD                        00            .byte	0
13291 2EDE                        00            .byte	0
13292 2EDF                        C6            .byte	$C6
13293 2EE0                        C6            .byte	$C6
13294 2EE1                        C6            .byte	$C6
13295 2EE2                        C6            .byte	$C6
13296 2EE3                        C6            .byte	$C6
13297 2EE4                        C6            .byte	$C6
13298 2EE5                        7E            .byte	$7E
13299 2EE6                        06            .byte	6
13300 2EE7                        0C            .byte	$C
13301 2EE8                        78            .byte	$78
13302 2EE9                        00            .byte	0
13303                                           ! 1559  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EEA                        00            .byte	0
13305 2EEB                        C6            .byte	$C6
13306 2EEC                        00            .byte	0
13307 2EED                        7C            .byte	$7C
13308 2EEE                        C6            .byte	$C6
13309 2EEF                        C6            .byte	$C6
13310 2EF0                        C6            .byte	$C6
13311 2EF1                        C6            .byte	$C6
13312 2EF2                        C6            .byte	$C6
13313 2EF3                        C6            .byte	$C6
13314 2EF4                        C6            .byte	$C6
13315 2EF5                        7C            .byte	$7C
13316 2EF6                        00            .byte	0
13317 2EF7                        00            .byte	0
13318 2EF8                        00            .byte	0
13319 2EF9                        00            .byte	0
13320                                           ! 1560  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2EFA                        00            .byte	0
13322 2EFB                        C6            .byte	$C6
13323 2EFC                        00            .byte	0
13324 2EFD                        C6            .byte	$C6
13325 2EFE                        C6            .byte	$C6
13326 2EFF                        C6            .byte	$C6
13327 2F00                        C6            .byte	$C6
13328 2F01                        C6            .byte	$C6
13329 2F02                        C6            .byte	$C6
13330 2F03                        C6            .byte	$C6
13331 2F04                        C6            .byte	$C6
13332 2F05                        7C            .byte	$7C
13333 2F06                        00            .byte	0
13334 2F07                        00            .byte	0
13335 2F08                        00            .byte	0
13336 2F09                        00            .byte	0
13337                                           ! 1561  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F0A                        00            .byte	0
13339 2F0B                        18            .byte	$18
13340 2F0C                        18            .byte	$18
13341 2F0D                        7E            .byte	$7E
13342 2F0E                        C3            .byte	$C3
13343 2F0F                        C0            .byte	$C0
13344 2F10                        C0            .byte	$C0
13345 2F11                        C0            .byte	$C0
13346 2F12                        C3            .byte	$C3
13347 2F13                        7E            .byte	$7E
13348 2F14                        18            .byte	$18
13349 2F15                        18            .byte	$18
13350 2F16                        00            .byte	0
13351 2F17                        00            .byte	0
13352 2F18                        00            .byte	0
13353 2F19                        00            .byte	0
13354                                           ! 1562  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F1A                        00            .byte	0
13356 2F1B                        38            .byte	$38
13357 2F1C                        6C            .byte	$6C
13358 2F1D                        64            .byte	$64
13359 2F1E                        60            .byte	$60
13360 2F1F                        F0            .byte	$F0
13361 2F20                        60            .byte	$60
13362 2F21                        60            .byte	$60
13363 2F22                        60            .byte	$60
13364 2F23                        60            .byte	$60
13365 2F24                        E6            .byte	$E6
13366 2F25                        FC            .byte	$FC
13367 2F26                        00            .byte	0
13368 2F27                        00            .byte	0
13369 2F28                        00            .byte	0
13370 2F29                        00            .byte	0
13371                                           ! 1563  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F2A                        00            .byte	0
13373 2F2B                        00            .byte	0
13374 2F2C                        C3            .byte	$C3
13375 2F2D                        66            .byte	$66
13376 2F2E                        3C            .byte	$3C
13377 2F2F                        18            .byte	$18
13378 2F30                        FF            .byte	$FF
13379 2F31                        18            .byte	$18
13380 2F32                        FF            .byte	$FF
13381 2F33                        18            .byte	$18
13382 2F34                        18            .byte	$18
13383 2F35                        18            .byte	$18
13384 2F36                        00            .byte	0
13385 2F37                        00            .byte	0
13386 2F38                        00            .byte	0
13387 2F39                        00            .byte	0
13388                                           ! 1564  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F3A                        00            .byte	0
13390 2F3B                        FC            .byte	$FC
13391 2F3C                        66            .byte	$66
13392 2F3D                        66            .byte	$66
13393 2F3E                        7C            .byte	$7C
13394 2F3F                        62            .byte	$62
13395 2F40                        66            .byte	$66
13396 2F41                        6F            .byte	$6F
13397 2F42                        66            .byte	$66
13398 2F43                        66            .byte	$66
13399 2F44                        66            .byte	$66
13400 2F45                        F3            .byte	$F3
13401 2F46                        00            .byte	0
13402 2F47                        00            .byte	0
13403 2F48                        00            .byte	0
13404 2F49                        00            .byte	0
13405                                           ! 1565  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13406 2F4A                        00            .byte	0
13407 2F4B                        0E            .byte	$E
13408 2F4C                        1B            .byte	$1B
13409 2F4D                        18            .byte	$18
13410 2F4E                        18            .byte	$18
13411 2F4F                        18            .byte	$18
13412 2F50                        7E            .byte	$7E
13413 2F51                        18            .byte	$18
13414 2F52                        18            .byte	$18
13415 2F53                        18            .byte	$18
13416 2F54                        18            .byte	$18
13417 2F55                        18            .byte	$18
13418 2F56                        D8            .byte	$D8
13419 2F57                        70            .byte	$70
13420 2F58                        00            .byte	0
13421 2F59                        00            .byte	0
13422                                           ! 1566  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c,
13423 2F5A                        00            .byte	0
13424 2F5B                        18            .byte	$18
13425 2F5C                        30            .byte	$30
13426 2F5D                        60            .byte	$60
13427 2F5E                        00            .byte	0
13428 2F5F                        78            .byte	$78
13429 2F60                        0C            .byte	$C
13430                                           ! 1566  0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13431 2F61                        7C            .byte	$7C
13432 2F62                        CC            .byte	$CC
13433 2F63                        CC            .byte	$CC
13434 2F64                        CC            .byte	$CC
13435 2F65                        76            .byte	$76
13436 2F66                        00            .byte	0
13437 2F67                        00            .byte	0
13438 2F68                        00            .byte	0
13439 2F69                        00            .byte	0
13440                                           ! 1567  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F6A                        00            .byte	0
13442 2F6B                        0C            .byte	$C
13443 2F6C                        18            .byte	$18
13444 2F6D                        30            .byte	$30
13445 2F6E                        00            .byte	0
13446 2F6F                        38            .byte	$38
13447 2F70                        18            .byte	$18
13448 2F71                        18            .byte	$18
13449 2F72                        18            .byte	$18
13450 2F73                        18            .byte	$18
13451 2F74                        18            .byte	$18
13452 2F75                        3C            .byte	$3C
13453 2F76                        00            .byte	0
13454 2F77                        00            .byte	0
13455 2F78                        00            .byte	0
13456 2F79                        00            .byte	0
13457                                           ! 1568  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F7A                        00            .byte	0
13459 2F7B                        18            .byte	$18
13460 2F7C                        30            .byte	$30
13461 2F7D                        60            .byte	$60
13462 2F7E                        00            .byte	0
13463 2F7F                        7C            .byte	$7C
13464 2F80                        C6            .byte	$C6
13465 2F81                        C6            .byte	$C6
13466 2F82                        C6            .byte	$C6
13467 2F83                        C6            .byte	$C6
13468 2F84                        C6            .byte	$C6
13469 2F85                        7C            .byte	$7C
13470 2F86                        00            .byte	0
13471 2F87                        00            .byte	0
13472 2F88                        00            .byte	0
13473 2F89                        00            .byte	0
13474                                           ! 1569  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F8A                        00            .byte	0
13476 2F8B                        18            .byte	$18
13477 2F8C                        30            .byte	$30
13478 2F8D                        60            .byte	$60
13479 2F8E                        00            .byte	0
13480 2F8F                        CC            .byte	$CC
13481 2F90                        CC            .byte	$CC
13482 2F91                        CC            .byte	$CC
13483 2F92                        CC            .byte	$CC
13484 2F93                        CC            .byte	$CC
13485 2F94                        CC            .byte	$CC
13486 2F95                        76            .byte	$76
13487 2F96                        00            .byte	0
13488 2F97                        00            .byte	0
13489 2F98                        00            .byte	0
13490 2F99                        00            .byte	0
13491                                           ! 1570  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2F9A                        00            .byte	0
13493 2F9B                        00            .byte	0
13494 2F9C                        76            .byte	$76
13495 2F9D                        DC            .byte	$DC
13496 2F9E                        00            .byte	0
13497 2F9F                        DC            .byte	$DC
13498 2FA0                        66            .byte	$66
13499 2FA1                        66            .byte	$66
13500 2FA2                        66            .byte	$66
13501 2FA3                        66            .byte	$66
13502 2FA4                        66            .byte	$66
13503 2FA5                        66            .byte	$66
13504 2FA6                        00            .byte	0
13505 2FA7                        00            .byte	0
13506 2FA8                        00            .byte	0
13507 2FA9                        00            .byte	0
13508                                           ! 1571  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FAA                        76            .byte	$76
13510 2FAB                        DC            .byte	$DC
13511 2FAC                        00            .byte	0
13512 2FAD                        C6            .byte	$C6
13513 2FAE                        E6            .byte	$E6
13514 2FAF                        F6            .byte	$F6
13515 2FB0                        FE            .byte	$FE
13516 2FB1                        DE            .byte	$DE
13517 2FB2                        CE            .byte	$CE
13518 2FB3                        C6            .byte	$C6
13519 2FB4                        C6            .byte	$C6
13520 2FB5                        C6            .byte	$C6
13521 2FB6                        00            .byte	0
13522 2FB7                        00            .byte	0
13523 2FB8                        00            .byte	0
13524 2FB9                        00            .byte	0
13525                                           ! 1572  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FBA                        00            .byte	0
13527 2FBB                        3C            .byte	$3C
13528 2FBC                        6C            .byte	$6C
13529 2FBD                        6C            .byte	$6C
13530 2FBE                        3E            .byte	$3E
13531 2FBF                        00            .byte	0
13532 2FC0                        7E            .byte	$7E
13533 2FC1                        00            .byte	0
13534 2FC2                        00            .byte	0
13535 2FC3                        00            .byte	0
13536 2FC4                        00            .byte	0
13537 2FC5                        00            .byte	0
13538 2FC6                        00            .byte	0
13539 2FC7                        00            .byte	0
13540 2FC8                        00            .byte	0
13541 2FC9                        00            .byte	0
13542                                           ! 1573  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FCA                        00            .byte	0
13544 2FCB                        38            .byte	$38
13545 2FCC                        6C            .byte	$6C
13546 2FCD                        6C            .byte	$6C
13547 2FCE                        38            .byte	$38
13548 2FCF                        00            .byte	0
13549 2FD0                        7C            .byte	$7C
13550 2FD1                        00            .byte	0
13551 2FD2                        00            .byte	0
13552 2FD3                        00            .byte	0
13553 2FD4                        00            .byte	0
13554 2FD5                        00            .byte	0
13555 2FD6                        00            .byte	0
13556 2FD7                        00            .byte	0
13557 2FD8                        00            .byte	0
13558 2FD9                        00            .byte	0
13559                                           ! 1574  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FDA                        00            .byte	0
13561 2FDB                        00            .byte	0
13562 2FDC                        30            .byte	$30
13563 2FDD                        30            .byte	$30
13564 2FDE                        00            .byte	0
13565 2FDF                        30            .byte	$30
13566 2FE0                        30            .byte	$30
13567 2FE1                        60            .byte	$60
13568 2FE2                        C0            .byte	$C0
13569 2FE3                        C6            .byte	$C6
13570 2FE4                        C6            .byte	$C6
13571 2FE5                        7C            .byte	$7C
13572 2FE6                        00            .byte	0
13573 2FE7                        00            .byte	0
13574 2FE8                        00            .byte	0
13575 2FE9                        00            .byte	0
13576                                           ! 1575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FEA                        00            .byte	0
13578 2FEB                        00            .byte	0
13579 2FEC                        00            .byte	0
13580 2FED                        00            .byte	0
13581 2FEE                        00            .byte	0
13582 2FEF                        00            .byte	0
13583 2FF0                        FE            .byte	$FE
13584 2FF1                        C0            .byte	$C0
13585 2FF2                        C0            .byte	$C0
13586 2FF3                        C0            .byte	$C0
13587 2FF4                        C0            .byte	$C0
13588 2FF5                        00            .byte	0
13589 2FF6                        00            .byte	0
13590 2FF7                        00            .byte	0
13591 2FF8                        00            .byte	0
13592 2FF9                        00            .byte	0
13593                                           ! 1576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 2FFA                        00            .byte	0
13595 2FFB                        00            .byte	0
13596 2FFC                        00            .byte	0
13597 2FFD                        00            .byte	0
13598 2FFE                        00            .byte	0
13599 2FFF                        00            .byte	0
13600 3000                        FE            .byte	$FE
13601 3001                        06            .byte	6
13602 3002                        06            .byte	6
13603 3003                        06            .byte	6
13604 3004                        06            .byte	6
13605 3005                        00            .byte	0
13606 3006                        00            .byte	0
13607 3007                        00            .byte	0
13608 3008                        00            .byte	0
13609 3009                        00            .byte	0
13610                                           ! 1577  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 300A                        00            .byte	0
13612 300B                        C0            .byte	$C0
13613 300C                        C0            .byte	$C0
13614 300D                        C2            .byte	$C2
13615 300E                        C6            .byte	$C6
13616 300F                        CC            .byte	$CC
13617 3010                        18            .byte	$18
13618 3011                        30            .byte	$30
13619 3012                        60            .byte	$60
13620 3013                        CE            .byte	$CE
13621 3014                        9B            .byte	$9B
13622 3015                        06            .byte	6
13623 3016                        0C            .byte	$C
13624 3017                        1F            .byte	$1F
13625 3018                        00            .byte	0
13626 3019                        00            .byte	0
13627                                           ! 1578  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 301A                        00            .byte	0
13629 301B                        C0            .byte	$C0
13630 301C                        C0            .byte	$C0
13631 301D                        C2            .byte	$C2
13632 301E                        C6            .byte	$C6
13633 301F                        CC            .byte	$CC
13634 3020                        18            .byte	$18
13635 3021                        30            .byte	$30
13636 3022                        66            .byte	$66
13637 3023                        CE            .byte	$CE
13638 3024                        96            .byte	$96
13639 3025                        3E            .byte	$3E
13640 3026                        06            .byte	6
13641 3027                        06            .byte	6
13642 3028                        00            .byte	0
13643 3029                        00            .byte	0
13644                                           ! 1579  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 302A                        00            .byte	0
13646 302B                        00            .byte	0
13647 302C                        18            .byte	$18
13648 302D                        18            .byte	$18
13649 302E                        00            .byte	0
13650 302F                        18            .byte	$18
13651 3030                        18            .byte	$18
13652 3031                        18            .byte	$18
13653 3032                        3C            .byte	$3C
13654 3033                        3C            .byte	$3C
13655 3034                        3C            .byte	$3C
13656 3035                        18            .byte	$18
13657 3036                        00            .byte	0
13658 3037                        00            .byte	0
13659 3038                        00            .byte	0
13660 3039                        00            .byte	0
13661                                           ! 1580  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 303A                        00            .byte	0
13663 303B                        00            .byte	0
13664 303C                        00            .byte	0
13665 303D                        00            .byte	0
13666 303E                        00            .byte	0
13667 303F                        36            .byte	$36
13668 3040                        6C            .byte	$6C
13669 3041                        D8            .byte	$D8
13670 3042                        6C            .byte	$6C
13671 3043                        36            .byte	$36
13672 3044                        00            .byte	0
13673 3045                        00            .byte	0
13674 3046                        00            .byte	0
13675 3047                        00            .byte	0
13676 3048                        00            .byte	0
13677 3049                        00            .byte	0
13678                                           ! 1581  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 304A                        00            .byte	0
13680 304B                        00            .byte	0
13681 304C                        00            .byte	0
13682 304D                        00            .byte	0
13683 304E                        00            .byte	0
13684 304F                        D8            .byte	$D8
13685 3050                        6C            .byte	$6C
13686 3051                        36            .byte	$36
13687 3052                        6C            .byte	$6C
13688 3053                        D8            .byte	$D8
13689 3054                        00            .byte	0
13690 3055                        00            .byte	0
13691 3056                        00            .byte	0
13692 3057                        00            .byte	0
13693 3058                        00            .byte	0
13694 3059                        00            .byte	0
13695                                           ! 1582  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 305A                        11            .byte	$11
13697 305B                        44            .byte	$44
13698 305C                        11            .byte	$11
13699 305D                        44            .byte	$44
13700 305E                        11            .byte	$11
13701 305F                        44            .byte	$44
13702 3060                        11            .byte	$11
13703 3061                        44            .byte	$44
13704 3062                        11            .byte	$11
13705 3063                        44            .byte	$44
13706 3064                        11            .byte	$11
13707 3065                        44            .byte	$44
13708 3066                        11            .byte	$11
13709 3067                        44            .byte	$44
13710 3068                        11            .byte	$11
13711 3069                        44            .byte	$44
13712                                           ! 1583  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 306A                        55            .byte	$55
13714 306B                        AA            .byte	$AA
13715 306C                        55            .byte	$55
13716 306D                        AA            .byte	$AA
13717 306E                        55            .byte	$55
13718 306F                        AA            .byte	$AA
13719 3070                        55            .byte	$55
13720 3071                        AA            .byte	$AA
13721 3072                        55            .byte	$55
13722 3073                        AA            .byte	$AA
13723 3074                        55            .byte	$55
13724 3075                        AA            .byte	$AA
13725 3076                        55            .byte	$55
13726 3077                        AA            .byte	$AA
13727 3078                        55            .byte	$55
13728 3079                        AA            .byte	$AA
13729                                           ! 1584  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 307A                        DD            .byte	$DD
13731 307B                        77            .byte	$77
13732 307C                        DD            .byte	$DD
13733 307D                        77            .byte	$77
13734 307E                        DD            .byte	$DD
13735 307F                        77            .byte	$77
13736 3080                        DD            .byte	$DD
13737 3081                        77            .byte	$77
13738 3082                        DD            .byte	$DD
13739 3083                        77            .byte	$77
13740 3084                        DD            .byte	$DD
13741 3085                        77            .byte	$77
13742 3086                        DD            .byte	$DD
13743 3087                        77            .byte	$77
13744 3088                        DD            .byte	$DD
13745 3089                        77            .byte	$77
13746                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 308A                        18            .byte	$18
13748 308B                        18            .byte	$18
13749 308C                        18            .byte	$18
13750 308D                        18            .byte	$18
13751 308E                        18            .byte	$18
13752 308F                        18            .byte	$18
13753 3090                        18            .byte	$18
13754 3091                        18            .byte	$18
13755 3092                        18            .byte	$18
13756 3093                        18            .byte	$18
13757 3094                        18            .byte	$18
13758 3095                        18            .byte	$18
13759 3096                        18            .byte	$18
13760 3097                        18            .byte	$18
13761 3098                        18            .byte	$18
13762 3099                        18            .byte	$18
13763                                           ! 1586  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13764 309A                        18            .byte	$18
13765 309B                        18            .byte	$18
13766 309C                        18            .byte	$18
13767 309D                        18            .byte	$18
13768 309E                        18            .byte	$18
13769 309F                        18            .byte	$18
13770 30A0                        18            .byte	$18
13771 30A1                        F8            .byte	$F8
13772 30A2                        18            .byte	$18
13773 30A3                        18            .byte	$18
13774 30A4                        18            .byte	$18
13775 30A5                        18            .byte	$18
13776 30A6                        18            .byte	$18
13777 30A7                        18            .byte	$18
13778 30A8                        18            .byte	$18
13779 30A9                        18            .byte	$18
13780                                           ! 1587  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18
13781 30AA                        18            .byte	$18
13782 30AB                        18            .byte	$18
13783 30AC                        18            .byte	$18
13784 30AD                        18            .byte	$18
13785 30AE                        18            .byte	$18
13786 30AF                        F8            .byte	$F8
13787 30B0                        18            .byte	$18
13788 30B1                        F8            .byte	$F8
13789 30B2                        18            .byte	$18
13790                                           ! 1587 , 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13791 30B3                        18            .byte	$18
13792 30B4                        18            .byte	$18
13793 30B5                        18            .byte	$18
13794 30B6                        18            .byte	$18
13795 30B7                        18            .byte	$18
13796 30B8                        18            .byte	$18
13797 30B9                        18            .byte	$18
13798                                           ! 1588  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30BA                        36            .byte	$36
13800 30BB                        36            .byte	$36
13801 30BC                        36            .byte	$36
13802 30BD                        36            .byte	$36
13803 30BE                        36            .byte	$36
13804 30BF                        36            .byte	$36
13805 30C0                        36            .byte	$36
13806 30C1                        F6            .byte	$F6
13807 30C2                        36            .byte	$36
13808 30C3                        36            .byte	$36
13809 30C4                        36            .byte	$36
13810 30C5                        36            .byte	$36
13811 30C6                        36            .byte	$36
13812 30C7                        36            .byte	$36
13813 30C8                        36            .byte	$36
13814 30C9                        36            .byte	$36
13815                                           ! 1589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30CA                        00            .byte	0
13817 30CB                        00            .byte	0
13818 30CC                        00            .byte	0
13819 30CD                        00            .byte	0
13820 30CE                        00            .byte	0
13821 30CF                        00            .byte	0
13822 30D0                        00            .byte	0
13823 30D1                        FE            .byte	$FE
13824 30D2                        36            .byte	$36
13825 30D3                        36            .byte	$36
13826 30D4                        36            .byte	$36
13827 30D5                        36            .byte	$36
13828 30D6                        36            .byte	$36
13829 30D7                        36            .byte	$36
13830 30D8                        36            .byte	$36
13831 30D9                        36            .byte	$36
13832                                           ! 1590  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30DA                        00            .byte	0
13834 30DB                        00            .byte	0
13835 30DC                        00            .byte	0
13836 30DD                        00            .byte	0
13837 30DE                        00            .byte	0
13838 30DF                        F8            .byte	$F8
13839 30E0                        18            .byte	$18
13840 30E1                        F8            .byte	$F8
13841 30E2                        18            .byte	$18
13842 30E3                        18            .byte	$18
13843 30E4                        18            .byte	$18
13844 30E5                        18            .byte	$18
13845 30E6                        18            .byte	$18
13846 30E7                        18            .byte	$18
13847 30E8                        18            .byte	$18
13848 30E9                        18            .byte	$18
13849                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30EA                        36            .byte	$36
13851 30EB                        36            .byte	$36
13852 30EC                        36            .byte	$36
13853 30ED                        36            .byte	$36
13854 30EE                        36            .byte	$36
13855 30EF                        F6            .byte	$F6
13856 30F0                        06            .byte	6
13857 30F1                        F6            .byte	$F6
13858 30F2                        36            .byte	$36
13859 30F3                        36            .byte	$36
13860 30F4                        36            .byte	$36
13861 30F5                        36            .byte	$36
13862 30F6                        36            .byte	$36
13863 30F7                        36            .byte	$36
13864 30F8                        36            .byte	$36
13865 30F9                        36            .byte	$36
13866                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 30FA                        36            .byte	$36
13868 30FB                        36            .byte	$36
13869 30FC                        36            .byte	$36
13870 30FD                        36            .byte	$36
13871 30FE                        36            .byte	$36
13872 30FF                        36            .byte	$36
13873 3100                        36            .byte	$36
13874 3101                        36            .byte	$36
13875 3102                        36            .byte	$36
13876 3103                        36            .byte	$36
13877 3104                        36            .byte	$36
13878 3105                        36            .byte	$36
13879 3106                        36            .byte	$36
13880 3107                        36            .byte	$36
13881 3108                        36            .byte	$36
13882 3109                        36            .byte	$36
13883                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 310A                        00            .byte	0
13885 310B                        00            .byte	0
13886 310C                        00            .byte	0
13887 310D                        00            .byte	0
13888 310E                        00            .byte	0
13889 310F                        FE            .byte	$FE
13890 3110                        06            .byte	6
13891 3111                        F6            .byte	$F6
13892 3112                        36            .byte	$36
13893 3113                        36            .byte	$36
13894 3114                        36            .byte	$36
13895 3115                        36            .byte	$36
13896 3116                        36            .byte	$36
13897 3117                        36            .byte	$36
13898 3118                        36            .byte	$36
13899 3119                        36            .byte	$36
13900                                           ! 1594  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 311A                        36            .byte	$36
13902 311B                        36            .byte	$36
13903 311C                        36            .byte	$36
13904 311D                        36            .byte	$36
13905 311E                        36            .byte	$36
13906 311F                        F6            .byte	$F6
13907 3120                        06            .byte	6
13908 3121                        FE            .byte	$FE
13909 3122                        00            .byte	0
13910 3123                        00            .byte	0
13911 3124                        00            .byte	0
13912 3125                        00            .byte	0
13913 3126                        00            .byte	0
13914 3127                        00            .byte	0
13915 3128                        00            .byte	0
13916 3129                        00            .byte	0
13917                                           ! 1595  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 312A                        36            .byte	$36
13919 312B                        36            .byte	$36
13920 312C                        36            .byte	$36
13921 312D                        36            .byte	$36
13922 312E                        36            .byte	$36
13923 312F                        36            .byte	$36
13924 3130                        36            .byte	$36
13925 3131                        FE            .byte	$FE
13926 3132                        00            .byte	0
13927 3133                        00            .byte	0
13928 3134                        00            .byte	0
13929 3135                        00            .byte	0
13930 3136                        00            .byte	0
13931 3137                        00            .byte	0
13932 3138                        00            .byte	0
13933 3139                        00            .byte	0
13934                                           ! 1596  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 313A                        18            .byte	$18
13936 313B                        18            .byte	$18
13937 313C                        18            .byte	$18
13938 313D                        18            .byte	$18
13939 313E                        18            .byte	$18
13940 313F                        F8            .byte	$F8
13941 3140                        18            .byte	$18
13942 3141                        F8            .byte	$F8
13943 3142                        00            .byte	0
13944 3143                        00            .byte	0
13945 3144                        00            .byte	0
13946 3145                        00            .byte	0
13947 3146                        00            .byte	0
13948 3147                        00            .byte	0
13949 3148                        00            .byte	0
13950 3149                        00            .byte	0
13951                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 314A                        00            .byte	0
13953 314B                        00            .byte	0
13954 314C                        00            .byte	0
13955 314D                        00            .byte	0
13956 314E                        00            .byte	0
13957 314F                        00            .byte	0
13958 3150                        00            .byte	0
13959 3151                        F8            .byte	$F8
13960 3152                        18            .byte	$18
13961 3153                        18            .byte	$18
13962 3154                        18            .byte	$18
13963 3155                        18            .byte	$18
13964 3156                        18            .byte	$18
13965 3157                        18            .byte	$18
13966 3158                        18            .byte	$18
13967 3159                        18            .byte	$18
13968                                           ! 1598  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 315A                        18            .byte	$18
13970 315B                        18            .byte	$18
13971 315C                        18            .byte	$18
13972 315D                        18            .byte	$18
13973 315E                        18            .byte	$18
13974 315F                        18            .byte	$18
13975 3160                        18            .byte	$18
13976 3161                        1F            .byte	$1F
13977 3162                        00            .byte	0
13978 3163                        00            .byte	0
13979 3164                        00            .byte	0
13980 3165                        00            .byte	0
13981 3166                        00            .byte	0
13982 3167                        00            .byte	0
13983 3168                        00            .byte	0
13984 3169                        00            .byte	0
13985                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 316A                        18            .byte	$18
13987 316B                        18            .byte	$18
13988 316C                        18            .byte	$18
13989 316D                        18            .byte	$18
13990 316E                        18            .byte	$18
13991 316F                        18            .byte	$18
13992 3170                        18            .byte	$18
13993 3171                        FF            .byte	$FF
13994 3172                        00            .byte	0
13995 3173                        00            .byte	0
13996 3174                        00            .byte	0
13997 3175                        00            .byte	0
13998 3176                        00            .byte	0
13999 3177                        00            .byte	0
14000 3178                        00            .byte	0
14001 3179                        00            .byte	0
14002                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 317A                        00            .byte	0
14004 317B                        00            .byte	0
14005 317C                        00            .byte	0
14006 317D                        00            .byte	0
14007 317E                        00            .byte	0
14008 317F                        00            .byte	0
14009 3180                        00            .byte	0
14010 3181                        FF            .byte	$FF
14011 3182                        18            .byte	$18
14012 3183                        18            .byte	$18
14013 3184                        18            .byte	$18
14014 3185                        18            .byte	$18
14015 3186                        18            .byte	$18
14016 3187                        18            .byte	$18
14017 3188                        18            .byte	$18
14018 3189                        18            .byte	$18
14019                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 318A                        18            .byte	$18
14021 318B                        18            .byte	$18
14022 318C                        18            .byte	$18
14023 318D                        18            .byte	$18
14024 318E                        18            .byte	$18
14025 318F                        18            .byte	$18
14026 3190                        18            .byte	$18
14027 3191                        1F            .byte	$1F
14028 3192                        18            .byte	$18
14029 3193                        18            .byte	$18
14030 3194                        18            .byte	$18
14031 3195                        18            .byte	$18
14032 3196                        18            .byte	$18
14033 3197                        18            .byte	$18
14034 3198                        18            .byte	$18
14035 3199                        18            .byte	$18
14036                                           ! 1602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 319A                        00            .byte	0
14038 319B                        00            .byte	0
14039 319C                        00            .byte	0
14040 319D                        00            .byte	0
14041 319E                        00            .byte	0
14042 319F                        00            .byte	0
14043 31A0                        00            .byte	0
14044 31A1                        FF            .byte	$FF
14045 31A2                        00            .byte	0
14046 31A3                        00            .byte	0
14047 31A4                        00            .byte	0
14048 31A5                        00            .byte	0
14049 31A6                        00            .byte	0
14050 31A7                        00            .byte	0
14051 31A8                        00            .byte	0
14052 31A9                        00            .byte	0
14053                                           ! 1603  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31AA                        18            .byte	$18
14055 31AB                        18            .byte	$18
14056 31AC                        18            .byte	$18
14057 31AD                        18            .byte	$18
14058 31AE                        18            .byte	$18
14059 31AF                        18            .byte	$18
14060 31B0                        18            .byte	$18
14061 31B1                        FF            .byte	$FF
14062 31B2                        18            .byte	$18
14063 31B3                        18            .byte	$18
14064 31B4                        18            .byte	$18
14065 31B5                        18            .byte	$18
14066 31B6                        18            .byte	$18
14067 31B7                        18            .byte	$18
14068 31B8                        18            .byte	$18
14069 31B9                        18            .byte	$18
14070                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31BA                        18            .byte	$18
14072 31BB                        18            .byte	$18
14073 31BC                        18            .byte	$18
14074 31BD                        18            .byte	$18
14075 31BE                        18            .byte	$18
14076 31BF                        1F            .byte	$1F
14077 31C0                        18            .byte	$18
14078 31C1                        1F            .byte	$1F
14079 31C2                        18            .byte	$18
14080 31C3                        18            .byte	$18
14081 31C4                        18            .byte	$18
14082 31C5                        18            .byte	$18
14083 31C6                        18            .byte	$18
14084 31C7                        18            .byte	$18
14085 31C8                        18            .byte	$18
14086 31C9                        18            .byte	$18
14087                                           ! 1605  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31CA                        36            .byte	$36
14089 31CB                        36            .byte	$36
14090 31CC                        36            .byte	$36
14091 31CD                        36            .byte	$36
14092 31CE                        36            .byte	$36
14093 31CF                        36            .byte	$36
14094 31D0                        36            .byte	$36
14095 31D1                        37            .byte	$37
14096 31D2                        36            .byte	$36
14097 31D3                        36            .byte	$36
14098 31D4                        36            .byte	$36
14099 31D5                        36            .byte	$36
14100 31D6                        36            .byte	$36
14101 31D7                        36            .byte	$36
14102 31D8                        36            .byte	$36
14103 31D9                        36            .byte	$36
14104                                           ! 1606  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31DA                        36            .byte	$36
14106 31DB                        36            .byte	$36
14107 31DC                        36            .byte	$36
14108 31DD                        36            .byte	$36
14109 31DE                        36            .byte	$36
14110 31DF                        37            .byte	$37
14111 31E0                        30            .byte	$30
14112 31E1                        3F            .byte	$3F
14113 31E2                        00            .byte	0
14114 31E3                        00            .byte	0
14115 31E4                        00            .byte	0
14116 31E5                        00            .byte	0
14117 31E6                        00            .byte	0
14118 31E7                        00            .byte	0
14119 31E8                        00            .byte	0
14120 31E9                        00            .byte	0
14121                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14122 31EA                        00            .byte	0
14123 31EB                        00            .byte	0
14124 31EC                        00            .byte	0
14125 31ED                        00            .byte	0
14126 31EE                        00            .byte	0
14127 31EF                        3F            .byte	$3F
14128 31F0                        30            .byte	$30
14129 31F1                        37            .byte	$37
14130 31F2                        36            .byte	$36
14131 31F3                        36            .byte	$36
14132 31F4                        36            .byte	$36
14133 31F5                        36            .byte	$36
14134 31F6                        36            .byte	$36
14135 31F7                        36            .byte	$36
14136 31F8                        36            .byte	$36
14137 31F9                        36            .byte	$36
14138                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x0
14139 31FA                        36            .byte	$36
14140 31FB                        36            .byte	$36
14141 31FC                        36            .byte	$36
14142 31FD                        36            .byte	$36
14143 31FE                        36            .byte	$36
14144 31FF                        F7            .byte	$F7
14145 3200                        00            .byte	0
14146 3201                        FF            .byte	$FF
14147 3202                        00            .byte	0
14148 3203                        00            .byte	0
14149 3204                        00            .byte	0
14150                                           ! 1608 0, 0x00, 0x00, 0x00, 0x00,
14151 3205                        00            .byte	0
14152 3206                        00            .byte	0
14153 3207                        00            .byte	0
14154 3208                        00            .byte	0
14155 3209                        00            .byte	0
14156                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 320A                        00            .byte	0
14158 320B                        00            .byte	0
14159 320C                        00            .byte	0
14160 320D                        00            .byte	0
14161 320E                        00            .byte	0
14162 320F                        FF            .byte	$FF
14163 3210                        00            .byte	0
14164 3211                        F7            .byte	$F7
14165 3212                        36            .byte	$36
14166 3213                        36            .byte	$36
14167 3214                        36            .byte	$36
14168 3215                        36            .byte	$36
14169 3216                        36            .byte	$36
14170 3217                        36            .byte	$36
14171 3218                        36            .byte	$36
14172 3219                        36            .byte	$36
14173                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 321A                        36            .byte	$36
14175 321B                        36            .byte	$36
14176 321C                        36            .byte	$36
14177 321D                        36            .byte	$36
14178 321E                        36            .byte	$36
14179 321F                        37            .byte	$37
14180 3220                        30            .byte	$30
14181 3221                        37            .byte	$37
14182 3222                        36            .byte	$36
14183 3223                        36            .byte	$36
14184 3224                        36            .byte	$36
14185 3225                        36            .byte	$36
14186 3226                        36            .byte	$36
14187 3227                        36            .byte	$36
14188 3228                        36            .byte	$36
14189 3229                        36            .byte	$36
14190                                           ! 1611  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 322A                        00            .byte	0
14192 322B                        00            .byte	0
14193 322C                        00            .byte	0
14194 322D                        00            .byte	0
14195 322E                        00            .byte	0
14196 322F                        FF            .byte	$FF
14197 3230                        00            .byte	0
14198 3231                        FF            .byte	$FF
14199 3232                        00            .byte	0
14200 3233                        00            .byte	0
14201 3234                        00            .byte	0
14202 3235                        00            .byte	0
14203 3236                        00            .byte	0
14204 3237                        00            .byte	0
14205 3238                        00            .byte	0
14206 3239                        00            .byte	0
14207                                           ! 1612  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 323A                        36            .byte	$36
14209 323B                        36            .byte	$36
14210 323C                        36            .byte	$36
14211 323D                        36            .byte	$36
14212 323E                        36            .byte	$36
14213 323F                        F7            .byte	$F7
14214 3240                        00            .byte	0
14215 3241                        F7            .byte	$F7
14216 3242                        36            .byte	$36
14217 3243                        36            .byte	$36
14218 3244                        36            .byte	$36
14219 3245                        36            .byte	$36
14220 3246                        36            .byte	$36
14221 3247                        36            .byte	$36
14222 3248                        36            .byte	$36
14223 3249                        36            .byte	$36
14224                                           ! 1613  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 324A                        18            .byte	$18
14226 324B                        18            .byte	$18
14227 324C                        18            .byte	$18
14228 324D                        18            .byte	$18
14229 324E                        18            .byte	$18
14230 324F                        FF            .byte	$FF
14231 3250                        00            .byte	0
14232 3251                        FF            .byte	$FF
14233 3252                        00            .byte	0
14234 3253                        00            .byte	0
14235 3254                        00            .byte	0
14236 3255                        00            .byte	0
14237 3256                        00            .byte	0
14238 3257                        00            .byte	0
14239 3258                        00            .byte	0
14240 3259                        00            .byte	0
14241                                           ! 1614  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 325A                        36            .byte	$36
14243 325B                        36            .byte	$36
14244 325C                        36            .byte	$36
14245 325D                        36            .byte	$36
14246 325E                        36            .byte	$36
14247 325F                        36            .byte	$36
14248 3260                        36            .byte	$36
14249 3261                        FF            .byte	$FF
14250 3262                        00            .byte	0
14251 3263                        00            .byte	0
14252 3264                        00            .byte	0
14253 3265                        00            .byte	0
14254 3266                        00            .byte	0
14255 3267                        00            .byte	0
14256 3268                        00            .byte	0
14257 3269                        00            .byte	0
14258                                           ! 1615  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 326A                        00            .byte	0
14260 326B                        00            .byte	0
14261 326C                        00            .byte	0
14262 326D                        00            .byte	0
14263 326E                        00            .byte	0
14264 326F                        FF            .byte	$FF
14265 3270                        00            .byte	0
14266 3271                        FF            .byte	$FF
14267 3272                        18            .byte	$18
14268 3273                        18            .byte	$18
14269 3274                        18            .byte	$18
14270 3275                        18            .byte	$18
14271 3276                        18            .byte	$18
14272 3277                        18            .byte	$18
14273 3278                        18            .byte	$18
14274 3279                        18            .byte	$18
14275                                           ! 1616  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 327A                        00            .byte	0
14277 327B                        00            .byte	0
14278 327C                        00            .byte	0
14279 327D                        00            .byte	0
14280 327E                        00            .byte	0
14281 327F                        00            .byte	0
14282 3280                        00            .byte	0
14283 3281                        FF            .byte	$FF
14284 3282                        36            .byte	$36
14285 3283                        36            .byte	$36
14286 3284                        36            .byte	$36
14287 3285                        36            .byte	$36
14288 3286                        36            .byte	$36
14289 3287                        36            .byte	$36
14290 3288                        36            .byte	$36
14291 3289                        36            .byte	$36
14292                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 328A                        36            .byte	$36
14294 328B                        36            .byte	$36
14295 328C                        36            .byte	$36
14296 328D                        36            .byte	$36
14297 328E                        36            .byte	$36
14298 328F                        36            .byte	$36
14299 3290                        36            .byte	$36
14300 3291                        3F            .byte	$3F
14301 3292                        00            .byte	0
14302 3293                        00            .byte	0
14303 3294                        00            .byte	0
14304 3295                        00            .byte	0
14305 3296                        00            .byte	0
14306 3297                        00            .byte	0
14307 3298                        00            .byte	0
14308 3299                        00            .byte	0
14309                                           ! 1618  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 329A                        18            .byte	$18
14311 329B                        18            .byte	$18
14312 329C                        18            .byte	$18
14313 329D                        18            .byte	$18
14314 329E                        18            .byte	$18
14315 329F                        1F            .byte	$1F
14316 32A0                        18            .byte	$18
14317 32A1                        1F            .byte	$1F
14318 32A2                        00            .byte	0
14319 32A3                        00            .byte	0
14320 32A4                        00            .byte	0
14321 32A5                        00            .byte	0
14322 32A6                        00            .byte	0
14323 32A7                        00            .byte	0
14324 32A8                        00            .byte	0
14325 32A9                        00            .byte	0
14326                                           ! 1619  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32AA                        00            .byte	0
14328 32AB                        00            .byte	0
14329 32AC                        00            .byte	0
14330 32AD                        00            .byte	0
14331 32AE                        00            .byte	0
14332 32AF                        1F            .byte	$1F
14333 32B0                        18            .byte	$18
14334 32B1                        1F            .byte	$1F
14335 32B2                        18            .byte	$18
14336 32B3                        18            .byte	$18
14337 32B4                        18            .byte	$18
14338 32B5                        18            .byte	$18
14339 32B6                        18            .byte	$18
14340 32B7                        18            .byte	$18
14341 32B8                        18            .byte	$18
14342 32B9                        18            .byte	$18
14343                                           ! 1620  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32BA                        00            .byte	0
14345 32BB                        00            .byte	0
14346 32BC                        00            .byte	0
14347 32BD                        00            .byte	0
14348 32BE                        00            .byte	0
14349 32BF                        00            .byte	0
14350 32C0                        00            .byte	0
14351 32C1                        3F            .byte	$3F
14352 32C2                        36            .byte	$36
14353 32C3                        36            .byte	$36
14354 32C4                        36            .byte	$36
14355 32C5                        36            .byte	$36
14356 32C6                        36            .byte	$36
14357 32C7                        36            .byte	$36
14358 32C8                        36            .byte	$36
14359 32C9                        36            .byte	$36
14360                                           ! 1621  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32CA                        36            .byte	$36
14362 32CB                        36            .byte	$36
14363 32CC                        36            .byte	$36
14364 32CD                        36            .byte	$36
14365 32CE                        36            .byte	$36
14366 32CF                        36            .byte	$36
14367 32D0                        36            .byte	$36
14368 32D1                        FF            .byte	$FF
14369 32D2                        36            .byte	$36
14370 32D3                        36            .byte	$36
14371 32D4                        36            .byte	$36
14372 32D5                        36            .byte	$36
14373 32D6                        36            .byte	$36
14374 32D7                        36            .byte	$36
14375 32D8                        36            .byte	$36
14376 32D9                        36            .byte	$36
14377                                           ! 1622  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32DA                        18            .byte	$18
14379 32DB                        18            .byte	$18
14380 32DC                        18            .byte	$18
14381 32DD                        18            .byte	$18
14382 32DE                        18            .byte	$18
14383 32DF                        FF            .byte	$FF
14384 32E0                        18            .byte	$18
14385 32E1                        FF            .byte	$FF
14386 32E2                        18            .byte	$18
14387 32E3                        18            .byte	$18
14388 32E4                        18            .byte	$18
14389 32E5                        18            .byte	$18
14390 32E6                        18            .byte	$18
14391 32E7                        18            .byte	$18
14392 32E8                        18            .byte	$18
14393 32E9                        18            .byte	$18
14394                                           ! 1623  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32EA                        18            .byte	$18
14396 32EB                        18            .byte	$18
14397 32EC                        18            .byte	$18
14398 32ED                        18            .byte	$18
14399 32EE                        18            .byte	$18
14400 32EF                        18            .byte	$18
14401 32F0                        18            .byte	$18
14402 32F1                        F8            .byte	$F8
14403 32F2                        00            .byte	0
14404 32F3                        00            .byte	0
14405 32F4                        00            .byte	0
14406 32F5                        00            .byte	0
14407 32F6                        00            .byte	0
14408 32F7                        00            .byte	0
14409 32F8                        00            .byte	0
14410 32F9                        00            .byte	0
14411                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 32FA                        00            .byte	0
14413 32FB                        00            .byte	0
14414 32FC                        00            .byte	0
14415 32FD                        00            .byte	0
14416 32FE                        00            .byte	0
14417 32FF                        00            .byte	0
14418 3300                        00            .byte	0
14419 3301                        1F            .byte	$1F
14420 3302                        18            .byte	$18
14421 3303                        18            .byte	$18
14422 3304                        18            .byte	$18
14423 3305                        18            .byte	$18
14424 3306                        18            .byte	$18
14425 3307                        18            .byte	$18
14426 3308                        18            .byte	$18
14427 3309                        18            .byte	$18
14428                                           ! 1625  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 330A                        FF            .byte	$FF
14430 330B                        FF            .byte	$FF
14431 330C                        FF            .byte	$FF
14432 330D                        FF            .byte	$FF
14433 330E                        FF            .byte	$FF
14434 330F                        FF            .byte	$FF
14435 3310                        FF            .byte	$FF
14436 3311                        FF            .byte	$FF
14437 3312                        FF            .byte	$FF
14438 3313                        FF            .byte	$FF
14439 3314                        FF            .byte	$FF
14440 3315                        FF            .byte	$FF
14441 3316                        FF            .byte	$FF
14442 3317                        FF            .byte	$FF
14443 3318                        FF            .byte	$FF
14444 3319                        FF            .byte	$FF
14445                                           ! 1626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 331A                        00            .byte	0
14447 331B                        00            .byte	0
14448 331C                        00            .byte	0
14449 331D                        00            .byte	0
14450 331E                        00            .byte	0
14451 331F                        00            .byte	0
14452 3320                        00            .byte	0
14453 3321                        FF            .byte	$FF
14454 3322                        FF            .byte	$FF
14455 3323                        FF            .byte	$FF
14456 3324                        FF            .byte	$FF
14457 3325                        FF            .byte	$FF
14458 3326                        FF            .byte	$FF
14459 3327                        FF            .byte	$FF
14460 3328                        FF            .byte	$FF
14461 3329                        FF            .byte	$FF
14462                                           ! 1627  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 332A                        F0            .byte	$F0
14464 332B                        F0            .byte	$F0
14465 332C                        F0            .byte	$F0
14466 332D                        F0            .byte	$F0
14467 332E                        F0            .byte	$F0
14468 332F                        F0            .byte	$F0
14469 3330                        F0            .byte	$F0
14470 3331                        F0            .byte	$F0
14471 3332                        F0            .byte	$F0
14472 3333                        F0            .byte	$F0
14473 3334                        F0            .byte	$F0
14474 3335                        F0            .byte	$F0
14475 3336                        F0            .byte	$F0
14476 3337                        F0            .byte	$F0
14477 3338                        F0            .byte	$F0
14478 3339                        F0            .byte	$F0
14479                                           ! 1628  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14480 333A                        0F            .byte	$F
14481 333B                        0F            .byte	$F
14482 333C                        0F            .byte	$F
14483 333D                        0F            .byte	$F
14484 333E                        0F            .byte	$F
14485 333F                        0F            .byte	$F
14486 3340                        0F            .byte	$F
14487 3341                        0F            .byte	$F
14488 3342                        0F            .byte	$F
14489 3343                        0F            .byte	$F
14490 3344                        0F            .byte	$F
14491 3345                        0F            .byte	$F
14492 3346                        0F            .byte	$F
14493 3347                        0F            .byte	$F
14494 3348                        0F            .byte	$F
14495 3349                        0F            .byte	$F
14496                                           ! 1629  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
14497 334A                        FF            .byte	$FF
14498 334B                        FF            .byte	$FF
14499 334C                        FF            .byte	$FF
14500 334D                        FF            .byte	$FF
14501 334E                        FF            .byte	$FF
14502 334F                        FF            .byte	$FF
14503 3350                        FF            .byte	$FF
14504 3351                        00            .byte	0
14505 3352                        00            .byte	0
14506 3353                        00            .byte	0
14507 3354                        00            .byte	0
14508 3355                        00            .byte	0
14509 3356                        00            .byte	0
14510                                           ! 1629 00, 0x00, 0x00,
14511 3357                        00            .byte	0
14512 3358                        00            .byte	0
14513 3359                        00            .byte	0
14514                                           ! 1630  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 335A                        00            .byte	0
14516 335B                        00            .byte	0
14517 335C                        00            .byte	0
14518 335D                        00            .byte	0
14519 335E                        00            .byte	0
14520 335F                        76            .byte	$76
14521 3360                        DC            .byte	$DC
14522 3361                        D8            .byte	$D8
14523 3362                        D8            .byte	$D8
14524 3363                        D8            .byte	$D8
14525 3364                        DC            .byte	$DC
14526 3365                        76            .byte	$76
14527 3366                        00            .byte	0
14528 3367                        00            .byte	0
14529 3368                        00            .byte	0
14530 3369                        00            .byte	0
14531                                           ! 1631  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 336A                        00            .byte	0
14533 336B                        00            .byte	0
14534 336C                        78            .byte	$78
14535 336D                        CC            .byte	$CC
14536 336E                        CC            .byte	$CC
14537 336F                        CC            .byte	$CC
14538 3370                        D8            .byte	$D8
14539 3371                        CC            .byte	$CC
14540 3372                        C6            .byte	$C6
14541 3373                        C6            .byte	$C6
14542 3374                        C6            .byte	$C6
14543 3375                        CC            .byte	$CC
14544 3376                        00            .byte	0
14545 3377                        00            .byte	0
14546 3378                        00            .byte	0
14547 3379                        00            .byte	0
14548                                           ! 1632  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 337A                        00            .byte	0
14550 337B                        00            .byte	0
14551 337C                        FE            .byte	$FE
14552 337D                        C6            .byte	$C6
14553 337E                        C6            .byte	$C6
14554 337F                        C0            .byte	$C0
14555 3380                        C0            .byte	$C0
14556 3381                        C0            .byte	$C0
14557 3382                        C0            .byte	$C0
14558 3383                        C0            .byte	$C0
14559 3384                        C0            .byte	$C0
14560 3385                        C0            .byte	$C0
14561 3386                        00            .byte	0
14562 3387                        00            .byte	0
14563 3388                        00            .byte	0
14564 3389                        00            .byte	0
14565                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 338A                        00            .byte	0
14567 338B                        00            .byte	0
14568 338C                        00            .byte	0
14569 338D                        00            .byte	0
14570 338E                        FE            .byte	$FE
14571 338F                        6C            .byte	$6C
14572 3390                        6C            .byte	$6C
14573 3391                        6C            .byte	$6C
14574 3392                        6C            .byte	$6C
14575 3393                        6C            .byte	$6C
14576 3394                        6C            .byte	$6C
14577 3395                        6C            .byte	$6C
14578 3396                        00            .byte	0
14579 3397                        00            .byte	0
14580 3398                        00            .byte	0
14581 3399                        00            .byte	0
14582                                           ! 1634  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 339A                        00            .byte	0
14584 339B                        00            .byte	0
14585 339C                        00            .byte	0
14586 339D                        FE            .byte	$FE
14587 339E                        C6            .byte	$C6
14588 339F                        60            .byte	$60
14589 33A0                        30            .byte	$30
14590 33A1                        18            .byte	$18
14591 33A2                        30            .byte	$30
14592 33A3                        60            .byte	$60
14593 33A4                        C6            .byte	$C6
14594 33A5                        FE            .byte	$FE
14595 33A6                        00            .byte	0
14596 33A7                        00            .byte	0
14597 33A8                        00            .byte	0
14598 33A9                        00            .byte	0
14599                                           ! 1635  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33AA                        00            .byte	0
14601 33AB                        00            .byte	0
14602 33AC                        00            .byte	0
14603 33AD                        00            .byte	0
14604 33AE                        00            .byte	0
14605 33AF                        7E            .byte	$7E
14606 33B0                        D8            .byte	$D8
14607 33B1                        D8            .byte	$D8
14608 33B2                        D8            .byte	$D8
14609 33B3                        D8            .byte	$D8
14610 33B4                        D8            .byte	$D8
14611 33B5                        70            .byte	$70
14612 33B6                        00            .byte	0
14613 33B7                        00            .byte	0
14614 33B8                        00            .byte	0
14615 33B9                        00            .byte	0
14616                                           ! 1636  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33BA                        00            .byte	0
14618 33BB                        00            .byte	0
14619 33BC                        00            .byte	0
14620 33BD                        00            .byte	0
14621 33BE                        66            .byte	$66
14622 33BF                        66            .byte	$66
14623 33C0                        66            .byte	$66
14624 33C1                        66            .byte	$66
14625 33C2                        66            .byte	$66
14626 33C3                        7C            .byte	$7C
14627 33C4                        60            .byte	$60
14628 33C5                        60            .byte	$60
14629 33C6                        C0            .byte	$C0
14630 33C7                        00            .byte	0
14631 33C8                        00            .byte	0
14632 33C9                        00            .byte	0
14633                                           ! 1637  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33CA                        00            .byte	0
14635 33CB                        00            .byte	0
14636 33CC                        00            .byte	0
14637 33CD                        00            .byte	0
14638 33CE                        76            .byte	$76
14639 33CF                        DC            .byte	$DC
14640 33D0                        18            .byte	$18
14641 33D1                        18            .byte	$18
14642 33D2                        18            .byte	$18
14643 33D3                        18            .byte	$18
14644 33D4                        18            .byte	$18
14645 33D5                        18            .byte	$18
14646 33D6                        00            .byte	0
14647 33D7                        00            .byte	0
14648 33D8                        00            .byte	0
14649 33D9                        00            .byte	0
14650                                           ! 1638  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33DA                        00            .byte	0
14652 33DB                        00            .byte	0
14653 33DC                        00            .byte	0
14654 33DD                        7E            .byte	$7E
14655 33DE                        18            .byte	$18
14656 33DF                        3C            .byte	$3C
14657 33E0                        66            .byte	$66
14658 33E1                        66            .byte	$66
14659 33E2                        66            .byte	$66
14660 33E3                        3C            .byte	$3C
14661 33E4                        18            .byte	$18
14662 33E5                        7E            .byte	$7E
14663 33E6                        00            .byte	0
14664 33E7                        00            .byte	0
14665 33E8                        00            .byte	0
14666 33E9                        00            .byte	0
14667                                           ! 1639  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33EA                        00            .byte	0
14669 33EB                        00            .byte	0
14670 33EC                        00            .byte	0
14671 33ED                        38            .byte	$38
14672 33EE                        6C            .byte	$6C
14673 33EF                        C6            .byte	$C6
14674 33F0                        C6            .byte	$C6
14675 33F1                        FE            .byte	$FE
14676 33F2                        C6            .byte	$C6
14677 33F3                        C6            .byte	$C6
14678 33F4                        6C            .byte	$6C
14679 33F5                        38            .byte	$38
14680 33F6                        00            .byte	0
14681 33F7                        00            .byte	0
14682 33F8                        00            .byte	0
14683 33F9                        00            .byte	0
14684                                           ! 1640  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 33FA                        00            .byte	0
14686 33FB                        00            .byte	0
14687 33FC                        38            .byte	$38
14688 33FD                        6C            .byte	$6C
14689 33FE                        C6            .byte	$C6
14690 33FF                        C6            .byte	$C6
14691 3400                        C6            .byte	$C6
14692 3401                        6C            .byte	$6C
14693 3402                        6C            .byte	$6C
14694 3403                        6C            .byte	$6C
14695 3404                        6C            .byte	$6C
14696 3405                        EE            .byte	$EE
14697 3406                        00            .byte	0
14698 3407                        00            .byte	0
14699 3408                        00            .byte	0
14700 3409                        00            .byte	0
14701                                           ! 1641  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 340A                        00            .byte	0
14703 340B                        00            .byte	0
14704 340C                        1E            .byte	$1E
14705 340D                        30            .byte	$30
14706 340E                        18            .byte	$18
14707 340F                        0C            .byte	$C
14708 3410                        3E            .byte	$3E
14709 3411                        66            .byte	$66
14710 3412                        66            .byte	$66
14711 3413                        66            .byte	$66
14712 3414                        66            .byte	$66
14713 3415                        3C            .byte	$3C
14714 3416                        00            .byte	0
14715 3417                        00            .byte	0
14716 3418                        00            .byte	0
14717 3419                        00            .byte	0
14718                                           ! 1642  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 341A                        00            .byte	0
14720 341B                        00            .byte	0
14721 341C                        00            .byte	0
14722 341D                        00            .byte	0
14723 341E                        00            .byte	0
14724 341F                        7E            .byte	$7E
14725 3420                        DB            .byte	$DB
14726 3421                        DB            .byte	$DB
14727 3422                        DB            .byte	$DB
14728 3423                        7E            .byte	$7E
14729 3424                        00            .byte	0
14730 3425                        00            .byte	0
14731 3426                        00            .byte	0
14732 3427                        00            .byte	0
14733 3428                        00            .byte	0
14734 3429                        00            .byte	0
14735                                           ! 1643  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 342A                        00            .byte	0
14737 342B                        00            .byte	0
14738 342C                        00            .byte	0
14739 342D                        03            .byte	3
14740 342E                        06            .byte	6
14741 342F                        7E            .byte	$7E
14742 3430                        DB            .byte	$DB
14743 3431                        DB            .byte	$DB
14744 3432                        F3            .byte	$F3
14745 3433                        7E            .byte	$7E
14746 3434                        60            .byte	$60
14747 3435                        C0            .byte	$C0
14748 3436                        00            .byte	0
14749 3437                        00            .byte	0
14750 3438                        00            .byte	0
14751 3439                        00            .byte	0
14752                                           ! 1644  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 343A                        00            .byte	0
14754 343B                        00            .byte	0
14755 343C                        1C            .byte	$1C
14756 343D                        30            .byte	$30
14757 343E                        60            .byte	$60
14758 343F                        60            .byte	$60
14759 3440                        7C            .byte	$7C
14760 3441                        60            .byte	$60
14761 3442                        60            .byte	$60
14762 3443                        60            .byte	$60
14763 3444                        30            .byte	$30
14764 3445                        1C            .byte	$1C
14765 3446                        00            .byte	0
14766 3447                        00            .byte	0
14767 3448                        00            .byte	0
14768 3449                        00            .byte	0
14769                                           ! 1645  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 344A                        00            .byte	0
14771 344B                        00            .byte	0
14772 344C                        00            .byte	0
14773 344D                        7C            .byte	$7C
14774 344E                        C6            .byte	$C6
14775 344F                        C6            .byte	$C6
14776 3450                        C6            .byte	$C6
14777 3451                        C6            .byte	$C6
14778 3452                        C6            .byte	$C6
14779 3453                        C6            .byte	$C6
14780 3454                        C6            .byte	$C6
14781 3455                        C6            .byte	$C6
14782 3456                        00            .byte	0
14783 3457                        00            .byte	0
14784 3458                        00            .byte	0
14785 3459                        00            .byte	0
14786                                           ! 1646  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 345A                        00            .byte	0
14788 345B                        00            .byte	0
14789 345C                        00            .byte	0
14790 345D                        00            .byte	0
14791 345E                        FE            .byte	$FE
14792 345F                        00            .byte	0
14793 3460                        00            .byte	0
14794 3461                        FE            .byte	$FE
14795 3462                        00            .byte	0
14796 3463                        00            .byte	0
14797 3464                        FE            .byte	$FE
14798 3465                        00            .byte	0
14799 3466                        00            .byte	0
14800 3467                        00            .byte	0
14801 3468                        00            .byte	0
14802 3469                        00            .byte	0
14803                                           ! 1647  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 346A                        00            .byte	0
14805 346B                        00            .byte	0
14806 346C                        00            .byte	0
14807 346D                        00            .byte	0
14808 346E                        18            .byte	$18
14809 346F                        18            .byte	$18
14810 3470                        7E            .byte	$7E
14811 3471                        18            .byte	$18
14812 3472                        18            .byte	$18
14813 3473                        00            .byte	0
14814 3474                        00            .byte	0
14815 3475                        FF            .byte	$FF
14816 3476                        00            .byte	0
14817 3477                        00            .byte	0
14818 3478                        00            .byte	0
14819 3479                        00            .byte	0
14820                                           ! 1648  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 347A                        00            .byte	0
14822 347B                        00            .byte	0
14823 347C                        00            .byte	0
14824 347D                        30            .byte	$30
14825 347E                        18            .byte	$18
14826 347F                        0C            .byte	$C
14827 3480                        06            .byte	6
14828 3481                        0C            .byte	$C
14829 3482                        18            .byte	$18
14830 3483                        30            .byte	$30
14831 3484                        00            .byte	0
14832 3485                        7E            .byte	$7E
14833 3486                        00            .byte	0
14834 3487                        00            .byte	0
14835 3488                        00            .byte	0
14836 3489                        00            .byte	0
14837                                           ! 1649  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14838 348A                        00            .byte	0
14839 348B                        00            .byte	0
14840 348C                        00            .byte	0
14841 348D                        0C            .byte	$C
14842 348E                        18            .byte	$18
14843 348F                        30            .byte	$30
14844 3490                        60            .byte	$60
14845 3491                        30            .byte	$30
14846 3492                        18            .byte	$18
14847 3493                        0C            .byte	$C
14848 3494                        00            .byte	0
14849 3495                        7E            .byte	$7E
14850 3496                        00            .byte	0
14851 3497                        00            .byte	0
14852 3498                        00            .byte	0
14853 3499                        00            .byte	0
14854                                           ! 1650  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0
14855 349A                        00            .byte	0
14856 349B                        00            .byte	0
14857 349C                        0E            .byte	$E
14858 349D                        1B            .byte	$1B
14859 349E                        1B            .byte	$1B
14860 349F                        18            .byte	$18
14861 34A0                        18            .byte	$18
14862 34A1                        18            .byte	$18
14863 34A2                        18            .byte	$18
14864 34A3                        18            .byte	$18
14865 34A4                        18            .byte	$18
14866 34A5                        18            .byte	$18
14867 34A6                        18            .byte	$18
14868 34A7                        18            .byte	$18
14869 34A8                        18            .byte	$18
14870                                           ! 1650 x18,
14871 34A9                        18            .byte	$18
14872                                           ! 1651  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34AA                        18            .byte	$18
14874 34AB                        18            .byte	$18
14875 34AC                        18            .byte	$18
14876 34AD                        18            .byte	$18
14877 34AE                        18            .byte	$18
14878 34AF                        18            .byte	$18
14879 34B0                        18            .byte	$18
14880 34B1                        18            .byte	$18
14881 34B2                        D8            .byte	$D8
14882 34B3                        D8            .byte	$D8
14883 34B4                        D8            .byte	$D8
14884 34B5                        70            .byte	$70
14885 34B6                        00            .byte	0
14886 34B7                        00            .byte	0
14887 34B8                        00            .byte	0
14888 34B9                        00            .byte	0
14889                                           ! 1652  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34BA                        00            .byte	0
14891 34BB                        00            .byte	0
14892 34BC                        00            .byte	0
14893 34BD                        00            .byte	0
14894 34BE                        18            .byte	$18
14895 34BF                        18            .byte	$18
14896 34C0                        00            .byte	0
14897 34C1                        7E            .byte	$7E
14898 34C2                        00            .byte	0
14899 34C3                        18            .byte	$18
14900 34C4                        18            .byte	$18
14901 34C5                        00            .byte	0
14902 34C6                        00            .byte	0
14903 34C7                        00            .byte	0
14904 34C8                        00            .byte	0
14905 34C9                        00            .byte	0
14906                                           ! 1653  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34CA                        00            .byte	0
14908 34CB                        00            .byte	0
14909 34CC                        00            .byte	0
14910 34CD                        00            .byte	0
14911 34CE                        00            .byte	0
14912 34CF                        76            .byte	$76
14913 34D0                        DC            .byte	$DC
14914 34D1                        00            .byte	0
14915 34D2                        76            .byte	$76
14916 34D3                        DC            .byte	$DC
14917 34D4                        00            .byte	0
14918 34D5                        00            .byte	0
14919 34D6                        00            .byte	0
14920 34D7                        00            .byte	0
14921 34D8                        00            .byte	0
14922 34D9                        00            .byte	0
14923                                           ! 1654  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34DA                        00            .byte	0
14925 34DB                        38            .byte	$38
14926 34DC                        6C            .byte	$6C
14927 34DD                        6C            .byte	$6C
14928 34DE                        38            .byte	$38
14929 34DF                        00            .byte	0
14930 34E0                        00            .byte	0
14931 34E1                        00            .byte	0
14932 34E2                        00            .byte	0
14933 34E3                        00            .byte	0
14934 34E4                        00            .byte	0
14935 34E5                        00            .byte	0
14936 34E6                        00            .byte	0
14937 34E7                        00            .byte	0
14938 34E8                        00            .byte	0
14939 34E9                        00            .byte	0
14940                                           ! 1655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34EA                        00            .byte	0
14942 34EB                        00            .byte	0
14943 34EC                        00            .byte	0
14944 34ED                        00            .byte	0
14945 34EE                        00            .byte	0
14946 34EF                        00            .byte	0
14947 34F0                        00            .byte	0
14948 34F1                        18            .byte	$18
14949 34F2                        18            .byte	$18
14950 34F3                        00            .byte	0
14951 34F4                        00            .byte	0
14952 34F5                        00            .byte	0
14953 34F6                        00            .byte	0
14954 34F7                        00            .byte	0
14955 34F8                        00            .byte	0
14956 34F9                        00            .byte	0
14957                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 34FA                        00            .byte	0
14959 34FB                        00            .byte	0
14960 34FC                        00            .byte	0
14961 34FD                        00            .byte	0
14962 34FE                        00            .byte	0
14963 34FF                        00            .byte	0
14964 3500                        00            .byte	0
14965 3501                        00            .byte	0
14966 3502                        18            .byte	$18
14967 3503                        00            .byte	0
14968 3504                        00            .byte	0
14969 3505                        00            .byte	0
14970 3506                        00            .byte	0
14971 3507                        00            .byte	0
14972 3508                        00            .byte	0
14973 3509                        00            .byte	0
14974                                           ! 1657  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 350A                        00            .byte	0
14976 350B                        0F            .byte	$F
14977 350C                        0C            .byte	$C
14978 350D                        0C            .byte	$C
14979 350E                        0C            .byte	$C
14980 350F                        0C            .byte	$C
14981 3510                        0C            .byte	$C
14982 3511                        EC            .byte	$EC
14983 3512                        6C            .byte	$6C
14984 3513                        6C            .byte	$6C
14985 3514                        3C            .byte	$3C
14986 3515                        1C            .byte	$1C
14987 3516                        00            .byte	0
14988 3517                        00            .byte	0
14989 3518                        00            .byte	0
14990 3519                        00            .byte	0
14991                                           ! 1658  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 351A                        00            .byte	0
14993 351B                        D8            .byte	$D8
14994 351C                        6C            .byte	$6C
14995 351D                        6C            .byte	$6C
14996 351E                        6C            .byte	$6C
14997 351F                        6C            .byte	$6C
14998 3520                        6C            .byte	$6C
14999 3521                        00            .byte	0
15000 3522                        00            .byte	0
15001 3523                        00            .byte	0
15002 3524                        00            .byte	0
15003 3525                        00            .byte	0
15004 3526                        00            .byte	0
15005 3527                        00            .byte	0
15006 3528                        00            .byte	0
15007 3529                        00            .byte	0
15008                                           ! 1659  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 352A                        00            .byte	0
15010 352B                        70            .byte	$70
15011 352C                        D8            .byte	$D8
15012 352D                        30            .byte	$30
15013 352E                        60            .byte	$60
15014 352F                        C8            .byte	$C8
15015 3530                        F8            .byte	$F8
15016 3531                        00            .byte	0
15017 3532                        00            .byte	0
15018 3533                        00            .byte	0
15019 3534                        00            .byte	0
15020 3535                        00            .byte	0
15021 3536                        00            .byte	0
15022 3537                        00            .byte	0
15023 3538                        00            .byte	0
15024 3539                        00            .byte	0
15025                                           ! 1660  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 353A                        00            .byte	0
15027 353B                        00            .byte	0
15028 353C                        00            .byte	0
15029 353D                        00            .byte	0
15030 353E                        7C            .byte	$7C
15031 353F                        7C            .byte	$7C
15032 3540                        7C            .byte	$7C
15033 3541                        7C            .byte	$7C
15034 3542                        7C            .byte	$7C
15035 3543                        7C            .byte	$7C
15036 3544                        7C            .byte	$7C
15037 3545                        00            .byte	0
15038 3546                        00            .byte	0
15039 3547                        00            .byte	0
15040 3548                        00            .byte	0
15041 3549                        00            .byte	0
15042                                           ! 1661  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 354A                        00            .byte	0
15044 354B                        00            .byte	0
15045 354C                        00            .byte	0
15046 354D                        00            .byte	0
15047 354E                        00            .byte	0
15048 354F                        00            .byte	0
15049 3550                        00            .byte	0
15050 3551                        00            .byte	0
15051 3552                        00            .byte	0
15052 3553                        00            .byte	0
15053 3554                        00            .byte	0
15054 3555                        00            .byte	0
15055 3556                        00            .byte	0
15056 3557                        00            .byte	0
15057 3558                        00            .byte	0
15058                                           ! 1662 };
15059 3559                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1663 static Bit8u vgafont14alt[1]={0x00};
15062                       0000355A            _vgafont14alt:
15063 355A                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1664 static Bit8u vgafont16alt[1]={0x00};
15066                       0000355B            _vgafont16alt:
15067 355B                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1665 #asm
15070                                           !BCC_ASM
15071                       0000355C            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 355C           BA                   03C2    mov dx, #0x3C2
15074 355F           B0                     C3    mov al, #0xC3
15075 3561           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3562           BA                   03C4    mov dx, #0x3C4
15078 3565           B0                     04    mov al, #0x04
15079 3567           EE                           outb dx,al
15080 3568           BA                   03C5    mov dx, #0x3C5
15081 356B           B0                     02    mov al, #0x02
15082 356D           EE                           outb dx,al
15083 356E           BB                   3578    mov bx, #msg_vga_init
15084 3571           53                           push bx
15085 3572           E8         46FB              call _printf
15086 3575           44                           inc sp
15087 3576           44                           inc sp
15088 3577           C3                           ret
15089                       00003578            msg_vga_init:
15090 3578                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
15091 35B8                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1687 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1688 #asm
15095                                           !BCC_ASM
15096                       000035BB            init_bios_area:
15097 35BB           1E                           push ds
15098 35BC           B8                   0040    mov ax, # 0x40
15099 35BF           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 35C1           BB                   0010    mov bx, # 0x10
15102 35C4           8B07                         mov ax, [bx]
15103 35C6           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 35C9           0D                   0020    or ax, #0x0020
15106 35CC           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 35CE           BB                   0085    mov bx, # 0x85
15110 35D1           B0                     10    mov al, #0x10
15111 35D3           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35D5           BB                   0087    mov bx, # 0x87
15114 35D8           B0                     60    mov al, #0x60
15115 35DA           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35DC           BB                   0088    mov bx, # 0x88
15118 35DF           B0                     F9    mov al, #0xf9
15119 35E1           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35E3           BB                   0089    mov bx, # 0x89
15122 35E6           B0                     51    mov al, #0x51
15123 35E8           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35EA           BB                   0065    mov bx, # 0x65
15126 35ED           B0                     09    mov al, #0x09
15127 35EF           8807                         mov [bx], al
15128 35F1           1F                           pop ds
15129 35F2           C3                           ret
15130                       000035F3            _video_save_pointer_table:
15131 35F3                      028A              .word _video_param_table
15132 35F5                      C000              .word 0xc000
15133 35F7                      0000              .word 0
15134 35F9                      0000              .word 0
15135 35FB                      0000              .word 0
15136 35FD                      0000              .word 0
15137 35FF                      0000              .word 0
15138 3601                      0000              .word 0
15139 3603                      0000              .word 0
15140 3605                      0000              .word 0
15141 3607                      0000              .word 0
15142 3609                      0000              .word 0
15143 360B                      0000              .word 0
15144 360D                      0000              .word 0
15145                                           ! 1738 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1739 static void display_splash_screen()
15148                                           ! 1740 {
15149                                           
15150                       0000360F            _display_splash_screen:
15151                                           ! 1741 }
15152 360F           C3                         ret
15153                                           ! 1742 static void display_info()
15154                                           ! 1743 {
15155                       00003610            _display_info:
15156                                           ! 1744 #asm
15157                                           !BCC_ASM
15158 3610           B8                   C000   mov ax,#0xc000
15159 3613           8ED8                        mov ds,ax
15160 3615           BE                   0022   mov si,#vgabios_name
15161 3618           E8         0013             call _display_string
15162 361B           BE                   0038   mov si,#vgabios_version
15163 361E           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 3621           BE                   0077   mov si,#vgabios_license
15169 3624           E8         0007             call _display_string
15170 3627           BE                   00AC   mov si,#vgabios_website
15171 362A           E8         0001             call _display_string
15172                                           ! 1759 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1760 }
15175 362D           C3                         ret
15176                                           ! 1761 static void display_string()
15177                                           ! 1762 {
15178                       0000362E            _display_string:
15179                                           ! 1763 #asm
15180                                           !BCC_ASM
15181 362E           8CD8                        mov ax,ds
15182 3630           8EC0                        mov es,ax
15183 3632           89F7                        mov di,si
15184 3634           31C9                        xor cx,cx
15185 3636           F7D1                        not cx
15186 3638           30C0                        xor al,al
15187 363A           FC                          cld
15188 363B           F2                          repne
15189 363C           AE                           scasb
15190 363D           F7D1                        not cx
15191 363F           49                          dec cx
15192 3640           51                          push cx
15193 3641           B8                   0300   mov ax,#0x0300
15194 3644           BB                   0000   mov bx,#0x0000
15195 3647           CD                     10   int #0x10
15196 3649           59                          pop cx
15197 364A           B8                   1301   mov ax,#0x1301
15198 364D           BB                   000B   mov bx,#0x000b
15199 3650           89F5                        mov bp,si
15200 3652           CD                     10   int #0x10
15201                                           ! 1784 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1785 }
15204 3654           C3                         ret
15205                                           ! 1786 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1787   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       00003655            _int10_func:
15208                                           !BCC_EOS
15209                                           ! 1788 {
15210                                           ! 1789  switch(( AX >> 8 ))
15211 3655           55                         push	bp
15212 3656           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 3658           8B46         12            mov	ax,$12[bp]
15215 365B           88E0                       mov	al,ah
15216 365D           30E4                       xor	ah,ah
15217                                           ! 1790   {
15218 365F           E9         04D7            br 	.3
15219                                           ! 1791    case 0x00:
15220                                           ! 1792      biosfn_set_video_mode(( AX & 0x00ff ));
15221                       00003662            .4:
15222                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15223 3662           8A46         12            mov	al,$12[bp]
15224                                           ! Debug: list unsigned char = al+0 (used reg = )
15225 3665           30E4                       xor	ah,ah
15226 3667           50                         push	ax
15227                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15228 3668           E8         0524            call	_biosfn_set_video_mode
15229 366B           44                         inc	sp
15230 366C           44                         inc	sp
15231                                           !BCC_EOS
15232                                           ! 1793      switch(( AX & 0x00ff )&0x7F)
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15234 366D           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15236 3670           24                     7F  and	al,*$7F
15237                                           ! 1794       {case 6:
15238 3672           EB           24            jmp .7
15239                                           ! 1795         AX = ((AX & 0xff00) | (0x3F));
15240                       00003674            .8:
15241                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15242 3674           8B46         12            mov	ax,$12[bp]
15243 3677           30C0                       xor	al,al
15244                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15245 3679           0C                     3F  or	al,*$3F
15246                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15247 367B           8946         12            mov	$12[bp],ax
15248                                           !BCC_EOS
15249                                           ! 1796         break;
15250 367E           EB           3D            jmp .5
15251                                           !BCC_EOS
15252                                           ! 1797        case 0:
15253                                           ! 1798        case 1:
15254                       00003680            .9:
15255                                           ! 1799        case 2:
15256                       00003680            .A:
15257                                           ! 1800        case 3:
15258                       00003680            .B:
15259                                           ! 1801        case 4:
15260                       00003680            .C:
15261                                           ! 1802        case 5:
15262                       00003680            .D:
15263                                           ! 1803        case 7:
15264                       00003680            .E:
15265                                           ! 1804         AX = ((AX & 0xff00) | (0x30));
15266                       00003680            .F:
15267                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15268 3680           8B46         12            mov	ax,$12[bp]
15269 3683           30C0                       xor	al,al
15270                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15271 3685           0C                     30  or	al,*$30
15272                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15273 3687           8946         12            mov	$12[bp],ax
15274                                           !BCC_EOS
15275                                           ! 1805         break;
15276 368A           EB           31            jmp .5
15277                                           !BCC_EOS
15278                                           ! 1806       default:
15279                                           ! 1807         AX = ((AX & 0xff00) | (0x20));
15280                       0000368C            .10:
15281                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15282 368C           8B46         12            mov	ax,$12[bp]
15283 368F           30C0                       xor	al,al
15284                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15285 3691           0C                     20  or	al,*$20
15286                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15287 3693           8946         12            mov	$12[bp],ax
15288                                           !BCC_EOS
15289                                           ! 1808       }
15290                                           ! 1809      break;
15291 3696           EB           25            jmp .5
15292                       00003698            .7:
15293 3698           2C                     00  sub	al,*0
15294 369A           72           F0            jb 	.10
15295 369C           3C                     07  cmp	al,*7
15296 369E           77           1B            ja  	.11
15297 36A0           30E4                       xor	ah,ah
15298 36A2           D1E0                       shl	ax,*1
15299 36A4           89C3                       mov	bx,ax
15300 36A6           2E                         seg	cs
15301 36A7           FFA7       36AB            br	.12[bx]
15302                       000036AB            .12:
15303 36AB                      3680            .word	.9
15304 36AD                      3680            .word	.A
15305 36AF                      3680            .word	.B
15306 36B1                      3680            .word	.C
15307 36B3                      3680            .word	.D
15308 36B5                      3680            .word	.E
15309 36B7                      3674            .word	.8
15310 36B9                      3680            .word	.F
15311                       000036BB            .11:
15312 36BB           EB           CF            jmp	.10
15313                       000036BD            .5:
15314 36BD           E9         04CD            br 	.1
15315                                           !BCC_EOS
15316                                           ! 1810    case 0x01:
15317                                           ! 1811      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15318                       000036C0            .13:
15319                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15320 36C0           8A46         10            mov	al,$10[bp]
15321                                           ! Debug: list unsigned char = al+0 (used reg = )
15322 36C3           30E4                       xor	ah,ah
15323 36C5           50                         push	ax
15324                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15325 36C6           8B46         10            mov	ax,$10[bp]
15326 36C9           88E0                       mov	al,ah
15327 36CB           30E4                       xor	ah,ah
15328                                           ! Debug: list unsigned int = ax+0 (used reg = )
15329 36CD           50                         push	ax
15330                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15331 36CE           E8         0B56            call	_biosfn_set_cursor_shape
15332 36D1           83C4                   04  add	sp,*4
15333                                           !BCC_EOS
15334                                           ! 1812      break;
15335 36D4           E9         04B6            br 	.1
15336                                           !BCC_EOS
15337                                           ! 1813    case 0x02:
15338                                           ! 1814      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15339                       000036D7            .14:
15340                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15341 36D7           FF76         0E            push	$E[bp]
15342                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15343 36DA           8B46         0C            mov	ax,$C[bp]
15344 36DD           88E0                       mov	al,ah
15345 36DF           30E4                       xor	ah,ah
15346                                           ! Debug: list unsigned int = ax+0 (used reg = )
15347 36E1           50                         push	ax
15348                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15349 36E2           E8         0C5D            call	_biosfn_set_cursor_pos
15350 36E5           83C4                   04  add	sp,*4
15351                                           !BCC_EOS
15352                                           ! 1815      break;
15353 36E8           E9         04A2            br 	.1
15354                                           !BCC_EOS
15355                                           ! 1816    case 0x03:
15356                                           ! 1817      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15357                       000036EB            .15:
15358                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15359 36EB           8D5E         0E            lea	bx,$E[bp]
15360 36EE           53                         push	bx
15361                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15362 36EF           8D5E         10            lea	bx,$10[bp]
15363 36F2           53                         push	bx
15364                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15365 36F3           8B46         0C            mov	ax,$C[bp]
15366 36F6           88E0                       mov	al,ah
15367 36F8           30E4                       xor	ah,ah
15368                                           ! Debug: list unsigned int = ax+0 (used reg = )
15369 36FA           50                         push	ax
15370                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15371 36FB           E8         0D44            call	_biosfn_get_cursor_pos
15372 36FE           83C4                   06  add	sp,*6
15373                                           !BCC_EOS
15374                                           ! 1818      break;
15375 3701           E9         0489            br 	.1
15376                                           !BCC_EOS
15377                                           ! 1819    case 0x04:
15378                                           ! 1820      AX=0x00;
15379                       00003704            .16:
15380                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15381 3704           31C0                       xor	ax,ax
15382 3706           8946         12            mov	$12[bp],ax
15383                                           !BCC_EOS
15384                                           ! 1821      BX=0x00;
15385                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15386 3709           31C0                       xor	ax,ax
15387 370B           8946         0C            mov	$C[bp],ax
15388                                           !BCC_EOS
15389                                           ! 1822      CX=0x00;
15390                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15391 370E           31C0                       xor	ax,ax
15392 3710           8946         10            mov	$10[bp],ax
15393                                           !BCC_EOS
15394                                           ! 1823      DX=0x00;
15395                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15396 3713           31C0                       xor	ax,ax
15397 3715           8946         0E            mov	$E[bp],ax
15398                                           !BCC_EOS
15399                                           ! 1824      break;
15400 3718           E9         0472            br 	.1
15401                                           !BCC_EOS
15402                                           ! 1825    case 0x05:
15403                                           ! 1826      biosfn_set_active_page(( AX & 0x00ff ));
15404                       0000371B            .17:
15405                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15406 371B           8A46         12            mov	al,$12[bp]
15407                                           ! Debug: list unsigned char = al+0 (used reg = )
15408 371E           30E4                       xor	ah,ah
15409 3720           50                         push	ax
15410                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15411 3721           E8         0D93            call	_biosfn_set_active_page
15412 3724           44                         inc	sp
15413 3725           44                         inc	sp
15414                                           !BCC_EOS
15415                                           ! 1827      break;
15416 3726           E9         0464            br 	.1
15417                                           !BCC_EOS
15418                                           ! 1828    case 0x06:
15419                                           ! 1829      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX
15420                       00003729            .18:
15421                                           ! 1829  & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15422                                           ! Debug: list int = const 1 (used reg = )
15423 3729           B8                   0001  mov	ax,*1
15424 372C           50                         push	ax
15425                                           ! Debug: list int = const $FF (used reg = )
15426 372D           B8                   00FF  mov	ax,#$FF
15427 3730           50                         push	ax
15428                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15429 3731           8A46         0E            mov	al,$E[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 3734           30E4                       xor	ah,ah
15432 3736           50                         push	ax
15433                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15434 3737           8B46         0E            mov	ax,$E[bp]
15435 373A           88E0                       mov	al,ah
15436 373C           30E4                       xor	ah,ah
15437                                           ! Debug: list unsigned int = ax+0 (used reg = )
15438 373E           50                         push	ax
15439                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15440 373F           8A46         10            mov	al,$10[bp]
15441                                           ! Debug: list unsigned char = al+0 (used reg = )
15442 3742           30E4                       xor	ah,ah
15443 3744           50                         push	ax
15444                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15445 3745           8B46         10            mov	ax,$10[bp]
15446 3748           88E0                       mov	al,ah
15447 374A           30E4                       xor	ah,ah
15448                                           ! Debug: list unsigned int = ax+0 (used reg = )
15449 374C           50                         push	ax
15450                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15451 374D           8B46         0C            mov	ax,$C[bp]
15452 3750           88E0                       mov	al,ah
15453 3752           30E4                       xor	ah,ah
15454                                           ! Debug: list unsigned int = ax+0 (used reg = )
15455 3754           50                         push	ax
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15457 3755           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 3758           30E4                       xor	ah,ah
15460 375A           50                         push	ax
15461                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15462 375B           E8         11DC            call	_biosfn_scroll
15463 375E           83C4                   10  add	sp,*$10
15464                                           !BCC_EOS
15465                                           ! 1830      break;
15466 3761           E9         0429            br 	.1
15467                                           !BCC_EOS
15468                                           ! 1831    case 0x07:
15469                                           ! 1832      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15470                       00003764            .19:
15471                                           ! Debug: list int = const 0 (used reg = )
15472 3764           31C0                       xor	ax,ax
15473 3766           50                         push	ax
15474                                           ! Debug: list int = const $FF (used reg = )
15475 3767           B8                   00FF  mov	ax,#$FF
15476 376A           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15478 376B           8A46         0E            mov	al,$E[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 376E           30E4                       xor	ah,ah
15481 3770           50                         push	ax
15482                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15483 3771           8B46         0E            mov	ax,$E[bp]
15484 3774           88E0                       mov	al,ah
15485 3776           30E4                       xor	ah,ah
15486                                           ! Debug: list unsigned int = ax+0 (used reg = )
15487 3778           50                         push	ax
15488                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15489 3779           8A46         10            mov	al,$10[bp]
15490                                           ! Debug: list unsigned char = al+0 (used reg = )
15491 377C           30E4                       xor	ah,ah
15492 377E           50                         push	ax
15493                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15494 377F           8B46         10            mov	ax,$10[bp]
15495 3782           88E0                       mov	al,ah
15496 3784           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 3786           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15500 3787           8B46         0C            mov	ax,$C[bp]
15501 378A           88E0                       mov	al,ah
15502 378C           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 378E           50                         push	ax
15505                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15506 378F           8A46         12            mov	al,$12[bp]
15507                                           ! Debug: list unsigned char = al+0 (used reg = )
15508 3792           30E4                       xor	ah,ah
15509 3794           50                         push	ax
15510                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15511 3795           E8         11A2            call	_biosfn_scroll
15512 3798           83C4                   10  add	sp,*$10
15513                                           !BCC_EOS
15514                                           ! 1833      break;
15515 379B           E9         03EF            br 	.1
15516                                           !BCC_EOS
15517                                           ! 1834    case 0x08:
15518                                           ! 1835      biosfn_read_char_attr(( BX >> 8 ),&AX);
15519                       0000379E            .1A:
15520                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15521 379E           8D5E         12            lea	bx,$12[bp]
15522 37A1           53                         push	bx
15523                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15524 37A2           8B46         0C            mov	ax,$C[bp]
15525 37A5           88E0                       mov	al,ah
15526 37A7           30E4                       xor	ah,ah
15527                                           ! Debug: list unsigned int = ax+0 (used reg = )
15528 37A9           50                         push	ax
15529                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15530 37AA           E8         1893            call	_biosfn_read_char_attr
15531 37AD           83C4                   04  add	sp,*4
15532                                           !BCC_EOS
15533                                           ! 1836      break;
15534 37B0           E9         03DA            br 	.1
15535                                           !BCC_EOS
15536                                           ! 1837    case 0x09:
15537                                           ! 1838      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15538                       000037B3            .1B:
15539                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15540 37B3           FF76         10            push	$10[bp]
15541                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15542 37B6           8A46         0C            mov	al,$C[bp]
15543                                           ! Debug: list unsigned char = al+0 (used reg = )
15544 37B9           30E4                       xor	ah,ah
15545 37BB           50                         push	ax
15546                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15547 37BC           8B46         0C            mov	ax,$C[bp]
15548 37BF           88E0                       mov	al,ah
15549 37C1           30E4                       xor	ah,ah
15550                                           ! Debug: list unsigned int = ax+0 (used reg = )
15551 37C3           50                         push	ax
15552                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15553 37C4           8A46         12            mov	al,$12[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 37C7           30E4                       xor	ah,ah
15556 37C9           50                         push	ax
15557                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15558 37CA           E8         1DB8            call	_biosfn_write_char_attr
15559 37CD           83C4                   08  add	sp,*8
15560                                           !BCC_EOS
15561                                           ! 1839      break;
15562 37D0           E9         03BA            br 	.1
15563                                           !BCC_EOS
15564                                           ! 1840    case 0x0A:
15565                                           ! 1841      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15566                       000037D3            .1C:
15567                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15568 37D3           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15570 37D6           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 37D9           30E4                       xor	ah,ah
15573 37DB           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15575 37DC           8B46         0C            mov	ax,$C[bp]
15576 37DF           88E0                       mov	al,ah
15577 37E1           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 37E3           50                         push	ax
15580                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15581 37E4           8A46         12            mov	al,$12[bp]
15582                                           ! Debug: list unsigned char = al+0 (used reg = )
15583 37E7           30E4                       xor	ah,ah
15584 37E9           50                         push	ax
15585                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15586 37EA           E8         1F8A            call	_biosfn_write_char_only
15587 37ED           83C4                   08  add	sp,*8
15588                                           !BCC_EOS
15589                                           ! 1842      break;
15590 37F0           E9         039A            br 	.1
15591                                           !BCC_EOS
15592                                           ! 1843    case 0x0C:
15593                                           ! 1844      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15594                       000037F3            .1D:
15595                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15596 37F3           FF76         0E            push	$E[bp]
15597                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15598 37F6           FF76         10            push	$10[bp]
15599                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15600 37F9           8A46         12            mov	al,$12[bp]
15601                                           ! Debug: list unsigned char = al+0 (used reg = )
15602 37FC           30E4                       xor	ah,ah
15603 37FE           50                         push	ax
15604                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15605 37FF           8B46         0C            mov	ax,$C[bp]
15606 3802           88E0                       mov	al,ah
15607 3804           30E4                       xor	ah,ah
15608                                           ! Debug: list unsigned int = ax+0 (used reg = )
15609 3806           50                         push	ax
15610                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15611 3807           E8         21DB            call	_biosfn_write_pixel
15612 380A           83C4                   08  add	sp,*8
15613                                           !BCC_EOS
15614                                           ! 1845      break;
15615 380D           E9         037D            br 	.1
15616                                           !BCC_EOS
15617                                           ! 1846    case 0x0D:
15618                                           ! 1847      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15619                       00003810            .1E:
15620                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15621 3810           8D5E         12            lea	bx,$12[bp]
15622 3813           53                         push	bx
15623                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15624 3814           FF76         0E            push	$E[bp]
15625                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15626 3817           FF76         10            push	$10[bp]
15627                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15628 381A           8B46         0C            mov	ax,$C[bp]
15629 381D           88E0                       mov	al,ah
15630 381F           30E4                       xor	ah,ah
15631                                           ! Debug: list unsigned int = ax+0 (used reg = )
15632 3821           50                         push	ax
15633                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15634 3822           E8         245C            call	_biosfn_read_pixel
15635 3825           83C4                   08  add	sp,*8
15636                                           !BCC_EOS
15637                                           ! 1848      break;
15638 3828           E9         0362            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1849    case 0x0E:
15641                                           ! 1850      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15642                       0000382B            .1F:
15643                                           ! Debug: list int = const 2 (used reg = )
15644 382B           B8                   0002  mov	ax,*2
15645 382E           50                         push	ax
15646                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15647 382F           8A46         0C            mov	al,$C[bp]
15648                                           ! Debug: list unsigned char = al+0 (used reg = )
15649 3832           30E4                       xor	ah,ah
15650 3834           50                         push	ax
15651                                           ! Debug: list int = const $FF (used reg = )
15652 3835           B8                   00FF  mov	ax,#$FF
15653 3838           50                         push	ax
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15655 3839           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 383C           30E4                       xor	ah,ah
15658 383E           50                         push	ax
15659                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15660 383F           E8         2645            call	_biosfn_write_teletype
15661 3842           83C4                   08  add	sp,*8
15662                                           !BCC_EOS
15663                                           ! 1851      break;
15664 3845           E9         0345            br 	.1
15665                                           !BCC_EOS
15666                                           ! 1852    case 0x10:
15667                                           ! 1853      biosfn_perform_gray_scale_summing(BX,CX);
15668                       00003848            .20:
15669                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15670 3848           FF76         10            push	$10[bp]
15671                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15672 384B           FF76         0C            push	$C[bp]
15673                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15674 384E           E8         2C89            call	_biosfn_perform_gray_scale_summing
15675 3851           83C4                   04  add	sp,*4
15676                                           !BCC_EOS
15677                                           ! 1854      break;
15678 3854           E9         0336            br 	.1
15679                                           !BCC_EOS
15680                                           ! 1855    case 0x11:
15681                                           ! 1856      switch(( AX & 0x00ff ))
15682                       00003857            .21:
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15684 3857           8A46         12            mov	al,$12[bp]
15685                                           ! 1857       {
15686 385A           E9         00E1            br 	.24
15687                                           ! 1858        case 0x00:
15688                                           ! 1859        case 0x10:
15689                       0000385D            .25:
15690                                           ! 1860         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15691                       0000385D            .26:
15692                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15693 385D           8B46         0C            mov	ax,$C[bp]
15694 3860           88E0                       mov	al,ah
15695 3862           30E4                       xor	ah,ah
15696                                           ! Debug: list unsigned int = ax+0 (used reg = )
15697 3864           50                         push	ax
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15699 3865           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 3868           30E4                       xor	ah,ah
15702 386A           50                         push	ax
15703                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15704 386B           FF76         0E            push	$E[bp]
15705                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15706 386E           FF76         10            push	$10[bp]
15707                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15708 3871           FF76         08            push	8[bp]
15709                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15710 3874           FF76         16            push	$16[bp]
15711                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15712 3877           8A46         12            mov	al,$12[bp]
15713                                           ! Debug: list unsigned char = al+0 (used reg = )
15714 387A           30E4                       xor	ah,ah
15715 387C           50                         push	ax
15716                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15717 387D           E8         2F01            call	_biosfn_load_text_user_pat
15718 3880           83C4                   0E  add	sp,*$E
15719                                           !BCC_EOS
15720                                           ! 1861         break;
15721 3883           E9         010C            br 	.22
15722                                           !BCC_EOS
15723                                           ! 1862        case 0x01:
15724                                           ! 1863        case 0x11:
15725                       00003886            .27:
15726                                           ! 1864         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15727                       00003886            .28:
15728                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15729 3886           8A46         0C            mov	al,$C[bp]
15730                                           ! Debug: list unsigned char = al+0 (used reg = )
15731 3889           30E4                       xor	ah,ah
15732 388B           50                         push	ax
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15734 388C           8A46         12            mov	al,$12[bp]
15735                                           ! Debug: list unsigned char = al+0 (used reg = )
15736 388F           30E4                       xor	ah,ah
15737 3891           50                         push	ax
15738                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15739 3892           E8         2F88            call	_biosfn_load_text_8_14_pat
15740 3895           83C4                   04  add	sp,*4
15741                                           !BCC_EOS
15742                                           ! 1865         break;
15743 3898           E9         00F7            br 	.22
15744                                           !BCC_EOS
15745                                           ! 1866        case 0x02:
15746                                           ! 1867        case 0x12:
15747                       0000389B            .29:
15748                                           ! 1868         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15749                       0000389B            .2A:
15750                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15751 389B           8A46         0C            mov	al,$C[bp]
15752                                           ! Debug: list unsigned char = al+0 (used reg = )
15753 389E           30E4                       xor	ah,ah
15754 38A0           50                         push	ax
15755                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15756 38A1           8A46         12            mov	al,$12[bp]
15757                                           ! Debug: list unsigned char = al+0 (used reg = )
15758 38A4           30E4                       xor	ah,ah
15759 38A6           50                         push	ax
15760                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15761 38A7           E8         300A            call	_biosfn_load_text_8_8_pat
15762 38AA           83C4                   04  add	sp,*4
15763                                           !BCC_EOS
15764                                           ! 1869         break;
15765 38AD           E9         00E2            br 	.22
15766                                           !BCC_EOS
15767                                           ! 1870        case 0x04:
15768                                           ! 1871        case 0x14:
15769                       000038B0            .2B:
15770                                           ! 1872         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15771                       000038B0            .2C:
15772                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15773 38B0           8A46         0C            mov	al,$C[bp]
15774                                           ! Debug: list unsigned char = al+0 (used reg = )
15775 38B3           30E4                       xor	ah,ah
15776 38B5           50                         push	ax
15777                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15778 38B6           8A46         12            mov	al,$12[bp]
15779                                           ! Debug: list unsigned char = al+0 (used reg = )
15780 38B9           30E4                       xor	ah,ah
15781 38BB           50                         push	ax
15782                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15783 38BC           E8         3093            call	_biosfn_load_text_8_16_pat
15784 38BF           83C4                   04  add	sp,*4
15785                                           !BCC_EOS
15786                                           ! 1873         break;
15787 38C2           E9         00CD            br 	.22
15788                                           !BCC_EOS
15789                                           ! 1874        case 0x20:
15790                                           ! 1875         biosfn_load_gfx_8_8_chars(ES,BP);
15791                       000038C5            .2D:
15792                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15793 38C5           FF76         08            push	8[bp]
15794                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15795 38C8           FF76         16            push	$16[bp]
15796                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15797 38CB           E8         3115            call	_biosfn_load_gfx_8_8_chars
15798 38CE           83C4                   04  add	sp,*4
15799                                           !BCC_EOS
15800                                           ! 1876         break;
15801 38D1           E9         00BE            br 	.22
15802                                           !BCC_EOS
15803                                           ! 1877        case 0x21:
15804                                           ! 1878         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15805                       000038D4            .2E:
15806                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15807 38D4           8A46         0E            mov	al,$E[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 38D7           30E4                       xor	ah,ah
15810 38D9           50                         push	ax
15811                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15812 38DA           8A46         0C            mov	al,$C[bp]
15813                                           ! Debug: list unsigned char = al+0 (used reg = )
15814 38DD           30E4                       xor	ah,ah
15815 38DF           50                         push	ax
15816                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15817 38E0           FF76         10            push	$10[bp]
15818                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15819 38E3           FF76         08            push	8[bp]
15820                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15821 38E6           FF76         16            push	$16[bp]
15822                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15823 38E9           E8         30F8            call	_biosfn_load_gfx_user_chars
15824 38EC           83C4                   0A  add	sp,*$A
15825                                           !BCC_EOS
15826                                           ! 1879         break;
15827 38EF           E9         00A0            br 	.22
15828                                           !BCC_EOS
15829                                           ! 1880        case 0x22:
15830                                           ! 1881         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15831                       000038F2            .2F:
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15833 38F2           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38F5           30E4                       xor	ah,ah
15836 38F7           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15838 38F8           E8         30EA            call	_biosfn_load_gfx_8_14_chars
15839 38FB           44                         inc	sp
15840 38FC           44                         inc	sp
15841                                           !BCC_EOS
15842                                           ! 1882         break;
15843 38FD           E9         0092            br 	.22
15844                                           !BCC_EOS
15845                                           ! 1883        case 0x23:
15846                                           ! 1884         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15847                       00003900            .30:
15848                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15849 3900           8A46         0C            mov	al,$C[bp]
15850                                           ! Debug: list unsigned char = al+0 (used reg = )
15851 3903           30E4                       xor	ah,ah
15852 3905           50                         push	ax
15853                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15854 3906           E8         30DD            call	_biosfn_load_gfx_8_8_dd_chars
15855 3909           44                         inc	sp
15856 390A           44                         inc	sp
15857                                           !BCC_EOS
15858                                           ! 1885         break;
15859 390B           E9         0084            br 	.22
15860                                           !BCC_EOS
15861                                           ! 1886        case 0x24:
15862                                           ! 1887         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15863                       0000390E            .31:
15864                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15865 390E           8A46         0C            mov	al,$C[bp]
15866                                           ! Debug: list unsigned char = al+0 (used reg = )
15867 3911           30E4                       xor	ah,ah
15868 3913           50                         push	ax
15869                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15870 3914           E8         30D0            call	_biosfn_load_gfx_8_16_chars
15871 3917           44                         inc	sp
15872 3918           44                         inc	sp
15873                                           !BCC_EOS
15874                                           ! 1888         break;
15875 3919           E9         0076            br 	.22
15876                                           !BCC_EOS
15877                                           ! 1889        case 0x30:
15878                                           ! 1890         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15879                       0000391C            .32:
15880                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15881 391C           8D5E         0E            lea	bx,$E[bp]
15882 391F           53                         push	bx
15883                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15884 3920           8D5E         10            lea	bx,$10[bp]
15885 3923           53                         push	bx
15886                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15887 3924           8D5E         08            lea	bx,8[bp]
15888 3927           53                         push	bx
15889                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15890 3928           8D5E         16            lea	bx,$16[bp]
15891 392B           53                         push	bx
15892                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15893 392C           8B46         0C            mov	ax,$C[bp]
15894 392F           88E0                       mov	al,ah
15895 3931           30E4                       xor	ah,ah
15896                                           ! Debug: list unsigned int = ax+0 (used reg = )
15897 3933           50                         push	ax
15898                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15899 3934           E8         30B1            call	_biosfn_get_font_info
15900 3937           83C4                   0A  add	sp,*$A
15901                                           !BCC_EOS
15902                                           ! 1891         break;
15903 393A           EB           56            jmp .22
15904                                           !BCC_EOS
15905                                           ! 1892       }
15906                                           ! 1893      break;
15907 393C           EB           54            jmp .22
15908                       0000393E            .24:
15909 393E           2C                     00  sub	al,*0
15910 3940         0F84         FF19            beq 	.25
15911 3944           2C                     01  sub	al,*1
15912 3946         0F84         FF3C            beq 	.27
15913 394A           2C                     01  sub	al,*1
15914 394C         0F84         FF4B            beq 	.29
15915 3950           2C                     02  sub	al,*2
15916 3952         0F84         FF5A            beq 	.2B
15917 3956           2C                     0C  sub	al,*$C
15918 3958         0F84         FF01            beq 	.26
15919 395C           2C                     01  sub	al,*1
15920 395E         0F84         FF24            beq 	.28
15921 3962           2C                     01  sub	al,*1
15922 3964         0F84         FF33            beq 	.2A
15923 3968           2C                     02  sub	al,*2
15924 396A         0F84         FF42            beq 	.2C
15925 396E           2C                     0C  sub	al,*$C
15926 3970         0F84         FF51            beq 	.2D
15927 3974           2C                     01  sub	al,*1
15928 3976         0F84         FF5A            beq 	.2E
15929 397A           2C                     01  sub	al,*1
15930 397C         0F84         FF72            beq 	.2F
15931 3980           2C                     01  sub	al,*1
15932 3982         0F84         FF7A            beq 	.30
15933 3986           2C                     01  sub	al,*1
15934 3988         0F84         FF82            beq 	.31
15935 398C           2C                     0C  sub	al,*$C
15936 398E         0F84         FF8A            beq 	.32
15937                       00003992            .22:
15938 3992           E9         01F8            br 	.1
15939                                           !BCC_EOS
15940                                           ! 1894    case 0x12:
15941                                           ! 1895      switch(( BX & 0x00ff ))
15942                       00003995            .33:
15943                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15944 3995           8A46         0C            mov	al,$C[bp]
15945                                           ! 1896       {
15946 3998           EB           3C            jmp .36
15947                                           ! 1897        case 0x20:
15948                                           ! 1898         biosfn_alternate_prtsc();
15949                       0000399A            .37:
15950                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15951 399A           E8         3225            call	_biosfn_alternate_prtsc
15952                                           !BCC_EOS
15953                                           ! 1899         break;
15954 399D           EB           43            jmp .34
15955                                           !BCC_EOS
15956                                           ! 1900        case 0x35:
15957                                           ! 1901   
15958                                           ! 1901       biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15959                       0000399F            .38:
15960                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15961 399F           FF76         0E            push	$E[bp]
15962                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15963 39A2           FF76         16            push	$16[bp]
15964                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15965 39A5           8A46         12            mov	al,$12[bp]
15966                                           ! Debug: list unsigned char = al+0 (used reg = )
15967 39A8           30E4                       xor	ah,ah
15968 39AA           50                         push	ax
15969                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15970 39AB           E8         32EE            call	_biosfn_switch_video_interface
15971 39AE           83C4                   06  add	sp,*6
15972                                           !BCC_EOS
15973                                           ! 1902         AX = ((AX & 0xff00) | (0x12));
15974                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15975 39B1           8B46         12            mov	ax,$12[bp]
15976 39B4           30C0                       xor	al,al
15977                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15978 39B6           0C                     12  or	al,*$12
15979                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15980 39B8           8946         12            mov	$12[bp],ax
15981                                           !BCC_EOS
15982                                           ! 1903         break;
15983 39BB           EB           25            jmp .34
15984                                           !BCC_EOS
15985                                           ! 1904        case 0x36:
15986                                           ! 1905         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15987                       000039BD            .39:
15988                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15989 39BD           8A46         12            mov	al,$12[bp]
15990                                           ! Debug: list unsigned char = al+0 (used reg = )
15991 39C0           30E4                       xor	ah,ah
15992 39C2           50                         push	ax
15993                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15994 39C3           E8         32D7            call	_biosfn_enable_video_refresh_control
15995 39C6           44                         inc	sp
15996 39C7           44                         inc	sp
15997                                           !BCC_EOS
15998                                           ! 1906         AX = ((AX & 0xff00) | (0x12));
15999                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16000 39C8           8B46         12            mov	ax,$12[bp]
16001 39CB           30C0                       xor	al,al
16002                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16003 39CD           0C                     12  or	al,*$12
16004                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16005 39CF           8946         12            mov	$12[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1907         break;
16008 39D2           EB           0E            jmp .34
16009                                           !BCC_EOS
16010                                           ! 1908       }
16011                                           ! 1909      break;
16012 39D4           EB           0C            jmp .34
16013                       000039D6            .36:
16014 39D6           2C                     20  sub	al,*$20
16015 39D8           74           C0            je 	.37
16016 39DA           2C                     15  sub	al,*$15
16017 39DC           74           C1            je 	.38
16018 39DE           2C                     01  sub	al,*1
16019 39E0           74           DB            je 	.39
16020                       000039E2            .34:
16021 39E2           E9         01A8            br 	.1
16022                                           !BCC_EOS
16023                                           ! 1910    case 0x13:
16024                                           ! 1911      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16025                       000039E5            .3A:
16026                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16027 39E5           FF76         08            push	8[bp]
16028                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16029 39E8           FF76         16            push	$16[bp]
16030                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16031 39EB           8A46         0E            mov	al,$E[bp]
16032                                           ! Debug: list unsigned char = al+0 (used reg = )
16033 39EE           30E4                       xor	ah,ah
16034 39F0           50                         push	ax
16035                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16036 39F1           8B46         0E            mov	ax,$E[bp]
16037 39F4           88E0                       mov	al,ah
16038 39F6           30E4                       xor	ah,ah
16039                                           ! Debug: list unsigned int = ax+0 (used reg = )
16040 39F8           50                         push	ax
16041                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16042 39F9           FF76         10            push	$10[bp]
16043                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16044 39FC           8A46         0C            mov	al,$C[bp]
16045                                           ! Debug: list unsigned char = al+0 (used reg = )
16046 39FF           30E4                       xor	ah,ah
16047 3A01           50                         push	ax
16048                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16049 3A02           8B46         0C            mov	ax,$C[bp]
16050 3A05           88E0                       mov	al,ah
16051 3A07           30E4                       xor	ah,ah
16052                                           ! Debug: list unsigned int = ax+0 (used reg = )
16053 3A09           50                         push	ax
16054                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16055 3A0A           8A46         12            mov	al,$12[bp]
16056                                           ! Debug: list unsigned char = al+0 (used reg = )
16057 3A0D           30E4                       xor	ah,ah
16058 3A0F           50                         push	ax
16059                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16060 3A10           E8         328B            call	_biosfn_write_string
16061 3A13           83C4                   10  add	sp,*$10
16062                                           !BCC_EOS
16063                                           ! 1912      break;
16064 3A16           E9         0174            br 	.1
16065                                           !BCC_EOS
16066                                           ! 1913    case 0x1B:
16067                                           ! 1914      biosfn_read_state_info(BX,ES,DI);
16068                       00003A19            .3B:
16069                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16070 3A19           FF76         04            push	4[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 3A1C           FF76         16            push	$16[bp]
16073                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16074 3A1F           FF76         0C            push	$C[bp]
16075                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16076 3A22           E8         3385            call	_biosfn_read_state_info
16077 3A25           83C4                   06  add	sp,*6
16078                                           !BCC_EOS
16079                                           ! 1915      AX = ((AX & 0xff00) | (0x1B));
16080                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16081 3A28           8B46         12            mov	ax,$12[bp]
16082 3A2B           30C0                       xor	al,al
16083                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16084 3A2D           0C                     1B  or	al,*$1B
16085                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16086 3A2F           8946         12            mov	$12[bp],ax
16087                                           !BCC_EOS
16088                                           ! 1916      break;
16089 3A32           E9         0158            br 	.1
16090                                           !BCC_EOS
16091                                           ! 1917    case 0x1C:
16092                                           ! 1918      switch(( AX & 0x00ff ))
16093                       00003A35            .3C:
16094                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16095 3A35           8A46         12            mov	al,$12[bp]
16096                                           ! 1919       {
16097 3A38           EB           33            jmp .3F
16098                                           ! 1920        case 0x00:
16099                                           ! 1921         biosfn_read_video_state_size(CX,&BX);
16100                       00003A3A            .40:
16101                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16102 3A3A           8D5E         0C            lea	bx,$C[bp]
16103 3A3D           53                         push	bx
16104                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16105 3A3E           FF76         10            push	$10[bp]
16106                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16107 3A41           E8         34E5            call	_biosfn_read_video_state_size
16108 3A44           83C4                   04  add	sp,*4
16109                                           !BCC_EOS
16110                                           ! 1922         break;
16111 3A47           EB           30            jmp .3D
16112                                           !BCC_EOS
16113                                           ! 1923        case 0x01:
16114                                           ! 1924         biosfn_save_video_state(CX,ES,BX);
16115                       00003A49            .41:
16116                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16117 3A49           FF76         0C            push	$C[bp]
16118                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16119 3A4C           FF76         16            push	$16[bp]
16120                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16121 3A4F           FF76         10            push	$10[bp]
16122                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16123 3A52           E8         34F8            call	_biosfn_save_video_state
16124 3A55           83C4                   06  add	sp,*6
16125                                           !BCC_EOS
16126                                           ! 1925         break;
16127 3A58           EB           1F            jmp .3D
16128                                           !BCC_EOS
16129                                           ! 1926        case 0x02:
16130                                           ! 1927         biosfn_restore_video_state(CX,ES,BX);
16131                       00003A5A            .42:
16132                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16133 3A5A           FF76         0C            push	$C[bp]
16134                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16135 3A5D           FF76         16            push	$16[bp]
16136                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16137 3A60           FF76         10            push	$10[bp]
16138                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16139 3A63           E8         3AB1            call	_biosfn_restore_video_state
16140 3A66           83C4                   06  add	sp,*6
16141                                           !BCC_EOS
16142                                           ! 1928         break;
16143 3A69           EB           0E            jmp .3D
16144                                           !BCC_EOS
16145                                           ! 1929       }
16146                                           ! 1930      AX = ((AX & 0xff00) | (0x1C));
16147 3A6B           EB           0C            jmp .3D
16148                       00003A6D            .3F:
16149 3A6D           2C                     00  sub	al,*0
16150 3A6F           74           C9            je 	.40
16151 3A71           2C                     01  sub	al,*1
16152 3A73           74           D4            je 	.41
16153 3A75           2C                     01  sub	al,*1
16154 3A77           74           E1            je 	.42
16155                       00003A79            .3D:
16156                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16157 3A79           8B46         12            mov	ax,$12[bp]
16158 3A7C           30C0                       xor	al,al
16159                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16160 3A7E           0C                     1C  or	al,*$1C
16161                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16162 3A80           8946         12            mov	$12[bp],ax
16163                                           !BCC_EOS
16164                                           ! 1931      break;
16165 3A83           E9         0107            br 	.1
16166                                           !BCC_EOS
16167                                           ! 1932    case 0x4f:
16168                                           ! 1933      if (vbe_has_vbe_display()) {
16169                       00003A86            .43:
16170                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16171 3A86           E8         592F            call	_vbe_has_vbe_display
16172 3A89           85C0                       test	ax,ax
16173 3A8B         0F84         00A0            beq 	.44
16174                       00003A8F            .45:
16175                                           ! 1934        switch(( AX & 0x00ff ))
16176                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16177 3A8F           8A46         12            mov	al,$12[bp]
16178                                           ! 1935        {
16179 3A92           EB           6E            jmp .48
16180                                           ! 1936          case 0x00:
16181                                           ! 1937           vbe_biosfn_return_controller_information(&AX,ES,DI);
16182                       00003A94            .49:
16183                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16184 3A94           FF76         04            push	4[bp]
16185                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16186 3A97           FF76         16            push	$16[bp]
16187                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16188 3A9A           8D5E         12            lea	bx,$12[bp]
16189 3A9D           53                         push	bx
16190                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16191 3A9E           E8         598E            call	_vbe_biosfn_return_controller_information
16192 3AA1           83C4                   06  add	sp,*6
16193                                           !BCC_EOS
16194                                           ! 1938           break;
16195 3AA4           E9         0086            br 	.46
16196                                           !BCC_EOS
16197                                           ! 1939          case 0x01:
16198                                           ! 1940           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16199                       00003AA7            .4A:
16200                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16201 3AA7           FF76         04            push	4[bp]
16202                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16203 3AAA           FF76         16            push	$16[bp]
16204                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16205 3AAD           FF76         10            push	$10[bp]
16206                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16207 3AB0           8D5E         12            lea	bx,$12[bp]
16208 3AB3           53                         push	bx
16209                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16210 3AB4           E8         5BD0            call	_vbe_biosfn_return_mode_information
16211 3AB7           83C4                   08  add	sp,*8
16212                                           !BCC_EOS
16213                                           ! 1941           break;
16214 3ABA           EB           71            jmp .46
16215                                           !BCC_EOS
16216                                           ! 1942          case 0x02:
16217                                           ! 1943           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16218                       00003ABC            .4B:
16219                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16220 3ABC           FF76         04            push	4[bp]
16221                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16222 3ABF           FF76         16            push	$16[bp]
16223                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16224 3AC2           FF76         0C            push	$C[bp]
16225                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16226 3AC5           8D5E         12            lea	bx,$12[bp]
16227 3AC8           53                         push	bx
16228                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16229 3AC9           E8         5CD7            call	_vbe_biosfn_set_mode
16230 3ACC           83C4                   08  add	sp,*8
16231                                           !BCC_EOS
16232                                           ! 1944           break;
16233 3ACF           EB           5C            jmp .46
16234                                           !BCC_EOS
16235                                           ! 1945          case 0x04:
16236                                           ! 1946           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16237                       00003AD1            .4C:
16238                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16239 3AD1           8D5E         0C            lea	bx,$C[bp]
16240 3AD4           53                         push	bx
16241                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16242 3AD5           FF76         16            push	$16[bp]
16243                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16244 3AD8           FF76         0E            push	$E[bp]
16245                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16246 3ADB           FF76         10            push	$10[bp]
16247                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16248 3ADE           8D5E         12            lea	bx,$12[bp]
16249 3AE1           53                         push	bx
16250                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16251 3AE2           E8         5FF2            call	_vbe_biosfn_save_restore_state
16252 3AE5           83C4                   0A  add	sp,*$A
16253                                           !BCC_EOS
16254                                           ! 1947           break;
16255 3AE8           EB           43            jmp .46
16256                                           !BCC_EOS
16257                                           ! 1948          case 0x09:
16258                                           ! 1949           AX=0x100;
16259                       00003AEA            .4D:
16260                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16261 3AEA           B8                   0100  mov	ax,#$100
16262 3AED           8946         12            mov	$12[bp],ax
16263                                           !BCC_EOS
16264                                           ! 1950           break;
16265 3AF0           EB           3B            jmp .46
16266                                           !BCC_EOS
16267                                           ! 1951          case 0x0A:
16268                                           ! 1952           AX=0x100;
16269                       00003AF2            .4E:
16270                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16271 3AF2           B8                   0100  mov	ax,#$100
16272 3AF5           8946         12            mov	$12[bp],ax
16273                                           !BCC_EOS
16274                                           ! 1953           break;
16275 3AF8           EB           33            jmp .46
16276                                           !BCC_EOS
16277                                           ! 1954          default:
16278                                           ! 1955           AX=0x100;
16279                       00003AFA            .4F:
16280                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16281 3AFA           B8                   0100  mov	ax,#$100
16282 3AFD           8946         12            mov	$12[bp],ax
16283                                           !BCC_EOS
16284                                           ! 1956           }
16285                                           ! 1957         }
16286 3B00           EB           2B            jmp .46
16287                       00003B02            .48:
16288 3B02           2C                     00  sub	al,*0
16289 3B04           72           F4            jb 	.4F
16290 3B06           3C                     0A  cmp	al,*$A
16291 3B08           77           21            ja  	.50
16292 3B0A           30E4                       xor	ah,ah
16293 3B0C           D1E0                       shl	ax,*1
16294 3B0E           89C3                       mov	bx,ax
16295 3B10           2E                         seg	cs
16296 3B11           FFA7       3B15            br	.51[bx]
16297                       00003B15            .51:
16298 3B15                      3A94            .word	.49
16299 3B17                      3AA7            .word	.4A
16300 3B19                      3ABC            .word	.4B
16301 3B1B                      3AFA            .word	.4F
16302 3B1D                      3AD1            .word	.4C
16303 3B1F                      3AFA            .word	.4F
16304 3B21                      3AFA            .word	.4F
16305 3B23                      3AFA            .word	.4F
16306 3B25                      3AFA            .word	.4F
16307 3B27                      3AEA            .word	.4D
16308 3B29                      3AF2            .word	.4E
16309                       00003B2B            .50:
16310 3B2B           EB           CD            jmp	.4F
16311                       00003B2D            .46:
16312                                           ! 1958         else {
16313 3B2D           EB           06            jmp .52
16314                       00003B2F            .44:
16315                                           ! 1959           AX=0x0100;
16316                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16317 3B2F           B8                   0100  mov	ax,#$100
16318 3B32           8946         12            mov	$12[bp],ax
16319                                           !BCC_EOS
16320                                           ! 1960           }
16321                                           ! 1961         break;
16322                       00003B35            .52:
16323 3B35           EB           56            jmp .1
16324                                           !BCC_EOS
16325                                           ! 1962   }
16326                                           ! 1963 }
16327 3B37           EB           54            jmp .1
16328                       00003B39            .3:
16329 3B39           2D                   0000  sub	ax,*0
16330 3B3C           7C           4F            jl  	.1
16331 3B3E           3D                   001C  cmp	ax,*$1C
16332 3B41           77           43            ja  	.53
16333 3B43           D1E0                       shl	ax,*1
16334 3B45           89C3                       mov	bx,ax
16335 3B47           2E                         seg	cs
16336 3B48           FFA7       3B4C            br	.54[bx]
16337                       00003B4C            .54:
16338 3B4C                      3662            .word	.4
16339 3B4E                      36C0            .word	.13
16340 3B50                      36D7            .word	.14
16341 3B52                      36EB            .word	.15
16342 3B54                      3704            .word	.16
16343 3B56                      371B            .word	.17
16344 3B58                      3729            .word	.18
16345 3B5A                      3764            .word	.19
16346 3B5C                      379E            .word	.1A
16347 3B5E                      37B3            .word	.1B
16348 3B60                      37D3            .word	.1C
16349 3B62                      3B8D            .word	.1
16350 3B64                      37F3            .word	.1D
16351 3B66                      3810            .word	.1E
16352 3B68                      382B            .word	.1F
16353 3B6A                      3B8D            .word	.1
16354 3B6C                      3848            .word	.20
16355 3B6E                      3857            .word	.21
16356 3B70                      3995            .word	.33
16357 3B72                      39E5            .word	.3A
16358 3B74                      3B8D            .word	.1
16359 3B76                      3B8D            .word	.1
16360 3B78                      3B8D            .word	.1
16361 3B7A                      3B8D            .word	.1
16362 3B7C                      3B8D            .word	.1
16363 3B7E                      3B8D            .word	.1
16364 3B80                      3B8D            .word	.1
16365 3B82                      3A19            .word	.3B
16366 3B84                      3A35            .word	.3C
16367                       00003B86            .53:
16368 3B86           2D                   004F  sub	ax,*$4F
16369 3B89         0F84         FEF9            beq 	.43
16370                       00003B8D            .1:
16371                       FFFFFFFE            ..FFFF	=	-2
16372 3B8D           5D                         pop	bp
16373 3B8E           C3                         ret
16374                                           ! 1964 static void biosfn_set_video_mode(mode) Bit8u mode;
16375                                           ! Register BX used in function int10_func
16376                       00003B8F            _biosfn_set_video_mode:
16377                                           !BCC_EOS
16378                                           ! 1965 {
16379                                           ! 1966  Bit8u noclearmem=mode&0x80;
16380 3B8F           55                         push	bp
16381 3B90           89E5                       mov	bp,sp
16382 3B92           4C                         dec	sp
16383                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16384 3B93           8A46         04            mov	al,4[bp]
16385 3B96           24                     80  and	al,#$80
16386                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16387 3B98           8846         FF            mov	-1[bp],al
16388                                           !BCC_EOS
16389                                           ! 1967  Bit8u line,mmask,*palette,vpti;
16390                                           !BCC_EOS
16391                                           ! 1968  Bit16u i,twidth,theightm1,cheight;
16392                                           !BCC_EOS
16393                                           ! 1969  Bit8u modeset_ctl,video_ctl,vga_switches;
16394                                           !BCC_EOS
16395                                           ! 1970  Bit16u crtc_addr;
16396                                           !BCC_EOS
16397                                           ! 1971  if (vbe_has_vbe_display()) {
16398 3B9B           83C4                   EB  add	sp,*-$15
16399                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16400 3B9E           E8         5817            call	_vbe_has_vbe_display
16401 3BA1           85C0                       test	ax,ax
16402 3BA3           74           08            je  	.55
16403                       00003BA5            .56:
16404                                           ! 1972    dispi_set_enable(0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3BA5           31C0                       xor	ax,ax
16407 3BA7           50                         push	ax
16408                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16409 3BA8           E8         55DA            call	_dispi_set_enable
16410 3BAB           44                         inc	sp
16411 3BAC           44                         inc	sp
16412                                           !BCC_EOS
16413                                           ! 1973   }
16414                                           ! 1974  mode=mode&0x7f;
16415                       00003BAD            .55:
16416                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16417 3BAD           8A46         04            mov	al,4[bp]
16418 3BB0           24                     7F  and	al,*$7F
16419                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16420 3BB2           8846         04            mov	4[bp],al
16421                                           !BCC_EOS
16422                                           ! 1975  line=find_vga_entry(mode);
16423                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16424 3BB5           8A46         04            mov	al,4[bp]
16425 3BB8           30E4                       xor	ah,ah
16426 3BBA           50                         push	ax
16427                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16428 3BBB           E8         3F37            call	_find_vga_entry
16429 3BBE           44                         inc	sp
16430 3BBF           44                         inc	sp
16431                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16432 3BC0           8846         FE            mov	-2[bp],al
16433                                           !BCC_EOS
16434                                           ! 1976  if(line==0xFF)
16435                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16436 3BC3           8A46         FE            mov	al,-2[bp]
16437 3BC6           3C                     FF  cmp	al,#$FF
16438 3BC8           75           04            jne 	.57
16439                       00003BCA            .58:
16440                                           ! 1977   return;
16441 3BCA           89EC                       mov	sp,bp
16442 3BCC           5D                         pop	bp
16443 3BCD           C3                         ret
16444                                           !BCC_EOS
16445                                           ! 1978  vpti=line_to_vpti[line];
16446                       00003BCE            .57:
16447                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16448 3BCE           8A46         FE            mov	al,-2[bp]
16449 3BD1           30E4                       xor	ah,ah
16450 3BD3           89C3                       mov	bx,ax
16451                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16452 3BD5           8A87       0276            mov	al,_line_to_vpti[bx]
16453 3BD9           8846         F9            mov	-7[bp],al
16454                                           !BCC_EOS
16455                                           ! 1979  twidth=video_param_table[vpti].twidth;
16456                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16457 3BDC           8A46         F9            mov	al,-7[bp]
16458 3BDF           30E4                       xor	ah,ah
16459 3BE1           B1                     06  mov	cl,*6
16460 3BE3           D3E0                       shl	ax,cl
16461 3BE5           89C3                       mov	bx,ax
16462                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16463 3BE7           8A87       028A            mov	al,_video_param_table[bx]
16464 3BEB           30E4                       xor	ah,ah
16465 3BED           8946         F4            mov	-$C[bp],ax
16466                                           !BCC_EOS
16467                                           ! 1980  theightm1=video_param_table[vpti].theightm1;
16468                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16469 3BF0           8A46         F9            mov	al,-7[bp]
16470 3BF3           30E4                       xor	ah,ah
16471 3BF5           B1                     06  mov	cl,*6
16472 3BF7           D3E0                       shl	ax,cl
16473 3BF9           89C3                       mov	bx,ax
16474 3BFB           81C3                 028A  add	bx,#_video_param_table
16475                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16476 3BFF           8A47         01            mov	al,1[bx]
16477 3C02           30E4                       xor	ah,ah
16478 3C04           8946         F2            mov	-$E[bp],ax
16479                                           !BCC_EOS
16480                                           ! 1981  cheight=video_param_table[vpti].che
16481                                           ! 1981 ight;
16482                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16483 3C07           8A46         F9            mov	al,-7[bp]
16484 3C0A           30E4                       xor	ah,ah
16485 3C0C           B1                     06  mov	cl,*6
16486 3C0E           D3E0                       shl	ax,cl
16487 3C10           89C3                       mov	bx,ax
16488 3C12           81C3                 028A  add	bx,#_video_param_table
16489                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16490 3C16           8A47         02            mov	al,2[bx]
16491 3C19           30E4                       xor	ah,ah
16492 3C1B           8946         F0            mov	-$10[bp],ax
16493                                           !BCC_EOS
16494                                           ! 1982  video_ctl=read_byte(0x40,0x87);
16495                                           ! Debug: list int = const $87 (used reg = )
16496 3C1E           B8                   0087  mov	ax,#$87
16497 3C21           50                         push	ax
16498                                           ! Debug: list int = const $40 (used reg = )
16499 3C22           B8                   0040  mov	ax,*$40
16500 3C25           50                         push	ax
16501                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16502 3C26           E8         3FB8            call	_read_byte
16503 3C29           83C4                   04  add	sp,*4
16504                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16505 3C2C           8846         EE            mov	-$12[bp],al
16506                                           !BCC_EOS
16507                                           ! 1983  vga_switches=read_byte(0x40,0x88);
16508                                           ! Debug: list int = const $88 (used reg = )
16509 3C2F           B8                   0088  mov	ax,#$88
16510 3C32           50                         push	ax
16511                                           ! Debug: list int = const $40 (used reg = )
16512 3C33           B8                   0040  mov	ax,*$40
16513 3C36           50                         push	ax
16514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16515 3C37           E8         3FA7            call	_read_byte
16516 3C3A           83C4                   04  add	sp,*4
16517                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16518 3C3D           8846         ED            mov	-$13[bp],al
16519                                           !BCC_EOS
16520                                           ! 1984  modeset_ctl=read_byte(0x40,0x89);
16521                                           ! Debug: list int = const $89 (used reg = )
16522 3C40           B8                   0089  mov	ax,#$89
16523 3C43           50                         push	ax
16524                                           ! Debug: list int = const $40 (used reg = )
16525 3C44           B8                   0040  mov	ax,*$40
16526 3C47           50                         push	ax
16527                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16528 3C48           E8         3F96            call	_read_byte
16529 3C4B           83C4                   04  add	sp,*4
16530                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16531 3C4E           8846         EF            mov	-$11[bp],al
16532                                           !BCC_EOS
16533                                           ! 1985  if((modeset_ctl&0x08)==0)
16534                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16535 3C51           8A46         EF            mov	al,-$11[bp]
16536 3C54           24                     08  and	al,*8
16537                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16538 3C56           84C0                       test	al,al
16539 3C58         0F85         0145            bne 	.59
16540                       00003C5C            .5A:
16541                                           ! 1986   {
16542                                           ! 1987    outb(0x3c6,vga_modes[line].pelmask);
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C5C           8A46         FE            mov	al,-2[bp]
16545 3C5F           30E4                       xor	ah,ah
16546 3C61           B1                     03  mov	cl,*3
16547 3C63           D3E0                       shl	ax,cl
16548 3C65           89C3                       mov	bx,ax
16549 3C67           81C3                 01F6  add	bx,#_vga_modes
16550                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16551 3C6B           8A47         06            mov	al,6[bx]
16552 3C6E           30E4                       xor	ah,ah
16553 3C70           50                         push	ax
16554                                           ! Debug: list int = const $3C6 (used reg = )
16555 3C71           B8                   03C6  mov	ax,#$3C6
16556 3C74           50                         push	ax
16557                                           ! Debug: func () void = outb+0 (used reg = )
16558 3C75           E8         3FD5            call	_outb
16559 3C78           83C4                   04  add	sp,*4
16560                                           !BCC_EOS
16561                                           ! 1988    outb(0x3c8,0x00);
16562                                           ! Debug: list int = const 0 (used reg = )
16563 3C7B           31C0                       xor	ax,ax
16564 3C7D           50                         push	ax
16565                                           ! Debug: list int = const $3C8 (used reg = )
16566 3C7E           B8                   03C8  mov	ax,#$3C8
16567 3C81           50                         push	ax
16568                                           ! Debug: func () void = outb+0 (used reg = )
16569 3C82           E8         3FC8            call	_outb
16570 3C85           83C4                   04  add	sp,*4
16571                                           !BCC_EOS
16572                                           ! 1989    switch(vga_modes[line].dacmodel)
16573                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16574 3C88           8A46         FE            mov	al,-2[bp]
16575 3C8B           30E4                       xor	ah,ah
16576 3C8D           B1                     03  mov	cl,*3
16577 3C8F           D3E0                       shl	ax,cl
16578 3C91           89C3                       mov	bx,ax
16579 3C93           81C3                 01F6  add	bx,#_vga_modes
16580 3C97           8A47         07            mov	al,7[bx]
16581                                           ! 1990     {case 0:
16582 3C9A           EB           22            jmp .5D
16583                                           ! 1991       palette=&palette0;
16584                       00003C9C            .5E:
16585                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3C9C           BB                   0A0A  mov	bx,#_palette0
16587 3C9F           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1992       break;
16590 3CA2           EB           2A            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1993      case 1:
16593                                           ! 1994       palette=&palette1;
16594                       00003CA4            .5F:
16595                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16596 3CA4           BB                   0ACA  mov	bx,#_palette1
16597 3CA7           895E         FA            mov	-6[bp],bx
16598                                           !BCC_EOS
16599                                           ! 1995       break;
16600 3CAA           EB           22            jmp .5B
16601                                           !BCC_EOS
16602                                           ! 1996      case 2:
16603                                           ! 1997       palette=&palette2;
16604                       00003CAC            .60:
16605                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16606 3CAC           BB                   0B8A  mov	bx,#_palette2
16607 3CAF           895E         FA            mov	-6[bp],bx
16608                                           !BCC_EOS
16609                                           ! 1998       break;
16610 3CB2           EB           1A            jmp .5B
16611                                           !BCC_EOS
16612                                           ! 1999      case 3:
16613                                           ! 2000       palette=&palette3;
16614                       00003CB4            .61:
16615                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16616 3CB4           BB                   0C4A  mov	bx,#_palette3
16617 3CB7           895E         FA            mov	-6[bp],bx
16618                                           !BCC_EOS
16619                                           ! 2001       break;
16620 3CBA           EB           12            jmp .5B
16621                                           !BCC_EOS
16622                                           ! 2002     }
16623                                           ! 2003    for(i=0;i<0x0100;i++)
16624 3CBC           EB           10            jmp .5B
16625                       00003CBE            .5D:
16626 3CBE           2C                     00  sub	al,*0
16627 3CC0           74           DA            je 	.5E
16628 3CC2           2C                     01  sub	al,*1
16629 3CC4           74           DE            je 	.5F
16630 3CC6           2C                     01  sub	al,*1
16631 3CC8           74           E2            je 	.60
16632 3CCA           2C                     01  sub	al,*1
16633 3CCC           74           E6            je 	.61
16634                       00003CCE            .5B:
16635                       FFFFFFE8            ..FFFE	=	-$18
16636                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16637 3CCE           31C0                       xor	ax,ax
16638 3CD0           8946         F6            mov	-$A[bp],ax
16639                                           !BCC_EOS
16640                                           !BCC_EOS
16641                                           ! 2004     {if(i<=dac_regs[vga_modes[line].dacmodel])
16642 3CD3           E9         00AB            br 	.64
16643                       00003CD6            .65:
16644                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16645 3CD6           8A46         FE            mov	al,-2[bp]
16646 3CD9           30E4                       xor	ah,ah
16647 3CDB           B1                     03  mov	cl,*3
16648 3CDD           D3E0                       shl	ax,cl
16649 3CDF           89C3                       mov	bx,ax
16650 3CE1           81C3                 01F6  add	bx,#_vga_modes
16651                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16652 3CE5           8A47         07            mov	al,7[bx]
16653 3CE8           30E4                       xor	ah,ah
16654 3CEA           89C3                       mov	bx,ax
16655                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16656 3CEC           8A87       0286            mov	al,_dac_regs[bx]
16657 3CF0           30E4                       xor	ah,ah
16658 3CF2           3B46         F6            cmp	ax,-$A[bp]
16659 3CF5           72           5C            jb  	.66
16660                       00003CF7            .67:
16661                                           ! 2005       {outb(0x3c9,palette[(i*3)+0]);
16662                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16663 3CF7           8B46         F6            mov	ax,-$A[bp]
16664 3CFA           89C2                       mov	dx,ax
16665 3CFC           D1E0                       shl	ax,*1
16666 3CFE           01D0                       add	ax,dx
16667                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16668                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16669 3D00           0346         FA            add	ax,-6[bp]
16670 3D03           89C3                       mov	bx,ax
16671                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16672 3D05           8A07                       mov	al,[bx]
16673 3D07           30E4                       xor	ah,ah
16674 3D09           50                         push	ax
16675                                           ! Debug: list int = const $3C9 (used reg = )
16676 3D0A           B8                   03C9  mov	ax,#$3C9
16677 3D0D           50                         push	ax
16678                                           ! Debug: func () void = outb+0 (used reg = )
16679 3D0E           E8         3F3C            call	_outb
16680 3D11           83C4                   04  add	sp,*4
16681                                           !BCC_EOS
16682                                           ! 2006        outb(0x3c9,palette[(i*3)+1]);
16683                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16684 3D14           8B46         F6            mov	ax,-$A[bp]
16685 3D17           89C2                       mov	dx,ax
16686 3D19           D1E0                       shl	ax,*1
16687 3D1B           01D0                       add	ax,dx
16688                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16689                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16690 3D1D           40                         inc	ax
16691 3D1E           0346         FA            add	ax,-6[bp]
16692 3D21           89C3                       mov	bx,ax
16693                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16694 3D23           8A07                       mov	al,[bx]
16695 3D25           30E4                       xor	ah,ah
16696 3D27           50                         push	ax
16697                                           ! Debug: list int = const $3C9 (used reg = )
16698 3D28           B8                   03C9  mov	ax,#$3C9
16699 3D2B           50                         push	ax
16700                                           ! Debug: func () void = outb+0 (used reg = )
16701 3D2C           E8         3F1E            call	_outb
16702 3D2F           83C4                   04  add	sp,*4
16703                                           !BCC_EOS
16704                                           ! 2007        outb(0x3c9,palette[(i*3)+2]);
16705                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16706 3D32           8B46         F6            mov	ax,-$A[bp]
16707 3D35           89C2                       mov	dx,ax
16708 3D37           D1E0                       shl	ax,*1
16709 3D39           01D0                       add	ax,dx
16710                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16711                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D3B           40                         inc	ax
16713 3D3C           40                         inc	ax
16714 3D3D           0346         FA            add	ax,-6[bp]
16715 3D40           89C3                       mov	bx,ax
16716                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16717 3D42           8A07                       mov	al,[bx]
16718 3D44           30E4                       xor	ah,ah
16719 3D46           50                         push	ax
16720                                           ! Debug: list int = const $3C9 (used reg = )
16721 3D47           B8                   03C9  mov	ax,#$3C9
16722 3D4A           50                         push	ax
16723                                           ! Debug: func () void = outb+0 (used reg = )
16724 3D4B           E8         3EFF            call	_outb
16725 3D4E           83C4                   04  add	sp,*4
16726                                           !BCC_EOS
16727                                           ! 2008       }
16728                                           ! 2009      else
16729                                           ! 2010       {outb(0x3c9,0);
16730 3D51           EB           27            jmp .68
16731                       00003D53            .66:
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3D53           31C0                       xor	ax,ax
16734 3D55           50                         push	ax
16735                                           ! Debug: list int = const $3C9 (used reg = )
16736 3D56           B8                   03C9  mov	ax,#$3C9
16737 3D59           50                         push	ax
16738                                           ! Debug: func () void = outb+0 (used reg = )
16739 3D5A           E8         3EF0            call	_outb
16740 3D5D           83C4                   04  add	sp,*4
16741                                           !BCC_EOS
16742                                           ! 2011        outb(0x3c9,0);
16743                                           ! Debug: list int = const 0 (used reg = )
16744 3D60           31C0                       xor	ax,ax
16745 3D62           50                         push	ax
16746                                           ! Debug: list int = const $3C9 (used reg = )
16747 3D63           B8                   03C9  mov	ax,#$3C9
16748 3D66           50                         push	ax
16749                                           ! Debug: func () void = outb+0 (used reg = )
16750 3D67           E8         3EE3            call	_outb
16751 3D6A           83C4                   04  add	sp,*4
16752                                           !BCC_EOS
16753                                           ! 2012        outb(0x3c9,0);
16754                                           ! Debug: list int = const 0 (used reg = )
16755 3D6D           31C0                       xor	ax,ax
16756 3D6F           50                         push	ax
16757                                           ! Debug: list int = const $3C9 (used reg = )
16758 3D70           B8                   03C9  mov	ax,#$3C9
16759 3D73           50                         push	ax
16760                                           ! Debug: func () void = outb+0 (used reg = )
16761 3D74           E8         3ED6            call	_outb
16762 3D77           83C4                   04  add	sp,*4
16763                                           !BCC_EOS
16764                                           ! 2013       }
16765                                           ! 2014     }
16766                       00003D7A            .68:
16767                                           ! 2015    if((modeset_ctl&0x02)==0x02)
16768                       00003D7A            .63:
16769                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16770 3D7A           8B46         F6            mov	ax,-$A[bp]
16771 3D7D           40                         inc	ax
16772 3D7E           8946         F6            mov	-$A[bp],ax
16773                       00003D81            .64:
16774                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16775 3D81           8B46         F6            mov	ax,-$A[bp]
16776 3D84           3D                   0100  cmp	ax,#$100
16777 3D87         0F82         FF4B            blo 	.65
16778                       00003D8B            .69:
16779                       00003D8B            .62:
16780                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16781 3D8B           8A46         EF            mov	al,-$11[bp]
16782 3D8E           24                     02  and	al,*2
16783                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16784 3D90           3C                     02  cmp	al,*2
16785 3D92           75           0D            jne 	.6A
16786                       00003D94            .6B:
16787                                           ! 2016     {
16788                                           ! 2017      biosfn_perform_gray_scale_summing(0x00, 0x100);
16789                                           ! Debug: list int = const $100 (used reg = )
16790 3D94           B8                   0100  mov	ax,#$100
16791 3D97           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3D98           31C0                       xor	ax,ax
16794 3D9A           50                         push	ax
16795                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16796 3D9B           E8         273C            call	_biosfn_perform_gray_scale_summing
16797 3D9E           83C4                   04  add	sp,*4
16798                                           !BCC_EOS
16799                                           ! 2018     }
16800                                           ! 2019   }
16801                       00003DA1            .6A:
16802                                           ! 2020  inb(0x3da);
16803                       00003DA1            .59:
16804                                           ! Debug: list int = const $3DA (used reg = )
16805 3DA1           B8                   03DA  mov	ax,#$3DA
16806 3DA4           50                         push	ax
16807                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16808 3DA5           E8         3E8F            call	_inb
16809 3DA8           44                         inc	sp
16810 3DA9           44                         inc	sp
16811                                           !BCC_EOS
16812                                           ! 2021  for(i=0;i<=0x13;i++)
16813                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16814 3DAA           31C0                       xor	ax,ax
16815 3DAC           8946         F6            mov	-$A[bp],ax
16816                                           !BCC_EOS
16817                                           !BCC_EOS
16818                                           ! 2022   {outb(0x3c0,i);
16819 3DAF           EB           38            jmp .6E
16820                       00003DB1            .6F:
16821                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16822 3DB1           FF76         F6            push	-$A[bp]
16823                                           ! Debug: list int = const $3C0 (used reg = )
16824 3DB4           B8                   03C0  mov	ax,#$3C0
16825 3DB7           50                         push	ax
16826                                           ! Debug: func () void = outb+0 (used reg = )
16827 3DB8           E8         3E92            call	_outb
16828 3DBB           83C4                   04  add	sp,*4
16829                                           !BCC_EOS
16830                                           ! 2023    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16831                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16832 3DBE           8A46         F9            mov	al,-7[bp]
16833 3DC1           30E4                       xor	ah,ah
16834 3DC3           B1                     06  mov	cl,*6
16835 3DC5           D3E0                       shl	ax,cl
16836 3DC7           89C3                       mov	bx,ax
16837 3DC9           81C3                 028A  add	bx,#_video_param_table
16838                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16839 3DCD           8B46         F6            mov	ax,-$A[bp]
16840 3DD0           01C3                       add	bx,ax
16841                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16842 3DD2           8A47         23            mov	al,$23[bx]
16843 3DD5           30E4                       xor	ah,ah
16844 3DD7           50                         push	ax
16845                                           ! Debug: list int = const $3C0 (used reg = )
16846 3DD8           B8                   03C0  mov	ax,#$3C0
16847 3DDB           50                         push	ax
16848                                           ! Debug: func () void = outb+0 (used reg = )
16849 3DDC           E8         3E6E            call	_outb
16850 3DDF           83C4                   04  add	sp,*4
16851                                           !BCC_EOS
16852                                           ! 2024   }
16853                                           ! 2025  outb(0x3c0,0x14);
16854                       00003DE2            .6D:
16855                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16856 3DE2           8B46         F6            mov	ax,-$A[bp]
16857 3DE5           40                         inc	ax
16858 3DE6           8946         F6            mov	-$A[bp],ax
16859                       00003DE9            .6E:
16860                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16861 3DE9           8B46         F6            mov	ax,-$A[bp]
16862 3DEC           3D                   0013  cmp	ax,*$13
16863 3DEF           76           C0            jbe	.6F
16864                       00003DF1            .70:
16865                       00003DF1            .6C:
16866                                           ! Debug: list int = const $14 (used reg = )
16867 3DF1           B8                   0014  mov	ax,*$14
16868 3DF4           50                         push	ax
16869                                           ! Debug: list int = const $3C0 (used reg = )
16870 3DF5           B8                   03C0  mov	ax,#$3C0
16871 3DF8           50                         push	ax
16872                                           ! Debug: func () void = outb+0 (used reg = )
16873 3DF9           E8         3E51            call	_outb
16874 3DFC           83C4                   04  add	sp,*4
16875                                           !BCC_EOS
16876                                           ! 2026  outb(0x3c0,0x00);
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3DFF           31C0                       xor	ax,ax
16879 3E01           50                         push	ax
16880                                           ! Debug: list int = const $3C0 (used reg = )
16881 3E02           B8                   03C0  mov	ax,#$3C0
16882 3E05           50                         push	ax
16883                                           ! Debug: func () void = outb+0 (used reg = )
16884 3E06           E8         3E44            call	_outb
16885 3E09           83C4                   04  add	sp,*4
16886                                           !BCC_EOS
16887                                           ! 2027  outb(0x3c4,0);
16888                                           ! Debug: list int = const 0 (used reg = )
16889 3E0C           31C0                       xor	ax,ax
16890 3E0E           50                         push	ax
16891                                           ! Debug: list int = const $3C4 (used reg = )
16892 3E0F           B8                   03C4  mov	ax,#$3C4
16893 3E12           50                         push	ax
16894                                           ! Debug: func () void = outb+0 (used reg = )
16895 3E13           E8         3E37            call	_outb
16896 3E16           83C4                   04  add	sp,*4
16897                                           !BCC_EOS
16898                                           ! 2028  outb(0x3c5,0x03);
16899                                           ! Debug: list int = const 3 (used reg = )
16900 3E19           B8                   0003  mov	ax,*3
16901 3E1C           50                         push	ax
16902                                           ! Debug: list int = const $3C5 (used reg = )
16903 3E1D           B8                   03C5  mov	ax,#$3C5
16904 3E20           50                         push	ax
16905                                           ! Debug: func () void = outb+0 (used reg = )
16906 3E21           E8         3E29            call	_outb
16907 3E24           83C4                   04  add	sp,*4
16908                                           !BCC_EOS
16909                                           ! 2029  for(i=1;i<=4;i++)
16910                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16911 3E27           B8                   0001  mov	ax,*1
16912 3E2A           8946         F6            mov	-$A[bp],ax
16913                                           !BCC_EOS
16914                                           !BCC_EOS
16915                                           ! 2030   {outb(0x3c4,i);
16916 3E2D           EB           3F            jmp .73
16917                       00003E2F            .74:
16918                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16919 3E2F           FF76         F6            push	-$A[bp]
16920                                           ! Debug: list int = const $3C4 (used reg = )
16921 3E32           B8                   03C4  mov	ax,#$3C4
16922 3E35           50                         push	ax
16923                                           ! Debug: func () void = outb+0 (used reg = )
16924 3E36           E8         3E14            call	_outb
16925 3E39           83C4                   04  add	sp,*4
16926                                           !BCC_EOS
16927                                           ! 2031    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16928                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16929 3E3C           8B46         F6            mov	ax,-$A[bp]
16930 3E3F           48                         dec	ax
16931 3E40           50                         push	ax
16932                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16933 3E41           8A46         F9            mov	al,-7[bp]
16934 3E44           30E4                       xor	ah,ah
16935 3E46           B1                     06  mov	cl,*6
16936 3E48           D3E0                       shl	ax,cl
16937 3E4A           89C3                       mov	bx,ax
16938 3E4C           81C3                 028A  add	bx,#_video_param_table
16939                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16940 3E50           8B46         E8            mov	ax,-$18[bp]
16941 3E53           01C3                       add	bx,ax
16942 3E55           44                         inc	sp
16943 3E56           44                         inc	sp
16944                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16945 3E57           8A47         05            mov	al,5[bx]
16946 3E5A           30E4                       xor	ah,ah
16947 3E5C           50                         push	ax
16948                                           ! Debug: list int = const $3C5 (used reg = )
16949 3E5D           B8                   03C5  mov	ax,#$3C5
16950 3E60           50                         push	ax
16951                                           ! Debug: func () void = outb+0 (used reg = )
16952 3E61           E8         3DE9            call	_outb
16953 3E64           83C4                   04  add	sp,*4
16954                                           !BCC_EOS
16955                                           ! 2032   }
16956                                           ! 2033  for(i=0;i<=8;i++)
16957                       00003E67            .72:
16958                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16959 3E67           8B46         F6            mov	ax,-$A[bp]
16960 3E6A           40                         inc	ax
16961 3E6B           8946         F6            mov	-$A[bp],ax
16962                       00003E6E            .73:
16963                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16964 3E6E           8B46         F6            mov	ax,-$A[bp]
16965 3E71           3D                   0004  cmp	ax,*4
16966 3E74           76           B9            jbe	.74
16967                       00003E76            .75:
16968                       00003E76            .71:
16969                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16970 3E76           31C0                       xor	ax,ax
16971 3E78           8946         F6            mov	-$A[bp],ax
16972                                           !BCC_EOS
16973                                           !BCC_EOS
16974                                           ! 2034   {outb(0x3ce,i);
16975 3E7B           EB           38            jmp .78
16976                       00003E7D            .79:
16977                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16978 3E7D           FF76         F6            push	-$A[bp]
16979                                           ! Debug: list int = const $3CE (used reg = )
16980 3E80           B8                   03CE  mov	ax,#$3CE
16981 3E83           50                         push	ax
16982                                           ! Debug: func () void = outb+0 (used reg = )
16983 3E84           E8         3DC6            call	_outb
16984 3E87           83C4                   04  add	sp,*4
16985                                           !BCC_EOS
16986                                           ! 2035    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16987                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16988 3E8A           8A46         F9            mov	al,-7[bp]
16989 3E8D           30E4                       xor	ah,ah
16990 3E8F           B1                     06  mov	cl,*6
16991 3E91           D3E0                       shl	ax,cl
16992 3E93           89C3                       mov	bx,ax
16993 3E95           81C3                 028A  add	bx,#_video_param_table
16994                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16995 3E99           8B46         F6            mov	ax,-$A[bp]
16996 3E9C           01C3                       add	bx,ax
16997                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16998 3E9E           8A47         37            mov	al,$37[bx]
16999 3EA1           30E4                       xor	ah,ah
17000 3EA3           50                         push	ax
17001                                           ! Debug: list int = const $3CF (used reg = )
17002 3EA4           B8                   03CF  mov	ax,#$3CF
17003 3EA7           50                         push	ax
17004                                           ! Debug: func () void = outb+0 (used reg = )
17005 3EA8           E8         3DA2            call	_outb
17006 3EAB           83C4                   04  add	sp,*4
17007                                           !BCC_EOS
17008                                           ! 2036   }
17009                                           ! 2037  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17010                       00003EAE            .77:
17011                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17012 3EAE           8B46         F6            mov	ax,-$A[bp]
17013 3EB1           40                         inc	ax
17014 3EB2           8946         F6            mov	-$A[bp],ax
17015                       00003EB5            .78:
17016                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17017 3EB5           8B46         F6            mov	ax,-$A[bp]
17018 3EB8           3D                   0008  cmp	ax,*8
17019 3EBB           76           C0            jbe	.79
17020                       00003EBD            .7A:
17021                       00003EBD            .76:
17022                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17023 3EBD           8A46         FE            mov	al,-2[bp]
17024 3EC0           30E4                       xor	ah,ah
17025 3EC2           B1                     03  mov	cl,*3
17026 3EC4           D3E0                       shl	ax,cl
17027 3EC6           89C3                       mov	bx,ax
17028 3EC8           81C3                 01F6  add	bx,#_vga_modes
17029                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17030 3ECC           8A47         02            mov	al,2[bx]
17031 3ECF           3C                     01  cmp	al,*1
17032 3ED1           75           05            jne 	.7B
17033                       00003ED3            .7C:
17034 3ED3           B8                   03B4  mov	ax,#$3B4
17035 3ED6           EB           03            jmp .7D
17036                       00003ED8            .7B:
17037 3ED8           B8                   03D4  mov	ax,#$3D4
17038                       00003EDB            .7D:
17039                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17040 3EDB           8946         EA            mov	-$16[bp],ax
17041                                           !BCC_EOS
17042                                           ! 2038  outw(crtc_addr,0x0011);
17043                                           ! Debug: list int = const $11 (used reg = )
17044 3EDE           B8                   0011  mov	ax,*$11
17045 3EE1           50                         push	ax
17046                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17047 3EE2           FF76         EA            push	-$16[bp]
17048                                           ! Debug: func () void = outw+0 (used reg = )
17049 3EE5           E8         3D75            call	_outw
17050 3EE8           83C4                   04  add	sp,*4
17051                                           !BCC_EOS
17052                                           ! 2039  for(i=0;i<=0x18;i++)
17053                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17054 3EEB           31C0                       xor	ax,ax
17055 3EED           8946         F6            mov	-$A[bp],ax
17056                                           !BCC_EOS
17057                                           !BCC_EOS
17058                                           ! 2040   {outb(crtc_addr,i);
17059 3EF0           EB           38            jmp .80
17060                       00003EF2            .81:
17061                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17062 3EF2           FF76         F6            push	-$A[bp]
17063                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17064 3EF5           FF76         EA            push	-$16[bp]
17065                                           ! Debug: func () void = outb+0 (used reg = )
17066 3EF8           E8         3D52            call	_outb
17067 3EFB           83C4                   04  add	sp,*4
17068                                           !BCC_EOS
17069                                           ! 2041    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17070                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17071 3EFE           8A46         F9            mov	al,-7[bp]
17072 3F01           30E4                       xor	ah,ah
17073 3F03           B1                     06  mov	cl,*6
17074 3F05           D3E0                       shl	ax,cl
17075 3F07           89C3                       mov	bx,ax
17076 3F09           81C3                 028A  add	bx,#_video_param_table
17077                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17078 3F0D           8B46         F6            mov	ax,-$A[bp]
17079 3F10           01C3                       add	bx,ax
17080                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17081 3F12           8A47         0A            mov	al,$A[bx]
17082 3F15           30E4                       xor	ah,ah
17083 3F17           50                         push	ax
17084                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17085 3F18           8B46         EA            mov	ax,-$16[bp]
17086                                           ! Debug: list unsigned int = ax+1 (used reg = )
17087 3F1B           40                         inc	ax
17088 3F1C           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3F1D           E8         3D2D            call	_outb
17091 3F20           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2042   }
17094                                           ! 2043  outb(0x3c2,video_param_table[vpti].miscreg);
17095                       00003F23            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3F23           8B46         F6            mov	ax,-$A[bp]
17098 3F26           40                         inc	ax
17099 3F27           8946         F6            mov	-$A[bp],ax
17100                       00003F2A            .80:
17101                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17102 3F2A           8B46         F6            mov	ax,-$A[bp]
17103 3F2D           3D                   0018  cmp	ax,*$18
17104 3F30           76           C0            jbe	.81
17105                       00003F32            .82:
17106                       00003F32            .7E:
17107                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17108 3F32           8A46         F9            mov	al,-7[bp]
17109 3F35           30E4                       xor	ah,ah
17110 3F37           B1                     06  mov	cl,*6
17111 3F39           D3E0                       shl	ax,cl
17112 3F3B           89C3                       mov	bx,ax
17113 3F3D           81C3                 028A  add	bx,#_video_param_table
17114                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17115 3F41           8A47         09            mov	al,9[bx]
17116 3F44           30E4                       xor	ah,ah
17117 3F46           50                         push	ax
17118                                           ! Debug: list int = const $3C2 (used reg = )
17119 3F47           B8                   03C2  mov	ax,#$3C2
17120 3F4A           50                         push	ax
17121                                           ! Debug: func () void = outb+0 (used reg = )
17122 3F4B           E8         3CFF            call	_outb
17123 3F4E           83C4                   04  add	sp,*4
17124                                           !BCC_EOS
17125                                           ! 2044  outb(0x3c0,0x20);
17126                                           ! Debug: list int = const $20 (used reg = )
17127 3F51           B8                   0020  mov	ax,*$20
17128 3F54           50                         push	ax
17129                                           ! Debug: list int = const $3C0 (used reg = )
17130 3F55           B8                   03C0  mov	ax,#$3C0
17131 3F58           50                         push	ax
17132                                           ! Debug: func () void = outb+0 (used reg = )
17133 3F59           E8         3CF1            call	_outb
17134 3F5C           83C4                   04  add	sp,*4
17135                                           !BCC_EOS
17136                                           ! 2045  inb(0x3da);
17137                                           ! Debug: list int = const $3DA (used reg = )
17138 3F5F           B8                   03DA  mov	ax,#$3DA
17139 3F62           50                         push	ax
17140                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17141 3F63           E8         3CD1            call	_inb
17142 3F66           44                         inc	sp
17143 3F67           44                         inc	sp
17144                                           !BCC_EOS
17145                                           ! 2046  if(noclearmem==0x00)
17146                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17147 3F68           8A46         FF            mov	al,-1[bp]
17148 3F6B           84C0                       test	al,al
17149 3F6D         0F85         00C1            bne 	.83
17150                       00003F71            .84:
17151                                           ! 2047   {
17152                                           ! 2048    if(vga_modes[line].class==0x00)
17153                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17154 3F71           8A46         FE            mov	al,-2[bp]
17155 3F74           30E4                       xor	ah,ah
17156 3F76           B1                     03  mov	cl,*3
17157 3F78           D3E0                       shl	ax,cl
17158 3F7A           89C3                       mov	bx,ax
17159 3F7C           81C3                 01F6  add	bx,#_vga_modes
17160                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17161 3F80           8A47         01            mov	al,1[bx]
17162 3F83           84C0                       test	al,al
17163 3F85           75           26            jne 	.85
17164                       00003F87            .86:
17165                                           ! 2049     {
17166                                           ! 2050      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17167                                           ! Debug: list int = const $4000 (used reg = )
17168 3F87           B8                   4000  mov	ax,#$4000
17169 3F8A           50                         push	ax
17170                                           ! Debug: list int = const $720 (used reg = )
17171 3F8B           B8                   0720  mov	ax,#$720
17172 3F8E           50                         push	ax
17173                                           ! Debug: list int = const 0 (used reg = )
17174 3F8F           31C0                       xor	ax,ax
17175 3F91           50                         push	ax
17176                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17177 3F92           8A46         FE            mov	al,-2[bp]
17178 3F95           30E4                       xor	ah,ah
17179 3F97           B1                     03  mov	cl,*3
17180 3F99           D3E0                       shl	ax,cl
17181 3F9B           89C3                       mov	bx,ax
17182 3F9D           81C3                 01F6  add	bx,#_vga_modes
17183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17184 3FA1           FF77         04            push	4[bx]
17185                                           ! Debug: func () void = memsetw+0 (used reg = )
17186 3FA4           E8         3BB5            call	_memsetw
17187 3FA7           83C4                   08  add	sp,*8
17188                                           !BCC_EOS
17189                                           ! 2051     }
17190                                           ! 2052    else
17191                                           ! 2053     {
17192 3FAA           E9         0085            br 	.87
17193                       00003FAD            .85:
17194                                           ! 2054      if(mode<0x0d)
17195                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17196 3FAD           8A46         04            mov	al,4[bp]
17197 3FB0           3C                     0D  cmp	al,*$D
17198 3FB2           73           24            jae 	.88
17199                       00003FB4            .89:
17200                                           ! 2055       {
17201                                           ! 2056        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17202                                           ! Debug: list int = const $4000 (used reg = )
17203 3FB4           B8                   4000  mov	ax,#$4000
17204 3FB7           50                         push	ax
17205                                           ! Debug: list int = const 0 (used reg = )
17206 3FB8           31C0                       xor	ax,ax
17207 3FBA           50                         push	ax
17208                                           ! Debug: list int = const 0 (used reg = )
17209 3FBB           31C0                       xor	ax,ax
17210 3FBD           50                         push	ax
17211                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17212 3FBE           8A46         FE            mov	al,-2[bp]
17213 3FC1           30E4                       xor	ah,ah
17214 3FC3           B1                     03  mov	cl,*3
17215 3FC5           D3E0                       shl	ax,cl
17216 3FC7           89C3                       mov	bx,ax
17217 3FC9           81C3                 01F6  add	bx,#_vga_modes
17218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17219 3FCD           FF77         04            push	4[bx]
17220                                           ! Debug: func () void = memsetw+0 (used reg = )
17221 3FD0           E8         3B89            call	_memsetw
17222 3FD3           83C4                   08  add	sp,*8
17223                                           !BCC_EOS
17224                                           ! 2057       }
17225                                           ! 2058      else
17226                                           ! 2059       {
17227 3FD6           EB           5A            jmp .8A
17228                       00003FD8            .88:
17229                                           ! 2060        outb( 0x3c4, 0x02 );
17230                                           ! Debug: list int = const 2 (used reg = )
17231 3FD8           B8                   0002  mov	ax,*2
17232 3FDB           50                         push	ax
17233                                           ! Debug: list int = const $3C4 (used reg = )
17234 3FDC           B8                   03C4  mov	ax,#$3C4
17235 3FDF           50                         push	ax
17236                                           ! Debug: func () void = outb+0 (used reg = )
17237 3FE0           E8         3C6A            call	_outb
17238 3FE3           83C4                   04  add	sp,*4
17239                                           !BCC_EOS
17240                                           ! 2061        mmask = inb( 0x3c5 );
17241                                           ! Debug: list int = const $3C5 (used reg = )
17242 3FE6           B8                   03C5  mov	ax,#$3C5
17243 3FE9           50                         push	ax
17244                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17245 3FEA           E8         3C4A            call	_inb
17246 3FED           44                         inc	sp
17247 3FEE           44                         inc	sp
17248                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17249 3FEF           8846         FD            mov	-3[bp],al
17250                                           !BCC_EOS
17251                                           ! 2062        outb( 0x3c5, 0x0f );
17252                                           ! Debug: list int = const $F (used reg = )
17253 3FF2           B8                   000F  mov	ax,*$F
17254 3FF5           50                         push	ax
17255                                           ! Debug: list int = const $3C5 (used reg = )
17256 3FF6           B8                   03C5  mov	ax,#$3C5
17257 3FF9           50                         push	ax
17258                                           ! Debug: func () void = outb+0 (used reg = )
17259 3FFA           E8         3C50            call	_outb
17260 3FFD           83C4                   04  add	sp,*4
17261                                           !BCC_EOS
17262                                           ! 2063        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17263                                           ! Debug: list unsigned int = const $8000 (used reg = )
17264 4000           B8                   8000  mov	ax,#$8000
17265 4003           50                         push	ax
17266                                           ! Debug: list int = const 0 (used reg = )
17267 4004           31C0                       xor	ax,ax
17268 4006           50                         push	ax
17269                                           ! Debug: list int = const 0 (used reg = )
17270 4007           31C0                       xor	ax,ax
17271 4009           50                         push	ax
17272                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17273 400A           8A46         FE            mov	al,-2[bp]
17274 400D           30E4                       xor	ah,ah
17275 400F           B1                     03  mov	cl,*3
17276 4011           D3E0                       shl	ax,cl
17277 4013           89C3                       mov	bx,ax
17278 4015           81C3                 01F6  add	bx,#_vga_modes
17279                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17280 4019           FF77         04            push	4[bx]
17281                                           ! Debug: func () void = memsetw+0 (used reg = )
17282 401C           E8         3B3D            call	_memsetw
17283 401F           83C4                   08  add	sp,*8
17284                                           !BCC_EOS
17285                                           ! 2064        outb( 0x3c5, mmask );
17286                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17287 4022           8A46         FD            mov	al,-3[bp]
17288 4025           30E4                       xor	ah,ah
17289 4027           50                         push	ax
17290                                           ! Debug: list int = const $3C5 (used reg = )
17291 4028           B8                   03C5  mov	ax,#$3C5
17292 402B           50                         push	ax
17293                                           ! Debug: func () void = outb+0 (used reg = )
17294 402C           E8         3C1E            call	_outb
17295 402F           83C4                   04  add	sp,*4
17296                                           !BCC_EOS
17297                                           ! 2065       }
17298                                           ! 2066     }
17299                       00004032            .8A:
17300                                           ! 2067   }
17301                       00004032            .87:
17302                                           ! 2068  write_byte(0x40,0x49,mode);
17303                       00004032            .83:
17304                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17305 4032           8A46         04            mov	al,4[bp]
17306 4035           30E4                       xor	ah,ah
17307 4037           50                         push	ax
17308                                           ! Debug: list int = const $49 (used reg = )
17309 4038           B8                   0049  mov	ax,*$49
17310 403B           50                         push	ax
17311                                           ! Debug: list int = const $40 (used reg = )
17312 403C           B8                   0040  mov	ax,*$40
17313 403F           50                         push	ax
17314                                           ! Debug: func () void = write_byte+0 (used reg = )
17315 4040           E8         3BC4            call	_write_byte
17316 4043           83C4                   06  add	sp,*6
17317                                           !BCC_EOS
17318                                           ! 2069  write_word(0x40,0x4A,twidth);
17319                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17320 4046           FF76         F4            push	-$C[bp]
17321                                           ! Debug: list int = const $4A (used reg = )
17322 4049           B8                   004A  mov	ax,*$4A
17323 404C           50                         push	ax
17324                                           ! Debug: list int = const $40 (used reg = )
17325 404D           B8                   0040  mov	ax,*$40
17326 4050           50                         push	ax
17327                                           ! Debug: func () void = write_word+0 (used reg = )
17328 4051           E8         3BCB            call	_write_word
17329 4054           83C4                   06  add	sp,*6
17330                                           !BCC_EOS
17331                                           ! 2070  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17332                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17333 4057           8A46         F9            mov	al,-7[bp]
17334 405A           30E4                       xor	ah,ah
17335 405C           B1                     06  mov	cl,*6
17336 405E           D3E0                       shl	ax,cl
17337 4060           89C3                       mov	bx,ax
17338 4062           81C3                 028A  add	bx,#_video_param_table
17339                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17340                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17341                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17342 4066           FF77         03            push	3[bx]
17343                                           ! Debug: list int = const $4C (used reg = )
17344 4069           B8                   004C  mov	ax,*$4C
17345 406C           50                         push	ax
17346                                           ! Debug: list int = const $40 (used reg = )
17347 406D           B8                   0040  mov	ax,*$40
17348 4070           50                         push	ax
17349                                           ! Debug: func () void = write_word+0 (used reg = )
17350 4071           E8         3BAB            call	_write_word
17351 4074           83C4                   06  add	sp,*6
17352                                           !BCC_EOS
17353                                           ! 2071  write_wor
17354                                           ! 2071 d(0x40,0x63,crtc_addr);
17355                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17356 4077           FF76         EA            push	-$16[bp]
17357                                           ! Debug: list int = const $63 (used reg = )
17358 407A           B8                   0063  mov	ax,*$63
17359 407D           50                         push	ax
17360                                           ! Debug: list int = const $40 (used reg = )
17361 407E           B8                   0040  mov	ax,*$40
17362 4081           50                         push	ax
17363                                           ! Debug: func () void = write_word+0 (used reg = )
17364 4082           E8         3B9A            call	_write_word
17365 4085           83C4                   06  add	sp,*6
17366                                           !BCC_EOS
17367                                           ! 2072  write_byte(0x40,0x84,theightm1);
17368                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17369 4088           FF76         F2            push	-$E[bp]
17370                                           ! Debug: list int = const $84 (used reg = )
17371 408B           B8                   0084  mov	ax,#$84
17372 408E           50                         push	ax
17373                                           ! Debug: list int = const $40 (used reg = )
17374 408F           B8                   0040  mov	ax,*$40
17375 4092           50                         push	ax
17376                                           ! Debug: func () void = write_byte+0 (used reg = )
17377 4093           E8         3B71            call	_write_byte
17378 4096           83C4                   06  add	sp,*6
17379                                           !BCC_EOS
17380                                           ! 2073  write_word(0x40,0x85,cheight);
17381                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17382 4099           FF76         F0            push	-$10[bp]
17383                                           ! Debug: list int = const $85 (used reg = )
17384 409C           B8                   0085  mov	ax,#$85
17385 409F           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 40A0           B8                   0040  mov	ax,*$40
17388 40A3           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 40A4           E8         3B78            call	_write_word
17391 40A7           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 2074  write_byte(0x40,0x87,(0x60|noclearmem));
17394                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17395                                           ! Debug: expression subtree swapping
17396 40AA           8A46         FF            mov	al,-1[bp]
17397 40AD           0C                     60  or	al,*$60
17398                                           ! Debug: list unsigned char = al+0 (used reg = )
17399 40AF           30E4                       xor	ah,ah
17400 40B1           50                         push	ax
17401                                           ! Debug: list int = const $87 (used reg = )
17402 40B2           B8                   0087  mov	ax,#$87
17403 40B5           50                         push	ax
17404                                           ! Debug: list int = const $40 (used reg = )
17405 40B6           B8                   0040  mov	ax,*$40
17406 40B9           50                         push	ax
17407                                           ! Debug: func () void = write_byte+0 (used reg = )
17408 40BA           E8         3B4A            call	_write_byte
17409 40BD           83C4                   06  add	sp,*6
17410                                           !BCC_EOS
17411                                           ! 2075  write_byte(0x40,0x88,0xF9);
17412                                           ! Debug: list int = const $F9 (used reg = )
17413 40C0           B8                   00F9  mov	ax,#$F9
17414 40C3           50                         push	ax
17415                                           ! Debug: list int = const $88 (used reg = )
17416 40C4           B8                   0088  mov	ax,#$88
17417 40C7           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 40C8           B8                   0040  mov	ax,*$40
17420 40CB           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 40CC           E8         3B38            call	_write_byte
17423 40CF           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2076  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17426                                           ! Debug: list int = const $89 (used reg = )
17427 40D2           B8                   0089  mov	ax,#$89
17428 40D5           50                         push	ax
17429                                           ! Debug: list int = const $40 (used reg = )
17430 40D6           B8                   0040  mov	ax,*$40
17431 40D9           50                         push	ax
17432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17433 40DA           E8         3B04            call	_read_byte
17434 40DD           83C4                   04  add	sp,*4
17435                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17436 40E0           24                     7F  and	al,*$7F
17437                                           ! Debug: list unsigned char = al+0 (used reg = )
17438 40E2           30E4                       xor	ah,ah
17439 40E4           50                         push	ax
17440                                           ! Debug: list int = const $89 (used reg = )
17441 40E5           B8                   0089  mov	ax,#$89
17442 40E8           50                         push	ax
17443                                           ! Debug: list int = const $40 (used reg = )
17444 40E9           B8                   0040  mov	ax,*$40
17445 40EC           50                         push	ax
17446                                           ! Debug: func () void = write_byte+0 (used reg = )
17447 40ED           E8         3B17            call	_write_byte
17448 40F0           83C4                   06  add	sp,*6
17449                                           !BCC_EOS
17450                                           ! 2077  write_byte(0x40,0x8A,0x08);
17451                                           ! Debug: list int = const 8 (used reg = )
17452 40F3           B8                   0008  mov	ax,*8
17453 40F6           50                         push	ax
17454                                           ! Debug: list int = const $8A (used reg = )
17455 40F7           B8                   008A  mov	ax,#$8A
17456 40FA           50                         push	ax
17457                                           ! Debug: list int = const $40 (used reg = )
17458 40FB           B8                   0040  mov	ax,*$40
17459 40FE           50                         push	ax
17460                                           ! Debug: func () void = write_byte+0 (used reg = )
17461 40FF           E8         3B05            call	_write_byte
17462 4102           83C4                   06  add	sp,*6
17463                                           !BCC_EOS
17464                                           ! 2078  write_word(0x40,0xA8, video_save_pointer_table);
17465                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17466 4105           BB                   35F3  mov	bx,#_video_save_pointer_table
17467 4108           53                         push	bx
17468                                           ! Debug: list int = const $A8 (used reg = )
17469 4109           B8                   00A8  mov	ax,#$A8
17470 410C           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 410D           B8                   0040  mov	ax,*$40
17473 4110           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 4111           E8         3B0B            call	_write_word
17476 4114           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2079  write_word(0x40,0xA8 +2, 0xc000);
17479                                           ! Debug: list unsigned int = const $C000 (used reg = )
17480 4117           B8                   C000  mov	ax,#$C000
17481 411A           50                         push	ax
17482                                           ! Debug: list int = const $AA (used reg = )
17483 411B           B8                   00AA  mov	ax,#$AA
17484 411E           50                         push	ax
17485                                           ! Debug: list int = const $40 (used reg = )
17486 411F           B8                   0040  mov	ax,*$40
17487 4122           50                         push	ax
17488                                           ! Debug: func () void = write_word+0 (used reg = )
17489 4123           E8         3AF9            call	_write_word
17490 4126           83C4                   06  add	sp,*6
17491                                           !BCC_EOS
17492                                           ! 2080  write_byte(0x40,0x65,0x00);
17493                                           ! Debug: list int = const 0 (used reg = )
17494 4129           31C0                       xor	ax,ax
17495 412B           50                         push	ax
17496                                           ! Debug: list int = const $65 (used reg = )
17497 412C           B8                   0065  mov	ax,*$65
17498 412F           50                         push	ax
17499                                           ! Debug: list int = const $40 (used reg = )
17500 4130           B8                   0040  mov	ax,*$40
17501 4133           50                         push	ax
17502                                           ! Debug: func () void = write_byte+0 (used reg = )
17503 4134           E8         3AD0            call	_write_byte
17504 4137           83C4                   06  add	sp,*6
17505                                           !BCC_EOS
17506                                           ! 2081  write_byte(0x40,0x66,0x00);
17507                                           ! Debug: list int = const 0 (used reg = )
17508 413A           31C0                       xor	ax,ax
17509 413C           50                         push	ax
17510                                           ! Debug: list int = const $66 (used reg = )
17511 413D           B8                   0066  mov	ax,*$66
17512 4140           50                         push	ax
17513                                           ! Debug: list int = const $40 (used reg = )
17514 4141           B8                   0040  mov	ax,*$40
17515 4144           50                         push	ax
17516                                           ! Debug: func () void = write_byte+0 (used reg = )
17517 4145           E8         3ABF            call	_write_byte
17518 4148           83C4                   06  add	sp,*6
17519                                           !BCC_EOS
17520                                           ! 2082  if(vga_modes[line].class==0x00)
17521                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17522 414B           8A46         FE            mov	al,-2[bp]
17523 414E           30E4                       xor	ah,ah
17524 4150           B1                     03  mov	cl,*3
17525 4152           D3E0                       shl	ax,cl
17526 4154           89C3                       mov	bx,ax
17527 4156           81C3                 01F6  add	bx,#_vga_modes
17528                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17529 415A           8A47         01            mov	al,1[bx]
17530 415D           84C0                       test	al,al
17531 415F           75           0E            jne 	.8B
17532                       00004161            .8C:
17533                                           ! 2083   {
17534                                           ! 2084    biosfn_set_cursor_shape(0x06,0x07);
17535                                           ! Debug: list int = const 7 (used reg = )
17536 4161           B8                   0007  mov	ax,*7
17537 4164           50                         push	ax
17538                                           ! Debug: list int = const 6 (used reg = )
17539 4165           B8                   0006  mov	ax,*6
17540 4168           50                         push	ax
17541                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17542 4169           E8         00BB            call	_biosfn_set_cursor_shape
17543 416C           83C4                   04  add	sp,*4
17544                                           !BCC_EOS
17545                                           ! 2085   }
17546                                           ! 2086  for(i=0;i<8;i++)
17547                       0000416F            .8B:
17548                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17549 416F           31C0                       xor	ax,ax
17550 4171           8946         F6            mov	-$A[bp],ax
17551                                           !BCC_EOS
17552                                           !BCC_EOS
17553                                           ! 2087   biosfn_set_cursor_pos(i,0x0000);
17554 4174           EB           13            jmp .8F
17555                       00004176            .90:
17556                                           ! Debug: list int = const 0 (used reg = )
17557 4176           31C0                       xor	ax,ax
17558 4178           50                         push	ax
17559                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17560 4179           FF76         F6            push	-$A[bp]
17561                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17562 417C           E8         01C3            call	_biosfn_set_cursor_pos
17563 417F           83C4                   04  add	sp,*4
17564                                           !BCC_EOS
17565                                           ! 2088  biosfn_set_active_page(0x00);
17566                       00004182            .8E:
17567                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17568 4182           8B46         F6            mov	ax,-$A[bp]
17569 4185           40                         inc	ax
17570 4186           8946         F6            mov	-$A[bp],ax
17571                       00004189            .8F:
17572                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17573 4189           8B46         F6            mov	ax,-$A[bp]
17574 418C           3D                   0008  cmp	ax,*8
17575 418F           72           E5            jb 	.90
17576                       00004191            .91:
17577                       00004191            .8D:
17578                                           ! Debug: list int = const 0 (used reg = )
17579 4191           31C0                       xor	ax,ax
17580 4193           50                         push	ax
17581                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17582 4194           E8         0320            call	_biosfn_set_active_page
17583 4197           44                         inc	sp
17584 4198           44                         inc	sp
17585                                           !BCC_EOS
17586                                           ! 2089  if(vga_modes[line].class==0x00)
17587                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17588 4199           8A46         FE            mov	al,-2[bp]
17589 419C           30E4                       xor	ah,ah
17590 419E           B1                     03  mov	cl,*3
17591 41A0           D3E0                       shl	ax,cl
17592 41A2           89C3                       mov	bx,ax
17593 41A4           81C3                 01F6  add	bx,#_vga_modes
17594                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17595 41A8           8A47         01            mov	al,1[bx]
17596 41AB           84C0                       test	al,al
17597 41AD           75           0E            jne 	.92
17598                       000041AF            .93:
17599                                           ! 2090   {
17600                                           ! 2091 #asm
17601                                           !BCC_EOS
17602                                           !BCC_ASM
17603                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17604                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17605                       00000008            _biosfn_set_video_mode.theightm1	set	8
17606                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17607                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17608                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17609                       00000014            _biosfn_set_video_mode.line	set	$14
17610                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17611                       00000006            _biosfn_set_video_mode.cheight	set	6
17612                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17613                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17614                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17615                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17616                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17617                       0000000C            _biosfn_set_video_mode.i	set	$C
17618                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17619                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17620                       00000004            .biosfn_set_video_mode.mode	set	4
17621                       00000010            _biosfn_set_video_mode.palette	set	$10
17622                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17623                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17624                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17625                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17626                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17627                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17628                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17629                       00000013            _biosfn_set_video_mode.mmask	set	$13
17630                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17631                                             ;; copy and activate 8x16 font
17632 41AF           B8                   1104    mov ax, #0x1104
17633 41B2           B3                     00    mov bl, #0x00
17634 41B4           CD                     10    int #0x10
17635 41B6           B8                   1103    mov ax, #0x1103
17636 41B9           B3                     00    mov bl, #0x00
17637 41BB           CD                     10    int #0x10
17638                                           ! 2099 endasm
17639                                           !BCC_ENDASM
17640                                           !BCC_EOS
17641                                           ! 2100   }
17642                                           ! 2101 #asm
17643                       000041BD            .92:
17644                                           !BCC_EOS
17645                                           !BCC_ASM
17646                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17647                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17648                       00000008            _biosfn_set_video_mode.theightm1	set	8
17649                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17650                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17651                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17652                       00000014            _biosfn_set_video_mode.line	set	$14
17653                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17654                       00000006            _biosfn_set_video_mode.cheight	set	6
17655                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17656                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17657                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17658                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17659                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17660                       0000000C            _biosfn_set_video_mode.i	set	$C
17661                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17662                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17663                       00000004            .biosfn_set_video_mode.mode	set	4
17664                       00000010            _biosfn_set_video_mode.palette	set	$10
17665                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17666                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17667                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17668                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17669                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17670                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17671                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17672                       00000013            _biosfn_set_video_mode.mmask	set	$13
17673                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17674                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   41BD           1E                           push ds
 +a   41BE           31C0                         xor ax, ax
 +a   41C0           8ED8                         mov ds, ax
 +a   41C2           B8                   135A    mov ax,  #_vgafont8+128*8
 +a   41C5           A3         007C              mov 0x1f*4, ax
 +a   41C8           B8                   C000    mov ax,  #0xC000
 +a   41CB           A3         007E              mov 0x1f*4+2, ax
 +a   41CE           1F                           pop ds
17675                                           ! 2103 endasm
17676                                           !BCC_ENDASM
17677                                           !BCC_EOS
17678                                           ! 2104   switch(cheight)
17679 41CF           8B46         F0            mov	ax,-$10[bp]
17680                                           ! 2105    {case 8:
17681 41D2           E9         003F            br 	.96
17682                                           ! 2106 #asm
17683                       000041D5            .97:
17684                                           !BCC_EOS
17685                                           !BCC_ASM
17686                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17687                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17688                       00000008            _biosfn_set_video_mode.theightm1	set	8
17689                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17690                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17691                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17692                       00000014            _biosfn_set_video_mode.line	set	$14
17693                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17694                       00000006            _biosfn_set_video_mode.cheight	set	6
17695                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17696                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17697                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17698                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17699                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17700                       0000000C            _biosfn_set_video_mode.i	set	$C
17701                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17702                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17703                       00000004            .biosfn_set_video_mode.mode	set	4
17704                       00000010            _biosfn_set_video_mode.palette	set	$10
17705                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17706                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17707                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17708                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17709                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17710                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17711                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17712                       00000013            _biosfn_set_video_mode.mmask	set	$13
17713                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17714                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41D5           1E                           push ds
 +a   41D6           31C0                         xor ax, ax
 +a   41D8           8ED8                         mov ds, ax
 +a   41DA           B8                   0F5A    mov ax,  #_vgafont8
 +a   41DD           A3         010C              mov 0x43*4, ax
 +a   41E0           B8                   C000    mov ax,  #0xC000
 +a   41E3           A3         010E              mov 0x43*4+2, ax
 +a   41E6           1F                           pop ds
17715                                           ! 2108 endasm
17716                                           !BCC_ENDASM
17717                                           !BCC_EOS
17718                                           ! 2109      break;
17719 41E7           E9         0039            br 	.94
17720                                           !BCC_EOS
17721                                           ! 2110     case 14:
17722                                           ! 2111 #asm
17723                       000041EA            .98:
17724                                           !BCC_EOS
17725                                           !BCC_ASM
17726                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17727                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17728                       00000008            _biosfn_set_video_mode.theightm1	set	8
17729                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17730                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17731                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17732                       00000014            _biosfn_set_video_mode.line	set	$14
17733                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17734                       00000006            _biosfn_set_video_mode.cheight	set	6
17735                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17736                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17737                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17738                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17739                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17740                       0000000C            _biosfn_set_video_mode.i	set	$C
17741                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17742                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17743                       00000004            .biosfn_set_video_mode.mode	set	4
17744                       00000010            _biosfn_set_video_mode.palette	set	$10
17745                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17746                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17747                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17748                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17749                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17750                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17751                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17752                       00000013            _biosfn_set_video_mode.mmask	set	$13
17753                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17754                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41EA           1E                           push ds
 +a   41EB           31C0                         xor ax, ax
 +a   41ED           8ED8                         mov ds, ax
 +a   41EF           B8                   175A    mov ax,  #_vgafont14
 +a   41F2           A3         010C              mov 0x43*4, ax
 +a   41F5           B8                   C000    mov ax,  #0xC000
 +a   41F8           A3         010E              mov 0x43*4+2, ax
 +a   41FB           1F                           pop ds
17755                                           ! 2113 endasm
17756                                           !BCC_ENDASM
17757                                           !BCC_EOS
17758                                           ! 2114      break;
17759 41FC           EB           25            jmp .94
17760                                           !BCC_EOS
17761                                           ! 2115     case 16:
17762                                           ! 2116 #asm
17763                       000041FE            .99:
17764                                           !BCC_EOS
17765                                           !BCC_ASM
17766                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17767                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17768                       00000008            _biosfn_set_video_mode.theightm1	set	8
17769                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17770                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17771                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17772                       00000014            _biosfn_set_video_mode.line	set	$14
17773                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17774                       00000006            _biosfn_set_video_mode.cheight	set	6
17775                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17776                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17777                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17778                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17779                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17780                       0000000C            _biosfn_set_video_mode.i	set	$C
17781                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17782                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17783                       00000004            .biosfn_set_video_mode.mode	set	4
17784                       00000010            _biosfn_set_video_mode.palette	set	$10
17785                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17786                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17787                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17788                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17789                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17790                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17791                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17792                       00000013            _biosfn_set_video_mode.mmask	set	$13
17793                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17794                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   41FE           1E                           push ds
 +a   41FF           31C0                         xor ax, ax
 +a   4201           8ED8                         mov ds, ax
 +a   4203           B8                   255A    mov ax,  #_vgafont16
 +a   4206           A3         010C              mov 0x43*4, ax
 +a   4209           B8                   C000    mov ax,  #0xC000
 +a   420C           A3         010E              mov 0x43*4+2, ax
 +a   420F           1F                           pop ds
17795                                           ! 2118 endasm
17796                                           !BCC_ENDASM
17797                                           !BCC_EOS
17798                                           ! 2119      break;
17799 4210           EB           11            jmp .94
17800                                           !BCC_EOS
17801                                           ! 2120    }
17802                                           ! 2121 }
17803 4212           EB           0F            jmp .94
17804                       00004214            .96:
17805 4214           2D                   0008  sub	ax,*8
17806 4217           74           BC            je 	.97
17807 4219           2D                   0006  sub	ax,*6
17808 421C           74           CC            je 	.98
17809 421E           2D                   0002  sub	ax,*2
17810 4221           74           DB            je 	.99
17811                       00004223            .94:
17812                       FFFFFFE8            ..FFFD	=	-$18
17813 4223           89EC                       mov	sp,bp
17814 4225           5D                         pop	bp
17815 4226           C3                         ret
17816                                           ! 2122 static void biosfn_set_cursor_shape (CH,CL)
17817                                           ! Register BX used in function biosfn_set_video_mode
17818                                           ! 2123 Bit8u CH;Bit8u CL;
17819                       00004227            _biosfn_set_cursor_shape:
17820                                           !BCC_EOS
17821                                           !BCC_EOS
17822                                           ! 2124 {Bit16u cheight,curs,crtc_addr;
17823                                           !BCC_EOS
17824                                           ! 2125  Bit8u modeset_ctl;
17825                                           !BCC_EOS
17826                                           ! 2126  CH&=0x3f;
17827 4227           55                         push	bp
17828 4228           89E5                       mov	bp,sp
17829 422A           83C4                   F8  add	sp,*-8
17830                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17831 422D           8A46         04            mov	al,4[bp]
17832 4230           24                     3F  and	al,*$3F
17833 4232           8846         04            mov	4[bp],al
17834                                           !BCC_EOS
17835                                           ! 2127  CL&=0x1f;
17836                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17837 4235           8A46         06            mov	al,6[bp]
17838 4238           24                     1F  and	al,*$1F
17839 423A           8846         06            mov	6[bp],al
17840                                           !BCC_EOS
17841                                           ! 2128  curs=(CH<<8)+CL;
17842                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17843 423D           8A46         04            mov	al,4[bp]
17844 4240           30E4                       xor	ah,ah
17845 4242           88C4                       mov	ah,al
17846 4244           30C0                       xor	al,al
17847                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17848 4246           0246         06            add	al,6[bp]
17849 4249           80D4                   00  adc	ah,*0
17850                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17851 424C           8946         FC            mov	-4[bp],ax
17852                                           !BCC_EOS
17853                                           ! 2129  write_word(0x40,0x60,curs);
17854                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17855 424F           FF76         FC            push	-4[bp]
17856                                           ! Debug: list int = const $60 (used reg = )
17857 4252           B8                   0060  mov	ax,*$60
17858 4255           50                         push	ax
17859                                           ! Debug: list int = const $40 (used reg = )
17860 4256           B8                   0040  mov	ax,*$40
17861 4259           50                         push	ax
17862                                           ! Debug: func () void = write_word+0 (used reg = )
17863 425A           E8         39C2            call	_write_word
17864 425D           83C4                   06  add	sp,*6
17865                                           !BCC_EOS
17866                                           ! 2130  modeset_ctl=read_byte(0x40,0x89);
17867                                           ! Debug: list int = const $89 (used reg = )
17868 4260           B8                   0089  mov	ax,#$89
17869 4263           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 4264           B8                   0040  mov	ax,*$40
17872 4267           50                         push	ax
17873                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17874 4268           E8         3976            call	_read_byte
17875 426B           83C4                   04  add	sp,*4
17876                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17877 426E           8846         F9            mov	-7[bp],al
17878                                           !BCC_EOS
17879                                           ! 2131  cheight = read_word(0x40,0x85);
17880                                           ! Debug: list int = const $85 (used reg = )
17881 4271           B8                   0085  mov	ax,#$85
17882 4274           50                         push	ax
17883                                           ! Debug: list int = const $40 (used reg = )
17884 4275           B8                   0040  mov	ax,*$40
17885 4278           50                         push	ax
17886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17887 4279           E8         3978            call	_read_word
17888 427C           83C4                   04  add	sp,*4
17889                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17890 427F           8946         FE            mov	-2[bp],ax
17891                                           !BCC_EOS
17892                                           ! 2132  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17893                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17894 4282           8A46         F9            mov	al,-7[bp]
17895 4285           24                     01  and	al,*1
17896 4287           84C0                       test	al,al
17897 4289           74           66            je  	.9A
17898                       0000428B            .9E:
17899                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17900 428B           8B46         FE            mov	ax,-2[bp]
17901 428E           3D                   0008  cmp	ax,*8
17902 4291           76           5E            jbe 	.9A
17903                       00004293            .9D:
17904                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17905 4293           8A46         06            mov	al,6[bp]
17906 4296           3C                     08  cmp	al,*8
17907 4298           73           57            jae 	.9A
17908                       0000429A            .9C:
17909                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17910 429A           8A46         04            mov	al,4[bp]
17911 429D           3C                     20  cmp	al,*$20
17912 429F           73           50            jae 	.9A
17913                       000042A1            .9B:
17914                                           ! 2133   {
17915                                           ! 2134    if(CL!=(CH+1))
17916                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17917 42A1           8A46         04            mov	al,4[bp]
17918 42A4           30E4                       xor	ah,ah
17919                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17920                                           ! Debug: expression subtree swapping
17921 42A6           40                         inc	ax
17922 42A7           50                         push	ax
17923 42A8           8A46         06            mov	al,6[bp]
17924 42AB           30E4                       xor	ah,ah
17925 42AD           3B46         F6            cmp	ax,-$A[bp]
17926 42B0           8D66         F8            lea	sp,-8[bp]
17927 42B3           74           15            je  	.9F
17928                       000042B5            .A0:
17929                                           ! 2135     {
17930                                           ! 2136      CH = ((CH+1) * cheight / 8) -1;
17931                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17932 42B5           8A46         04            mov	al,4[bp]
17933 42B8           30E4                       xor	ah,ah
17934                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17935 42BA           40                         inc	ax
17936 42BB           8B4E         FE            mov	cx,-2[bp]
17937 42BE           F7E9                       imul	cx
17938                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17939 42C0           B1                     03  mov	cl,*3
17940 42C2           D3E8                       shr	ax,cl
17941                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17942                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17943 42C4           48                         dec	ax
17944 42C5           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2137     }
17947                                           ! 2138    else
17948                                           ! 2139     {
17949 42C8           EB           14            jmp .A1
17950                       000042CA            .9F:
17951                                           ! 2140      CH = ((CL+1) * cheight / 8) - 2;
17952                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17953 42CA           8A46         06            mov	al,6[bp]
17954 42CD           30E4                       xor	ah,ah
17955                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17956 42CF           40                         inc	ax
17957 42D0           8B4E         FE            mov	cx,-2[bp]
17958 42D3           F7E9                       imul	cx
17959                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17960 42D5           B1                     03  mov	cl,*3
17961 42D7           D3E8                       shr	ax,cl
17962                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17963                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17964 42D9           48                         dec	ax
17965 42DA           48                         dec	ax
17966 42DB           8846         04            mov	4[bp],al
17967                                           !BCC_EOS
17968                                           ! 2141     }
17969                                           ! 2142    CL = ((CL+1) * cheight / 8) - 1;
17970                       000042DE            .A1:
17971                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17972 42DE           8A46         06            mov	al,6[bp]
17973 42E1           30E4                       xor	ah,ah
17974                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17975 42E3           40                         inc	ax
17976 42E4           8B4E         FE            mov	cx,-2[bp]
17977 42E7           F7E9                       imul	cx
17978                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17979 42E9           B1                     03  mov	cl,*3
17980 42EB           D3E8                       shr	ax,cl
17981                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17982                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17983 42ED           48                         dec	ax
17984 42EE           8846         06            mov	6[bp],al
17985                                           !BCC_EOS
17986                                           ! 2143   }
17987                                           ! 2144  crtc_addr=read_word(0x40,0x63);
17988                       000042F1            .9A:
17989                                           ! Debug: list int = const $63 (used reg = )
17990 42F1           B8                   0063  mov	ax,*$63
17991 42F4           50                         push	ax
17992                                           ! Debug: list int = const $40 (used reg = )
17993 42F5           B8                   0040  mov	ax,*$40
17994 42F8           50                         push	ax
17995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17996 42F9           E8         38F8            call	_read_word
17997 42FC           83C4                   04  add	sp,*4
17998                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17999 42FF           8946         FA            mov	-6[bp],ax
18000                                           !BCC_EOS
18001                                           ! 2145  outb(crtc_addr,0x0a);
18002                                           ! Debug: list int = const $A (used reg = )
18003 4302           B8                   000A  mov	ax,*$A
18004 4305           50                         push	ax
18005                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18006 4306           FF76         FA            push	-6[bp]
18007                                           ! Debug: func () void = outb+0 (used reg = )
18008 4309           E8         3941            call	_outb
18009 430C           83C4                   04  add	sp,*4
18010                                           !BCC_EOS
18011                                           ! 2146  outb(crtc_addr+1,CH);
18012                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18013 430F           8A46         04            mov	al,4[bp]
18014 4312           30E4                       xor	ah,ah
18015 4314           50                         push	ax
18016                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18017 4315           8B46         FA            mov	ax,-6[bp]
18018                                           ! Debug: list unsigned int = ax+1 (used reg = )
18019 4318           40                         inc	ax
18020 4319           50                         push	ax
18021                                           ! Debug: func () void = outb+0 (used reg = )
18022 431A           E8         3930            call	_outb
18023 431D           83C4                   04  add	sp,*4
18024                                           !BCC_EOS
18025                                           ! 2147  outb(crtc_addr,0x0b);
18026                                           ! Debug: list int = const $B (used reg = )
18027 4320           B8                   000B  mov	ax,*$B
18028 4323           50                         push	ax
18029                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18030 4324           FF76         FA            push	-6[bp]
18031                                           ! Debug: func () void = outb+0 (used reg = )
18032 4327           E8         3923            call	_outb
18033 432A           83C4                   04  add	sp,*4
18034                                           !BCC_EOS
18035                                           ! 2148  outb(crtc_addr+1,CL);
18036                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18037 432D           8A46         06            mov	al,6[bp]
18038 4330           30E4                       xor	ah,ah
18039 4332           50                         push	ax
18040                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18041 4333           8B46         FA            mov	ax,-6[bp]
18042                                           ! Debug: list unsigned int = ax+1 (used reg = )
18043 4336           40                         inc	ax
18044 4337           50                         push	ax
18045                                           ! Debug: func () void = outb+0 (used reg = )
18046 4338           E8         3912            call	_outb
18047 433B           83C4                   04  add	sp,*4
18048                                           !BCC_EOS
18049                                           ! 2149 }
18050 433E           89EC                       mov	sp,bp
18051 4340           5D                         pop	bp
18052 4341           C3                         ret
18053                                           ! 2150 static void biosfn_set_cursor_pos (page, cursor)
18054                                           ! 2151 Bit8u page;Bit16u cursor;
18055                       00004342            _biosfn_set_cursor_pos:
18056                                           !BCC_EOS
18057                                           !BCC_EOS
18058                                           ! 2152 {
18059                                           ! 2153  Bit8u xcurs,ycurs,current;
18060                                           !BCC_EOS
18061                                           ! 2154  Bit16u nbcols,nbrows,address,crtc_addr;
18062                                           !BCC_EOS
18063                                           ! 2155  if(page>7)return;
18064 4342           55                         push	bp
18065 4343           89E5                       mov	bp,sp
18066 4345           83C4                   F4  add	sp,*-$C
18067                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18068 4348           8A46         04            mov	al,4[bp]
18069 434B           3C                     07  cmp	al,*7
18070 434D           76           04            jbe 	.A2
18071                       0000434F            .A3:
18072 434F           89EC                       mov	sp,bp
18073 4351           5D                         pop	bp
18074 4352           C3                         ret
18075                                           !BCC_EOS
18076                                           ! 2156  write_word(0x40, 0x50 +2*page, cursor);
18077                       00004353            .A2:
18078                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18079 4353           FF76         06            push	6[bp]
18080                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18081                                           ! Debug: expression subtree swapping
18082 4356           8A46         04            mov	al,4[bp]
18083 4359           30E4                       xor	ah,ah
18084 435B           D1E0                       shl	ax,*1
18085                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18086                                           ! Debug: expression subtree swapping
18087                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18088 435D           05                   0050  add	ax,*$50
18089 4360           50                         push	ax
18090                                           ! Debug: list int = const $40 (used reg = )
18091 4361           B8                   0040  mov	ax,*$40
18092 4364           50                         push	ax
18093                                           ! Debug: func () void = write_word+0 (used reg = )
18094 4365           E8         38B7            call	_write_word
18095 4368           83C4                   06  add	sp,*6
18096                                           !BCC_EOS
18097                                           ! 2157  current=read_byte(0x40,0x62);
18098                                           ! Debug: list int = const $62 (used reg = )
18099 436B           B8                   0062  mov	ax,*$62
18100 436E           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 436F           B8                   0040  mov	ax,*$40
18103 4372           50                         push	ax
18104                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18105 4373           E8         386B            call	_read_byte
18106 4376           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18108 4379           8846         FD            mov	-3[bp],al
18109                                           !BCC_EOS
18110                                           ! 2158  if(page==current)
18111                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18112 437C           8A46         04            mov	al,4[bp]
18113 437F           3A46         FD            cmp	al,-3[bp]
18114 4382         0F85         00B8            bne 	.A4
18115                       00004386            .A5:
18116                                           ! 2159   {
18117                                           ! 2160    nbcols=read_word(0x40,0x4A);
18118                                           ! Debug: list int = const $4A (used reg = )
18119 4386           B8                   004A  mov	ax,*$4A
18120 4389           50                         push	ax
18121                                           ! Debug: list int = const $40 (used reg = )
18122 438A           B8                   0040  mov	ax,*$40
18123 438D           50                         push	ax
18124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18125 438E           E8         3863            call	_read_word
18126 4391           83C4                   04  add	sp,*4
18127                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18128 4394           8946         FA            mov	-6[bp],ax
18129                                           !BCC_EOS
18130                                           ! 2161    nbrows=read_byte(0x40,0x84)+1;
18131                                           ! Debug: list int = const $84 (used reg = )
18132 4397           B8                   0084  mov	ax,#$84
18133 439A           50                         push	ax
18134                                           ! Debug: list int = const $40 (used reg = )
18135 439B           B8                   0040  mov	ax,*$40
18136 439E           50                         push	ax
18137                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18138 439F           E8         383F            call	_read_byte
18139 43A2           83C4                   04  add	sp,*4
18140                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18141 43A5           30E4                       xor	ah,ah
18142                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18143 43A7           40                         inc	ax
18144 43A8           8946         F8            mov	-8[bp],ax
18145                                           !BCC_EOS
18146                                           ! 2162    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00
18147                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18148 43AB           8A46         06            mov	al,6[bp]
18149                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18150 43AE           8846         FF            mov	-1[bp],al
18151                                           !BCC_EOS
18152                                           ! 2162 )>>8;
18153                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18154 43B1           8B46         06            mov	ax,6[bp]
18155 43B4           30C0                       xor	al,al
18156                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18157 43B6           88E0                       mov	al,ah
18158 43B8           30E4                       xor	ah,ah
18159                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18160 43BA           8846         FE            mov	-2[bp],al
18161                                           !BCC_EOS
18162                                           ! 2163    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18163                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18164 43BD           8A46         FE            mov	al,-2[bp]
18165 43C0           30E4                       xor	ah,ah
18166 43C2           8B4E         FA            mov	cx,-6[bp]
18167 43C5           F7E9                       imul	cx
18168 43C7           50                         push	ax
18169                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18170 43C8           8B46         FA            mov	ax,-6[bp]
18171 43CB           8B4E         F8            mov	cx,-8[bp]
18172 43CE           F7E9                       imul	cx
18173                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18174 43D0           0C                     FF  or	al,#$FF
18175                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18176                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18177 43D2           89C3                       mov	bx,ax
18178 43D4           8A46         04            mov	al,4[bp]
18179 43D7           30E4                       xor	ah,ah
18180 43D9           93                         xchg	ax,bx
18181 43DA           40                         inc	ax
18182 43DB           89D9                       mov	cx,bx
18183 43DD           F7E9                       imul	cx
18184                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18185 43DF           0246         FF            add	al,-1[bp]
18186 43E2           80D4                   00  adc	ah,*0
18187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18188 43E5           0346         F2            add	ax,-$E[bp]
18189 43E8           44                         inc	sp
18190 43E9           44                         inc	sp
18191                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18192 43EA           8946         F6            mov	-$A[bp],ax
18193                                           !BCC_EOS
18194                                           ! 2164    crtc_addr=read_word(0x40,0x63);
18195                                           ! Debug: list int = const $63 (used reg = )
18196 43ED           B8                   0063  mov	ax,*$63
18197 43F0           50                         push	ax
18198                                           ! Debug: list int = const $40 (used reg = )
18199 43F1           B8                   0040  mov	ax,*$40
18200 43F4           50                         push	ax
18201                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18202 43F5           E8         37FC            call	_read_word
18203 43F8           83C4                   04  add	sp,*4
18204                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18205 43FB           8946         F4            mov	-$C[bp],ax
18206                                           !BCC_EOS
18207                                           ! 2165    outb(crtc_addr,0x0e);
18208                                           ! Debug: list int = const $E (used reg = )
18209 43FE           B8                   000E  mov	ax,*$E
18210 4401           50                         push	ax
18211                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18212 4402           FF76         F4            push	-$C[bp]
18213                                           ! Debug: func () void = outb+0 (used reg = )
18214 4405           E8         3845            call	_outb
18215 4408           83C4                   04  add	sp,*4
18216                                           !BCC_EOS
18217                                           ! 2166    outb(crtc_addr+1,(address&0xff00)>>8);
18218                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18219 440B           8B46         F6            mov	ax,-$A[bp]
18220 440E           30C0                       xor	al,al
18221                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18222 4410           88E0                       mov	al,ah
18223 4412           30E4                       xor	ah,ah
18224                                           ! Debug: list unsigned int = ax+0 (used reg = )
18225 4414           50                         push	ax
18226                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18227 4415           8B46         F4            mov	ax,-$C[bp]
18228                                           ! Debug: list unsigned int = ax+1 (used reg = )
18229 4418           40                         inc	ax
18230 4419           50                         push	ax
18231                                           ! Debug: func () void = outb+0 (used reg = )
18232 441A           E8         3830            call	_outb
18233 441D           83C4                   04  add	sp,*4
18234                                           !BCC_EOS
18235                                           ! 2167    outb(crtc_addr,0x0f);
18236                                           ! Debug: list int = const $F (used reg = )
18237 4420           B8                   000F  mov	ax,*$F
18238 4423           50                         push	ax
18239                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18240 4424           FF76         F4            push	-$C[bp]
18241                                           ! Debug: func () void = outb+0 (used reg = )
18242 4427           E8         3823            call	_outb
18243 442A           83C4                   04  add	sp,*4
18244                                           !BCC_EOS
18245                                           ! 2168    outb(crtc_addr+1,address&0x00ff);
18246                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18247 442D           8A46         F6            mov	al,-$A[bp]
18248                                           ! Debug: list unsigned char = al+0 (used reg = )
18249 4430           30E4                       xor	ah,ah
18250 4432           50                         push	ax
18251                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18252 4433           8B46         F4            mov	ax,-$C[bp]
18253                                           ! Debug: list unsigned int = ax+1 (used reg = )
18254 4436           40                         inc	ax
18255 4437           50                         push	ax
18256                                           ! Debug: func () void = outb+0 (used reg = )
18257 4438           E8         3812            call	_outb
18258 443B           83C4                   04  add	sp,*4
18259                                           !BCC_EOS
18260                                           ! 2169   }
18261                                           ! 2170 }
18262                       0000443E            .A4:
18263 443E           89EC                       mov	sp,bp
18264 4440           5D                         pop	bp
18265 4441           C3                         ret
18266                                           ! 2171 static void biosfn_get_cursor_pos (page,shape, pos)
18267                                           ! Register BX used in function biosfn_set_cursor_pos
18268                                           ! 2172 Bit8u page;Bit16u *shape;Bit16u *pos;
18269                       00004442            _biosfn_get_cursor_pos:
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           !BCC_EOS
18273                                           ! 2173 {
18274                                           ! 2174  Bit16u ss=get_SS();
18275 4442           55                         push	bp
18276 4443           89E5                       mov	bp,sp
18277 4445           4C                         dec	sp
18278 4446           4C                         dec	sp
18279                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18280 4447           E8         3823            call	_get_SS
18281                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18282 444A           8946         FE            mov	-2[bp],ax
18283                                           !BCC_EOS
18284                                           ! 2175  write_word(ss, shape, 0);
18285                                           ! Debug: list int = const 0 (used reg = )
18286 444D           31C0                       xor	ax,ax
18287 444F           50                         push	ax
18288                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18289 4450           FF76         06            push	6[bp]
18290                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18291 4453           FF76         FE            push	-2[bp]
18292                                           ! Debug: func () void = write_word+0 (used reg = )
18293 4456           E8         37C6            call	_write_word
18294 4459           83C4                   06  add	sp,*6
18295                                           !BCC_EOS
18296                                           ! 2176  write_word(ss, pos, 0);
18297                                           ! Debug: list int = const 0 (used reg = )
18298 445C           31C0                       xor	ax,ax
18299 445E           50                         push	ax
18300                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18301 445F           FF76         08            push	8[bp]
18302                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18303 4462           FF76         FE            push	-2[bp]
18304                                           ! Debug: func () void = write_word+0 (used reg = )
18305 4465           E8         37B7            call	_write_word
18306 4468           83C4                   06  add	sp,*6
18307                                           !BCC_EOS
18308                                           ! 2177  if(page>7)return;
18309                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18310 446B           8A46         04            mov	al,4[bp]
18311 446E           3C                     07  cmp	al,*7
18312 4470           76           04            jbe 	.A6
18313                       00004472            .A7:
18314 4472           89EC                       mov	sp,bp
18315 4474           5D                         pop	bp
18316 4475           C3                         ret
18317                                           !BCC_EOS
18318                                           ! 2178  write_word(ss,shape,read_word(0x40,0x60));
18319                       00004476            .A6:
18320                                           ! Debug: list int = const $60 (used reg = )
18321 4476           B8                   0060  mov	ax,*$60
18322 4479           50                         push	ax
18323                                           ! Debug: list int = const $40 (used reg = )
18324 447A           B8                   0040  mov	ax,*$40
18325 447D           50                         push	ax
18326                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18327 447E           E8         3773            call	_read_word
18328 4481           83C4                   04  add	sp,*4
18329                                           ! Debug: list unsigned short = ax+0 (used reg = )
18330 4484           50                         push	ax
18331                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18332 4485           FF76         06            push	6[bp]
18333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18334 4488           FF76         FE            push	-2[bp]
18335                                           ! Debug: func () void = write_word+0 (used reg = )
18336 448B           E8         3791            call	_write_word
18337 448E           83C4                   06  add	sp,*6
18338                                           !BCC_EOS
18339                                           ! 2179  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18340                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18341 4491           8A46         04            mov	al,4[bp]
18342 4494           30E4                       xor	ah,ah
18343 4496           D1E0                       shl	ax,*1
18344                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18345                                           ! Debug: expression subtree swapping
18346                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18347 4498           05                   0050  add	ax,*$50
18348 449B           50                         push	ax
18349                                           ! Debug: list int = const $40 (used reg = )
18350 449C           B8                   0040  mov	ax,*$40
18351 449F           50                         push	ax
18352                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18353 44A0           E8         3751            call	_read_word
18354 44A3           83C4                   04  add	sp,*4
18355                                           ! Debug: list unsigned short = ax+0 (used reg = )
18356 44A6           50                         push	ax
18357                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18358 44A7           FF76         08            push	8[bp]
18359                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18360 44AA           FF76         FE            push	-2[bp]
18361                                           ! Debug: func () void = write_word+0 (used reg = )
18362 44AD           E8         376F            call	_write_word
18363 44B0           83C4                   06  add	sp,*6
18364                                           !BCC_EOS
18365                                           ! 2180 }
18366 44B3           89EC                       mov	sp,bp
18367 44B5           5D                         pop	bp
18368 44B6           C3                         ret
18369                                           ! 2181 static void biosfn_set_active_page (page)
18370                                           ! 2182 Bit8u page;
18371                       000044B7            _biosfn_set_active_page:
18372                                           !BCC_EOS
18373                                           ! 2183 {
18374                                           ! 2184  Bit16u cursor,dummy,crtc_addr;
18375                                           !BCC_EOS
18376                                           ! 2185  Bit16u nbcols,nbrows,address;
18377                                           !BCC_EOS
18378                                           ! 2186  Bit8u mode,line;
18379                                           !BCC_EOS
18380                                           ! 2187  if(page>7)return;
18381 44B7           55                         push	bp
18382 44B8           89E5                       mov	bp,sp
18383 44BA           83C4                   F2  add	sp,*-$E
18384                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18385 44BD           8A46         04            mov	al,4[bp]
18386 44C0           3C                     07  cmp	al,*7
18387 44C2           76           04            jbe 	.A8
18388                       000044C4            .A9:
18389 44C4           89EC                       mov	sp,bp
18390 44C6           5D                         pop	bp
18391 44C7           C3                         ret
18392                                           !BCC_EOS
18393                                           ! 2188  mode=read_byte(0x40,0x49);
18394                       000044C8            .A8:
18395                                           ! Debug: list int = const $49 (used reg = )
18396 44C8           B8                   0049  mov	ax,*$49
18397 44CB           50                         push	ax
18398                                           ! Debug: list int = const $40 (used reg = )
18399 44CC           B8                   0040  mov	ax,*$40
18400 44CF           50                         push	ax
18401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18402 44D0           E8         370E            call	_read_byte
18403 44D3           83C4                   04  add	sp,*4
18404                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18405 44D6           8846         F3            mov	-$D[bp],al
18406                                           !BCC_EOS
18407                                           ! 2189  line=find_vga_entry(mode);
18408                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18409 44D9           8A46         F3            mov	al,-$D[bp]
18410 44DC           30E4                       xor	ah,ah
18411 44DE           50                         push	ax
18412                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18413 44DF           E8         3613            call	_find_vga_entry
18414 44E2           44                         inc	sp
18415 44E3           44                         inc	sp
18416                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18417 44E4           8846         F2            mov	-$E[bp],al
18418                                           !BCC_EOS
18419                                           ! 2190  if(line==0xFF)return;
18420                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18421 44E7           8A46         F2            mov	al,-$E[bp]
18422 44EA           3C                     FF  cmp	al,#$FF
18423 44EC           75           04            jne 	.AA
18424                       000044EE            .AB:
18425 44EE           89EC                       mov	sp,bp
18426 44F0           5D                         pop	bp
18427 44F1           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2191  biosfn_get_cursor_pos(page,&dummy,&cursor);
18430                       000044F2            .AA:
18431                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18432 44F2           8D5E         FE            lea	bx,-2[bp]
18433 44F5           53                         push	bx
18434                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18435 44F6           8D5E         FC            lea	bx,-4[bp]
18436 44F9           53                         push	bx
18437                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18438 44FA           8A46         04            mov	al,4[bp]
18439 44FD           30E4                       xor	ah,ah
18440 44FF           50                         push	ax
18441                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18442 4500           E8         FF3F            call	_biosfn_get_cursor_pos
18443 4503           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2192  if(vga_modes[line].class==0x00)
18446                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18447 4506           8A46         F2            mov	al,-$E[bp]
18448 4509           30E4                       xor	ah,ah
18449 450B           B1                     03  mov	cl,*3
18450 450D           D3E0                       shl	ax,cl
18451 450F           89C3                       mov	bx,ax
18452 4511           81C3                 01F6  add	bx,#_vga_modes
18453                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18454 4515           8A47         01            mov	al,1[bx]
18455 4518           84C0                       test	al,al
18456 451A           75           6E            jne 	.AC
18457                       0000451C            .AD:
18458                                           ! 2193   {
18459                                           ! 2194    nbcols=read_word(0x40,0x4A);
18460                                           ! Debug: list int = const $4A (used reg = )
18461 451C           B8                   004A  mov	ax,*$4A
18462 451F           50                         push	ax
18463                                           ! Debug: list int = const $40 (used reg = )
18464 4520           B8                   0040  mov	ax,*$40
18465 4523           50                         push	ax
18466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18467 4524           E8         36CD            call	_read_word
18468 4527           83C4                   04  add	sp,*4
18469                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18470 452A           8946         F8            mov	-8[bp],ax
18471                                           !BCC_EOS
18472                                           ! 2195    nbrows=read_byte(0x40,0x84)+1;
18473                                           ! Debug: list int = const $84 (used reg = )
18474 452D           B8                   0084  mov	ax,#$84
18475 4530           50                         push	ax
18476                                           ! Debug: list int = const $40 (used reg = )
18477 4531           B8                   0040  mov	ax,*$40
18478 4534           50                         push	ax
18479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18480 4535           E8         36A9            call	_read_byte
18481 4538           83C4                   04  add	sp,*4
18482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18483 453B           30E4                       xor	ah,ah
18484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18485 453D           40                         inc	ax
18486 453E           8946         F6            mov	-$A[bp],ax
18487                                           !BCC_EOS
18488                                           ! 2196    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18489                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18490 4541           8B46         F8            mov	ax,-8[bp]
18491 4544           8B4E         F6            mov	cx,-$A[bp]
18492 4547           F7E9                       imul	cx
18493                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18494 4549           D1E0                       shl	ax,*1
18495                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18496 454B           0C                     FF  or	al,#$FF
18497                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18498                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18499 454D           89C3                       mov	bx,ax
18500 454F           8A46         04            mov	al,4[bp]
18501 4552           30E4                       xor	ah,ah
18502 4554           93                         xchg	ax,bx
18503 4555           40                         inc	ax
18504 4556           89D9                       mov	cx,bx
18505 4558           F7E9                       imul	cx
18506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18507 455A           8946         F4            mov	-$C[bp],ax
18508                                           !BCC_EOS
18509                                           ! 2197    write_word(0x40,0x4E,address);
18510                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18511 455D           FF76         F4            push	-$C[bp]
18512                                           ! Debug: list int = const $4E (used reg = )
18513 4560           B8                   004E  mov	ax,*$4E
18514 4563           50                         push	ax
18515                                           ! Debug: list int = const $40 (used reg = )
18516 4564           B8                   0040  mov	ax,*$40
18517 4567           50                         push	ax
18518                                           ! Debug: func () void = write_word+0 (used reg = )
18519 4568           E8         36B4            call	_write_word
18520 456B           83C4                   06  add	sp,*6
18521                                           !BCC_EOS
18522                                           ! 2198    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18523                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18524 456E           8B46         F8            mov	ax,-8[bp]
18525 4571           8B4E         F6            mov	cx,-$A[bp]
18526 4574           F7E9                       imul	cx
18527                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18528 4576           0C                     FF  or	al,#$FF
18529                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18530                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18531 4578           89C3                       mov	bx,ax
18532 457A           8A46         04            mov	al,4[bp]
18533 457D           30E4                       xor	ah,ah
18534 457F           93                         xchg	ax,bx
18535 4580           40                         inc	ax
18536 4581           89D9                       mov	cx,bx
18537 4583           F7E9                       imul	cx
18538                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18539 4585           8946         F4            mov	-$C[bp],ax
18540                                           !BCC_EOS
18541                                           ! 2199   }
18542                                           ! 2200  else
18543                                           ! 2201   {
18544 4588           EB           24            jmp .AE
18545                       0000458A            .AC:
18546                                           ! 2202    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18547                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18548 458A           8A46         F2            mov	al,-$E[bp]
18549 458D           30E4                       xor	ah,ah
18550 458F           89C3                       mov	bx,ax
18551                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18552 4591           8A87       0276            mov	al,_line_to_vpti[bx]
18553 4595           30E4                       xor	ah,ah
18554 4597           B1                     06  mov	cl,*6
18555 4599           D3E0                       shl	ax,cl
18556 459B           89C3                       mov	bx,ax
18557 459D           81C3                 028A  add	bx,#_video_param_table
18558                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18559                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18560                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18561 45A1           8A46         04            mov	al,4[bp]
18562 45A4           30E4                       xor	ah,ah
18563 45A6           8B4F         03            mov	cx,3[bx]
18564 45A9           F7E9                       imul	cx
18565                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18566 45AB           8946         F4            mov	-$C[bp],ax
18567                                           !BCC_EOS
18568                                           ! 2203   }
18569                                           ! 2204  crtc_addr=read_word(0x40,0x63);
18570                       000045AE            .AE:
18571                                           ! Debug: list int = const $63 (used reg = )
18572 45AE           B8                   0063  mov	ax,*$63
18573 45B1           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 45B2           B8                   0040  mov	ax,*$40
18576 45B5           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 45B6           E8         363B            call	_read_word
18579 45B9           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18581 45BC           8946         FA            mov	-6[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2205  outb(crtc_addr,0x0c);
18584                                           ! Debug: list int = const $C (used reg = )
18585 45BF           B8                   000C  mov	ax,*$C
18586 45C2           50                         push	ax
18587                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18588 45C3           FF76         FA            push	-6[bp]
18589                                           ! Debug: func () void = outb+0 (used reg = )
18590 45C6           E8         3684            call	_outb
18591 45C9           83C4                   04  add	sp,*4
18592                                           !BCC_EOS
18593                                           ! 2206  outb(crtc_addr+1,(address&0xff00)>>8);
18594                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18595 45CC           8B46         F4            mov	ax,-$C[bp]
18596 45CF           30C0                       xor	al,al
18597                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18598 45D1           88E0                       mov	al,ah
18599 45D3           30E4                       xor	ah,ah
18600                                           ! Debug: list unsigned int = ax+0 (used reg = )
18601 45D5           50                         push	ax
18602                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18603 45D6           8B46         FA            mov	ax,-6[bp]
18604                                           ! Debug: list unsigned int = ax+1 (used reg = )
18605 45D9           40                         inc	ax
18606 45DA           50                         push	ax
18607                                           ! Debug: func () void = outb+0 (used reg = )
18608 45DB           E8         366F            call	_outb
18609 45DE           83C4                   04  add	sp,*4
18610                                           !BCC_EOS
18611                                           ! 2207  outb(crtc_addr,0x0d);
18612                                           ! Debug: list int = const $D (used reg = )
18613 45E1           B8                   000D  mov	ax,*$D
18614 45E4           50                         push	ax
18615                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18616 45E5           FF76         FA            push	-6[bp]
18617                                           ! Debug: func () void = outb+0 (used reg = )
18618 45E8           E8         3662            call	_outb
18619 45EB           83C4                   04  add	sp,*4
18620                                           !BCC_EOS
18621                                           ! 2208  outb(crtc_addr+1,address&0x00ff);
18622                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18623 45EE           8A46         F4            mov	al,-$C[bp]
18624                                           ! Debug: list unsigned char = al+0 (used reg = )
18625 45F1           30E4                       xor	ah,ah
18626 45F3           50                         push	ax
18627                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18628 45F4           8B46         FA            mov	ax,-6[bp]
18629                                           ! Debug: list unsigned int = ax+1 (used reg = )
18630 45F7           40                         inc	ax
18631 45F8           50                         push	ax
18632                                           ! Debug: func () void = outb+0 (used reg = )
18633 45F9           E8         3651            call	_outb
18634 45FC           83C4                   04  add	sp,*4
18635                                           !BCC_EOS
18636                                           ! 2209  write_byte(0x40,0x62,page);
18637                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18638 45FF           8A46         04            mov	al,4[bp]
18639 4602           30E4                       xor	ah,ah
18640 4604           50                         push	ax
18641                                           ! Debug: list int = const $62 (used reg = )
18642 4605           B8                   0062  mov	ax,*$62
18643 4608           50                         push	ax
18644                                           ! Debug: list int = const $40 (used reg = )
18645 4609           B8                   0040  mov	ax,*$40
18646 460C           50                         push	ax
18647                                           ! Debug: func () void = write_byte+0 (used reg = )
18648 460D           E8         35F7            call	_write_byte
18649 4610           83C4                   06  add	sp,*6
18650                                           !BCC_EOS
18651                                           ! 2210  biosfn_set_cursor_pos(page,cursor);
18652                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18653 4613           FF76         FE            push	-2[bp]
18654                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18655 4616           8A46         04            mov	al,4[bp]
18656 4619           30E4                       xor	ah,ah
18657 461B           50                         push	ax
18658                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18659 461C           E8         FD23            call	_biosfn_set_cursor_pos
18660 461F           83C4                   04  add	sp,*4
18661                                           !BCC_EOS
18662                                           ! 2211 }
18663 4622           89EC                       mov	sp,bp
18664 4624           5D                         pop	bp
18665 4625           C3                         ret
18666                                           ! 2212 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18667                                           ! Register BX used in function biosfn_set_active_page
18668                                           ! 2213 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18669                       00004626            _vgamem_copy_pl4:
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           ! 2214 {
18677                                           ! 2215  Bit16u src,dest;
18678                                           !BCC_EOS
18679                                           ! 2216  Bit8u i;
18680                                           !BCC_EOS
18681                                           ! 2217  src=ysrc*cheight*nbcols+xstart;
18682 4626           55                         push	bp
18683 4627           89E5                       mov	bp,sp
18684 4629           83C4                   FA  add	sp,*-6
18685                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18686 462C           8A46         0E            mov	al,$E[bp]
18687 462F           30E4                       xor	ah,ah
18688 4631           89C3                       mov	bx,ax
18689 4633           8A46         06            mov	al,6[bp]
18690 4636           30E4                       xor	ah,ah
18691 4638           89D9                       mov	cx,bx
18692 463A           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18694 463C           89C3                       mov	bx,ax
18695 463E           8A46         0C            mov	al,$C[bp]
18696 4641           30E4                       xor	ah,ah
18697 4643           93                         xchg	ax,bx
18698 4644           89D9                       mov	cx,bx
18699 4646           F7E9                       imul	cx
18700                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18701 4648           0246         04            add	al,4[bp]
18702 464B           80D4                   00  adc	ah,*0
18703                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18704 464E           8946         FE            mov	-2[bp],ax
18705                                           !BCC_EOS
18706                                           ! 2218  dest=ydest*cheight*nbcols+xstart;
18707                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18708 4651           8A46         0E            mov	al,$E[bp]
18709 4654           30E4                       xor	ah,ah
18710 4656           89C3                       mov	bx,ax
18711 4658           8A46         08            mov	al,8[bp]
18712 465B           30E4                       xor	ah,ah
18713 465D           89D9                       mov	cx,bx
18714 465F           F7E9                       imul	cx
18715                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18716 4661           89C3                       mov	bx,ax
18717 4663           8A46         0C            mov	al,$C[bp]
18718 4666           30E4                       xor	ah,ah
18719 4668           93                         xchg	ax,bx
18720 4669           89D9                       mov	cx,bx
18721 466B           F7E9                       imul	cx
18722                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18723 466D           0246         04            add	al,4[bp]
18724 4670           80D4                   00  adc	ah,*0
18725                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18726 4673           8946         FC            mov	-4[bp],ax
18727                                           !BCC_EOS
18728                                           ! 2219  outw(0x3ce, 0x0105);
18729                                           ! Debug: list int = const $105 (used reg = )
18730 4676           B8                   0105  mov	ax,#$105
18731 4679           50                         push	ax
18732                                           ! Debug: list int = const $3CE (used reg = )
18733 467A           B8                   03CE  mov	ax,#$3CE
18734 467D           50                         push	ax
18735                                           ! Debug: func () void = outw+0 (used reg = )
18736 467E           E8         35DC            call	_outw
18737 4681           83C4                   04  add	sp,*4
18738                                           !BCC_EOS
18739                                           ! 2220  for(i=0;i<cheight;i++)
18740                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18741 4684           30C0                       xor	al,al
18742 4686           8846         FB            mov	-5[bp],al
18743                                           !BCC_EOS
18744                                           !BCC_EOS
18745                                           ! 2221   {
18746 4689           EB           43            jmp .B1
18747                       0000468B            .B2:
18748                                           ! 2222    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18749                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18750 468B           8A46         0A            mov	al,$A[bp]
18751 468E           30E4                       xor	ah,ah
18752 4690           50                         push	ax
18753                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18754 4691           8A46         0C            mov	al,$C[bp]
18755 4694           30E4                       xor	ah,ah
18756 4696           89C3                       mov	bx,ax
18757 4698           8A46         FB            mov	al,-5[bp]
18758 469B           30E4                       xor	ah,ah
18759 469D           89D9                       mov	cx,bx
18760 469F           F7E9                       imul	cx
18761                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18762                                           ! Debug: expression subtree swapping
18763 46A1           0346         FE            add	ax,-2[bp]
18764                                           ! Debug: list unsigned int = ax+0 (used reg = )
18765 46A4           50                         push	ax
18766                                           ! Debug: list unsigned int = const $A000 (used reg = )
18767 46A5           B8                   A000  mov	ax,#$A000
18768 46A8           50                         push	ax
18769                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18770 46A9           8A46         0C            mov	al,$C[bp]
18771 46AC           30E4                       xor	ah,ah
18772 46AE           89C3                       mov	bx,ax
18773 46B0           8A46         FB            mov	al,-5[bp]
18774 46B3           30E4                       xor	ah,ah
18775 46B5           89D9                       mov	cx,bx
18776 46B7           F7E9                       imul	cx
18777                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18778                                           ! Debug: expression subtree swapping
18779 46B9           0346         FC            add	ax,-4[bp]
18780                                           ! Debug: list unsigned int = ax+0 (used reg = )
18781 46BC           50                         push	ax
18782                                           ! Debug: list unsigned int = const $A000 (used reg = )
18783 46BD           B8                   A000  mov	ax,#$A000
18784 46C0           50                         push	ax
18785                                           ! Debug: func () void = memcpyb+0 (used reg = )
18786 46C1           E8         34BD            call	_memcpyb
18787 46C4           83C4                   0A  add	sp,*$A
18788                                           !BCC_EOS
18789                                           ! 2223   }
18790                                           ! 2224  outw(0x3ce, 0x0005);
18791                       000046C7            .B0:
18792                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18793 46C7           8A46         FB            mov	al,-5[bp]
18794 46CA           40                         inc	ax
18795 46CB           8846         FB            mov	-5[bp],al
18796                       000046CE            .B1:
18797                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18798 46CE           8A46         FB            mov	al,-5[bp]
18799 46D1           3A46         0E            cmp	al,$E[bp]
18800 46D4           72           B5            jb 	.B2
18801                       000046D6            .B3:
18802                       000046D6            .AF:
18803                                           ! Debug: list int = const 5 (used reg = )
18804 46D6           B8                   0005  mov	ax,*5
18805 46D9           50                         push	ax
18806                                           ! Debug: list int = const $3CE (used reg = )
18807 46DA           B8                   03CE  mov	ax,#$3CE
18808 46DD           50                         push	ax
18809                                           ! Debug: func () void = outw+0 (used reg = )
18810 46DE           E8         357C            call	_outw
18811 46E1           83C4                   04  add	sp,*4
18812                                           !BCC_EOS
18813                                           ! 2225 }
18814 46E4           89EC                       mov	sp,bp
18815 46E6           5D                         pop	bp
18816 46E7           C3                         ret
18817                                           ! 2226 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18818                                           ! Register BX used in function vgamem_copy_pl4
18819                                           ! 2227 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18820                       000046E8            _vgamem_fill_pl4:
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2228 {
18828                                           ! 2229  Bit16u dest;
18829                                           !BCC_EOS
18830                                           ! 2230  Bit8u i;
18831                                           !BCC_EOS
18832                                           ! 2231  dest=ystart*cheight*nbcols+xstart;
18833 46E8           55                         push	bp
18834 46E9           89E5                       mov	bp,sp
18835 46EB           83C4                   FC  add	sp,*-4
18836                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18837 46EE           8A46         0C            mov	al,$C[bp]
18838 46F1           30E4                       xor	ah,ah
18839 46F3           89C3                       mov	bx,ax
18840 46F5           8A46         06            mov	al,6[bp]
18841 46F8           30E4                       xor	ah,ah
18842 46FA           89D9                       mov	cx,bx
18843 46FC           F7E9                       imul	cx
18844                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18845 46FE           89C3                       mov	bx,ax
18846 4700           8A46         0A            mov	al,$A[bp]
18847 4703           30E4                       xor	ah,ah
18848 4705           93                         xchg	ax,bx
18849 4706           89D9                       mov	cx,bx
18850 4708           F7E9                       imul	cx
18851                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18852 470A           0246         04            add	al,4[bp]
18853 470D           80D4                   00  adc	ah,*0
18854                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18855 4710           8946         FE            mov	-2[bp],ax
18856                                           !BCC_EOS
18857                                           ! 2232  outw(0x3ce, 0x0205);
18858                                           ! Debug: list int = const $205 (used reg = )
18859 4713           B8                   0205  mov	ax,#$205
18860 4716           50                         push	ax
18861                                           ! Debug: list int = const $3CE (used reg = )
18862 4717           B8                   03CE  mov	ax,#$3CE
18863 471A           50                         push	ax
18864                                           ! Debug: func () void = outw+0 (used reg = )
18865 471B           E8         353F            call	_outw
18866 471E           83C4                   04  add	sp,*4
18867                                           !BCC_EOS
18868                                           ! 2233  for(i=0;i<cheight;i++)
18869                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18870 4721           30C0                       xor	al,al
18871 4723           8846         FD            mov	-3[bp],al
18872                                           !BCC_EOS
18873                                           !BCC_EOS
18874                                           ! 2234   {
18875 4726           EB           31            jmp .B6
18876                       00004728            .B7:
18877                                           ! 2235    memsetb(0xa000,dest+i*nbcols,attr,cols);
18878                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18879 4728           8A46         08            mov	al,8[bp]
18880 472B           30E4                       xor	ah,ah
18881 472D           50                         push	ax
18882                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18883 472E           8A46         0E            mov	al,$E[bp]
18884 4731           30E4                       xor	ah,ah
18885 4733           50                         push	ax
18886                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18887 4734           8A46         0A            mov	al,$A[bp]
18888 4737           30E4                       xor	ah,ah
18889 4739           89C3                       mov	bx,ax
18890 473B           8A46         FD            mov	al,-3[bp]
18891 473E           30E4                       xor	ah,ah
18892 4740           89D9                       mov	cx,bx
18893 4742           F7E9                       imul	cx
18894                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18895                                           ! Debug: expression subtree swapping
18896 4744           0346         FE            add	ax,-2[bp]
18897                                           ! Debug: list unsigned int = ax+0 (used reg = )
18898 4747           50                         push	ax
18899                                           ! Debug: list unsigned int = const $A000 (used reg = )
18900 4748           B8                   A000  mov	ax,#$A000
18901 474B           50                         push	ax
18902                                           ! Debug: func () void = memsetb+0 (used reg = )
18903 474C           E8         33E8            call	_memsetb
18904 474F           83C4                   08  add	sp,*8
18905                                           !BCC_EOS
18906                                           ! 2236   }
18907                                           ! 2237  outw(
18908                       00004752            .B5:
18909                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18910 4752           8A46         FD            mov	al,-3[bp]
18911 4755           40                         inc	ax
18912 4756           8846         FD            mov	-3[bp],al
18913                       00004759            .B6:
18914                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18915 4759           8A46         FD            mov	al,-3[bp]
18916 475C           3A46         0C            cmp	al,$C[bp]
18917 475F           72           C7            jb 	.B7
18918                       00004761            .B8:
18919                       00004761            .B4:
18920                                           ! 2237 0x3ce, 0x0005);
18921                                           ! Debug: list int = const 5 (used reg = )
18922 4761           B8                   0005  mov	ax,*5
18923 4764           50                         push	ax
18924                                           ! Debug: list int = const $3CE (used reg = )
18925 4765           B8                   03CE  mov	ax,#$3CE
18926 4768           50                         push	ax
18927                                           ! Debug: func () void = outw+0 (used reg = )
18928 4769           E8         34F1            call	_outw
18929 476C           83C4                   04  add	sp,*4
18930                                           !BCC_EOS
18931                                           ! 2238 }
18932 476F           89EC                       mov	sp,bp
18933 4771           5D                         pop	bp
18934 4772           C3                         ret
18935                                           ! 2239 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18936                                           ! Register BX used in function vgamem_fill_pl4
18937                                           ! 2240 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18938                       00004773            _vgamem_copy_cga:
18939                                           !BCC_EOS
18940                                           !BCC_EOS
18941                                           !BCC_EOS
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           ! 2241 {
18946                                           ! 2242  Bit16u src,dest;
18947                                           !BCC_EOS
18948                                           ! 2243  Bit8u i;
18949                                           !BCC_EOS
18950                                           ! 2244  src=((ysrc*cheight*nbcols)>>1)+xstart;
18951 4773           55                         push	bp
18952 4774           89E5                       mov	bp,sp
18953 4776           83C4                   FA  add	sp,*-6
18954                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18955 4779           8A46         0E            mov	al,$E[bp]
18956 477C           30E4                       xor	ah,ah
18957 477E           89C3                       mov	bx,ax
18958 4780           8A46         06            mov	al,6[bp]
18959 4783           30E4                       xor	ah,ah
18960 4785           89D9                       mov	cx,bx
18961 4787           F7E9                       imul	cx
18962                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18963 4789           89C3                       mov	bx,ax
18964 478B           8A46         0C            mov	al,$C[bp]
18965 478E           30E4                       xor	ah,ah
18966 4790           93                         xchg	ax,bx
18967 4791           89D9                       mov	cx,bx
18968 4793           F7E9                       imul	cx
18969                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18970 4795           D1E8                       shr	ax,*1
18971                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18972 4797           0246         04            add	al,4[bp]
18973 479A           80D4                   00  adc	ah,*0
18974                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18975 479D           8946         FE            mov	-2[bp],ax
18976                                           !BCC_EOS
18977                                           ! 2245  dest=((ydest*cheight*nbcols)>>1)+xstart;
18978                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18979 47A0           8A46         0E            mov	al,$E[bp]
18980 47A3           30E4                       xor	ah,ah
18981 47A5           89C3                       mov	bx,ax
18982 47A7           8A46         08            mov	al,8[bp]
18983 47AA           30E4                       xor	ah,ah
18984 47AC           89D9                       mov	cx,bx
18985 47AE           F7E9                       imul	cx
18986                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18987 47B0           89C3                       mov	bx,ax
18988 47B2           8A46         0C            mov	al,$C[bp]
18989 47B5           30E4                       xor	ah,ah
18990 47B7           93                         xchg	ax,bx
18991 47B8           89D9                       mov	cx,bx
18992 47BA           F7E9                       imul	cx
18993                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18994 47BC           D1E8                       shr	ax,*1
18995                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18996 47BE           0246         04            add	al,4[bp]
18997 47C1           80D4                   00  adc	ah,*0
18998                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18999 47C4           8946         FC            mov	-4[bp],ax
19000                                           !BCC_EOS
19001                                           ! 2246  for(i=0;i<cheight;i++)
19002                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19003 47C7           30C0                       xor	al,al
19004 47C9           8846         FB            mov	-5[bp],al
19005                                           !BCC_EOS
19006                                           !BCC_EOS
19007                                           ! 2247   {
19008 47CC           E9         00A8            br 	.BB
19009                       000047CF            .BC:
19010                                           ! 2248    if (i & 1)
19011                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19012 47CF           8A46         FB            mov	al,-5[bp]
19013 47D2           24                     01  and	al,*1
19014 47D4           84C0                       test	al,al
19015 47D6           74           56            je  	.BD
19016                       000047D8            .BE:
19017                                           ! 2249      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19018                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19019 47D8           8A46         0A            mov	al,$A[bp]
19020 47DB           30E4                       xor	ah,ah
19021 47DD           50                         push	ax
19022                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19023 47DE           8A46         FB            mov	al,-5[bp]
19024 47E1           30E4                       xor	ah,ah
19025 47E3           D1E8                       shr	ax,*1
19026                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19027 47E5           89C3                       mov	bx,ax
19028 47E7           8A46         0C            mov	al,$C[bp]
19029 47EA           30E4                       xor	ah,ah
19030 47EC           93                         xchg	ax,bx
19031 47ED           89D9                       mov	cx,bx
19032 47EF           F7E9                       imul	cx
19033 47F1           50                         push	ax
19034                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19035                                           ! Debug: expression subtree swapping
19036 47F2           8B46         FE            mov	ax,-2[bp]
19037                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19038 47F5           05                   2000  add	ax,#$2000
19039 47F8           0346         F6            add	ax,-$A[bp]
19040 47FB           44                         inc	sp
19041 47FC           44                         inc	sp
19042                                           ! Debug: list unsigned int = ax+0 (used reg = )
19043 47FD           50                         push	ax
19044                                           ! Debug: list unsigned int = const $B800 (used reg = )
19045 47FE           B8                   B800  mov	ax,#$B800
19046 4801           50                         push	ax
19047                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19048 4802           8A46         FB            mov	al,-5[bp]
19049 4805           30E4                       xor	ah,ah
19050 4807           D1E8                       shr	ax,*1
19051                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19052 4809           89C3                       mov	bx,ax
19053 480B           8A46         0C            mov	al,$C[bp]
19054 480E           30E4                       xor	ah,ah
19055 4810           93                         xchg	ax,bx
19056 4811           89D9                       mov	cx,bx
19057 4813           F7E9                       imul	cx
19058 4815           50                         push	ax
19059                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19060                                           ! Debug: expression subtree swapping
19061 4816           8B46         FC            mov	ax,-4[bp]
19062                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19063 4819           05                   2000  add	ax,#$2000
19064 481C           0346         F2            add	ax,-$E[bp]
19065 481F           44                         inc	sp
19066 4820           44                         inc	sp
19067                                           ! Debug: list unsigned int = ax+0 (used reg = )
19068 4821           50                         push	ax
19069                                           ! Debug: list unsigned int = const $B800 (used reg = )
19070 4822           B8                   B800  mov	ax,#$B800
19071 4825           50                         push	ax
19072                                           ! Debug: func () void = memcpyb+0 (used reg = )
19073 4826           E8         3358            call	_memcpyb
19074 4829           83C4                   0A  add	sp,*$A
19075                                           !BCC_EOS
19076                                           ! 2250    else
19077                                           ! 2251      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19078 482C           EB           42            jmp .BF
19079                       0000482E            .BD:
19080                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19081 482E           8A46         0A            mov	al,$A[bp]
19082 4831           30E4                       xor	ah,ah
19083 4833           50                         push	ax
19084                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19085 4834           8A46         FB            mov	al,-5[bp]
19086 4837           30E4                       xor	ah,ah
19087 4839           D1E8                       shr	ax,*1
19088                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19089 483B           89C3                       mov	bx,ax
19090 483D           8A46         0C            mov	al,$C[bp]
19091 4840           30E4                       xor	ah,ah
19092 4842           93                         xchg	ax,bx
19093 4843           89D9                       mov	cx,bx
19094 4845           F7E9                       imul	cx
19095                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19096                                           ! Debug: expression subtree swapping
19097 4847           0346         FE            add	ax,-2[bp]
19098                                           ! Debug: list unsigned int = ax+0 (used reg = )
19099 484A           50                         push	ax
19100                                           ! Debug: list unsigned int = const $B800 (used reg = )
19101 484B           B8                   B800  mov	ax,#$B800
19102 484E           50                         push	ax
19103                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19104 484F           8A46         FB            mov	al,-5[bp]
19105 4852           30E4                       xor	ah,ah
19106 4854           D1E8                       shr	ax,*1
19107                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19108 4856           89C3                       mov	bx,ax
19109 4858           8A46         0C            mov	al,$C[bp]
19110 485B           30E4                       xor	ah,ah
19111 485D           93                         xchg	ax,bx
19112 485E           89D9                       mov	cx,bx
19113 4860           F7E9                       imul	cx
19114                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19115                                           ! Debug: expression subtree swapping
19116 4862           0346         FC            add	ax,-4[bp]
19117                                           ! Debug: list unsigned int = ax+0 (used reg = )
19118 4865           50                         push	ax
19119                                           ! Debug: list unsigned int = const $B800 (used reg = )
19120 4866           B8                   B800  mov	ax,#$B800
19121 4869           50                         push	ax
19122                                           ! Debug: func () void = memcpyb+0 (used reg = )
19123 486A           E8         3314            call	_memcpyb
19124 486D           83C4                   0A  add	sp,*$A
19125                                           !BCC_EOS
19126                                           ! 2252   }
19127                       00004870            .BF:
19128                                           ! 2253 }
19129                       00004870            .BA:
19130                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19131 4870           8A46         FB            mov	al,-5[bp]
19132 4873           40                         inc	ax
19133 4874           8846         FB            mov	-5[bp],al
19134                       00004877            .BB:
19135                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19136 4877           8A46         FB            mov	al,-5[bp]
19137 487A           3A46         0E            cmp	al,$E[bp]
19138 487D         0F82         FF4E            blo 	.BC
19139                       00004881            .C0:
19140                       00004881            .B9:
19141 4881           89EC                       mov	sp,bp
19142 4883           5D                         pop	bp
19143 4884           C3                         ret
19144                                           ! 2254 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19145                                           ! Register BX used in function vgamem_copy_cga
19146                                           ! 2255 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19147                       00004885            _vgamem_fill_cga:
19148                                           !BCC_EOS
19149                                           !BCC_EOS
19150                                           !BCC_EOS
19151                                           !BCC_EOS
19152                                           !BCC_EOS
19153                                           !BCC_EOS
19154                                           ! 2256 {
19155                                           ! 2257  Bit16u dest;
19156                                           !BCC_EOS
19157                                           ! 2258  Bit8u i;
19158                                           !BCC_EOS
19159                                           ! 2259  dest=((ystart*cheight*nbcols)>>1)+xstart;
19160 4885           55                         push	bp
19161 4886           89E5                       mov	bp,sp
19162 4888           83C4                   FC  add	sp,*-4
19163                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19164 488B           8A46         0C            mov	al,$C[bp]
19165 488E           30E4                       xor	ah,ah
19166 4890           89C3                       mov	bx,ax
19167 4892           8A46         06            mov	al,6[bp]
19168 4895           30E4                       xor	ah,ah
19169 4897           89D9                       mov	cx,bx
19170 4899           F7E9                       imul	cx
19171                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19172 489B           89C3                       mov	bx,ax
19173 489D           8A46         0A            mov	al,$A[bp]
19174 48A0           30E4                       xor	ah,ah
19175 48A2           93                         xchg	ax,bx
19176 48A3           89D9                       mov	cx,bx
19177 48A5           F7E9                       imul	cx
19178                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19179 48A7           D1E8                       shr	ax,*1
19180                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19181 48A9           0246         04            add	al,4[bp]
19182 48AC           80D4                   00  adc	ah,*0
19183                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19184 48AF           8946         FE            mov	-2[bp],ax
19185                                           !BCC_EOS
19186                                           ! 2260  for(i=0;i<cheight;i++)
19187                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19188 48B2           30C0                       xor	al,al
19189 48B4           8846         FD            mov	-3[bp],al
19190                                           !BCC_EOS
19191                                           !BCC_EOS
19192                                           ! 2261   {
19193 48B7           EB           75            jmp .C3
19194                       000048B9            .C4:
19195                                           ! 2262    if (i & 1)
19196                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19197 48B9           8A46         FD            mov	al,-3[bp]
19198 48BC           24                     01  and	al,*1
19199 48BE           84C0                       test	al,al
19200 48C0           74           38            je  	.C5
19201                       000048C2            .C6:
19202                                           ! 2263      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19203                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19204 48C2           8A46         08            mov	al,8[bp]
19205 48C5           30E4                       xor	ah,ah
19206 48C7           50                         push	ax
19207                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19208 48C8           8A46         0E            mov	al,$E[bp]
19209 48CB           30E4                       xor	ah,ah
19210 48CD           50                         push	ax
19211                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19212 48CE           8A46         FD            mov	al,-3[bp]
19213 48D1           30E4                       xor	ah,ah
19214 48D3           D1E8                       shr	ax,*1
19215                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19216 48D5           89C3                       mov	bx,ax
19217 48D7           8A46         0A            mov	al,$A[bp]
19218 48DA           30E4                       xor	ah,ah
19219 48DC           93                         xchg	ax,bx
19220 48DD           89D9                       mov	cx,bx
19221 48DF           F7E9                       imul	cx
19222 48E1           50                         push	ax
19223                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19224                                           ! Debug: expression subtree swapping
19225 48E2           8B46         FE            mov	ax,-2[bp]
19226                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19227 48E5           05                   2000  add	ax,#$2000
19228 48E8           0346         F6            add	ax,-$A[bp]
19229 48EB           44                         inc	sp
19230 48EC           44                         inc	sp
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 48ED           50                         push	ax
19233                                           ! Debug: list unsigned int = const $B800 (used reg = )
19234 48EE           B8                   B800  mov	ax,#$B800
19235 48F1           50                         push	ax
19236                                           ! Debug: func () void = memsetb+0 (used reg = )
19237 48F2           E8         3242            call	_memsetb
19238 48F5           83C4                   08  add	sp,*8
19239                                           !BCC_EOS
19240                                           ! 2264    else
19241                                           ! 2265      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19242 48F8           EB           2D            jmp .C7
19243                       000048FA            .C5:
19244                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19245 48FA           8A46         08            mov	al,8[bp]
19246 48FD           30E4                       xor	ah,ah
19247 48FF           50                         push	ax
19248                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19249 4900           8A46         0E            mov	al,$E[bp]
19250 4903           30E4                       xor	ah,ah
19251 4905           50                         push	ax
19252                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19253 4906           8A46         FD            mov	al,-3[bp]
19254 4909           30E4                       xor	ah,ah
19255 490B           D1E8                       shr	ax,*1
19256                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19257 490D           89C3                       mov	bx,ax
19258 490F           8A46         0A            mov	al,$A[bp]
19259 4912           30E4                       xor	ah,ah
19260 4914           93                         xchg	ax,bx
19261 4915           89D9                       mov	cx,bx
19262 4917           F7E9                       imul	cx
19263                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19264                                           ! Debug: expression subtree swapping
19265 4919           0346         FE            add	ax,-2[bp]
19266                                           ! Debug: list unsigned int = ax+0 (used reg = )
19267 491C           50                         push	ax
19268                                           ! Debug: list unsigned int = const $B800 (used reg = )
19269 491D           B8                   B800  mov	ax,#$B800
19270 4920           50                         push	ax
19271                                           ! Debug: func () void = memsetb+0 (used reg = )
19272 4921           E8         3213            call	_memsetb
19273 4924           83C4                   08  add	sp,*8
19274                                           !BCC_EOS
19275                                           ! 2266   }
19276                       00004927            .C7:
19277                                           ! 2267 }
19278                       00004927            .C2:
19279                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19280 4927           8A46         FD            mov	al,-3[bp]
19281 492A           40                         inc	ax
19282 492B           8846         FD            mov	-3[bp],al
19283                       0000492E            .C3:
19284                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19285 492E           8A46         FD            mov	al,-3[bp]
19286 4931           3A46         0C            cmp	al,$C[bp]
19287 4934           72           83            jb 	.C4
19288                       00004936            .C8:
19289                       00004936            .C1:
19290 4936           89EC                       mov	sp,bp
19291 4938           5D                         pop	bp
19292 4939           C3                         ret
19293                                           ! 2268 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19294                                           ! Register BX used in function vgamem_fill_cga
19295                                           ! 2269 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19296                       0000493A            _biosfn_scroll:
19297                                           !BCC_EOS
19298                                           !BCC_EOS
19299                                           !BCC_EOS
19300                                           !BCC_EOS
19301                                           !BCC_EOS
19302                                           !BCC_EOS
19303                                           !BCC_EOS
19304                                           !BCC_EOS
19305                                           ! 2270 {
19306                                           ! 2271  Bit8u mode,line,cheight,bpp,cols;
19307                                           !BCC_EOS
19308                                           ! 2272  Bit16u nbcols,nbrows,i;
19309                                           !BCC_EOS
19310                                           ! 2273  Bit16u address;
19311                                           !BCC_EOS
19312                                           ! 2274  if(rul>rlr)return;
19313 493A           55                         push	bp
19314 493B           89E5                       mov	bp,sp
19315 493D           83C4                   F2  add	sp,*-$E
19316                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19317 4940           8A46         08            mov	al,8[bp]
19318 4943           3A46         0C            cmp	al,$C[bp]
19319 4946           76           04            jbe 	.C9
19320                       00004948            .CA:
19321 4948           89EC                       mov	sp,bp
19322 494A           5D                         pop	bp
19323 494B           C3                         ret
19324                                           !BCC_EOS
19325                                           ! 2275  if(cul>clr)return;
19326                       0000494C            .C9:
19327                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19328 494C           8A46         0A            mov	al,$A[bp]
19329 494F           3A46         0E            cmp	al,$E[bp]
19330 4952           76           04            jbe 	.CB
19331                       00004954            .CC:
19332 4954           89EC                       mov	sp,bp
19333 4956           5D                         pop	bp
19334 4957           C3                         ret
19335                                           !BCC_EOS
19336                                           ! 2276  mode=read_byte(0x40,0x49);
19337                       00004958            .CB:
19338                                           ! Debug: list int = const $49 (used reg = )
19339 4958           B8                   0049  mov	ax,*$49
19340 495B           50                         push	ax
19341                                           ! Debug: list int = const $40 (used reg = )
19342 495C           B8                   0040  mov	ax,*$40
19343 495F           50                         push	ax
19344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19345 4960           E8         327E            call	_read_byte
19346 4963           83C4                   04  add	sp,*4
19347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19348 4966           8846         FF            mov	-1[bp],al
19349                                           !BCC_EOS
19350                                           ! 2277  line=find_vga_entry(mode);
19351                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19352 4969           8A46         FF            mov	al,-1[bp]
19353 496C           30E4                       xor	ah,ah
19354 496E           50                         push	ax
19355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19356 496F           E8         3183            call	_find_vga_entry
19357 4972           44                         inc	sp
19358 4973           44                         inc	sp
19359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19360 4974           8846         FE            mov	-2[bp],al
19361                                           !BCC_EOS
19362                                           ! 2278  if(line==0xFF)return;
19363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19364 4977           8A46         FE            mov	al,-2[bp]
19365 497A           3C                     FF  cmp	al,#$FF
19366 497C           75           04            jne 	.CD
19367                       0000497E            .CE:
19368 497E           89EC                       mov	sp,bp
19369 4980           5D                         pop	bp
19370 4981           C3                         ret
19371                                           !BCC_EOS
19372                                           ! 2279  nbrows=read_byte(0x40,0x84)+1;
19373                       00004982            .CD:
19374                                           ! Debug: list int = const $84 (used reg = )
19375 4982           B8                   0084  mov	ax,#$84
19376 4985           50                         push	ax
19377                                           ! Debug: list int = const $40 (used reg = )
19378 4986           B8                   0040  mov	ax,*$40
19379 4989           50                         push	ax
19380                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19381 498A           E8         3254            call	_read_byte
19382 498D           83C4                   04  add	sp,*4
19383                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19384 4990           30E4                       xor	ah,ah
19385                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19386 4992           40                         inc	ax
19387 4993           8946         F6            mov	-$A[bp],ax
19388                                           !BCC_EOS
19389                                           ! 2280  nbcols=read_word(0x40,0x4A);
19390                                           ! Debug: list int = const $4A (used reg = )
19391 4996           B8                   004A  mov	ax,*$4A
19392 4999           50                         push	ax
19393                                           ! Debug: list int = const $40 (used reg = )
19394 499A           B8                   0040  mov	ax,*$40
19395 499D           50                         push	ax
19396                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19397 499E           E8         3253            call	_read_word
19398 49A1           83C4                   04  add	sp,*4
19399                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19400 49A4           8946         F8            mov	-8[bp],ax
19401                                           !BCC_EOS
19402                                           ! 2281  if(page==0xFF)
19403                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19404 49A7           8A46         10            mov	al,$10[bp]
19405 49AA           3C                     FF  cmp	al,#$FF
19406 49AC           75           11            jne 	.CF
19407                       000049AE            .D0:
19408                                           ! 2282   page=read_byte(0x40,0x62);
19409                                           ! Debug: list int = const $62 (used reg = )
19410 49AE           B8                   0062  mov	ax,*$62
19411 49B1           50                         push	ax
19412                                           ! Debug: list int = const $40 (used reg = )
19413 49B2           B8                   0040  mov	ax,*$40
19414 49B5           50                         push	ax
19415                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19416 49B6           E8         3228            call	_read_byte
19417 49B9           83C4                   04  add	sp,*4
19418                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19419 49BC           8846         10            mov	$10[bp],al
19420                                           !BCC_EOS
19421                                           ! 2283  if(rlr>=nbrows)rlr=nbrows-1;
19422                       000049BF            .CF:
19423                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19424 49BF           8A46         0C            mov	al,$C[bp]
19425 49C2           30E4                       xor	ah,ah
19426 49C4           3B46         F6            cmp	ax,-$A[bp]
19427 49C7           72           07            jb  	.D1
19428                       000049C9            .D2:
19429                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19430 49C9           8B46         F6            mov	ax,-$A[bp]
19431                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19432 49CC           48                         dec	ax
19433 49CD           8846         0C            mov	$C[bp],al
19434                                           !BCC_EOS
19435                                           ! 2284  if(clr>=nbcols)clr=nbcols-1;
19436                       000049D0            .D1:
19437                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19438 49D0           8A46         0E            mov	al,$E[bp]
19439 49D3           30E4                       xor	ah,ah
19440 49D5           3B46         F8            cmp	ax,-8[bp]
19441 49D8           72           07            jb  	.D3
19442                       000049DA            .D4:
19443                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19444 49DA           8B46         F8            mov	ax,-8[bp]
19445                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19446 49DD           48                         dec	ax
19447 49DE           8846         0E            mov	$E[bp],al
19448                                           !BCC_EOS
19449                                           ! 2285  if(nblines>nbrows)nblines=0;
19450                       000049E1            .D3:
19451                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19452 49E1           8A46         04            mov	al,4[bp]
19453 49E4           30E4                       xor	ah,ah
19454 49E6           3B46         F6            cmp	ax,-$A[bp]
19455 49E9           76           05            jbe 	.D5
19456                       000049EB            .D6:
19457                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 49EB           30C0                       xor	al,al
19459 49ED           8846         04            mov	4[bp],al
19460                                           !BCC_EOS
19461                                           ! 2286  cols=clr-cul+1;
19462                       000049F0            .D5:
19463                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19464 49F0           8A46         0E            mov	al,$E[bp]
19465 49F3           30E4                       xor	ah,ah
19466 49F5           2A46         0A            sub	al,$A[bp]
19467 49F8           80DC                   00  sbb	ah,*0
19468                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19469                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19470 49FB           40                         inc	ax
19471 49FC           8846         FB            mov	-5[bp],al
19472                                           !BCC_EOS
19473                                           ! 2287  if(vga_modes[line].class==0x00)
19474                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19475 49FF           8A46         FE            mov	al,-2[bp]
19476 4A02           30E4                       xor	ah,ah
19477 4A04           B1                     03  mov	cl,*3
19478 4A06           D3E0                       shl	ax,cl
19479 4A08           89C3                       mov	bx,ax
19480 4A0A           81C3                 01F6  add	bx,#_vga_modes
19481                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19482 4A0E           8A47         01            mov	al,1[bx]
19483 4A11           84C0                       test	al,al
19484 4A13         0F85         0250            bne 	.D7
19485                       00004A17            .D8:
19486                                           ! 2288   {
19487                                           ! 2289    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19488                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19489 4A17           8B46         F8            mov	ax,-8[bp]
19490 4A1A           8B4E         F6            mov	cx,-$A[bp]
19491 4A1D           F7E9                       imul	cx
19492                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19493 4A1F           D1E0                       shl	ax,*1
19494                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19495 4A21           0C                     FF  or	al,#$FF
19496                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19497                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19498 4A23           89C3                       mov	bx,ax
19499 4A25           8A46         10            mov	al,$10[bp]
19500 4A28           30E4                       xor	ah,ah
19501 4A2A           93                         xchg	ax,bx
19502 4A2B           40                         inc	ax
19503 4A2C           89D9                       mov	cx,bx
19504 4A2E           F7E9                       imul	cx
19505                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19506 4A30           8946         F2            mov	-$E[bp],ax
19507                                           !BCC_EOS
19508                                           ! 2290    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19509                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19510 4A33           8A46         04            mov	al,4[bp]
19511 4A36           84C0                       test	al,al
19512 4A38           75           67            jne 	.D9
19513                       00004A3A            .DE:
19514                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19515 4A3A           8A46         08            mov	al,8[bp]
19516 4A3D           84C0                       test	al,al
19517 4A3F           75           60            jne 	.D9
19518                       00004A41            .DD:
19519                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19520 4A41           8A46         0A            mov	al,$A[bp]
19521 4A44           84C0                       test	al,al
19522 4A46           75           59            jne 	.D9
19523                       00004A48            .DC:
19524                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19525 4A48           8B46         F6            mov	ax,-$A[bp]
19526                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19527                                           ! Debug: expression subtree swapping
19528 4A4B           48                         dec	ax
19529 4A4C           50                         push	ax
19530 4A4D           8A46         0C            mov	al,$C[bp]
19531 4A50           30E4                       xor	ah,ah
19532 4A52           3B46         F0            cmp	ax,-$10[bp]
19533 4A55           8D66         F2            lea	sp,-$E[bp]
19534 4A58           75           47            jne 	.D9
19535                       00004A5A            .DB:
19536                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19537 4A5A           8B46         F8            mov	ax,-8[bp]
19538                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19539                                           ! Debug: expression subtree swapping
19540 4A5D           48                         dec	ax
19541 4A5E           50                         push	ax
19542 4A5F           8A46         0E            mov	al,$E[bp]
19543 4A62           30E4                       xor	ah,ah
19544 4A64           3B46         F0            cmp	ax,-$10[bp]
19545 4A67           8D66         F2            lea	sp,-$E[bp]
19546 4A6A           75           35            jne 	.D9
19547                       00004A6C            .DA:
19548                                           ! 2291     {
19549                                           ! 2292      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19550                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A6C           8B46         F6            mov	ax,-$A[bp]
19552 4A6F           8B4E         F8            mov	cx,-8[bp]
19553 4A72           F7E9                       imul	cx
19554                                           ! Debug: list unsigned int = ax+0 (used reg = )
19555 4A74           50                         push	ax
19556                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19557 4A75           8A46         06            mov	al,6[bp]
19558 4A78           30E4                       xor	ah,ah
19559                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19560 4A7A           B9                   0100  mov	cx,#$100
19561 4A7D           F7E9                       imul	cx
19562                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19563                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19564 4A7F           05                   0020  add	ax,*$20
19565 4A82           50                         push	ax
19566                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19567 4A83           FF76         F2            push	-$E[bp]
19568                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19569 4A86           8A46         FE            mov	al,-2[bp]
19570 4A89           30E4                       xor	ah,ah
19571 4A8B           B1                     03  mov	cl,*3
19572 4A8D           D3E0                       shl	ax,cl
19573 4A8F           89C3                       mov	bx,ax
19574 4A91           81C3                 01F6  add	bx,#_vga_modes
19575                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19576 4A95           FF77         04            push	4[bx]
19577                                           ! Debug: func () void = memsetw+0 (used reg = )
19578 4A98           E8         30C1            call	_memsetw
19579 4A9B           83C4                   08  add	sp,*8
19580                                           !BCC_EOS
19581                                           ! 2293     }
19582                                           ! 2294    else
19583                                           ! 2295     {
19584 4A9E           E9         01C3            br 	.DF
19585                       00004AA1            .D9:
19586                                           ! 2296      if(dir==1)
19587                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19588 4AA1           8A46         12            mov	al,$12[bp]
19589 4AA4           3C                     01  cmp	al,*1
19590 4AA6         0F85         00DC            bne 	.E0
19591                       00004AAA            .E1:
19592                                           ! 2297       {for(i=rul;i<=rlr;i++)
19593                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19594 4AAA           8A46         08            mov	al,8[bp]
19595 4AAD           30E4                       xor	ah,ah
19596 4AAF           8946         F4            mov	-$C[bp],ax
19597                                           !BCC_EOS
19598                                           !BCC_EOS
19599                                           ! 2298         {
19600 4AB2           E9         00C2            br 	.E4
19601                       00004AB5            .E5:
19602                                           ! 2299          if((i+nblines>rlr)||(nblines==0))
19603                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19604 4AB5           8B46         F4            mov	ax,-$C[bp]
19605 4AB8           0246         04            add	al,4[bp]
19606 4ABB           80D4                   00  adc	ah,*0
19607                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19608 4ABE           50                         push	ax
19609 4ABF           8A46         0C            mov	al,$C[bp]
19610 4AC2           30E4                       xor	ah,ah
19611 4AC4           3B46         F0            cmp	ax,-$10[bp]
19612 4AC7           8D66         F2            lea	sp,-$E[bp]
19613 4ACA           72           07            jb  	.E7
19614                       00004ACC            .E8:
19615                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19616 4ACC           8A46         04            mov	al,4[bp]
19617 4ACF           84C0                       test	al,al
19618 4AD1           75           42            jne 	.E6
19619                       00004AD3            .E7:
19620                                           ! 2300           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19621                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19622 4AD3           8A46         FB            mov	al,-5[bp]
19623 4AD6           30E4                       xor	ah,ah
19624 4AD8           50                         push	ax
19625                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19626 4AD9           8A46         06            mov	al,6[bp]
19627 4ADC           30E4                       xor	ah,ah
19628                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19629 4ADE           B9                   0100  mov	cx,#$100
19630 4AE1           F7E9                       imul	cx
19631                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19632                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19633 4AE3           05                   0020  add	ax,*$20
19634 4AE6           50                         push	ax
19635                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19636 4AE7           8B46         F4            mov	ax,-$C[bp]
19637 4AEA           8B4E         F8            mov	cx,-8[bp]
19638 4AED           F7E9                       imul	cx
19639                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19640 4AEF           0246         0A            add	al,$A[bp]
19641 4AF2           80D4                   00  adc	ah,*0
19642                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19643 4AF5           D1E0                       shl	ax,*1
19644                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4AF7           0346         F2            add	ax,-$E[bp]
19647                                           ! Debug: list unsigned int = ax+0 (used reg = )
19648 4AFA           50                         push	ax
19649                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19650 4AFB           8A46         FE            mov	al,-2[bp]
19651 4AFE           30E4                       xor	ah,ah
19652 4B00           B1                     03  mov	cl,*3
19653 4B02           D3E0                       shl	ax,cl
19654 4B04           89C3                       mov	bx,ax
19655 4B06           81C3                 01F6  add	bx,#_vga_modes
19656                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19657 4B0A           FF77         04            push	4[bx]
19658                                           ! Debug: func () void = memsetw+0 (used reg = )
19659 4B0D           E8         304C            call	_memsetw
19660 4B10           83C4                   08  add	sp,*8
19661                                           !BCC_EOS
19662                                           ! 2301          else
19663                                           ! 2302           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19664 4B13           EB           5B            jmp .E9
19665                       00004B15            .E6:
19666                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19667 4B15           8A46         FB            mov	al,-5[bp]
19668 4B18           30E4                       xor	ah,ah
19669 4B1A           50                         push	ax
19670                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19671 4B1B           8B46         F4            mov	ax,-$C[bp]
19672 4B1E           0246         04            add	al,4[bp]
19673 4B21           80D4                   00  adc	ah,*0
19674                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19675 4B24           8B4E         F8            mov	cx,-8[bp]
19676 4B27           F7E9                       imul	cx
19677                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19678 4B29           0246         0A            add	al,$A[bp]
19679 4B2C           80D4                   00  adc	ah,*0
19680                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19681 4B2F           D1E0                       shl	ax,*1
19682                                           ! Debug: list unsigned int = ax+0 (used reg = )
19683 4B31           50                         push	ax
19684                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19685 4B32           8A46         FE            mov	al,-2[bp]
19686 4B35           30E4                       xor	ah,ah
19687 4B37           B1                     03  mov	cl,*3
19688 4B39           D3E0                       shl	ax,cl
19689 4B3B           89C3                       mov	bx,ax
19690 4B3D           81C3                 01F6  add	bx,#_vga_modes
19691                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19692 4B41           FF77         04            push	4[bx]
19693                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19694 4B44           8B46         F4            mov	ax,-$C[bp]
19695 4B47           8B4E         F8            mov	cx,-8[bp]
19696 4B4A           F7E9                       imul	cx
19697                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19698 4B4C           0246         0A            add	al,$A[bp]
19699 4B4F           80D4                   00  adc	ah,*0
19700                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19701 4B52           D1E0                       shl	ax,*1
19702                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19703                                           ! Debug: expression subtree swapping
19704 4B54           0346         F2            add	ax,-$E[bp]
19705                                           ! Debug: list unsigned int = ax+0 (used reg = )
19706 4B57           50                         push	ax
19707                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B58           8A46         FE            mov	al,-2[bp]
19709 4B5B           30E4                       xor	ah,ah
19710 4B5D           B1                     03  mov	cl,*3
19711 4B5F           D3E0                       shl	ax,cl
19712 4B61           89C3                       mov	bx,ax
19713 4B63           81C3                 01F6  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B67           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memcpyw+0 (used reg = )
19717 4B6A           E8         3044            call	_memcpyw
19718 4B6D           83C4                   0A  add	sp,*$A
19719                                           !BCC_EOS
19720                                           ! 2303         }
19721                       00004B70            .E9:
19722                                           ! 2304       }
19723                       00004B70            .E3:
19724                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19725 4B70           8B46         F4            mov	ax,-$C[bp]
19726 4B73           40                         inc	ax
19727 4B74           8946         F4            mov	-$C[bp],ax
19728                       00004B77            .E4:
19729                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19730 4B77           8A46         0C            mov	al,$C[bp]
19731 4B7A           30E4                       xor	ah,ah
19732 4B7C           3B46         F4            cmp	ax,-$C[bp]
19733 4B7F         0F83         FF32            bhis	.E5
19734                       00004B83            .EA:
19735                       00004B83            .E2:
19736                                           ! 2305      else
19737                                           ! 2306   
19738                                           ! 2306     {for(i=rlr;i>=rul;i--)
19739 4B83           E9         00DE            br 	.EB
19740                       00004B86            .E0:
19741                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19742 4B86           8A46         0C            mov	al,$C[bp]
19743 4B89           30E4                       xor	ah,ah
19744 4B8B           8946         F4            mov	-$C[bp],ax
19745                                           !BCC_EOS
19746                                           !BCC_EOS
19747                                           ! 2307         {
19748 4B8E           E9         00C7            br 	.EE
19749                       00004B91            .EF:
19750                                           ! 2308          if((i<rul+nblines)||(nblines==0))
19751                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19752 4B91           8A46         08            mov	al,8[bp]
19753 4B94           30E4                       xor	ah,ah
19754 4B96           0246         04            add	al,4[bp]
19755 4B99           80D4                   00  adc	ah,*0
19756                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19757 4B9C           3B46         F4            cmp	ax,-$C[bp]
19758 4B9F           77           07            ja  	.F1
19759                       00004BA1            .F2:
19760                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19761 4BA1           8A46         04            mov	al,4[bp]
19762 4BA4           84C0                       test	al,al
19763 4BA6           75           42            jne 	.F0
19764                       00004BA8            .F1:
19765                                           ! 2309           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19766                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19767 4BA8           8A46         FB            mov	al,-5[bp]
19768 4BAB           30E4                       xor	ah,ah
19769 4BAD           50                         push	ax
19770                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19771 4BAE           8A46         06            mov	al,6[bp]
19772 4BB1           30E4                       xor	ah,ah
19773                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19774 4BB3           B9                   0100  mov	cx,#$100
19775 4BB6           F7E9                       imul	cx
19776                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19777                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19778 4BB8           05                   0020  add	ax,*$20
19779 4BBB           50                         push	ax
19780                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19781 4BBC           8B46         F4            mov	ax,-$C[bp]
19782 4BBF           8B4E         F8            mov	cx,-8[bp]
19783 4BC2           F7E9                       imul	cx
19784                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19785 4BC4           0246         0A            add	al,$A[bp]
19786 4BC7           80D4                   00  adc	ah,*0
19787                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19788 4BCA           D1E0                       shl	ax,*1
19789                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19790                                           ! Debug: expression subtree swapping
19791 4BCC           0346         F2            add	ax,-$E[bp]
19792                                           ! Debug: list unsigned int = ax+0 (used reg = )
19793 4BCF           50                         push	ax
19794                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19795 4BD0           8A46         FE            mov	al,-2[bp]
19796 4BD3           30E4                       xor	ah,ah
19797 4BD5           B1                     03  mov	cl,*3
19798 4BD7           D3E0                       shl	ax,cl
19799 4BD9           89C3                       mov	bx,ax
19800 4BDB           81C3                 01F6  add	bx,#_vga_modes
19801                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19802 4BDF           FF77         04            push	4[bx]
19803                                           ! Debug: func () void = memsetw+0 (used reg = )
19804 4BE2           E8         2F77            call	_memsetw
19805 4BE5           83C4                   08  add	sp,*8
19806                                           !BCC_EOS
19807                                           ! 2310          else
19808                                           ! 2311           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19809 4BE8           EB           5B            jmp .F3
19810                       00004BEA            .F0:
19811                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19812 4BEA           8A46         FB            mov	al,-5[bp]
19813 4BED           30E4                       xor	ah,ah
19814 4BEF           50                         push	ax
19815                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19816 4BF0           8B46         F4            mov	ax,-$C[bp]
19817 4BF3           2A46         04            sub	al,4[bp]
19818 4BF6           80DC                   00  sbb	ah,*0
19819                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19820 4BF9           8B4E         F8            mov	cx,-8[bp]
19821 4BFC           F7E9                       imul	cx
19822                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19823 4BFE           0246         0A            add	al,$A[bp]
19824 4C01           80D4                   00  adc	ah,*0
19825                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19826 4C04           D1E0                       shl	ax,*1
19827                                           ! Debug: list unsigned int = ax+0 (used reg = )
19828 4C06           50                         push	ax
19829                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19830 4C07           8A46         FE            mov	al,-2[bp]
19831 4C0A           30E4                       xor	ah,ah
19832 4C0C           B1                     03  mov	cl,*3
19833 4C0E           D3E0                       shl	ax,cl
19834 4C10           89C3                       mov	bx,ax
19835 4C12           81C3                 01F6  add	bx,#_vga_modes
19836                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19837 4C16           FF77         04            push	4[bx]
19838                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19839 4C19           8B46         F4            mov	ax,-$C[bp]
19840 4C1C           8B4E         F8            mov	cx,-8[bp]
19841 4C1F           F7E9                       imul	cx
19842                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19843 4C21           0246         0A            add	al,$A[bp]
19844 4C24           80D4                   00  adc	ah,*0
19845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19846 4C27           D1E0                       shl	ax,*1
19847                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19848                                           ! Debug: expression subtree swapping
19849 4C29           0346         F2            add	ax,-$E[bp]
19850                                           ! Debug: list unsigned int = ax+0 (used reg = )
19851 4C2C           50                         push	ax
19852                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19853 4C2D           8A46         FE            mov	al,-2[bp]
19854 4C30           30E4                       xor	ah,ah
19855 4C32           B1                     03  mov	cl,*3
19856 4C34           D3E0                       shl	ax,cl
19857 4C36           89C3                       mov	bx,ax
19858 4C38           81C3                 01F6  add	bx,#_vga_modes
19859                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19860 4C3C           FF77         04            push	4[bx]
19861                                           ! Debug: func () void = memcpyw+0 (used reg = )
19862 4C3F           E8         2F6F            call	_memcpyw
19863 4C42           83C4                   0A  add	sp,*$A
19864                                           !BCC_EOS
19865                                           ! 2312          if (i>rlr) break;
19866                       00004C45            .F3:
19867                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19868 4C45           8A46         0C            mov	al,$C[bp]
19869 4C48           30E4                       xor	ah,ah
19870 4C4A           3B46         F4            cmp	ax,-$C[bp]
19871 4C4D           73           02            jae 	.F4
19872                       00004C4F            .F5:
19873 4C4F           EB           13            jmp .EC
19874                                           !BCC_EOS
19875                                           ! 2313         }
19876                       00004C51            .F4:
19877                                           ! 2314       }
19878                       00004C51            .ED:
19879                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19880 4C51           8B46         F4            mov	ax,-$C[bp]
19881 4C54           48                         dec	ax
19882 4C55           8946         F4            mov	-$C[bp],ax
19883                       00004C58            .EE:
19884                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19885 4C58           8A46         08            mov	al,8[bp]
19886 4C5B           30E4                       xor	ah,ah
19887 4C5D           3B46         F4            cmp	ax,-$C[bp]
19888 4C60         0F86         FF2D            blos	.EF
19889                       00004C64            .F6:
19890                       00004C64            .EC:
19891                                           ! 2315     }
19892                       00004C64            .EB:
19893                                           ! 2316   }
19894                       00004C64            .DF:
19895                                           ! 2317  else
19896                                           ! 2318   {
19897 4C64           E9         03D5            br 	.F7
19898                       00004C67            .D7:
19899                                           ! 2319    cheight=video_param_table[line_to_vpti[line]].cheight;
19900                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19901 4C67           8A46         FE            mov	al,-2[bp]
19902 4C6A           30E4                       xor	ah,ah
19903 4C6C           89C3                       mov	bx,ax
19904                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19905 4C6E           8A87       0276            mov	al,_line_to_vpti[bx]
19906 4C72           30E4                       xor	ah,ah
19907 4C74           B1                     06  mov	cl,*6
19908 4C76           D3E0                       shl	ax,cl
19909 4C78           89C3                       mov	bx,ax
19910 4C7A           81C3                 028A  add	bx,#_video_param_table
19911                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19912 4C7E           8A47         02            mov	al,2[bx]
19913 4C81           8846         FD            mov	-3[bp],al
19914                                           !BCC_EOS
19915                                           ! 2320    switch(vga_modes[line].memmodel)
19916                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19917 4C84           8A46         FE            mov	al,-2[bp]
19918 4C87           30E4                       xor	ah,ah
19919 4C89           B1                     03  mov	cl,*3
19920 4C8B           D3E0                       shl	ax,cl
19921 4C8D           89C3                       mov	bx,ax
19922 4C8F           81C3                 01F6  add	bx,#_vga_modes
19923 4C93           8A47         02            mov	al,2[bx]
19924                                           ! 2321     {
19925 4C96           E9         0391            br 	.FA
19926                                           ! 2322      case 0x04:
19927                                           ! 2323      case 0x03:
19928                       00004C99            .FB:
19929                                           ! 2324        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19930                       00004C99            .FC:
19931                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19932 4C99           8A46         04            mov	al,4[bp]
19933 4C9C           84C0                       test	al,al
19934 4C9E         0F85         0089            bne 	.FD
19935                       00004CA2            .102:
19936                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19937 4CA2           8A46         08            mov	al,8[bp]
19938 4CA5           84C0                       test	al,al
19939 4CA7         0F85         0080            bne 	.FD
19940                       00004CAB            .101:
19941                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19942 4CAB           8A46         0A            mov	al,$A[bp]
19943 4CAE           84C0                       test	al,al
19944 4CB0           75           79            jne 	.FD
19945                       00004CB2            .100:
19946                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19947 4CB2           8B46         F6            mov	ax,-$A[bp]
19948                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19949                                           ! Debug: expression subtree swapping
19950 4CB5           48                         dec	ax
19951 4CB6           50                         push	ax
19952 4CB7           8A46         0C            mov	al,$C[bp]
19953 4CBA           30E4                       xor	ah,ah
19954 4CBC           3B46         F0            cmp	ax,0+..FFFC[bp]
19955 4CBF           8D66         F2            lea	sp,2+..FFFC[bp]
19956 4CC2           75           67            jne 	.FD
19957                       00004CC4            .FF:
19958                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19959 4CC4           8B46         F8            mov	ax,-8[bp]
19960                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19961                                           ! Debug: expression subtree swapping
19962 4CC7           48                         dec	ax
19963 4CC8           50                         push	ax
19964 4CC9           8A46         0E            mov	al,$E[bp]
19965 4CCC           30E4                       xor	ah,ah
19966 4CCE           3B46         F0            cmp	ax,0+..FFFC[bp]
19967 4CD1           8D66         F2            lea	sp,2+..FFFC[bp]
19968 4CD4           75           55            jne 	.FD
19969                       00004CD6            .FE:
19970                                           ! 2325         {
19971                                           ! 2326          outw(0x3ce, 0x0205);
19972                                           ! Debug: list int = const $205 (used reg = )
19973 4CD6           B8                   0205  mov	ax,#$205
19974 4CD9           50                         push	ax
19975                                           ! Debug: list int = const $3CE (used reg = )
19976 4CDA           B8                   03CE  mov	ax,#$3CE
19977 4CDD           50                         push	ax
19978                                           ! Debug: func () void = outw+0 (used reg = )
19979 4CDE           E8         2F7C            call	_outw
19980 4CE1           83C4                   04  add	sp,*4
19981                                           !BCC_EOS
19982                                           ! 2327          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19983                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19984 4CE4           8B46         F6            mov	ax,-$A[bp]
19985 4CE7           8B4E         F8            mov	cx,-8[bp]
19986 4CEA           F7E9                       imul	cx
19987                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19988 4CEC           89C3                       mov	bx,ax
19989 4CEE           8A46         FD            mov	al,-3[bp]
19990 4CF1           30E4                       xor	ah,ah
19991 4CF3           93                         xchg	ax,bx
19992 4CF4           89D9                       mov	cx,bx
19993 4CF6           F7E9                       imul	cx
19994                                           ! Debug: list unsigned int = ax+0 (used reg = )
19995 4CF8           50                         push	ax
19996                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19997 4CF9           8A46         06            mov	al,6[bp]
19998 4CFC           30E4                       xor	ah,ah
19999 4CFE           50                         push	ax
20000                                           ! Debug: list int = const 0 (used reg = )
20001 4CFF           31C0                       xor	ax,ax
20002 4D01           50                         push	ax
20003                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20004 4D02           8A46         FE            mov	al,-2[bp]
20005 4D05           30E4                       xor	ah,ah
20006 4D07           B1                     03  mov	cl,*3
20007 4D09           D3E0                       shl	ax,cl
20008 4D0B           89C3                       mov	bx,ax
20009 4D0D           81C3                 01F6  add	bx,#_vga_modes
20010                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20011 4D11           FF77         04            push	4[bx]
20012                                           ! Debug: func () void = memsetb+0 (used reg = )
20013 4D14           E8         2E20            call	_memsetb
20014 4D17           83C4                   08  add	sp,*8
20015                                           !BCC_EOS
20016                                           ! 2328          outw(0x3ce, 0x0005);
20017                                           ! Debug: list int = const 5 (used reg = )
20018 4D1A           B8                   0005  mov	ax,*5
20019 4D1D           50                         push	ax
20020                                           ! Debug: list int = const $3CE (used reg = )
20021 4D1E           B8                   03CE  mov	ax,#$3CE
20022 4D21           50                         push	ax
20023                                           ! Debug: func () void = outw+0 (used reg = )
20024 4D22           E8         2F38            call	_outw
20025 4D25           83C4                   04  add	sp,*4
20026                                           !BCC_EOS
20027                                           ! 2329         }
20028                                           ! 2330        else
20029                                           ! 2331         {
20030 4D28           E9         0121            br 	.103
20031                       00004D2B            .FD:
20032                                           ! 2332          if(dir==1)
20033                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20034 4D2B           8A46         12            mov	al,$12[bp]
20035 4D2E           3C                     01  cmp	al,*1
20036 4D30         0F85         008A            bne 	.104
20037                       00004D34            .105:
20038                                           ! 2333           {for(i=rul;i<=rlr;i++)
20039                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20040 4D34           8A46         08            mov	al,8[bp]
20041 4D37           30E4                       xor	ah,ah
20042 4D39           8946         F4            mov	-$C[bp],ax
20043                                           !BCC_EOS
20044                                           !BCC_EOS
20045                                           ! 2334             {
20046 4D3C           EB           73            jmp .108
20047                       00004D3E            .109:
20048                                           ! 2335              if((i+nblines>rlr)||(nblines==0))
20049                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20050 4D3E           8B46         F4            mov	ax,-$C[bp]
20051 4D41           0246         04            add	al,4[bp]
20052 4D44           80D4                   00  adc	ah,*0
20053                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20054 4D47           50                         push	ax
20055 4D48           8A46         0C            mov	al,$C[bp]
20056 4D4B           30E4                       xor	ah,ah
20057 4D4D           3B46         F0            cmp	ax,0+..FFFC[bp]
20058 4D50           8D66         F2            lea	sp,2+..FFFC[bp]
20059 4D53           72           07            jb  	.10B
20060                       00004D55            .10C:
20061                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20062 4D55           8A46         04            mov	al,4[bp]
20063 4D58           84C0                       test	al,al
20064 4D5A           75           26            jne 	.10A
20065                       00004D5C            .10B:
20066                                           ! 2336               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20067                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20068 4D5C           8A46         06            mov	al,6[bp]
20069 4D5F           30E4                       xor	ah,ah
20070 4D61           50                         push	ax
20071                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20072 4D62           8A46         FD            mov	al,-3[bp]
20073 4D65           30E4                       xor	ah,ah
20074 4D67           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20076 4D68           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20078 4D6B           8A46         FB            mov	al,-5[bp]
20079 4D6E           30E4                       xor	ah,ah
20080 4D70           50                         push	ax
20081                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20082 4D71           FF76         F4            push	-$C[bp]
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4D74           8A46         0A            mov	al,$A[bp]
20085 4D77           30E4                       xor	ah,ah
20086 4D79           50                         push	ax
20087                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20088 4D7A           E8         F96B            call	_vgamem_fill_pl4
20089 4D7D           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2337              else
20092                                           ! 2338               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20093 4D80           EB           28            jmp .10D
20094                       00004D82            .10A:
20095                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20096 4D82           8A46         FD            mov	al,-3[bp]
20097 4D85           30E4                       xor	ah,ah
20098 4D87           50                         push	ax
20099                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20100 4D88           FF76         F8            push	-8[bp]
20101                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20102 4D8B           8A46         FB            mov	al,-5[bp]
20103 4D8E           30E4                       xor	ah,ah
20104 4D90           50                         push	ax
20105                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20106 4D91           FF76         F4            push	-$C[bp]
20107                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20108 4D94           8B46         F4            mov	ax,-$C[bp]
20109 4D97           0246         04            add	al,4[bp]
20110 4D9A           80D4                   00  adc	ah,*0
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4D9D           50                         push	ax
20113                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20114 4D9E           8A46         0A            mov	al,$A[bp]
20115 4DA1           30E4                       xor	ah,ah
20116 4DA3           50                         push	ax
20117                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20118 4DA4           E8         F87F            call	_vgamem_copy_pl4
20119 4DA7           83C4                   0C  add	sp,*$C
20120                                           !BCC_EOS
20121                                           ! 2339             }
20122                       00004DAA            .10D:
20123                                           ! 2340           }
20124                       00004DAA            .107:
20125                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20126 4DAA           8B46         F4            mov	ax,-$C[bp]
20127 4DAD           40                         inc	ax
20128 4DAE           8946         F4            mov	-$C[bp],ax
20129                       00004DB1            .108:
20130                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20131 4DB1           8A46         0C            mov	al,$C[bp]
20132 4DB4           30E4                       xor	ah,ah
20133 4DB6           3B46         F4            cmp	ax,-$C[bp]
20134 4DB9           73           83            jae	.109
20135                       00004DBB            .10E:
20136                       00004DBB            .106:
20137                                           ! 2341          else
20138                                           ! 2342           {for(i=rlr;i>=rul;i--)
20139 4DBB           E9         008E            br 	.10F
20140                       00004DBE            .104:
20141                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20142 4DBE           8A46         0C            mov	al,$C[bp]
20143 4DC1           30E4                       xor	ah,ah
20144 4DC3           8946         F4            mov	-$C[bp],ax
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2343             {
20148 4DC6           EB           78            jmp .112
20149                       00004DC8            .113:
20150                                           ! 2344              if((i<rul+nblines)||(nblines==0))
20151                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20152 4DC8           8A46         08            mov	al,8[bp]
20153 4DCB           30E4                       xor	ah,ah
20154 4DCD           0246         04            add	al,4[bp]
20155 4DD0           80D4                   00  adc	ah,*0
20156                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20157 4DD3           3B46         F4            cmp	ax,-$C[bp]
20158 4DD6           77           07            ja  	.115
20159                       00004DD8            .116:
20160                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20161 4DD8           8A46         04            mov	al,4[bp]
20162 4DDB           84C0                       test	al,al
20163 4DDD           75           26            jne 	.114
20164                       00004DDF            .115:
20165                                           ! 2345               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20166                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20167 4DDF           8A46         06            mov	al,6[bp]
20168 4DE2           30E4                       xor	ah,ah
20169 4DE4           50                         push	ax
20170                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20171 4DE5           8A46         FD            mov	al,-3[bp]
20172 4DE8           30E4                       xor	ah,ah
20173 4DEA           50                         push	ax
20174                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20175 4DEB           FF76         F8            push	-8[bp]
20176                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20177 4DEE           8A46         FB            mov	al,-5[bp]
20178 4DF1           30E4                       xor	ah,ah
20179 4DF3           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4DF4           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4DF7           8A46         0A            mov	al,$A[bp]
20184 4DFA           30E4                       xor	ah,ah
20185 4DFC           50                         push	ax
20186                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20187 4DFD           E8         F8E8            call	_vgamem_fill_pl4
20188 4E00           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2346              else
20191                                           ! 2347               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20192 4E03           EB           28            jmp .117
20193                       00004E05            .114:
20194                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20195 4E05           8A46         FD            mov	al,-3[bp]
20196 4E08           30E4                       xor	ah,ah
20197 4E0A           50                         push	ax
20198                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20199 4E0B           FF76         F8            push	-8[bp]
20200                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20201 4E0E           8A46         FB            mov	al,-5[bp]
20202 4E11           30E4                       xor	ah,ah
20203 4E13           50                         push	ax
20204                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20205 4E14           8B46         F4            mov	ax,-$C[bp]
20206 4E17           2A46         04            sub	al,4[bp]
20207 4E1A           80DC                   00  sbb	ah,*0
20208                                           ! Debug: list unsigned int = ax+0 (used reg = )
20209 4E1D           50                         push	ax
20210                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20211 4E1E           FF76         F4            push	-$C[bp]
20212                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20213 4E21           8A46         0A            mov	al,$A[bp]
20214 4E24           30E4                       xor	ah,ah
20215 4E26           50                         push	ax
20216                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20217 4E27           E8         F7FC            call	_vgamem_copy_pl4
20218 4E2A           83C4                   0C  add	sp,*$C
20219                                           !BCC_EOS
20220                                           ! 2348              if (i>rlr) break;
20221                       00004E2D            .117:
20222                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20223 4E2D           8A46         0C            mov	al,$C[bp]
20224 4E30           30E4                       xor	ah,ah
20225 4E32           3B46         F4            cmp	ax,-$C[bp]
20226 4E35           73           02            jae 	.118
20227                       00004E37            .119:
20228 4E37           EB           13            jmp .110
20229                                           !BCC_EOS
20230                                           ! 2349             }
20231                       00004E39            .118:
20232                                           ! 2350           }
20233                       00004E39            .111:
20234                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20235 4E39           8B46         F4            mov	ax,-$C[bp]
20236 4E3C           48                         dec	ax
20237 4E3D           8946         F4            mov	-$C[bp],ax
20238                       00004E40            .112:
20239                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20240 4E40           8A46         08            mov	al,8[bp]
20241 4E43           30E4                       xor	ah,ah
20242 4E45           3B46         F4            cmp	ax,-$C[bp]
20243 4E48         0F86         FF7C            blos	.113
20244                       00004E4C            .11A:
20245                       00004E4C            .110:
20246                                           ! 2351         }
20247                       00004E4C            .10F:
20248                                           ! 2352        break;
20249                       00004E4C            .103:
20250 4E4C           E9         01ED            br 	.F8
20251                                           !BCC_EOS
20252                                           ! 2353      case 0x02:
20253                                           ! 2354        bpp=vga_modes[line].pixbits;
20254                       00004E4F            .11B:
20255                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20256 4E4F           8A46         FE            mov	al,-2[bp]
20257 4E52           30E4                       xor	ah,ah
20258 4E54           B1                     03  mov	cl,*3
20259 4E56           D3E0                       shl	ax,cl
20260 4E58           89C3                       mov	bx,ax
20261 4E5A           81C3                 01F6  add	bx,#_vga_modes
20262                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20263 4E5E           8A47         03            mov	al,3[bx]
20264 4E61           8846         FC            mov	-4[bp],al
20265                                           !BCC_EOS
20266                                           ! 2355        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20267                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20268 4E64           8A46         04            mov	al,4[bp]
20269 4E67           84C0                       test	al,al
20270 4E69           75           77            jne 	.11C
20271                       00004E6B            .121:
20272                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20273 4E6B           8A46         08            mov	al,8[bp]
20274 4E6E           84C0                       test	al,al
20275 4E70           75           70            jne 	.11C
20276                       00004E72            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20278 4E72           8A46         0A            mov	al,$A[bp]
20279 4E75           84C0                       test	al,al
20280 4E77           75           69            jne 	.11C
20281                       00004E79            .11F:
20282                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20283 4E79           8B46         F6            mov	ax,-$A[bp]
20284                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 4E7C           48                         dec	ax
20287 4E7D           50                         push	ax
20288 4E7E           8A46         0C            mov	al,$C[bp]
20289 4E81           30E4                       xor	ah,ah
20290 4E83           3B46         F0            cmp	ax,0+..FFFC[bp]
20291 4E86           8D66         F2            lea	sp,2+..FFFC[bp]
20292 4E89           75           57            jne 	.11C
20293                       00004E8B            .11E:
20294                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20295 4E8B           8B46         F8            mov	ax,-8[bp]
20296                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20297                                           ! Debug: expression subtree swapping
20298 4E8E           48                         dec	ax
20299 4E8F           50                         push	ax
20300 4E90           8A46         0E            mov	al,$E[bp]
20301 4E93           30E4                       xor	ah,ah
20302 4E95           3B46         F0            cmp	ax,0+..FFFC[bp]
20303 4E98           8D66         F2            lea	sp,2+..FFFC[bp]
20304 4E9B           75           45            jne 	.11C
20305                       00004E9D            .11D:
20306                                           ! 2356         {
20307                                           ! 2357          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20308                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20309 4E9D           8B46         F6            mov	ax,-$A[bp]
20310 4EA0           8B4E         F8            mov	cx,-8[bp]
20311 4EA3           F7E9                       imul	cx
20312                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20313 4EA5           89C3                       mov	bx,ax
20314 4EA7           8A46         FD            mov	al,-3[bp]
20315 4EAA           30E4                       xor	ah,ah
20316 4EAC           93                         xchg	ax,bx
20317 4EAD           89D9                       mov	cx,bx
20318 4EAF           F7E9                       imul	cx
20319                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20320 4EB1           89C3                       mov	bx,ax
20321 4EB3           8A46         FC            mov	al,-4[bp]
20322 4EB6           30E4                       xor	ah,ah
20323 4EB8           93                         xchg	ax,bx
20324 4EB9           89D9                       mov	cx,bx
20325 4EBB           F7E9                       imul	cx
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4EBD           50                         push	ax
20328                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20329 4EBE           8A46         06            mov	al,6[bp]
20330 4EC1           30E4                       xor	ah,ah
20331 4EC3           50                         push	ax
20332                                           ! Debug: list int = const 0 (used reg = )
20333 4EC4           31C0                       xor	ax,ax
20334 4EC6           50                         push	ax
20335                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20336 4EC7           8A46         FE            mov	al,-2[bp]
20337 4ECA           30E4                       xor	ah,ah
20338 4ECC           B1                     03  mov	cl,*3
20339 4ECE           D3E0                       shl	ax,cl
20340 4ED0           89C3                       mov	bx,ax
20341 4ED2           81C3                 01F6  add	bx,#_vga_modes
20342                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20343 4ED6           FF77         04            push	4[bx]
20344                                           ! Debug: func () void = memsetb+0 (used reg = )
20345 4ED9           E8         2C5B            call	_memsetb
20346 4EDC           83C4                   08  add	sp,*8
20347                                           !BCC_EOS
20348                                           ! 2358         }
20349                                           ! 2359        else
20350                                           ! 2360         {
20351 4EDF           E9         0144            br 	.122
20352                       00004EE2            .11C:
20353                                           ! 2361          if(bpp==2)
20354                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20355 4EE2           8A46         FC            mov	al,-4[bp]
20356 4EE5           3C                     02  cmp	al,*2
20357 4EE7           75           1C            jne 	.123
20358                       00004EE9            .124:
20359                                           ! 2362           {
20360                                           ! 2363            cul<<=1;
20361                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20362 4EE9           8A46         0A            mov	al,$A[bp]
20363 4EEC           30E4                       xor	ah,ah
20364 4EEE           D1E0                       shl	ax,*1
20365 4EF0           8846         0A            mov	$A[bp],al
20366                                           !BCC_EOS
20367                                           ! 2364            cols<<=1;
20368                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20369 4EF3           8A46         FB            mov	al,-5[bp]
20370 4EF6           30E4                       xor	ah,ah
20371 4EF8           D1E0                       shl	ax,*1
20372 4EFA           8846         FB            mov	-5[bp],al
20373                                           !BCC_EOS
20374                                           ! 2365            nbcols<<=1;
20375                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20376 4EFD           8B46         F8            mov	ax,-8[bp]
20377 4F00           D1E0                       shl	ax,*1
20378 4F02           8946         F8            mov	-8[bp],ax
20379                                           !BCC_EOS
20380                                           ! 2366           }
20381                                           ! 2367          if(dir==1)
20382                       00004F05            .123:
20383                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20384 4F05           8A46         12            mov	al,$12[bp]
20385 4F08           3C                     01  cmp	al,*1
20386 4F0A         0F85         008A            bne 	.125
20387                       00004F0E            .126:
20388                                           ! 2368           {for(i=rul;i<=rlr;i++)
20389                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20390 4F0E           8A46         08            mov	al,8[bp]
20391 4F11           30E4                       xor	ah,ah
20392 4F13           8946         F4            mov	-$C[bp],ax
20393                                           !BCC_EOS
20394                                           !BCC_EOS
20395                                           ! 2369             {
20396 4F16           EB           73            jmp .129
20397                       00004F18            .12A:
20398                                           ! 2370              if((i+nblines>rlr)||(nblines==0))
20399                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20400 4F18           8B46         F4            mov	ax,-$C[bp]
20401 4F1B           0246         04            add	al,4[bp]
20402 4F1E           80D4                   00  adc	ah,*0
20403                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20404 4F21           50                         push	ax
20405 4F22           8A46         0C            mov	al,$C[bp]
20406 4F25           30E4                       xor	ah,ah
20407 4F27           3B46         F0            cmp	ax,0+..FFFC[bp]
20408 4F2A           8D66         F2            lea	sp,2+..FFFC[bp]
20409 4F2D           72           07            jb  	.12C
20410                       00004F2F            .12D:
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4F2F           8A46         04            mov	al,4[bp]
20413 4F32           84C0                       test	al,al
20414 4F34           75           26            jne 	.12B
20415                       00004F36            .12C:
20416                                           ! 2371               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20417                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20418 4F36           8A46         06            mov	al,6[bp]
20419 4F39           30E4                       xor	ah,ah
20420 4F3B           50                         push	ax
20421                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20422 4F3C           8A46         FD            mov	al,-3[bp]
20423 4F3F           30E4                       xor	ah,ah
20424 4F41           50                         push	ax
20425                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20426 4F42           FF76         F8            push	-8[bp]
20427                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20428 4F45           8A46         FB            mov	al,-5[bp]
20429 4F48           30E4                       xor	ah,ah
20430 4F4A           50                         push	ax
20431                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20432 4F4B           FF76         F4            push	-$C[bp]
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F4E           8A46         0A            mov	al,$A[bp]
20435 4F51           30E4                       xor	ah,ah
20436 4F53           50                         push	ax
20437                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20438 4F54           E8         F92E            call	_vgamem_fill_cga
20439 4F57           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2372              else
20442                                           ! 2373               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20443 4F5A           EB           28            jmp .12E
20444                       00004F5C            .12B:
20445                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20446 4F5C           8A46         FD            mov	al,-3[bp]
20447 4F5F           30E4                       xor	ah,ah
20448 4F61           50                         push	ax
20449                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20450 4F62           FF76         F8            push	-8[bp]
20451                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20452 4F65           8A46         FB            mov	al,-5[bp]
20453 4F68           30E4                       xor	ah,ah
20454 4F6A           50                         push	ax
20455                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20456 4F6B           FF76         F4            push	-$C[bp]
20457                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20458 4F6E           8B46         F4            mov	ax,-$C[bp]
20459 4F71           0246         04            add	al,4[bp]
20460 4F74           80D4                   00  adc	ah,*0
20461                                           ! Debug: list unsigned int = ax+0 (used reg = )
20462 4F77           50                         push	ax
20463                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20464 4F78           8A46         0A            mov	al,$A[bp]
20465 4F7B           30E4                       xor	ah,ah
20466 4F7D           50                         push	ax
20467                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20468 4F7E           E8         F7F2            call	_vgamem_copy_cga
20469 4F81           83C4                   0C  add	sp,*$C
20470                                           !BCC_EOS
20471                                           ! 2374             }
20472                       00004F84            .12E:
20473                                           ! 2375           }
20474                       00004F84            .128:
20475                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20476 4F84           8B46         F4            mov	ax,-$C[bp]
20477 4F87           40                         inc	ax
20478 4F88           8946         F4            mov	-$C[bp],ax
20479                       00004F8B            .129:
20480                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20481 4F8B           8A46         0C            mov	al,$C[bp]
20482 4F8E           30E4                       xor	ah,ah
20483 4F90           3B46         F4            cmp	ax,-$C[bp]
20484 4F93           73           83            jae	.12A
20485                       00004F95            .12F:
20486                       00004F95            .127:
20487                                           ! 2376          else
20488                                           ! 2377           {for(i=rlr;i
20489 4F95           E9         008E            br 	.130
20490                       00004F98            .125:
20491                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20492 4F98           8A46         0C            mov	al,$C[bp]
20493 4F9B           30E4                       xor	ah,ah
20494 4F9D           8946         F4            mov	-$C[bp],ax
20495                                           !BCC_EOS
20496                                           ! 2377 >=rul;i--)
20497                                           !BCC_EOS
20498                                           ! 2378             {
20499 4FA0           EB           78            jmp .133
20500                       00004FA2            .134:
20501                                           ! 2379              if((i<rul+nblines)||(nblines==0))
20502                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20503 4FA2           8A46         08            mov	al,8[bp]
20504 4FA5           30E4                       xor	ah,ah
20505 4FA7           0246         04            add	al,4[bp]
20506 4FAA           80D4                   00  adc	ah,*0
20507                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20508 4FAD           3B46         F4            cmp	ax,-$C[bp]
20509 4FB0           77           07            ja  	.136
20510                       00004FB2            .137:
20511                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20512 4FB2           8A46         04            mov	al,4[bp]
20513 4FB5           84C0                       test	al,al
20514 4FB7           75           26            jne 	.135
20515                       00004FB9            .136:
20516                                           ! 2380               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20517                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20518 4FB9           8A46         06            mov	al,6[bp]
20519 4FBC           30E4                       xor	ah,ah
20520 4FBE           50                         push	ax
20521                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20522 4FBF           8A46         FD            mov	al,-3[bp]
20523 4FC2           30E4                       xor	ah,ah
20524 4FC4           50                         push	ax
20525                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20526 4FC5           FF76         F8            push	-8[bp]
20527                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20528 4FC8           8A46         FB            mov	al,-5[bp]
20529 4FCB           30E4                       xor	ah,ah
20530 4FCD           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 4FCE           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 4FD1           8A46         0A            mov	al,$A[bp]
20535 4FD4           30E4                       xor	ah,ah
20536 4FD6           50                         push	ax
20537                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20538 4FD7           E8         F8AB            call	_vgamem_fill_cga
20539 4FDA           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2381              else
20542                                           ! 2382               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20543 4FDD           EB           28            jmp .138
20544                       00004FDF            .135:
20545                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20546 4FDF           8A46         FD            mov	al,-3[bp]
20547 4FE2           30E4                       xor	ah,ah
20548 4FE4           50                         push	ax
20549                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20550 4FE5           FF76         F8            push	-8[bp]
20551                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20552 4FE8           8A46         FB            mov	al,-5[bp]
20553 4FEB           30E4                       xor	ah,ah
20554 4FED           50                         push	ax
20555                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20556 4FEE           8B46         F4            mov	ax,-$C[bp]
20557 4FF1           2A46         04            sub	al,4[bp]
20558 4FF4           80DC                   00  sbb	ah,*0
20559                                           ! Debug: list unsigned int = ax+0 (used reg = )
20560 4FF7           50                         push	ax
20561                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20562 4FF8           FF76         F4            push	-$C[bp]
20563                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20564 4FFB           8A46         0A            mov	al,$A[bp]
20565 4FFE           30E4                       xor	ah,ah
20566 5000           50                         push	ax
20567                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20568 5001           E8         F76F            call	_vgamem_copy_cga
20569 5004           83C4                   0C  add	sp,*$C
20570                                           !BCC_EOS
20571                                           ! 2383              if (i>rlr) break;
20572                       00005007            .138:
20573                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20574 5007           8A46         0C            mov	al,$C[bp]
20575 500A           30E4                       xor	ah,ah
20576 500C           3B46         F4            cmp	ax,-$C[bp]
20577 500F           73           02            jae 	.139
20578                       00005011            .13A:
20579 5011           EB           13            jmp .131
20580                                           !BCC_EOS
20581                                           ! 2384             }
20582                       00005013            .139:
20583                                           ! 2385           }
20584                       00005013            .132:
20585                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20586 5013           8B46         F4            mov	ax,-$C[bp]
20587 5016           48                         dec	ax
20588 5017           8946         F4            mov	-$C[bp],ax
20589                       0000501A            .133:
20590                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20591 501A           8A46         08            mov	al,8[bp]
20592 501D           30E4                       xor	ah,ah
20593 501F           3B46         F4            cmp	ax,-$C[bp]
20594 5022         0F86         FF7C            blos	.134
20595                       00005026            .13B:
20596                       00005026            .131:
20597                                           ! 2386         }
20598                       00005026            .130:
20599                                           ! 2387        break;
20600                       00005026            .122:
20601 5026           EB           14            jmp .F8
20602                                           !BCC_EOS
20603                                           ! 2388     }
20604                                           ! 2389   }
20605 5028           EB           12            jmp .F8
20606                       0000502A            .FA:
20607 502A           2C                     02  sub	al,*2
20608 502C         0F84         FE1F            beq 	.11B
20609 5030           2C                     01  sub	al,*1
20610 5032         0F84         FC63            beq 	.FC
20611 5036           2C                     01  sub	al,*1
20612 5038         0F84         FC5D            beq 	.FB
20613                       0000503C            .F8:
20614                       FFFFFFF0            ..FFFC	=	-$10
20615                                           ! 2390 }
20616                       0000503C            .F7:
20617 503C           89EC                       mov	sp,bp
20618 503E           5D                         pop	bp
20619 503F           C3                         ret
20620                                           ! 2391 static void biosfn_read_char_attr (page,car)
20621                                           ! Register BX used in function biosfn_scroll
20622                                           ! 2392 Bit8u page;Bit16u *car;
20623                       00005040            _biosfn_read_char_attr:
20624                                           !BCC_EOS
20625                                           !BCC_EOS
20626                                           ! 2393 {Bit16u ss=get_SS();
20627 5040           55                         push	bp
20628 5041           89E5                       mov	bp,sp
20629 5043           4C                         dec	sp
20630 5044           4C                         dec	sp
20631                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20632 5045           E8         2C25            call	_get_SS
20633                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20634 5048           8946         FE            mov	-2[bp],ax
20635                                           !BCC_EOS
20636                                           ! 2394  Bit8u xcurs,ycurs,mode,line;
20637                                           !BCC_EOS
20638                                           ! 2395  Bit16u nbcols,nbrows,address;
20639                                           !BCC_EOS
20640                                           ! 2396  Bit16u cursor,dummy;
20641                                           !BCC_EOS
20642                                           ! 2397  mode=read_byte(0x40,0x49);
20643 504B           83C4                   F2  add	sp,*-$E
20644                                           ! Debug: list int = const $49 (used reg = )
20645 504E           B8                   0049  mov	ax,*$49
20646 5051           50                         push	ax
20647                                           ! Debug: list int = const $40 (used reg = )
20648 5052           B8                   0040  mov	ax,*$40
20649 5055           50                         push	ax
20650                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20651 5056           E8         2B88            call	_read_byte
20652 5059           83C4                   04  add	sp,*4
20653                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20654 505C           8846         FB            mov	-5[bp],al
20655                                           !BCC_EOS
20656                                           ! 2398  line=find_vga_entry(mode);
20657                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20658 505F           8A46         FB            mov	al,-5[bp]
20659 5062           30E4                       xor	ah,ah
20660 5064           50                         push	ax
20661                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20662 5065           E8         2A8D            call	_find_vga_entry
20663 5068           44                         inc	sp
20664 5069           44                         inc	sp
20665                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20666 506A           8846         FA            mov	-6[bp],al
20667                                           !BCC_EOS
20668                                           ! 2399  if(line==0xFF)return;
20669                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20670 506D           8A46         FA            mov	al,-6[bp]
20671 5070           3C                     FF  cmp	al,#$FF
20672 5072           75           04            jne 	.13C
20673                       00005074            .13D:
20674 5074           89EC                       mov	sp,bp
20675 5076           5D                         pop	bp
20676 5077           C3                         ret
20677                                           !BCC_EOS
20678                                           ! 2400  biosfn_get_cursor_pos(page,&dummy,&cursor);
20679                       00005078            .13C:
20680                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20681 5078           8D5E         F2            lea	bx,-$E[bp]
20682 507B           53                         push	bx
20683                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20684 507C           8D5E         F0            lea	bx,-$10[bp]
20685 507F           53                         push	bx
20686                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20687 5080           8A46         04            mov	al,4[bp]
20688 5083           30E4                       xor	ah,ah
20689 5085           50                         push	ax
20690                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20691 5086           E8         F3B9            call	_biosfn_get_cursor_pos
20692 5089           83C4                   06  add	sp,*6
20693                                           !BCC_EOS
20694                                           ! 2401  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20695                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20696 508C           8A46         F2            mov	al,-$E[bp]
20697                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20698 508F           8846         FD            mov	-3[bp],al
20699                                           !BCC_EOS
20700                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20701 5092           8B46         F2            mov	ax,-$E[bp]
20702 5095           30C0                       xor	al,al
20703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20704 5097           88E0                       mov	al,ah
20705 5099           30E4                       xor	ah,ah
20706                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20707 509B           8846         FC            mov	-4[bp],al
20708                                           !BCC_EOS
20709                                           ! 2402  nbrows=read_byte(0x40,0x84)+1;
20710                                           ! Debug: list int = const $84 (used reg = )
20711 509E           B8                   0084  mov	ax,#$84
20712 50A1           50                         push	ax
20713                                           ! Debug: list int = const $40 (used reg = )
20714 50A2           B8                   0040  mov	ax,*$40
20715 50A5           50                         push	ax
20716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20717 50A6           E8         2B38            call	_read_byte
20718 50A9           83C4                   04  add	sp,*4
20719                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20720 50AC           30E4                       xor	ah,ah
20721                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20722 50AE           40                         inc	ax
20723 50AF           8946         F6            mov	-$A[bp],ax
20724                                           !BCC_EOS
20725                                           ! 2403  nbcols=read_word(0x40,0x4A);
20726                                           ! Debug: list int = const $4A (used reg = )
20727 50B2           B8                   004A  mov	ax,*$4A
20728 50B5           50                         push	ax
20729                                           ! Debug: list int = const $40 (used reg = )
20730 50B6           B8                   0040  mov	ax,*$40
20731 50B9           50                         push	ax
20732                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20733 50BA           E8         2B37            call	_read_word
20734 50BD           83C4                   04  add	sp,*4
20735                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20736 50C0           8946         F8            mov	-8[bp],ax
20737                                           !BCC_EOS
20738                                           ! 2404  if(vga_modes[line].class==0x00)
20739                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20740 50C3           8A46         FA            mov	al,-6[bp]
20741 50C6           30E4                       xor	ah,ah
20742 50C8           B1                     03  mov	cl,*3
20743 50CA           D3E0                       shl	ax,cl
20744 50CC           89C3                       mov	bx,ax
20745 50CE           81C3                 01F6  add	bx,#_vga_modes
20746                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20747 50D2           8A47         01            mov	al,1[bx]
20748 50D5           84C0                       test	al,al
20749 50D7           75           5E            jne 	.13E
20750                       000050D9            .13F:
20751                                           ! 2405   {
20752                                           ! 2406    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20753                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20754 50D9           8A46         FC            mov	al,-4[bp]
20755 50DC           30E4                       xor	ah,ah
20756 50DE           8B4E         F8            mov	cx,-8[bp]
20757 50E1           F7E9                       imul	cx
20758                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20759                                           ! Debug: expression subtree swapping
20760 50E3           0246         FD            add	al,-3[bp]
20761 50E6           80D4                   00  adc	ah,*0
20762                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20763 50E9           D1E0                       shl	ax,*1
20764 50EB           50                         push	ax
20765                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20766 50EC           8B46         F8            mov	ax,-8[bp]
20767 50EF           8B4E         F6            mov	cx,-$A[bp]
20768 50F2           F7E9                       imul	cx
20769                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20770 50F4           D1E0                       shl	ax,*1
20771                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20772 50F6           0C                     FF  or	al,#$FF
20773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20774                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20775 50F8           89C3                       mov	bx,ax
20776 50FA           8A46         04            mov	al,4[bp]
20777 50FD           30E4                       xor	ah,ah
20778 50FF           93                         xchg	ax,bx
20779 5100           40                         inc	ax
20780 5101           89D9                       mov	cx,bx
20781 5103           F7E9                       imul	cx
20782                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20783 5105           0346         EE            add	ax,-$12[bp]
20784 5108           44                         inc	sp
20785 5109           44                         inc	sp
20786                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20787 510A           8946         F4            mov	-$C[bp],ax
20788                                           !BCC_EOS
20789                                           ! 2407    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20790                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20791 510D           FF76         F4            push	-$C[bp]
20792                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20793 5110           8A46         FA            mov	al,-6[bp]
20794 5113           30E4                       xor	ah,ah
20795 5115           B1                     03  mov	cl,*3
20796 5117           D3E0                       shl	ax,cl
20797 5119           89C3                       mov	bx,ax
20798 511B           81C3                 01F6  add	bx,#_vga_modes
20799                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20800 511F           FF77         04            push	4[bx]
20801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20802 5122           E8         2ACF            call	_read_word
20803 5125           83C4                   04  add	sp,*4
20804                                           ! Debug: list unsigned short = ax+0 (used reg = )
20805 5128           50                         push	ax
20806                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20807 5129           FF76         06            push	6[bp]
20808                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20809 512C           FF76         FE            push	-2[bp]
20810                                           ! Debug: func () void = write_word+0 (used reg = )
20811 512F           E8         2AED            call	_write_word
20812 5132           83C4                   06  add	sp,*6
20813                                           !BCC_EOS
20814                                           ! 2408   }
20815                                           ! 2409  else
20816                                           ! 2410   {
20817 5135           EB           00            jmp .140
20818                       00005137            .13E:
20819                                           ! 2411   }
20820                                           ! 2412 }
20821                       00005137            .140:
20822 5137           89EC                       mov	sp,bp
20823 5139           5D                         pop	bp
20824 513A           C3                         ret
20825                                           ! 2413 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20826                                           ! Register BX used in function biosfn_read_char_attr
20827                                           ! 2414 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20828                       0000513B            _write_gfx_char_pl4:
20829                                           !BCC_EOS
20830                                           !BCC_EOS
20831                                           !BCC_EOS
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           !BCC_EOS
20835                                           ! 2415 {
20836                                           ! 2416  Bit8u i,j,mask;
20837                                           !BCC_EOS
20838                                           ! 2417  Bit8u *fdata;
20839                                           !BCC_EOS
20840                                           ! 2418  Bit16u addr,dest,src;
20841                                           !BCC_EOS
20842                                           ! 2419  switch(cheight)
20843 513B           55                         push	bp
20844 513C           89E5                       mov	bp,sp
20845 513E           83C4                   F4  add	sp,*-$C
20846 5141           8A46         0E            mov	al,$E[bp]
20847                                           ! 2420   {case 14:
20848 5144           EB           18            jmp .143
20849                                           ! 2421     fdata = &vgafont14;
20850                       00005146            .144:
20851                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20852 5146           BB                   175A  mov	bx,#_vgafont14
20853 5149           895E         FA            mov	-6[bp],bx
20854                                           !BCC_EOS
20855                                           ! 2422     break;
20856 514C           EB           1A            jmp .141
20857                                           !BCC_EOS
20858                                           ! 2423    case 16:
20859                                           ! 2424     fdata = &vgafont16;
20860                       0000514E            .145:
20861                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20862 514E           BB                   255A  mov	bx,#_vgafont16
20863 5151           895E         FA            mov	-6[bp],bx
20864                                           !BCC_EOS
20865                                           ! 2425     break;
20866 5154           EB           12            jmp .141
20867                                           !BCC_EOS
20868                                           ! 2426    default:
20869                                           ! 2427     fdata = &vgafont8;
20870                       00005156            .146:
20871                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20872 5156           BB                   0F5A  mov	bx,#_vgafont8
20873 5159           895E         FA            mov	-6[bp],bx
20874                                           !BCC_EOS
20875                                           ! 2428   }
20876                                           ! 2429  addr=xcurs+ycurs*cheight*nbcols;
20877 515C           EB           0A            jmp .141
20878                       0000515E            .143:
20879 515E           2C                     0E  sub	al,*$E
20880 5160           74           E4            je 	.144
20881 5162           2C                     02  sub	al,*2
20882 5164           74           E8            je 	.145
20883 5166           EB           EE            jmp	.146
20884                       00005168            .141:
20885                       FFFFFFF2            ..FFFB	=	-$E
20886                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20887 5168           8A46         0E            mov	al,$E[bp]
20888 516B           30E4                       xor	ah,ah
20889 516D           89C3                       mov	bx,ax
20890 516F           8A46         0A            mov	al,$A[bp]
20891 5172           30E4                       xor	ah,ah
20892 5174           89D9                       mov	cx,bx
20893 5176           F7E9                       imul	cx
20894                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20895 5178           89C3                       mov	bx,ax
20896 517A           8A46         0C            mov	al,$C[bp]
20897 517D           30E4                       xor	ah,ah
20898 517F           93                         xchg	ax,bx
20899 5180           89D9                       mov	cx,bx
20900 5182           F7E9                       imul	cx
20901                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20902                                           ! Debug: expression subtree swapping
20903 5184           0246         08            add	al,8[bp]
20904 5187           80D4                   00  adc	ah,*0
20905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20906 518A           8946         F8            mov	-8[bp],ax
20907                                           !BCC_EOS
20908                                           ! 2430  src = car * cheight;
20909                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20910 518D           8A46         0E            mov	al,$E[bp]
20911 5190           30E4                       xor	ah,ah
20912 5192           89C3                       mov	bx,ax
20913 5194           8A46         04            mov	al,4[bp]
20914 5197           30E4                       xor	ah,ah
20915 5199           89D9                       mov	cx,bx
20916 519B           F7E9                       imul	cx
20917                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20918 519D           8946         F4            mov	-$C[bp],ax
20919                                           !BCC_EOS
20920                                           ! 2431  outw(0x3c4, 0x0f02);
20921                                           ! Debug: list int = const $F02 (used reg = )
20922 51A0           B8                   0F02  mov	ax,#$F02
20923 51A3           50                         push	ax
20924                                           ! Debug: list int = const $3C4 (used reg = )
20925 51A4           B8                   03C4  mov	ax,#$3C4
20926 51A7           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 51A8           E8         2AB2            call	_outw
20929 51AB           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2432  outw(0x3ce, 0x0205);
20932                                           ! Debug: list int = const $205 (used reg = )
20933 51AE           B8                   0205  mov	ax,#$205
20934 51B1           50                         push	ax
20935                                           ! Debug: list int = const $3CE (used reg = )
20936 51B2           B8                   03CE  mov	ax,#$3CE
20937 51B5           50                         push	ax
20938                                           ! Debug: func () void = outw+0 (used reg = )
20939 51B6           E8         2AA4            call	_outw
20940 51B9           83C4                   04  add	sp,*4
20941                                           !BCC_EOS
20942                                           ! 2433  if(attr&0x80)
20943                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20944 51BC           8A46         06            mov	al,6[bp]
20945 51BF           24                     80  and	al,#$80
20946 51C1           84C0                       test	al,al
20947 51C3           74           10            je  	.147
20948                       000051C5            .148:
20949                                           ! 2434   {
20950                                           ! 2435    outw(0x3ce, 0x1803);
20951                                           ! Debug: list int = const $1803 (used reg = )
20952 51C5           B8                   1803  mov	ax,#$1803
20953 51C8           50                         push	ax
20954                                           ! Debug: list int = const $3CE (used reg = )
20955 51C9           B8                   03CE  mov	ax,#$3CE
20956 51CC           50                         push	ax
20957                                           ! Debug: func () void = outw+0 (used reg = )
20958 51CD           E8         2A8D            call	_outw
20959 51D0           83C4                   04  add	sp,*4
20960                                           !BCC_EOS
20961                                           ! 2436   }
20962                                           ! 2437  else
20963                                           ! 2438   {
20964 51D3           EB           0E            jmp .149
20965                       000051D5            .147:
20966                                           ! 2439    outw(0x3ce, 0x0003);
20967                                           ! Debug: list int = const 3 (used reg = )
20968 51D5           B8                   0003  mov	ax,*3
20969 51D8           50                         push	ax
20970                                           ! Debug: list int = const $3CE (used reg = )
20971 51D9           B8                   03CE  mov	ax,#$3CE
20972 51DC           50                         push	ax
20973                                           ! Debug: func () void = outw+0 (used reg = )
20974 51DD           E8         2A7D            call	_outw
20975 51E0           83C4                   04  add	sp,*4
20976                                           !BCC_EOS
20977                                           ! 2440   }
20978                                           ! 2441  for(i=0;i<cheight;i++)
20979                       000051E3            .149:
20980                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20981 51E3           30C0                       xor	al,al
20982 51E5           8846         FF            mov	-1[bp],al
20983                                           !BCC_EOS
20984                                           !BCC_EOS
20985                                           ! 2442   {
20986 51E8           E9         00A6            br 	.14C
20987                       000051EB            .14D:
20988                                           ! 2443    dest=addr+i*nbcols;
20989                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20990 51EB           8A46         0C            mov	al,$C[bp]
20991 51EE           30E4                       xor	ah,ah
20992 51F0           89C3                       mov	bx,ax
20993 51F2           8A46         FF            mov	al,-1[bp]
20994 51F5           30E4                       xor	ah,ah
20995 51F7           89D9                       mov	cx,bx
20996 51F9           F7E9                       imul	cx
20997                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20998                                           ! Debug: expression subtree swapping
20999 51FB           0346         F8            add	ax,-8[bp]
21000                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21001 51FE           8946         F6            mov	-$A[bp],ax
21002                                           !BCC_EOS
21003                                           ! 2444    for(j=0;j<8;j++)
21004                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21005 5201           30C0                       xor	al,al
21006 5203           8846         FE            mov	-2[bp],al
21007                                           !BCC_EOS
21008                                           !BCC_EOS
21009                                           ! 2445     {
21010 5206           EB           79            jmp .150
21011                       00005208            .151:
21012                                           ! 2446      mask=0x80>>j;
21013                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21014 5208           8A46         FE            mov	al,-2[bp]
21015 520B           30E4                       xor	ah,ah
21016 520D           89C3                       mov	bx,ax
21017 520F           B8                   0080  mov	ax,#$80
21018 5212           89D9                       mov	cx,bx
21019 5214           D3F8                       sar	ax,cl
21020                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21021 5216           8846         FD            mov	-3[bp],al
21022                                           !BCC_EOS
21023                                           ! 2447      outw(0x3ce, (mask << 8) | 0x08);
21024                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21025 5219           8A46         FD            mov	al,-3[bp]
21026 521C           30E4                       xor	ah,ah
21027 521E           88C4                       mov	ah,al
21028 5220           30C0                       xor	al,al
21029                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21030 5222           0C                     08  or	al,*8
21031                                           ! Debug: list unsigned int = ax+0 (used reg = )
21032 5224           50                         push	ax
21033                                           ! Debug: list int = const $3CE (used reg = )
21034 5225           B8                   03CE  mov	ax,#$3CE
21035 5228           50                         push	ax
21036                                           ! Debug: func () void = outw+0 (used reg = )
21037 5229           E8         2A31            call	_outw
21038 522C           83C4                   04  add	sp,*4
21039                                           !BCC_EOS
21040                                           ! 2448      read_byte(0xa000,dest);
21041                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21042 522F           FF76         F6            push	-$A[bp]
21043                                           ! Debug: list unsigned int = const $A000 (used reg = )
21044 5232           B8                   A000  mov	ax,#$A000
21045 5235           50                         push	ax
21046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21047 5236           E8         29A8            call	_read_byte
21048 5239           83C4                   04  add	sp,*4
21049                                           !BCC_EOS
21050                                           ! 2449      if(fdata[src+i]&mask)
21051                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21052 523C           8B46         F4            mov	ax,-$C[bp]
21053 523F           0246         FF            add	al,-1[bp]
21054 5242           80D4                   00  adc	ah,*0
21055                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21056 5245           0346         FA            add	ax,-6[bp]
21057 5248           89C3                       mov	bx,ax
21058                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21059 524A           8A07                       mov	al,[bx]
21060 524C           2246         FD            and	al,-3[bp]
21061 524F           84C0                       test	al,al
21062 5251           74           17            je  	.152
21063                       00005253            .153:
21064                                           ! 2450       {
21065                                           ! 2451        write_byte(0xa000,dest,attr&0x0f);
21066                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21067 5253           8A46         06            mov	al,6[bp]
21068 5256           24                     0F  and	al,*$F
21069                                           ! Debug: list unsigned char = al+0 (used reg = )
21070 5258           30E4                       xor	ah,ah
21071 525A           50                         push	ax
21072                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21073 525B           FF76         F6            push	-$A[bp]
21074                                           ! Debug: list unsigned int = const $A000 (used reg = )
21075 525E           B8                   A000  mov	ax,#$A000
21076 5261           50                         push	ax
21077                                           ! Debug: func () void = write_byte+0 (used reg = )
21078 5262           E8         29A2            call	_write_byte
21079 5265           83C4                   06  add	sp,*6
21080                                           !BCC_EOS
21081                                           ! 2452       }
21082                                           ! 2453      else
21083                                           ! 2454       {
21084 5268           EB           10            jmp .154
21085                       0000526A            .152:
21086                                           ! 2455        write_byte(0xa000,dest,0x00);
21087                                           ! Debug: list int = const 0 (used reg = )
21088 526A           31C0                       xor	ax,ax
21089 526C           50                         push	ax
21090                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21091 526D           FF76         F6            push	-$A[bp]
21092                                           ! Debug: list unsigned int = const $A000 (used reg = )
21093 5270           B8                   A000  mov	ax,#$A000
21094 5273           50                         push	ax
21095                                           ! Debug: func () void = write_byte+0 (used reg = )
21096 5274           E8         2990            call	_write_byte
21097 5277           83C4                   06  add	sp,*6
21098                                           !BCC_EOS
21099                                           ! 2456       }
21100                                           ! 2457     }
21101                       0000527A            .154:
21102                                           ! 2458   }
21103                       0000527A            .14F:
21104                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21105 527A           8A46         FE            mov	al,-2[bp]
21106 527D           40                         inc	ax
21107 527E           8846         FE            mov	-2[bp],al
21108                       00005281            .150:
21109                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21110 5281           8A46         FE            mov	al,-2[bp]
21111 5284           3C                     08  cmp	al,*8
21112 5286         0F82         FF7E            blo 	.151
21113                       0000528A            .155:
21114                       0000528A            .14E:
21115                                           ! 2459 #asm
21116                       0000528A            .14B:
21117                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21118 528A           8A46         FF            mov	al,-1[bp]
21119 528D           40                         inc	ax
21120 528E           8846         FF            mov	-1[bp],al
21121                       00005291            .14C:
21122                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21123 5291           8A46         FF            mov	al,-1[bp]
21124 5294           3A46         0E            cmp	al,$E[bp]
21125 5297         0F82         FF50            blo 	.14D
21126                       0000529B            .156:
21127                       0000529B            .14A:
21128                                           !BCC_EOS
21129                                           !BCC_ASM
21130                       0000000A            _write_gfx_char_pl4.j	set	$A
21131                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21132                       00000006            _write_gfx_char_pl4.fdata	set	6
21133                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21134                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21135                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21136                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21137                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21138                       0000000B            _write_gfx_char_pl4.i	set	$B
21139                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21140                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21141                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21142                       00000009            _write_gfx_char_pl4.mask	set	9
21143                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21144                       00000002            _write_gfx_char_pl4.dest	set	2
21145                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21146                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21147                       00000008            .write_gfx_char_pl4.xcurs	set	8
21148                       00000000            _write_gfx_char_pl4.src	set	0
21149                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21150                       00000012            _write_gfx_char_pl4.attr	set	$12
21151                       00000006            .write_gfx_char_pl4.attr	set	6
21152                       00000010            _write_gfx_char_pl4.car	set	$10
21153                       00000004            .write_gfx_char_pl4.car	set	4
21154                       00000004            _write_gfx_char_pl4.addr	set	4
21155                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21156 529B           BA                   03CE    mov dx, # 0x3ce
21157 529E           B8                   FF08    mov ax, #0xff08
21158 52A1           EF                           out dx, ax
21159 52A2           B8                   0005    mov ax, #0x0005
21160 52A5           EF                           out dx, ax
21161 52A6           B8                   0003    mov ax, #0x0003
21162 52A9           EF                           out dx, ax
21163                                           ! 2467 endasm
21164                                           !BCC_ENDASM
21165                                           !BCC_EOS
21166                                           ! 2468 }
21167 52AA           89EC                       mov	sp,bp
21168 52AC           5D                         pop	bp
21169 52AD           C3                         ret
21170                                           ! 2469 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21171                                           ! Register BX used in function write_gfx_char_pl4
21172                                           ! 2470 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21173                       000052AE            _write_gfx_char_cga:
21174                                           !BCC_EOS
21175                                           !BCC_EOS
21176                                           !BCC_EOS
21177                                           !BCC_EOS
21178                                           !BCC_EOS
21179                                           !BCC_EOS
21180                                           ! 2471 {
21181                                           ! 2472  Bit8u i,j,mask,da
21182                                           ! 2472 ta;
21183                                           !BCC_EOS
21184                                           ! 2473  Bit8u *fdata;
21185                                           !BCC_EOS
21186                                           ! 2474  Bit16u addr,dest,src;
21187                                           !BCC_EOS
21188                                           ! 2475  fdata = &vgafont8;
21189 52AE           55                         push	bp
21190 52AF           89E5                       mov	bp,sp
21191 52B1           83C4                   F4  add	sp,*-$C
21192                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21193 52B4           BB                   0F5A  mov	bx,#_vgafont8
21194 52B7           895E         FA            mov	-6[bp],bx
21195                                           !BCC_EOS
21196                                           ! 2476  addr=(xcurs*bpp)+ycurs*320;
21197                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21198 52BA           8A46         0A            mov	al,$A[bp]
21199 52BD           30E4                       xor	ah,ah
21200 52BF           B9                   0140  mov	cx,#$140
21201 52C2           F7E9                       imul	cx
21202 52C4           50                         push	ax
21203                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21204 52C5           8A46         0E            mov	al,$E[bp]
21205 52C8           30E4                       xor	ah,ah
21206 52CA           89C3                       mov	bx,ax
21207 52CC           8A46         08            mov	al,8[bp]
21208 52CF           30E4                       xor	ah,ah
21209 52D1           89D9                       mov	cx,bx
21210 52D3           F7E9                       imul	cx
21211                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21212 52D5           0346         F2            add	ax,-$E[bp]
21213 52D8           44                         inc	sp
21214 52D9           44                         inc	sp
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21216 52DA           8946         F8            mov	-8[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2477  src = car * 8;
21219                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21220 52DD           8A46         04            mov	al,4[bp]
21221 52E0           30E4                       xor	ah,ah
21222 52E2           B1                     03  mov	cl,*3
21223 52E4           D3E0                       shl	ax,cl
21224                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21225 52E6           8946         F4            mov	-$C[bp],ax
21226                                           !BCC_EOS
21227                                           ! 2478  for(i=0;i<8;i++)
21228                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21229 52E9           30C0                       xor	al,al
21230 52EB           8846         FF            mov	-1[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2479   {
21234 52EE           E9         01B3            br 	.159
21235                       000052F1            .15A:
21236                                           ! 2480    dest=addr+(i>>1)*80;
21237                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21238 52F1           8A46         FF            mov	al,-1[bp]
21239 52F4           30E4                       xor	ah,ah
21240 52F6           D1E8                       shr	ax,*1
21241                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21242 52F8           B9                   0050  mov	cx,*$50
21243 52FB           F7E9                       imul	cx
21244                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21245                                           ! Debug: expression subtree swapping
21246 52FD           0346         F8            add	ax,-8[bp]
21247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21248 5300           8946         F6            mov	-$A[bp],ax
21249                                           !BCC_EOS
21250                                           ! 2481    if (i & 1) dest += 0x2000;
21251                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21252 5303           8A46         FF            mov	al,-1[bp]
21253 5306           24                     01  and	al,*1
21254 5308           84C0                       test	al,al
21255 530A           74           09            je  	.15B
21256                       0000530C            .15C:
21257                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21258 530C           8B46         F6            mov	ax,-$A[bp]
21259 530F           05                   2000  add	ax,#$2000
21260 5312           8946         F6            mov	-$A[bp],ax
21261                                           !BCC_EOS
21262                                           ! 2482    mask = 0x80;
21263                       00005315            .15B:
21264                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21265 5315           B0                     80  mov	al,#$80
21266 5317           8846         FD            mov	-3[bp],al
21267                                           !BCC_EOS
21268                                           ! 2483    if (bpp == 1)
21269                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21270 531A           8A46         0E            mov	al,$E[bp]
21271 531D           3C                     01  cmp	al,*1
21272 531F         0F85         00B3            bne 	.15D
21273                       00005323            .15E:
21274                                           ! 2484     {
21275                                           ! 2485      if (attr & 0x80)
21276                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21277 5323           8A46         06            mov	al,6[bp]
21278 5326           24                     80  and	al,#$80
21279 5328           84C0                       test	al,al
21280 532A           74           12            je  	.15F
21281                       0000532C            .160:
21282                                           ! 2486       {
21283                                           ! 2487        data = read_byte(0xb800,dest);
21284                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21285 532C           FF76         F6            push	-$A[bp]
21286                                           ! Debug: list unsigned int = const $B800 (used reg = )
21287 532F           B8                   B800  mov	ax,#$B800
21288 5332           50                         push	ax
21289                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21290 5333           E8         28AB            call	_read_byte
21291 5336           83C4                   04  add	sp,*4
21292                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21293 5339           8846         FC            mov	-4[bp],al
21294                                           !BCC_EOS
21295                                           ! 2488       }
21296                                           ! 2489      else
21297                                           ! 2490       {
21298 533C           EB           05            jmp .161
21299                       0000533E            .15F:
21300                                           ! 2491        data = 0x00;
21301                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21302 533E           30C0                       xor	al,al
21303 5340           8846         FC            mov	-4[bp],al
21304                                           !BCC_EOS
21305                                           ! 2492       }
21306                                           ! 2493      for(j=0;j<8;j++)
21307                       00005343            .161:
21308                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21309 5343           30C0                       xor	al,al
21310 5345           8846         FE            mov	-2[bp],al
21311                                           !BCC_EOS
21312                                           !BCC_EOS
21313                                           ! 2494       {
21314 5348           EB           6F            jmp .164
21315                       0000534A            .165:
21316                                           ! 2495        if (fdata[src+i] & mask)
21317                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21318 534A           8B46         F4            mov	ax,-$C[bp]
21319 534D           0246         FF            add	al,-1[bp]
21320 5350           80D4                   00  adc	ah,*0
21321                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21322 5353           0346         FA            add	ax,-6[bp]
21323 5356           89C3                       mov	bx,ax
21324                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21325 5358           8A07                       mov	al,[bx]
21326 535A           2246         FD            and	al,-3[bp]
21327 535D           84C0                       test	al,al
21328 535F           74           47            je  	.166
21329                       00005361            .167:
21330                                           ! 2496         {
21331                                           ! 2497          if (attr & 0x80)
21332                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21333 5361           8A46         06            mov	al,6[bp]
21334 5364           24                     80  and	al,#$80
21335 5366           84C0                       test	al,al
21336 5368           74           20            je  	.168
21337                       0000536A            .169:
21338                                           ! 2498           {
21339                                           ! 2499            data ^= (attr & 0x01) << (7-j);
21340                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21341 536A           B8                   0007  mov	ax,*7
21342 536D           2A46         FE            sub	al,-2[bp]
21343 5370           80DC                   00  sbb	ah,*0
21344 5373           50                         push	ax
21345                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21346 5374           8A46         06            mov	al,6[bp]
21347 5377           24                     01  and	al,*1
21348                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21349 5379           30E4                       xor	ah,ah
21350 537B           8B4E         F2            mov	cx,-$E[bp]
21351 537E           D3E0                       shl	ax,cl
21352 5380           44                         inc	sp
21353 5381           44                         inc	sp
21354                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21355 5382           3246         FC            xor	al,-4[bp]
21356 5385           8846         FC            mov	-4[bp],al
21357                                           !BCC_EOS
21358                                           ! 2500           }
21359                                           ! 2501          else
21360                                           ! 2502           {
21361 5388           EB           1E            jmp .16A
21362                       0000538A            .168:
21363                                           ! 2503            data |= (attr & 0x01) << (7-j);
21364                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21365 538A           B8                   0007  mov	ax,*7
21366 538D           2A46         FE            sub	al,-2[bp]
21367 5390           80DC                   00  sbb	ah,*0
21368 5393           50                         push	ax
21369                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21370 5394           8A46         06            mov	al,6[bp]
21371 5397           24                     01  and	al,*1
21372                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21373 5399           30E4                       xor	ah,ah
21374 539B           8B4E         F2            mov	cx,-$E[bp]
21375 539E           D3E0                       shl	ax,cl
21376 53A0           44                         inc	sp
21377 53A1           44                         inc	sp
21378                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21379 53A2           0A46         FC            or	al,-4[bp]
21380 53A5           8846         FC            mov	-4[bp],al
21381                                           !BCC_EOS
21382                                           ! 2504           }
21383                                           ! 2505         }
21384                       000053A8            .16A:
21385                                           ! 2506        mask >>= 1;
21386                       000053A8            .166:
21387                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21388 53A8           8A46         FD            mov	al,-3[bp]
21389 53AB           30E4                       xor	ah,ah
21390 53AD           D1E8                       shr	ax,*1
21391 53AF           8846         FD            mov	-3[bp],al
21392                                           !BCC_EOS
21393                                           ! 2507       }
21394                                           ! 2508      write_byte(0xb800,dest,data);
21395                       000053B2            .163:
21396                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21397 53B2           8A46         FE            mov	al,-2[bp]
21398 53B5           40                         inc	ax
21399 53B6           8846         FE            mov	-2[bp],al
21400                       000053B9            .164:
21401                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21402 53B9           8A46         FE            mov	al,-2[bp]
21403 53BC           3C                     08  cmp	al,*8
21404 53BE           72           8A            jb 	.165
21405                       000053C0            .16B:
21406                       000053C0            .162:
21407                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21408 53C0           8A46         FC            mov	al,-4[bp]
21409 53C3           30E4                       xor	ah,ah
21410 53C5           50                         push	ax
21411                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21412 53C6           FF76         F6            push	-$A[bp]
21413                                           ! Debug: list unsigned int = const $B800 (used reg = )
21414 53C9           B8                   B800  mov	ax,#$B800
21415 53CC           50                         push	ax
21416                                           ! Debug: func () void = write_byte+0 (used reg = )
21417 53CD           E8         2837            call	_write_byte
21418 53D0           83C4                   06  add	sp,*6
21419                                           !BCC_EOS
21420                                           ! 2509     }
21421                                           ! 2510    else
21422                                           ! 2511     {
21423 53D3           E9         00C7            br 	.16C
21424                       000053D6            .15D:
21425                                           ! 2512      while (mask > 0)
21426                                           ! 2513       {
21427 53D6           E9         00BB            br 	.16E
21428                       000053D9            .16F:
21429                                           ! 2514        if (attr & 0x80)
21430                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21431 53D9           8A46         06            mov	al,6[bp]
21432 53DC           24                     80  and	al,#$80
21433 53DE           84C0                       test	al,al
21434 53E0           74           12            je  	.170
21435                       000053E2            .171:
21436                                           ! 2515         {
21437                                           ! 2516          data = read_byte(0xb800,dest);
21438                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21439 53E2           FF76         F6            push	-$A[bp]
21440                                           ! Debug: list unsigned int = const $B800 (used reg = )
21441 53E5           B8                   B800  mov	ax,#$B800
21442 53E8           50                         push	ax
21443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21444 53E9           E8         27F5            call	_read_byte
21445 53EC           83C4                   04  add	sp,*4
21446                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21447 53EF           8846         FC            mov	-4[bp],al
21448                                           !BCC_EOS
21449                                           ! 2517         }
21450                                           ! 2518        else
21451                                           ! 2519         {
21452 53F2           EB           05            jmp .172
21453                       000053F4            .170:
21454                                           ! 2520          data = 0x00;
21455                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21456 53F4           30C0                       xor	al,al
21457 53F6           8846         FC            mov	-4[bp],al
21458                                           !BCC_EOS
21459                                           ! 2521         }
21460                                           ! 2522        for(j=0;j<4;j++)
21461                       000053F9            .172:
21462                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21463 53F9           30C0                       xor	al,al
21464 53FB           8846         FE            mov	-2[bp],al
21465                                           !BCC_EOS
21466                                           !BCC_EOS
21467                                           ! 2523         {
21468 53FE           EB           73            jmp .175
21469                       00005400            .176:
21470                                           ! 2524          if (fdata[src+i] & mask)
21471                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21472 5400           8B46         F4            mov	ax,-$C[bp]
21473 5403           0246         FF            add	al,-1[bp]
21474 5406           80D4                   00  adc	ah,*0
21475                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21476 5409           0346         FA            add	ax,-6[bp]
21477 540C           89C3                       mov	bx,ax
21478                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21479 540E           8A07                       mov	al,[bx]
21480 5410           2246         FD            and	al,-3[bp]
21481 5413           84C0                       test	al,al
21482 5415           74           4B            je  	.177
21483                       00005417            .178:
21484                                           ! 2525           {
21485                                           ! 2526            if (attr & 0x80)
21486                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21487 5417           8A46         06            mov	al,6[bp]
21488 541A           24                     80  and	al,#$80
21489 541C           84C0                       test	al,al
21490 541E           74           22            je  	.179
21491                       00005420            .17A:
21492                                           ! 2527             {
21493                                           ! 2528              data ^= (attr & 0x03) << ((3-j)*2);
21494                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21495 5420           B8                   0003  mov	ax,*3
21496 5423           2A46         FE            sub	al,-2[bp]
21497 5426           80DC                   00  sbb	ah,*0
21498                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21499 5429           D1E0                       shl	ax,*1
21500 542B           50                         push	ax
21501                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21502 542C           8A46         06            mov	al,6[bp]
21503 542F           24                     03  and	al,*3
21504                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21505 5431           30E4                       xor	ah,ah
21506 5433           8B4E         F2            mov	cx,-$E[bp]
21507 5436           D3E0                       shl	ax,cl
21508 5438           44                         inc	sp
21509 5439           44                         inc	sp
21510                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21511 543A           3246         FC            xor	al,-4[bp]
21512 543D           8846         FC            mov	-4[bp],al
21513                                           !BCC_EOS
21514                                           ! 2529             }
21515                                           ! 2530            else
21516                                           ! 2531             {
21517 5440           EB           20            jmp .17B
21518                       00005442            .179:
21519                                           ! 2532              data |= (attr & 0x03) << ((3-j)*2);
21520                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21521 5442           B8                   0003  mov	ax,*3
21522 5445           2A46         FE            sub	al,-2[bp]
21523 5448           80DC                   00  sbb	ah,*0
21524                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21525 544B           D1E0                       shl	ax,*1
21526 544D           50                         push	ax
21527                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21528 544E           8A46         06            mov	al,6[bp]
21529 5451           24                     03  and	al,*3
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 5453           30E4                       xor	ah,ah
21532 5455           8B4E         F2            mov	cx,-$E[bp]
21533 5458           D3E0                       shl	ax,cl
21534 545A           44                         inc	sp
21535 545B           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 545C           0A46         FC            or	al,-4[bp]
21538 545F           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2533             }
21541                                           ! 2534           }
21542                       00005462            .17B:
21543                                           ! 2535          mask >>= 1;
21544                       00005462            .177:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 5462           8A46         FD            mov	al,-3[bp]
21547 5465           30E4                       xor	ah,ah
21548 5467           D1E8                       shr	ax,*1
21549 5469           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2536         }
21552                                           ! 2537        write_byte(0xb800,dest,data);
21553                       0000546C            .174:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 546C           8A46         FE            mov	al,-2[bp]
21556 546F           40                         inc	ax
21557 5470           8846         FE            mov	-2[bp],al
21558                       00005473            .175:
21559                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21560 5473           8A46         FE            mov	al,-2[bp]
21561 5476           3C                     04  cmp	al,*4
21562 5478           72           86            jb 	.176
21563                       0000547A            .17C:
21564                       0000547A            .173:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 547A           8A46         FC            mov	al,-4[bp]
21567 547D           30E4                       xor	ah,ah
21568 547F           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 5480           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 5483           B8                   B800  mov	ax,#$B800
21573 5486           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 5487           E8         277D            call	_write_byte
21576 548A           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2538        dest += 1;
21579                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21580 548D           8B46         F6            mov	ax,-$A[bp]
21581 5490           40                         inc	ax
21582 5491           8946         F6            mov	-$A[bp],ax
21583                                           !BCC_EOS
21584                                           ! 2539       }
21585                                           ! 2540     }
21586                       00005494            .16E:
21587                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21588 5494           8A46         FD            mov	al,-3[bp]
21589 5497           84C0                       test	al,al
21590 5499         0F85         FF3C            bne 	.16F
21591                       0000549D            .17D:
21592                       0000549D            .16D:
21593                                           ! 2541   }
21594                       0000549D            .16C:
21595                                           ! 2542 }
21596                       0000549D            .158:
21597                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21598 549D           8A46         FF            mov	al,-1[bp]
21599 54A0           40                         inc	ax
21600 54A1           8846         FF            mov	-1[bp],al
21601                       000054A4            .159:
21602                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21603 54A4           8A46         FF            mov	al,-1[bp]
21604 54A7           3C                     08  cmp	al,*8
21605 54A9         0F82         FE44            blo 	.15A
21606                       000054AD            .17E:
21607                       000054AD            .157:
21608 54AD           89EC                       mov	sp,bp
21609 54AF           5D                         pop	bp
21610 54B0           C3                         ret
21611                                           ! 2543 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21612                                           ! Register BX used in function write_gfx_char_cga
21613                                           ! 2544 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21614                       000054B1            _write_gfx_char_lin:
21615                                           !BCC_EOS
21616                                           !BCC_EOS
21617                                           !BCC_EOS
21618                                           !BCC_EOS
21619                                           !BCC_EOS
21620                                           ! 2545 {
21621                                           ! 2546  Bit8u i,j,mask,data;
21622                                           !BCC_EOS
21623                                           ! 2547  Bit8u *fdata;
21624                                           !BCC_EOS
21625                                           ! 2548  Bit16u addr,dest,src;
21626                                           !BCC_EOS
21627                                           ! 2549  fdata = &vgafont8;
21628 54B1           55                         push	bp
21629 54B2           89E5                       mov	bp,sp
21630 54B4           83C4                   F4  add	sp,*-$C
21631                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21632 54B7           BB                   0F5A  mov	bx,#_vgafont8
21633 54BA           895E         FA            mov	-6[bp],bx
21634                                           !BCC_EOS
21635                                           ! 2550  addr=xcurs*8+ycurs*nbcols*64;
21636                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21637 54BD           8A46         0C            mov	al,$C[bp]
21638 54C0           30E4                       xor	ah,ah
21639 54C2           89C3                       mov	bx,ax
21640 54C4           8A46         0A            mov	al,$A[bp]
21641 54C7           30E4                       xor	ah,ah
21642 54C9           89D9                       mov	cx,bx
21643 54CB           F7E9                       imul	cx
21644                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21645 54CD           B1                     06  mov	cl,*6
21646 54CF           D3E0                       shl	ax,cl
21647 54D1           50                         push	ax
21648                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21649 54D2           8A46         08            mov	al,8[bp]
21650 54D5           30E4                       xor	ah,ah
21651 54D7           B1                     03  mov	cl,*3
21652 54D9           D3E0                       shl	ax,cl
21653                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21654 54DB           0346         F2            add	ax,-$E[bp]
21655 54DE           44                         inc	sp
21656 54DF           44                         inc	sp
21657                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21658 54E0           8946         F8            mov	-8[bp],ax
21659                                           !BCC_EOS
21660                                           ! 2551  src = car * 8;
21661                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21662 54E3           8A46         04            mov	al,4[bp]
21663 54E6           30E4                       xor	ah,ah
21664 54E8           B1                     03  mov	cl,*3
21665 54EA           D3E0                       shl	ax,cl
21666                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21667 54EC           8946         F4            mov	-$C[bp],ax
21668                                           !BCC_EOS
21669                                           ! 2552  for(i=0;i<8;i++)
21670                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21671 54EF           30C0                       xor	al,al
21672 54F1           8846         FF            mov	-1[bp],al
21673                                           !BCC_EOS
21674                                           !BCC_EOS
21675                                           ! 2553   {
21676 54F4           E9         0081            br 	.181
21677                       000054F7            .182:
21678                                           ! 2554    dest=addr+i*nbcols*8;
21679                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21680 54F7           8A46         0C            mov	al,$C[bp]
21681 54FA           30E4                       xor	ah,ah
21682 54FC           89C3                       mov	bx,ax
21683 54FE           8A46         FF            mov	al,-1[bp]
21684 5501           30E4                       xor	ah,ah
21685 5503           89D9                       mov	cx,bx
21686 5505           F7E9                       imul	cx
21687                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21688 5507           B1                     03  mov	cl,*3
21689 5509           D3E0                       shl	ax,cl
21690                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21691                                           ! Debug: expression subtree swapping
21692 550B           0346         F8            add	ax,-8[bp]
21693                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21694 550E           8946         F6            mov	-$A[bp],ax
21695                                           !BCC_EOS
21696                                           ! 2555    mask = 0x80;
21697                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21698 5511           B0                     80  mov	al,#$80
21699 5513           8846         FD            mov	-3[bp],al
21700                                           !BCC_EOS
21701                                           ! 2556    for(j=0;j<8;j++)
21702                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21703 5516           30C0                       xor	al,al
21704 5518           8846         FE            mov	-2[bp],al
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           ! 2557     {
21708 551B           EB           4D            jmp .185
21709                       0000551D            .186:
21710                                           ! 2558      data = 0x00;
21711                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21712 551D           30C0                       xor	al,al
21713 551F           8846         FC            mov	-4[bp],al
21714                                           !BCC_EOS
21715                                           ! 2559      if (fdata[src+i] & mask)
21716                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21717 5522           8B46         F4            mov	ax,-$C[bp]
21718 5525           0246         FF            add	al,-1[bp]
21719 5528           80D4                   00  adc	ah,*0
21720                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21721 552B           0346         FA            add	ax,-6[bp]
21722 552E           89C3                       mov	bx,ax
21723                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21724 5530           8A07                       mov	al,[bx]
21725 5532           2246         FD            and	al,-3[bp]
21726 5535           84C0                       test	al,al
21727 5537           74           06            je  	.187
21728                       00005539            .188:
21729                                           ! 2560       {
21730                                           ! 2561        data = attr;
21731                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21732 5539           8A46         06            mov	al,6[bp]
21733 553C           8846         FC            mov	-4[bp],al
21734                                           !BCC_EOS
21735                                           ! 2562       }
21736                                           ! 2563      write_byte(0xa000,dest+j,data);
21737                       0000553F            .187:
21738                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21739 553F           8A46         FC            mov	al,-4[bp]
21740 5542           30E4                       xor	ah,ah
21741 5544           50                         push	ax
21742                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21743 5545           8B46         F6            mov	ax,-$A[bp]
21744 5548           0246         FE            add	al,-2[bp]
21745 554B           80D4                   00  adc	ah,*0
21746                                           ! Debug: list unsigned int = ax+0 (used reg = )
21747 554E           50                         push	ax
21748                                           ! Debug: list unsigned int = const $A000 (used reg = )
21749 554F           B8                   A000  mov	ax,#$A000
21750 5552           50                         push	ax
21751                                           ! Debug: func () void = write_byte+0 (used reg = )
21752 5553           E8         26B1            call	_write_byte
21753 5556           83C4                   06  add	sp,*6
21754                                           !BCC_EOS
21755                                           ! 2564      mask >>= 1;
21756                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21757 5559           8A46         FD            mov	al,-3[bp]
21758 555C           30E4                       xor	ah,ah
21759 555E           D1E8                       shr	ax,*1
21760 5560           8846         FD            mov	-3[bp],al
21761                                           !BCC_EOS
21762                                           ! 2565     }
21763                                           ! 2566   }
21764                       00005563            .184:
21765                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21766 5563           8A46         FE            mov	al,-2[bp]
21767 5566           40                         inc	ax
21768 5567           8846         FE            mov	-2[bp],al
21769                       0000556A            .185:
21770                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21771 556A           8A46         FE            mov	al,-2[bp]
21772 556D           3C                     08  cmp	al,*8
21773 556F           72           AC            jb 	.186
21774                       00005571            .189:
21775                       00005571            .183:
21776                                           ! 2567 }
21777                       00005571            .180:
21778                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21779 5571           8A46         FF            mov	al,-1[bp]
21780 5574           40                         inc	ax
21781 5575           8846         FF            mov	-1[bp],al
21782                       00005578            .181:
21783                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21784 5578           8A46         FF            mov	al,-1[bp]
21785 557B           3C                     08  cmp	al,*8
21786 557D         0F82         FF76            blo 	.182
21787                       00005581            .18A:
21788                       00005581            .17F:
21789 5581           89EC                       mov	sp,bp
21790 5583           5D                         pop	bp
21791 5584           C3                         ret
21792                                           ! 2568 static void biosfn_write_char_attr (car,page,attr,count)
21793                                           ! Register BX used in function write_gfx_char_lin
21794                                           ! 2569 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21795                       00005585            _biosfn_write_char_attr:
21796                                           !BCC_EOS
21797                                           !BCC_EOS
21798                                           !BCC_EOS
21799                                           !BCC_EOS
21800                                           ! 2570 {
21801                                           ! 2571  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21802                                           !BCC_EOS
21803                                           ! 2572  Bit16u nbcols,nbrows,address;
21804                                           !BCC_EOS
21805                                           ! 2573  Bit16u cursor,dummy;
21806                                           !BCC_EOS
21807                                           ! 2574  mode=read_byte(0x40,0x49);
21808 5585           55                         push	bp
21809 5586           89E5                       mov	bp,sp
21810 5588           83C4                   F0  add	sp,*-$10
21811                                           ! Debug: list int = const $49 (used reg = )
21812 558B           B8                   0049  mov	ax,*$49
21813 558E           50                         push	ax
21814                                           ! Debug: list int = const $40 (used reg = )
21815 558F           B8                   0040  mov	ax,*$40
21816 5592           50                         push	ax
21817                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21818 5593           E8         264B            call	_read_byte
21819 5596           83C4                   04  add	sp,*4
21820                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21821 5599           8846         FC            mov	-4[bp],al
21822                                           !BCC_EOS
21823                                           ! 2575  line=find_vga_entry(mode);
21824                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21825 559C           8A46         FC            mov	al,-4[bp]
21826 559F           30E4                       xor	ah,ah
21827 55A1           50                         push	ax
21828                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21829 55A2           E8         2550            call	_find_vga_entry
21830 55A5           44                         inc	sp
21831 55A6           44                         inc	sp
21832                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21833 55A7           8846         FB            mov	-5[bp],al
21834                                           !BCC_EOS
21835                                           ! 2576  if(line==0xFF)return;
21836                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21837 55AA           8A46         FB            mov	al,-5[bp]
21838 55AD           3C                     FF  cmp	al,#$FF
21839 55AF           75           04            jne 	.18B
21840                       000055B1            .18C:
21841 55B1           89EC                       mov	sp,bp
21842 55B3           5D                         pop	bp
21843 55B4           C3                         ret
21844                                           !BCC_EOS
21845                                           ! 2577  biosfn_get_cursor_pos(page,&dummy,&
21846                       000055B5            .18B:
21847                                           ! 2577 cursor);
21848                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21849 55B5           8D5E         F2            lea	bx,-$E[bp]
21850 55B8           53                         push	bx
21851                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21852 55B9           8D5E         F0            lea	bx,-$10[bp]
21853 55BC           53                         push	bx
21854                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21855 55BD           8A46         06            mov	al,6[bp]
21856 55C0           30E4                       xor	ah,ah
21857 55C2           50                         push	ax
21858                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21859 55C3           E8         EE7C            call	_biosfn_get_cursor_pos
21860 55C6           83C4                   06  add	sp,*6
21861                                           !BCC_EOS
21862                                           ! 2578  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21863                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21864 55C9           8A46         F2            mov	al,-$E[bp]
21865                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21866 55CC           8846         FE            mov	-2[bp],al
21867                                           !BCC_EOS
21868                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21869 55CF           8B46         F2            mov	ax,-$E[bp]
21870 55D2           30C0                       xor	al,al
21871                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21872 55D4           88E0                       mov	al,ah
21873 55D6           30E4                       xor	ah,ah
21874                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21875 55D8           8846         FD            mov	-3[bp],al
21876                                           !BCC_EOS
21877                                           ! 2579  nbrows=read_byte(0x40,0x84)+1;
21878                                           ! Debug: list int = const $84 (used reg = )
21879 55DB           B8                   0084  mov	ax,#$84
21880 55DE           50                         push	ax
21881                                           ! Debug: list int = const $40 (used reg = )
21882 55DF           B8                   0040  mov	ax,*$40
21883 55E2           50                         push	ax
21884                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21885 55E3           E8         25FB            call	_read_byte
21886 55E6           83C4                   04  add	sp,*4
21887                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21888 55E9           30E4                       xor	ah,ah
21889                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21890 55EB           40                         inc	ax
21891 55EC           8946         F6            mov	-$A[bp],ax
21892                                           !BCC_EOS
21893                                           ! 2580  nbcols=read_word(0x40,0x4A);
21894                                           ! Debug: list int = const $4A (used reg = )
21895 55EF           B8                   004A  mov	ax,*$4A
21896 55F2           50                         push	ax
21897                                           ! Debug: list int = const $40 (used reg = )
21898 55F3           B8                   0040  mov	ax,*$40
21899 55F6           50                         push	ax
21900                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21901 55F7           E8         25FA            call	_read_word
21902 55FA           83C4                   04  add	sp,*4
21903                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21904 55FD           8946         F8            mov	-8[bp],ax
21905                                           !BCC_EOS
21906                                           ! 2581  if(vga_modes[line].class==0x00)
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21908 5600           8A46         FB            mov	al,-5[bp]
21909 5603           30E4                       xor	ah,ah
21910 5605           B1                     03  mov	cl,*3
21911 5607           D3E0                       shl	ax,cl
21912 5609           89C3                       mov	bx,ax
21913 560B           81C3                 01F6  add	bx,#_vga_modes
21914                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21915 560F           8A47         01            mov	al,1[bx]
21916 5612           84C0                       test	al,al
21917 5614           75           6A            jne 	.18D
21918                       00005616            .18E:
21919                                           ! 2582   {
21920                                           ! 2583    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21921                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21922 5616           8A46         FD            mov	al,-3[bp]
21923 5619           30E4                       xor	ah,ah
21924 561B           8B4E         F8            mov	cx,-8[bp]
21925 561E           F7E9                       imul	cx
21926                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21927                                           ! Debug: expression subtree swapping
21928 5620           0246         FE            add	al,-2[bp]
21929 5623           80D4                   00  adc	ah,*0
21930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21931 5626           D1E0                       shl	ax,*1
21932 5628           50                         push	ax
21933                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21934 5629           8B46         F8            mov	ax,-8[bp]
21935 562C           8B4E         F6            mov	cx,-$A[bp]
21936 562F           F7E9                       imul	cx
21937                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21938 5631           D1E0                       shl	ax,*1
21939                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21940 5633           0C                     FF  or	al,#$FF
21941                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21942                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21943 5635           89C3                       mov	bx,ax
21944 5637           8A46         06            mov	al,6[bp]
21945 563A           30E4                       xor	ah,ah
21946 563C           93                         xchg	ax,bx
21947 563D           40                         inc	ax
21948 563E           89D9                       mov	cx,bx
21949 5640           F7E9                       imul	cx
21950                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21951 5642           0346         EE            add	ax,-$12[bp]
21952 5645           44                         inc	sp
21953 5646           44                         inc	sp
21954                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21955 5647           8946         F4            mov	-$C[bp],ax
21956                                           !BCC_EOS
21957                                           ! 2584    dummy=((Bit16u)attr<<8)+car;
21958                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21959 564A           8A46         08            mov	al,8[bp]
21960 564D           30E4                       xor	ah,ah
21961                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21962 564F           88C4                       mov	ah,al
21963 5651           30C0                       xor	al,al
21964                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21965 5653           0246         04            add	al,4[bp]
21966 5656           80D4                   00  adc	ah,*0
21967                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21968 5659           8946         F0            mov	-$10[bp],ax
21969                                           !BCC_EOS
21970                                           ! 2585    memsetw(vga_modes[line].sstart,address,dummy,count);
21971                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21972 565C           FF76         0A            push	$A[bp]
21973                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21974 565F           FF76         F0            push	-$10[bp]
21975                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21976 5662           FF76         F4            push	-$C[bp]
21977                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21978 5665           8A46         FB            mov	al,-5[bp]
21979 5668           30E4                       xor	ah,ah
21980 566A           B1                     03  mov	cl,*3
21981 566C           D3E0                       shl	ax,cl
21982 566E           89C3                       mov	bx,ax
21983 5670           81C3                 01F6  add	bx,#_vga_modes
21984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21985 5674           FF77         04            push	4[bx]
21986                                           ! Debug: func () void = memsetw+0 (used reg = )
21987 5677           E8         24E2            call	_memsetw
21988 567A           83C4                   08  add	sp,*8
21989                                           !BCC_EOS
21990                                           ! 2586   }
21991                                           ! 2587  else
21992                                           ! 2588   {
21993 567D           E9         00F3            br 	.18F
21994                       00005680            .18D:
21995                                           ! 2589    cheight=video_param_table[line_to_vpti[line]].cheight;
21996                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21997 5680           8A46         FB            mov	al,-5[bp]
21998 5683           30E4                       xor	ah,ah
21999 5685           89C3                       mov	bx,ax
22000                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22001 5687           8A87       0276            mov	al,_line_to_vpti[bx]
22002 568B           30E4                       xor	ah,ah
22003 568D           B1                     06  mov	cl,*6
22004 568F           D3E0                       shl	ax,cl
22005 5691           89C3                       mov	bx,ax
22006 5693           81C3                 028A  add	bx,#_video_param_table
22007                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22008 5697           8A47         02            mov	al,2[bx]
22009 569A           8846         FF            mov	-1[bp],al
22010                                           !BCC_EOS
22011                                           ! 2590    bpp=vga_modes[line].pixbits;
22012                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22013 569D           8A46         FB            mov	al,-5[bp]
22014 56A0           30E4                       xor	ah,ah
22015 56A2           B1                     03  mov	cl,*3
22016 56A4           D3E0                       shl	ax,cl
22017 56A6           89C3                       mov	bx,ax
22018 56A8           81C3                 01F6  add	bx,#_vga_modes
22019                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22020 56AC           8A47         03            mov	al,3[bx]
22021 56AF           8846         FA            mov	-6[bp],al
22022                                           !BCC_EOS
22023                                           ! 2591    while((count-->0) && (xcurs<nbcols))
22024                                           ! 2592     {
22025 56B2           E9         00A6            br 	.191
22026                       000056B5            .192:
22027                                           ! 2593      switch(vga_modes[line].memmodel)
22028                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22029 56B5           8A46         FB            mov	al,-5[bp]
22030 56B8           30E4                       xor	ah,ah
22031 56BA           B1                     03  mov	cl,*3
22032 56BC           D3E0                       shl	ax,cl
22033 56BE           89C3                       mov	bx,ax
22034 56C0           81C3                 01F6  add	bx,#_vga_modes
22035 56C4           8A47         02            mov	al,2[bx]
22036                                           ! 2594       {
22037 56C7           EB           77            jmp .195
22038                                           ! 2595        case 0x04:
22039                                           ! 2596        case 0x03:
22040                       000056C9            .196:
22041                                           ! 2597          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22042                       000056C9            .197:
22043                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22044 56C9           8A46         FF            mov	al,-1[bp]
22045 56CC           30E4                       xor	ah,ah
22046 56CE           50                         push	ax
22047                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22048 56CF           FF76         F8            push	-8[bp]
22049                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22050 56D2           8A46         FD            mov	al,-3[bp]
22051 56D5           30E4                       xor	ah,ah
22052 56D7           50                         push	ax
22053                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22054 56D8           8A46         FE            mov	al,-2[bp]
22055 56DB           30E4                       xor	ah,ah
22056 56DD           50                         push	ax
22057                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22058 56DE           8A46         08            mov	al,8[bp]
22059 56E1           30E4                       xor	ah,ah
22060 56E3           50                         push	ax
22061                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22062 56E4           8A46         04            mov	al,4[bp]
22063 56E7           30E4                       xor	ah,ah
22064 56E9           50                         push	ax
22065                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22066 56EA           E8         FA4E            call	_write_gfx_char_pl4
22067 56ED           83C4                   0C  add	sp,*$C
22068                                           !BCC_EOS
22069                                           ! 2598          break;
22070 56F0           EB           62            jmp .193
22071                                           !BCC_EOS
22072                                           ! 2599        case 0x02:
22073                                           ! 2600          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22074                       000056F2            .198:
22075                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22076 56F2           8A46         FA            mov	al,-6[bp]
22077 56F5           30E4                       xor	ah,ah
22078 56F7           50                         push	ax
22079                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22080 56F8           FF76         F8            push	-8[bp]
22081                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22082 56FB           8A46         FD            mov	al,-3[bp]
22083 56FE           30E4                       xor	ah,ah
22084 5700           50                         push	ax
22085                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22086 5701           8A46         FE            mov	al,-2[bp]
22087 5704           30E4                       xor	ah,ah
22088 5706           50                         push	ax
22089                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22090 5707           8A46         08            mov	al,8[bp]
22091 570A           30E4                       xor	ah,ah
22092 570C           50                         push	ax
22093                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22094 570D           8A46         04            mov	al,4[bp]
22095 5710           30E4                       xor	ah,ah
22096 5712           50                         push	ax
22097                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22098 5713           E8         FB98            call	_write_gfx_char_cga
22099 5716           83C4                   0C  add	sp,*$C
22100                                           !BCC_EOS
22101                                           ! 2601          break;
22102 5719           EB           39            jmp .193
22103                                           !BCC_EOS
22104                                           ! 2602        case 0x05:
22105                                           ! 2603          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22106                       0000571B            .199:
22107                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22108 571B           FF76         F8            push	-8[bp]
22109                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22110 571E           8A46         FD            mov	al,-3[bp]
22111 5721           30E4                       xor	ah,ah
22112 5723           50                         push	ax
22113                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22114 5724           8A46         FE            mov	al,-2[bp]
22115 5727           30E4                       xor	ah,ah
22116 5729           50                         push	ax
22117                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22118 572A           8A46         08            mov	al,8[bp]
22119 572D           30E4                       xor	ah,ah
22120 572F           50                         push	ax
22121                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22122 5730           8A46         04            mov	al,4[bp]
22123 5733           30E4                       xor	ah,ah
22124 5735           50                         push	ax
22125                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22126 5736           E8         FD78            call	_write_gfx_char_lin
22127 5739           83C4                   0A  add	sp,*$A
22128                                           !BCC_EOS
22129                                           ! 2604          break;
22130 573C           EB           16            jmp .193
22131                                           !BCC_EOS
22132                                           ! 2605       }
22133                                           ! 2606      xcurs++;
22134 573E           EB           14            jmp .193
22135                       00005740            .195:
22136 5740           2C                     02  sub	al,*2
22137 5742           74           AE            je 	.198
22138 5744           2C                     01  sub	al,*1
22139 5746         0F84         FF7F            beq 	.197
22140 574A           2C                     01  sub	al,*1
22141 574C         0F84         FF79            beq 	.196
22142 5750           2C                     01  sub	al,*1
22143 5752           74           C7            je 	.199
22144                       00005754            .193:
22145                       FFFFFFEE            ..FFFA	=	-$12
22146                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22147 5754           8A46         FE            mov	al,-2[bp]
22148 5757           40                         inc	ax
22149 5758           8846         FE            mov	-2[bp],al
22150                                           !BCC_EOS
22151                                           ! 2607     }
22152                                           ! 2608   }
22153                       0000575B            .191:
22154                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22155 575B           8B46         0A            mov	ax,$A[bp]
22156 575E           48                         dec	ax
22157 575F           8946         0A            mov	$A[bp],ax
22158                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22159 5762           3D                   FFFF  cmp	ax,*-1
22160 5765           74           0C            je  	.19A
22161                       00005767            .19B:
22162                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22163 5767           8A46         FE            mov	al,-2[bp]
22164 576A           30E4                       xor	ah,ah
22165 576C           3B46         F8            cmp	ax,-8[bp]
22166 576F         0F82         FF42            blo 	.192
22167                       00005773            .19A:
22168                       00005773            .190:
22169                                           ! 2609 }
22170                       00005773            .18F:
22171 5773           89EC                       mov	sp,bp
22172 5775           5D                         pop	bp
22173 5776           C3                         ret
22174                                           ! 2610 static void biosfn_write_char_only (car,page,attr,count)
22175                                           ! Register BX used in function biosfn_write_char_attr
22176                                           ! 2611 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22177                       00005777            _biosfn_write_char_only:
22178                                           !BCC_EOS
22179                                           !BCC_EOS
22180                                           !BCC_EOS
22181                                           !BCC_EOS
22182                                           ! 2612 {
22183                                           ! 2613  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22184                                           !BCC_EOS
22185                                           ! 2614  Bit16u nbcols,nbrows,address;
22186                                           !BCC_EOS
22187                                           ! 2615  Bit16u cursor,dummy;
22188                                           !BCC_EOS
22189                                           ! 2616  mode=read_byte(0x40,0x49);
22190 5777           55                         push	bp
22191 5778           89E5                       mov	bp,sp
22192 577A           83C4                   F0  add	sp,*-$10
22193                                           ! Debug: list int = const $49 (used reg = )
22194 577D           B8                   0049  mov	ax,*$49
22195 5780           50                         push	ax
22196                                           ! Debug: list int = const $40 (used reg = )
22197 5781           B8                   0040  mov	ax,*$40
22198 5784           50                         push	ax
22199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22200 5785           E8         2459            call	_read_byte
22201 5788           83C4                   04  add	sp,*4
22202                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22203 578B           8846         FC            mov	-4[bp],al
22204                                           !BCC_EOS
22205                                           ! 2617  line=find_vga_entry(mode);
22206                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22207 578E           8A46         FC            mov	al,-4[bp]
22208 5791           30E4                       xor	ah,ah
22209 5793           50                         push	ax
22210                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22211 5794           E8         235E            call	_find_vga_entry
22212 5797           44                         inc	sp
22213 5798           44                         inc	sp
22214                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22215 5799           8846         FB            mov	-5[bp],al
22216                                           !BCC_EOS
22217                                           ! 2618  if(line==0xFF)return;
22218                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22219 579C           8A46         FB            mov	al,-5[bp]
22220 579F           3C                     FF  cmp	al,#$FF
22221 57A1           75           04            jne 	.19C
22222                       000057A3            .19D:
22223 57A3           89EC                       mov	sp,bp
22224 57A5           5D                         pop	bp
22225 57A6           C3                         ret
22226                                           !BCC_EOS
22227                                           ! 2619  biosfn_get_cursor_pos(page,&dummy,&cursor);
22228                       000057A7            .19C:
22229                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22230 57A7           8D5E         F2            lea	bx,-$E[bp]
22231 57AA           53                         push	bx
22232                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22233 57AB           8D5E         F0            lea	bx,-$10[bp]
22234 57AE           53                         push	bx
22235                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22236 57AF           8A46         06            mov	al,6[bp]
22237 57B2           30E4                       xor	ah,ah
22238 57B4           50                         push	ax
22239                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22240 57B5           E8         EC8A            call	_biosfn_get_cursor_pos
22241 57B8           83C4                   06  add	sp,*6
22242                                           !BCC_EOS
22243                                           ! 2620  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22244                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22245 57BB           8A46         F2            mov	al,-$E[bp]
22246                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22247 57BE           8846         FE            mov	-2[bp],al
22248                                           !BCC_EOS
22249                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22250 57C1           8B46         F2            mov	ax,-$E[bp]
22251 57C4           30C0                       xor	al,al
22252                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22253 57C6           88E0                       mov	al,ah
22254 57C8           30E4                       xor	ah,ah
22255                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22256 57CA           8846         FD            mov	-3[bp],al
22257                                           !BCC_EOS
22258                                           ! 2621  nbrows=read_byte(0x40,0x84)+1;
22259                                           ! Debug: list int = const $84 (used reg = )
22260 57CD           B8                   0084  mov	ax,#$84
22261 57D0           50                         push	ax
22262                                           ! Debug: list int = const $40 (used reg = )
22263 57D1           B8                   0040  mov	ax,*$40
22264 57D4           50                         push	ax
22265                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22266 57D5           E8         2409            call	_read_byte
22267 57D8           83C4                   04  add	sp,*4
22268                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22269 57DB           30E4                       xor	ah,ah
22270                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22271 57DD           40                         inc	ax
22272 57DE           8946         F6            mov	-$A[bp],ax
22273                                           !BCC_EOS
22274                                           ! 2622  nbcols=read_word(0x40,0x4A);
22275                                           ! Debug: list int = const $4A (used reg = )
22276 57E1           B8                   004A  mov	ax,*$4A
22277 57E4           50                         push	ax
22278                                           ! Debug: list int = const $40 (used reg = )
22279 57E5           B8                   0040  mov	ax,*$40
22280 57E8           50                         push	ax
22281                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22282 57E9           E8         2408            call	_read_word
22283 57EC           83C4                   04  add	sp,*4
22284                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22285 57EF           8946         F8            mov	-8[bp],ax
22286                                           !BCC_EOS
22287                                           ! 2623  if(vga_modes[line].class==0x00)
22288                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22289 57F2           8A46         FB            mov	al,-5[bp]
22290 57F5           30E4                       xor	ah,ah
22291 57F7           B1                     03  mov	cl,*3
22292 57F9           D3E0                       shl	ax,cl
22293 57FB           89C3                       mov	bx,ax
22294 57FD           81C3                 01F6  add	bx,#_vga_modes
22295                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22296 5801           8A47         01            mov	al,1[bx]
22297 5804           84C0                       test	al,al
22298 5806           75           6E            jne 	.19E
22299                       00005808            .19F:
22300                                           ! 2624   {
22301                                           ! 2625    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22302                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22303 5808           8A46         FD            mov	al,-3[bp]
22304 580B           30E4                       xor	ah,ah
22305 580D           8B4E         F8            mov	cx,-8[bp]
22306 5810           F7E9                       imul	cx
22307                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22308                                           ! Debug: expression subtree swapping
22309 5812           0246         FE            add	al,-2[bp]
22310 5815           80D4                   00  adc	ah,*0
22311                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22312 5818           D1E0                       shl	ax,*1
22313 581A           50                         push	ax
22314                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22315 581B           8B46         F8            mov	ax,-8[bp]
22316 581E           8B4E         F6            mov	cx,-$A[bp]
22317 5821           F7E9                       imul	cx
22318                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22319 5823           D1E0                       shl	ax,*1
22320                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22321 5825           0C                     FF  or	al,#$FF
22322                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22323                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22324 5827           89C3                       mov	bx,ax
22325 5829           8A46         06            mov	al,6[bp]
22326 582C           30E4                       xor	ah,ah
22327 582E           93                         xchg	ax,bx
22328 582F           40                         inc	ax
22329 5830           89D9                       mov	cx,bx
22330 5832           F7E9                       imul	cx
22331                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22332 5834           0346         EE            add	ax,-$12[bp]
22333 5837           44                         inc	sp
22334 5838           44                         inc	sp
22335                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22336 5839           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2626    while(count-->0)
22339                                           ! 2627     {write_byte(vga_modes[line].sstart,address,car);
22340 583C           EB           29            jmp .1A1
22341                       0000583E            .1A2:
22342                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22343 583E           8A46         04            mov	al,4[bp]
22344 5841           30E4                       xor	ah,ah
22345 5843           50                         push	ax
22346                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22347 5844           FF76         F4            push	-$C[bp]
22348                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22349 5847           8A46         FB            mov	al,-5[bp]
22350 584A           30E4                       xor	ah,ah
22351 584C           B1                     03  mov	cl,*3
22352 584E           D3E0                       shl	ax,cl
22353 5850           89C3                       mov	bx,ax
22354 5852           81C3                 01F6  add	bx,#_vga_modes
22355                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22356 5856           FF77         04            push	4[bx]
22357                                           ! Debug: func () void = write_byte+0 (used reg = )
22358 5859           E8         23AB            call	_write_byte
22359 585C           83C4                   06  add	sp,*6
22360                                           !BCC_EOS
22361                                           ! 2628      address+=2;
22362                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22363 585F           8B46         F4            mov	ax,-$C[bp]
22364 5862           40                         inc	ax
22365 5863           40                         inc	ax
22366 5864           8946         F4            mov	-$C[bp],ax
22367                                           !BCC_EOS
22368                                           ! 2629     }
22369                                           ! 2630   }
22370                       00005867            .1A1:
22371                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22372 5867           8B46         0A            mov	ax,$A[bp]
22373 586A           48                         dec	ax
22374 586B           8946         0A            mov	$A[bp],ax
22375                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22376 586E           3D                   FFFF  cmp	ax,*-1
22377 5871           75           CB            jne	.1A2
22378                       00005873            .1A3:
22379                       00005873            .1A0:
22380                                           ! 2631  else
22381                                           ! 2632   {
22382 5873           E9         00F3            br 	.1A4
22383                       00005876            .19E:
22384                                           ! 2633    cheight=video_param_table[line_to_vpti[line]].cheight;
22385                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22386 5876           8A46         FB            mov	al,-5[bp]
22387 5879           30E4                       xor	ah,ah
22388 587B           89C3                       mov	bx,ax
22389                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22390 587D           8A87       0276            mov	al,_line_to_vpti[bx]
22391 5881           30E4                       xor	ah,ah
22392 5883           B1                     06  mov	cl,*6
22393 5885           D3E0                       shl	ax,cl
22394 5887           89C3                       mov	bx,ax
22395 5889           81C3                 028A  add	bx,#_video_param_table
22396                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22397 588D           8A47         02            mov	al,2[bx]
22398 5890           8846         FF            mov	-1[bp],al
22399                                           !BCC_EOS
22400                                           ! 2634    bpp=vga_modes[line].pixbits;
22401                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22402 5893           8A46         FB            mov	al,-5[bp]
22403 5896           30E4                       xor	ah,ah
22404 5898           B1                     03  mov	cl,*3
22405 589A           D3E0                       shl	ax,cl
22406 589C           89C3                       mov	bx,ax
22407 589E           81C3                 01F6  add	bx,#_vga_modes
22408                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22409 58A2           8A47         03            mov	al,3[bx]
22410 58A5           8846         FA            mov	-6[bp],al
22411                                           !BCC_EOS
22412                                           ! 2635    while((count-->0) && (xcurs<nbcols))
22413                                           ! 2636     {
22414 58A8           E9         00A6            br 	.1A6
22415                       000058AB            .1A7:
22416                                           ! 2637      switch(vga_modes[line].memmodel)
22417                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22418 58AB           8A46         FB            mov	al,-5[bp]
22419 58AE           30E4                       xor	ah,ah
22420 58B0           B1                     03  mov	cl,*3
22421 58B2           D3E0                       shl	ax,cl
22422 58B4           89C3                       mov	bx,ax
22423 58B6           81C3                 01F6  add	bx,#_vga_modes
22424 58BA           8A47         02            mov	al,2[bx]
22425                                           ! 2638       {
22426 58BD           EB           77            jmp .1AA
22427                                           ! 2639        case 0x04:
22428                                           ! 2640        case 0x03:
22429                       000058BF            .1AB:
22430                                           ! 2641          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22431                       000058BF            .1AC:
22432                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22433 58BF           8A46         FF            mov	al,-1[bp]
22434 58C2           30E4                       xor	ah,ah
22435 58C4           50                         push	ax
22436                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22437 58C5           FF76         F8            push	-8[bp]
22438                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22439 58C8           8A46         FD            mov	al,-3[bp]
22440 58CB           30E4                       xor	ah,ah
22441 58CD           50                         push	ax
22442                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22443 58CE           8A46         FE            mov	al,-2[bp]
22444 58D1           30E4                       xor	ah,ah
22445 58D3           50                         push	ax
22446                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22447 58D4           8A46         08            mov	al,8[bp]
22448 58D7           30E4                       xor	ah,ah
22449 58D9           50                         push	ax
22450                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22451 58DA           8A46         04            mov	al,4[bp]
22452 58DD           30E4                       xor	ah,ah
22453 58DF           50                         push	ax
22454                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22455 58E0           E8         F858            call	_write_gfx_char_pl4
22456 58E3           83C4                   0C  add	sp,*$C
22457                                           !BCC_EOS
22458                                           ! 2642          break;
22459 58E6           EB           62            jmp .1A8
22460                                           !BCC_EOS
22461                                           ! 2643        case 0x02:
22462                                           ! 2644          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22463                       000058E8            .1AD:
22464                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22465 58E8           8A46         FA            mov	al,-6[bp]
22466 58EB           30E4                       xor	ah,ah
22467 58ED           50                         push	ax
22468                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22469 58EE           FF76         F8            push	-8[bp]
22470                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22471 58F1           8A46         FD            mov	al,-3[bp]
22472 58F4           30E4                       xor	ah,ah
22473 58F6           50                         push	ax
22474                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22475 58F7           8A46         FE            mov	al,-2[bp]
22476 58FA           30E4                       xor	ah,ah
22477 58FC           50                         push	ax
22478                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22479 58FD           8A46         08            mov	al,8[bp]
22480 5900           30E4                       xor	ah,ah
22481 5902           50                         push	ax
22482                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22483 5903           8A46         04            mov	al,4[bp]
22484 5906           30E4                       xor	ah,ah
22485 5908           50                         push	ax
22486                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22487 5909           E8         F9A2            call	_write_gfx_char_cga
22488 590C           83C4                   0C  add	sp,*$C
22489                                           !BCC_EOS
22490                                           ! 2645          break;
22491 590F           EB           39            jmp .1A8
22492                                           !BCC_EOS
22493                                           ! 2646        case 0x05:
22494                                           ! 2647          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22495                       00005911            .1AE:
22496                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22497 5911           FF76         F8            push	-8[bp]
22498                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22499 5914           8A46         FD            mov	al,-3[bp]
22500 5917           30E4                       xor	ah,ah
22501 5919           50                         push	ax
22502                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22503 591A           8A46         FE            mov	al,-2[bp]
22504 591D           30E4                       xor	ah,ah
22505 591F           50                         push	ax
22506                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22507 5920           8A46         08            mov	al,8[bp]
22508 5923           30E4                       xor	ah,ah
22509 5925           50                         push	ax
22510                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22511 5926           8A46         04            mov	al,4[bp]
22512 5929           30E4                       xor	ah,ah
22513 592B           50                         push	ax
22514                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22515 592C           E8         FB82            call	_write_gfx_char_lin
22516 592F           83C4                   0A  add	sp,*$A
22517                                           !BCC_EOS
22518                                           ! 2648          break;
22519 5932           EB           16            jmp .1A8
22520                                           !BCC_EOS
22521                                           ! 2649       }
22522                                           ! 2650      xcurs++;
22523 5934           EB           14            jmp .1A8
22524                       00005936            .1AA:
22525 5936           2C                     02  sub	al,*2
22526 5938           74           AE            je 	.1AD
22527 593A           2C                     01  sub	al,*1
22528 593C         0F84         FF7F            beq 	.1AC
22529 5940           2C                     01  sub	al,*1
22530 5942         0F84         FF79            beq 	.1AB
22531 5946           2C                     01  sub	al,*1
22532 5948           74           C7            je 	.1AE
22533                       0000594A            .1A8:
22534                       FFFFFFEE            ..FFF9	=	-$12
22535                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22536 594A           8A46         FE            mov	al,-2[bp]
22537 594D           40                         inc	ax
22538 594E           8846         FE            mov	-2[bp],al
22539                                           !BCC_EOS
22540                                           ! 2651     }
22541                                           ! 2652   }
22542                       00005951            .1A6:
22543                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22544 5951           8B46         0A            mov	ax,$A[bp]
22545 5954           48                         dec	ax
22546 5955           8946         0A            mov	$A[bp],ax
22547                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22548 5958           3D                   FFFF  cmp	ax,*-1
22549 595B           74           0C            je  	.1AF
22550                       0000595D            .1B0:
22551                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22552 595D           8A46         FE            mov	al,-2[bp]
22553 5960           30E4                       xor	ah,ah
22554 5962           3B46         F8            cmp	ax,-8[bp]
22555 5965         0F82         FF42            blo 	.1A7
22556                       00005969            .1AF:
22557                       00005969            .1A5:
22558                                           ! 2653 }
22559                       00005969            .1A4:
22560 5969           89EC                       mov	sp,bp
22561 596B           5D                         pop	bp
22562 596C           C3                         ret
22563                                           ! 2654 #asm
22564                                           !BCC_ASM
22565                       00000008            _biosfn_write_char_only.count	set	8
22566                       00000006            _biosfn_write_char_only.attr	set	6
22567                       00000004            _biosfn_write_char_only.page	set	4
22568                       00000002            _biosfn_write_char_only.car	set	2
22569                       0000596D            biosfn_group_0B:
22570 596D           80FF                   00    cmp bh, #0x00
22571 5970           74           06              je biosfn_set_border_color
22572 5972           80FF                   01    cmp bh, #0x01
22573 5975           74           40              je biosfn_set_palette
22574 5977           C3                           ret
22575                       00005978            biosfn_set_border_color:
22576 5978           50                           push ax
22577 5979           53                           push bx
22578 597A           51                           push cx
22579 597B           52                           push dx
22580 597C           BA                   03DA    mov dx, # 0x3da
22581 597F           EC                           in al, dx
22582 5980           BA                   03C0    mov dx, # 0x3c0
22583 5983           B0                     00    mov al, #0x00
22584 5985           EE                           out dx, al
22585 5986           88D8                         mov al, bl
22586 5988           24                     0F    and al, #0x0f
22587 598A           A8                     08    test al, #0x08
22588 598C           74           02              jz set_low_border
22589 598E           04                     08    add al, #0x08
22590                       00005990            set_low_border:
22591 5990           EE                           out dx, al
22592 5991           B1                     01    mov cl, #0x01
22593 5993           80E3                   10    and bl, #0x10
22594                       00005996            set_intensity_loop:
22595 5996           BA                   03C0    mov dx, # 0x3c0
22596 5999           88C8                         mov al, cl
22597 599B           EE                           out dx, al
22598 599C           BA                   03C1    mov dx, # 0x3c1
22599 599F           EC                           in al, dx
22600 59A0           24                     EF    and al, #0xef
22601 59A2           08D8                         or al, bl
22602 59A4           BA                   03C0    mov dx, # 0x3c0
22603 59A7           EE                           out dx, al
22604 59A8           FEC1                         inc cl
22605 59AA           80F9                   04    cmp cl, #0x04
22606 59AD           75           E7              jne set_intensity_loop
22607 59AF           B0                     20    mov al, #0x20
22608 59B1           EE                           out dx, al
22609 59B2           5A                           pop dx
22610 59B3           59                           pop cx
22611 59B4           5B                           pop bx
22612 59B5           58                           pop ax
22613 59B6           C3                           ret
22614                       000059B7            biosfn_set_palette:
22615 59B7           50                           push ax
22616 59B8           53                           push bx
22617 59B9           51                           push cx
22618 59BA           52                           push dx
22619 59BB           BA                   03DA    mov dx, # 0x3da
22620 59BE           EC                           in al, dx
22621 59BF           B1                     01    mov cl, #0x01
22622 59C1           80E3                   01    and bl, #0x01
22623                       000059C4            set_cga_palette_loop:
22624 59C4           BA                   03C0    mov dx, # 0x3c0
22625 59C7           88C8                         mov al, cl
22626 59C9           EE                           out dx, al
22627 59CA           BA                   03C1    mov dx, # 0x3c1
22628 59CD           EC                           in al, dx
22629 59CE           24                     FE    and al, #0xfe
22630 59D0           08D8                         or al, bl
22631 59D2           BA                   03C0    mov dx, # 0x3c0
22632 59D5           EE                           out dx, al
22633 59D6           FEC1                         inc cl
22634 59D8           80F9                   04    cmp cl, #0x04
22635 59DB           75           E7              jne set_cga_palette_loop
22636 59DD           B0                     20    mov al, #0x20
22637 59DF           EE                           out dx, al
22638 59E0           5A                           pop dx
22639 59E1           59                           pop cx
22640 59E2           5B                           pop bx
22641 59E3           58                           pop ax
22642 59E4           C3                           ret
22643                                           ! 2729 endasm
22644                                           !BCC_ENDASM
22645                                           ! 2730 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22646                                           ! Register BX used in function biosfn_write_char_only
22647                       000059E5            _biosfn_write_pixel:
22648                                           !BCC_EOS
22649                                           !BCC_EOS
22650                                           !BCC_EOS
22651                                           !BCC_EOS
22652                                           ! 2731 {
22653                                           ! 2732  Bit8u mode,line,mask,attr,data;
22654                                           !BCC_EOS
22655                                           ! 2733  Bit16u addr;
22656                                           !BCC_EOS
22657                                           ! 2734  mode=read_byte(0x40,0x49);
22658 59E5           55                         push	bp
22659 59E6           89E5                       mov	bp,sp
22660 59E8           83C4                   F8  add	sp,*-8
22661                                           ! Debug: list int = const $49 (used reg = )
22662 59EB           B8                   0049  mov	ax,*$49
22663 59EE           50                         push	ax
22664                                           ! Debug: list int = const $40 (used reg = )
22665 59EF           B8                   0040  mov	ax,*$40
22666 59F2           50                         push	ax
22667                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22668 59F3           E8         21EB            call	_read_byte
22669 59F6           83C4                   04  add	sp,*4
22670                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22671 59F9           8846         FF            mov	-1[bp],al
22672                                           !BCC_EOS
22673                                           ! 2735  line=find_vga_entry(mode);
22674                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22675 59FC           8A46         FF            mov	al,-1[bp]
22676 59FF           30E4                       xor	ah,ah
22677 5A01           50                         push	ax
22678                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22679 5A02           E8         20F0            call	_find_vga_entry
22680 5A05           44                         inc	sp
22681 5A06           44                         inc	sp
22682                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22683 5A07           8846         FE            mov	-2[bp],al
22684                                           !BCC_EOS
22685                                           ! 2736  if(line==0xFF)return;
22686                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22687 5A0A           8A46         FE            mov	al,-2[bp]
22688 5A0D           3C                     FF  cmp	al,#$FF
22689 5A0F           75           04            jne 	.1B1
22690                       00005A11            .1B2:
22691 5A11           89EC                       mov	sp,bp
22692 5A13           5D                         pop	bp
22693 5A14           C3                         ret
22694                                           !BCC_EOS
22695                                           ! 2737  if(vga_modes[line].class==0x00)return;
22696                       00005A15            .1B1:
22697                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22698 5A15           8A46         FE            mov	al,-2[bp]
22699 5A18           30E4                       xor	ah,ah
22700 5A1A           B1                     03  mov	cl,*3
22701 5A1C           D3E0                       shl	ax,cl
22702 5A1E           89C3                       mov	bx,ax
22703 5A20           81C3                 01F6  add	bx,#_vga_modes
22704                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22705 5A24           8A47         01            mov	al,1[bx]
22706 5A27           84C0                       test	al,al
22707 5A29           75           04            jne 	.1B3
22708                       00005A2B            .1B4:
22709 5A2B           89EC                       mov	sp,bp
22710 5A2D           5D                         pop	bp
22711 5A2E           C3                         ret
22712                                           !BCC_EOS
22713                                           ! 2738  switch(vga_modes[line].memmodel)
22714                       00005A2F            .1B3:
22715                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22716 5A2F           8A46         FE            mov	al,-2[bp]
22717 5A32           30E4                       xor	ah,ah
22718 5A34           B1                     03  mov	cl,*3
22719 5A36           D3E0                       shl	ax,cl
22720 5A38           89C3                       mov	bx,ax
22721 5A3A           81C3                 01F6  add	bx,#_vga_modes
22722 5A3E           8A47         02            mov	al,2[bx]
22723                                           ! 2739   {
22724 5A41           E9         0223            br 	.1B7
22725                                           ! 2740    case 0x04:
22726                                           ! 2741    case 0x03:
22727                       00005A44            .1B8:
22728                                           ! 2742      addr = CX/8+DX*read_word(0x40,0x4A);
22729                       00005A44            .1B9:
22730                                           ! Debug: list int = const $4A (used reg = )
22731 5A44           B8                   004A  mov	ax,*$4A
22732 5A47           50                         push	ax
22733                                           ! Debug: list int = const $40 (used reg = )
22734 5A48           B8                   0040  mov	ax,*$40
22735 5A4B           50                         push	ax
22736                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22737 5A4C           E8         21A5            call	_read_word
22738 5A4F           83C4                   04  add	sp,*4
22739                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22740                                           ! Debug: expression subtree swapping
22741 5A52           8B4E         0A            mov	cx,$A[bp]
22742 5A55           F7E9                       imul	cx
22743 5A57           50                         push	ax
22744                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22745 5A58           8B46         08            mov	ax,8[bp]
22746 5A5B           B1                     03  mov	cl,*3
22747 5A5D           D3E8                       shr	ax,cl
22748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22749 5A5F           0346         F6            add	ax,0+..FFF8[bp]
22750 5A62           44                         inc	sp
22751 5A63           44                         inc	sp
22752                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22753 5A64           8946         F8            mov	-8[bp],ax
22754                                           !BCC_EOS
22755                                           ! 2743      mask = 0x80 >> (CX & 0x07);
22756                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22757 5A67           8A46         08            mov	al,8[bp]
22758 5A6A           24                     07  and	al,*7
22759                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22760 5A6C           30E4                       xor	ah,ah
22761 5A6E           89C3                       mov	bx,ax
22762 5A70           B8                   0080  mov	ax,#$80
22763 5A73           89D9                       mov	cx,bx
22764 5A75           D3F8                       sar	ax,cl
22765                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22766 5A77           8846         FD            mov	-3[bp],al
22767                                           !BCC_EOS
22768                                           ! 2744      outw(0x3ce, (mask << 8) | 0x08);
22769                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22770 5A7A           8A46         FD            mov	al,-3[bp]
22771 5A7D           30E4                       xor	ah,ah
22772 5A7F           88C4                       mov	ah,al
22773 5A81           30C0                       xor	al,al
22774                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22775 5A83           0C                     08  or	al,*8
22776                                           ! Debug: list unsigned int = ax+0 (used reg = )
22777 5A85           50                         push	ax
22778                                           ! Debug: list int = const $3CE (used reg = )
22779 5A86           B8                   03CE  mov	ax,#$3CE
22780 5A89           50                         push	ax
22781                                           ! Debug: func () void = outw+0 (used reg = )
22782 5A8A           E8         21D0            call	_outw
22783 5A8D           83C4                   04  add	sp,*4
22784                                           !BCC_EOS
22785                                           ! 2745      outw(0x3ce, 0x0205);
22786                                           ! Debug: list int = const $205 (used reg = )
22787 5A90           B8                   0205  mov	ax,#$205
22788 5A93           50                         push	ax
22789                                           ! Debug: list int = const $3CE (used reg = )
22790 5A94           B8                   03CE  mov	ax,#$3CE
22791 5A97           50                         push	ax
22792                                           ! Debug: func () void = outw+0 (used reg = )
22793 5A98           E8         21C2            call	_outw
22794 5A9B           83C4                   04  add	sp,*4
22795                                           !BCC_EOS
22796                                           ! 2746      data = read_byte(0xa000,addr);
22797                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22798 5A9E           FF76         F8            push	-8[bp]
22799                                           ! Debug: list unsigned int = const $A000 (used reg = )
22800 5AA1           B8                   A000  mov	ax,#$A000
22801 5AA4           50                         push	ax
22802                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22803 5AA5           E8         2139            call	_read_byte
22804 5AA8           83C4                   04  add	sp,*4
22805                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22806 5AAB           8846         FB            mov	-5[bp],al
22807                                           !BCC_EOS
22808                                           ! 2747      if (AL & 0x80)
22809                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22810 5AAE           8A46         06            mov	al,6[bp]
22811 5AB1           24                     80  and	al,#$80
22812 5AB3           84C0                       test	al,al
22813 5AB5           74           0E            je  	.1BA
22814                       00005AB7            .1BB:
22815                                           ! 2748       {
22816                                           ! 2749        outw(0x3ce, 0x1803);
22817                                           ! Debug: list int = const $1803 (used reg = )
22818 5AB7           B8                   1803  mov	ax,#$1803
22819 5ABA           50                         push	ax
22820                                           ! Debug: list int = const $3CE (used reg = )
22821 5ABB           B8                   03CE  mov	ax,#$3CE
22822 5ABE           50                         push	ax
22823                                           ! Debug: func () void = outw+0 (used reg = )
22824 5ABF           E8         219B            call	_outw
22825 5AC2           83C4                   04  add	sp,*4
22826                                           !BCC_EOS
22827                                           ! 2750       }
22828                                           ! 2751      write_byte(0xa000,addr,AL);
22829                       00005AC5            .1BA:
22830                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22831 5AC5           8A46         06            mov	al,6[bp]
22832 5AC8           30E4                       xor	ah,ah
22833 5ACA           50                         push	ax
22834                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22835 5ACB           FF76         F8            push	-8[bp]
22836                                           ! Debug: list unsigned int = const $A000 (used reg = )
22837 5ACE           B8                   A000  mov	ax,#$A000
22838 5AD1           50                         push	ax
22839                                           ! Debug: func () void = write_byte+0 (used reg = )
22840 5AD2           E8         2132            call	_write_byte
22841 5AD5           83C4                   06  add	sp,*6
22842                                           !BCC_EOS
22843                                           ! 2752 #asm
22844                                           !BCC_EOS
22845                                           !BCC_ASM
22846                       0000000C            _biosfn_write_pixel.BH	set	$C
22847                       00000004            .biosfn_write_pixel.BH	set	4
22848                       00000010            _biosfn_write_pixel.CX	set	$10
22849                       00000008            .biosfn_write_pixel.CX	set	8
22850                       00000006            _biosfn_write_pixel.line	set	6
22851                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22852                       0000000E            _biosfn_write_pixel.AL	set	$E
22853                       00000006            .biosfn_write_pixel.AL	set	6
22854                       00000003            _biosfn_write_pixel.data	set	3
22855                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22856                       00000012            _biosfn_write_pixel.DX	set	$12
22857                       0000000A            .biosfn_write_pixel.DX	set	$A
22858                       00000005            _biosfn_write_pixel.mask	set	5
22859                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22860                       00000004            _biosfn_write_pixel.attr	set	4
22861                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22862                       00000007            _biosfn_write_pixel.mode	set	7
22863                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22864                       00000000            _biosfn_write_pixel.addr	set	0
22865                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22866 5AD8           BA                   03CE       mov dx, # 0x3ce
22867 5ADB           B8                   FF08       mov ax, #0xff08
22868 5ADE           EF                              out dx, ax
22869 5ADF           B8                   0005       mov ax, #0x0005
22870 5AE2           EF                              out dx, ax
22871 5AE3           B8                   0003       mov ax, #0x0003
22872 5AE6           EF                              out dx, ax
22873                                           ! 2760 endasm
22874                                           !BCC_ENDASM
22875                                           !BCC_EOS
22876                                           ! 2761      break;
22877 5AE7           E9         0193            br 	.1B5
22878                                           !BCC_EOS
22879                                           ! 2762    case 0x02:
22880                                           ! 2763      if(vga_modes[line].pixbits==2)
22881                       00005AEA            .1BC:
22882                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22883 5AEA           8A46         FE            mov	al,-2[bp]
22884 5AED           30E4                       xor	ah,ah
22885 5AEF           B1                     03  mov	cl,*3
22886 5AF1           D3E0                       shl	ax,cl
22887 5AF3           89C3                       mov	bx,ax
22888 5AF5           81C3                 01F6  add	bx,#_vga_modes
22889                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22890 5AF9           8A47         03            mov	al,3[bx]
22891 5AFC           3C                     02  cmp	al,*2
22892 5AFE           75           1C            jne 	.1BD
22893                       00005B00            .1BE:
22894                                           ! 2764       {
22895                                           ! 2765        addr=(CX>>2)+(DX>>1)*80;
22896                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22897 5B00           8B46         0A            mov	ax,$A[bp]
22898 5B03           D1E8                       shr	ax,*1
22899                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22900 5B05           B9                   0050  mov	cx,*$50
22901 5B08           F7E9                       imul	cx
22902 5B0A           50                         push	ax
22903                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22904 5B0B           8B46         08            mov	ax,8[bp]
22905 5B0E           D1E8                       shr	ax,*1
22906 5B10           D1E8                       shr	ax,*1
22907                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22908 5B12           0346         F6            add	ax,0+..FFF8[bp]
22909 5B15           44                         inc	sp
22910 5B16           44                         inc	sp
22911                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22912 5B17           8946         F8            mov	-8[bp],ax
22913                                           !BCC_EOS
22914                                           ! 2766       }
22915                                           ! 2767      else
22916                                           ! 2768       {
22917 5B1A           EB           1A            jmp .1BF
22918                       00005B1C            .1BD:
22919                                           ! 2769        addr=(CX>>3)+(DX>>1)*80;
22920                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22921 5B1C           8B46         0A            mov	ax,$A[bp]
22922 5B1F           D1E8                       shr	ax,*1
22923                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22924 5B21           B9                   0050  mov	cx,*$50
22925 5B24           F7E9                       imul	cx
22926 5B26           50                         push	ax
22927                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22928 5B27           8B46         08            mov	ax,8[bp]
22929 5B2A           B1                     03  mov	cl,*3
22930 5B2C           D3E8                       shr	ax,cl
22931                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22932 5B2E           0346         F6            add	ax,0+..FFF8[bp]
22933 5B31           44                         inc	sp
22934 5B32           44                         inc	sp
22935                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22936 5B33           8946         F8            mov	-8[bp],ax
22937                                           !BCC_EOS
22938                                           ! 2770       }
22939                                           ! 2771      if (DX & 1) addr += 0x2000;
22940                       00005B36            .1BF:
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22942 5B36           8A46         0A            mov	al,$A[bp]
22943 5B39           24                     01  and	al,*1
22944 5B3B           84C0                       test	al,al
22945 5B3D           74           09            je  	.1C0
22946                       00005B3F            .1C1:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22948 5B3F           8B46         F8            mov	ax,-8[bp]
22949 5B42           05                   2000  add	ax,#$2000
22950 5B45           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2772      data = read_byte(0xb800,addr);
22953                       00005B48            .1C0:
22954                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22955 5B48           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5B4B           B8                   B800  mov	ax,#$B800
22958 5B4E           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5B4F           E8         208F            call	_read_byte
22961 5B52           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22963 5B55           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2773      if(vga_modes
22966                                           ! 2773 [line].pixbits==2)
22967                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22968 5B58           8A46         FE            mov	al,-2[bp]
22969 5B5B           30E4                       xor	ah,ah
22970 5B5D           B1                     03  mov	cl,*3
22971 5B5F           D3E0                       shl	ax,cl
22972 5B61           89C3                       mov	bx,ax
22973 5B63           81C3                 01F6  add	bx,#_vga_modes
22974                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22975 5B67           8A47         03            mov	al,3[bx]
22976 5B6A           3C                     02  cmp	al,*2
22977 5B6C           75           46            jne 	.1C2
22978                       00005B6E            .1C3:
22979                                           ! 2774       {
22980                                           ! 2775        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22981                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22982 5B6E           8A46         08            mov	al,8[bp]
22983 5B71           24                     03  and	al,*3
22984                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22985 5B73           50                         push	ax
22986 5B74           B8                   0003  mov	ax,*3
22987 5B77           2A46         F6            sub	al,0+..FFF8[bp]
22988 5B7A           80DC                   00  sbb	ah,*0
22989 5B7D           44                         inc	sp
22990 5B7E           44                         inc	sp
22991                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22992 5B7F           D1E0                       shl	ax,*1
22993 5B81           50                         push	ax
22994                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22995 5B82           8A46         06            mov	al,6[bp]
22996 5B85           24                     03  and	al,*3
22997                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22998 5B87           30E4                       xor	ah,ah
22999 5B89           8B4E         F6            mov	cx,0+..FFF8[bp]
23000 5B8C           D3E0                       shl	ax,cl
23001 5B8E           44                         inc	sp
23002 5B8F           44                         inc	sp
23003                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23004 5B90           8846         FC            mov	-4[bp],al
23005                                           !BCC_EOS
23006                                           ! 2776        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23007                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23008 5B93           8A46         08            mov	al,8[bp]
23009 5B96           24                     03  and	al,*3
23010                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23011 5B98           50                         push	ax
23012 5B99           B8                   0003  mov	ax,*3
23013 5B9C           2A46         F6            sub	al,0+..FFF8[bp]
23014 5B9F           80DC                   00  sbb	ah,*0
23015 5BA2           44                         inc	sp
23016 5BA3           44                         inc	sp
23017                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23018 5BA4           D1E0                       shl	ax,*1
23019                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23020 5BA6           89C3                       mov	bx,ax
23021 5BA8           B8                   0003  mov	ax,*3
23022 5BAB           89D9                       mov	cx,bx
23023 5BAD           D3E0                       shl	ax,cl
23024                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23025 5BAF           8846         FD            mov	-3[bp],al
23026                                           !BCC_EOS
23027                                           ! 2777       }
23028                                           ! 2778      else
23029                                           ! 2779       {
23030 5BB2           EB           40            jmp .1C4
23031                       00005BB4            .1C2:
23032                                           ! 2780        attr = (AL & 0x01) << (7 - (CX & 0x07));
23033                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23034 5BB4           8A46         08            mov	al,8[bp]
23035 5BB7           24                     07  and	al,*7
23036                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23037 5BB9           50                         push	ax
23038 5BBA           B8                   0007  mov	ax,*7
23039 5BBD           2A46         F6            sub	al,0+..FFF8[bp]
23040 5BC0           80DC                   00  sbb	ah,*0
23041 5BC3           44                         inc	sp
23042 5BC4           44                         inc	sp
23043 5BC5           50                         push	ax
23044                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23045 5BC6           8A46         06            mov	al,6[bp]
23046 5BC9           24                     01  and	al,*1
23047                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23048 5BCB           30E4                       xor	ah,ah
23049 5BCD           8B4E         F6            mov	cx,0+..FFF8[bp]
23050 5BD0           D3E0                       shl	ax,cl
23051 5BD2           44                         inc	sp
23052 5BD3           44                         inc	sp
23053                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23054 5BD4           8846         FC            mov	-4[bp],al
23055                                           !BCC_EOS
23056                                           ! 2781        mask = 0x01 << (7 - (CX & 0x07));
23057                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23058 5BD7           8A46         08            mov	al,8[bp]
23059 5BDA           24                     07  and	al,*7
23060                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23061 5BDC           50                         push	ax
23062 5BDD           B8                   0007  mov	ax,*7
23063 5BE0           2A46         F6            sub	al,0+..FFF8[bp]
23064 5BE3           80DC                   00  sbb	ah,*0
23065 5BE6           44                         inc	sp
23066 5BE7           44                         inc	sp
23067                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23068 5BE8           89C3                       mov	bx,ax
23069 5BEA           B8                   0001  mov	ax,*1
23070 5BED           89D9                       mov	cx,bx
23071 5BEF           D3E0                       shl	ax,cl
23072                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23073 5BF1           8846         FD            mov	-3[bp],al
23074                                           !BCC_EOS
23075                                           ! 2782       }
23076                                           ! 2783      if (AL & 0x80)
23077                       00005BF4            .1C4:
23078                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23079 5BF4           8A46         06            mov	al,6[bp]
23080 5BF7           24                     80  and	al,#$80
23081 5BF9           84C0                       test	al,al
23082 5BFB           74           0B            je  	.1C5
23083                       00005BFD            .1C6:
23084                                           ! 2784       {
23085                                           ! 2785        data ^= attr;
23086                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23087 5BFD           8A46         FB            mov	al,-5[bp]
23088 5C00           3246         FC            xor	al,-4[bp]
23089 5C03           8846         FB            mov	-5[bp],al
23090                                           !BCC_EOS
23091                                           ! 2786       }
23092                                           ! 2787      else
23093                                           ! 2788       {
23094 5C06           EB           16            jmp .1C7
23095                       00005C08            .1C5:
23096                                           ! 2789        data &= ~mask;
23097                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23098 5C08           8A46         FD            mov	al,-3[bp]
23099 5C0B           30E4                       xor	ah,ah
23100 5C0D           F7D0                       not	ax
23101                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23102 5C0F           2246         FB            and	al,-5[bp]
23103 5C12           8846         FB            mov	-5[bp],al
23104                                           !BCC_EOS
23105                                           ! 2790        data |= attr;
23106                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23107 5C15           8A46         FB            mov	al,-5[bp]
23108 5C18           0A46         FC            or	al,-4[bp]
23109 5C1B           8846         FB            mov	-5[bp],al
23110                                           !BCC_EOS
23111                                           ! 2791       }
23112                                           ! 2792      write_byte(0xb800,addr,data);
23113                       00005C1E            .1C7:
23114                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23115 5C1E           8A46         FB            mov	al,-5[bp]
23116 5C21           30E4                       xor	ah,ah
23117 5C23           50                         push	ax
23118                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23119 5C24           FF76         F8            push	-8[bp]
23120                                           ! Debug: list unsigned int = const $B800 (used reg = )
23121 5C27           B8                   B800  mov	ax,#$B800
23122 5C2A           50                         push	ax
23123                                           ! Debug: func () void = write_byte+0 (used reg = )
23124 5C2B           E8         1FD9            call	_write_byte
23125 5C2E           83C4                   06  add	sp,*6
23126                                           !BCC_EOS
23127                                           ! 2793      break;
23128 5C31           EB           4A            jmp .1B5
23129                                           !BCC_EOS
23130                                           ! 2794    case 0x05:
23131                                           ! 2795      addr=CX+DX*(read_word(0x40,0x4A)*8);
23132                       00005C33            .1C8:
23133                                           ! Debug: list int = const $4A (used reg = )
23134 5C33           B8                   004A  mov	ax,*$4A
23135 5C36           50                         push	ax
23136                                           ! Debug: list int = const $40 (used reg = )
23137 5C37           B8                   0040  mov	ax,*$40
23138 5C3A           50                         push	ax
23139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23140 5C3B           E8         1FB6            call	_read_word
23141 5C3E           83C4                   04  add	sp,*4
23142                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23143 5C41           B1                     03  mov	cl,*3
23144 5C43           D3E0                       shl	ax,cl
23145                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23146                                           ! Debug: expression subtree swapping
23147 5C45           8B4E         0A            mov	cx,$A[bp]
23148 5C48           F7E9                       imul	cx
23149                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23150                                           ! Debug: expression subtree swapping
23151 5C4A           0346         08            add	ax,8[bp]
23152                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23153 5C4D           8946         F8            mov	-8[bp],ax
23154                                           !BCC_EOS
23155                                           ! 2796      write_byte(0xa000,addr,AL);
23156                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23157 5C50           8A46         06            mov	al,6[bp]
23158 5C53           30E4                       xor	ah,ah
23159 5C55           50                         push	ax
23160                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23161 5C56           FF76         F8            push	-8[bp]
23162                                           ! Debug: list unsigned int = const $A000 (used reg = )
23163 5C59           B8                   A000  mov	ax,#$A000
23164 5C5C           50                         push	ax
23165                                           ! Debug: func () void = write_byte+0 (used reg = )
23166 5C5D           E8         1FA7            call	_write_byte
23167 5C60           83C4                   06  add	sp,*6
23168                                           !BCC_EOS
23169                                           ! 2797      break;
23170 5C63           EB           18            jmp .1B5
23171                                           !BCC_EOS
23172                                           ! 2798   }
23173                                           ! 2799 }
23174 5C65           EB           16            jmp .1B5
23175                       00005C67            .1B7:
23176 5C67           2C                     02  sub	al,*2
23177 5C69         0F84         FE7D            beq 	.1BC
23178 5C6D           2C                     01  sub	al,*1
23179 5C6F         0F84         FDD1            beq 	.1B9
23180 5C73           2C                     01  sub	al,*1
23181 5C75         0F84         FDCB            beq 	.1B8
23182 5C79           2C                     01  sub	al,*1
23183 5C7B           74           B6            je 	.1C8
23184                       00005C7D            .1B5:
23185                       FFFFFFF6            ..FFF8	=	-$A
23186 5C7D           89EC                       mov	sp,bp
23187 5C7F           5D                         pop	bp
23188 5C80           C3                         ret
23189                                           ! 2800 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23190                                           ! Register BX used in function biosfn_write_pixel
23191                       00005C81            _biosfn_read_pixel:
23192                                           !BCC_EOS
23193                                           !BCC_EOS
23194                                           !BCC_EOS
23195                                           !BCC_EOS
23196                                           ! 2801 {
23197                                           ! 2802  Bit8u mode,line,mask,attr,data,i;
23198                                           !BCC_EOS
23199                                           ! 2803  Bit16u addr;
23200                                           !BCC_EOS
23201                                           ! 2804  Bit16u ss=get_SS();
23202 5C81           55                         push	bp
23203 5C82           89E5                       mov	bp,sp
23204 5C84           83C4                   F6  add	sp,*-$A
23205                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23206 5C87           E8         1FE3            call	_get_SS
23207                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23208 5C8A           8946         F6            mov	-$A[bp],ax
23209                                           !BCC_EOS
23210                                           ! 2805  mode=read_byte(0x40,0x49);
23211                                           ! Debug: list int = const $49 (used reg = )
23212 5C8D           B8                   0049  mov	ax,*$49
23213 5C90           50                         push	ax
23214                                           ! Debug: list int = const $40 (used reg = )
23215 5C91           B8                   0040  mov	ax,*$40
23216 5C94           50                         push	ax
23217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23218 5C95           E8         1F49            call	_read_byte
23219 5C98           83C4                   04  add	sp,*4
23220                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23221 5C9B           8846         FF            mov	-1[bp],al
23222                                           !BCC_EOS
23223                                           ! 2806  line=find_vga_entry(mode);
23224                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23225 5C9E           8A46         FF            mov	al,-1[bp]
23226 5CA1           30E4                       xor	ah,ah
23227 5CA3           50                         push	ax
23228                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23229 5CA4           E8         1E4E            call	_find_vga_entry
23230 5CA7           44                         inc	sp
23231 5CA8           44                         inc	sp
23232                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23233 5CA9           8846         FE            mov	-2[bp],al
23234                                           !BCC_EOS
23235                                           ! 2807  if(line==0xFF)return;
23236                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23237 5CAC           8A46         FE            mov	al,-2[bp]
23238 5CAF           3C                     FF  cmp	al,#$FF
23239 5CB1           75           04            jne 	.1C9
23240                       00005CB3            .1CA:
23241 5CB3           89EC                       mov	sp,bp
23242 5CB5           5D                         pop	bp
23243 5CB6           C3                         ret
23244                                           !BCC_EOS
23245                                           ! 2808  if(vga_modes[line].class==0x00)return;
23246                       00005CB7            .1C9:
23247                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23248 5CB7           8A46         FE            mov	al,-2[bp]
23249 5CBA           30E4                       xor	ah,ah
23250 5CBC           B1                     03  mov	cl,*3
23251 5CBE           D3E0                       shl	ax,cl
23252 5CC0           89C3                       mov	bx,ax
23253 5CC2           81C3                 01F6  add	bx,#_vga_modes
23254                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23255 5CC6           8A47         01            mov	al,1[bx]
23256 5CC9           84C0                       test	al,al
23257 5CCB           75           04            jne 	.1CB
23258                       00005CCD            .1CC:
23259 5CCD           89EC                       mov	sp,bp
23260 5CCF           5D                         pop	bp
23261 5CD0           C3                         ret
23262                                           !BCC_EOS
23263                                           ! 2809  switch(vga_modes[line].memmodel)
23264                       00005CD1            .1CB:
23265                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23266 5CD1           8A46         FE            mov	al,-2[bp]
23267 5CD4           30E4                       xor	ah,ah
23268 5CD6           B1                     03  mov	cl,*3
23269 5CD8           D3E0                       shl	ax,cl
23270 5CDA           89C3                       mov	bx,ax
23271 5CDC           81C3                 01F6  add	bx,#_vga_modes
23272 5CE0           8A47         02            mov	al,2[bx]
23273                                           ! 2810   {
23274 5CE3           E9         0167            br 	.1CF
23275                                           ! 2811    case 0x04:
23276                                           ! 2812    case 0x03:
23277                       00005CE6            .1D0:
23278                                           ! 2813      addr = CX/8+DX*read_word(0x40,0x4A);
23279                       00005CE6            .1D1:
23280                                           ! Debug: list int = const $4A (used reg = )
23281 5CE6           B8                   004A  mov	ax,*$4A
23282 5CE9           50                         push	ax
23283                                           ! Debug: list int = const $40 (used reg = )
23284 5CEA           B8                   0040  mov	ax,*$40
23285 5CED           50                         push	ax
23286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23287 5CEE           E8         1F03            call	_read_word
23288 5CF1           83C4                   04  add	sp,*4
23289                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23290                                           ! Debug: expression subtree swapping
23291 5CF4           8B4E         08            mov	cx,8[bp]
23292 5CF7           F7E9                       imul	cx
23293 5CF9           50                         push	ax
23294                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23295 5CFA           8B46         06            mov	ax,6[bp]
23296 5CFD           B1                     03  mov	cl,*3
23297 5CFF           D3E8                       shr	ax,cl
23298                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23299 5D01           0346         F4            add	ax,0+..FFF7[bp]
23300 5D04           44                         inc	sp
23301 5D05           44                         inc	sp
23302                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23303 5D06           8946         F8            mov	-8[bp],ax
23304                                           !BCC_EOS
23305                                           ! 2814      mask = 0x80 >> (CX & 0x07);
23306                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23307 5D09           8A46         06            mov	al,6[bp]
23308 5D0C           24                     07  and	al,*7
23309                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23310 5D0E           30E4                       xor	ah,ah
23311 5D10           89C3                       mov	bx,ax
23312 5D12           B8                   0080  mov	ax,#$80
23313 5D15           89D9                       mov	cx,bx
23314 5D17           D3F8                       sar	ax,cl
23315                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23316 5D19           8846         FD            mov	-3[bp],al
23317                                           !BCC_EOS
23318                                           ! 2815      attr = 0x00;
23319                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23320 5D1C           30C0                       xor	al,al
23321 5D1E           8846         FC            mov	-4[bp],al
23322                                           !BCC_EOS
23323                                           ! 2816      for(i=0;i<4;i++)
23324                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23325 5D21           30C0                       xor	al,al
23326 5D23           8846         FA            mov	-6[bp],al
23327                                           !BCC_EOS
23328                                           !BCC_EOS
23329                                           ! 2817       {
23330 5D26           EB           4B            jmp .1D4
23331                       00005D28            .1D5:
23332                                           ! 2818        outw(0x3ce, (i << 8) | 0x04);
23333                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23334 5D28           8A46         FA            mov	al,-6[bp]
23335 5D2B           30E4                       xor	ah,ah
23336 5D2D           88C4                       mov	ah,al
23337 5D2F           30C0                       xor	al,al
23338                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23339 5D31           0C                     04  or	al,*4
23340                                           ! Debug: list unsigned int = ax+0 (used reg = )
23341 5D33           50                         push	ax
23342                                           ! Debug: list int = const $3CE (used reg = )
23343 5D34           B8                   03CE  mov	ax,#$3CE
23344 5D37           50                         push	ax
23345                                           ! Debug: func () void = outw+0 (used reg = )
23346 5D38           E8         1F22            call	_outw
23347 5D3B           83C4                   04  add	sp,*4
23348                                           !BCC_EOS
23349                                           ! 2819        data = read_byte(0xa000,addr) & mask;
23350                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23351 5D3E           FF76         F8            push	-8[bp]
23352                                           ! Debug: list unsigned int = const $A000 (used reg = )
23353 5D41           B8                   A000  mov	ax,#$A000
23354 5D44           50                         push	ax
23355                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23356 5D45           E8         1E99            call	_read_byte
23357 5D48           83C4                   04  add	sp,*4
23358                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23359 5D4B           2246         FD            and	al,-3[bp]
23360                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23361 5D4E           8846         FB            mov	-5[bp],al
23362                                           !BCC_EOS
23363                                           ! 2820        if (data > 0) attr |= (0x01 << i);
23364                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23365 5D51           8A46         FB            mov	al,-5[bp]
23366 5D54           84C0                       test	al,al
23367 5D56           74           14            je  	.1D6
23368                       00005D58            .1D7:
23369                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23370 5D58           8A46         FA            mov	al,-6[bp]
23371 5D5B           30E4                       xor	ah,ah
23372 5D5D           89C3                       mov	bx,ax
23373 5D5F           B8                   0001  mov	ax,*1
23374 5D62           89D9                       mov	cx,bx
23375 5D64           D3E0                       shl	ax,cl
23376                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23377 5D66           0A46         FC            or	al,-4[bp]
23378 5D69           8846         FC            mov	-4[bp],al
23379                                           !BCC_EOS
23380                                           ! 2821       }
23381                       00005D6C            .1D6:
23382                                           ! 2822      break;
23383                       00005D6C            .1D3:
23384                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23385 5D6C           8A46         FA            mov	al,-6[bp]
23386 5D6F           40                         inc	ax
23387 5D70           8846         FA            mov	-6[bp],al
23388                       00005D73            .1D4:
23389                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23390 5D73           8A46         FA            mov	al,-6[bp]
23391 5D76           3C                     04  cmp	al,*4
23392 5D78           72           AE            jb 	.1D5
23393                       00005D7A            .1D8:
23394                       00005D7A            .1D2:
23395 5D7A           E9         00E8            br 	.1CD
23396                                           !BCC_EOS
23397                                           ! 2823    case 0x02:
23398                                           ! 2824      addr=(CX>>2)+(DX>>1)*80;
23399                       00005D7D            .1D9:
23400                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23401 5D7D           8B46         08            mov	ax,8[bp]
23402 5D80           D1E8                       shr	ax,*1
23403                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23404 5D82           B9                   0050  mov	cx,*$50
23405 5D85           F7E9                       imul	cx
23406 5D87           50                         push	ax
23407                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23408 5D88           8B46         06            mov	ax,6[bp]
23409 5D8B           D1E8                       shr	ax,*1
23410 5D8D           D1E8                       shr	ax,*1
23411                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23412 5D8F           0346         F4            add	ax,0+..FFF7[bp]
23413 5D92           44                         inc	sp
23414 5D93           44                         inc	sp
23415                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23416 5D94           8946         F8            mov	-8[bp],ax
23417                                           !BCC_EOS
23418                                           ! 2825      if (DX & 1) addr += 0x2000;
23419                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23420 5D97           8A46         08            mov	al,8[bp]
23421 5D9A           24                     01  and	al,*1
23422 5D9C           84C0                       test	al,al
23423 5D9E           74           09            je  	.1DA
23424                       00005DA0            .1DB:
23425                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23426 5DA0           8B46         F8            mov	ax,-8[bp]
23427 5DA3           05                   2000  add	ax,#$2000
23428 5DA6           8946         F8            mov	-8[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2826      data = read_byte(0xb800,addr);
23431                       00005DA9            .1DA:
23432                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23433 5DA9           FF76         F8            push	-8[bp]
23434                                           ! Debug: list unsigned int = const $B800 (used reg = )
23435 5DAC           B8                   B800  mov	ax,#$B800
23436 5DAF           50                         push	ax
23437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23438 5DB0           E8         1E2E            call	_read_byte
23439 5DB3           83C4                   04  add	sp,*4
23440                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5DB6           8846         FB            mov	-5[bp],al
23442                                           !BCC_EOS
23443                                           ! 2827      if(vga_modes[line].pixbits==2)
23444                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23445 5DB9           8A46         FE            mov	al,-2[bp]
23446 5DBC           30E4                       xor	ah,ah
23447 5DBE           B1                     03  mov	cl,*3
23448 5DC0           D3E0                       shl	ax,cl
23449 5DC2           89C3                       mov	bx,ax
23450 5DC4           81C3                 01F6  add	bx,#_vga_modes
23451                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23452 5DC8           8A47         03            mov	al,3[bx]
23453 5DCB           3C                     02  cmp	al,*2
23454 5DCD           75           25            jne 	.1DC
23455                       00005DCF            .1DD:
23456                                           ! 2828       {
23457                                           ! 2829        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23458                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23459 5DCF           8A46         06            mov	al,6[bp]
23460 5DD2           24                     03  and	al,*3
23461                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23462 5DD4           50                         push	ax
23463 5DD5           B8                   0003  mov	ax,*3
23464 5DD8           2A46         F4            sub	al,0+..FFF7[bp]
23465 5DDB           80DC                   00  sbb	ah,*0
23466 5DDE           44                         inc	sp
23467 5DDF           44                         inc	sp
23468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23469 5DE0           D1E0                       shl	ax,*1
23470                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23471 5DE2           89C3                       mov	bx,ax
23472 5DE4           8A46         FB            mov	al,-5[bp]
23473 5DE7           30E4                       xor	ah,ah
23474 5DE9           89D9                       mov	cx,bx
23475 5DEB           D3E8                       shr	ax,cl
23476                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23477 5DED           24                     03  and	al,*3
23478                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23479 5DEF           8846         FC            mov	-4[bp],al
23480                                           !BCC_EOS
23481                                           ! 2830       }
23482                                           ! 2831      else
23483                                           ! 2832       {
23484 5DF2           EB           21            jmp .1DE
23485                       00005DF4            .1DC:
23486                                           ! 2833        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23487                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23488 5DF4           8A46         06            mov	al,6[bp]
23489 5DF7           24                     07  and	al,*7
23490                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23491 5DF9           50                         push	ax
23492 5DFA           B8                   0007  mov	ax,*7
23493 5DFD           2A46         F4            sub	al,0+..FFF7[bp]
23494 5E00           80DC                   00  sbb	ah,*0
23495 5E03           44                         inc	sp
23496 5E04           44                         inc	sp
23497                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23498 5E05           89C3                       mov	bx,ax
23499 5E07           8A46         FB            mov	al,-5[bp]
23500 5E0A           30E4                       xor	ah,ah
23501 5E0C           89D9                       mov	cx,bx
23502 5E0E           D3E8                       shr	ax,cl
23503                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23504 5E10           24                     01  and	al,*1
23505                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5E12           8846         FC            mov	-4[bp],al
23507                                           !BCC_EOS
23508                                           ! 2834       }
23509                                           ! 2835      break;
23510                       00005E15            .1DE:
23511 5E15           EB           4E            jmp .1CD
23512                                           !BCC_EOS
23513                                           ! 2836    case 0x05:
23514                                           ! 2837      addr=CX+DX*(read_word(0x40,0x4A)*8);
23515                       00005E17            .1DF:
23516                                           ! Debug: list int = const $4A (used reg = )
23517 5E17           B8                   004A  mov	ax,*$4A
23518 5E1A           50                         push	ax
23519                                           ! Debug: list int = const $40 (used reg = )
23520 5E1B           B8                   0040  mov	ax,*$40
23521 5E1E           50                         push	ax
23522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23523 5E1F           E8         1DD2            call	_read_word
23524 5E22           83C4                   04  add	sp,*4
23525                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23526 5E25           B1                     03  mov	cl,*3
23527 5E27           D3E0                       shl	ax,cl
23528                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23529                                           ! Debug: expression subtree swapping
23530 5E29           8B4E         08            mov	cx,8[bp]
23531 5E2C           F7E9                       imul	cx
23532                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23533                                           ! Debug: expression subtree swapping
23534 5E2E           0346         06            add	ax,6[bp]
23535                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23536 5E31           8946         F8            mov	-8[bp],ax
23537                                           !BCC_EOS
23538                                           ! 2838      attr=read_byte(0xa000,addr);
23539                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23540 5E34           FF76         F8            push	-8[bp]
23541                                           ! Debug: list unsigned int = const $A000 (used reg = )
23542 5E37           B8                   A000  mov	ax,#$A000
23543 5E3A           50                         push	ax
23544                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23545 5E3B           E8         1DA3            call	_read_byte
23546 5E3E           83C4                   04  add	sp,*4
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23548 5E41           8846         FC            mov	-4[bp],al
23549                                           !BCC_EOS
23550                                           ! 2839      break;
23551 5E44           EB           1F            jmp .1CD
23552                                           !BCC_EOS
23553                                           ! 2840    default:
23554                                           ! 2841      attr = 0;
23555                       00005E46            .1E0:
23556                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23557 5E46           30C0                       xor	al,al
23558 5E48           8846         FC            mov	-4[bp],al
23559                                           !BCC_EOS
23560                                           ! 2842   }
23561                                           ! 2843  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23562 5E4B           EB           18            jmp .1CD
23563                       00005E4D            .1CF:
23564 5E4D           2C                     02  sub	al,*2
23565 5E4F         0F84         FF2A            beq 	.1D9
23566 5E53           2C                     01  sub	al,*1
23567 5E55         0F84         FE8D            beq 	.1D1
23568 5E59           2C                     01  sub	al,*1
23569 5E5B         0F84         FE87            beq 	.1D0
23570 5E5F           2C                     01  sub	al,*1
23571 5E61           74           B4            je 	.1DF
23572 5E63           EB           E1            jmp	.1E0
23573                       00005E65            .1CD:
23574                       FFFFFFF4            ..FFF7	=	-$C
23575                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23576 5E65           FF76         0A            push	$A[bp]
23577                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23578 5E68           FF76         F6            push	-$A[bp]
23579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23580 5E6B           E8         1D86            call	_read_word
23581 5E6E           83C4                   04  add	sp,*4
23582                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23583 5E71           30C0                       xor	al,al
23584                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23585 5E73           0A46         FC            or	al,-4[bp]
23586                                           ! Debug: list unsigned int = ax+0 (used reg = )
23587 5E76           50                         push	ax
23588                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23589 5E77           FF76         0A            push	$A[bp]
23590                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23591 5E7A           FF76         F6            push	-$A[bp]
23592                                           ! Debug: func () void = write_word+0 (used reg = )
23593 5E7D           E8         1D9F            call	_write_word
23594 5E80           83C4                   06  add	sp,*6
23595                                           !BCC_EOS
23596                                           ! 2844 }
23597 5E83           89EC                       mov	sp,bp
23598 5E85           5D                         pop	bp
23599 5E86           C3                         ret
23600                                           ! 2845 static void biosfn_write_teletype (car, page, attr, flag)
23601                                           ! Register BX used in function biosfn_read_pixel
23602                                           ! 2846 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23603                       00005E87            _biosfn_write_teletype:
23604                                           !BCC_EOS
23605                                           !BCC_EOS
23606                                           !BCC_EOS
23607                                           !BCC_EOS
23608                                           ! 2847 {
23609                                           ! 2848  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23610                                           !BCC_EOS
23611                                           ! 2849  Bit16u nbcols,nbrows,address;
23612                                           !BCC_EOS
23613                                           ! 2850  Bit16u cursor,dummy;
23614                                           !BCC_EOS
23615                                           ! 2851  if(page==0xff)
23616 5E87           55                         push	bp
23617 5E88           89E5                       mov	bp,sp
23618 5E8A           83C4                   F0  add	sp,*-$10
23619                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23620 5E8D           8A46         06            mov	al,6[bp]
23621 5E90           3C                     FF  cmp	al,#$FF
23622 5E92           75           11            jne 	.1E1
23623                       00005E94            .1E2:
23624                                           ! 2852   page=read_byte(0x40,0x62);
23625                                           ! Debug: list int = const $62 (used reg = )
23626 5E94           B8                   0062  mov	ax,*$62
23627 5E97           50                         push	ax
23628                                           ! Debug: list int = const $40 (used reg = )
23629 5E98           B8                   0040  mov	ax,*$40
23630 5E9B           50                         push	ax
23631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23632 5E9C           E8         1D42            call	_read_byte
23633 5E9F           83C4                   04  add	sp,*4
23634                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23635 5EA2           8846         06            mov	6[bp],al
23636                                           !BCC_EOS
23637                                           ! 2853  mode=read_byte(0x40,0x49);
23638                       00005EA5            .1E1:
23639                                           ! Debug: list int = const $49 (used reg = )
23640 5EA5           B8                   0049  mov	ax,*$49
23641 5EA8           50                         push	ax
23642                                           ! Debug: list int = const $40 (used reg = )
23643 5EA9           B8                   0040  mov	ax,*$40
23644 5EAC           50                         push	ax
23645                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23646 5EAD           E8         1D31            call	_read_byte
23647 5EB0           83C4                   04  add	sp,*4
23648                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23649 5EB3           8846         FC            mov	-4[bp],al
23650                                           !BCC_EOS
23651                                           ! 2854  line=find_vga_entry(mode);
23652                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23653 5EB6           8A46         FC            mov	al,-4[bp]
23654 5EB9           30E4                       xor	ah,ah
23655 5EBB           50                         push	ax
23656                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23657 5EBC           E8         1C36            call	_find_vga_entry
23658 5EBF           44                         inc	sp
23659 5EC0           44                         inc	sp
23660                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23661 5EC1           8846         FB            mov	-5[bp],al
23662                                           !BCC_EOS
23663                                           ! 2855  if(line==0xFF)return;
23664                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23665 5EC4           8A46         FB            mov	al,-5[bp]
23666 5EC7           3C                     FF  cmp	al,#$FF
23667 5EC9           75           04            jne 	.1E3
23668                       00005ECB            .1E4:
23669 5ECB           89EC                       mov	sp,bp
23670 5ECD           5D                         pop	bp
23671 5ECE           C3                         ret
23672                                           !BCC_EOS
23673                                           ! 2856  biosfn_get_cursor_pos(page,&dummy,&cursor);
23674                       00005ECF            .1E3:
23675                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23676 5ECF           8D5E         F2            lea	bx,-$E[bp]
23677 5ED2           53                         push	bx
23678                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23679 5ED3           8D5E         F0            lea	bx,-$10[bp]
23680 5ED6           53                         push	bx
23681                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23682 5ED7           8A46         06            mov	al,6[bp]
23683 5EDA           30E4                       xor	ah,ah
23684 5EDC           50                         push	ax
23685                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23686 5EDD           E8         E562            call	_biosfn_get_cursor_pos
23687 5EE0           83C4                   06  add	sp,*6
23688                                           !BCC_EOS
23689                                           ! 2857  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00
23690                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23691 5EE3           8A46         F2            mov	al,-$E[bp]
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23693 5EE6           8846         FE            mov	-2[bp],al
23694                                           !BCC_EOS
23695                                           ! 2857 )>>8;
23696                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23697 5EE9           8B46         F2            mov	ax,-$E[bp]
23698 5EEC           30C0                       xor	al,al
23699                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23700 5EEE           88E0                       mov	al,ah
23701 5EF0           30E4                       xor	ah,ah
23702                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23703 5EF2           8846         FD            mov	-3[bp],al
23704                                           !BCC_EOS
23705                                           ! 2858  nbrows=read_byte(0x40,0x84)+1;
23706                                           ! Debug: list int = const $84 (used reg = )
23707 5EF5           B8                   0084  mov	ax,#$84
23708 5EF8           50                         push	ax
23709                                           ! Debug: list int = const $40 (used reg = )
23710 5EF9           B8                   0040  mov	ax,*$40
23711 5EFC           50                         push	ax
23712                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23713 5EFD           E8         1CE1            call	_read_byte
23714 5F00           83C4                   04  add	sp,*4
23715                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23716 5F03           30E4                       xor	ah,ah
23717                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23718 5F05           40                         inc	ax
23719 5F06           8946         F6            mov	-$A[bp],ax
23720                                           !BCC_EOS
23721                                           ! 2859  nbcols=read_word(0x40,0x4A);
23722                                           ! Debug: list int = const $4A (used reg = )
23723 5F09           B8                   004A  mov	ax,*$4A
23724 5F0C           50                         push	ax
23725                                           ! Debug: list int = const $40 (used reg = )
23726 5F0D           B8                   0040  mov	ax,*$40
23727 5F10           50                         push	ax
23728                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23729 5F11           E8         1CE0            call	_read_word
23730 5F14           83C4                   04  add	sp,*4
23731                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23732 5F17           8946         F8            mov	-8[bp],ax
23733                                           !BCC_EOS
23734                                           ! 2860  switch(car)
23735 5F1A           8A46         04            mov	al,4[bp]
23736                                           ! 2861   {
23737 5F1D           E9         01ED            br 	.1E7
23738                                           ! 2862    case 7:
23739                                           ! 2863     break;
23740                       00005F20            .1E8:
23741 5F20           E9         020B            br 	.1E5
23742                                           !BCC_EOS
23743                                           ! 2864    case 8:
23744                                           ! 2865     if(xcurs>0)xcurs--;
23745                       00005F23            .1E9:
23746                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23747 5F23           8A46         FE            mov	al,-2[bp]
23748 5F26           84C0                       test	al,al
23749 5F28           74           07            je  	.1EA
23750                       00005F2A            .1EB:
23751                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23752 5F2A           8A46         FE            mov	al,-2[bp]
23753 5F2D           48                         dec	ax
23754 5F2E           8846         FE            mov	-2[bp],al
23755                                           !BCC_EOS
23756                                           ! 2866     break;
23757                       00005F31            .1EA:
23758 5F31           E9         01FA            br 	.1E5
23759                                           !BCC_EOS
23760                                           ! 2867    case '\r':
23761                                           ! 2868     xcurs=0;
23762                       00005F34            .1EC:
23763                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23764 5F34           30C0                       xor	al,al
23765 5F36           8846         FE            mov	-2[bp],al
23766                                           !BCC_EOS
23767                                           ! 2869     break;
23768 5F39           E9         01F2            br 	.1E5
23769                                           !BCC_EOS
23770                                           ! 2870    case '\n':
23771                                           ! 2871     ycurs++;
23772                       00005F3C            .1ED:
23773                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23774 5F3C           8A46         FD            mov	al,-3[bp]
23775 5F3F           40                         inc	ax
23776 5F40           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2872     break;
23779 5F43           E9         01E8            br 	.1E5
23780                                           !BCC_EOS
23781                                           ! 2873    case '\t':
23782                                           ! 2874     do
23783                       00005F46            .1EE:
23784                                           ! 2875      {
23785                       00005F46            .1F1:
23786                                           ! 2876       biosfn_write_teletype(' ',page,attr,flag);
23787                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23788 5F46           8A46         0A            mov	al,$A[bp]
23789 5F49           30E4                       xor	ah,ah
23790 5F4B           50                         push	ax
23791                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23792 5F4C           8A46         08            mov	al,8[bp]
23793 5F4F           30E4                       xor	ah,ah
23794 5F51           50                         push	ax
23795                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23796 5F52           8A46         06            mov	al,6[bp]
23797 5F55           30E4                       xor	ah,ah
23798 5F57           50                         push	ax
23799                                           ! Debug: list int = const $20 (used reg = )
23800 5F58           B8                   0020  mov	ax,*$20
23801 5F5B           50                         push	ax
23802                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23803 5F5C           E8         FF28            call	_biosfn_write_teletype
23804 5F5F           83C4                   08  add	sp,*8
23805                                           !BCC_EOS
23806                                           ! 2877       biosfn_get_cursor_pos(page,&dummy,&cursor);
23807                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23808 5F62           8D5E         F2            lea	bx,-$E[bp]
23809 5F65           53                         push	bx
23810                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23811 5F66           8D5E         F0            lea	bx,-$10[bp]
23812 5F69           53                         push	bx
23813                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23814 5F6A           8A46         06            mov	al,6[bp]
23815 5F6D           30E4                       xor	ah,ah
23816 5F6F           50                         push	ax
23817                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23818 5F70           E8         E4CF            call	_biosfn_get_cursor_pos
23819 5F73           83C4                   06  add	sp,*6
23820                                           !BCC_EOS
23821                                           ! 2878       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23822                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23823 5F76           8A46         F2            mov	al,-$E[bp]
23824                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23825 5F79           8846         FE            mov	-2[bp],al
23826                                           !BCC_EOS
23827                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23828 5F7C           8B46         F2            mov	ax,-$E[bp]
23829 5F7F           30C0                       xor	al,al
23830                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23831 5F81           88E0                       mov	al,ah
23832 5F83           30E4                       xor	ah,ah
23833                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23834 5F85           8846         FD            mov	-3[bp],al
23835                                           !BCC_EOS
23836                                           ! 2879      }while(xcurs%8==0);
23837                       00005F88            .1F0:
23838                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23839 5F88           8A46         FE            mov	al,-2[bp]
23840 5F8B           30E4                       xor	ah,ah
23841 5F8D           24                     07  and	al,*7
23842                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23843 5F8F           84C0                       test	al,al
23844 5F91           74           B3            je 	.1F1
23845                       00005F93            .1F2:
23846                                           !BCC_EOS
23847                                           ! 2880     break;
23848                       00005F93            .1EF:
23849 5F93           E9         0198            br 	.1E5
23850                                           !BCC_EOS
23851                                           ! 2881    default:
23852                                           ! 2882     if(vga_modes[line].class==0x00)
23853                       00005F96            .1F3:
23854                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23855 5F96           8A46         FB            mov	al,-5[bp]
23856 5F99           30E4                       xor	ah,ah
23857 5F9B           B1                     03  mov	cl,*3
23858 5F9D           D3E0                       shl	ax,cl
23859 5F9F           89C3                       mov	bx,ax
23860 5FA1           81C3                 01F6  add	bx,#_vga_modes
23861                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23862 5FA5           8A47         01            mov	al,1[bx]
23863 5FA8           84C0                       test	al,al
23864 5FAA         0F85         0084            bne 	.1F4
23865                       00005FAE            .1F5:
23866                                           ! 2883      {
23867                                           ! 2884       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23868                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23869 5FAE           8A46         FD            mov	al,-3[bp]
23870 5FB1           30E4                       xor	ah,ah
23871 5FB3           8B4E         F8            mov	cx,-8[bp]
23872 5FB6           F7E9                       imul	cx
23873                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23874                                           ! Debug: expression subtree swapping
23875 5FB8           0246         FE            add	al,-2[bp]
23876 5FBB           80D4                   00  adc	ah,*0
23877                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23878 5FBE           D1E0                       shl	ax,*1
23879 5FC0           50                         push	ax
23880                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23881 5FC1           8B46         F8            mov	ax,-8[bp]
23882 5FC4           8B4E         F6            mov	cx,-$A[bp]
23883 5FC7           F7E9                       imul	cx
23884                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23885 5FC9           D1E0                       shl	ax,*1
23886                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23887 5FCB           0C                     FF  or	al,#$FF
23888                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23889                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23890 5FCD           89C3                       mov	bx,ax
23891 5FCF           8A46         06            mov	al,6[bp]
23892 5FD2           30E4                       xor	ah,ah
23893 5FD4           93                         xchg	ax,bx
23894 5FD5           40                         inc	ax
23895 5FD6           89D9                       mov	cx,bx
23896 5FD8           F7E9                       imul	cx
23897                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23898 5FDA           0346         EE            add	ax,0+..FFF6[bp]
23899 5FDD           44                         inc	sp
23900 5FDE           44                         inc	sp
23901                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23902 5FDF           8946         F4            mov	-$C[bp],ax
23903                                           !BCC_EOS
23904                                           ! 2885       write_byte(vga_modes[line].sstart,address,car);
23905                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23906 5FE2           8A46         04            mov	al,4[bp]
23907 5FE5           30E4                       xor	ah,ah
23908 5FE7           50                         push	ax
23909                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23910 5FE8           FF76         F4            push	-$C[bp]
23911                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23912 5FEB           8A46         FB            mov	al,-5[bp]
23913 5FEE           30E4                       xor	ah,ah
23914 5FF0           B1                     03  mov	cl,*3
23915 5FF2           D3E0                       shl	ax,cl
23916 5FF4           89C3                       mov	bx,ax
23917 5FF6           81C3                 01F6  add	bx,#_vga_modes
23918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23919 5FFA           FF77         04            push	4[bx]
23920                                           ! Debug: func () void = write_byte+0 (used reg = )
23921 5FFD           E8         1C07            call	_write_byte
23922 6000           83C4                   06  add	sp,*6
23923                                           !BCC_EOS
23924                                           ! 2886       if(flag==3)
23925                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23926 6003           8A46         0A            mov	al,$A[bp]
23927 6006           3C                     03  cmp	al,*3
23928 6008         0F85         0023            bne 	.1F6
23929                       0000600C            .1F7:
23930                                           ! 2887        write_byte(vga_modes[line].sstart,address+1,attr);
23931                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23932 600C           8A46         08            mov	al,8[bp]
23933 600F           30E4                       xor	ah,ah
23934 6011           50                         push	ax
23935                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23936 6012           8B46         F4            mov	ax,-$C[bp]
23937                                           ! Debug: list unsigned int = ax+1 (used reg = )
23938 6015           40                         inc	ax
23939 6016           50                         push	ax
23940                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23941 6017           8A46         FB            mov	al,-5[bp]
23942 601A           30E4                       xor	ah,ah
23943 601C           B1                     03  mov	cl,*3
23944 601E           D3E0                       shl	ax,cl
23945 6020           89C3                       mov	bx,ax
23946 6022           81C3                 01F6  add	bx,#_vga_modes
23947                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23948 6026           FF77         04            push	4[bx]
23949                                           ! Debug: func () void = write_byte+0 (used reg = )
23950 6029           E8         1BDB            call	_write_byte
23951 602C           83C4                   06  add	sp,*6
23952                                           !BCC_EOS
23953                                           ! 2888      }
23954                       0000602F            .1F6:
23955                                           ! 2889     else
23956                                           ! 2890      {
23957 602F           E9         00D2            br 	.1F8
23958                       00006032            .1F4:
23959                                           ! 2891       cheight=video_param_table[line_to_vpti[line]].cheight;
23960                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23961 6032           8A46         FB            mov	al,-5[bp]
23962 6035           30E4                       xor	ah,ah
23963 6037           89C3                       mov	bx,ax
23964                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23965 6039           8A87       0276            mov	al,_line_to_vpti[bx]
23966 603D           30E4                       xor	ah,ah
23967 603F           B1                     06  mov	cl,*6
23968 6041           D3E0                       shl	ax,cl
23969 6043           89C3                       mov	bx,ax
23970 6045           81C3                 028A  add	bx,#_video_param_table
23971                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23972 6049           8A47         02            mov	al,2[bx]
23973 604C           8846         FF            mov	-1[bp],al
23974                                           !BCC_EOS
23975                                           ! 2892       bpp=vga_modes[line].pixbits;
23976                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23977 604F           8A46         FB            mov	al,-5[bp]
23978 6052           30E4                       xor	ah,ah
23979 6054           B1                     03  mov	cl,*3
23980 6056           D3E0                       shl	ax,cl
23981 6058           89C3                       mov	bx,ax
23982 605A           81C3                 01F6  add	bx,#_vga_modes
23983                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23984 605E           8A47         03            mov	al,3[bx]
23985 6061           8846         FA            mov	-6[bp],al
23986                                           !BCC_EOS
23987                                           ! 2893       switch(vga_modes[line].memmodel)
23988                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23989 6064           8A46         FB            mov	al,-5[bp]
23990 6067           30E4                       xor	ah,ah
23991 6069           B1                     03  mov	cl,*3
23992 606B           D3E0                       shl	ax,cl
23993 606D           89C3                       mov	bx,ax
23994 606F           81C3                 01F6  add	bx,#_vga_modes
23995 6073           8A47         02            mov	al,2[bx]
23996                                           ! 2894        {
23997 6076           E9         0077            br 	.1FB
23998                                           ! 2895         case 0x04:
23999                                           ! 2896         case 0x03:
24000                       00006079            .1FC:
24001                                           ! 2897           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24002                       00006079            .1FD:
24003                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24004 6079           8A46         FF            mov	al,-1[bp]
24005 607C           30E4                       xor	ah,ah
24006 607E           50                         push	ax
24007                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24008 607F           FF76         F8            push	-8[bp]
24009                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24010 6082           8A46         FD            mov	al,-3[bp]
24011 6085           30E4                       xor	ah,ah
24012 6087           50                         push	ax
24013                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24014 6088           8A46         FE            mov	al,-2[bp]
24015 608B           30E4                       xor	ah,ah
24016 608D           50                         push	ax
24017                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24018 608E           8A46         08            mov	al,8[bp]
24019 6091           30E4                       xor	ah,ah
24020 6093           50                         push	ax
24021                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24022 6094           8A46         04            mov	al,4[bp]
24023 6097           30E4                       xor	ah,ah
24024 6099           50                         push	ax
24025                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24026 609A           E8         F09E            call	_write_gfx_char_pl4
24027 609D           83C4                   0C  add	sp,*$C
24028                                           !BCC_EOS
24029                                           ! 2898           break;
24030 60A0           EB           62            jmp .1F9
24031                                           !BCC_EOS
24032                                           ! 2899         case 0x02:
24033                                           ! 2900           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24034                       000060A2            .1FE:
24035                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24036 60A2           8A46         FA            mov	al,-6[bp]
24037 60A5           30E4                       xor	ah,ah
24038 60A7           50                         push	ax
24039                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24040 60A8           FF76         F8            push	-8[bp]
24041                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24042 60AB           8A46         FD            mov	al,-3[bp]
24043 60AE           30E4                       xor	ah,ah
24044 60B0           50                         push	ax
24045                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24046 60B1           8A46         FE            mov	al,-2[bp]
24047 60B4           30E4                       xor	ah,ah
24048 60B6           50                         push	ax
24049                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24050 60B7           8A46         08            mov	al,8[bp]
24051 60BA           30E4                       xor	ah,ah
24052 60BC           50                         push	ax
24053                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24054 60BD           8A46         04            mov	al,4[bp]
24055 60C0           30E4                       xor	ah,ah
24056 60C2           50                         push	ax
24057                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24058 60C3           E8         F1E8            call	_write_gfx_char_cga
24059 60C6           83C4                   0C  add	sp,*$C
24060                                           !BCC_EOS
24061                                           ! 2901           break;
24062 60C9           EB           39            jmp .1F9
24063                                           !BCC_EOS
24064                                           ! 2902         case 0x05:
24065                                           ! 2903           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24066                       000060CB            .1FF:
24067                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24068 60CB           FF76         F8            push	-8[bp]
24069                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24070 60CE           8A46         FD            mov	al,-3[bp]
24071 60D1           30E4                       xor	ah,ah
24072 60D3           50                         push	ax
24073                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24074 60D4           8A46         FE            mov	al,-2[bp]
24075 60D7           30E4                       xor	ah,ah
24076 60D9           50                         push	ax
24077                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24078 60DA           8A46         08            mov	al,8[bp]
24079 60DD           30E4                       xor	ah,ah
24080 60DF           50                         push	ax
24081                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24082 60E0           8A46         04            mov	al,4[bp]
24083 60E3           30E4                       xor	ah,ah
24084 60E5           50                         push	ax
24085                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24086 60E6           E8         F3C8            call	_write_gfx_char_lin
24087 60E9           83C4                   0A  add	sp,*$A
24088                                           !BCC_EOS
24089                                           ! 2904           break;
24090 60EC           EB           16            jmp .1F9
24091                                           !BCC_EOS
24092                                           ! 2905        }
24093                                           ! 2906      }
24094 60EE           EB           14            jmp .1F9
24095                       000060F0            .1FB:
24096 60F0           2C                     02  sub	al,*2
24097 60F2           74           AE            je 	.1FE
24098 60F4           2C                     01  sub	al,*1
24099 60F6         0F84         FF7F            beq 	.1FD
24100 60FA           2C                     01  sub	al,*1
24101 60FC         0F84         FF79            beq 	.1FC
24102 6100           2C                     01  sub	al,*1
24103 6102           74           C7            je 	.1FF
24104                       00006104            .1F9:
24105                                           ! 2907     xcurs++;
24106                       00006104            .1F8:
24107                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24108 6104           8A46         FE            mov	al,-2[bp]
24109 6107           40                         inc	ax
24110 6108           8846         FE            mov	-2[bp],al
24111                                           !BCC_EOS
24112                                           ! 2908   }
24113                                           ! 2909  if(xcurs==nbcols)
24114 610B           EB           21            jmp .1E5
24115                       0000610D            .1E7:
24116 610D           2C                     07  sub	al,*7
24117 610F         0F84         FE0D            beq 	.1E8
24118 6113           2C                     01  sub	al,*1
24119 6115         0F84         FE0A            beq 	.1E9
24120 6119           2C                     01  sub	al,*1
24121 611B         0F84         FE27            beq 	.1EE
24122 611F           2C                     01  sub	al,*1
24123 6121         0F84         FE17            beq 	.1ED
24124 6125           2C                     03  sub	al,*3
24125 6127         0F84         FE09            beq 	.1EC
24126 612B           E9         FE68            br 	.1F3
24127                       0000612E            .1E5:
24128                       FFFFFFEE            ..FFF6	=	-$12
24129                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24130 612E           8A46         FE            mov	al,-2[bp]
24131 6131           30E4                       xor	ah,ah
24132 6133           3B46         F8            cmp	ax,-8[bp]
24133 6136           75           0C            jne 	.200
24134                       00006138            .201:
24135                                           ! 2910   {xcurs=0;
24136                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24137 6138           30C0                       xor	al,al
24138 613A           8846         FE            mov	-2[bp],al
24139                                           !BCC_EOS
24140                                           ! 2911    ycurs++;
24141                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24142 613D           8A46         FD            mov	al,-3[bp]
24143 6140           40                         inc	ax
24144 6141           8846         FD            mov	-3[bp],al
24145                                           !BCC_EOS
24146                                           ! 2912   }
24147                                           ! 2913  if(ycurs==nbrows)
24148                       00006144            .200:
24149                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24150 6144           8A46         FD            mov	al,-3[bp]
24151 6147           30E4                       xor	ah,ah
24152 6149           3B46         F6            cmp	ax,-$A[bp]
24153 614C         0F85         00C9            bne 	.202
24154                       00006150            .203:
24155                                           ! 2914   {
24156                                           ! 2915    if(vga_modes[line].class==0x00)
24157                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24158 6150           8A46         FB            mov	al,-5[bp]
24159 6153           30E4                       xor	ah,ah
24160 6155           B1                     03  mov	cl,*3
24161 6157           D3E0                       shl	ax,cl
24162 6159           89C3                       mov	bx,ax
24163 615B           81C3                 01F6  add	bx,#_vga_modes
24164                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24165 615F           8A47         01            mov	al,1[bx]
24166 6162           84C0                       test	al,al
24167 6164         0F85         0081            bne 	.204
24168                       00006168            .205:
24169                                           ! 2916     {
24170                                           ! 2917      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24171                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24172 6168           8A46         FD            mov	al,-3[bp]
24173 616B           30E4                       xor	ah,ah
24174                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24175 616D           48                         dec	ax
24176 616E           8B4E         F8            mov	cx,-8[bp]
24177 6171           F7E9                       imul	cx
24178                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24179                                           ! Debug: expression subtree swapping
24180 6173           0246         FE            add	al,-2[bp]
24181 6176           80D4                   00  adc	ah,*0
24182                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24183 6179           D1E0                       shl	ax,*1
24184 617B           50                         push	ax
24185                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24186 617C           8B46         F8            mov	ax,-8[bp]
24187 617F           8B4E         F6            mov	cx,-$A[bp]
24188 6182           F7E9                       imul	cx
24189                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24190 6184           D1E0                       shl	ax,*1
24191                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24192 6186           0C                     FF  or	al,#$FF
24193                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24194                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24195 6188           89C3                       mov	bx,ax
24196 618A           8A46         06            mov	al,6[bp]
24197 618D           30E4                       xor	ah,ah
24198 618F           93                         xchg	ax,bx
24199 6190           40                         inc	ax
24200 6191           89D9                       mov	cx,bx
24201 6193           F7E9                       imul	cx
24202                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24203 6195           0346         EE            add	ax,-$12[bp]
24204 6198           44                         inc	sp
24205 6199           44                         inc	sp
24206                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24207 619A           8946         F4            mov	-$C[bp],ax
24208                                           !BCC_EOS
24209                                           ! 2918      attr=read_byte(vga_modes[line].sstart,address+1);
24210                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24211 619D           8B46         F4            mov	ax,-$C[bp]
24212                                           ! Debug: list unsigned int = ax+1 (used reg = )
24213 61A0           40                         inc	ax
24214 61A1           50                         push	ax
24215                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24216 61A2           8A46         FB            mov	al,-5[bp]
24217 61A5           30E4                       xor	ah,ah
24218 61A7           B1                     03  mov	cl,*3
24219 61A9           D3E0                       shl	ax,cl
24220 61AB           89C3                       mov	bx,ax
24221 61AD           81C3                 01F6  add	bx,#_vga_modes
24222                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24223 61B1           FF77         04            push	4[bx]
24224                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24225 61B4           E8         1A2A            call	_read_byte
24226 61B7           83C4                   04  add	sp,*4
24227                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24228 61BA           8846         08            mov	8[bp],al
24229                                           !BCC_EOS
24230                                           ! 2919      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24231                                           ! Debug: list int = const 1 (used reg = )
24232 61BD           B8                   0001  mov	ax,*1
24233 61C0           50                         push	ax
24234                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24235 61C1           8A46         06            mov	al,6[bp]
24236 61C4           30E4                       xor	ah,ah
24237 61C6           50                         push	ax
24238                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24239 61C7           8B46         F8            mov	ax,-8[bp]
24240                                           ! Debug: list unsigned int = ax-1 (used reg = )
24241 61CA           48                         dec	ax
24242 61CB           50                         push	ax
24243                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24244 61CC           8B46         F6            mov	ax,-$A[bp]
24245                                           ! Debug: list unsigned int = ax-1 (used reg = )
24246 61CF           48                         dec	ax
24247 61D0           50                         push	ax
24248                                           ! Debug: list int = const 0 (used reg = )
24249 61D1           31C0                       xor	ax,ax
24250 61D3           50                         push	ax
24251                                           ! Debug: list int = const 0 (used reg = )
24252 61D4           31C0                       xor	ax,ax
24253 61D6           50                         push	ax
24254                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24255 61D7           8A46         08            mov	al,8[bp]
24256 61DA           30E4                       xor	ah,ah
24257 61DC           50                         push	ax
24258                                           ! Debug: list int = const 1 (used reg = )
24259 61DD           B8                   0001  mov	ax,*1
24260 61E0           50                         push	ax
24261                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24262 61E1           E8         E756            call	_biosfn_scroll
24263 61E4           83C4                   10  add	sp,*$10
24264                                           !BCC_EOS
24265                                           ! 2920     }
24266                                           ! 2921    else
24267                                           ! 2922     {
24268 61E7           EB           27            jmp .206
24269                       000061E9            .204:
24270                                           ! 2923      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24271                                           ! Debug: list int = const 1 (used reg = )
24272 61E9           B8                   0001  mov	ax,*1
24273 61EC           50                         push	ax
24274                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24275 61ED           8A46         06            mov	al,6[bp]
24276 61F0           30E4                       xor	ah,ah
24277 61F2           50                         push	ax
24278                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24279 61F3           8B46         F8            mov	ax,-8[bp]
24280                                           ! Debug: list unsigned int = ax-1 (used reg = )
24281 61F6           48                         dec	ax
24282 61F7           50                         push	ax
24283                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24284 61F8           8B46         F6            mov	ax,-$A[bp]
24285                                           ! Debug: list unsigned int = ax-1 (used reg = )
24286 61FB           48                         dec	ax
24287 61FC           50                         push	ax
24288                                           ! Debug: list int = const 0 (used reg = )
24289 61FD           31C0                       xor	ax,ax
24290 61FF           50                         push	ax
24291                                           ! Debug: list int = const 0 (used reg = )
24292 6200           31C0                       xor	ax,ax
24293 6202           50                         push	ax
24294                                           ! Debug: list int = const 0 (used reg = )
24295 6203           31C0                       xor	ax,ax
24296 6205           50                         push	ax
24297                                           ! Debug: list int = const 1 (used reg = )
24298 6206           B8                   0001  mov	ax,*1
24299 6209           50                         push	ax
24300                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24301 620A           E8         E72D            call	_biosfn_scroll
24302 620D           83C4                   10  add	sp,*$10
24303                                           !BCC_EOS
24304                                           ! 2924     }
24305                                           ! 2925    ycurs-=1;
24306                       00006210            .206:
24307                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24308 6210           8A46         FD            mov	al,-3[bp]
24309 6213           30E4                       xor	ah,ah
24310 6215           48                         dec	ax
24311 6216           8846         FD            mov	-3[bp],al
24312                                           !BCC_EOS
24313                                           ! 2926   }
24314                                           ! 2927  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24315                       00006219            .202:
24316                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24317 6219           8A46         FD            mov	al,-3[bp]
24318 621C           30E4                       xor	ah,ah
24319 621E           8946         F2            mov	-$E[bp],ax
24320                                           !BCC_EOS
24321                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24322 6221           8B46         F2            mov	ax,-$E[bp]
24323 6224           88C4                       mov	ah,al
24324 6226           30C0                       xor	al,al
24325 6228           8946         F2            mov	-$E[bp],ax
24326                                           !BCC_EOS
24327                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24328 622B           8B46         F2            mov	ax,-$E[bp]
24329 622E           0246         FE            add	al,-2[bp]
24330 6231           80D4                   00  adc	ah,*0
24331 6234           8946         F2            mov	-$E[bp],ax
24332                                           !BCC_EOS
24333                                           ! 2928  biosfn_set_cursor_pos(page,cursor);
24334                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24335 6237           FF76         F2            push	-$E[bp]
24336                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24337 623A           8A46         06            mov	al,6[bp]
24338 623D           30E4                       xor	ah,ah
24339 623F           50                         push	ax
24340                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24341 6240           E8         E0FF            call	_biosfn_set_cursor_pos
24342 6243           83C4                   04  add	sp,*4
24343                                           !BCC_EOS
24344                                           ! 2929 }
24345 6246           89EC                       mov	sp,bp
24346 6248           5D                         pop	bp
24347 6249           C3                         ret
24348                                           ! 2930 #asm
24349                                           !BCC_ASM
24350                       00000008            _biosfn_write_teletype.flag	set	8
24351                       00000006            _biosfn_write_teletype.attr	set	6
24352                       00000004            _biosfn_write_teletype.page	set	4
24353                       00000002            _biosfn_write_teletype.car	set	2
24354                       0000624A            biosfn_get_video_mode:
24355 624A           1E                           push ds
24356 624B           B8                   0040    mov ax, # 0x40
24357 624E           8ED8                         mov ds, ax
24358 6250           53                           push bx
24359 6251           BB                   0062    mov bx, # 0x62
24360 6254           8A07                         mov al, [bx]
24361 6256           5B                           pop bx
24362 6257           88C7                         mov bh, al
24363 6259           53                           push bx
24364 625A           BB                   0087    mov bx, # 0x87
24365 625D           8A27                         mov ah, [bx]
24366 625F           80E4                   80    and ah, #0x80
24367 6262           BB                   0049    mov bx, # 0x49
24368 6265           8A07                         mov al, [bx]
24369 6267           08E0                         or al, ah
24370 6269           BB                   004A    mov bx, # 0x4A
24371 626C           8A27                         mov ah, [bx]
24372 626E           5B                           pop bx
24373 626F           1F                           pop ds
24374 6270           C3                           ret
24375                                           ! 2952 endasm
24376                                           !BCC_ENDASM
24377                                           ! 2953 #asm
24378                                           !BCC_ASM
24379                       00000008            _biosfn_write_teletype.flag	set	8
24380                       00000006            _biosfn_write_teletype.attr	set	6
24381                       00000004            _biosfn_write_teletype.page	set	4
24382                       00000002            _biosfn_write_teletype.car	set	2
24383                       00006271            biosfn_group_10:
24384 6271           3C                     00    cmp al, #0x00
24385 6273           75           02              jne int10_test_1001
24386 6275           EB           61              jmp biosfn_set_single_palette_reg
24387                       00006277            int10_test_1001:
24388 6277           3C                     01    cmp al, #0x01
24389 6279           75           02              jne int10_test_1002
24390 627B           EB           75              jmp biosfn_set_overscan_border_color
24391                       0000627D            int10_test_1002:
24392 627D           3C                     02    cmp al, #0x02
24393 627F           75           02              jne int10_test_1003
24394 6281           EB           77              jmp biosfn_set_all_palette_reg
24395                       00006283            int10_test_1003:
24396 6283           3C                     03    cmp al, #0x03
24397 6285           75           03              jne int10_test_1007
24398 6287           E9         009D              jmp biosfn_toggle_intensity
24399                       0000628A            int10_test_1007:
24400 628A           3C                     07    cmp al, #0x07
24401 628C           75           03              jne int10_test_1008
24402 628E           E9         00BC              jmp biosfn_get_single_palette_reg
24403                       00006291            int10_test_1008:
24404 6291           3C                     08    cmp al, #0x08
24405 6293           75           03              jne int10_test_1009
24406 6295           E9         00D9              jmp biosfn_read_overscan_border_color
24407                       00006298            int10_test_1009:
24408 6298           3C                     09    cmp al, #0x09
24409 629A           75           03              jne int10_test_1010
24410 629C           E9         00E0              jmp biosfn_get_all_palette_reg
24411                       0000629F            int10_test_1010:
24412 629F           3C                     10    cmp al, #0x10
24413 62A1           75           03              jne int10_test_1012
24414 62A3           E9         011A              jmp biosfn_set_single_dac_reg
24415                       000062A6            int10_test_1012:
24416 62A6           3C                     12    cmp al, #0x12
24417 62A8           75           03              jne int10_test_1013
24418 62AA           E9         012C              jmp biosfn_set_all_dac_reg
24419                       000062AD            int10_test_1013:
24420 62AD           3C                     13    cmp al, #0x13
24421 62AF           75           03              jne int10_test_1015
24422 62B1           E9         014D              jmp biosfn_select_video_dac_color_page
24423                       000062B4            int10_test_1015:
24424 62B4           3C                     15    cmp al, #0x15
24425 62B6           75           03              jne int10_test_1017
24426 62B8           E9         0189              jmp biosfn_read_single_dac_reg
24427                       000062BB            int10_test_1017:
24428 62BB           3C                     17    cmp al, #0x17
24429 62BD           75           03              jne int10_test_1018
24430 62BF           E9         019D              jmp biosfn_read_all_dac_reg
24431                       000062C2            int10_test_1018:
24432 62C2           3C                     18    cmp al, #0x18
24433 62C4           75           03              jne int10_test_1019
24434 62C6           E9         01BE              jmp biosfn_set_pel_mask
24435                       000062C9            int10_test_1019:
24436 62C9           3C                     19    cmp al, #0x19
24437 62CB           75           03              jne int10_test_101A
24438 62CD           E9         01C2              jmp biosfn_read_pel_mask
24439                       000062D0            int10_test_101A:
24440 62D0           3C                     1A    cmp al, #0x1a
24441 62D2           75           03              jne int10_group_10_unknown
24442 62D4           E9         01C6              jmp biosfn_read_video_dac_state
24443                       000062D7            int10_group_10_unknown:
24444 62D7           C3                           ret
24445                       000062D8            biosfn_set_single_palette_reg:
24446 62D8           80FB                   14    cmp bl, #0x14
24447 62DB           77           14              ja no_actl_reg1
24448 62DD           50                           push ax
24449 62DE           52                           push dx
24450 62DF           BA                   03DA    mov dx, # 0x3da
24451 62E2           EC                           in al, dx
24452 62E3           BA                   03C0    mov dx, # 0x3c0
24453 62E6           88D8                         mov al, bl
24454 62E8           EE                           out dx, al
24455 62E9           88F8                         mov al, bh
24456 62EB           EE                           out dx, al
24457 62EC           B0                     20    mov al, #0x20
24458 62EE           EE                           out dx, al
24459 62EF           5A                           pop dx
24460 62F0           58                           pop ax
24461                       000062F1            no_actl_reg1:
24462 62F1           C3                           ret
24463                                           ! 3034 endasm
24464                                           !BCC_ENDASM
24465                                           ! 3035 #asm
24466                                           !BCC_ASM
24467                       00000008            _biosfn_write_teletype.flag	set	8
24468                       00000006            _biosfn_write_teletype.attr	set	6
24469                       00000004            _biosfn_write_teletype.page	set	4
24470                       00000002            _biosfn_write_teletype.car	set	2
24471                       000062F2            biosfn_set_overscan_border_color:
24472 62F2           53                           push bx
24473 62F3           B3                     11    mov bl, #0x11
24474 62F5           E8         FFE0              call biosfn_set_single_palette_reg
24475 62F8           5B                           pop bx
24476 62F9           C3                           ret
24477                                           ! 3042 endasm
24478                                           !BCC_ENDASM
24479                                           ! 3043 #asm
24480                                           !BCC_ASM
24481                       00000008            _biosfn_write_teletype.flag	set	8
24482                       00000006            _biosfn_write_teletype.attr	set	6
24483                       00000004            _biosfn_write_teletype.page	set	4
24484                       00000002            _biosfn_write_teletype.car	set	2
24485                       000062FA            biosfn_set_all_palette_reg:
24486 62FA           50                           push ax
24487 62FB           53                           push bx
24488 62FC           51                           push cx
24489 62FD           52                           push dx
24490 62FE           89D3                         mov bx, dx
24491 6300           BA                   03DA    mov dx, # 0x3da
24492 6303           EC                           in al, dx
24493 6304           B1                     00    mov cl, #0x00
24494 6306           BA                   03C0    mov dx, # 0x3c0
24495                       00006309            set_palette_loop:
24496 6309           88C8                         mov al, cl
24497 630B           EE                           out dx, al
24498 630C           26                           seg es
24499 630D           8A07                         mov al, [bx]
24500 630F           EE                           out dx, al
24501 6310           43                           inc bx
24502 6311           FEC1                         inc cl
24503 6313           80F9                   10    cmp cl, #0x10
24504 6316           75           F1              jne set_palette_loop
24505 6318           B0                     11    mov al, #0x11
24506 631A           EE                           out dx, al
24507 631B           26                           seg es
24508 631C           8A07                         mov al, [bx]
24509 631E           EE                           out dx, al
24510 631F           B0                     20    mov al, #0x20
24511 6321           EE                           out dx, al
24512 6322           5A                           pop dx
24513 6323           59                           pop cx
24514 6324           5B                           pop bx
24515 6325           58                           pop ax
24516 6326           C3                           ret
24517                                           ! 3076 endasm
24518                                           !BCC_ENDASM
24519                                           ! 3077 #asm
24520                                           !BCC_ASM
24521                       00000008            _biosfn_write_teletype.flag	set	8
24522                       00000006            _biosfn_write_teletype.attr	set	6
24523                       00000004            _biosfn_write_teletype.page	set	4
24524                       00000002            _biosfn_write_teletype.car	set	2
24525                       00006327            biosfn_toggle_intensity:
24526 6327           50                           push ax
24527 6328           53                           push bx
24528 6329           52                           push dx
24529 632A           BA                   03DA    mov dx, # 0x3da
24530 632D           EC                           in al, dx
24531 632E           BA                   03C0    mov dx, # 0x3c0
24532 6331           B0                     10    mov al, #0x10
24533 6333           EE                           out dx, al
24534 6334           BA                   03C1    mov dx, # 0x3c1
24535 6337           EC                           in al, dx
24536 6338           24                     F7    and al, #0xf7
24537 633A           80E3                   01    and bl, #0x01
24538 633D           C0E3                   03    shl bl, 3
24539 6340           08D8                         or al, bl
24540 6342           BA                   03C0    mov dx, # 0x3c0
24541 6345           EE                           out dx, al
24542 6346           B0                     20    mov al, #0x20
24543 6348           EE                           out dx, al
24544 6349           5A                           pop dx
24545 634A           5B                           pop bx
24546 634B           58                           pop ax
24547 634C           C3                           ret
24548                                           ! 3101 endasm
24549                                           !BCC_ENDASM
24550                                           ! 3102 #asm
24551                                           !BCC_ASM
24552                       00000008            _biosfn_write_teletype.flag	set	8
24553                       00000006            _biosfn_write_teletype.attr	set	6
24554                       00000004            _biosfn_write_teletype.page	set	4
24555                       00000002            _biosfn_write_teletype.car	set	2
24556                       0000634D            biosfn_get_single_palette_reg:
24557 634D           80FB                   14    cmp bl, #0x14
24558 6350           77           1E              ja no_actl_reg2
24559 6352           50                           push ax
24560 6353           52                           push dx
24561 6354           BA                   03DA    mov dx, # 0x3da
24562 6357           EC                           in al, dx
24563 6358           BA                   03C0    mov dx, # 0x3c0
24564 635B           88D8                         mov al, bl
24565 635D           EE                           out dx, al
24566 635E           BA                   03C1    mov dx, # 0x3c1
24567 6361           EC                           in al, dx
24568 6362           88C7                         mov bh, al
24569 6364           BA                   03DA    mov dx, # 0x3da
24570 6367           EC                           in al, dx
24571 6368           BA                   03C0    mov dx, # 0x3c0
24572 636B           B0                     20    mov al, #0x20
24573 636D           EE                           out dx, al
24574 636E           5A                           pop dx
24575 636F           58                           pop ax
24576                       00006370            no_actl_reg2:
24577 6370           C3                           ret
24578                                           ! 3125 endasm
24579                                           !BCC_ENDASM
24580                                           ! 3126 #asm
24581                                           !BCC_ASM
24582                       00000008            _biosfn_write_teletype.flag	set	8
24583                       00000006            _biosfn_write_teletype.attr	set	6
24584                       00000004            _biosfn_write_teletype.page	set	4
24585                       00000002            _biosfn_write_teletype.car	set	2
24586                       00006371            biosfn_read_overscan_border_color:
24587 6371           50                           push ax
24588 6372           53                           push bx
24589 6373           B3                     11    mov bl, #0x11
24590 6375           E8         FFD5              call biosfn_get_single_palette_reg
24591 6378           88F8                         mov al, bh
24592 637A           5B                           pop bx
24593 637B           88C7                         mov bh, al
24594 637D           58                           pop ax
24595 637E           C3                           ret
24596                                           ! 3137 endasm
24597                                           !BCC_ENDASM
24598                                           ! 3138 #asm
24599                                           !BCC_ASM
24600                       00000008            _biosfn_write_teletype.flag	set	8
24601                       00000006            _biosfn_write_teletype.attr	set	6
24602                       00000004            _biosfn_write_teletype.page	set	4
24603                       00000002            _biosfn_write_teletype.car	set	2
24604                       0000637F            biosfn_get_all_palette_reg:
24605 637F           50                           push ax
24606 6380           53                           push bx
24607 6381           51                           push cx
24608 6382           52                           push dx
24609 6383           89D3                         mov bx, dx
24610 6385           B1                     00    mov cl, #0x00
24611                       00006387            get_palette_loop:
24612 6387           BA                   03DA    mov dx, # 0x3da
24613 638A           EC                           in al, dx
24614 638B           BA                   03C0    mov dx, # 0x3c0
24615 638E           88C8                         mov al, cl
24616 6390           EE                           out dx, al
24617 6391           BA                   03C1    mov dx, # 0x3c1
24618 6394           EC                           in al, dx
24619 6395           26                           seg es
24620 6396           8807                         mov [bx], al
24621 6398           43                           inc bx
24622 6399           FEC1                         inc cl
24623 639B           80F9                   10    cmp cl, #0x10
24624 639E           75           E7              jne get_palette_loop
24625 63A0           BA                   03DA    mov dx, # 0x3da
24626 63A3           EC                           in al, dx
24627 63A4           BA                   03C0    mov dx, # 0x3c0
24628 63A7           B0                     11    mov al, #0x11
24629 63A9           EE                           out dx, al
24630 63AA           BA                   03C1    mov dx, # 0x3c1
24631 63AD           EC                           in al, dx
24632 63AE           26                           seg es
24633 63AF           8807                         mov [bx], al
24634 63B1           BA                   03DA    mov dx, # 0x3da
24635 63B4           EC                           in al, dx
24636 63B5           BA                   03C0    mov dx, # 0x3c0
24637 63B8           B0                     20    mov al, #0x20
24638 63BA           EE                           out dx, al
24639 63BB           5A                           pop dx
24640 63BC           59                           pop cx
24641 63BD           5B                           pop bx
24642 63BE           58                           pop ax
24643 63BF           C3                           ret
24644                                           ! 3179 endasm
24645                                           !BCC_ENDASM
24646                                           ! 3180 #asm
24647                                           !BCC_ASM
24648                       00000008            _biosfn_write_teletype.flag	set	8
24649                       00000006            _biosfn_write_teletype.attr	set	6
24650                       00000004            _biosfn_write_teletype.page	set	4
24651                       00000002            _biosfn_write_teletype.car	set	2
24652                       000063C0            biosfn_set_single_dac_reg:
24653 63C0           50                           push ax
24654 63C1           52                           push dx
24655 63C2           BA                   03C8    mov dx, # 0x3c8
24656 63C5           88D8                         mov al, bl
24657 63C7           EE                           out dx, al
24658 63C8           BA                   03C9    mov dx, # 0x3c9
24659 63CB           58                           pop ax
24660 63CC           50                           push ax
24661 63CD           88E0                         mov al, ah
24662 63CF           EE                           out dx, al
24663 63D0           88E8                         mov al, ch
24664 63D2           EE                           out dx, al
24665 63D3           88C8                         mov al, cl
24666 63D5           EE                           out dx, al
24667 63D6           5A                           pop dx
24668 63D7           58                           pop ax
24669 63D8           C3                           ret
24670                                           ! 3199 endasm
24671                                           !BCC_ENDASM
24672                                           ! 3200 #asm
24673                                           !BCC_ASM
24674                       00000008            _biosfn_write_teletype.flag	set	8
24675                       00000006            _biosfn_write_teletype.attr	set	6
24676                       00000004            _biosfn_write_teletype.page	set	4
24677                       00000002            _biosfn_write_teletype.car	set	2
24678                       000063D9            biosfn_set_all_dac_reg:
24679 63D9           50                           push ax
24680 63DA           53                           push bx
24681 63DB           51                           push cx
24682 63DC           52                           push dx
24683 63DD           BA                   03C8    mov dx, # 0x3c8
24684 63E0           88D8                         mov al, bl
24685 63E2           EE                           out dx, al
24686 63E3           5A                           pop dx
24687 63E4           52                           push dx
24688 63E5           89D3                         mov bx, dx
24689 63E7           BA                   03C9    mov dx, # 0x3c9
24690                       000063EA            set_dac_loop:
24691 63EA           26                           seg es
24692 63EB           8A07                         mov al, [bx]
24693 63ED           EE                           out dx, al
24694 63EE           43                           inc bx
24695 63EF           26                           seg es
24696 63F0           8A07                         mov al, [bx]
24697 63F2           EE                           out dx, al
24698 63F3           43                           inc bx
24699 63F4           26                           seg es
24700 63F5           8A07                         mov al, [bx]
24701 63F7           EE                           out dx, al
24702 63F8           43                           inc bx
24703 63F9           49                           dec cx
24704 63FA           75           EE              jnz set_dac_loop
24705 63FC           5A                           pop dx
24706 63FD           59                           pop cx
24707 63FE           5B                           pop bx
24708 63FF           58                           pop ax
24709 6400           C3                           ret
24710                                           ! 3233 endasm
24711                                           !BCC_ENDASM
24712                                           ! 3234 #asm
24713                                           !BCC_ASM
24714                       00000008            _biosfn_write_teletype.flag	set	8
24715                       00000006            _biosfn_write_teletype.attr	set	6
24716                       00000004            _biosfn_write_teletype.page	set	4
24717                       00000002            _biosfn_write_teletype.car	set	2
24718                       00006401            biosfn_select_video_dac_color_page:
24719 6401           50                           push ax
24720 6402           53                           push bx
24721 6403           52                           push dx
24722 6404           BA                   03DA    mov dx, # 0x3da
24723 6407           EC                           in al, dx
24724 6408           BA                   03C0    mov dx, # 0x3c0
24725 640B           B0                     10    mov al, #0x10
24726 640D           EE                           out dx, al
24727 640E           BA                   03C1    mov dx, # 0x3c1
24728 6411           EC                           in al, dx
24729 6412           80E3                   01    and bl, #0x01
24730 6415           75           0D              jnz set_dac_page
24731 6417           24                     7F    and al, #0x7f
24732 6419           C0E7                   07    shl bh, 7
24733 641C           08F8                         or al, bh
24734 641E           BA                   03C0    mov dx, # 0x3c0
24735 6421           EE                           out dx, al
24736 6422           EB           19              jmp set_actl_normal
24737                       00006424            set_dac_page:
24738 6424           50                           push ax
24739 6425           BA                   03DA    mov dx, # 0x3da
24740 6428           EC                           in al, dx
24741 6429           BA                   03C0    mov dx, # 0x3c0
24742 642C           B0                     14    mov al, #0x14
24743 642E           EE                           out dx, al
24744 642F           58                           pop ax
24745 6430           24                     80    and al, #0x80
24746 6432           75           03              jnz set_dac_16_page
24747 6434           C0E7                   02    shl bh, 2
24748                       00006437            set_dac_16_page:
24749 6437           80E7                   0F    and bh, #0x0f
24750 643A           88F8                         mov al, bh
24751 643C           EE                           out dx, al
24752                       0000643D            set_actl_normal:
24753 643D           B0                     20    mov al, #0x20
24754 643F           EE                           out dx, al
24755 6440           5A                           pop dx
24756 6441           5B                           pop bx
24757 6442           58                           pop ax
24758 6443           C3                           ret
24759                                           ! 3276 endasm
24760                                           !BCC_ENDASM
24761                                           ! 3277 #asm
24762                                           !BCC_ASM
24763                       00000008            _biosfn_write_teletype.flag	set	8
24764                       00000006            _biosfn_write_teletype.attr	set	6
24765                       00000004            _biosfn_write_teletype.page	set	4
24766                       00000002            _biosfn_write_teletype.car	set	2
24767                       00006444            biosfn_read_single_dac_reg:
24768 6444           50                           push ax
24769 6445           52                           push dx
24770 6446           BA                   03C7    mov dx, # 0x3c7
24771 6449           88D8                         mov al, bl
24772 644B           EE                           out dx, al
24773 644C           58                           pop ax
24774 644D           88C4                         mov ah, al
24775 644F           BA                   03C9    mov dx, # 0x3c9
24776 6452           EC                           in al, dx
24777 6453           86E0                         xchg al, ah
24778 6455           50                           push ax
24779 6456           EC                           in al, dx
24780 6457           88C5                         mov ch, al
24781 6459           EC                           in al, dx
24782 645A           88C1                         mov cl, al
24783 645C           5A                           pop dx
24784 645D           58                           pop ax
24785 645E           C3                           ret
24786                                           ! 3297 endasm
24787                                           !BCC_ENDASM
24788                                           ! 3298 #asm
24789                                           !BCC_ASM
24790                       00000008            _biosfn_write_teletype.flag	set	8
24791                       00000006            _biosfn_write_teletype.attr	set	6
24792                       00000004            _biosfn_write_teletype.page	set	4
24793                       00000002            _biosfn_write_teletype.car	set	2
24794                       0000645F            biosfn_read_all_dac_reg:
24795 645F           50                           push ax
24796 6460           53                           push bx
24797 6461           51                           push cx
24798 6462           52                           push dx
24799 6463           BA                   03C7    mov dx, # 0x3c7
24800 6466           88D8                         mov al, bl
24801 6468           EE                           out dx, al
24802 6469           5A                           pop dx
24803 646A           52                           push dx
24804 646B           89D3                         mov bx, dx
24805 646D           BA                   03C9    mov dx, # 0x3c9
24806                       00006470            read_dac_loop:
24807 6470           EC                           in al, dx
24808 6471           26                           seg es
24809 6472           8807                         mov [bx], al
24810 6474           43                           inc bx
24811 6475           EC                           in al, dx
24812 6476           26                           seg es
24813 6477           8807                         mov [bx], al
24814 6479           43                           inc bx
24815 647A           EC                           in al, dx
24816 647B           26                           seg es
24817 647C           8807                         mov [bx], al
24818 647E           43                           inc bx
24819 647F           49                           dec cx
24820 6480           75           EE              jnz read_dac_loop
24821 6482           5A                           pop dx
24822 6483           59                           pop cx
24823 6484           5B                           pop bx
24824 6485           58                           pop ax
24825 6486           C3                           ret
24826                                           ! 3331 endasm
24827                                           !BCC_ENDASM
24828                                           ! 3332 #asm
24829                                           !BCC_ASM
24830                       00000008            _biosfn_write_teletype.flag	set	8
24831                       00000006            _biosfn_write_teletype.attr	set	6
24832                       00000004            _biosfn_write_teletype.page	set	4
24833                       00000002            _biosfn_write_teletype.car	set	2
24834                       00006487            biosfn_set_pel_mask:
24835 6487           50                           push ax
24836 6488           52                           push dx
24837 6489           BA                   03C6    mov dx, # 0x3c6
24838 648C           88D8                         mov al, bl
24839 648E           EE                           out dx, al
24840 648F           5A                           pop dx
24841 6490           58                           pop ax
24842 6491           C3                           ret
24843                                           ! 3342 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3343 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       00006492            biosfn_read_pel_mask:
24852 6492           50                           push ax
24853 6493           52                           push dx
24854 6494           BA                   03C6    mov dx, # 0x3c6
24855 6497           EC                           in al, dx
24856 6498           88C3                         mov bl, al
24857 649A           5A                           pop dx
24858 649B           58                           pop ax
24859 649C           C3                           ret
24860                                           ! 3353 endasm
24861                                           !BCC_ENDASM
24862                                           ! 3354 #asm
24863                                           !BCC_ASM
24864                       00000008            _biosfn_write_teletype.flag	set	8
24865                       00000006            _biosfn_write_teletype.attr	set	6
24866                       00000004            _biosfn_write_teletype.page	set	4
24867                       00000002            _biosfn_write_teletype.car	set	2
24868                       0000649D            biosfn_read_video_dac_state:
24869 649D           50                           push ax
24870 649E           52                           push dx
24871 649F           BA                   03DA    mov dx, # 0x3da
24872 64A2           EC                           in al, dx
24873 64A3           BA                   03C0    mov dx, # 0x3c0
24874 64A6           B0                     10    mov al, #0x10
24875 64A8           EE                           out dx, al
24876 64A9           BA                   03C1    mov dx, # 0x3c1
24877 64AC           EC                           in al, dx
24878 64AD           88C3                         mov bl, al
24879 64AF           C0EB                   07    shr bl, 7
24880 64B2           BA                   03DA    mov dx, # 0x3da
24881 64B5           EC                           in al, dx
24882 64B6           BA                   03C0    mov dx, # 0x3c0
24883 64B9           B0                     14    mov al, #0x14
24884 64BB           EE                           out dx, al
24885 64BC           BA                   03C1    mov dx, # 0x3c1
24886 64BF           EC                           in al, dx
24887 64C0           88C7                         mov bh, al
24888 64C2           80E7                   0F    and bh, #0x0f
24889 64C5           F6C3                   01    test bl, #0x01
24890 64C8           75           03              jnz get_dac_16_page
24891 64CA           C0EF                   02    shr bh, 2
24892                       000064CD            get_dac_16_page:
24893 64CD           BA                   03DA    mov dx, # 0x3da
24894 64D0           EC                           in al, dx
24895 64D1           BA                   03C0    mov dx, # 0x3c0
24896 64D4           B0                     20    mov al, #0x20
24897 64D6           EE                           out dx, al
24898 64D7           5A                           pop dx
24899 64D8           58                           pop ax
24900 64D9           C3                           ret
24901                                           ! 3388 endasm
24902                                           !BCC_ENDASM
24903                                           ! 3389 static void biosfn_perform_gray_scale_summing (start,count)
24904                                           ! Register BX used in function biosfn_write_teletype
24905                                           ! 3390 Bit16u start;Bit16u count;
24906                       000064DA            _biosfn_perform_gray_scale_summing:
24907                                           !BCC_EOS
24908                                           !BCC_EOS
24909                                           ! 3391 {Bit8u r,g,b;
24910                                           !BCC_EOS
24911                                           ! 3392  Bit16u i;
24912                                           !BCC_EOS
24913                                           ! 3393  Bit16u index;
24914                                           !BCC_EOS
24915                                           ! 3394  inb(0x3da);
24916 64DA           55                         push	bp
24917 64DB           89E5                       mov	bp,sp
24918 64DD           83C4                   F8  add	sp,*-8
24919                                           ! Debug: list int = const $3DA (used reg = )
24920 64E0           B8                   03DA  mov	ax,#$3DA
24921 64E3           50                         push	ax
24922                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24923 64E4           E8         1750            call	_inb
24924 64E7           44                         inc	sp
24925 64E8           44                         inc	sp
24926                                           !BCC_EOS
24927                                           ! 3395  outb(0x3c0,0x00);
24928                                           ! Debug: list int = const 0 (used reg = )
24929 64E9           31C0                       xor	ax,ax
24930 64EB           50                         push	ax
24931                                           ! Debug: list int = const $3C0 (used reg = )
24932 64EC           B8                   03C0  mov	ax,#$3C0
24933 64EF           50                         push	ax
24934                                           ! Debug: func () void = outb+0 (used reg = )
24935 64F0           E8         175A            call	_outb
24936 64F3           83C4                   04  add	sp,*4
24937                                           !BCC_EOS
24938                                           ! 3396  for( index = 0; index < count; index++ )
24939                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24940 64F6           31C0                       xor	ax,ax
24941 64F8           8946         F8            mov	-8[bp],ax
24942                                           !BCC_EOS
24943                                           !BCC_EOS
24944                                           ! 3397   {
24945 64FB           E9         00BE            br 	.209
24946                       000064FE            .20A:
24947                                           ! 3398    outb(0x3c7,start);
24948                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24949 64FE           FF76         04            push	4[bp]
24950                                           ! Debug: list int = const $3C7 (used reg = )
24951 6501           B8                   03C7  mov	ax,#$3C7
24952 6504           50                         push	ax
24953                                           ! Debug: func () void = outb+0 (used reg = )
24954 6505           E8         1745            call	_outb
24955 6508           83C4                   04  add	sp,*4
24956                                           !BCC_EOS
24957                                           ! 3399    r=inb( 0x3c9 );
24958                                           ! Debug: list int = const $3C9 (used reg = )
24959 650B           B8                   03C9  mov	ax,#$3C9
24960 650E           50                         push	ax
24961                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24962 650F           E8         1725            call	_inb
24963 6512           44                         inc	sp
24964 6513           44                         inc	sp
24965                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24966 6514           8846         FF            mov	-1[bp],al
24967                                           !BCC_EOS
24968                                           ! 3400    g=inb( 0x3c9 );
24969                                           ! Debug: list int = const $3C9 (used reg = )
24970 6517           B8                   03C9  mov	ax,#$3C9
24971 651A           50                         push	ax
24972                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24973 651B           E8         1719            call	_inb
24974 651E           44                         inc	sp
24975 651F           44                         inc	sp
24976                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24977 6520           8846         FE            mov	-2[bp],al
24978                                           !BCC_EOS
24979                                           ! 3401    b=inb( 0x3c9 );
24980                                           ! Debug: list int = const $3C9 (used reg = )
24981 6523           B8                   03C9  mov	ax,#$3C9
24982 6526           50                         push	ax
24983                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24984 6527           E8         170D            call	_inb
24985 652A           44                         inc	sp
24986 652B           44                         inc	sp
24987                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24988 652C           8846         FD            mov	-3[bp],al
24989                                           !BCC_EOS
24990                                           ! 3402    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24991                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24992                                           ! Debug: expression subtree swapping
24993 652F           8A46         FD            mov	al,-3[bp]
24994 6532           30E4                       xor	ah,ah
24995 6534           B9                   001C  mov	cx,*$1C
24996 6537           F7E9                       imul	cx
24997 6539           50                         push	ax
24998                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24999                                           ! Debug: expression subtree swapping
25000 653A           8A46         FE            mov	al,-2[bp]
25001 653D           30E4                       xor	ah,ah
25002 653F           B9                   0097  mov	cx,#$97
25003 6542           F7E9                       imul	cx
25004 6544           50                         push	ax
25005                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25006                                           ! Debug: expression subtree swapping
25007 6545           8A46         FF            mov	al,-1[bp]
25008 6548           30E4                       xor	ah,ah
25009 654A           B9                   004D  mov	cx,*$4D
25010 654D           F7E9                       imul	cx
25011                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25012 654F           0346         F4            add	ax,-$C[bp]
25013 6552           44                         inc	sp
25014 6553           44                         inc	sp
25015                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25016 6554           0346         F6            add	ax,-$A[bp]
25017 6557           44                         inc	sp
25018 6558           44                         inc	sp
25019                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25020                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25021 6559           05                   0080  add	ax,#$80
25022 655C           88E0                       mov	al,ah
25023 655E           30E4                       xor	ah,ah
25024                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25025 6560           8946         FA            mov	-6[bp],ax
25026                                           !BCC_EOS
25027                                           ! 3403    if(i>0x3f)i=0x3f;
25028                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25029 6563           8B46         FA            mov	ax,-6[bp]
25030 6566           3D                   003F  cmp	ax,*$3F
25031 6569           76           06            jbe 	.20B
25032                       0000656B            .20C:
25033                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25034 656B           B8                   003F  mov	ax,*$3F
25035 656E           8946         FA            mov	-6[bp],ax
25036                                           !BCC_EOS
25037                                           ! 3404    outb(0x3c8,start);
25038                       00006571            .20B:
25039                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25040 6571           FF76         04            push	4[bp]
25041                                           ! Debug: list int = const $3C8 (used reg = )
25042 6574           B8                   03C8  mov	ax,#$3C8
25043 6577           50                         push	ax
25044                                           ! Debug: func () void = outb+0 (used reg = )
25045 6578           E8         16D2            call	_outb
25046 657B           83C4                   04  add	sp,*4
25047                                           !BCC_EOS
25048                                           ! 3405    outb( 0x3c9, i&0xff );
25049                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25050 657E           8A46         FA            mov	al,-6[bp]
25051                                           ! Debug: list unsigned char = al+0 (used reg = )
25052 6581           30E4                       xor	ah,ah
25053 6583           50                         push	ax
25054                                           ! Debug: list int = const $3C9 (used reg = )
25055 6584           B8                   03C9  mov	ax,#$3C9
25056 6587           50                         push	ax
25057                                           ! Debug: func () void = outb+0 (used reg = )
25058 6588           E8         16C2            call	_outb
25059 658B           83C4                   04  add	sp,*4
25060                                           !BCC_EOS
25061                                           ! 3406    outb( 0x3c9, i&0xff );
25062                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25063 658E           8A46         FA            mov	al,-6[bp]
25064                                           ! Debug: list unsigned char = al+0 (used reg = )
25065 6591           30E4                       xor	ah,ah
25066 6593           50                         push	ax
25067                                           ! Debug: list int = const $3C9 (used reg = )
25068 6594           B8                   03C9  mov	ax,#$3C9
25069 6597           50                         push	ax
25070                                           ! Debug: func () void = outb+0 (used reg = )
25071 6598           E8         16B2            call	_outb
25072 659B           83C4                   04  add	sp,*4
25073                                           !BCC_EOS
25074                                           ! 3407    outb( 0x3c9, i&0xff );
25075                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25076 659E           8A46         FA            mov	al,-6[bp]
25077                                           ! Debug: list unsigned char = al+0 (used reg = )
25078 65A1           30E4                       xor	ah,ah
25079 65A3           50                         push	ax
25080                                           ! Debug: list int = const $3C9 (used reg = )
25081 65A4           B8                   03C9  mov	ax,#$3C9
25082 65A7           50                         push	ax
25083                                           ! Debug: func () void = outb+0 (used reg = )
25084 65A8           E8         16A2            call	_outb
25085 65AB           83C4                   04  add	sp,*4
25086                                           !BCC_EOS
25087                                           ! 3408    start++;
25088                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25089 65AE           8B46         04            mov	ax,4[bp]
25090 65B1           40                         inc	ax
25091 65B2           8946         04            mov	4[bp],ax
25092                                           !BCC_EOS
25093                                           ! 3409   }
25094                                           ! 3410  inb(0x3da);
25095                       000065B5            .208:
25096                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25097 65B5           8B46         F8            mov	ax,-8[bp]
25098 65B8           40                         inc	ax
25099 65B9           8946         F8            mov	-8[bp],ax
25100                       000065BC            .209:
25101                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25102 65BC           8B46         F8            mov	ax,-8[bp]
25103 65BF           3B46         06            cmp	ax,6[bp]
25104 65C2         0F82         FF38            blo 	.20A
25105                       000065C6            .20D:
25106                       000065C6            .207:
25107                                           ! Debug: list int = const $3DA (used reg = )
25108 65C6           B8                   03DA  mov	ax,#$3DA
25109 65C9           50                         push	ax
25110                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25111 65CA           E8         166A            call	_inb
25112 65CD           44                         inc	sp
25113 65CE           44                         inc	sp
25114                                           !BCC_EOS
25115                                           ! 3411  outb(0x3c0,0x20);
25116                                           ! Debug: list int = const $20 (used reg = )
25117 65CF           B8                   0020  mov	ax,*$20
25118 65D2           50                         push	ax
25119                                           ! Debug: list int = const $3C0 (used reg = )
25120 65D3           B8                   03C0  mov	ax,#$3C0
25121 65D6           50                         push	ax
25122                                           ! Debug: func () void = outb+0 (used reg = )
25123 65D7           E8         1673            call	_outb
25124 65DA           83C4                   04  add	sp,*4
25125                                           !BCC_EOS
25126                                           ! 3412 }
25127 65DD           89EC                       mov	sp,bp
25128 65DF           5D                         pop	bp
25129 65E0           C3                         ret
25130                                           ! 3413 static void get_font_access()
25131                                           ! 3414 {
25132                       000065E1            _get_font_access:
25133                                           ! 3415 #asm
25134                                           !BCC_ASM
25135 65E1           BA                   03C4   mov dx, # 0x3c4
25136 65E4           B8                   0100   mov ax, #0x0100
25137 65E7           EF                          out dx, ax
25138 65E8           B8                   0402   mov ax, #0x0402
25139 65EB           EF                          out dx, ax
25140 65EC           B8                   0704   mov ax, #0x0704
25141 65EF           EF                          out dx, ax
25142 65F0           B8                   0300   mov ax, #0x0300
25143 65F3           EF                          out dx, ax
25144 65F4           BA                   03CE   mov dx, # 0x3ce
25145 65F7           B8                   0204   mov ax, #0x0204
25146 65FA           EF                          out dx, ax
25147 65FB           B8                   0005   mov ax, #0x0005
25148 65FE           EF                          out dx, ax
25149 65FF           B8                   0406   mov ax, #0x0406
25150 6602           EF                          out dx, ax
25151                                           ! 3432 endasm
25152                                           !BCC_ENDASM
25153                                           ! 3433 }
25154 6603           C3                         ret
25155                                           ! 3434 static void release_font_access()
25156                                           ! 3435 {
25157                       00006604            _release_font_access:
25158                                           ! 3436 #asm
25159                                           !BCC_ASM
25160 6604           BA                   03C4   mov dx, # 0x3c4
25161 6607           B8                   0100   mov ax, #0x0100
25162 660A           EF                          out dx, ax
25163 660B           B8                   0302   mov ax, #0x0302
25164 660E           EF                          out dx, ax
25165 660F           B8                   0304   mov ax, #0x0304
25166 6612           EF                          out dx, ax
25167 6613           B8                   0300   mov ax, #0x0300
25168 6616           EF                          out dx, ax
25169 6617           BA                   03CC   mov dx, # 0x3cc
25170 661A           EC                          in al, dx
25171 661B           24                     01   and al, #0x01
25172 661D           C0E0                   02   shl al, 2
25173 6620           0C                     0A   or al, #0x0a
25174 6622           88C4                        mov ah, al
25175 6624           B0                     06   mov al, #0x06
25176 6626           BA                   03CE   mov dx, # 0x3ce
25177 6629           EF                          out dx, ax
25178 662A           B8                   0004   mov ax, #0x0004
25179 662D           EF                          out dx, ax
25180 662E           B8                   1005   mov ax, #0x1005
25181 6631           EF                          out dx, ax
25182                                           ! 3459 endasm
25183                                           !BCC_ENDASM
25184                                           ! 3460 }
25185 6632           C3                         ret
25186                                           ! 3461 #asm
25187                                           !BCC_ASM
25188                       00006633            idiv_u:
25189 6633           31D2                         xor dx,dx
25190 6635           F7F3                         div bx
25191 6637           C3                           ret
25192                                           ! 3466 endasm
25193                                           !BCC_ENDASM
25194                                           ! 3467 static void set_scan_lines(lines) Bit8u lines;
25195                       00006638            _set_scan_lines:
25196                                           !BCC_EOS
25197                                           ! 3468 {
25198                                           ! 3469  Bit16u crtc_addr,cols,page,vde;
25199                                           !BCC_EOS
25200                                           ! 3470  Bit8u crtc_r9,ovl,rows;
25201                                           !BCC_EOS
25202                                           ! 3471  crtc_addr = read_word(0x40,0x63);
25203 6638           55                         push	bp
25204 6639           89E5                       mov	bp,sp
25205 663B           83C4                   F4  add	sp,*-$C
25206                                           ! Debug: list int = const $63 (used reg = )
25207 663E           B8                   0063  mov	ax,*$63
25208 6641           50                         push	ax
25209                                           ! Debug: list int = const $40 (used reg = )
25210 6642           B8                   0040  mov	ax,*$40
25211 6645           50                         push	ax
25212                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25213 6646           E8         15AB            call	_read_word
25214 6649           83C4                   04  add	sp,*4
25215                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25216 664C           8946         FE            mov	-2[bp],ax
25217                                           !BCC_EOS
25218                                           ! 3472  outb(crtc_addr, 0x09);
25219                                           ! Debug: list int = const 9 (used reg = )
25220 664F           B8                   0009  mov	ax,*9
25221 6652           50                         push	ax
25222                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25223 6653           FF76         FE            push	-2[bp]
25224                                           ! Debug: func () void = outb+0 (used reg = )
25225 6656           E8         15F4            call	_outb
25226 6659           83C4                   04  add	sp,*4
25227                                           !BCC_EOS
25228                                           ! 3473  crtc_r9 = inb(crtc_addr+1);
25229                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25230 665C           8B46         FE            mov	ax,-2[bp]
25231                                           ! Debug: list unsigned int = ax+1 (used reg = )
25232 665F           40                         inc	ax
25233 6660           50                         push	ax
25234                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25235 6661           E8         15D3            call	_inb
25236 6664           44                         inc	sp
25237 6665           44                         inc	sp
25238                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25239 6666           8846         F7            mov	-9[bp],al
25240                                           !BCC_EOS
25241                                           ! 3474  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25242                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25243 6669           8A46         04            mov	al,4[bp]
25244 666C           30E4                       xor	ah,ah
25245 666E           48                         dec	ax
25246 666F           50                         push	ax
25247                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25248 6670           8A46         F7            mov	al,-9[bp]
25249 6673           24                     E0  and	al,#$E0
25250                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25251 6675           30E4                       xor	ah,ah
25252 6677           0B46         F2            or	ax,-$E[bp]
25253 667A           44                         inc	sp
25254 667B           44                         inc	sp
25255                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25256 667C           8846         F7            mov	-9[bp],al
25257                                           !BCC_EOS
25258                                           ! 3475  outb(crtc_addr+1, crtc_r9);
25259                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25260 667F           8A46         F7            mov	al,-9[bp]
25261 6682           30E4                       xor	ah,ah
25262 6684           50                         push	ax
25263                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25264 6685           8B46         FE            mov	ax,-2[bp]
25265                                           ! Debug: list unsigned int = ax+1 (used reg = )
25266 6688           40                         inc	ax
25267 6689           50                         push	ax
25268                                           ! Debug: func () void = outb+0 (used reg = )
25269 668A           E8         15C0            call	_outb
25270 668D           83C4                   04  add	sp,*4
25271                                           !BCC_EOS
25272                                           ! 3476  if(lines==8)
25273                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25274 6690           8A46         04            mov	al,4[bp]
25275 6693           3C                     08  cmp	al,*8
25276 6695           75           10            jne 	.20E
25277                       00006697            .20F:
25278                                           ! 3477   {
25279                                           ! 3478    biosfn_set_cursor_shape(0x06,0x07);
25280                                           ! Debug: list int = const 7 (used reg = )
25281 6697           B8                   0007  mov	ax,*7
25282 669A           50                         push	ax
25283                                           ! Debug: list int = const 6 (used reg = )
25284 669B           B8                   0006  mov	ax,*6
25285 669E           50                         push	ax
25286                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25287 669F           E8         DB85            call	_biosfn_set_cursor_shape
25288 66A2           83C4                   04  add	sp,*4
25289                                           !BCC_EOS
25290                                           ! 3479   }
25291                                           ! 3480  else
25292                                           ! 3481   {
25293 66A5           EB           18            jmp .210
25294                       000066A7            .20E:
25295                                           ! 3482    biosfn_set_cursor_shape(lines-4,lines-3);
25296                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25297 66A7           8A46         04            mov	al,4[bp]
25298 66AA           30E4                       xor	ah,ah
25299                                           ! Debug: list unsigned int = ax-3 (used reg = )
25300 66AC           05                   FFFD  add	ax,*-3
25301 66AF           50                         push	ax
25302                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25303 66B0           8A46         04            mov	al,4[bp]
25304 66B3           30E4                       xor	ah,ah
25305                                           ! Debug: list unsigned int = ax-4 (used reg = )
25306 66B5           05                   FFFC  add	ax,*-4
25307 66B8           50                         push	ax
25308                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25309 66B9           E8         DB6B            call	_biosfn_set_cursor_shape
25310 66BC           83C4                   04  add	sp,*4
25311                                           !BCC_EOS
25312                                           ! 3483   }
25313                                           ! 3484  write_word(0x40,0x85, lines);
25314                       000066BF            .210:
25315                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25316 66BF           8A46         04            mov	al,4[bp]
25317 66C2           30E4                       xor	ah,ah
25318 66C4           50                         push	ax
25319                                           ! Debug: list int = const $85 (used reg = )
25320 66C5           B8                   0085  mov	ax,#$85
25321 66C8           50                         push	ax
25322                                           ! Debug: list int = const $40 (used reg = )
25323 66C9           B8                   0040  mov	ax,*$40
25324 66CC           50                         push	ax
25325                                           ! Debug: func () void = write_word+0 (used reg = )
25326 66CD           E8         154F            call	_write_word
25327 66D0           83C4                   06  add	sp,*6
25328                                           !BCC_EOS
25329                                           ! 3485  outb(crtc_addr, 0x12);
25330                                           ! Debug: list int = const $12 (used reg = )
25331 66D3           B8                   0012  mov	ax,*$12
25332 66D6           50                         push	ax
25333                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25334 66D7           FF76         FE            push	-2[bp]
25335                                           ! Debug: func () void = outb+0 (used reg = )
25336 66DA           E8         1570            call	_outb
25337 66DD           83C4                   04  add	sp,*4
25338                                           !BCC_EOS
25339                                           ! 3486  vde = inb(crtc_addr+1);
25340                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25341 66E0           8B46         FE            mov	ax,-2[bp]
25342                                           ! Debug: list unsigned int = ax+1 (used reg = )
25343 66E3           40                         inc	ax
25344 66E4           50                         push	ax
25345                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25346 66E5           E8         154F            call	_inb
25347 66E8           44                         inc	sp
25348 66E9           44                         inc	sp
25349                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25350 66EA           30E4                       xor	ah,ah
25351 66EC           8946         F8            mov	-8[bp],ax
25352                                           !BCC_EOS
25353                                           ! 3487  outb(crtc_addr, 0x07);
25354                                           ! Debug: list int = const 7 (used reg = )
25355 66EF           B8                   0007  mov	ax,*7
25356 66F2           50                         push	ax
25357                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25358 66F3           FF76         FE            push	-2[bp]
25359                                           ! Debug: func () void = outb+0 (used reg = )
25360 66F6           E8         1554            call	_outb
25361 66F9           83C4                   04  add	sp,*4
25362                                           !BCC_EOS
25363                                           ! 3488  ovl = inb(crtc_addr+1);
25364                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25365 66FC           8B46         FE            mov	ax,-2[bp]
25366                                           ! Debug: list unsigned int = ax+1 (used reg = )
25367 66FF           40                         inc	ax
25368 6700           50                         push	ax
25369                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25370 6701           E8         1533            call	_inb
25371 6704           44                         inc	sp
25372 6705           44                         inc	sp
25373                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25374 6706           8846         F6            mov	-$A[bp],al
25375                                           !BCC_EOS
25376                                           ! 3489  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25377                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25378 6709           8A46         F6            mov	al,-$A[bp]
25379 670C           24                     40  and	al,*$40
25380                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25381 670E           30E4                       xor	ah,ah
25382 6710           B1                     03  mov	cl,*3
25383 6712           D3E0                       shl	ax,cl
25384 6714           50                         push	ax
25385                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25386 6715           8A46         F6            mov	al,-$A[bp]
25387 6718           24                     02  and	al,*2
25388                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25389 671A           30E4                       xor	ah,ah
25390 671C           B1                     07  mov	cl,*7
25391 671E           D3E0                       shl	ax,cl
25392                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25393 6720           0346         F2            add	ax,-$E[bp]
25394 6723           44                         inc	sp
25395 6724           44                         inc	sp
25396                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25397                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25398 6725           40                         inc	ax
25399 6726           0346         F8            add	ax,-8[bp]
25400 6729           8946         F8            mov	-8[bp],ax
25401                                           !BCC_EOS
25402                                           ! 3490  rows = vde / lines;
25403                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25404 672C           8A46         04            mov	al,4[bp]
25405 672F           30E4                       xor	ah,ah
25406 6731           89C3                       mov	bx,ax
25407 6733           8B46         F8            mov	ax,-8[bp]
25408 6736           E8         FEFA            call	idiv_u
25409                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25410 6739           8846         F5            mov	-$B[bp],al
25411                                           !BCC_EOS
25412                                           ! 3491  write_byte(0x40,0x84, rows-1);
25413                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25414 673C           8A46         F5            mov	al,-$B[bp]
25415 673F           30E4                       xor	ah,ah
25416                                           ! Debug: list unsigned int = ax-1 (used reg = )
25417 6741           48                         dec	ax
25418 6742           50                         push	ax
25419                                           ! Debug: list int = const $84 (used reg = )
25420 6743           B8                   0084  mov	ax,#$84
25421 6746           50                         push	ax
25422                                           ! Debug: list int = const $40 (used reg = )
25423 6747           B8                   0040  mov	ax,*$40
25424 674A           50                         push	ax
25425                                           ! Debug: func () void = write_byte+0 (used reg = )
25426 674B           E8         14B9            call	_write_byte
25427 674E           83C4                   06  add	sp,*6
25428                                           !BCC_EOS
25429                                           ! 3492  cols = read_word(0x40,0x4A);
25430                                           ! Debug: list int = const $4A (used reg = )
25431 6751           B8                   004A  mov	ax,*$4A
25432 6754           50                         push	ax
25433                                           ! Debug: list int = const $40 (used reg = )
25434 6755           B8                   0040  mov	ax,*$40
25435 6758           50                         push	ax
25436                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25437 6759           E8         1498            call	_read_word
25438 675C           83C4                   04  add	sp,*4
25439                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25440 675F           8946         FC            mov	-4[bp],ax
25441                                           !BCC_EOS
25442                                           ! 3493  write_word(0x40,0x4C, rows * cols * 2);
25443                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25444 6762           8A46         F5            mov	al,-$B[bp]
25445 6765           30E4                       xor	ah,ah
25446 6767           8B4E         FC            mov	cx,-4[bp]
25447 676A           F7E9                       imul	cx
25448                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25449 676C           D1E0                       shl	ax,*1
25450                                           ! Debug: list unsigned int = ax+0 (used reg = )
25451 676E           50                         push	ax
25452                                           ! Debug: list int = const $4C (used reg = )
25453 676F           B8                   004C  mov	ax,*$4C
25454 6772           50                         push	ax
25455                                           ! Debug: list int = const $40 (used reg = )
25456 6773           B8                   0040  mov	ax,*$40
25457 6776           50                         push	ax
25458                                           ! Debug: func () void = write_word+0 (used reg = )
25459 6777           E8         14A5            call	_write_word
25460 677A           83C4                   06  add	sp,*6
25461                                           !BCC_EOS
25462                                           ! 3494 }
25463 677D           89EC                       mov	sp,bp
25464 677F           5D                         pop	bp
25465 6780           C3                         ret
25466                                           ! 3495 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bi
25467                                           ! Register BX used in function set_scan_lines
25468                       00006781            _biosfn_load_text_user_pat:
25469                                           !BCC_EOS
25470                                           !BCC_EOS
25471                                           !BCC_EOS
25472                                           !BCC_EOS
25473                                           !BCC_EOS
25474                                           !BCC_EOS
25475                                           ! 3495 t8u BH;
25476                                           !BCC_EOS
25477                                           ! 3496 {
25478                                           ! 3497  Bit16u blockaddr,dest,i,src;
25479                                           !BCC_EOS
25480                                           ! 3498  get_font_access();
25481 6781           55                         push	bp
25482 6782           89E5                       mov	bp,sp
25483 6784           83C4                   F8  add	sp,*-8
25484                                           ! Debug: func () void = get_font_access+0 (used reg = )
25485 6787           E8         FE57            call	_get_font_access
25486                                           !BCC_EOS
25487                                           ! 3499  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25488                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25489 678A           8A46         0E            mov	al,$E[bp]
25490 678D           24                     04  and	al,*4
25491                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25492 678F           30E4                       xor	ah,ah
25493 6791           88C4                       mov	ah,al
25494 6793           30C0                       xor	al,al
25495 6795           B1                     03  mov	cl,*3
25496 6797           D3E0                       shl	ax,cl
25497 6799           50                         push	ax
25498                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25499 679A           8A46         0E            mov	al,$E[bp]
25500 679D           24                     03  and	al,*3
25501                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25502 679F           30E4                       xor	ah,ah
25503 67A1           88C4                       mov	ah,al
25504 67A3           30C0                       xor	al,al
25505 67A5           B1                     06  mov	cl,*6
25506 67A7           D3E0                       shl	ax,cl
25507                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25508 67A9           0346         F6            add	ax,-$A[bp]
25509 67AC           44                         inc	sp
25510 67AD           44                         inc	sp
25511                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25512 67AE           8946         FE            mov	-2[bp],ax
25513                                           !BCC_EOS
25514                                           ! 3500  for(i=0;i<CX;i++)
25515                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25516 67B1           31C0                       xor	ax,ax
25517 67B3           8946         FA            mov	-6[bp],ax
25518                                           !BCC_EOS
25519                                           !BCC_EOS
25520                                           ! 3501   {
25521 67B6           EB           44            jmp .213
25522                       000067B8            .214:
25523                                           ! 3502    src = BP + i * BH;
25524                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25525 67B8           8A46         10            mov	al,$10[bp]
25526 67BB           30E4                       xor	ah,ah
25527 67BD           89C3                       mov	bx,ax
25528 67BF           8B46         FA            mov	ax,-6[bp]
25529 67C2           89D9                       mov	cx,bx
25530 67C4           F7E9                       imul	cx
25531                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25532                                           ! Debug: expression subtree swapping
25533 67C6           0346         08            add	ax,8[bp]
25534                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25535 67C9           8946         F8            mov	-8[bp],ax
25536                                           !BCC_EOS
25537                                           ! 3503    dest = blockaddr + (DX + i) * 32;
25538                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25539 67CC           8B46         0C            mov	ax,$C[bp]
25540 67CF           0346         FA            add	ax,-6[bp]
25541                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25542 67D2           B1                     05  mov	cl,*5
25543 67D4           D3E0                       shl	ax,cl
25544                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25545                                           ! Debug: expression subtree swapping
25546 67D6           0346         FE            add	ax,-2[bp]
25547                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25548 67D9           8946         FC            mov	-4[bp],ax
25549                                           !BCC_EOS
25550                                           ! 3504    memcpyb(0xA000, dest, ES, src, BH);
25551                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25552 67DC           8A46         10            mov	al,$10[bp]
25553 67DF           30E4                       xor	ah,ah
25554 67E1           50                         push	ax
25555                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25556 67E2           FF76         F8            push	-8[bp]
25557                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25558 67E5           FF76         06            push	6[bp]
25559                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25560 67E8           FF76         FC            push	-4[bp]
25561                                           ! Debug: list unsigned int = const $A000 (used reg = )
25562 67EB           B8                   A000  mov	ax,#$A000
25563 67EE           50                         push	ax
25564                                           ! Debug: func () void = memcpyb+0 (used reg = )
25565 67EF           E8         138F            call	_memcpyb
25566 67F2           83C4                   0A  add	sp,*$A
25567                                           !BCC_EOS
25568                                           ! 3505   }
25569                                           ! 3506  release_font_access();
25570                       000067F5            .212:
25571                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25572 67F5           8B46         FA            mov	ax,-6[bp]
25573 67F8           40                         inc	ax
25574 67F9           8946         FA            mov	-6[bp],ax
25575                       000067FC            .213:
25576                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25577 67FC           8B46         FA            mov	ax,-6[bp]
25578 67FF           3B46         0A            cmp	ax,$A[bp]
25579 6802           72           B4            jb 	.214
25580                       00006804            .215:
25581                       00006804            .211:
25582                                           ! Debug: func () void = release_font_access+0 (used reg = )
25583 6804           E8         FDFD            call	_release_font_access
25584                                           !BCC_EOS
25585                                           ! 3507  if(AL>=0x10)
25586                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25587 6807           8A46         04            mov	al,4[bp]
25588 680A           3C                     10  cmp	al,*$10
25589 680C           72           0B            jb  	.216
25590                       0000680E            .217:
25591                                           ! 3508   {
25592                                           ! 3509    set_scan_lines(BH);
25593                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25594 680E           8A46         10            mov	al,$10[bp]
25595 6811           30E4                       xor	ah,ah
25596 6813           50                         push	ax
25597                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25598 6814           E8         FE21            call	_set_scan_lines
25599 6817           44                         inc	sp
25600 6818           44                         inc	sp
25601                                           !BCC_EOS
25602                                           ! 3510   }
25603                                           ! 3511 }
25604                       00006819            .216:
25605 6819           89EC                       mov	sp,bp
25606 681B           5D                         pop	bp
25607 681C           C3                         ret
25608                                           ! 3512 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25609                                           ! Register BX used in function biosfn_load_text_user_pat
25610                       0000681D            _biosfn_load_text_8_14_pat:
25611                                           !BCC_EOS
25612                                           !BCC_EOS
25613                                           ! 3513 {
25614                                           ! 3514  Bit16u blockaddr,dest,i,src;
25615                                           !BCC_EOS
25616                                           ! 3515  get_font_access();
25617 681D           55                         push	bp
25618 681E           89E5                       mov	bp,sp
25619 6820           83C4                   F8  add	sp,*-8
25620                                           ! Debug: func () void = get_font_access+0 (used reg = )
25621 6823           E8         FDBB            call	_get_font_access
25622                                           !BCC_EOS
25623                                           ! 3516  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25624                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25625 6826           8A46         06            mov	al,6[bp]
25626 6829           24                     04  and	al,*4
25627                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25628 682B           30E4                       xor	ah,ah
25629 682D           88C4                       mov	ah,al
25630 682F           30C0                       xor	al,al
25631 6831           B1                     03  mov	cl,*3
25632 6833           D3E0                       shl	ax,cl
25633 6835           50                         push	ax
25634                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25635 6836           8A46         06            mov	al,6[bp]
25636 6839           24                     03  and	al,*3
25637                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25638 683B           30E4                       xor	ah,ah
25639 683D           88C4                       mov	ah,al
25640 683F           30C0                       xor	al,al
25641 6841           B1                     06  mov	cl,*6
25642 6843           D3E0                       shl	ax,cl
25643                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25644 6845           0346         F6            add	ax,-$A[bp]
25645 6848           44                         inc	sp
25646 6849           44                         inc	sp
25647                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25648 684A           8946         FE            mov	-2[bp],ax
25649                                           !BCC_EOS
25650                                           ! 3517  for(i=0;i<0x100;i++)
25651                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25652 684D           31C0                       xor	ax,ax
25653 684F           8946         FA            mov	-6[bp],ax
25654                                           !BCC_EOS
25655                                           !BCC_EOS
25656                                           ! 3518   {
25657 6852           EB           41            jmp .21A
25658                       00006854            .21B:
25659                                           ! 3519    src = i * 14;
25660                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25661 6854           8B46         FA            mov	ax,-6[bp]
25662 6857           89C2                       mov	dx,ax
25663 6859           B1                     03  mov	cl,*3
25664 685B           D3E0                       shl	ax,cl
25665 685D           29D0                       sub	ax,dx
25666 685F           D1E0                       shl	ax,*1
25667                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25668 6861           8946         F8            mov	-8[bp],ax
25669                                           !BCC_EOS
25670                                           ! 3520    dest = blockaddr + i * 32;
25671                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25672 6864           8B46         FA            mov	ax,-6[bp]
25673 6867           B1                     05  mov	cl,*5
25674 6869           D3E0                       shl	ax,cl
25675                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25676                                           ! Debug: expression subtree swapping
25677 686B           0346         FE            add	ax,-2[bp]
25678                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25679 686E           8946         FC            mov	-4[bp],ax
25680                                           !BCC_EOS
25681                                           ! 3521    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25682                                           ! Debug: list int = const $E (used reg = )
25683 6871           B8                   000E  mov	ax,*$E
25684 6874           50                         push	ax
25685                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25686 6875           8B5E         F8            mov	bx,-8[bp]
25687                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25688                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25689 6878           81C3                 175A  add	bx,#_vgafont14
25690 687C           53                         push	bx
25691                                           ! Debug: list unsigned int = const $C000 (used reg = )
25692 687D           B8                   C000  mov	ax,#$C000
25693 6880           50                         push	ax
25694                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25695 6881           FF76         FC            push	-4[bp]
25696                                           ! Debug: list unsigned int = const $A000 (used reg = )
25697 6884           B8                   A000  mov	ax,#$A000
25698 6887           50                         push	ax
25699                                           ! Debug: func () void = memcpyb+0 (used reg = )
25700 6888           E8         12F6            call	_memcpyb
25701 688B           83C4                   0A  add	sp,*$A
25702                                           !BCC_EOS
25703                                           ! 3522   }
25704                                           ! 3523  release_font_access();
25705                       0000688E            .219:
25706                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25707 688E           8B46         FA            mov	ax,-6[bp]
25708 6891           40                         inc	ax
25709 6892           8946         FA            mov	-6[bp],ax
25710                       00006895            .21A:
25711                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25712 6895           8B46         FA            mov	ax,-6[bp]
25713 6898           3D                   0100  cmp	ax,#$100
25714 689B           72           B7            jb 	.21B
25715                       0000689D            .21C:
25716                       0000689D            .218:
25717                                           ! Debug: func () void = release_font_access+0 (used reg = )
25718 689D           E8         FD64            call	_release_font_access
25719                                           !BCC_EOS
25720                                           ! 3524  if(AL>=0x10)
25721                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25722 68A0           8A46         04            mov	al,4[bp]
25723 68A3           3C                     10  cmp	al,*$10
25724 68A5           72           09            jb  	.21D
25725                       000068A7            .21E:
25726                                           ! 3525   {
25727                                           ! 3526    set_scan_lines(14);
25728                                           ! Debug: list int = const $E (used reg = )
25729 68A7           B8                   000E  mov	ax,*$E
25730 68AA           50                         push	ax
25731                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25732 68AB           E8         FD8A            call	_set_scan_lines
25733 68AE           44                         inc	sp
25734 68AF           44                         inc	sp
25735                                           !BCC_EOS
25736                                           ! 3527   }
25737                                           ! 3528 }
25738                       000068B0            .21D:
25739 68B0           89EC                       mov	sp,bp
25740 68B2           5D                         pop	bp
25741 68B3           C3                         ret
25742                                           ! 3529 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25743                                           ! Register BX used in function biosfn_load_text_8_14_pat
25744                       000068B4            _biosfn_load_text_8_8_pat:
25745                                           !BCC_EOS
25746                                           !BCC_EOS
25747                                           ! 3530 {
25748                                           ! 3531  Bit16u blockaddr,dest,i,src;
25749                                           !BCC_EOS
25750                                           ! 3532  get_font_access();
25751 68B4           55                         push	bp
25752 68B5           89E5                       mov	bp,sp
25753 68B7           83C4                   F8  add	sp,*-8
25754                                           ! Debug: func () void = get_font_access+0 (used reg = )
25755 68BA           E8         FD24            call	_get_font_access
25756                                           !BCC_EOS
25757                                           ! 3533  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25758                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25759 68BD           8A46         06            mov	al,6[bp]
25760 68C0           24                     04  and	al,*4
25761                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25762 68C2           30E4                       xor	ah,ah
25763 68C4           88C4                       mov	ah,al
25764 68C6           30C0                       xor	al,al
25765 68C8           B1                     03  mov	cl,*3
25766 68CA           D3E0                       shl	ax,cl
25767 68CC           50                         push	ax
25768                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25769 68CD           8A46         06            mov	al,6[bp]
25770 68D0           24                     03  and	al,*3
25771                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25772 68D2           30E4                       xor	ah,ah
25773 68D4           88C4                       mov	ah,al
25774 68D6           30C0                       xor	al,al
25775 68D8           B1                     06  mov	cl,*6
25776 68DA           D3E0                       shl	ax,cl
25777                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25778 68DC           0346         F6            add	ax,-$A[bp]
25779 68DF           44                         inc	sp
25780 68E0           44                         inc	sp
25781                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25782 68E1           8946         FE            mov	-2[bp],ax
25783                                           !BCC_EOS
25784                                           ! 3534  for(i=0;i<0x100;i++)
25785                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25786 68E4           31C0                       xor	ax,ax
25787 68E6           8946         FA            mov	-6[bp],ax
25788                                           !BCC_EOS
25789                                           !BCC_EOS
25790                                           ! 3535   {
25791 68E9           EB           3B            jmp .221
25792                       000068EB            .222:
25793                                           ! 3536    src = i * 8;
25794                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25795 68EB           8B46         FA            mov	ax,-6[bp]
25796 68EE           B1                     03  mov	cl,*3
25797 68F0           D3E0                       shl	ax,cl
25798                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25799 68F2           8946         F8            mov	-8[bp],ax
25800                                           !BCC_EOS
25801                                           ! 3537    dest = blockaddr + i * 32;
25802                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25803 68F5           8B46         FA            mov	ax,-6[bp]
25804 68F8           B1                     05  mov	cl,*5
25805 68FA           D3E0                       shl	ax,cl
25806                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25807                                           ! Debug: expression subtree swapping
25808 68FC           0346         FE            add	ax,-2[bp]
25809                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25810 68FF           8946         FC            mov	-4[bp],ax
25811                                           !BCC_EOS
25812                                           ! 3538    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25813                                           ! Debug: list int = const 8 (used reg = )
25814 6902           B8                   0008  mov	ax,*8
25815 6905           50                         push	ax
25816                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25817 6906           8B5E         F8            mov	bx,-8[bp]
25818                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25819                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25820 6909           81C3                 0F5A  add	bx,#_vgafont8
25821 690D           53                         push	bx
25822                                           ! Debug: list unsigned int = const $C000 (used reg = )
25823 690E           B8                   C000  mov	ax,#$C000
25824 6911           50                         push	ax
25825                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25826 6912           FF76         FC            push	-4[bp]
25827                                           ! Debug: list unsigned int = const $A000 (used reg = )
25828 6915           B8                   A000  mov	ax,#$A000
25829 6918           50                         push	ax
25830                                           ! Debug: func () void = memcpyb+0 (used reg = )
25831 6919           E8         1265            call	_memcpyb
25832 691C           83C4                   0A  add	sp,*$A
25833                                           !BCC_EOS
25834                                           ! 3539   }
25835                                           ! 3540  release_font_access();
25836                       0000691F            .220:
25837                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25838 691F           8B46         FA            mov	ax,-6[bp]
25839 6922           40                         inc	ax
25840 6923           8946         FA            mov	-6[bp],ax
25841                       00006926            .221:
25842                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25843 6926           8B46         FA            mov	ax,-6[bp]
25844 6929           3D                   0100  cmp	ax,#$100
25845 692C           72           BD            jb 	.222
25846                       0000692E            .223:
25847                       0000692E            .21F:
25848                                           ! Debug: func () void = release_font_access+0 (used reg = )
25849 692E           E8         FCD3            call	_release_font_access
25850                                           !BCC_EOS
25851                                           ! 3541  if(AL>=0x10)
25852                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25853 6931           8A46         04            mov	al,4[bp]
25854 6934           3C                     10  cmp	al,*$10
25855 6936           72           09            jb  	.224
25856                       00006938            .225:
25857                                           ! 3542   {
25858                                           ! 3543    set_scan_lines(8);
25859                                           ! Debug: list int = const 8 (used reg = )
25860 6938           B8                   0008  mov	ax,*8
25861 693B           50                         push	ax
25862                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25863 693C           E8         FCF9            call	_set_scan_lines
25864 693F           44                         inc	sp
25865 6940           44                         inc	sp
25866                                           !BCC_EOS
25867                                           ! 3544   }
25868                                           ! 3545 }
25869                       00006941            .224:
25870 6941           89EC                       mov	sp,bp
25871 6943           5D                         pop	bp
25872 6944           C3                         ret
25873                                           ! 3546 #asm
25874                                           !BCC_ASM
25875                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25876                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25877                       00006945            biosfn_set_text_block_specifier:
25878 6945           50                           push ax
25879 6946           52                           push dx
25880 6947           BA                   03C4    mov dx, # 0x3c4
25881 694A           88DC                         mov ah, bl
25882 694C           B0                     03    mov al, #0x03
25883 694E           EF                           out dx, ax
25884 694F           5A                           pop dx
25885 6950           58                           pop ax
25886 6951           C3                           ret
25887                                           ! 3557 endasm
25888                                           !BCC_ENDASM
25889                                           ! 3558 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25890                                           ! Register BX used in function biosfn_load_text_8_8_pat
25891                       00006952            _biosfn_load_text_8_16_pat:
25892                                           !BCC_EOS
25893                                           !BCC_EOS
25894                                           ! 3559 {
25895                                           ! 3560  Bit16u blockaddr,dest,i,src;
25896                                           !BCC_EOS
25897                                           ! 3561  get_font_access();
25898 6952           55                         push	bp
25899 6953           89E5                       mov	bp,sp
25900 6955           83C4                   F8  add	sp,*-8
25901                                           ! Debug: func () void = get_font_access+0 (used reg = )
25902 6958           E8         FC86            call	_get_font_access
25903                                           !BCC_EOS
25904                                           ! 3562  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25905                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25906 695B           8A46         06            mov	al,6[bp]
25907 695E           24                     04  and	al,*4
25908                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25909 6960           30E4                       xor	ah,ah
25910 6962           88C4                       mov	ah,al
25911 6964           30C0                       xor	al,al
25912 6966           B1                     03  mov	cl,*3
25913 6968           D3E0                       shl	ax,cl
25914 696A           50                         push	ax
25915                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25916 696B           8A46         06            mov	al,6[bp]
25917 696E           24                     03  and	al,*3
25918                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25919 6970           30E4                       xor	ah,ah
25920 6972           88C4                       mov	ah,al
25921 6974           30C0                       xor	al,al
25922 6976           B1                     06  mov	cl,*6
25923 6978           D3E0                       shl	ax,cl
25924                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25925 697A           0346         F6            add	ax,-$A[bp]
25926 697D           44                         inc	sp
25927 697E           44                         inc	sp
25928                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25929 697F           8946         FE            mov	-2[bp],ax
25930                                           !BCC_EOS
25931                                           ! 3563  for(i=0;i<0x100;i++)
25932                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25933 6982           31C0                       xor	ax,ax
25934 6984           8946         FA            mov	-6[bp],ax
25935                                           !BCC_EOS
25936                                           !BCC_EOS
25937                                           ! 3564   {
25938 6987           EB           3B            jmp .228
25939                       00006989            .229:
25940                                           ! 3565    src = i * 16;
25941                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25942 6989           8B46         FA            mov	ax,-6[bp]
25943 698C           B1                     04  mov	cl,*4
25944 698E           D3E0                       shl	ax,cl
25945                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25946 6990           8946         F8            mov	-8[bp],ax
25947                                           !BCC_EOS
25948                                           ! 3566    dest = blockaddr + i * 32;
25949                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25950 6993           8B46         FA            mov	ax,-6[bp]
25951 6996           B1                     05  mov	cl,*5
25952 6998           D3E0                       shl	ax,cl
25953                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25954                                           ! Debug: expression subtree swapping
25955 699A           0346         FE            add	ax,-2[bp]
25956                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25957 699D           8946         FC            mov	-4[bp],ax
25958                                           !BCC_EOS
25959                                           ! 3567    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25960                                           ! Debug: list int = const $10 (used reg = )
25961 69A0           B8                   0010  mov	ax,*$10
25962 69A3           50                         push	ax
25963                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25964 69A4           8B5E         F8            mov	bx,-8[bp]
25965                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25966                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25967 69A7           81C3                 255A  add	bx,#_vgafont16
25968 69AB           53                         push	bx
25969                                           ! Debug: list unsigned int = const $C000 (used reg = )
25970 69AC           B8                   C000  mov	ax,#$C000
25971 69AF           50                         push	ax
25972                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25973 69B0           FF76         FC            push	-4[bp]
25974                                           ! Debug: list unsigned int = const $A000 (used reg = )
25975 69B3           B8                   A000  mov	ax,#$A000
25976 69B6           50                         push	ax
25977                                           ! Debug: func () void = memcpyb+0 (used reg = )
25978 69B7           E8         11C7            call	_memcpyb
25979 69BA           83C4                   0A  add	sp,*$A
25980                                           !BCC_EOS
25981                                           ! 3568   }
25982                                           ! 3569  release_font_access();
25983                       000069BD            .227:
25984                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25985 69BD           8B46         FA            mov	ax,-6[bp]
25986 69C0           40                         inc	ax
25987 69C1           8946         FA            mov	-6[bp],ax
25988                       000069C4            .228:
25989                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25990 69C4           8B46         FA            mov	ax,-6[bp]
25991 69C7           3D                   0100  cmp	ax,#$100
25992 69CA           72           BD            jb 	.229
25993                       000069CC            .22A:
25994                       000069CC            .226:
25995                                           ! Debug: func () void = release_font_access+0 (used reg = )
25996 69CC           E8         FC35            call	_release_font_access
25997                                           !BCC_EOS
25998                                           ! 3570  if(AL>=0x10)
25999                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26000 69CF           8A46         04            mov	al,4[bp]
26001 69D2           3C                     10  cmp	al,*$10
26002 69D4           72           09            jb  	.22B
26003                       000069D6            .22C:
26004                                           ! 3571   {
26005                                           ! 3572    set_scan_lines(16);
26006                                           ! Debug: list int = const $10 (used reg = )
26007 69D6           B8                   0010  mov	ax,*$10
26008 69D9           50                         push	ax
26009                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26010 69DA           E8         FC5B            call	_set_scan_lines
26011 69DD           44                         inc	sp
26012 69DE           44                         inc	sp
26013                                           !BCC_EOS
26014                                           ! 3573   }
26015                                           ! 3574 }
26016                       000069DF            .22B:
26017 69DF           89EC                       mov	sp,bp
26018 69E1           5D                         pop	bp
26019 69E2           C3                         ret
26020                                           ! 3575 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26021                                           ! Register BX used in function biosfn_load_text_8_16_pat
26022                       000069E3            _biosfn_load_gfx_8_8_chars:
26023                                           !BCC_EOS
26024                                           !BCC_EOS
26025                                           ! 3576 {
26026                                           ! 3577 }
26027 69E3           C3                         ret
26028                                           ! 3578 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26029                       000069E4            _biosfn_load_gfx_user_chars:
26030                                           !BCC_EOS
26031                                           !BCC_EOS
26032                                           !BCC_EOS
26033                                           !BCC_EOS
26034                                           !BCC_EOS
26035                                           ! 3579 {
26036                                           ! 3580 }
26037 69E4           C3                         ret
26038                                           ! 3581 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26039                       000069E5            _biosfn_load_gfx_8_14_chars:
26040                                           !BCC_EOS
26041                                           ! 3582 {
26042                                           ! 3583 }
26043 69E5           C3                         ret
26044                                           ! 3584 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26045                       000069E6            _biosfn_load_gfx_8_8_dd_chars:
26046                                           !BCC_EOS
26047                                           ! 3585 {
26048                                           ! 3586 }
26049 69E6           C3                         ret
26050                                           ! 3587 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26051                       000069E7            _biosfn_load_gfx_8_16_chars:
26052                                           !BCC_EOS
26053                                           ! 3588 {
26054                                           ! 3589 }
26055 69E7           C3                         ret
26056                                           ! 3590 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26057                                           ! 3591 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26058                       000069E8            _biosfn_get_font_info:
26059                                           !BCC_EOS
26060                                           !BCC_EOS
26061                                           !BCC_EOS
26062                                           !BCC_EOS
26063                                           !BCC_EOS
26064                                           ! 3592 {Bit16u s
26065                                           ! 3592 s=get_SS();
26066 69E8           55                         push	bp
26067 69E9           89E5                       mov	bp,sp
26068 69EB           4C                         dec	sp
26069 69EC           4C                         dec	sp
26070                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26071 69ED           E8         127D            call	_get_SS
26072                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26073 69F0           8946         FE            mov	-2[bp],ax
26074                                           !BCC_EOS
26075                                           ! 3593  switch(BH)
26076 69F3           8A46         04            mov	al,4[bp]
26077                                           ! 3594   {case 0x00:
26078 69F6           E9         0143            br 	.22F
26079                                           ! 3595     write_word(ss,ES,read_word(0x00,0x1f*4));
26080                       000069F9            .230:
26081                                           ! Debug: list int = const $7C (used reg = )
26082 69F9           B8                   007C  mov	ax,*$7C
26083 69FC           50                         push	ax
26084                                           ! Debug: list int = const 0 (used reg = )
26085 69FD           31C0                       xor	ax,ax
26086 69FF           50                         push	ax
26087                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26088 6A00           E8         11F1            call	_read_word
26089 6A03           83C4                   04  add	sp,*4
26090                                           ! Debug: list unsigned short = ax+0 (used reg = )
26091 6A06           50                         push	ax
26092                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26093 6A07           FF76         06            push	6[bp]
26094                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26095 6A0A           FF76         FE            push	-2[bp]
26096                                           ! Debug: func () void = write_word+0 (used reg = )
26097 6A0D           E8         120F            call	_write_word
26098 6A10           83C4                   06  add	sp,*6
26099                                           !BCC_EOS
26100                                           ! 3596     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26101                                           ! Debug: list int = const $7E (used reg = )
26102 6A13           B8                   007E  mov	ax,*$7E
26103 6A16           50                         push	ax
26104                                           ! Debug: list int = const 0 (used reg = )
26105 6A17           31C0                       xor	ax,ax
26106 6A19           50                         push	ax
26107                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26108 6A1A           E8         11D7            call	_read_word
26109 6A1D           83C4                   04  add	sp,*4
26110                                           ! Debug: list unsigned short = ax+0 (used reg = )
26111 6A20           50                         push	ax
26112                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26113 6A21           FF76         08            push	8[bp]
26114                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26115 6A24           FF76         FE            push	-2[bp]
26116                                           ! Debug: func () void = write_word+0 (used reg = )
26117 6A27           E8         11F5            call	_write_word
26118 6A2A           83C4                   06  add	sp,*6
26119                                           !BCC_EOS
26120                                           ! 3597     break;
26121 6A2D           E9         0131            br 	.22D
26122                                           !BCC_EOS
26123                                           ! 3598    case 0x01:
26124                                           ! 3599     write_word(ss,ES,read_word(0x00,0x43*4));
26125                       00006A30            .231:
26126                                           ! Debug: list int = const $10C (used reg = )
26127 6A30           B8                   010C  mov	ax,#$10C
26128 6A33           50                         push	ax
26129                                           ! Debug: list int = const 0 (used reg = )
26130 6A34           31C0                       xor	ax,ax
26131 6A36           50                         push	ax
26132                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26133 6A37           E8         11BA            call	_read_word
26134 6A3A           83C4                   04  add	sp,*4
26135                                           ! Debug: list unsigned short = ax+0 (used reg = )
26136 6A3D           50                         push	ax
26137                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26138 6A3E           FF76         06            push	6[bp]
26139                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26140 6A41           FF76         FE            push	-2[bp]
26141                                           ! Debug: func () void = write_word+0 (used reg = )
26142 6A44           E8         11D8            call	_write_word
26143 6A47           83C4                   06  add	sp,*6
26144                                           !BCC_EOS
26145                                           ! 3600     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26146                                           ! Debug: list int = const $10E (used reg = )
26147 6A4A           B8                   010E  mov	ax,#$10E
26148 6A4D           50                         push	ax
26149                                           ! Debug: list int = const 0 (used reg = )
26150 6A4E           31C0                       xor	ax,ax
26151 6A50           50                         push	ax
26152                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26153 6A51           E8         11A0            call	_read_word
26154 6A54           83C4                   04  add	sp,*4
26155                                           ! Debug: list unsigned short = ax+0 (used reg = )
26156 6A57           50                         push	ax
26157                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26158 6A58           FF76         08            push	8[bp]
26159                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26160 6A5B           FF76         FE            push	-2[bp]
26161                                           ! Debug: func () void = write_word+0 (used reg = )
26162 6A5E           E8         11BE            call	_write_word
26163 6A61           83C4                   06  add	sp,*6
26164                                           !BCC_EOS
26165                                           ! 3601     break;
26166 6A64           E9         00FA            br 	.22D
26167                                           !BCC_EOS
26168                                           ! 3602    case 0x02:
26169                                           ! 3603     write_word(ss,ES,0xC000);
26170                       00006A67            .232:
26171                                           ! Debug: list unsigned int = const $C000 (used reg = )
26172 6A67           B8                   C000  mov	ax,#$C000
26173 6A6A           50                         push	ax
26174                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26175 6A6B           FF76         06            push	6[bp]
26176                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26177 6A6E           FF76         FE            push	-2[bp]
26178                                           ! Debug: func () void = write_word+0 (used reg = )
26179 6A71           E8         11AB            call	_write_word
26180 6A74           83C4                   06  add	sp,*6
26181                                           !BCC_EOS
26182                                           ! 3604     write_word(ss,BP,vgafont14);
26183                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26184 6A77           BB                   175A  mov	bx,#_vgafont14
26185 6A7A           53                         push	bx
26186                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26187 6A7B           FF76         08            push	8[bp]
26188                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26189 6A7E           FF76         FE            push	-2[bp]
26190                                           ! Debug: func () void = write_word+0 (used reg = )
26191 6A81           E8         119B            call	_write_word
26192 6A84           83C4                   06  add	sp,*6
26193                                           !BCC_EOS
26194                                           ! 3605     break;
26195 6A87           E9         00D7            br 	.22D
26196                                           !BCC_EOS
26197                                           ! 3606    case 0x03:
26198                                           ! 3607     write_word(ss,ES,0xC000);
26199                       00006A8A            .233:
26200                                           ! Debug: list unsigned int = const $C000 (used reg = )
26201 6A8A           B8                   C000  mov	ax,#$C000
26202 6A8D           50                         push	ax
26203                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26204 6A8E           FF76         06            push	6[bp]
26205                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26206 6A91           FF76         FE            push	-2[bp]
26207                                           ! Debug: func () void = write_word+0 (used reg = )
26208 6A94           E8         1188            call	_write_word
26209 6A97           83C4                   06  add	sp,*6
26210                                           !BCC_EOS
26211                                           ! 3608     write_word(ss,BP,vgafont8);
26212                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26213 6A9A           BB                   0F5A  mov	bx,#_vgafont8
26214 6A9D           53                         push	bx
26215                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26216 6A9E           FF76         08            push	8[bp]
26217                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26218 6AA1           FF76         FE            push	-2[bp]
26219                                           ! Debug: func () void = write_word+0 (used reg = )
26220 6AA4           E8         1178            call	_write_word
26221 6AA7           83C4                   06  add	sp,*6
26222                                           !BCC_EOS
26223                                           ! 3609     break;
26224 6AAA           E9         00B4            br 	.22D
26225                                           !BCC_EOS
26226                                           ! 3610    case 0x04:
26227                                           ! 3611     write_word(ss,ES,0xC000);
26228                       00006AAD            .234:
26229                                           ! Debug: list unsigned int = const $C000 (used reg = )
26230 6AAD           B8                   C000  mov	ax,#$C000
26231 6AB0           50                         push	ax
26232                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26233 6AB1           FF76         06            push	6[bp]
26234                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26235 6AB4           FF76         FE            push	-2[bp]
26236                                           ! Debug: func () void = write_word+0 (used reg = )
26237 6AB7           E8         1165            call	_write_word
26238 6ABA           83C4                   06  add	sp,*6
26239                                           !BCC_EOS
26240                                           ! 3612     write_word(ss,BP,vgafont8+128*8);
26241                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26242 6ABD           BB                   135A  mov	bx,#_vgafont8+$400
26243 6AC0           53                         push	bx
26244                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26245 6AC1           FF76         08            push	8[bp]
26246                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26247 6AC4           FF76         FE            push	-2[bp]
26248                                           ! Debug: func () void = write_word+0 (used reg = )
26249 6AC7           E8         1155            call	_write_word
26250 6ACA           83C4                   06  add	sp,*6
26251                                           !BCC_EOS
26252                                           ! 3613     break;
26253 6ACD           E9         0091            br 	.22D
26254                                           !BCC_EOS
26255                                           ! 3614    case 0x05:
26256                                           ! 3615     write_word(ss,ES,0xC000);
26257                       00006AD0            .235:
26258                                           ! Debug: list unsigned int = const $C000 (used reg = )
26259 6AD0           B8                   C000  mov	ax,#$C000
26260 6AD3           50                         push	ax
26261                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26262 6AD4           FF76         06            push	6[bp]
26263                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26264 6AD7           FF76         FE            push	-2[bp]
26265                                           ! Debug: func () void = write_word+0 (used reg = )
26266 6ADA           E8         1142            call	_write_word
26267 6ADD           83C4                   06  add	sp,*6
26268                                           !BCC_EOS
26269                                           ! 3616     write_word(ss,BP,vgafont14alt);
26270                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26271 6AE0           BB                   355A  mov	bx,#_vgafont14alt
26272 6AE3           53                         push	bx
26273                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26274 6AE4           FF76         08            push	8[bp]
26275                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26276 6AE7           FF76         FE            push	-2[bp]
26277                                           ! Debug: func () void = write_word+0 (used reg = )
26278 6AEA           E8         1132            call	_write_word
26279 6AED           83C4                   06  add	sp,*6
26280                                           !BCC_EOS
26281                                           ! 3617     break;
26282 6AF0           EB           6F            jmp .22D
26283                                           !BCC_EOS
26284                                           ! 3618    case 0x06:
26285                                           ! 3619     write_word(ss,ES,0xC000);
26286                       00006AF2            .236:
26287                                           ! Debug: list unsigned int = const $C000 (used reg = )
26288 6AF2           B8                   C000  mov	ax,#$C000
26289 6AF5           50                         push	ax
26290                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26291 6AF6           FF76         06            push	6[bp]
26292                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26293 6AF9           FF76         FE            push	-2[bp]
26294                                           ! Debug: func () void = write_word+0 (used reg = )
26295 6AFC           E8         1120            call	_write_word
26296 6AFF           83C4                   06  add	sp,*6
26297                                           !BCC_EOS
26298                                           ! 3620     write_word(ss,BP,vgafont16);
26299                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26300 6B02           BB                   255A  mov	bx,#_vgafont16
26301 6B05           53                         push	bx
26302                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26303 6B06           FF76         08            push	8[bp]
26304                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26305 6B09           FF76         FE            push	-2[bp]
26306                                           ! Debug: func () void = write_word+0 (used reg = )
26307 6B0C           E8         1110            call	_write_word
26308 6B0F           83C4                   06  add	sp,*6
26309                                           !BCC_EOS
26310                                           ! 3621     break;
26311 6B12           EB           4D            jmp .22D
26312                                           !BCC_EOS
26313                                           ! 3622    case 0x07:
26314                                           ! 3623     write_word(ss,ES,0xC000);
26315                       00006B14            .237:
26316                                           ! Debug: list unsigned int = const $C000 (used reg = )
26317 6B14           B8                   C000  mov	ax,#$C000
26318 6B17           50                         push	ax
26319                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26320 6B18           FF76         06            push	6[bp]
26321                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26322 6B1B           FF76         FE            push	-2[bp]
26323                                           ! Debug: func () void = write_word+0 (used reg = )
26324 6B1E           E8         10FE            call	_write_word
26325 6B21           83C4                   06  add	sp,*6
26326                                           !BCC_EOS
26327                                           ! 3624     write_word(ss,BP,vgafont16alt);
26328                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26329 6B24           BB                   355B  mov	bx,#_vgafont16alt
26330 6B27           53                         push	bx
26331                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26332 6B28           FF76         08            push	8[bp]
26333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26334 6B2B           FF76         FE            push	-2[bp]
26335                                           ! Debug: func () void = write_word+0 (used reg = )
26336 6B2E           E8         10EE            call	_write_word
26337 6B31           83C4                   06  add	sp,*6
26338                                           !BCC_EOS
26339                                           ! 3625     break;
26340 6B34           EB           2B            jmp .22D
26341                                           !BCC_EOS
26342                                           ! 3626    default:
26343                                           ! 3627     return;
26344                       00006B36            .238:
26345 6B36           89EC                       mov	sp,bp
26346 6B38           5D                         pop	bp
26347 6B39           C3                         ret
26348                                           !BCC_EOS
26349                                           ! 3628   }
26350                                           ! 3629  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26351 6B3A           EB           25            jmp .22D
26352                       00006B3C            .22F:
26353 6B3C           2C                     00  sub	al,*0
26354 6B3E           72           F6            jb 	.238
26355 6B40           3C                     07  cmp	al,*7
26356 6B42           77           1B            ja  	.239
26357 6B44           30E4                       xor	ah,ah
26358 6B46           D1E0                       shl	ax,*1
26359 6B48           89C3                       mov	bx,ax
26360 6B4A           2E                         seg	cs
26361 6B4B           FFA7       6B4F            br	.23A[bx]
26362                       00006B4F            .23A:
26363 6B4F                      69F9            .word	.230
26364 6B51                      6A30            .word	.231
26365 6B53                      6A67            .word	.232
26366 6B55                      6A8A            .word	.233
26367 6B57                      6AAD            .word	.234
26368 6B59                      6AD0            .word	.235
26369 6B5B                      6AF2            .word	.236
26370 6B5D                      6B14            .word	.237
26371                       00006B5F            .239:
26372 6B5F           EB           D5            jmp	.238
26373                       00006B61            .22D:
26374                       FFFFFFFC            ..FFF5	=	-4
26375                                           ! Debug: list int = const $85 (used reg = )
26376 6B61           B8                   0085  mov	ax,#$85
26377 6B64           50                         push	ax
26378                                           ! Debug: list int = const $40 (used reg = )
26379 6B65           B8                   0040  mov	ax,*$40
26380 6B68           50                         push	ax
26381                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26382 6B69           E8         1075            call	_read_byte
26383 6B6C           83C4                   04  add	sp,*4
26384                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26385 6B6F           30E4                       xor	ah,ah
26386                                           ! Debug: list unsigned short = ax+0 (used reg = )
26387 6B71           50                         push	ax
26388                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26389 6B72           FF76         0A            push	$A[bp]
26390                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26391 6B75           FF76         FE            push	-2[bp]
26392                                           ! Debug: func () void = write_word+0 (used reg = )
26393 6B78           E8         10A4            call	_write_word
26394 6B7B           83C4                   06  add	sp,*6
26395                                           !BCC_EOS
26396                                           ! 3630  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26397                                           ! Debug: list int = const $84 (used reg = )
26398 6B7E           B8                   0084  mov	ax,#$84
26399 6B81           50                         push	ax
26400                                           ! Debug: list int = const $40 (used reg = )
26401 6B82           B8                   0040  mov	ax,*$40
26402 6B85           50                         push	ax
26403                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26404 6B86           E8         1058            call	_read_byte
26405 6B89           83C4                   04  add	sp,*4
26406                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26407 6B8C           30E4                       xor	ah,ah
26408                                           ! Debug: list unsigned short = ax+0 (used reg = )
26409 6B8E           50                         push	ax
26410                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26411 6B8F           FF76         0C            push	$C[bp]
26412                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26413 6B92           FF76         FE            push	-2[bp]
26414                                           ! Debug: func () void = write_word+0 (used reg = )
26415 6B95           E8         1087            call	_write_word
26416 6B98           83C4                   06  add	sp,*6
26417                                           !BCC_EOS
26418                                           ! 3631 }
26419 6B9B           89EC                       mov	sp,bp
26420 6B9D           5D                         pop	bp
26421 6B9E           C3                         ret
26422                                           ! 3632 #asm
26423                                           !BCC_ASM
26424                       00000006            _biosfn_get_font_info.BP	set	6
26425                       00000002            _biosfn_get_font_info.BH	set	2
26426                       00000008            _biosfn_get_font_info.CX	set	8
26427                       0000000A            _biosfn_get_font_info.DX	set	$A
26428                       00000004            _biosfn_get_font_info.ES	set	4
26429                       00006B9F            biosfn_get_ega_info:
26430 6B9F           1E                           push ds
26431 6BA0           50                           push ax
26432 6BA1           B8                   0040    mov ax, # 0x40
26433 6BA4           8ED8                         mov ds, ax
26434 6BA6           30ED                         xor ch, ch
26435 6BA8           BB                   0088    mov bx, # 0x88
26436 6BAB           8A0F                         mov cl, [bx]
26437 6BAD           80E1                   0F    and cl, #0x0f
26438 6BB0           BB                   0063    mov bx, # 0x63
26439 6BB3           8B07                         mov ax, [bx]
26440 6BB5           BB                   0003    mov bx, #0x0003
26441 6BB8           3D                   03B4    cmp ax, # 0x3b4
26442 6BBB           75           02              jne mode_ega_color
26443 6BBD           B7                     01    mov bh, #0x01
26444                       00006BBF            mode_ega_color:
26445 6BBF           58                           pop ax
26446 6BC0           1F                           pop ds
26447 6BC1           C3                           ret
26448                                           ! 3652 endasm
26449                                           !BCC_ENDASM
26450                                           ! 3653 static void biosfn_alternate_prtsc()
26451                                           ! Register BX used in function biosfn_get_font_info
26452                                           ! 3654 {
26453                       00006BC2            _biosfn_alternate_prtsc:
26454                                           ! 3655 }
26455 6BC2           C3                         ret
26456                                           ! 3656 #asm
26457                                           !BCC_ASM
26458                       00006BC3            biosfn_select_vert_res:
26459                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26460 6BC3           1E                           push ds
26461 6BC4           53                           push bx
26462 6BC5           52                           push dx
26463 6BC6           88C2                         mov dl, al
26464 6BC8           B8                   0040    mov ax, # 0x40
26465 6BCB           8ED8                         mov ds, ax
26466 6BCD           BB                   0089    mov bx, # 0x89
26467 6BD0           8A07                         mov al, [bx]
26468 6BD2           BB                   0088    mov bx, # 0x88
26469 6BD5           8A27                         mov ah, [bx]
26470 6BD7           80FA                   01    cmp dl, #0x01
26471 6BDA           74           15              je vert_res_350
26472 6BDC           72           1D              jb vert_res_200
26473 6BDE           80FA                   02    cmp dl, #0x02
26474 6BE1           74           02              je vert_res_400
26475 6BE3           EB           2A              jmp set_retcode
26476                       00006BE5            vert_res_400:
26477                                             ; reset modeset ctl bit 7 and set bit 4
26478                                             ; set switches bit 3-0 to 0x09
26479 6BE5           24                     7F    and al, #0x7f
26480 6BE7           0C                     10    or al, #0x10
26481 6BE9           80E4                   F0    and ah, #0xf0
26482 6BEC           80CC                   09    or ah, #0x09
26483 6BEF           75           14              jnz set_vert_res
26484                       00006BF1            vert_res_350:
26485                                             ; reset modeset ctl bit 7 and bit 4
26486                                             ; set switches bit 3-0 to 0x09
26487 6BF1           24                     6F    and al, #0x6f
26488 6BF3           80E4                   F0    and ah, #0xf0
26489 6BF6           80CC                   09    or ah, #0x09
26490 6BF9           75           0A              jnz set_vert_res
26491                       00006BFB            vert_res_200:
26492                                             ; set modeset ctl bit 7 and reset bit 4
26493                                             ; set switches bit 3-0 to 0x08
26494 6BFB           24                     EF    and al, #0xef
26495 6BFD           0C                     80    or al, #0x80
26496 6BFF           80E4                   F0    and ah, #0xf0
26497 6C02           80CC                   08    or ah, #0x08
26498                       00006C05            set_vert_res:
26499 6C05           BB                   0089    mov bx, # 0x89
26500 6C08           8807                         mov [bx], al
26501 6C0A           BB                   0088    mov bx, # 0x88
26502 6C0D           8827                         mov [bx], ah
26503                       00006C0F            set_retcode:
26504 6C0F           B8                   1212    mov ax, #0x1212
26505 6C12           5A                           pop dx
26506 6C13           5B                           pop bx
26507 6C14           1F                           pop ds
26508 6C15           C3                           ret
26509                       00006C16            biosfn_enable_default_palette_loading:
26510 6C16           1E                           push ds
26511 6C17           53                           push bx
26512 6C18           52                           push dx
26513 6C19           88C2                         mov dl, al
26514 6C1B           80E2                   01    and dl, #0x01
26515 6C1E           C0E2                   03    shl dl, 3
26516 6C21           B8                   0040    mov ax, # 0x40
26517 6C24           8ED8                         mov ds, ax
26518 6C26           BB                   0089    mov bx, # 0x89
26519 6C29           8A07                         mov al, [bx]
26520 6C2B           24                     F7    and al, #0xf7
26521 6C2D           08D0                         or al, dl
26522 6C2F           8807                         mov [bx], al
26523 6C31           B8                   1212    mov ax, #0x1212
26524 6C34           5A                           pop dx
26525 6C35           5B                           pop bx
26526 6C36           1F                           pop ds
26527 6C37           C3                           ret
26528                       00006C38            biosfn_enable_video_addressing:
26529 6C38           53                           push bx
26530 6C39           52                           push dx
26531 6C3A           88C3                         mov bl, al
26532 6C3C           80E3                   01    and bl, #0x01
26533 6C3F           80F3                   01    xor bl, #0x01
26534 6C42           D0E3                         shl bl, 1
26535 6C44           BA                   03CC    mov dx, # 0x3cc
26536 6C47           EC                           in al, dx
26537 6C48           24                     FD    and al, #0xfd
26538 6C4A           08D8                         or al, bl
26539 6C4C           BA                   03C2    mov dx, # 0x3c2
26540 6C4F           EE                           out dx, al
26541 6C50           B8                   1212    mov ax, #0x1212
26542 6C53           5A                           pop dx
26543 6C54           5B                           pop bx
26544 6C55           C3                           ret
26545                       00006C56            biosfn_enable_grayscale_summing:
26546 6C56           1E                           push ds
26547 6C57           53                           push bx
26548 6C58           52                           push dx
26549 6C59           88C2                         mov dl, al
26550 6C5B           80E2                   01    and dl, #0x01
26551 6C5E           80F2                   01    xor dl, #0x01
26552 6C61           D0E2                         shl dl, 1
26553 6C63           B8                   0040    mov ax, # 0x40
26554 6C66           8ED8                         mov ds, ax
26555 6C68           BB                   0089    mov bx, # 0x89
26556 6C6B           8A07                         mov al, [bx]
26557 6C6D           24                     FD    and al, #0xfd
26558 6C6F           08D0                         or al, dl
26559 6C71           8807                         mov [bx], al
26560 6C73           B8                   1212    mov ax, #0x1212
26561 6C76           5A                           pop dx
26562 6C77           5B                           pop bx
26563 6C78           1F                           pop ds
26564 6C79           C3                           ret
26565                       00006C7A            biosfn_enable_cursor_emulation:
26566 6C7A           1E                           push ds
26567 6C7B           53                           push bx
26568 6C7C           52                           push dx
26569 6C7D           88C2                         mov dl, al
26570 6C7F           80E2                   01    and dl, #0x01
26571 6C82           80F2                   01    xor dl, #0x01
26572 6C85           B8                   0040    mov ax, # 0x40
26573 6C88           8ED8                         mov ds, ax
26574 6C8A           BB                   0089    mov bx, # 0x89
26575 6C8D           8A07                         mov al, [bx]
26576 6C8F           24                     FE    and al, #0xfe
26577 6C91           08D0                         or al, dl
26578 6C93           8807                         mov [bx], al
26579 6C95           B8                   1212    mov ax, #0x1212
26580 6C98           5A                           pop dx
26581 6C99           5B                           pop bx
26582 6C9A           1F                           pop ds
26583 6C9B           C3                           ret
26584                                           ! 3783 endasm
26585                                           !BCC_ENDASM
26586                                           ! 3784 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26587                       00006C9C            _biosfn_switch_video_interface:
26588                                           !BCC_EOS
26589                                           !BCC_EOS
26590                                           !BCC_EOS
26591                                           ! 3785 {
26592                                           ! 3786 }
26593 6C9C           C3                         ret
26594                                           ! 3787 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26595                       00006C9D            _biosfn_enable_video_refresh_control:
26596                                           !BCC_EOS
26597                                           ! 3788 {
26598                                           ! 3789 }
26599 6C9D           C3                         ret
26600                                           ! 3790 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26601                                           ! 3791 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26602                       00006C9E            _biosfn_write_string:
26603                                           !BCC_EOS
26604                                           !BCC_EOS
26605                                           !BCC_EOS
26606                                           !BCC_EOS
26607                                           !BCC_EOS
26608                                           !BCC_EOS
26609                                           !BCC_EOS
26610                                           !BCC_EOS
26611                                           ! 3792 {
26612                                           ! 3793  Bit16u newcurs,oldcurs,dummy;
26613                                           !BCC_EOS
26614                                           ! 3794  Bit8u car,carattr;
26615                                           !BCC_EOS
26616                                           ! 3795  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26617 6C9E           55                         push	bp
26618 6C9F           89E5                       mov	bp,sp
26619 6CA1           83C4                   F8  add	sp,*-8
26620                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26621 6CA4           8D5E         FC            lea	bx,-4[bp]
26622 6CA7           53                         push	bx
26623                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26624 6CA8           8D5E         FA            lea	bx,-6[bp]
26625 6CAB           53                         push	bx
26626                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26627 6CAC           8A46         06            mov	al,6[bp]
26628 6CAF           30E4                       xor	ah,ah
26629 6CB1           50                         push	ax
26630                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26631 6CB2           E8         D78D            call	_biosfn_get_cursor_pos
26632 6CB5           83C4                   06  add	sp,*6
26633                                           !BCC_EOS
26634                                           ! 3796  if(row==0xff)
26635                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26636 6CB8           8A46         0C            mov	al,$C[bp]
26637 6CBB           3C                     FF  cmp	al,#$FF
26638 6CBD           75           12            jne 	.23B
26639                       00006CBF            .23C:
26640                                           ! 3797   {col=oldcurs&0x00ff;
26641                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26642 6CBF           8A46         FC            mov	al,-4[bp]
26643                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26644 6CC2           8846         0E            mov	$E[bp],al
26645                                           !BCC_EOS
26646                                           ! 3798    row=(oldcurs&0xff00)>>8;
26647                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26648 6CC5           8B46         FC            mov	ax,-4[bp]
26649 6CC8           30C0                       xor	al,al
26650                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26651 6CCA           88E0                       mov	al,ah
26652 6CCC           30E4                       xor	ah,ah
26653                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26654 6CCE           8846         0C            mov	$C[bp],al
26655                                           !BCC_EOS
26656                                           ! 3799   }
26657                                           ! 3800  newcurs=row; newcurs<<=8; newcurs+=col;
26658                       00006CD1            .23B:
26659                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26660 6CD1           8A46         0C            mov	al,$C[bp]
26661 6CD4           30E4                       xor	ah,ah
26662 6CD6           8946         FE            mov	-2[bp],ax
26663                                           !BCC_EOS
26664                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26665 6CD9           8B46         FE            mov	ax,-2[bp]
26666 6CDC           88C4                       mov	ah,al
26667 6CDE           30C0                       xor	al,al
26668 6CE0           8946         FE            mov	-2[bp],ax
26669                                           !BCC_EOS
26670                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26671 6CE3           8B46         FE            mov	ax,-2[bp]
26672 6CE6           0246         0E            add	al,$E[bp]
26673 6CE9           80D4                   00  adc	ah,*0
26674 6CEC           8946         FE            mov	-2[bp],ax
26675                                           !BCC_EOS
26676                                           ! 3801  biosfn_set_cursor_pos(page,newcurs);
26677                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26678 6CEF           FF76         FE            push	-2[bp]
26679                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26680 6CF2           8A46         06            mov	al,6[bp]
26681 6CF5           30E4                       xor	ah,ah
26682 6CF7           50                         push	ax
26683                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26684 6CF8           E8         D647            call	_biosfn_set_cursor_pos
26685 6CFB           83C4                   04  add	sp,*4
26686                                           !BCC_EOS
26687                                           ! 3802  while(count--!=0)
26688                                           ! 3803   {
26689 6CFE           EB           4F            jmp .23E
26690                       00006D00            .23F:
26691                                           ! 3804    car=read_byte(seg,offset++);
26692                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26693 6D00           8B46         12            mov	ax,$12[bp]
26694 6D03           40                         inc	ax
26695 6D04           8946         12            mov	$12[bp],ax
26696                                           ! Debug: list unsigned short = ax-1 (used reg = )
26697 6D07           48                         dec	ax
26698 6D08           50                         push	ax
26699                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26700 6D09           FF76         10            push	$10[bp]
26701                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26702 6D0C           E8         0ED2            call	_read_byte
26703 6D0F           83C4                   04  add	sp,*4
26704                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26705 6D12           8846         F9            mov	-7[bp],al
26706                                           !BCC_EOS
26707                                           ! 3805    if((flag&0x02)!=0)
26708                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26709 6D15           8A46         04            mov	al,4[bp]
26710 6D18           24                     02  and	al,*2
26711                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26712 6D1A           84C0                       test	al,al
26713 6D1C           74           15            je  	.240
26714                       00006D1E            .241:
26715                                           ! 3806     attr=read_byte(seg,offset++);
26716                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26717 6D1E           8B46         12            mov	ax,$12[bp]
26718 6D21           40                         inc	ax
26719 6D22           8946         12            mov	$12[bp],ax
26720                                           ! Debug: list unsigned short = ax-1 (used reg = )
26721 6D25           48                         dec	ax
26722 6D26           50                         push	ax
26723                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26724 6D27           FF76         10            push	$10[bp]
26725                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26726 6D2A           E8         0EB4            call	_read_byte
26727 6D2D           83C4                   04  add	sp,*4
26728                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26729 6D30           8846         08            mov	8[bp],al
26730                                           !BCC_EOS
26731                                           ! 3807    biosfn_write_teletype(car,page,attr,3);
26732                       00006D33            .240:
26733                                           ! Debug: list int = const 3 (used reg = )
26734 6D33           B8                   0003  mov	ax,*3
26735 6D36           50                         push	ax
26736                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26737 6D37           8A46         08            mov	al,8[bp]
26738 6D3A           30E4                       xor	ah,ah
26739 6D3C           50                         push	ax
26740                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26741 6D3D           8A46         06            mov	al,6[bp]
26742 6D40           30E4                       xor	ah,ah
26743 6D42           50                         push	ax
26744                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26745 6D43           8A46         F9            mov	al,-7[bp]
26746 6D46           30E4                       xor	ah,ah
26747 6D48           50                         push	ax
26748                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26749 6D49           E8         F13B            call	_biosfn_write_teletype
26750 6D4C           83C4                   08  add	sp,*8
26751                                           !BCC_EOS
26752                                           ! 3808   }
26753                                           ! 3809  if((flag&0x01)==0)
26754                       00006D4F            .23E:
26755                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26756 6D4F           8B46         0A            mov	ax,$A[bp]
26757 6D52           48                         dec	ax
26758 6D53           8946         0A            mov	$A[bp],ax
26759                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26760 6D56           3D                   FFFF  cmp	ax,*-1
26761 6D59           75           A5            jne	.23F
26762                       00006D5B            .242:
26763                       00006D5B            .23D:
26764                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26765 6D5B           8A46         04            mov	al,4[bp]
26766 6D5E           24                     01  and	al,*1
26767                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26768 6D60           84C0                       test	al,al
26769 6D62           75           0F            jne 	.243
26770                       00006D64            .244:
26771                                           ! 3810   biosfn_set_cursor_pos(page,oldcurs);
26772                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26773 6D64           FF76         FC            push	-4[bp]
26774                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26775 6D67           8A46         06            mov	al,6[bp]
26776 6D6A           30E4                       xor	ah,ah
26777 6D6C           50                         push	ax
26778                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26779 6D6D           E8         D5D2            call	_biosfn_set_cursor_pos
26780 6D70           83C4                   04  add	sp,*4
26781                                           !BCC_EOS
26782                                           ! 3811 }
26783                       00006D73            .243:
26784 6D73           89EC                       mov	sp,bp
26785 6D75           5D                         pop	bp
26786 6D76           C3                         ret
26787                                           ! 3812 #asm
26788                                           !BCC_ASM
26789                       00000008            _biosfn_write_string.count	set	8
26790                       0000000E            _biosfn_write_string.seg	set	$E
26791                       0000000C            _biosfn_write_string.col	set	$C
26792                       00000002            _biosfn_write_string.flag	set	2
26793                       00000006            _biosfn_write_string.attr	set	6
26794                       00000004            _biosfn_write_string.page	set	4
26795                       0000000A            _biosfn_write_string.row	set	$A
26796                       00000010            _biosfn_write_string.offset	set	$10
26797                       00006D77            biosfn_group_1A:
26798 6D77           3C                     00    cmp al, #0x00
26799 6D79           74           05              je biosfn_read_display_code
26800 6D7B           3C                     01    cmp al, #0x01
26801 6D7D           74           16              je biosfn_set_display_code
26802 6D7F           C3                           ret
26803                       00006D80            biosfn_read_display_code:
26804 6D80           1E                           push ds
26805 6D81           50                           push ax
26806 6D82           B8                   0040    mov ax, # 0x40
26807 6D85           8ED8                         mov ds, ax
26808 6D87           BB                   008A    mov bx, # 0x8A
26809 6D8A           8A07                         mov al, [bx]
26810 6D8C           88C3                         mov bl, al
26811 6D8E           30FF                         xor bh, bh
26812 6D90           58                           pop ax
26813 6D91           88E0                         mov al, ah
26814 6D93           1F                           pop ds
26815 6D94           C3                           ret
26816                       00006D95            biosfn_set_display_code:
26817 6D95           1E                           push ds
26818 6D96           50                           push ax
26819 6D97           53                           push bx
26820 6D98           B8                   0040    mov ax, # 0x40
26821 6D9B           8ED8                         mov ds, ax
26822 6D9D           89D8                         mov ax, bx
26823 6D9F           BB                   008A    mov bx, # 0x8A
26824 6DA2           8807                         mov [bx], al
26825 6DA4           5B                           pop bx
26826 6DA5           58                           pop ax
26827 6DA6           88E0                         mov al, ah
26828 6DA8           1F                           pop ds
26829 6DA9           C3                           ret
26830                                           ! 3846 endasm
26831                                           !BCC_ENDASM
26832                                           ! 3847 static void biosfn_read_state_info (BX,ES,DI)
26833                                           ! Register BX used in function biosfn_write_string
26834                                           ! 3848 Bit16u BX;Bit16u ES;Bit16u DI;
26835                       00006DAA            _biosfn_read_state_info:
26836                                           !BCC_EOS
26837                                           !BCC_EOS
26838                                           !BCC_EOS
26839                                           ! 3849 {
26840                                           ! 3850  write_word(ES,DI+0x00,&static_functionality);
26841 6DAA           55                         push	bp
26842 6DAB           89E5                       mov	bp,sp
26843                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26844 6DAD           BB                   0F4A  mov	bx,#_static_functionality
26845 6DB0           53                         push	bx
26846                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26847 6DB1           8B46         08            mov	ax,8[bp]
26848                                           ! Debug: list unsigned int = ax+0 (used reg = )
26849 6DB4           50                         push	ax
26850                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26851 6DB5           FF76         06            push	6[bp]
26852                                           ! Debug: func () void = write_word+0 (used reg = )
26853 6DB8           E8         0E64            call	_write_word
26854 6DBB           89EC                       mov	sp,bp
26855                                           !BCC_EOS
26856                                           ! 3851  write_word(ES,DI+0x02,0xC000);
26857                                           ! Debug: list unsigned int = const $C000 (used reg = )
26858 6DBD           B8                   C000  mov	ax,#$C000
26859 6DC0           50                         push	ax
26860                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26861 6DC1           8B46         08            mov	ax,8[bp]
26862                                           ! Debug: list unsigned int = ax+2 (used reg = )
26863 6DC4           40                         inc	ax
26864 6DC5           40                         inc	ax
26865 6DC6           50                         push	ax
26866                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26867 6DC7           FF76         06            push	6[bp]
26868                                           ! Debug: func () void = write_word+0 (used reg = )
26869 6DCA           E8         0E52            call	_write_word
26870 6DCD           89EC                       mov	sp,bp
26871                                           !BCC_EOS
26872                                           ! 3852  memcpyb(ES,DI+0x04,0x40,0x49,30);
26873                                           ! Debug: list int = const $1E (used reg = )
26874 6DCF           B8                   001E  mov	ax,*$1E
26875 6DD2           50                         push	ax
26876                                           ! Debug: list int = const $49 (used reg = )
26877 6DD3           B8                   0049  mov	ax,*$49
26878 6DD6           50                         push	ax
26879                                           ! Debug: list int = const $40 (used reg = )
26880 6DD7           B8                   0040  mov	ax,*$40
26881 6DDA           50                         push	ax
26882                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26883 6DDB           8B46         08            mov	ax,8[bp]
26884                                           ! Debug: list unsigned int = ax+4 (used reg = )
26885 6DDE           05                   0004  add	ax,*4
26886 6DE1           50                         push	ax
26887                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26888 6DE2           FF76         06            push	6[bp]
26889                                           ! Debug: func () void = memcpyb+0 (used reg = )
26890 6DE5           E8         0D99            call	_memcpyb
26891 6DE8           89EC                       mov	sp,bp
26892                                           !BCC_EOS
26893                                           ! 3853  memcpyb(ES,DI+0x22,0x40,0x84,3);
26894                                           ! Debug: list int = const 3 (used reg = )
26895 6DEA           B8                   0003  mov	ax,*3
26896 6DED           50                         push	ax
26897                                           ! Debug: list int = const $84 (used reg = )
26898 6DEE           B8                   0084  mov	ax,#$84
26899 6DF1           50                         push	ax
26900                                           ! Debug: list int = const $40 (used reg = )
26901 6DF2           B8                   0040  mov	ax,*$40
26902 6DF5           50                         push	ax
26903                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26904 6DF6           8B46         08            mov	ax,8[bp]
26905                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26906 6DF9           05                   0022  add	ax,*$22
26907 6DFC           50                         push	ax
26908                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26909 6DFD           FF76         06            push	6[bp]
26910                                           ! Debug: func () void = memcpyb+0 (used reg = )
26911 6E00           E8         0D7E            call	_memcpyb
26912 6E03           89EC                       mov	sp,bp
26913                                           !BCC_EOS
26914                                           ! 3854  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26915                                           ! Debug: list int = const $8A (used reg = )
26916 6E05           B8                   008A  mov	ax,#$8A
26917 6E08           50                         push	ax
26918                                           ! Debug: list int = const $40 (used reg = )
26919 6E09           B8                   0040  mov	ax,*$40
26920 6E0C           50                         push	ax
26921                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26922 6E0D           E8         0DD1            call	_read_byte
26923 6E10           89EC                       mov	sp,bp
26924                                           ! Debug: list unsigned char = al+0 (used reg = )
26925 6E12           30E4                       xor	ah,ah
26926 6E14           50                         push	ax
26927                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26928 6E15           8B46         08            mov	ax,8[bp]
26929                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26930 6E18           05                   0025  add	ax,*$25
26931 6E1B           50                         push	ax
26932                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26933 6E1C           FF76         06            push	6[bp]
26934                                           ! Debug: func () void = write_byte+0 (used reg = )
26935 6E1F           E8         0DE5            call	_write_byte
26936 6E22           89EC                       mov	sp,bp
26937                                           !BCC_EOS
26938                                           ! 3855  write_byte(ES,DI+0x26,0);
26939                                           ! Debug: list int = const 0 (used reg = )
26940 6E24           31C0                       xor	ax,ax
26941 6E26           50                         push	ax
26942                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26943 6E27           8B46         08            mov	ax,8[bp]
26944                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26945 6E2A           05                   0026  add	ax,*$26
26946 6E2D           50                         push	ax
26947                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26948 6E2E           FF76         06            push	6[bp]
26949                                           ! Debug: func () void = write_byte+0 (used reg = )
26950 6E31           E8         0DD3            call	_write_byte
26951 6E34           89EC                       mov	sp,bp
26952                                           !BCC_EOS
26953                                           ! 3856  write_byte(ES,DI+0x27,16);
26954                                           ! Debug: list int = const $10 (used reg = )
26955 6E36           B8                   0010  mov	ax,*$10
26956 6E39           50                         push	ax
26957                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26958 6E3A           8B46         08            mov	ax,8[bp]
26959                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26960 6E3D           05                   0027  add	ax,*$27
26961 6E40           50                         push	ax
26962                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26963 6E41           FF76         06            push	6[bp]
26964                                           ! Debug: func () void = write_byte+0 (used reg = )
26965 6E44           E8         0DC0            call	_write_byte
26966 6E47           89EC                       mov	sp,bp
26967                                           !BCC_EOS
26968                                           ! 3857  write_byte(ES,DI+0x28,0);
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6E49           31C0                       xor	ax,ax
26971 6E4B           50                         push	ax
26972                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26973 6E4C           8B46         08            mov	ax,8[bp]
26974                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26975 6E4F           05                   0028  add	ax,*$28
26976 6E52           50                         push	ax
26977                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26978 6E53           FF76         06            push	6[bp]
26979                                           ! Debug: func () void = write_byte+0 (used reg = )
26980 6E56           E8         0DAE            call	_write_byte
26981 6E59           89EC                       mov	sp,bp
26982                                           !BCC_EOS
26983                                           ! 3858  write_byte(ES,DI+0x29,8);
26984                                           ! Debug: list int = const 8 (used reg = )
26985 6E5B           B8                   0008  mov	ax,*8
26986 6E5E           50                         push	ax
26987                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26988 6E5F           8B46         08            mov	ax,8[bp]
26989                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26990 6E62           05                   0029  add	ax,*$29
26991 6E65           50                         push	ax
26992                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26993 6E66           FF76         06            push	6[bp]
26994                                           ! Debug: func () void = write_byte+0 (used reg = )
26995 6E69           E8         0D9B            call	_write_byte
26996 6E6C           89EC                       mov	sp,bp
26997                                           !BCC_EOS
26998                                           ! 3859  write_byte(ES,DI+0x2a,2);
26999                                           ! Debug: list int = const 2 (used reg = )
27000 6E6E           B8                   0002  mov	ax,*2
27001 6E71           50                         push	ax
27002                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27003 6E72           8B46         08            mov	ax,8[bp]
27004                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27005 6E75           05                   002A  add	ax,*$2A
27006 6E78           50                         push	ax
27007                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27008 6E79           FF76         06            push	6[bp]
27009                                           ! Debug: func () void = write_byte+0 (used reg = )
27010 6E7C           E8         0D88            call	_write_byte
27011 6E7F           89EC                       mov	sp,bp
27012                                           !BCC_EOS
27013                                           ! 3860  write_byte(ES,DI+0x2b,0);
27014                                           ! Debug: list int = const 0 (used reg = )
27015 6E81           31C0                       xor	ax,ax
27016 6E83           50                         push	ax
27017                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27018 6E84           8B46         08            mov	ax,8[bp]
27019                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27020 6E87           05                   002B  add	ax,*$2B
27021 6E8A           50                         push	ax
27022                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27023 6E8B           FF76         06            push	6[bp]
27024                                           ! Debug: func () void = write_byte+0 (used reg = )
27025 6E8E           E8         0D76            call	_write_byte
27026 6E91           89EC                       mov	sp,bp
27027                                           !BCC_EOS
27028                                           ! 3861  write_byte(ES,DI+0x2c,0);
27029                                           ! Debug: list int = const 0 (used reg = )
27030 6E93           31C0                       xor	ax,ax
27031 6E95           50                         push	ax
27032                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27033 6E96           8B46         08            mov	ax,8[bp]
27034                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27035 6E99           05                   002C  add	ax,*$2C
27036 6E9C           50                         push	ax
27037                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27038 6E9D           FF76         06            push	6[bp]
27039                                           ! Debug: func () void = write_byte+0 (used reg = )
27040 6EA0           E8         0D64            call	_write_byte
27041 6EA3           89EC                       mov	sp,bp
27042                                           !BCC_EOS
27043                                           ! 3862  write_byte(ES,DI+0x31,3);
27044                                           ! Debug: list int = const 3 (used reg = )
27045 6EA5           B8                   0003  mov	ax,*3
27046 6EA8           50                         push	ax
27047                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27048 6EA9           8B46         08            mov	ax,8[bp]
27049                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27050 6EAC           05                   0031  add	ax,*$31
27051 6EAF           50                         push	ax
27052                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27053 6EB0           FF76         06            push	6[bp]
27054                                           ! Debug: func () void = write_byte+0 (used reg = )
27055 6EB3           E8         0D51            call	_write_byte
27056 6EB6           89EC                       mov	sp,bp
27057                                           !BCC_EOS
27058                                           ! 3863  write_byte(ES,DI+0x32,0);
27059                                           ! Debug: list int = const 0 (used reg = )
27060 6EB8           31C0                       xor	ax,ax
27061 6EBA           50                         push	ax
27062                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27063 6EBB           8B46         08            mov	ax,8[bp]
27064                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27065 6EBE           05                   0032  add	ax,*$32
27066 6EC1           50                         push	ax
27067                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27068 6EC2           FF76         06            push	6[bp]
27069                                           ! Debug: func () void = write_byte+0 (used reg = )
27070 6EC5           E8         0D3F            call	_write_byte
27071 6EC8           89EC                       mov	sp,bp
27072                                           !BCC_EOS
27073                                           ! 3864  memsetb(ES,DI+0x33,0,13);
27074                                           ! Debug: list int = const $D (used reg = )
27075 6ECA           B8                   000D  mov	ax,*$D
27076 6ECD           50                         push	ax
27077                                           ! Debug: list int = const 0 (used reg = )
27078 6ECE           31C0                       xor	ax,ax
27079 6ED0           50                         push	ax
27080                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27081 6ED1           8B46         08            mov	ax,8[bp]
27082                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27083 6ED4           05                   0033  add	ax,*$33
27084 6ED7           50                         push	ax
27085                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27086 6ED8           FF76         06            push	6[bp]
27087                                           ! Debug: func () void = memsetb+0 (used reg = )
27088 6EDB           E8         0C59            call	_memsetb
27089 6EDE           89EC                       mov	sp,bp
27090                                           !BCC_EOS
27091                                           ! 3865 }
27092 6EE0           5D                         pop	bp
27093 6EE1           C3                         ret
27094                                           ! 3866 static Bit16u biosfn_read_video_state_size2 (CX)
27095                                           ! Register BX used in function biosfn_read_state_info
27096                                           ! 3867      Bit16u CX;
27097                       00006EE2            _biosfn_read_video_state_size2:
27098                                           !BCC_EOS
27099                                           ! 3868 {
27100                                           ! 3869     Bit16u size;
27101                                           !BCC_EOS
27102                                           ! 3870     size = 0;
27103 6EE2           55                         push	bp
27104 6EE3           89E5                       mov	bp,sp
27105 6EE5           4C                         dec	sp
27106 6EE6           4C                         dec	sp
27107                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27108 6EE7           31C0                       xor	ax,ax
27109 6EE9           8946         FE            mov	-2[bp],ax
27110                                           !BCC_EOS
27111                                           ! 3871     if (CX & 1) {
27112                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27113 6EEC           8A46         04            mov	al,4[bp]
27114 6EEF           24                     01  and	al,*1
27115 6EF1           84C0                       test	al,al
27116 6EF3           74           09            je  	.245
27117                       00006EF5            .246:
27118                                           ! 3872         size += 0x46;
27119                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27120 6EF5           8B46         FE            mov	ax,-2[bp]
27121 6EF8           05                   0046  add	ax,*$46
27122 6EFB           8946         FE            mov	-2[bp],ax
27123                                           !BCC_EOS
27124                                           ! 3873     }
27125                                           ! 3874     if (CX & 2) {
27126                       00006EFE            .245:
27127                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27128 6EFE           8A46         04            mov	al,4[bp]
27129 6F01           24                     02  and	al,*2
27130 6F03           84C0                       test	al,al
27131 6F05           74           09            je  	.247
27132                       00006F07            .248:
27133                                           ! 3875         size += (5 + 8 + 5) * 2 + 6;
27134                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27135 6F07           8B46         FE            mov	ax,-2[bp]
27136 6F0A           05                   002A  add	ax,*$2A
27137 6F0D           8946         FE            mov	-2[bp],ax
27138                                           !BCC_EOS
27139                                           ! 3876     }
27140                                           ! 3877     if (CX & 4) {
27141                       00006F10            .247:
27142                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27143 6F10           8A46         04            mov	al,4[bp]
27144 6F13           24                     04  and	al,*4
27145 6F15           84C0                       test	al,al
27146 6F17           74           09            je  	.249
27147                       00006F19            .24A:
27148                                           ! 3878         size += 3 + 256 * 3 + 1;
27149                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27150 6F19           8B46         FE            mov	ax,-2[bp]
27151 6F1C           05                   0304  add	ax,#$304
27152 6F1F           8946         FE            mov	-2[bp],ax
27153                                           !BCC_EOS
27154                                           ! 3879 }
27155                                           ! 3880     return size;
27156                       00006F22            .249:
27157 6F22           8B46         FE            mov	ax,-2[bp]
27158 6F25           89EC                       mov	sp,bp
27159 6F27           5D                         pop	bp
27160 6F28           C3                         ret
27161                                           !BCC_EOS
27162                                           ! 3881 }
27163                                           ! 3882 static void biosfn_read_video_state_size (CX, BX)
27164                                           ! 3883      Bit16u CX; Bit16u *BX;
27165                       00006F29            _biosfn_read_video_state_size:
27166                                           !BCC_EOS
27167                                           !BCC_EOS
27168                                           ! 3884 {
27169                                           ! 3885     Bit16u ss=get_SS();
27170 6F29           55                         push	bp
27171 6F2A           89E5                       mov	bp,sp
27172 6F2C           4C                         dec	sp
27173 6F2D           4C                         dec	sp
27174                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27175 6F2E           E8         0D3C            call	_get_SS
27176                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27177 6F31           8946         FE            mov	-2[bp],ax
27178                                           !BCC_EOS
27179                                           ! 3886     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27180                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27181 6F34           FF76         04            push	4[bp]
27182                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27183 6F37           E8         FFA8            call	_biosfn_read_video_state_size2
27184 6F3A           44                         inc	sp
27185 6F3B           44                         inc	sp
27186                                           ! Debug: list unsigned short = ax+0 (used reg = )
27187 6F3C           50                         push	ax
27188                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27189 6F3D           FF76         06            push	6[bp]
27190                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27191 6F40           FF76         FE            push	-2[bp]
27192                                           ! Debug: func () void = write_word+0 (used reg = )
27193 6F43           E8         0CD9            call	_write_word
27194 6F46           83C4                   06  add	sp,*6
27195                                           !BCC_EOS
27196                                           ! 3887 }
27197 6F49           89EC                       mov	sp,bp
27198 6F4B           5D                         pop	bp
27199 6F4C           C3                         ret
27200                                           ! 3888 static Bit16u biosfn_save_video_state (CX,ES,BX)
27201                                           ! 3889      Bit16u CX;Bit16u ES;Bit16u BX;
27202                       00006F4D            _biosfn_save_video_state:
27203                                           !BCC_EOS
27204                                           !BCC_EOS
27205                                           !BCC_EOS
27206                                           ! 3890 {
27207                                           ! 3891     Bit16u i, v, crtc_addr, ar_index;
27208                                           !BCC_EOS
27209                                           ! 3892     crtc_addr = read_word(0x40, 0x63);
27210 6F4D           55                         push	bp
27211 6F4E           89E5                       mov	bp,sp
27212 6F50           83C4                   F8  add	sp,*-8
27213                                           ! Debug: list int = const $63 (used reg = )
27214 6F53           B8                   0063  mov	ax,*$63
27215 6F56           50                         push	ax
27216                                           ! Debug: list int = const $40 (used reg = )
27217 6F57           B8                   0040  mov	ax,*$40
27218 6F5A           50                         push	ax
27219                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27220 6F5B           E8         0C96            call	_read_word
27221 6F5E           83C4                   04  add	sp,*4
27222                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27223 6F61           8946         FA            mov	-6[bp],ax
27224                                           !BCC_EOS
27225                                           ! 3893     if (CX & 1) {
27226                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27227 6F64           8A46         04            mov	al,4[bp]
27228 6F67           24                     01  and	al,*1
27229 6F69           84C0                       test	al,al
27230 6F6B         0F84         0266            beq 	.24B
27231                       00006F6F            .24C:
27232                                           ! 3894         write_byte(ES, BX, inb(0x3c4)); BX++;
27233                                           ! Debug: list int = const $3C4 (used reg = )
27234 6F6F           B8                   03C4  mov	ax,#$3C4
27235 6F72           50                         push	ax
27236                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27237 6F73           E8         0CC1            call	_inb
27238 6F76           44                         inc	sp
27239 6F77           44                         inc	sp
27240                                           ! Debug: list unsigned char = al+0 (used reg = )
27241 6F78           30E4                       xor	ah,ah
27242 6F7A           50                         push	ax
27243                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27244 6F7B           FF76         08            push	8[bp]
27245                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27246 6F7E           FF76         06            push	6[bp]
27247                                           ! Debug: func () void = write_byte+0 (used reg = )
27248 6F81           E8         0C83            call	_write_byte
27249 6F84           83C4                   06  add	sp,*6
27250                                           !BCC_EOS
27251                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27252 6F87           8B46         08            mov	ax,8[bp]
27253 6F8A           40                         inc	ax
27254 6F8B           8946         08            mov	8[bp],ax
27255                                           !BCC_EOS
27256                                           ! 3895         write_byte(ES, BX, inb(crtc_addr)); BX++;
27257                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27258 6F8E           FF76         FA            push	-6[bp]
27259                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27260 6F91           E8         0CA3            call	_inb
27261 6F94           44                         inc	sp
27262 6F95           44                         inc	sp
27263                                           ! Debug: list unsigned char = al+0 (used reg = )
27264 6F96           30E4                       xor	ah,ah
27265 6F98           50                         push	ax
27266                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27267 6F99           FF76         08            push	8[bp]
27268                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27269 6F9C           FF76         06            push	6[bp]
27270                                           ! Debug: func () void = write_byte+0 (used reg = )
27271 6F9F           E8         0C65            call	_write_byte
27272 6FA2           83C4                   06  add	sp,*6
27273                                           !BCC_EOS
27274                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27275 6FA5           8B46         08            mov	ax,8[bp]
27276 6FA8           40                         inc	ax
27277 6FA9           8946         08            mov	8[bp],ax
27278                                           !BCC_EOS
27279                                           ! 3896         write_byte(ES, BX, inb(0x3ce)); BX++;
27280                                           ! Debug: list int = const $3CE (used reg = )
27281 6FAC           B8                   03CE  mov	ax,#$3CE
27282 6FAF           50                         push	ax
27283                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27284 6FB0           E8         0C84            call	_inb
27285 6FB3           44                         inc	sp
27286 6FB4           44                         inc	sp
27287                                           ! Debug: list unsigned char = al+0 (used reg = )
27288 6FB5           30E4                       xor	ah,ah
27289 6FB7           50                         push	ax
27290                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27291 6FB8           FF76         08            push	8[bp]
27292                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27293 6FBB           FF76         06            push	6[bp]
27294                                           ! Debug: func () void = write_byte+0 (used reg = )
27295 6FBE           E8         0C46            call	_write_byte
27296 6FC1           83C4                   06  add	sp,*6
27297                                           !BCC_EOS
27298                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27299 6FC4           8B46         08            mov	ax,8[bp]
27300 6FC7           40                         inc	ax
27301 6FC8           8946         08            mov	8[bp],ax
27302                                           !BCC_EOS
27303                                           ! 3897         inb(0x3da);
27304                                           ! Debug: list int = const $3DA (used reg = )
27305 6FCB           B8                   03DA  mov	ax,#$3DA
27306 6FCE           50                         push	ax
27307                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27308 6FCF           E8         0C65            call	_inb
27309 6FD2           44                         inc	sp
27310 6FD3           44                         inc	sp
27311                                           !BCC_EOS
27312                                           ! 3898         ar_index = inb(0x3c0);
27313                                           ! Debug: list int = const $3C0 (used reg = )
27314 6FD4           B8                   03C0  mov	ax,#$3C0
27315 6FD7           50                         push	ax
27316                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27317 6FD8           E8         0C5C            call	_inb
27318 6FDB           44                         inc	sp
27319 6FDC           44                         inc	sp
27320                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27321 6FDD           30E4                       xor	ah,ah
27322 6FDF           8946         F8            mov	-8[bp],ax
27323                                           !BCC_EOS
27324                                           ! 3899         write_byte(ES, BX, ar_index); BX++;
27325                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27326 6FE2           FF76         F8            push	-8[bp]
27327                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27328 6FE5           FF76         08            push	8[bp]
27329                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27330 6FE8           FF76         06            push	6[bp]
27331                                           ! Debug: func () void = write_byte+0 (used reg = )
27332 6FEB           E8         0C19            call	_write_byte
27333 6FEE           83C4                   06  add	sp,*6
27334                                           !BCC_EOS
27335                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27336 6FF1           8B46         08            mov	ax,8[bp]
27337 6FF4           40                         inc	ax
27338 6FF5           8946         08            mov	8[bp],ax
27339                                           !BCC_EOS
27340                                           ! 3900         write_byte(ES, BX, inb(0x3ca)); BX++;
27341                                           ! Debug: list int = const $3CA (used reg = )
27342 6FF8           B8                   03CA  mov	ax,#$3CA
27343 6FFB           50                         push	ax
27344                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27345 6FFC           E8         0C38            call	_inb
27346 6FFF           44                         inc	sp
27347 7000           44                         inc	sp
27348                                           ! Debug: list unsigned char = al+0 (used reg = )
27349 7001           30E4                       xor	ah,ah
27350 7003           50                         push	ax
27351                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27352 7004           FF76         08            push	8[bp]
27353                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27354 7007           FF76         06            push	6[bp]
27355                                           ! Debug: func () void = write_byte+0 (used reg = )
27356 700A           E8         0BFA            call	_write_byte
27357 700D           83C4                   06  add	sp,*6
27358                                           !BCC_EOS
27359                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27360 7010           8B46         08            mov	ax,8[bp]
27361 7013           40                         inc	ax
27362 7014           8946         08            mov	8[bp],ax
27363                                           !BCC_EOS
27364                                           ! 3901         for(i=1;i<=4;i++){
27365                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27366 7017           B8                   0001  mov	ax,*1
27367 701A           8946         FE            mov	-2[bp],ax
27368                                           !BCC_EOS
27369                                           !BCC_EOS
27370 701D           EB           33            jmp .24F
27371                       0000701F            .250:
27372                                           ! 3902             outb(0x3c4, i);
27373                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27374 701F           FF76         FE            push	-2[bp]
27375                                           ! Debug: list int = const $3C4 (used reg = )
27376 7022           B8                   03C4  mov	ax,#$3C4
27377 7025           50                         push	ax
27378                                           ! Debug: func () void = outb+0 (used reg = )
27379 7026           E8         0C24            call	_outb
27380 7029           83C4                   04  add	sp,*4
27381                                           !BCC_EOS
27382                                           ! 3903             write_byte(ES, BX, inb(0x3c5)); BX++;
27383                                           ! Debug: list int = const $3C5 (used reg = )
27384 702C           B8                   03C5  mov	ax,#$3C5
27385 702F           50                         push	ax
27386                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27387 7030           E8         0C04            call	_inb
27388 7033           44                         inc	sp
27389 7034           44                         inc	sp
27390                                           ! Debug: list unsigned char = al+0 (used reg = )
27391 7035           30E4                       xor	ah,ah
27392 7037           50                         push	ax
27393                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27394 7038           FF76         08            push	8[bp]
27395                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27396 703B           FF76         06            push	6[bp]
27397                                           ! Debug: func () void = write_byte+0 (used reg = )
27398 703E           E8         0BC6            call	_write_byte
27399 7041           83C4                   06  add	sp,*6
27400                                           !BCC_EOS
27401                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27402 7044           8B46         08            mov	ax,8[bp]
27403 7047           40                         inc	ax
27404 7048           8946         08            mov	8[bp],ax
27405                                           !BCC_EOS
27406                                           ! 3904         }
27407                                           ! 3905         outb(0x3c4, 0);
27408                       0000704B            .24E:
27409                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27410 704B           8B46         FE            mov	ax,-2[bp]
27411 704E           40                         inc	ax
27412 704F           8946         FE            mov	-2[bp],ax
27413                       00007052            .24F:
27414                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27415 7052           8B46         FE            mov	ax,-2[bp]
27416 7055           3D                   0004  cmp	ax,*4
27417 7058           76           C5            jbe	.250
27418                       0000705A            .251:
27419                       0000705A            .24D:
27420                                           ! Debug: list int = const 0 (used reg = )
27421 705A           31C0                       xor	ax,ax
27422 705C           50                         push	ax
27423                                           ! Debug: list int = const $3C4 (used reg = )
27424 705D           B8                   03C4  mov	ax,#$3C4
27425 7060           50                         push	ax
27426                                           ! Debug: func () void = outb+0 (used reg = )
27427 7061           E8         0BE9            call	_outb
27428 7064           83C4                   04  add	sp,*4
27429                                           !BCC_EOS
27430                                           ! 3906         write_byte(ES, BX, inb(0x3c5)); BX
27431                                           ! Debug: list int = const $3C5 (used reg = )
27432 7067           B8                   03C5  mov	ax,#$3C5
27433 706A           50                         push	ax
27434                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27435 706B           E8         0BC9            call	_inb
27436 706E           44                         inc	sp
27437 706F           44                         inc	sp
27438                                           ! Debug: list unsigned char = al+0 (used reg = )
27439 7070           30E4                       xor	ah,ah
27440 7072           50                         push	ax
27441                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27442 7073           FF76         08            push	8[bp]
27443                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27444 7076           FF76         06            push	6[bp]
27445                                           ! Debug: func () void = write_byte+0 (used reg = )
27446 7079           E8         0B8B            call	_write_byte
27447 707C           83C4                   06  add	sp,*6
27448                                           !BCC_EOS
27449                                           ! 3906 ++;
27450                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27451 707F           8B46         08            mov	ax,8[bp]
27452 7082           40                         inc	ax
27453 7083           8946         08            mov	8[bp],ax
27454                                           !BCC_EOS
27455                                           ! 3907         for(i=0;i<=0x18;i++) {
27456                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27457 7086           31C0                       xor	ax,ax
27458 7088           8946         FE            mov	-2[bp],ax
27459                                           !BCC_EOS
27460                                           !BCC_EOS
27461 708B           EB           33            jmp .254
27462                       0000708D            .255:
27463                                           ! 3908             outb(crtc_addr,i);
27464                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27465 708D           FF76         FE            push	-2[bp]
27466                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27467 7090           FF76         FA            push	-6[bp]
27468                                           ! Debug: func () void = outb+0 (used reg = )
27469 7093           E8         0BB7            call	_outb
27470 7096           83C4                   04  add	sp,*4
27471                                           !BCC_EOS
27472                                           ! 3909             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27473                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27474 7099           8B46         FA            mov	ax,-6[bp]
27475                                           ! Debug: list unsigned int = ax+1 (used reg = )
27476 709C           40                         inc	ax
27477 709D           50                         push	ax
27478                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27479 709E           E8         0B96            call	_inb
27480 70A1           44                         inc	sp
27481 70A2           44                         inc	sp
27482                                           ! Debug: list unsigned char = al+0 (used reg = )
27483 70A3           30E4                       xor	ah,ah
27484 70A5           50                         push	ax
27485                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27486 70A6           FF76         08            push	8[bp]
27487                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27488 70A9           FF76         06            push	6[bp]
27489                                           ! Debug: func () void = write_byte+0 (used reg = )
27490 70AC           E8         0B58            call	_write_byte
27491 70AF           83C4                   06  add	sp,*6
27492                                           !BCC_EOS
27493                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27494 70B2           8B46         08            mov	ax,8[bp]
27495 70B5           40                         inc	ax
27496 70B6           8946         08            mov	8[bp],ax
27497                                           !BCC_EOS
27498                                           ! 3910         }
27499                                           ! 3911         for(i=0;i<=0x13;i++) {
27500                       000070B9            .253:
27501                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27502 70B9           8B46         FE            mov	ax,-2[bp]
27503 70BC           40                         inc	ax
27504 70BD           8946         FE            mov	-2[bp],ax
27505                       000070C0            .254:
27506                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27507 70C0           8B46         FE            mov	ax,-2[bp]
27508 70C3           3D                   0018  cmp	ax,*$18
27509 70C6           76           C5            jbe	.255
27510                       000070C8            .256:
27511                       000070C8            .252:
27512                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27513 70C8           31C0                       xor	ax,ax
27514 70CA           8946         FE            mov	-2[bp],ax
27515                                           !BCC_EOS
27516                                           !BCC_EOS
27517 70CD           EB           44            jmp .259
27518                       000070CF            .25A:
27519                                           ! 3912             inb(0x3da);
27520                                           ! Debug: list int = const $3DA (used reg = )
27521 70CF           B8                   03DA  mov	ax,#$3DA
27522 70D2           50                         push	ax
27523                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27524 70D3           E8         0B61            call	_inb
27525 70D6           44                         inc	sp
27526 70D7           44                         inc	sp
27527                                           !BCC_EOS
27528                                           ! 3913             outb(0x3c0, i | (ar_index & 0x20));
27529                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27530 70D8           8A46         F8            mov	al,-8[bp]
27531 70DB           24                     20  and	al,*$20
27532                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27533                                           ! Debug: expression subtree swapping
27534 70DD           30E4                       xor	ah,ah
27535 70DF           0B46         FE            or	ax,-2[bp]
27536                                           ! Debug: list unsigned int = ax+0 (used reg = )
27537 70E2           50                         push	ax
27538                                           ! Debug: list int = const $3C0 (used reg = )
27539 70E3           B8                   03C0  mov	ax,#$3C0
27540 70E6           50                         push	ax
27541                                           ! Debug: func () void = outb+0 (used reg = )
27542 70E7           E8         0B63            call	_outb
27543 70EA           83C4                   04  add	sp,*4
27544                                           !BCC_EOS
27545                                           ! 3914             write_byte(ES, BX, inb(0x3c1)); BX++;
27546                                           ! Debug: list int = const $3C1 (used reg = )
27547 70ED           B8                   03C1  mov	ax,#$3C1
27548 70F0           50                         push	ax
27549                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27550 70F1           E8         0B43            call	_inb
27551 70F4           44                         inc	sp
27552 70F5           44                         inc	sp
27553                                           ! Debug: list unsigned char = al+0 (used reg = )
27554 70F6           30E4                       xor	ah,ah
27555 70F8           50                         push	ax
27556                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27557 70F9           FF76         08            push	8[bp]
27558                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27559 70FC           FF76         06            push	6[bp]
27560                                           ! Debug: func () void = write_byte+0 (used reg = )
27561 70FF           E8         0B05            call	_write_byte
27562 7102           83C4                   06  add	sp,*6
27563                                           !BCC_EOS
27564                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27565 7105           8B46         08            mov	ax,8[bp]
27566 7108           40                         inc	ax
27567 7109           8946         08            mov	8[bp],ax
27568                                           !BCC_EOS
27569                                           ! 3915         }
27570                                           ! 3916         inb(0x3da);
27571                       0000710C            .258:
27572                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27573 710C           8B46         FE            mov	ax,-2[bp]
27574 710F           40                         inc	ax
27575 7110           8946         FE            mov	-2[bp],ax
27576                       00007113            .259:
27577                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27578 7113           8B46         FE            mov	ax,-2[bp]
27579 7116           3D                   0013  cmp	ax,*$13
27580 7119           76           B4            jbe	.25A
27581                       0000711B            .25B:
27582                       0000711B            .257:
27583                                           ! Debug: list int = const $3DA (used reg = )
27584 711B           B8                   03DA  mov	ax,#$3DA
27585 711E           50                         push	ax
27586                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27587 711F           E8         0B15            call	_inb
27588 7122           44                         inc	sp
27589 7123           44                         inc	sp
27590                                           !BCC_EOS
27591                                           ! 3917         for(i=0;i<=8;i++) {
27592                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27593 7124           31C0                       xor	ax,ax
27594 7126           8946         FE            mov	-2[bp],ax
27595                                           !BCC_EOS
27596                                           !BCC_EOS
27597 7129           EB           33            jmp .25E
27598                       0000712B            .25F:
27599                                           ! 3918             outb(0x3ce,i);
27600                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27601 712B           FF76         FE            push	-2[bp]
27602                                           ! Debug: list int = const $3CE (used reg = )
27603 712E           B8                   03CE  mov	ax,#$3CE
27604 7131           50                         push	ax
27605                                           ! Debug: func () void = outb+0 (used reg = )
27606 7132           E8         0B18            call	_outb
27607 7135           83C4                   04  add	sp,*4
27608                                           !BCC_EOS
27609                                           ! 3919             write_byte(ES, BX, inb(0x3cf)); BX++;
27610                                           ! Debug: list int = const $3CF (used reg = )
27611 7138           B8                   03CF  mov	ax,#$3CF
27612 713B           50                         push	ax
27613                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27614 713C           E8         0AF8            call	_inb
27615 713F           44                         inc	sp
27616 7140           44                         inc	sp
27617                                           ! Debug: list unsigned char = al+0 (used reg = )
27618 7141           30E4                       xor	ah,ah
27619 7143           50                         push	ax
27620                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27621 7144           FF76         08            push	8[bp]
27622                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27623 7147           FF76         06            push	6[bp]
27624                                           ! Debug: func () void = write_byte+0 (used reg = )
27625 714A           E8         0ABA            call	_write_byte
27626 714D           83C4                   06  add	sp,*6
27627                                           !BCC_EOS
27628                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27629 7150           8B46         08            mov	ax,8[bp]
27630 7153           40                         inc	ax
27631 7154           8946         08            mov	8[bp],ax
27632                                           !BCC_EOS
27633                                           ! 3920         }
27634                                           ! 3921         write_word(ES, BX, crtc_addr); BX+= 2;
27635                       00007157            .25D:
27636                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27637 7157           8B46         FE            mov	ax,-2[bp]
27638 715A           40                         inc	ax
27639 715B           8946         FE            mov	-2[bp],ax
27640                       0000715E            .25E:
27641                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27642 715E           8B46         FE            mov	ax,-2[bp]
27643 7161           3D                   0008  cmp	ax,*8
27644 7164           76           C5            jbe	.25F
27645                       00007166            .260:
27646                       00007166            .25C:
27647                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27648 7166           FF76         FA            push	-6[bp]
27649                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27650 7169           FF76         08            push	8[bp]
27651                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27652 716C           FF76         06            push	6[bp]
27653                                           ! Debug: func () void = write_word+0 (used reg = )
27654 716F           E8         0AAD            call	_write_word
27655 7172           83C4                   06  add	sp,*6
27656                                           !BCC_EOS
27657                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27658 7175           8B46         08            mov	ax,8[bp]
27659 7178           40                         inc	ax
27660 7179           40                         inc	ax
27661 717A           8946         08            mov	8[bp],ax
27662                                           !BCC_EOS
27663                                           ! 3922         write_byte(ES, BX, 0); BX++;
27664                                           ! Debug: list int = const 0 (used reg = )
27665 717D           31C0                       xor	ax,ax
27666 717F           50                         push	ax
27667                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27668 7180           FF76         08            push	8[bp]
27669                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27670 7183           FF76         06            push	6[bp]
27671                                           ! Debug: func () void = write_byte+0 (used reg = )
27672 7186           E8         0A7E            call	_write_byte
27673 7189           83C4                   06  add	sp,*6
27674                                           !BCC_EOS
27675                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27676 718C           8B46         08            mov	ax,8[bp]
27677 718F           40                         inc	ax
27678 7190           8946         08            mov	8[bp],ax
27679                                           !BCC_EOS
27680                                           ! 3923         write_byte(ES, BX, 0); BX++;
27681                                           ! Debug: list int = const 0 (used reg = )
27682 7193           31C0                       xor	ax,ax
27683 7195           50                         push	ax
27684                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27685 7196           FF76         08            push	8[bp]
27686                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27687 7199           FF76         06            push	6[bp]
27688                                           ! Debug: func () void = write_byte+0 (used reg = )
27689 719C           E8         0A68            call	_write_byte
27690 719F           83C4                   06  add	sp,*6
27691                                           !BCC_EOS
27692                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27693 71A2           8B46         08            mov	ax,8[bp]
27694 71A5           40                         inc	ax
27695 71A6           8946         08            mov	8[bp],ax
27696                                           !BCC_EOS
27697                                           ! 3924         write_byte(ES, BX, 0); BX++;
27698                                           ! Debug: list int = const 0 (used reg = )
27699 71A9           31C0                       xor	ax,ax
27700 71AB           50                         push	ax
27701                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27702 71AC           FF76         08            push	8[bp]
27703                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27704 71AF           FF76         06            push	6[bp]
27705                                           ! Debug: func () void = write_byte+0 (used reg = )
27706 71B2           E8         0A52            call	_write_byte
27707 71B5           83C4                   06  add	sp,*6
27708                                           !BCC_EOS
27709                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27710 71B8           8B46         08            mov	ax,8[bp]
27711 71BB           40                         inc	ax
27712 71BC           8946         08            mov	8[bp],ax
27713                                           !BCC_EOS
27714                                           ! 3925         write_byte(ES, BX, 0); BX++;
27715                                           ! Debug: list int = const 0 (used reg = )
27716 71BF           31C0                       xor	ax,ax
27717 71C1           50                         push	ax
27718                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27719 71C2           FF76         08            push	8[bp]
27720                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27721 71C5           FF76         06            push	6[bp]
27722                                           ! Debug: func () void = write_byte+0 (used reg = )
27723 71C8           E8         0A3C            call	_write_byte
27724 71CB           83C4                   06  add	sp,*6
27725                                           !BCC_EOS
27726                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27727 71CE           8B46         08            mov	ax,8[bp]
27728 71D1           40                         inc	ax
27729 71D2           8946         08            mov	8[bp],ax
27730                                           !BCC_EOS
27731                                           ! 3926     }
27732                                           ! 3927     if (CX & 2) {
27733                       000071D5            .24B:
27734                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27735 71D5           8A46         04            mov	al,4[bp]
27736 71D8           24                     02  and	al,*2
27737 71DA           84C0                       test	al,al
27738 71DC         0F84         0270            beq 	.261
27739                       000071E0            .262:
27740                                           ! 3928         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27741                                           ! Debug: list int = const $49 (used reg = )
27742 71E0           B8                   0049  mov	ax,*$49
27743 71E3           50                         push	ax
27744                                           ! Debug: list int = const $40 (used reg = )
27745 71E4           B8                   0040  mov	ax,*$40
27746 71E7           50                         push	ax
27747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27748 71E8           E8         09F6            call	_read_byte
27749 71EB           83C4                   04  add	sp,*4
27750                                           ! Debug: list unsigned char = al+0 (used reg = )
27751 71EE           30E4                       xor	ah,ah
27752 71F0           50                         push	ax
27753                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27754 71F1           FF76         08            push	8[bp]
27755                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27756 71F4           FF76         06            push	6[bp]
27757                                           ! Debug: func () void = write_byte+0 (used reg = )
27758 71F7           E8         0A0D            call	_write_byte
27759 71FA           83C4                   06  add	sp,*6
27760                                           !BCC_EOS
27761                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27762 71FD           8B46         08            mov	ax,8[bp]
27763 7200           40                         inc	ax
27764 7201           8946         08            mov	8[bp],ax
27765                                           !BCC_EOS
27766                                           ! 3929         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27767                                           ! Debug: list int = const $4A (used reg = )
27768 7204           B8                   004A  mov	ax,*$4A
27769 7207           50                         push	ax
27770                                           ! Debug: list int = const $40 (used reg = )
27771 7208           B8                   0040  mov	ax,*$40
27772 720B           50                         push	ax
27773                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27774 720C           E8         09E5            call	_read_word
27775 720F           83C4                   04  add	sp,*4
27776                                           ! Debug: list unsigned short = ax+0 (used reg = )
27777 7212           50                         push	ax
27778                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27779 7213           FF76         08            push	8[bp]
27780                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27781 7216           FF76         06            push	6[bp]
27782                                           ! Debug: func () void = write_word+0 (used reg = )
27783 7219           E8         0A03            call	_write_word
27784 721C           83C4                   06  add	sp,*6
27785                                           !BCC_EOS
27786                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27787 721F           8B46         08            mov	ax,8[bp]
27788 7222           40                         inc	ax
27789 7223           40                         inc	ax
27790 7224           8946         08            mov	8[bp],ax
27791                                           !BCC_EOS
27792                                           ! 3930         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27793                                           ! Debug: list int = const $4C (used reg = )
27794 7227           B8                   004C  mov	ax,*$4C
27795 722A           50                         push	ax
27796                                           ! Debug: list int = const $40 (used reg = )
27797 722B           B8                   0040  mov	ax,*$40
27798 722E           50                         push	ax
27799                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27800 722F           E8         09C2            call	_read_word
27801 7232           83C4                   04  add	sp,*4
27802                                           ! Debug: list unsigned short = ax+0 (used reg = )
27803 7235           50                         push	ax
27804                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27805 7236           FF76         08            push	8[bp]
27806                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27807 7239           FF76         06            push	6[bp]
27808                                           ! Debug: func () void = write_word+0 (used reg = )
27809 723C           E8         09E0            call	_write_word
27810 723F           83C4                   06  add	sp,*6
27811                                           !BCC_EOS
27812                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27813 7242           8B46         08            mov	ax,8[bp]
27814 7245           40                         inc	ax
27815 7246           40                         inc	ax
27816 7247           8946         08            mov	8[bp],ax
27817                                           !BCC_EOS
27818                                           ! 3931         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27819                                           ! Debug: list int = const $63 (used reg = )
27820 724A           B8                   0063  mov	ax,*$63
27821 724D           50                         push	ax
27822                                           ! Debug: list int = const $40 (used reg = )
27823 724E           B8                   0040  mov	ax,*$40
27824 7251           50                         push	ax
27825                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27826 7252           E8         099F            call	_read_word
27827 7255           83C4                   04  add	sp,*4
27828                                           ! Debug: list unsigned short = ax+0 (used reg = )
27829 7258           50                         push	ax
27830                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27831 7259           FF76         08            push	8[bp]
27832                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27833 725C           FF76         06            push	6[bp]
27834                                           ! Debug: func () void = write_word+0 (used reg = )
27835 725F           E8         09BD            call	_write_word
27836 7262           83C4                   06  add	sp,*6
27837                                           !BCC_EOS
27838                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27839 7265           8B46         08            mov	ax,8[bp]
27840 7268           40                         inc	ax
27841 7269           40                         inc	ax
27842 726A           8946         08            mov	8[bp],ax
27843                                           !BCC_EOS
27844                                           ! 3932         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27845                                           ! Debug: list int = const $84 (used reg = )
27846 726D           B8                   0084  mov	ax,#$84
27847 7270           50                         push	ax
27848                                           ! Debug: list int = const $40 (used reg = )
27849 7271           B8                   0040  mov	ax,*$40
27850 7274           50                         push	ax
27851                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27852 7275           E8         0969            call	_read_byte
27853 7278           83C4                   04  add	sp,*4
27854                                           ! Debug: list unsigned char = al+0 (used reg = )
27855 727B           30E4                       xor	ah,ah
27856 727D           50                         push	ax
27857                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27858 727E           FF76         08            push	8[bp]
27859                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27860 7281           FF76         06            push	6[bp]
27861                                           ! Debug: func () void = write_byte+0 (used reg = )
27862 7284           E8         0980            call	_write_byte
27863 7287           83C4                   06  add	sp,*6
27864                                           !BCC_EOS
27865                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27866 728A           8B46         08            mov	ax,8[bp]
27867 728D           40                         inc	ax
27868 728E           8946         08            mov	8[bp],ax
27869                                           !BCC_EOS
27870                                           ! 3933         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27871                                           ! Debug: list int = const $85 (used reg = )
27872 7291           B8                   0085  mov	ax,#$85
27873 7294           50                         push	ax
27874                                           ! Debug: list int = const $40 (used reg = )
27875 7295           B8                   0040  mov	ax,*$40
27876 7298           50                         push	ax
27877                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27878 7299           E8         0958            call	_read_word
27879 729C           83C4                   04  add	sp,*4
27880                                           ! Debug: list unsigned short = ax+0 (used reg = )
27881 729F           50                         push	ax
27882                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27883 72A0           FF76         08            push	8[bp]
27884                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27885 72A3           FF76         06            push	6[bp]
27886                                           ! Debug: func () void = write_word+0 (used reg = )
27887 72A6           E8         0976            call	_write_word
27888 72A9           83C4                   06  add	sp,*6
27889                                           !BCC_EOS
27890                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27891 72AC           8B46         08            mov	ax,8[bp]
27892 72AF           40                         inc	ax
27893 72B0           40                         inc	ax
27894 72B1           8946         08            mov	8[bp],ax
27895                                           !BCC_EOS
27896                                           ! 3934         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27897                                           ! Debug: list int = const $87 (used reg = )
27898 72B4           B8                   0087  mov	ax,#$87
27899 72B7           50                         push	ax
27900                                           ! Debug: list int = const $40 (used reg = )
27901 72B8           B8                   0040  mov	ax,*$40
27902 72BB           50                         push	ax
27903                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27904 72BC           E8         0922            call	_read_byte
27905 72BF           83C4                   04  add	sp,*4
27906                                           ! Debug: list unsigned char = al+0 (used reg = )
27907 72C2           30E4                       xor	ah,ah
27908 72C4           50                         push	ax
27909                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27910 72C5           FF76         08            push	8[bp]
27911                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27912 72C8           FF76         06            push	6[bp]
27913                                           ! Debug: func () void = write_byte+0 (used reg = )
27914 72CB           E8         0939            call	_write_byte
27915 72CE           83C4                   06  add	sp,*6
27916                                           !BCC_EOS
27917                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27918 72D1           8B46         08            mov	ax,8[bp]
27919 72D4           40                         inc	ax
27920 72D5           8946         08            mov	8[bp],ax
27921                                           !BCC_EOS
27922                                           ! 3935         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27923                                           ! Debug: list int = const $88 (used reg = )
27924 72D8           B8                   0088  mov	ax,#$88
27925 72DB           50                         push	ax
27926                                           ! Debug: list int = const $40 (used reg = )
27927 72DC           B8                   0040  mov	ax,*$40
27928 72DF           50                         push	ax
27929                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27930 72E0           E8         08FE            call	_read_byte
27931 72E3           83C4                   04  add	sp,*4
27932                                           ! Debug: list unsigned char = al+0 (used reg = )
27933 72E6           30E4                       xor	ah,ah
27934 72E8           50                         push	ax
27935                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27936 72E9           FF76         08            push	8[bp]
27937                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27938 72EC           FF76         06            push	6[bp]
27939                                           ! Debug: func () void = write_byte+0 (used reg = )
27940 72EF           E8         0915            call	_write_byte
27941 72F2           83C4                   06  add	sp,*6
27942                                           !BCC_EOS
27943                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27944 72F5           8B46         08            mov	ax,8[bp]
27945 72F8           40                         inc	ax
27946 72F9           8946         08            mov	8[bp],ax
27947                                           !BCC_EOS
27948                                           ! 3936         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27949                                           ! Debug: list int = const $89 (used reg = )
27950 72FC           B8                   0089  mov	ax,#$89
27951 72FF           50                         push	ax
27952                                           ! Debug: list int = const $40 (used reg = )
27953 7300           B8                   0040  mov	ax,*$40
27954 7303           50                         push	ax
27955                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27956 7304           E8         08DA            call	_read_byte
27957 7307           83C4                   04  add	sp,*4
27958                                           ! Debug: list unsigned char = al+0 (used reg = )
27959 730A           30E4                       xor	ah,ah
27960 730C           50                         push	ax
27961                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27962 730D           FF76         08            push	8[bp]
27963                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27964 7310           FF76         06            push	6[bp]
27965                                           ! Debug: func () void = write_byte+0 (used reg = )
27966 7313           E8         08F1            call	_write_byte
27967 7316           83C4                   06  add	sp,*6
27968                                           !BCC_EOS
27969                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27970 7319           8B46         08            mov	ax,8[bp]
27971 731C           40                         inc	ax
27972 731D           8946         08            mov	8[bp],ax
27973                                           !BCC_EOS
27974                                           ! 3937         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27975                                           ! Debug: list int = const $60 (used reg = )
27976 7320           B8                   0060  mov	ax,*$60
27977 7323           50                         push	ax
27978                                           ! Debug: list int = const $40 (used reg = )
27979 7324           B8                   0040  mov	ax,*$40
27980 7327           50                         push	ax
27981                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27982 7328           E8         08C9            call	_read_word
27983 732B           83C4                   04  add	sp,*4
27984                                           ! Debug: list unsigned short = ax+0 (used reg = )
27985 732E           50                         push	ax
27986                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27987 732F           FF76         08            push	8[bp]
27988                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27989 7332           FF76         06            push	6[bp]
27990                                           ! Debug: func () void = write_word+0 (used reg = )
27991 7335           E8         08E7            call	_write_word
27992 7338           83C4                   06  add	sp,*6
27993                                           !BCC_EOS
27994                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27995 733B           8B46         08            mov	ax,8[bp]
27996 733E           40                         inc	ax
27997 733F           40                         inc	ax
27998 7340           8946         08            mov	8[bp],ax
27999                                           !BCC_EOS
28000                                           ! 3938         for(i=0;i<8;i++) {
28001                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28002 7343           31C0                       xor	ax,ax
28003 7345           8946         FE            mov	-2[bp],ax
28004                                           !BCC_EOS
28005                                           !BCC_EOS
28006 7348           EB           2F            jmp .265
28007                       0000734A            .266:
28008                                           ! 3939             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28009                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28010                                           ! Debug: expression subtree swapping
28011 734A           8B46         FE            mov	ax,-2[bp]
28012 734D           D1E0                       shl	ax,*1
28013                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28014                                           ! Debug: expression subtree swapping
28015                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28016 734F           05                   0050  add	ax,*$50
28017 7352           50                         push	ax
28018                                           ! Debug: list int = const $40 (used reg = )
28019 7353           B8                   0040  mov	ax,*$40
28020 7356           50                         push	ax
28021                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28022 7357           E8         089A            call	_read_word
28023 735A           83C4                   04  add	sp,*4
28024                                           ! Debug: list unsigned short = ax+0 (used reg = )
28025 735D           50                         push	ax
28026                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28027 735E           FF76         08            push	8[bp]
28028                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28029 7361           FF76         06            push	6[bp]
28030                                           ! Debug: func () void = write_word+0 (used reg = )
28031 7364           E8         08B8            call	_write_word
28032 7367           83C4                   06  add	sp,*6
28033                                           !BCC_EOS
28034                                           ! 3940             BX += 2;
28035                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28036 736A           8B46         08            mov	ax,8[bp]
28037 736D           40                         inc	ax
28038 736E           40                         inc	ax
28039 736F           8946         08            mov	8[bp],ax
28040                                           !BCC_EOS
28041                                           ! 3941         }
28042                                           ! 3942         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28043                       00007372            .264:
28044                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28045 7372           8B46         FE            mov	ax,-2[bp]
28046 7375           40                         inc	ax
28047 7376           8946         FE            mov	-2[bp],ax
28048                       00007379            .265:
28049                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28050 7379           8B46         FE            mov	ax,-2[bp]
28051 737C           3D                   0008  cmp	ax,*8
28052 737F           72           C9            jb 	.266
28053                       00007381            .267:
28054                       00007381            .263:
28055                                           ! Debug: list int = const $4E (used reg = )
28056 7381           B8                   004E  mov	ax,*$4E
28057 7384           50                         push	ax
28058                                           ! Debug: list int = const $40 (used reg = )
28059 7385           B8                   0040  mov	ax,*$40
28060 7388           50                         push	ax
28061                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28062 7389           E8         0868            call	_read_word
28063 738C           83C4                   04  add	sp,*4
28064                                           ! Debug: list unsigned short = ax+0 (used reg = )
28065 738F           50                         push	ax
28066                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28067 7390           FF76         08            push	8[bp]
28068                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28069 7393           FF76         06            push	6[bp]
28070                                           ! Debug: func () void = write_word+0 (used reg = )
28071 7396           E8         0886            call	_write_word
28072 7399           83C4                   06  add	sp,*6
28073                                           !BCC_EOS
28074                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28075 739C           8B46         08            mov	ax,8[bp]
28076 739F           40                         inc	ax
28077 73A0           40                         inc	ax
28078 73A1           8946         08            mov	8[bp],ax
28079                                           !BCC_EOS
28080                                           ! 3943         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28081                                           ! Debug: list int = const $62 (used reg = )
28082 73A4           B8                   0062  mov	ax,*$62
28083 73A7           50                         push	ax
28084                                           ! Debug: list int = const $40 (used reg = )
28085 73A8           B8                   0040  mov	ax,*$40
28086 73AB           50                         push	ax
28087                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28088 73AC           E8         0832            call	_read_byte
28089 73AF           83C4                   04  add	sp,*4
28090                                           ! Debug: list unsigned char = al+0 (used reg = )
28091 73B2           30E4                       xor	ah,ah
28092 73B4           50                         push	ax
28093                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28094 73B5           FF76         08            push	8[bp]
28095                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28096 73B8           FF76         06            push	6[bp]
28097                                           ! Debug: func () void = write_byte+0 (used reg = )
28098 73BB           E8         0849            call	_write_byte
28099 73BE           83C4                   06  add	sp,*6
28100                                           !BCC_EOS
28101                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28102 73C1           8B46         08            mov	ax,8[bp]
28103 73C4           40                         inc	ax
28104 73C5           8946         08            mov	8[bp],ax
28105                                           !BCC_EOS
28106                                           ! 3944         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28107                                           ! Debug: list int = const $7C (used reg = )
28108 73C8           B8                   007C  mov	ax,*$7C
28109 73CB           50                         push	ax
28110                                           ! Debug: list int = const 0 (used reg = )
28111 73CC           31C0                       xor	ax,ax
28112 73CE           50                         push	ax
28113                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28114 73CF           E8         0822            call	_read_word
28115 73D2           83C4                   04  add	sp,*4
28116                                           ! Debug: list unsigned short = ax+0 (used reg = )
28117 73D5           50                         push	ax
28118                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28119 73D6           FF76         08            push	8[bp]
28120                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28121 73D9           FF76         06            push	6[bp]
28122                                           ! Debug: func () void = write_word+0 (used reg = )
28123 73DC           E8         0840            call	_write_word
28124 73DF           83C4                   06  add	sp,*6
28125                                           !BCC_EOS
28126                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28127 73E2           8B46         08            mov	ax,8[bp]
28128 73E5           40                         inc	ax
28129 73E6           40                         inc	ax
28130 73E7           8946         08            mov	8[bp],ax
28131                                           !BCC_EOS
28132                                           ! 3945         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28133                                           ! Debug: list int = const $7E (used reg = )
28134 73EA           B8                   007E  mov	ax,*$7E
28135 73ED           50                         push	ax
28136                                           ! Debug: list int = const 0 (used reg = )
28137 73EE           31C0                       xor	ax,ax
28138 73F0           50                         push	ax
28139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28140 73F1           E8         0800            call	_read_word
28141 73F4           83C4                   04  add	sp,*4
28142                                           ! Debug: list unsigned short = ax+0 (used reg = )
28143 73F7           50                         push	ax
28144                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28145 73F8           FF76         08            push	8[bp]
28146                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28147 73FB           FF76         06            push	6[bp]
28148                                           ! Debug: func () void = write_word+0 (used reg = )
28149 73FE           E8         081E            call	_write_word
28150 7401           83C4                   06  add	sp,*6
28151                                           !BCC_EOS
28152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28153 7404           8B46         08            mov	ax,8[bp]
28154 7407           40                         inc	ax
28155 7408           40                         inc	ax
28156 7409           8946         08            mov	8[bp],ax
28157                                           !BCC_EOS
28158                                           ! 3946         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28159                                           ! Debug: list int = const $10C (used reg = )
28160 740C           B8                   010C  mov	ax,#$10C
28161 740F           50                         push	ax
28162                                           ! Debug: list int = const 0 (used reg = )
28163 7410           31C0                       xor	ax,ax
28164 7412           50                         push	ax
28165                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28166 7413           E8         07DE            call	_read_word
28167 7416           83C4                   04  add	sp,*4
28168                                           ! Debug: list unsigned short = ax+0 (used reg = )
28169 7419           50                         push	ax
28170                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28171 741A           FF76         08            push	8[bp]
28172                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28173 741D           FF76         06            push	6[bp]
28174                                           ! Debug: func () void = write_word+0 (used reg = )
28175 7420           E8         07FC            call	_write_word
28176 7423           83C4                   06  add	sp,*6
28177                                           !BCC_EOS
28178                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28179 7426           8B46         08            mov	ax,8[bp]
28180 7429           40                         inc	ax
28181 742A           40                         inc	ax
28182 742B           8946         08            mov	8[bp],ax
28183                                           !BCC_EOS
28184                                           ! 3947         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28185                                           ! Debug: list int = const $10E (used reg = )
28186 742E           B8                   010E  mov	ax,#$10E
28187 7431           50                         push	ax
28188                                           ! Debug: list int = const 0 (used reg = )
28189 7432           31C0                       xor	ax,ax
28190 7434           50                         push	ax
28191                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28192 7435           E8         07BC            call	_read_word
28193 7438           83C4                   04  add	sp,*4
28194                                           ! Debug: list unsigned short = ax+0 (used reg = )
28195 743B           50                         push	ax
28196                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28197 743C           FF76         08            push	8[bp]
28198                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28199 743F           FF76         06            push	6[bp]
28200                                           ! Debug: func () void = write_word+0 (used reg = )
28201 7442           E8         07DA            call	_write_word
28202 7445           83C4                   06  add	sp,*6
28203                                           !BCC_EOS
28204                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28205 7448           8B46         08            mov	ax,8[bp]
28206 744B           40                         inc	ax
28207 744C           40                         inc	ax
28208 744D           8946         08            mov	8[bp],ax
28209                                           !BCC_EOS
28210                                           ! 3948     }
28211                                           ! 3949     if (CX & 4) {
28212                       00007450            .261:
28213                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28214 7450           8A46         04            mov	al,4[bp]
28215 7453           24                     04  and	al,*4
28216 7455           84C0                       test	al,al
28217 7457         0F84         00B5            beq 	.268
28218                       0000745B            .269:
28219                                           ! 3950         write_byte(ES, BX, inb(0x3c7)); BX++;
28220                                           ! Debug: list int = const $3C7 (used reg = )
28221 745B           B8                   03C7  mov	ax,#$3C7
28222 745E           50                         push	ax
28223                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28224 745F           E8         07D5            call	_inb
28225 7462           44                         inc	sp
28226 7463           44                         inc	sp
28227                                           ! Debug: list unsigned char = al+0 (used reg = )
28228 7464           30E4                       xor	ah,ah
28229 7466           50                         push	ax
28230                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28231 7467           FF76         08            push	8[bp]
28232                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28233 746A           FF76         06            push	6[bp]
28234                                           ! Debug: func () void = write_byte+0 (used reg = )
28235 746D           E8         0797            call	_write_byte
28236 7470           83C4                   06  add	sp,*6
28237                                           !BCC_EOS
28238                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28239 7473           8B46         08            mov	ax,8[bp]
28240 7476           40                         inc	ax
28241 7477           8946         08            mov	8[bp],ax
28242                                           !BCC_EOS
28243                                           ! 3951         write_byte(ES, BX, inb(0x3c8)); BX++;
28244                                           ! Debug: list int = const $3C8 (used reg = )
28245 747A           B8                   03C8  mov	ax,#$3C8
28246 747D           50                         push	ax
28247                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28248 747E           E8         07B6            call	_inb
28249 7481           44                         inc	sp
28250 7482           44                         inc	sp
28251                                           ! Debug: list unsigned char = al+0 (used reg = )
28252 7483           30E4                       xor	ah,ah
28253 7485           50                         push	ax
28254                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28255 7486           FF76         08            push	8[bp]
28256                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28257 7489           FF76         06            push	6[bp]
28258                                           ! Debug: func () void = write_byte+0 (used reg = )
28259 748C           E8         0778            call	_write_byte
28260 748F           83C4                   06  add	sp,*6
28261                                           !BCC_EOS
28262                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28263 7492           8B46         08            mov	ax,8[bp]
28264 7495           40                         inc	ax
28265 7496           8946         08            mov	8[bp],ax
28266                                           !BCC_EOS
28267                                           ! 3952         write_byte(ES, BX, inb(0x3c6)); BX++;
28268                                           ! Debug: list int = const $3C6 (used reg = )
28269 7499           B8                   03C6  mov	ax,#$3C6
28270 749C           50                         push	ax
28271                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28272 749D           E8         0797            call	_inb
28273 74A0           44                         inc	sp
28274 74A1           44                         inc	sp
28275                                           ! Debug: list unsigned char = al+0 (used reg = )
28276 74A2           30E4                       xor	ah,ah
28277 74A4           50                         push	ax
28278                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28279 74A5           FF76         08            push	8[bp]
28280                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28281 74A8           FF76         06            push	6[bp]
28282                                           ! Debug: func () void = write_byte+0 (used reg = )
28283 74AB           E8         0759            call	_write_byte
28284 74AE           83C4                   06  add	sp,*6
28285                                           !BCC_EOS
28286                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28287 74B1           8B46         08            mov	ax,8[bp]
28288 74B4           40                         inc	ax
28289 74B5           8946         08            mov	8[bp],ax
28290                                           !BCC_EOS
28291                                           ! 3953         outb(0x3c8,0x00);
28292                                           ! Debug: list int = const 0 (used reg = )
28293 74B8           31C0                       xor	ax,ax
28294 74BA           50                         push	ax
28295                                           ! Debug: list int = const $3C8 (used reg = )
28296 74BB           B8                   03C8  mov	ax,#$3C8
28297 74BE           50                         push	ax
28298                                           ! Debug: func () void = outb+0 (used reg = )
28299 74BF           E8         078B            call	_outb
28300 74C2           83C4                   04  add	sp,*4
28301                                           !BCC_EOS
28302                                           ! 3954         for(i=0;i<256*3;i++) {
28303                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28304 74C5           31C0                       xor	ax,ax
28305 74C7           8946         FE            mov	-2[bp],ax
28306                                           !BCC_EOS
28307                                           !BCC_EOS
28308 74CA           EB           26            jmp .26C
28309                       000074CC            .26D:
28310                                           ! 3955             write_byte(ES, BX, inb(0x3c9)); BX++;
28311                                           ! Debug: list int = const $3C9 (used reg = )
28312 74CC           B8                   03C9  mov	ax,#$3C9
28313 74CF           50                         push	ax
28314                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28315 74D0           E8         0764            call	_inb
28316 74D3           44                         inc	sp
28317 74D4           44                         inc	sp
28318                                           ! Debug: list unsigned char = al+0 (used reg = )
28319 74D5           30E4                       xor	ah,ah
28320 74D7           50                         push	ax
28321                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28322 74D8           FF76         08            push	8[bp]
28323                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28324 74DB           FF76         06            push	6[bp]
28325                                           ! Debug: func () void = write_byte+0 (used reg = )
28326 74DE           E8         0726            call	_write_byte
28327 74E1           83C4                   06  add	sp,*6
28328                                           !BCC_EOS
28329                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28330 74E4           8B46         08            mov	ax,8[bp]
28331 74E7           40                         inc	ax
28332 74E8           8946         08            mov	8[bp],ax
28333                                           !BCC_EOS
28334                                           ! 3956         }
28335                                           ! 3957         write_byte(ES, BX, 0); BX++;
28336                       000074EB            .26B:
28337                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28338 74EB           8B46         FE            mov	ax,-2[bp]
28339 74EE           40                         inc	ax
28340 74EF           8946         FE            mov	-2[bp],ax
28341                       000074F2            .26C:
28342                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28343 74F2           8B46         FE            mov	ax,-2[bp]
28344 74F5           3D                   0300  cmp	ax,#$300
28345 74F8           72           D2            jb 	.26D
28346                       000074FA            .26E:
28347                       000074FA            .26A:
28348                                           ! Debug: list int = const 0 (used reg = )
28349 74FA           31C0                       xor	ax,ax
28350 74FC           50                         push	ax
28351                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28352 74FD           FF76         08            push	8[bp]
28353                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28354 7500           FF76         06            push	6[bp]
28355                                           ! Debug: func () void = write_byte+0 (used reg = )
28356 7503           E8         0701            call	_write_byte
28357 7506           83C4                   06  add	sp,*6
28358                                           !BCC_EOS
28359                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28360 7509           8B46         08            mov	ax,8[bp]
28361 750C           40                         inc	ax
28362 750D           8946         08            mov	8[bp],ax
28363                                           !BCC_EOS
28364                                           ! 3958     }
28365                                           ! 3959     return BX;
28366                       00007510            .268:
28367 7510           8B46         08            mov	ax,8[bp]
28368 7513           89EC                       mov	sp,bp
28369 7515           5D                         pop	bp
28370 7516           C3                         ret
28371                                           !BCC_EOS
28372                                           ! 3960 }
28373                                           ! 3961 
28374                                           ! 3961 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28375                                           ! 3962      Bit16u CX;Bit16u ES;Bit16u BX;
28376                       00007517            _biosfn_restore_video_state:
28377                                           !BCC_EOS
28378                                           !BCC_EOS
28379                                           !BCC_EOS
28380                                           ! 3963 {
28381                                           ! 3964     Bit16u i, crtc_addr, v, addr1, ar_index;
28382                                           !BCC_EOS
28383                                           ! 3965     if (CX & 1) {
28384 7517           55                         push	bp
28385 7518           89E5                       mov	bp,sp
28386 751A           83C4                   F6  add	sp,*-$A
28387                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28388 751D           8A46         04            mov	al,4[bp]
28389 7520           24                     01  and	al,*1
28390 7522           84C0                       test	al,al
28391 7524         0F84         02AA            beq 	.26F
28392                       00007528            .270:
28393                                           ! 3966         inb(0x3da);
28394                                           ! Debug: list int = const $3DA (used reg = )
28395 7528           B8                   03DA  mov	ax,#$3DA
28396 752B           50                         push	ax
28397                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28398 752C           E8         0708            call	_inb
28399 752F           44                         inc	sp
28400 7530           44                         inc	sp
28401                                           !BCC_EOS
28402                                           ! 3967         crtc_addr = read_word(ES, BX + 0x40);
28403                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28404 7531           8B46         08            mov	ax,8[bp]
28405                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28406 7534           05                   0040  add	ax,*$40
28407 7537           50                         push	ax
28408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28409 7538           FF76         06            push	6[bp]
28410                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28411 753B           E8         06B6            call	_read_word
28412 753E           83C4                   04  add	sp,*4
28413                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28414 7541           8946         FC            mov	-4[bp],ax
28415                                           !BCC_EOS
28416                                           ! 3968         addr1 = BX;
28417                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28418 7544           8B46         08            mov	ax,8[bp]
28419 7547           8946         F8            mov	-8[bp],ax
28420                                           !BCC_EOS
28421                                           ! 3969         BX += 5;
28422                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28423 754A           8B46         08            mov	ax,8[bp]
28424 754D           05                   0005  add	ax,*5
28425 7550           8946         08            mov	8[bp],ax
28426                                           !BCC_EOS
28427                                           ! 3970         for(i=1;i<=4;i++){
28428                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28429 7553           B8                   0001  mov	ax,*1
28430 7556           8946         FE            mov	-2[bp],ax
28431                                           !BCC_EOS
28432                                           !BCC_EOS
28433 7559           EB           34            jmp .273
28434                       0000755B            .274:
28435                                           ! 3971             outb(0x3c4, i);
28436                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28437 755B           FF76         FE            push	-2[bp]
28438                                           ! Debug: list int = const $3C4 (used reg = )
28439 755E           B8                   03C4  mov	ax,#$3C4
28440 7561           50                         push	ax
28441                                           ! Debug: func () void = outb+0 (used reg = )
28442 7562           E8         06E8            call	_outb
28443 7565           83C4                   04  add	sp,*4
28444                                           !BCC_EOS
28445                                           ! 3972             outb(0x3c5, read_byte(ES, BX)); BX++;
28446                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28447 7568           FF76         08            push	8[bp]
28448                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28449 756B           FF76         06            push	6[bp]
28450                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28451 756E           E8         0670            call	_read_byte
28452 7571           83C4                   04  add	sp,*4
28453                                           ! Debug: list unsigned char = al+0 (used reg = )
28454 7574           30E4                       xor	ah,ah
28455 7576           50                         push	ax
28456                                           ! Debug: list int = const $3C5 (used reg = )
28457 7577           B8                   03C5  mov	ax,#$3C5
28458 757A           50                         push	ax
28459                                           ! Debug: func () void = outb+0 (used reg = )
28460 757B           E8         06CF            call	_outb
28461 757E           83C4                   04  add	sp,*4
28462                                           !BCC_EOS
28463                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28464 7581           8B46         08            mov	ax,8[bp]
28465 7584           40                         inc	ax
28466 7585           8946         08            mov	8[bp],ax
28467                                           !BCC_EOS
28468                                           ! 3973         }
28469                                           ! 3974         outb(0x3c4, 0);
28470                       00007588            .272:
28471                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28472 7588           8B46         FE            mov	ax,-2[bp]
28473 758B           40                         inc	ax
28474 758C           8946         FE            mov	-2[bp],ax
28475                       0000758F            .273:
28476                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28477 758F           8B46         FE            mov	ax,-2[bp]
28478 7592           3D                   0004  cmp	ax,*4
28479 7595           76           C4            jbe	.274
28480                       00007597            .275:
28481                       00007597            .271:
28482                                           ! Debug: list int = const 0 (used reg = )
28483 7597           31C0                       xor	ax,ax
28484 7599           50                         push	ax
28485                                           ! Debug: list int = const $3C4 (used reg = )
28486 759A           B8                   03C4  mov	ax,#$3C4
28487 759D           50                         push	ax
28488                                           ! Debug: func () void = outb+0 (used reg = )
28489 759E           E8         06AC            call	_outb
28490 75A1           83C4                   04  add	sp,*4
28491                                           !BCC_EOS
28492                                           ! 3975         outb(0x3c5, read_byte(ES, BX)); BX++;
28493                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28494 75A4           FF76         08            push	8[bp]
28495                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28496 75A7           FF76         06            push	6[bp]
28497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28498 75AA           E8         0634            call	_read_byte
28499 75AD           83C4                   04  add	sp,*4
28500                                           ! Debug: list unsigned char = al+0 (used reg = )
28501 75B0           30E4                       xor	ah,ah
28502 75B2           50                         push	ax
28503                                           ! Debug: list int = const $3C5 (used reg = )
28504 75B3           B8                   03C5  mov	ax,#$3C5
28505 75B6           50                         push	ax
28506                                           ! Debug: func () void = outb+0 (used reg = )
28507 75B7           E8         0693            call	_outb
28508 75BA           83C4                   04  add	sp,*4
28509                                           !BCC_EOS
28510                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28511 75BD           8B46         08            mov	ax,8[bp]
28512 75C0           40                         inc	ax
28513 75C1           8946         08            mov	8[bp],ax
28514                                           !BCC_EOS
28515                                           ! 3976         outw(crtc_addr,0x0011);
28516                                           ! Debug: list int = const $11 (used reg = )
28517 75C4           B8                   0011  mov	ax,*$11
28518 75C7           50                         push	ax
28519                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28520 75C8           FF76         FC            push	-4[bp]
28521                                           ! Debug: func () void = outw+0 (used reg = )
28522 75CB           E8         068F            call	_outw
28523 75CE           83C4                   04  add	sp,*4
28524                                           !BCC_EOS
28525                                           ! 3977         for(i=0;i<=0x18;i++) {
28526                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28527 75D1           31C0                       xor	ax,ax
28528 75D3           8946         FE            mov	-2[bp],ax
28529                                           !BCC_EOS
28530                                           !BCC_EOS
28531 75D6           EB           3C            jmp .278
28532                       000075D8            .279:
28533                                           ! 3978             if (i != 0x11) {
28534                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28535 75D8           8B46         FE            mov	ax,-2[bp]
28536 75DB           3D                   0011  cmp	ax,*$11
28537 75DE           74           26            je  	.27A
28538                       000075E0            .27B:
28539                                           ! 3979                 outb(crtc_addr,i);
28540                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28541 75E0           FF76         FE            push	-2[bp]
28542                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28543 75E3           FF76         FC            push	-4[bp]
28544                                           ! Debug: func () void = outb+0 (used reg = )
28545 75E6           E8         0664            call	_outb
28546 75E9           83C4                   04  add	sp,*4
28547                                           !BCC_EOS
28548                                           ! 3980                 outb(crtc_addr+1, read_byte(ES, BX));
28549                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28550 75EC           FF76         08            push	8[bp]
28551                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28552 75EF           FF76         06            push	6[bp]
28553                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28554 75F2           E8         05EC            call	_read_byte
28555 75F5           83C4                   04  add	sp,*4
28556                                           ! Debug: list unsigned char = al+0 (used reg = )
28557 75F8           30E4                       xor	ah,ah
28558 75FA           50                         push	ax
28559                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28560 75FB           8B46         FC            mov	ax,-4[bp]
28561                                           ! Debug: list unsigned int = ax+1 (used reg = )
28562 75FE           40                         inc	ax
28563 75FF           50                         push	ax
28564                                           ! Debug: func () void = outb+0 (used reg = )
28565 7600           E8         064A            call	_outb
28566 7603           83C4                   04  add	sp,*4
28567                                           !BCC_EOS
28568                                           ! 3981             }
28569                                           ! 3982             BX++;
28570                       00007606            .27A:
28571                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28572 7606           8B46         08            mov	ax,8[bp]
28573 7609           40                         inc	ax
28574 760A           8946         08            mov	8[bp],ax
28575                                           !BCC_EOS
28576                                           ! 3983         }
28577                                           ! 3984         v = inb(0x3cc) & ~0x01;
28578                       0000760D            .277:
28579                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28580 760D           8B46         FE            mov	ax,-2[bp]
28581 7610           40                         inc	ax
28582 7611           8946         FE            mov	-2[bp],ax
28583                       00007614            .278:
28584                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28585 7614           8B46         FE            mov	ax,-2[bp]
28586 7617           3D                   0018  cmp	ax,*$18
28587 761A           76           BC            jbe	.279
28588                       0000761C            .27C:
28589                       0000761C            .276:
28590                                           ! Debug: list int = const $3CC (used reg = )
28591 761C           B8                   03CC  mov	ax,#$3CC
28592 761F           50                         push	ax
28593                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28594 7620           E8         0614            call	_inb
28595 7623           44                         inc	sp
28596 7624           44                         inc	sp
28597                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28598 7625           24                     FE  and	al,#$FE
28599                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28600 7627           30E4                       xor	ah,ah
28601 7629           8946         FA            mov	-6[bp],ax
28602                                           !BCC_EOS
28603                                           ! 3985         if (crtc_addr = 0x3d4)
28604                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28605 762C           B8                   03D4  mov	ax,#$3D4
28606 762F           8946         FC            mov	-4[bp],ax
28607 7632           85C0                       test	ax,ax
28608 7634           74           08            je  	.27D
28609                       00007636            .27E:
28610                                           ! 3986             v |= 0x01;
28611                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28612 7636           8B46         FA            mov	ax,-6[bp]
28613 7639           0C                     01  or	al,*1
28614 763B           8946         FA            mov	-6[bp],ax
28615                                           !BCC_EOS
28616                                           ! 3987         outb(0x3c2, v);
28617                       0000763E            .27D:
28618                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28619 763E           FF76         FA            push	-6[bp]
28620                                           ! Debug: list int = const $3C2 (used reg = )
28621 7641           B8                   03C2  mov	ax,#$3C2
28622 7644           50                         push	ax
28623                                           ! Debug: func () void = outb+0 (used reg = )
28624 7645           E8         0605            call	_outb
28625 7648           83C4                   04  add	sp,*4
28626                                           !BCC_EOS
28627                                           ! 3988         outb(crtc_addr, 0x11);
28628                                           ! Debug: list int = const $11 (used reg = )
28629 764B           B8                   0011  mov	ax,*$11
28630 764E           50                         push	ax
28631                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28632 764F           FF76         FC            push	-4[bp]
28633                                           ! Debug: func () void = outb+0 (used reg = )
28634 7652           E8         05F8            call	_outb
28635 7655           83C4                   04  add	sp,*4
28636                                           !BCC_EOS
28637                                           ! 3989         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28638                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28639 7658           8B46         08            mov	ax,8[bp]
28640                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28641                                           ! Debug: list unsigned int = ax-7 (used reg = )
28642 765B           05                   FFF9  add	ax,*-7
28643 765E           50                         push	ax
28644                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28645 765F           FF76         06            push	6[bp]
28646                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28647 7662           E8         057C            call	_read_byte
28648 7665           83C4                   04  add	sp,*4
28649                                           ! Debug: list unsigned char = al+0 (used reg = )
28650 7668           30E4                       xor	ah,ah
28651 766A           50                         push	ax
28652                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28653 766B           8B46         FC            mov	ax,-4[bp]
28654                                           ! Debug: list unsigned int = ax+1 (used reg = )
28655 766E           40                         inc	ax
28656 766F           50                         push	ax
28657                                           ! Debug: func () void = outb+0 (used reg = )
28658 7670           E8         05DA            call	_outb
28659 7673           83C4                   04  add	sp,*4
28660                                           !BCC_EOS
28661                                           ! 3990         ar_index = read_byte(ES, addr1 + 0x03);
28662                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28663 7676           8B46         F8            mov	ax,-8[bp]
28664                                           ! Debug: list unsigned int = ax+3 (used reg = )
28665 7679           05                   0003  add	ax,*3
28666 767C           50                         push	ax
28667                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28668 767D           FF76         06            push	6[bp]
28669                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28670 7680           E8         055E            call	_read_byte
28671 7683           83C4                   04  add	sp,*4
28672                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28673 7686           30E4                       xor	ah,ah
28674 7688           8946         F6            mov	-$A[bp],ax
28675                                           !BCC_EOS
28676                                           ! 3991         inb(0x3da);
28677                                           ! Debug: list int = const $3DA (used reg = )
28678 768B           B8                   03DA  mov	ax,#$3DA
28679 768E           50                         push	ax
28680                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28681 768F           E8         05A5            call	_inb
28682 7692           44                         inc	sp
28683 7693           44                         inc	sp
28684                                           !BCC_EOS
28685                                           ! 3992         for(i=0;i<=0x13;i++) {
28686                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28687 7694           31C0                       xor	ax,ax
28688 7696           8946         FE            mov	-2[bp],ax
28689                                           !BCC_EOS
28690                                           !BCC_EOS
28691 7699           EB           3C            jmp .281
28692                       0000769B            .282:
28693                                           ! 3993             outb(0x3c0, i | (ar_index & 0x20));
28694                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28695 769B           8A46         F6            mov	al,-$A[bp]
28696 769E           24                     20  and	al,*$20
28697                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28698                                           ! Debug: expression subtree swapping
28699 76A0           30E4                       xor	ah,ah
28700 76A2           0B46         FE            or	ax,-2[bp]
28701                                           ! Debug: list unsigned int = ax+0 (used reg = )
28702 76A5           50                         push	ax
28703                                           ! Debug: list int = const $3C0 (used reg = )
28704 76A6           B8                   03C0  mov	ax,#$3C0
28705 76A9           50                         push	ax
28706                                           ! Debug: func () void = outb+0 (used reg = )
28707 76AA           E8         05A0            call	_outb
28708 76AD           83C4                   04  add	sp,*4
28709                                           !BCC_EOS
28710                                           ! 3994             outb(0x3c0, read_byte(ES, BX)); BX++;
28711                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28712 76B0           FF76         08            push	8[bp]
28713                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28714 76B3           FF76         06            push	6[bp]
28715                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28716 76B6           E8         0528            call	_read_byte
28717 76B9           83C4                   04  add	sp,*4
28718                                           ! Debug: list unsigned char = al+0 (used reg = )
28719 76BC           30E4                       xor	ah,ah
28720 76BE           50                         push	ax
28721                                           ! Debug: list int = const $3C0 (used reg = )
28722 76BF           B8                   03C0  mov	ax,#$3C0
28723 76C2           50                         push	ax
28724                                           ! Debug: func () void = outb+0 (used reg = )
28725 76C3           E8         0587            call	_outb
28726 76C6           83C4                   04  add	sp,*4
28727                                           !BCC_EOS
28728                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28729 76C9           8B46         08            mov	ax,8[bp]
28730 76CC           40                         inc	ax
28731 76CD           8946         08            mov	8[bp],ax
28732                                           !BCC_EOS
28733                                           ! 3995         }
28734                                           ! 3996         outb(0x3c0, ar_index);
28735                       000076D0            .280:
28736                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28737 76D0           8B46         FE            mov	ax,-2[bp]
28738 76D3           40                         inc	ax
28739 76D4           8946         FE            mov	-2[bp],ax
28740                       000076D7            .281:
28741                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28742 76D7           8B46         FE            mov	ax,-2[bp]
28743 76DA           3D                   0013  cmp	ax,*$13
28744 76DD           76           BC            jbe	.282
28745                       000076DF            .283:
28746                       000076DF            .27F:
28747                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28748 76DF           FF76         F6            push	-$A[bp]
28749                                           ! Debug: list int = const $3C0 (used reg = )
28750 76E2           B8                   03C0  mov	ax,#$3C0
28751 76E5           50                         push	ax
28752                                           ! Debug: func () void = outb+0 (used reg = )
28753 76E6           E8         0564            call	_outb
28754 76E9           83C4                   04  add	sp,*4
28755                                           !BCC_EOS
28756                                           ! 3997         inb(0x3da);
28757                                           ! Debug: list int = const $3DA (used reg = )
28758 76EC           B8                   03DA  mov	ax,#$3DA
28759 76EF           50                         push	ax
28760                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28761 76F0           E8         0544            call	_inb
28762 76F3           44                         inc	sp
28763 76F4           44                         inc	sp
28764                                           !BCC_EOS
28765                                           ! 3998         for(i=0;i<=8;i++) {
28766                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28767 76F5           31C0                       xor	ax,ax
28768 76F7           8946         FE            mov	-2[bp],ax
28769                                           !BCC_EOS
28770                                           !BCC_EOS
28771 76FA           EB           34            jmp .286
28772                       000076FC            .287:
28773                                           ! 3999             outb(0x3ce,i);
28774                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28775 76FC           FF76         FE            push	-2[bp]
28776                                           ! Debug: list int = const $3CE (used reg = )
28777 76FF           B8                   03CE  mov	ax,#$3CE
28778 7702           50                         push	ax
28779                                           ! Debug: func () void = outb+0 (used reg = )
28780 7703           E8         0547            call	_outb
28781 7706           83C4                   04  add	sp,*4
28782                                           !BCC_EOS
28783                                           ! 4000             outb(0x3cf, read_byte(ES, BX)); BX++;
28784                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28785 7709           FF76         08            push	8[bp]
28786                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28787 770C           FF76         06            push	6[bp]
28788                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28789 770F           E8         04CF            call	_read_byte
28790 7712           83C4                   04  add	sp,*4
28791                                           ! Debug: list unsigned char = al+0 (used reg = )
28792 7715           30E4                       xor	ah,ah
28793 7717           50                         push	ax
28794                                           ! Debug: list int = const $3CF (used reg = )
28795 7718           B8                   03CF  mov	ax,#$3CF
28796 771B           50                         push	ax
28797                                           ! Debug: func () void = outb+0 (used reg = )
28798 771C           E8         052E            call	_outb
28799 771F           83C4                   04  add	sp,*4
28800                                           !BCC_EOS
28801                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28802 7722           8B46         08            mov	ax,8[bp]
28803 7725           40                         inc	ax
28804 7726           8946         08            mov	8[bp],ax
28805                                           !BCC_EOS
28806                                           ! 4001         }
28807                                           ! 4002         BX += 2;
28808                       00007729            .285:
28809                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28810 7729           8B46         FE            mov	ax,-2[bp]
28811 772C           40                         inc	ax
28812 772D           8946         FE            mov	-2[bp],ax
28813                       00007730            .286:
28814                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28815 7730           8B46         FE            mov	ax,-2[bp]
28816 7733           3D                   0008  cmp	ax,*8
28817 7736           76           C4            jbe	.287
28818                       00007738            .288:
28819                       00007738            .284:
28820                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28821 7738           8B46         08            mov	ax,8[bp]
28822 773B           40                         inc	ax
28823 773C           40                         inc	ax
28824 773D           8946         08            mov	8[bp],ax
28825                                           !BCC_EOS
28826                                           ! 4003         BX += 4;
28827                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28828 7740           8B46         08            mov	ax,8[bp]
28829 7743           05                   0004  add	ax,*4
28830 7746           8946         08            mov	8[bp],ax
28831                                           !BCC_EOS
28832                                           ! 4004         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28833                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28834 7749           FF76         F8            push	-8[bp]
28835                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28836 774C           FF76         06            push	6[bp]
28837                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28838 774F           E8         048F            call	_read_byte
28839 7752           83C4                   04  add	sp,*4
28840                                           ! Debug: list unsigned char = al+0 (used reg = )
28841 7755           30E4                       xor	ah,ah
28842 7757           50                         push	ax
28843                                           ! Debug: list int = const $3C4 (used reg = )
28844 7758           B8                   03C4  mov	ax,#$3C4
28845 775B           50                         push	ax
28846                                           ! Debug: func () void = outb+0 (used reg = )
28847 775C           E8         04EE            call	_outb
28848 775F           83C4                   04  add	sp,*4
28849                                           !BCC_EOS
28850                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28851 7762           8B46         F8            mov	ax,-8[bp]
28852 7765           40                         inc	ax
28853 7766           8946         F8            mov	-8[bp],ax
28854                                           !BCC_EOS
28855                                           ! 4005         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28856                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28857 7769           FF76         F8            push	-8[bp]
28858                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28859 776C           FF76         06            push	6[bp]
28860                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28861 776F           E8         046F            call	_read_byte
28862 7772           83C4                   04  add	sp,*4
28863                                           ! Debug: list unsigned char = al+0 (used reg = )
28864 7775           30E4                       xor	ah,ah
28865 7777           50                         push	ax
28866                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28867 7778           FF76         FC            push	-4[bp]
28868                                           ! Debug: func () void = outb+0 (used reg = )
28869 777B           E8         04CF            call	_outb
28870 777E           83C4                   04  add	sp,*4
28871                                           !BCC_EOS
28872                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28873 7781           8B46         F8            mov	ax,-8[bp]
28874 7784           40                         inc	ax
28875 7785           8946         F8            mov	-8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 4006         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28878                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28879 7788           FF76         F8            push	-8[bp]
28880                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28881 778B           FF76         06            push	6[bp]
28882                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28883 778E           E8         0450            call	_read_byte
28884 7791           83C4                   04  add	sp,*4
28885                                           ! Debug: list unsigned char = al+0 (used reg = )
28886 7794           30E4                       xor	ah,ah
28887 7796           50                         push	ax
28888                                           ! Debug: list int = const $3CE (used reg = )
28889 7797           B8                   03CE  mov	ax,#$3CE
28890 779A           50                         push	ax
28891                                           ! Debug: func () void = outb+0 (used reg = )
28892 779B           E8         04AF            call	_outb
28893 779E           83C4                   04  add	sp,*4
28894                                           !BCC_EOS
28895                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28896 77A1           8B46         F8            mov	ax,-8[bp]
28897 77A4           40                         inc	ax
28898 77A5           8946         F8            mov	-8[bp],ax
28899                                           !BCC_EOS
28900                                           ! 4007         addr1++;
28901                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28902 77A8           8B46         F8            mov	ax,-8[bp]
28903 77AB           40                         inc	ax
28904 77AC           8946         F8            mov	-8[bp],ax
28905                                           !BCC_EOS
28906                                           ! 4008         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28907                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28908 77AF           FF76         F8            push	-8[bp]
28909                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28910 77B2           FF76         06            push	6[bp]
28911                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28912 77B5           E8         0429            call	_read_byte
28913 77B8           83C4                   04  add	sp,*4
28914                                           ! Debug: list unsigned char = al+0 (used reg = )
28915 77BB           30E4                       xor	ah,ah
28916 77BD           50                         push	ax
28917                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28918 77BE           8B46         FC            mov	ax,-4[bp]
28919                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28920                                           ! Debug: list unsigned int = ax+6 (used reg = )
28921 77C1           05                   0006  add	ax,*6
28922 77C4           50                         push	ax
28923                                           ! Debug: func () void = outb+0 (used reg = )
28924 77C5           E8         0485            call	_outb
28925 77C8           83C4                   04  add	sp,*4
28926                                           !BCC_EOS
28927                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28928 77CB           8B46         F8            mov	ax,-8[bp]
28929 77CE           40                         inc	ax
28930 77CF           8946         F8            mov	-8[bp],ax
28931                                           !BCC_EOS
28932                                           ! 4009     }
28933                                           ! 4010     if (CX & 2) {
28934                       000077D2            .26F:
28935                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28936 77D2           8A46         04            mov	al,4[bp]
28937 77D5           24                     02  and	al,*2
28938 77D7           84C0                       test	al,al
28939 77D9         0F84         0270            beq 	.289
28940                       000077DD            .28A:
28941                                           ! 4011         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28942                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28943 77DD           FF76         08            push	8[bp]
28944                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28945 77E0           FF76         06            push	6[bp]
28946                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28947 77E3           E8         03FB            call	_read_byte
28948 77E6           83C4                   04  add	sp,*4
28949                                           ! Debug: list unsigned char = al+0 (used reg = )
28950 77E9           30E4                       xor	ah,ah
28951 77EB           50                         push	ax
28952                                           ! Debug: list int = const $49 (used reg = )
28953 77EC           B8                   0049  mov	ax,*$49
28954 77EF           50                         push	ax
28955                                           ! Debug: list int = const $40 (used reg = )
28956 77F0           B8                   0040  mov	ax,*$40
28957 77F3           50                         push	ax
28958                                           ! Debug: func () void = write_byte+0 (used reg = )
28959 77F4           E8         0410            call	_write_byte
28960 77F7           83C4                   06  add	sp,*6
28961                                           !BCC_EOS
28962                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28963 77FA           8B46         08            mov	ax,8[bp]
28964 77FD           40                         inc	ax
28965 77FE           8946         08            mov	8[bp],ax
28966                                           !BCC_EOS
28967                                           ! 4012         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28968                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28969 7801           FF76         08            push	8[bp]
28970                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28971 7804           FF76         06            push	6[bp]
28972                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28973 7807           E8         03EA            call	_read_word
28974 780A           83C4                   04  add	sp,*4
28975                                           ! Debug: list unsigned short = ax+0 (used reg = )
28976 780D           50                         push	ax
28977                                           ! Debug: list int = const $4A (used reg = )
28978 780E           B8                   004A  mov	ax,*$4A
28979 7811           50                         push	ax
28980                                           ! Debug: list int = const $40 (used reg = )
28981 7812           B8                   0040  mov	ax,*$40
28982 7815           50                         push	ax
28983                                           ! Debug: func () void = write_word+0 (used reg = )
28984 7816           E8         0406            call	_write_word
28985 7819           83C4                   06  add	sp,*6
28986                                           !BCC_EOS
28987                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28988 781C           8B46         08            mov	ax,8[bp]
28989 781F           40                         inc	ax
28990 7820           40                         inc	ax
28991 7821           8946         08            mov	8[bp],ax
28992                                           !BCC_EOS
28993                                           ! 4013         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 7824           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 7827           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28999 782A           E8         03C7            call	_read_word
29000 782D           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned short = ax+0 (used reg = )
29002 7830           50                         push	ax
29003                                           ! Debug: list int = const $4C (used reg = )
29004 7831           B8                   004C  mov	ax,*$4C
29005 7834           50                         push	ax
29006                                           ! Debug: list int = const $40 (used reg = )
29007 7835           B8                   0040  mov	ax,*$40
29008 7838           50                         push	ax
29009                                           ! Debug: func () void = write_word+0 (used reg = )
29010 7839           E8         03E3            call	_write_word
29011 783C           83C4                   06  add	sp,*6
29012                                           !BCC_EOS
29013                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29014 783F           8B46         08            mov	ax,8[bp]
29015 7842           40                         inc	ax
29016 7843           40                         inc	ax
29017 7844           8946         08            mov	8[bp],ax
29018                                           !BCC_EOS
29019                                           ! 4014         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29020                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29021 7847           FF76         08            push	8[bp]
29022                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29023 784A           FF76         06            push	6[bp]
29024                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29025 784D           E8         03A4            call	_read_word
29026 7850           83C4                   04  add	sp,*4
29027                                           ! Debug: list unsigned short = ax+0 (used reg = )
29028 7853           50                         push	ax
29029                                           ! Debug: list int = const $63 (used reg = )
29030 7854           B8                   0063  mov	ax,*$63
29031 7857           50                         push	ax
29032                                           ! Debug: list int = const $40 (used reg = )
29033 7858           B8                   0040  mov	ax,*$40
29034 785B           50                         push	ax
29035                                           ! Debug: func () void = write_word+0 (used reg = )
29036 785C           E8         03C0            call	_write_word
29037 785F           83C4                   06  add	sp,*6
29038                                           !BCC_EOS
29039                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29040 7862           8B46         08            mov	ax,8[bp]
29041 7865           40                         inc	ax
29042 7866           40                         inc	ax
29043 7867           8946         08            mov	8[bp],ax
29044                                           !BCC_EOS
29045                                           ! 4015         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29046                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29047 786A           FF76         08            push	8[bp]
29048                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29049 786D           FF76         06            push	6[bp]
29050                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29051 7870           E8         036E            call	_read_byte
29052 7873           83C4                   04  add	sp,*4
29053                                           ! Debug: list unsigned char = al+0 (used reg = )
29054 7876           30E4                       xor	ah,ah
29055 7878           50                         push	ax
29056                                           ! Debug: list int = const $84 (used reg = )
29057 7879           B8                   0084  mov	ax,#$84
29058 787C           50                         push	ax
29059                                           ! Debug: list int = const $40 (used reg = )
29060 787D           B8                   0040  mov	ax,*$40
29061 7880           50                         push	ax
29062                                           ! Debug: func () void = write_byte+0 (used reg = )
29063 7881           E8         0383            call	_write_byte
29064 7884           83C4                   06  add	sp,*6
29065                                           !BCC_EOS
29066                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29067 7887           8B46         08            mov	ax,8[bp]
29068 788A           40                         inc	ax
29069 788B           8946         08            mov	8[bp],ax
29070                                           !BCC_EOS
29071                                           ! 4016         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29072                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29073 788E           FF76         08            push	8[bp]
29074                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29075 7891           FF76         06            push	6[bp]
29076                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29077 7894           E8         035D            call	_read_word
29078 7897           83C4                   04  add	sp,*4
29079                                           ! Debug: list unsigned short = ax+0 (used reg = )
29080 789A           50                         push	ax
29081                                           ! Debug: list int = const $85 (used reg = )
29082 789B           B8                   0085  mov	ax,#$85
29083 789E           50                         push	ax
29084                                           ! Debug: list int = const $40 (used reg = )
29085 789F           B8                   0040  mov	ax,*$40
29086 78A2           50                         push	ax
29087                                           ! Debug: func () void = write_word+0 (used reg = )
29088 78A3           E8         0379            call	_write_word
29089 78A6           83C4                   06  add	sp,*6
29090                                           !BCC_EOS
29091                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29092 78A9           8B46         08            mov	ax,8[bp]
29093 78AC           40                         inc	ax
29094 78AD           40                         inc	ax
29095 78AE           8946         08            mov	8[bp],ax
29096                                           !BCC_EOS
29097                                           ! 4017         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29098                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29099 78B1           FF76         08            push	8[bp]
29100                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29101 78B4           FF76         06            push	6[bp]
29102                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29103 78B7           E8         0327            call	_read_byte
29104 78BA           83C4                   04  add	sp,*4
29105                                           ! Debug: list unsigned char = al+0 (used reg = )
29106 78BD           30E4                       xor	ah,ah
29107 78BF           50                         push	ax
29108                                           ! Debug: list int = const $87 (used reg = )
29109 78C0           B8                   0087  mov	ax,#$87
29110 78C3           50                         push	ax
29111                                           ! Debug: list int = const $40 (used reg = )
29112 78C4           B8                   0040  mov	ax,*$40
29113 78C7           50                         push	ax
29114                                           ! Debug: func () void = write_byte+0 (used reg = )
29115 78C8           E8         033C            call	_write_byte
29116 78CB           83C4                   06  add	sp,*6
29117                                           !BCC_EOS
29118                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29119 78CE           8B46         08            mov	ax,8[bp]
29120 78D1           40                         inc	ax
29121 78D2           8946         08            mov	8[bp],ax
29122                                           !BCC_EOS
29123                                           ! 4018         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29124                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29125 78D5           FF76         08            push	8[bp]
29126                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29127 78D8           FF76         06            push	6[bp]
29128                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29129 78DB           E8         0303            call	_read_byte
29130 78DE           83C4                   04  add	sp,*4
29131                                           ! Debug: list unsigned char = al+0 (used reg = )
29132 78E1           30E4                       xor	ah,ah
29133 78E3           50                         push	ax
29134                                           ! Debug: list int = const $88 (used reg = )
29135 78E4           B8                   0088  mov	ax,#$88
29136 78E7           50                         push	ax
29137                                           ! Debug: list int = const $40 (used reg = )
29138 78E8           B8                   0040  mov	ax,*$40
29139 78EB           50                         push	ax
29140                                           ! Debug: func () void = write_byte+0 (used reg = )
29141 78EC           E8         0318            call	_write_byte
29142 78EF           83C4                   06  add	sp,*6
29143                                           !BCC_EOS
29144                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29145 78F2           8B46         08            mov	ax,8[bp]
29146 78F5           40                         inc	ax
29147 78F6           8946         08            mov	8[bp],ax
29148                                           !BCC_EOS
29149                                           ! 4019         write_byte(0x40,0x89, read_byte(ES, BX)
29150                                           ! 4019 ); BX++;
29151                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29152 78F9           FF76         08            push	8[bp]
29153                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29154 78FC           FF76         06            push	6[bp]
29155                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29156 78FF           E8         02DF            call	_read_byte
29157 7902           83C4                   04  add	sp,*4
29158                                           ! Debug: list unsigned char = al+0 (used reg = )
29159 7905           30E4                       xor	ah,ah
29160 7907           50                         push	ax
29161                                           ! Debug: list int = const $89 (used reg = )
29162 7908           B8                   0089  mov	ax,#$89
29163 790B           50                         push	ax
29164                                           ! Debug: list int = const $40 (used reg = )
29165 790C           B8                   0040  mov	ax,*$40
29166 790F           50                         push	ax
29167                                           ! Debug: func () void = write_byte+0 (used reg = )
29168 7910           E8         02F4            call	_write_byte
29169 7913           83C4                   06  add	sp,*6
29170                                           !BCC_EOS
29171                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29172 7916           8B46         08            mov	ax,8[bp]
29173 7919           40                         inc	ax
29174 791A           8946         08            mov	8[bp],ax
29175                                           !BCC_EOS
29176                                           ! 4020         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29177                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29178 791D           FF76         08            push	8[bp]
29179                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29180 7920           FF76         06            push	6[bp]
29181                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29182 7923           E8         02CE            call	_read_word
29183 7926           83C4                   04  add	sp,*4
29184                                           ! Debug: list unsigned short = ax+0 (used reg = )
29185 7929           50                         push	ax
29186                                           ! Debug: list int = const $60 (used reg = )
29187 792A           B8                   0060  mov	ax,*$60
29188 792D           50                         push	ax
29189                                           ! Debug: list int = const $40 (used reg = )
29190 792E           B8                   0040  mov	ax,*$40
29191 7931           50                         push	ax
29192                                           ! Debug: func () void = write_word+0 (used reg = )
29193 7932           E8         02EA            call	_write_word
29194 7935           83C4                   06  add	sp,*6
29195                                           !BCC_EOS
29196                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29197 7938           8B46         08            mov	ax,8[bp]
29198 793B           40                         inc	ax
29199 793C           40                         inc	ax
29200 793D           8946         08            mov	8[bp],ax
29201                                           !BCC_EOS
29202                                           ! 4021         for(i=0;i<8;i++) {
29203                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29204 7940           31C0                       xor	ax,ax
29205 7942           8946         FE            mov	-2[bp],ax
29206                                           !BCC_EOS
29207                                           !BCC_EOS
29208 7945           EB           2F            jmp .28D
29209                       00007947            .28E:
29210                                           ! 4022             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29211                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29212 7947           FF76         08            push	8[bp]
29213                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29214 794A           FF76         06            push	6[bp]
29215                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29216 794D           E8         02A4            call	_read_word
29217 7950           83C4                   04  add	sp,*4
29218                                           ! Debug: list unsigned short = ax+0 (used reg = )
29219 7953           50                         push	ax
29220                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29221                                           ! Debug: expression subtree swapping
29222 7954           8B46         FE            mov	ax,-2[bp]
29223 7957           D1E0                       shl	ax,*1
29224                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29225                                           ! Debug: expression subtree swapping
29226                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29227 7959           05                   0050  add	ax,*$50
29228 795C           50                         push	ax
29229                                           ! Debug: list int = const $40 (used reg = )
29230 795D           B8                   0040  mov	ax,*$40
29231 7960           50                         push	ax
29232                                           ! Debug: func () void = write_word+0 (used reg = )
29233 7961           E8         02BB            call	_write_word
29234 7964           83C4                   06  add	sp,*6
29235                                           !BCC_EOS
29236                                           ! 4023             BX += 2;
29237                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29238 7967           8B46         08            mov	ax,8[bp]
29239 796A           40                         inc	ax
29240 796B           40                         inc	ax
29241 796C           8946         08            mov	8[bp],ax
29242                                           !BCC_EOS
29243                                           ! 4024         }
29244                                           ! 4025         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29245                       0000796F            .28C:
29246                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29247 796F           8B46         FE            mov	ax,-2[bp]
29248 7972           40                         inc	ax
29249 7973           8946         FE            mov	-2[bp],ax
29250                       00007976            .28D:
29251                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29252 7976           8B46         FE            mov	ax,-2[bp]
29253 7979           3D                   0008  cmp	ax,*8
29254 797C           72           C9            jb 	.28E
29255                       0000797E            .28F:
29256                       0000797E            .28B:
29257                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29258 797E           FF76         08            push	8[bp]
29259                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29260 7981           FF76         06            push	6[bp]
29261                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29262 7984           E8         026D            call	_read_word
29263 7987           83C4                   04  add	sp,*4
29264                                           ! Debug: list unsigned short = ax+0 (used reg = )
29265 798A           50                         push	ax
29266                                           ! Debug: list int = const $4E (used reg = )
29267 798B           B8                   004E  mov	ax,*$4E
29268 798E           50                         push	ax
29269                                           ! Debug: list int = const $40 (used reg = )
29270 798F           B8                   0040  mov	ax,*$40
29271 7992           50                         push	ax
29272                                           ! Debug: func () void = write_word+0 (used reg = )
29273 7993           E8         0289            call	_write_word
29274 7996           83C4                   06  add	sp,*6
29275                                           !BCC_EOS
29276                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29277 7999           8B46         08            mov	ax,8[bp]
29278 799C           40                         inc	ax
29279 799D           40                         inc	ax
29280 799E           8946         08            mov	8[bp],ax
29281                                           !BCC_EOS
29282                                           ! 4026         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29283                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29284 79A1           FF76         08            push	8[bp]
29285                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29286 79A4           FF76         06            push	6[bp]
29287                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29288 79A7           E8         0237            call	_read_byte
29289 79AA           83C4                   04  add	sp,*4
29290                                           ! Debug: list unsigned char = al+0 (used reg = )
29291 79AD           30E4                       xor	ah,ah
29292 79AF           50                         push	ax
29293                                           ! Debug: list int = const $62 (used reg = )
29294 79B0           B8                   0062  mov	ax,*$62
29295 79B3           50                         push	ax
29296                                           ! Debug: list int = const $40 (used reg = )
29297 79B4           B8                   0040  mov	ax,*$40
29298 79B7           50                         push	ax
29299                                           ! Debug: func () void = write_byte+0 (used reg = )
29300 79B8           E8         024C            call	_write_byte
29301 79BB           83C4                   06  add	sp,*6
29302                                           !BCC_EOS
29303                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29304 79BE           8B46         08            mov	ax,8[bp]
29305 79C1           40                         inc	ax
29306 79C2           8946         08            mov	8[bp],ax
29307                                           !BCC_EOS
29308                                           ! 4027         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29309                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29310 79C5           FF76         08            push	8[bp]
29311                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29312 79C8           FF76         06            push	6[bp]
29313                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29314 79CB           E8         0226            call	_read_word
29315 79CE           83C4                   04  add	sp,*4
29316                                           ! Debug: list unsigned short = ax+0 (used reg = )
29317 79D1           50                         push	ax
29318                                           ! Debug: list int = const $7C (used reg = )
29319 79D2           B8                   007C  mov	ax,*$7C
29320 79D5           50                         push	ax
29321                                           ! Debug: list int = const 0 (used reg = )
29322 79D6           31C0                       xor	ax,ax
29323 79D8           50                         push	ax
29324                                           ! Debug: func () void = write_word+0 (used reg = )
29325 79D9           E8         0243            call	_write_word
29326 79DC           83C4                   06  add	sp,*6
29327                                           !BCC_EOS
29328                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29329 79DF           8B46         08            mov	ax,8[bp]
29330 79E2           40                         inc	ax
29331 79E3           40                         inc	ax
29332 79E4           8946         08            mov	8[bp],ax
29333                                           !BCC_EOS
29334                                           ! 4028         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29335                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29336 79E7           FF76         08            push	8[bp]
29337                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29338 79EA           FF76         06            push	6[bp]
29339                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29340 79ED           E8         0204            call	_read_word
29341 79F0           83C4                   04  add	sp,*4
29342                                           ! Debug: list unsigned short = ax+0 (used reg = )
29343 79F3           50                         push	ax
29344                                           ! Debug: list int = const $7E (used reg = )
29345 79F4           B8                   007E  mov	ax,*$7E
29346 79F7           50                         push	ax
29347                                           ! Debug: list int = const 0 (used reg = )
29348 79F8           31C0                       xor	ax,ax
29349 79FA           50                         push	ax
29350                                           ! Debug: func () void = write_word+0 (used reg = )
29351 79FB           E8         0221            call	_write_word
29352 79FE           83C4                   06  add	sp,*6
29353                                           !BCC_EOS
29354                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29355 7A01           8B46         08            mov	ax,8[bp]
29356 7A04           40                         inc	ax
29357 7A05           40                         inc	ax
29358 7A06           8946         08            mov	8[bp],ax
29359                                           !BCC_EOS
29360                                           ! 4029         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29361                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29362 7A09           FF76         08            push	8[bp]
29363                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29364 7A0C           FF76         06            push	6[bp]
29365                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29366 7A0F           E8         01E2            call	_read_word
29367 7A12           83C4                   04  add	sp,*4
29368                                           ! Debug: list unsigned short = ax+0 (used reg = )
29369 7A15           50                         push	ax
29370                                           ! Debug: list int = const $10C (used reg = )
29371 7A16           B8                   010C  mov	ax,#$10C
29372 7A19           50                         push	ax
29373                                           ! Debug: list int = const 0 (used reg = )
29374 7A1A           31C0                       xor	ax,ax
29375 7A1C           50                         push	ax
29376                                           ! Debug: func () void = write_word+0 (used reg = )
29377 7A1D           E8         01FF            call	_write_word
29378 7A20           83C4                   06  add	sp,*6
29379                                           !BCC_EOS
29380                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29381 7A23           8B46         08            mov	ax,8[bp]
29382 7A26           40                         inc	ax
29383 7A27           40                         inc	ax
29384 7A28           8946         08            mov	8[bp],ax
29385                                           !BCC_EOS
29386                                           ! 4030         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29387                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29388 7A2B           FF76         08            push	8[bp]
29389                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29390 7A2E           FF76         06            push	6[bp]
29391                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29392 7A31           E8         01C0            call	_read_word
29393 7A34           83C4                   04  add	sp,*4
29394                                           ! Debug: list unsigned short = ax+0 (used reg = )
29395 7A37           50                         push	ax
29396                                           ! Debug: list int = const $10E (used reg = )
29397 7A38           B8                   010E  mov	ax,#$10E
29398 7A3B           50                         push	ax
29399                                           ! Debug: list int = const 0 (used reg = )
29400 7A3C           31C0                       xor	ax,ax
29401 7A3E           50                         push	ax
29402                                           ! Debug: func () void = write_word+0 (used reg = )
29403 7A3F           E8         01DD            call	_write_word
29404 7A42           83C4                   06  add	sp,*6
29405                                           !BCC_EOS
29406                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29407 7A45           8B46         08            mov	ax,8[bp]
29408 7A48           40                         inc	ax
29409 7A49           40                         inc	ax
29410 7A4A           8946         08            mov	8[bp],ax
29411                                           !BCC_EOS
29412                                           ! 4031     }
29413                                           ! 4032     if (CX & 4) {
29414                       00007A4D            .289:
29415                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29416 7A4D           8A46         04            mov	al,4[bp]
29417 7A50           24                     04  and	al,*4
29418 7A52           84C0                       test	al,al
29419 7A54         0F84         0096            beq 	.290
29420                       00007A58            .291:
29421                                           ! 4033         BX++;
29422                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29423 7A58           8B46         08            mov	ax,8[bp]
29424 7A5B           40                         inc	ax
29425 7A5C           8946         08            mov	8[bp],ax
29426                                           !BCC_EOS
29427                                           ! 4034         v = read_byte(ES, BX); BX++;
29428                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29429 7A5F           FF76         08            push	8[bp]
29430                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29431 7A62           FF76         06            push	6[bp]
29432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29433 7A65           E8         0179            call	_read_byte
29434 7A68           83C4                   04  add	sp,*4
29435                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29436 7A6B           30E4                       xor	ah,ah
29437 7A6D           8946         FA            mov	-6[bp],ax
29438                                           !BCC_EOS
29439                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29440 7A70           8B46         08            mov	ax,8[bp]
29441 7A73           40                         inc	ax
29442 7A74           8946         08            mov	8[bp],ax
29443                                           !BCC_EOS
29444                                           ! 4035         outb(0x3c6, read_byte(ES, BX)); BX++;
29445                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29446 7A77           FF76         08            push	8[bp]
29447                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29448 7A7A           FF76         06            push	6[bp]
29449                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29450 7A7D           E8         0161            call	_read_byte
29451 7A80           83C4                   04  add	sp,*4
29452                                           ! Debug: list unsigned char = al+0 (used reg = )
29453 7A83           30E4                       xor	ah,ah
29454 7A85           50                         push	ax
29455                                           ! Debug: list int = const $3C6 (used reg = )
29456 7A86           B8                   03C6  mov	ax,#$3C6
29457 7A89           50                         push	ax
29458                                           ! Debug: func () void = outb+0 (used reg = )
29459 7A8A           E8         01C0            call	_outb
29460 7A8D           83C4                   04  add	sp,*4
29461                                           !BCC_EOS
29462                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29463 7A90           8B46         08            mov	ax,8[bp]
29464 7A93           40                         inc	ax
29465 7A94           8946         08            mov	8[bp],ax
29466                                           !BCC_EOS
29467                                           ! 4036         outb(0x3c8,0x00);
29468                                           ! Debug: list int = const 0 (used reg = )
29469 7A97           31C0                       xor	ax,ax
29470 7A99           50                         push	ax
29471                                           ! Debug: list int = const $3C8 (used reg = )
29472 7A9A           B8                   03C8  mov	ax,#$3C8
29473 7A9D           50                         push	ax
29474                                           ! Debug: func () void = outb+0 (used reg = )
29475 7A9E           E8         01AC            call	_outb
29476 7AA1           83C4                   04  add	sp,*4
29477                                           !BCC_EOS
29478                                           ! 4037         for(i=0;i<256*3;i++) {
29479                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29480 7AA4           31C0                       xor	ax,ax
29481 7AA6           8946         FE            mov	-2[bp],ax
29482                                           !BCC_EOS
29483                                           !BCC_EOS
29484 7AA9           EB           27            jmp .294
29485                       00007AAB            .295:
29486                                           ! 4038             outb(0x3c9, read_byte(ES, BX)); BX++;
29487                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29488 7AAB           FF76         08            push	8[bp]
29489                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29490 7AAE           FF76         06            push	6[bp]
29491                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29492 7AB1           E8         012D            call	_read_byte
29493 7AB4           83C4                   04  add	sp,*4
29494                                           ! Debug: list unsigned char = al+0 (used reg = )
29495 7AB7           30E4                       xor	ah,ah
29496 7AB9           50                         push	ax
29497                                           ! Debug: list int = const $3C9 (used reg = )
29498 7ABA           B8                   03C9  mov	ax,#$3C9
29499 7ABD           50                         push	ax
29500                                           ! Debug: func () void = outb+0 (used reg = )
29501 7ABE           E8         018C            call	_outb
29502 7AC1           83C4                   04  add	sp,*4
29503                                           !BCC_EOS
29504                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29505 7AC4           8B46         08            mov	ax,8[bp]
29506 7AC7           40                         inc	ax
29507 7AC8           8946         08            mov	8[bp],ax
29508                                           !BCC_EOS
29509                                           ! 4039         }
29510                                           ! 4040         BX++;
29511                       00007ACB            .293:
29512                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29513 7ACB           8B46         FE            mov	ax,-2[bp]
29514 7ACE           40                         inc	ax
29515 7ACF           8946         FE            mov	-2[bp],ax
29516                       00007AD2            .294:
29517                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29518 7AD2           8B46         FE            mov	ax,-2[bp]
29519 7AD5           3D                   0300  cmp	ax,#$300
29520 7AD8           72           D1            jb 	.295
29521                       00007ADA            .296:
29522                       00007ADA            .292:
29523                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29524 7ADA           8B46         08            mov	ax,8[bp]
29525 7ADD           40                         inc	ax
29526 7ADE           8946         08            mov	8[bp],ax
29527                                           !BCC_EOS
29528                                           ! 4041         outb(0x3c8, v);
29529                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29530 7AE1           FF76         FA            push	-6[bp]
29531                                           ! Debug: list int = const $3C8 (used reg = )
29532 7AE4           B8                   03C8  mov	ax,#$3C8
29533 7AE7           50                         push	ax
29534                                           ! Debug: func () void = outb+0 (used reg = )
29535 7AE8           E8         0162            call	_outb
29536 7AEB           83C4                   04  add	sp,*4
29537                                           !BCC_EOS
29538                                           ! 4042     }
29539                                           ! 4043     return BX;
29540                       00007AEE            .290:
29541 7AEE           8B46         08            mov	ax,8[bp]
29542 7AF1           89EC                       mov	sp,bp
29543 7AF3           5D                         pop	bp
29544 7AF4           C3                         ret
29545                                           !BCC_EOS
29546                                           ! 4044 }
29547                                           ! 4045 static Bit8u find_vga_entry(mode)
29548                                           ! 4046 Bit8u mode;
29549                       00007AF5            _find_vga_entry:
29550                                           !BCC_EOS
29551                                           ! 4047 {
29552                                           ! 4048  Bit8u i,line=0xFF;
29553 7AF5           55                         push	bp
29554 7AF6           89E5                       mov	bp,sp
29555 7AF8           4C                         dec	sp
29556 7AF9           4C                         dec	sp
29557                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29558 7AFA           B0                     FF  mov	al,#$FF
29559 7AFC           8846         FE            mov	-2[bp],al
29560                                           !BCC_EOS
29561                                           ! 4049  for(i=0;i<=15;i++)
29562                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29563 7AFF           30C0                       xor	al,al
29564 7B01           8846         FF            mov	-1[bp],al
29565                                           !BCC_EOS
29566                                           !BCC_EOS
29567                                           ! 4050   if(vga_modes[i].svgamode==mode)
29568 7B04           EB           23            jmp .299
29569                       00007B06            .29A:
29570                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29571 7B06           8A46         FF            mov	al,-1[bp]
29572 7B09           30E4                       xor	ah,ah
29573 7B0B           B1                     03  mov	cl,*3
29574 7B0D           D3E0                       shl	ax,cl
29575 7B0F           89C3                       mov	bx,ax
29576                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29577 7B11           8A87       01F6            mov	al,_vga_modes[bx]
29578 7B15           3A46         04            cmp	al,4[bp]
29579 7B18           75           08            jne 	.29B
29580                       00007B1A            .29C:
29581                                           ! 4051    {line=i;
29582                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29583 7B1A           8A46         FF            mov	al,-1[bp]
29584 7B1D           8846         FE            mov	-2[bp],al
29585                                           !BCC_EOS
29586                                           ! 4052     break;
29587 7B20           EB           0E            jmp .297
29588                                           !BCC_EOS
29589                                           ! 4053    }
29590                                           ! 4054  return line;
29591                       00007B22            .29B:
29592                       00007B22            .298:
29593                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29594 7B22           8A46         FF            mov	al,-1[bp]
29595 7B25           40                         inc	ax
29596 7B26           8846         FF            mov	-1[bp],al
29597                       00007B29            .299:
29598                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29599 7B29           8A46         FF            mov	al,-1[bp]
29600 7B2C           3C                     0F  cmp	al,*$F
29601 7B2E           76           D6            jbe	.29A
29602                       00007B30            .29D:
29603                       00007B30            .297:
29604 7B30           8A46         FE            mov	al,-2[bp]
29605 7B33           89EC                       mov	sp,bp
29606 7B35           5D                         pop	bp
29607 7B36           C3                         ret
29608                                           !BCC_EOS
29609                                           ! 4055 }
29610                                           ! 4056 static void memsetb(seg,offset,value,count)
29611                                           ! Register BX used in function find_vga_entry
29612                                           ! 4057   Bit16u seg;
29613                       00007B37            _memsetb:
29614                                           !BCC_EOS
29615                                           ! 4058   Bit16u offset;
29616                                           !BCC_EOS
29617                                           ! 4059   Bit16u value;
29618                                           !BCC_EOS
29619                                           ! 4060   Bit16u count;
29620                                           !BCC_EOS
29621                                           ! 4061 {
29622                                           ! 4062 #asm
29623                                           !BCC_ASM
29624                       00000008            _memsetb.count	set	8
29625                       00000002            _memsetb.seg	set	2
29626                       00000006            _memsetb.value	set	6
29627                       00000004            _memsetb.offset	set	4
29628 7B37           55                           push bp
29629 7B38           89E5                         mov bp, sp
29630 7B3A           50                             push ax
29631 7B3B           51                             push cx
29632 7B3C           06                             push es
29633 7B3D           57                             push di
29634 7B3E           8B4E         0A                mov cx, 10[bp] ; count
29635 7B41           83F9                   00      cmp cx, #0x00
29636 7B44           74           10                je memsetb_end
29637 7B46           8B46         04                mov ax, 4[bp] ; segment
29638 7B49           8EC0                           mov es, ax
29639 7B4B           8B46         06                mov ax, 6[bp] ; offset
29640 7B4E           89C7                           mov di, ax
29641 7B50           8A46         08                mov al, 8[bp] ; value
29642 7B53           FC                             cld
29643 7B54           F3                             rep
29644 7B55           AA                              stosb
29645                       00007B56            memsetb_end:
29646 7B56           5F                             pop di
29647 7B57           07                             pop es
29648 7B58           59                             pop cx
29649 7B59           58                             pop ax
29650 7B5A           5D                           pop bp
29651                                           ! 4086 endasm
29652                                           !BCC_ENDASM
29653                                           ! 4087 }
29654 7B5B           C3                         ret
29655                                           ! 4088 static void memsetw(seg,offset,value,count)
29656                                           ! 4089   Bit16u seg;
29657                       00007B5C            _memsetw:
29658                                           !BCC_EOS
29659                                           ! 4090   Bit16u offset;
29660                                           !BCC_EOS
29661                                           ! 4091   Bit16u value;
29662                                           !BCC_EOS
29663                                           ! 4092   Bit16u count;
29664                                           !BCC_EOS
29665                                           ! 4093 {
29666                                           ! 4094 #asm
29667                                           !BCC_ASM
29668                       00000008            _memsetw.count	set	8
29669                       00000002            _memsetw.seg	set	2
29670                       00000006            _memsetw.value	set	6
29671                       00000004            _memsetw.offset	set	4
29672 7B5C           55                           push bp
29673 7B5D           89E5                         mov bp, sp
29674 7B5F           50                             push ax
29675 7B60           51                             push cx
29676 7B61           06                             push es
29677 7B62           57                             push di
29678 7B63           8B4E         0A                mov cx, 10[bp] ; count
29679 7B66           83F9                   00      cmp cx, #0x00
29680 7B69           74           10                je memsetw_end
29681 7B6B           8B46         04                mov ax, 4[bp] ; segment
29682 7B6E           8EC0                           mov es, ax
29683 7B70           8B46         06                mov ax, 6[bp] ; offset
29684 7B73           89C7                           mov di, ax
29685 7B75           8B46         08                mov ax, 8[bp] ; value
29686 7B78           FC                             cld
29687 7B79           F3                             rep
29688 7B7A           AB                              stosw
29689                       00007B7B            memsetw_end:
29690 7B7B           5F                             pop di
29691 7B7C           07                             pop es
29692 7B7D           59                             pop cx
29693 7B7E           58                             pop ax
29694 7B7F           5D                           pop bp
29695                                           ! 4118 endasm
29696                                           !BCC_ENDASM
29697                                           ! 4119 }
29698 7B80           C3                         ret
29699                                           ! 4120 static void memcpyb(dseg,doffset,sseg,soffset,count)
29700                                           ! 4121   Bit16u dseg;
29701                       00007B81            _memcpyb:
29702                                           !BCC_EOS
29703                                           ! 4122   Bit16u doffset;
29704                                           !BCC_EOS
29705                                           ! 4123   Bit16u sseg;
29706                                           !BCC_EOS
29707                                           ! 4124   B
29708                                           ! 4124 it16u soffset;
29709                                           !BCC_EOS
29710                                           ! 4125   Bit16u count;
29711                                           !BCC_EOS
29712                                           ! 4126 {
29713                                           ! 4127 #asm
29714                                           !BCC_ASM
29715                       0000000A            _memcpyb.count	set	$A
29716                       00000006            _memcpyb.sseg	set	6
29717                       00000008            _memcpyb.soffset	set	8
29718                       00000002            _memcpyb.dseg	set	2
29719                       00000004            _memcpyb.doffset	set	4
29720 7B81           55                           push bp
29721 7B82           89E5                         mov bp, sp
29722 7B84           50                             push ax
29723 7B85           51                             push cx
29724 7B86           06                             push es
29725 7B87           57                             push di
29726 7B88           1E                             push ds
29727 7B89           56                             push si
29728 7B8A           8B4E         0C                mov cx, 12[bp] ; count
29729 7B8D           83F9                   00      cmp cx, #0x0000
29730 7B90           74           17                je memcpyb_end
29731 7B92           8B46         04                mov ax, 4[bp] ; dsegment
29732 7B95           8EC0                           mov es, ax
29733 7B97           8B46         06                mov ax, 6[bp] ; doffset
29734 7B9A           89C7                           mov di, ax
29735 7B9C           8B46         08                mov ax, 8[bp] ; ssegment
29736 7B9F           8ED8                           mov ds, ax
29737 7BA1           8B46         0A                mov ax, 10[bp] ; soffset
29738 7BA4           89C6                           mov si, ax
29739 7BA6           FC                             cld
29740 7BA7           F3                             rep
29741 7BA8           A4                              movsb
29742                       00007BA9            memcpyb_end:
29743 7BA9           5E                             pop si
29744 7BAA           1F                             pop ds
29745 7BAB           5F                             pop di
29746 7BAC           07                             pop es
29747 7BAD           59                             pop cx
29748 7BAE           58                             pop ax
29749 7BAF           5D                           pop bp
29750                                           ! 4158 endasm
29751                                           !BCC_ENDASM
29752                                           ! 4159 }
29753 7BB0           C3                         ret
29754                                           ! 4160 static void memcpyw(dseg,doffset,sseg,soffset,count)
29755                                           ! 4161   Bit16u dseg;
29756                       00007BB1            _memcpyw:
29757                                           !BCC_EOS
29758                                           ! 4162   Bit16u doffset;
29759                                           !BCC_EOS
29760                                           ! 4163   Bit16u sseg;
29761                                           !BCC_EOS
29762                                           ! 4164   Bit16u soffset;
29763                                           !BCC_EOS
29764                                           ! 4165   Bit16u count;
29765                                           !BCC_EOS
29766                                           ! 4166 {
29767                                           ! 4167 #asm
29768                                           !BCC_ASM
29769                       0000000A            _memcpyw.count	set	$A
29770                       00000006            _memcpyw.sseg	set	6
29771                       00000008            _memcpyw.soffset	set	8
29772                       00000002            _memcpyw.dseg	set	2
29773                       00000004            _memcpyw.doffset	set	4
29774 7BB1           55                           push bp
29775 7BB2           89E5                         mov bp, sp
29776 7BB4           50                             push ax
29777 7BB5           51                             push cx
29778 7BB6           06                             push es
29779 7BB7           57                             push di
29780 7BB8           1E                             push ds
29781 7BB9           56                             push si
29782 7BBA           8B4E         0C                mov cx, 12[bp] ; count
29783 7BBD           83F9                   00      cmp cx, #0x0000
29784 7BC0           74           17                je memcpyw_end
29785 7BC2           8B46         04                mov ax, 4[bp] ; dsegment
29786 7BC5           8EC0                           mov es, ax
29787 7BC7           8B46         06                mov ax, 6[bp] ; doffset
29788 7BCA           89C7                           mov di, ax
29789 7BCC           8B46         08                mov ax, 8[bp] ; ssegment
29790 7BCF           8ED8                           mov ds, ax
29791 7BD1           8B46         0A                mov ax, 10[bp] ; soffset
29792 7BD4           89C6                           mov si, ax
29793 7BD6           FC                             cld
29794 7BD7           F3                             rep
29795 7BD8           A5                              movsw
29796                       00007BD9            memcpyw_end:
29797 7BD9           5E                             pop si
29798 7BDA           1F                             pop ds
29799 7BDB           5F                             pop di
29800 7BDC           07                             pop es
29801 7BDD           59                             pop cx
29802 7BDE           58                             pop ax
29803 7BDF           5D                           pop bp
29804                                           ! 4198 endasm
29805                                           !BCC_ENDASM
29806                                           ! 4199 }
29807 7BE0           C3                         ret
29808                                           ! 4200 static Bit8u
29809                                           ! 4201 read_byte(seg, offset)
29810                                           ! 4202   Bit16u seg;
29811                       00007BE1            _read_byte:
29812                                           !BCC_EOS
29813                                           ! 4203   Bit16u offset;
29814                                           !BCC_EOS
29815                                           ! 4204 {
29816                                           ! 4205 #asm
29817                                           !BCC_ASM
29818                       00000002            _read_byte.seg	set	2
29819                       00000004            _read_byte.offset	set	4
29820 7BE1           55                           push bp
29821 7BE2           89E5                         mov bp, sp
29822 7BE4           53                             push bx
29823 7BE5           1E                             push ds
29824 7BE6           8B46         04                mov ax, 4[bp] ; segment
29825 7BE9           8ED8                           mov ds, ax
29826 7BEB           8B5E         06                mov bx, 6[bp] ; offset
29827 7BEE           8A07                           mov al, [bx]
29828                                               ;; al = return value (byte)
29829 7BF0           1F                             pop ds
29830 7BF1           5B                             pop bx
29831 7BF2           5D                           pop bp
29832                                           ! 4218 endasm
29833                                           !BCC_ENDASM
29834                                           ! 4219 }
29835 7BF3           C3                         ret
29836                                           ! 4220 static Bit16u
29837                                           ! 4221 read_word(seg, offset)
29838                                           ! 4222   Bit16u seg;
29839                       00007BF4            _read_word:
29840                                           !BCC_EOS
29841                                           ! 4223   Bit16u offset;
29842                                           !BCC_EOS
29843                                           ! 4224 {
29844                                           ! 4225 #asm
29845                                           !BCC_ASM
29846                       00000002            _read_word.seg	set	2
29847                       00000004            _read_word.offset	set	4
29848 7BF4           55                           push bp
29849 7BF5           89E5                         mov bp, sp
29850 7BF7           53                             push bx
29851 7BF8           1E                             push ds
29852 7BF9           8B46         04                mov ax, 4[bp] ; segment
29853 7BFC           8ED8                           mov ds, ax
29854 7BFE           8B5E         06                mov bx, 6[bp] ; offset
29855 7C01           8B07                           mov ax, [bx]
29856                                               ;; ax = return value (word)
29857 7C03           1F                             pop ds
29858 7C04           5B                             pop bx
29859 7C05           5D                           pop bp
29860                                           ! 4238 endasm
29861                                           !BCC_ENDASM
29862                                           ! 4239 }
29863 7C06           C3                         ret
29864                                           ! 4240 static void
29865                                           ! 4241 write_byte(seg, offset, data)
29866                                           ! 4242   Bit16u seg;
29867                       00007C07            _write_byte:
29868                                           !BCC_EOS
29869                                           ! 4243   Bit16u offset;
29870                                           !BCC_EOS
29871                                           ! 4244   Bit8u data;
29872                                           !BCC_EOS
29873                                           ! 4245 {
29874                                           ! 4246 #asm
29875                                           !BCC_ASM
29876                       00000002            _write_byte.seg	set	2
29877                       00000006            _write_byte.data	set	6
29878                       00000004            _write_byte.offset	set	4
29879 7C07           55                           push bp
29880 7C08           89E5                         mov bp, sp
29881 7C0A           50                             push ax
29882 7C0B           53                             push bx
29883 7C0C           1E                             push ds
29884 7C0D           8B46         04                mov ax, 4[bp] ; segment
29885 7C10           8ED8                           mov ds, ax
29886 7C12           8B5E         06                mov bx, 6[bp] ; offset
29887 7C15           8A46         08                mov al, 8[bp] ; data byte
29888 7C18           8807                           mov [bx], al ; write data byte
29889 7C1A           1F                             pop ds
29890 7C1B           5B                             pop bx
29891 7C1C           58                             pop ax
29892 7C1D           5D                           pop bp
29893                                           ! 4261 endasm
29894                                           !BCC_ENDASM
29895                                           ! 4262 }
29896 7C1E           C3                         ret
29897                                           ! 4263 static void
29898                                           ! 4264 write_word(seg, offset, data)
29899                                           ! 4265  
29900                                           ! 4265  Bit16u seg;
29901                       00007C1F            _write_word:
29902                                           !BCC_EOS
29903                                           ! 4266   Bit16u offset;
29904                                           !BCC_EOS
29905                                           ! 4267   Bit16u data;
29906                                           !BCC_EOS
29907                                           ! 4268 {
29908                                           ! 4269 #asm
29909                                           !BCC_ASM
29910                       00000002            _write_word.seg	set	2
29911                       00000006            _write_word.data	set	6
29912                       00000004            _write_word.offset	set	4
29913 7C1F           55                           push bp
29914 7C20           89E5                         mov bp, sp
29915 7C22           50                             push ax
29916 7C23           53                             push bx
29917 7C24           1E                             push ds
29918 7C25           8B46         04                mov ax, 4[bp] ; segment
29919 7C28           8ED8                           mov ds, ax
29920 7C2A           8B5E         06                mov bx, 6[bp] ; offset
29921 7C2D           8B46         08                mov ax, 8[bp] ; data word
29922 7C30           8907                           mov [bx], ax ; write data word
29923 7C32           1F                             pop ds
29924 7C33           5B                             pop bx
29925 7C34           58                             pop ax
29926 7C35           5D                           pop bp
29927                                           ! 4284 endasm
29928                                           !BCC_ENDASM
29929                                           ! 4285 }
29930 7C36           C3                         ret
29931                                           ! 4286  Bit8u
29932                                           ! 4287 inb(port)
29933                                           ! 4288   Bit16u port;
29934                                           export	_inb
29935                       00007C37            _inb:
29936                                           !BCC_EOS
29937                                           ! 4289 {
29938                                           ! 4290 #asm
29939                                           !BCC_ASM
29940                       00000002            _inb.port	set	2
29941 7C37           55                           push bp
29942 7C38           89E5                         mov bp, sp
29943 7C3A           52                             push dx
29944 7C3B           8B56         04                mov dx, 4[bp]
29945 7C3E           EC                             in al, dx
29946 7C3F           5A                             pop dx
29947 7C40           5D                           pop bp
29948                                           ! 4298 endasm
29949                                           !BCC_ENDASM
29950                                           ! 4299 }
29951 7C41           C3                         ret
29952                                           ! 4300   Bit16u
29953                                           ! 4301 inw(port)
29954                                           ! 4302   Bit16u port;
29955                                           export	_inw
29956                       00007C42            _inw:
29957                                           !BCC_EOS
29958                                           ! 4303 {
29959                                           ! 4304 #asm
29960                                           !BCC_ASM
29961                       00000002            _inw.port	set	2
29962 7C42           55                           push bp
29963 7C43           89E5                         mov bp, sp
29964 7C45           52                             push dx
29965 7C46           8B56         04                mov dx, 4[bp]
29966 7C49           ED                             in ax, dx
29967 7C4A           5A                             pop dx
29968 7C4B           5D                           pop bp
29969                                           ! 4312 endasm
29970                                           !BCC_ENDASM
29971                                           ! 4313 }
29972 7C4C           C3                         ret
29973                                           ! 4314   void
29974                                           ! 4315 outb(port, val)
29975                                           ! 4316   Bit16u port;
29976                                           export	_outb
29977                       00007C4D            _outb:
29978                                           !BCC_EOS
29979                                           ! 4317   Bit8u val;
29980                                           !BCC_EOS
29981                                           ! 4318 {
29982                                           ! 4319 #asm
29983                                           !BCC_ASM
29984                       00000004            _outb.val	set	4
29985                       00000002            _outb.port	set	2
29986 7C4D           55                           push bp
29987 7C4E           89E5                         mov bp, sp
29988 7C50           50                             push ax
29989 7C51           52                             push dx
29990 7C52           8B56         04                mov dx, 4[bp]
29991 7C55           8A46         06                mov al, 6[bp]
29992 7C58           EE                             out dx, al
29993 7C59           5A                             pop dx
29994 7C5A           58                             pop ax
29995 7C5B           5D                           pop bp
29996                                           ! 4330 endasm
29997                                           !BCC_ENDASM
29998                                           ! 4331 }
29999 7C5C           C3                         ret
30000                                           ! 4332   void
30001                                           ! 4333 outw(port, val)
30002                                           ! 4334   Bit16u port;
30003                                           export	_outw
30004                       00007C5D            _outw:
30005                                           !BCC_EOS
30006                                           ! 4335   Bit16u val;
30007                                           !BCC_EOS
30008                                           ! 4336 {
30009                                           ! 4337 #asm
30010                                           !BCC_ASM
30011                       00000004            _outw.val	set	4
30012                       00000002            _outw.port	set	2
30013 7C5D           55                           push bp
30014 7C5E           89E5                         mov bp, sp
30015 7C60           50                             push ax
30016 7C61           52                             push dx
30017 7C62           8B56         04                mov dx, 4[bp]
30018 7C65           8B46         06                mov ax, 6[bp]
30019 7C68           EF                             out dx, ax
30020 7C69           5A                             pop dx
30021 7C6A           58                             pop ax
30022 7C6B           5D                           pop bp
30023                                           ! 4348 endasm
30024                                           !BCC_ENDASM
30025                                           ! 4349 }
30026 7C6C           C3                         ret
30027                                           ! 4350 Bit16u get_SS()
30028                                           ! 4351 {
30029                                           export	_get_SS
30030                       00007C6D            _get_SS:
30031                                           ! 4352 #asm
30032                                           !BCC_ASM
30033 7C6D           8CD0                         mov ax, ss
30034                                           ! 4354 endasm
30035                                           !BCC_ENDASM
30036                                           ! 4355 }
30037 7C6F           C3                         ret
30038                                           ! 4356 void printf(s)
30039                                           ! 4357   Bit8u *s;
30040                                           export	_printf
30041                       00007C70            _printf:
30042                                           !BCC_EOS
30043                                           ! 4358 {
30044                                           ! 4359   Bit8u c, format_char;
30045                                           !BCC_EOS
30046                                           ! 4360   Boolean in_format;
30047                                           !BCC_EOS
30048                                           ! 4361   unsigned format_width, i;
30049                                           !BCC_EOS
30050                                           ! 4362   Bit16u *arg_ptr;
30051                                           !BCC_EOS
30052                                           ! 4363   Bit16u arg_seg, arg, digit, nibble, shift_count;
30053                                           !BCC_EOS
30054                                           ! 4364   arg_ptr = &s;
30055 7C70           55                         push	bp
30056 7C71           89E5                       mov	bp,sp
30057 7C73           83C4                   EC  add	sp,*-$14
30058                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30059 7C76           8D5E         04            lea	bx,4[bp]
30060 7C79           895E         F6            mov	-$A[bp],bx
30061                                           !BCC_EOS
30062                                           ! 4365   arg_seg = get_SS();
30063                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30064 7C7C           E8         FFEE            call	_get_SS
30065                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30066 7C7F           8946         F4            mov	-$C[bp],ax
30067                                           !BCC_EOS
30068                                           ! 4366   in_format = 0;
30069                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30070 7C82           31C0                       xor	ax,ax
30071 7C84           8946         FC            mov	-4[bp],ax
30072                                           !BCC_EOS
30073                                           ! 4367   format_width = 0;
30074                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30075 7C87           31C0                       xor	ax,ax
30076 7C89           8946         FA            mov	-6[bp],ax
30077                                           !BCC_EOS
30078                                           ! 4368   while (c = read_byte(0xc000, s)) {
30079 7C8C           E9         0104            br 	.29F
30080                       00007C8F            .2A0:
30081                                           ! 4369     if ( c == '%' ) {
30082                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30083 7C8F           8A46         FF            mov	al,-1[bp]
30084 7C92           3C                     25  cmp	al,*$25
30085 7C94           75           0E            jne 	.2A1
30086                       00007C96            .2A2:
30087                                           ! 4370       in_format = 1;
30088                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30089 7C96           B8                   0001  mov	ax,*1
30090 7C99           8946         FC            mov	-4[bp],ax
30091                                           !BCC_EOS
30092                                           ! 4371       format_width = 0;
30093                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30094 7C9C           31C0                       xor	ax,ax
30095 7C9E           8946         FA            mov	-6[bp],ax
30096                                           !BCC_EOS
30097                                           ! 4372       }
30098                                           ! 4373     else if (in_format) {
30099 7CA1           E9         00E8            br 	.2A3
30100                       00007CA4            .2A1:
30101 7CA4           8B46         FC            mov	ax,-4[bp]
30102 7CA7           85C0                       test	ax,ax
30103 7CA9         0F84         00CF            beq 	.2A4
30104                       00007CAD            .2A5:
30105                                           ! 4374       if ( (c>='0') && (c<='9') ) {
30106                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30107 7CAD           8A46         FF            mov	al,-1[bp]
30108 7CB0           3C                     30  cmp	al,*$30
30109 7CB2           72           28            jb  	.2A6
30110                       00007CB4            .2A8:
30111                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30112 7CB4           8A46         FF            mov	al,-1[bp]
30113 7CB7           3C                     39  cmp	al,*$39
30114 7CB9           77           21            ja  	.2A6
30115                       00007CBB            .2A7:
30116                                           ! 4375         format_width = (format_width * 10) + (c - '0');
30117                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30118 7CBB           8A46         FF            mov	al,-1[bp]
30119 7CBE           30E4                       xor	ah,ah
30120 7CC0           05                   FFD0  add	ax,*-$30
30121 7CC3           50                         push	ax
30122                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30123 7CC4           8B46         FA            mov	ax,-6[bp]
30124 7CC7           89C2                       mov	dx,ax
30125 7CC9           D1E0                       shl	ax,*1
30126 7CCB           D1E0                       shl	ax,*1
30127 7CCD           01D0                       add	ax,dx
30128 7CCF           D1E0                       shl	ax,*1
30129                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30130 7CD1           0346         EA            add	ax,-$16[bp]
30131 7CD4           44                         inc	sp
30132 7CD5           44                         inc	sp
30133                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30134 7CD6           8946         FA            mov	-6[bp],ax
30135                                           !BCC_EOS
30136                                           ! 4376         }
30137                                           ! 4377       else if (c == 'x') {
30138 7CD9           E9         009E            br 	.2A9
30139                       00007CDC            .2A6:
30140                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30141 7CDC           8A46         FF            mov	al,-1[bp]
30142 7CDF           3C                     78  cmp	al,*$78
30143 7CE1         0F85         0095            bne 	.2AA
30144                       00007CE5            .2AB:
30145                                           ! 4378         arg_ptr++;
30146                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30147 7CE5           8B5E         F6            mov	bx,-$A[bp]
30148 7CE8           43                         inc	bx
30149 7CE9           43                         inc	bx
30150 7CEA           895E         F6            mov	-$A[bp],bx
30151                                           !BCC_EOS
30152                                           ! 4379         arg = read_word(arg_seg, arg_ptr);
30153                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30154 7CED           FF76         F6            push	-$A[bp]
30155                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30156 7CF0           FF76         F4            push	-$C[bp]
30157                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30158 7CF3           E8         FEFE            call	_read_word
30159 7CF6           83C4                   04  add	sp,*4
30160                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30161 7CF9           8946         F2            mov	-$E[bp],ax
30162                                           !BCC_EOS
30163                                           ! 4380         if (format_width == 0)
30164                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30165 7CFC           8B46         FA            mov	ax,-6[bp]
30166 7CFF           85C0                       test	ax,ax
30167 7D01           75           06            jne 	.2AC
30168                       00007D03            .2AD:
30169                                           ! 4381           format_width = 4;
30170                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30171 7D03           B8                   0004  mov	ax,*4
30172 7D06           8946         FA            mov	-6[bp],ax
30173                                           !BCC_EOS
30174                                           ! 4382         i = 0;
30175                       00007D09            .2AC:
30176                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30177 7D09           31C0                       xor	ax,ax
30178 7D0B           8946         F8            mov	-8[bp],ax
30179                                           !BCC_EOS
30180                                           ! 4383         digit = format_width - 1;
30181                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30182 7D0E           8B46         FA            mov	ax,-6[bp]
30183                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30184 7D11           48                         dec	ax
30185 7D12           8946         F0            mov	-$10[bp],ax
30186                                           !BCC_EOS
30187                                           ! 4384         for (i=0; i<format_width; i++) {
30188                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30189 7D15           31C0                       xor	ax,ax
30190 7D17           8946         F8            mov	-8[bp],ax
30191                                           !BCC_EOS
30192                                           !BCC_EOS
30193 7D1A           EB           51            jmp .2B0
30194                       00007D1C            .2B1:
30195                                           ! 4385           nibble = (arg >> (4 * digit)) & 0x000f;
30196                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30197                                           ! Debug: expression subtree swapping
30198 7D1C           8B46         F0            mov	ax,-$10[bp]
30199 7D1F           D1E0                       shl	ax,*1
30200 7D21           D1E0                       shl	ax,*1
30201                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30202 7D23           89C3                       mov	bx,ax
30203 7D25           8B46         F2            mov	ax,-$E[bp]
30204 7D28           89D9                       mov	cx,bx
30205 7D2A           D3E8                       shr	ax,cl
30206                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30207 7D2C           24                     0F  and	al,*$F
30208                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30209 7D2E           30E4                       xor	ah,ah
30210 7D30           8946         EE            mov	-$12[bp],ax
30211                                           !BCC_EOS
30212                                           ! 4386           if (nibble <= 9)
30213                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30214 7D33           8B46         EE            mov	ax,-$12[bp]
30215 7D36           3D                   0009  cmp	ax,*9
30216 7D39           77           13            ja  	.2B2
30217                       00007D3B            .2B3:
30218                                           ! 4387             outb(0x0500, nibble + '0');
30219                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30220 7D3B           8B46         EE            mov	ax,-$12[bp]
30221                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30222 7D3E           05                   0030  add	ax,*$30
30223 7D41           50                         push	ax
30224                                           ! Debug: list int = const $500 (used reg = )
30225 7D42           B8                   0500  mov	ax,#$500
30226 7D45           50                         push	ax
30227                                           ! Debug: func () void = outb+0 (used reg = )
30228 7D46           E8         FF04            call	_outb
30229 7D49           83C4                   04  add	sp,*4
30230                                           !BCC_EOS
30231                                           ! 4388           else
30232                                           ! 4389             outb(0x0500, (nibble - 10) + 'A');
30233 7D4C           EB           11            jmp .2B4
30234                       00007D4E            .2B2:
30235                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30236 7D4E           8B46         EE            mov	ax,-$12[bp]
30237                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30238                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30239 7D51           05                   0037  add	ax,*$37
30240 7D54           50                         push	ax
30241                                           ! Debug: list int = const $500 (used reg = )
30242 7D55           B8                   0500  mov	ax,#$500
30243 7D58           50                         push	ax
30244                                           ! Debug: func () void = outb+0 (used reg = )
30245 7D59           E8         FEF1            call	_outb
30246 7D5C           83C4                   04  add	sp,*4
30247                                           !BCC_EOS
30248                                           ! 4390           digit--;
30249                       00007D5F            .2B4:
30250                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30251 7D5F           8B46         F0            mov	ax,-$10[bp]
30252 7D62           48                         dec	ax
30253 7D63           8946         F0            mov	-$10[bp],ax
30254                                           !BCC_EOS
30255                                           ! 4391           }
30256                                           ! 4392         in_format = 0;
30257                       00007D66            .2AF:
30258                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30259 7D66           8B46         F8            mov	ax,-8[bp]
30260 7D69           40                         inc	ax
30261 7D6A           8946         F8            mov	-8[bp],ax
30262                       00007D6D            .2B0:
30263                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30264 7D6D           8B46         F8            mov	ax,-8[bp]
30265 7D70           3B46         FA            cmp	ax,-6[bp]
30266 7D73           72           A7            jb 	.2B1
30267                       00007D75            .2B5:
30268                       00007D75            .2AE:
30269                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30270 7D75           31C0                       xor	ax,ax
30271 7D77           8946         FC            mov	-4[bp],ax
30272                                           !BCC_EOS
30273                                           ! 4393         }
30274                                           ! 4394       }
30275                       00007D7A            .2AA:
30276                       00007D7A            .2A9:
30277                                           ! 4395     else {
30278 7D7A           EB           10            jmp .2B6
30279                       00007D7C            .2A4:
30280                                           ! 4396       outb(0x0500, c);
30281                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30282 7D7C           8A46         FF            mov	al,-1[bp]
30283 7D7F           30E4                       xor	ah,ah
30284 7D81           50                         push	ax
30285                                           ! Debug: list int = const $500 (used reg = )
30286 7D82           B8                   0500  mov	ax,#$500
30287 7D85           50                         push	ax
30288                                           ! Debug: func () void = outb+0 (used reg = )
30289 7D86           E8         FEC4            call	_outb
30290 7D89           83C4                   04  add	sp,*4
30291                                           !BCC_EOS
30292                                           ! 4397       }
30293                                           ! 4398     s ++;
30294                       00007D8C            .2B6:
30295                       00007D8C            .2A3:
30296                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30297 7D8C           8B5E         04            mov	bx,4[bp]
30298 7D8F           43                         inc	bx
30299 7D90           895E         04            mov	4[bp],bx
30300                                           !BCC_EOS
30301                                           ! 4399     }
30302                                           ! 4400 }
30303                                           ! 4400 
30304                       00007D93            .29F:
30305                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30306 7D93           FF76         04            push	4[bp]
30307                                           ! Debug: list unsigned int = const $C000 (used reg = )
30308 7D96           B8                   C000  mov	ax,#$C000
30309 7D99           50                         push	ax
30310                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30311 7D9A           E8         FE44            call	_read_byte
30312 7D9D           83C4                   04  add	sp,*4
30313                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30314 7DA0           8846         FF            mov	-1[bp],al
30315 7DA3           84C0                       test	al,al
30316 7DA5         0F85         FEE6            bne 	.2A0
30317                       00007DA9            .2B7:
30318                       00007DA9            .29E:
30319 7DA9           89EC                       mov	sp,bp
30320 7DAB           5D                         pop	bp
30321 7DAC           C3                         ret
30322                                           ! 4401 #asm
30323                                           !BCC_ASM
30324                       00000002            _printf.s	set	2
30325                                             ; get LFB address from PCI
30326                                             ; in - ax: PCI device vendor
30327                                             ; out - ax: LFB address (high 16 bit)
30328                                             ;; NOTE - may be called in protected mode
30329                       00007DAD            _pci_get_lfb_addr:
30330 7DAD           53                           push bx
30331 7DAE           51                           push cx
30332 7DAF           52                           push dx
30333 7DB0     66    50                           push eax
30334 7DB2           89C3                           mov bx, ax
30335 7DB4           31C9                           xor cx, cx
30336 7DB6           B2                     00      mov dl, #0x00
30337 7DB8           E8         0033                call pci_read_reg
30338 7DBB           3D                   FFFF      cmp ax, #0xffff
30339 7DBE           74           12                jz pci_get_lfb_addr_5
30340                       00007DC0             pci_get_lfb_addr_3:
30341 7DC0           B2                     00      mov dl, #0x00
30342 7DC2           E8         0029                call pci_read_reg
30343 7DC5           39D8                           cmp ax, bx ;; check vendor
30344 7DC7           74           0D                jz pci_get_lfb_addr_4
30345 7DC9           83C1                   08      add cx, #0x8
30346 7DCC           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30347 7DD0           72           EE                jb pci_get_lfb_addr_3
30348                       00007DD2             pci_get_lfb_addr_5:
30349 7DD2           31D2                           xor dx, dx ;; no LFB
30350 7DD4           EB           10                jmp pci_get_lfb_addr_6
30351                       00007DD6             pci_get_lfb_addr_4:
30352 7DD6           B2                     10      mov dl, #0x10 ;; I/O space #0
30353 7DD8           E8         0013                call pci_read_reg
30354 7DDB           A9                   FFF1      test ax, #0xfff1
30355 7DDE           75           F2                jnz pci_get_lfb_addr_5
30356 7DE0     66    C1E8                   10      shr eax, #16
30357 7DE4           89C2                           mov dx, ax ;; LFB address
30358                       00007DE6             pci_get_lfb_addr_6:
30359 7DE6     66    58                           pop eax
30360 7DE8           89D0                         mov ax, dx
30361 7DEA           5A                           pop dx
30362 7DEB           59                           pop cx
30363 7DEC           5B                           pop bx
30364 7DED           C3                           ret
30365                                             ; read PCI register
30366                                             ; in - cx: device/function
30367                                             ; in - dl: register
30368                                             ; out - eax: value
30369                       00007DEE            pci_read_reg:
30370 7DEE     66    B8               00800000    mov eax, #0x00800000
30371 7DF4           89C8                         mov ax, cx
30372 7DF6     66    C1E0                   08    shl eax, #8
30373 7DFA           88D0                         mov al, dl
30374 7DFC           BA                   0CF8    mov dx, #0xcf8
30375 7DFF     66    EF                           out dx, eax
30376 7E01           80C2                   04    add dl, #4
30377 7E04     66    ED                           in eax, dx
30378 7E06           C3                           ret
30379                                           ! 4456 endasm
30380                                           !BCC_ENDASM
30381                                           ! 4457 static ModeInfoListItem mode_info_list[]=
30382                                           ! Register BX used in function printf
30383                                           ! 4458 {
30384                                           
30385                       00007E07            _mode_info_list:
30386                                           ! 4459 { 0x0100,
30387 7E07                      0100            .word	$100
30388                                           ! 4460 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30389 7E09                      009B            .word	$9B
30390                                           ! 4461                           0x01 | 0x02 | 0x04,
30391 7E0B                        07            .byte	7
30392                                           ! 4462                           0,
30393 7E0C                        00            .byte	0
30394                                           ! 4463                           64,
30395 7E0D                      0040            .word	$40
30396                                           ! 4464                    64,
30397 7E0F                      0040            .word	$40
30398                                           ! 4465                        0xA000,
30399 7E11                      A000            .word	$A000
30400                                           ! 4466                        0x0000,
30401 7E13                      0000            .word	0
30402                                           ! 4467                       0,
30403 7E15                      0000            .word	0
30404 7E17                      0000            .word	0
30405                                           ! 4468                             640,
30406 7E19                      0280            .word	$280
30407                                           ! 4469                        640,
30408 7E1B                      0280            .word	$280
30409                                           ! 4470                        400,
30410 7E1D                      0190            .word	$190
30411                                           ! 4471                      8,
30412 7E1F                        08            .byte	8
30413                                           ! 4472                      16,
30414 7E20                        10            .byte	$10
30415                                           ! 4473                           1,
30416 7E21                        01            .byte	1
30417                                           ! 4474                         8,
30418 7E22                        08            .byte	8
30419                                           ! 4475                          4,
30420 7E23                        04            .byte	4
30421                                           ! 4476                        0x04,
30422 7E24                        04            .byte	4
30423                                           ! 4477                     0,
30424 7E25                        00            .byte	0
30425                                           ! 4478                               64,
30426 7E26                        40            .byte	$40
30427                                           ! 4479                          0,
30428 7E27                        00            .byte	0
30429                                           ! 4480                        0,
30430 7E28                        00            .byte	0
30431                                           ! 4481                             0,
30432 7E29                        00            .byte	0
30433                                           ! 4482                          0,
30434 7E2A                        00            .byte	0
30435                                           ! 4483                               0,
30436 7E2B                        00            .byte	0
30437                                           ! 4484                         0,
30438 7E2C                        00            .byte	0
30439                                           ! 4485                              0,
30440 7E2D                        00            .byte	0
30441                                           ! 4486                         0,
30442 7E2E                        00            .byte	0
30443                                           ! 4487                              0,
30444 7E2F                        00            .byte	0
30445                                           ! 4488                                0,
30446 7E30                        00            .byte	0
30447                                           ! 4489                        0xE0000000
30448                                           ! 4489 ,
30449 7E31                      0000            .word	0
30450 7E33                      E000            .word	$E000
30451                                           ! 4490                               0,
30452 7E35                      0000            .word	0
30453 7E37                      0000            .word	0
30454                                           ! 4491                             0,
30455 7E39                      0000            .word	0
30456                                           ! 4492                                640,
30457 7E3B                      0280            .word	$280
30458                                           ! 4493                             0,
30459 7E3D                        00            .byte	0
30460                                           ! 4494                             0,
30461 7E3E                        00            .byte	0
30462                                           ! 4495                           0,
30463 7E3F                        00            .byte	0
30464                                           ! 4496                                0,
30465 7E40                        00            .byte	0
30466                                           ! 4497                             0,
30467 7E41                        00            .byte	0
30468                                           ! 4498                                  0,
30469 7E42                        00            .byte	0
30470                                           ! 4499                            0,
30471 7E43                        00            .byte	0
30472                                           ! 4500                                 0,
30473 7E44                        00            .byte	0
30474                                           ! 4501                            0,
30475 7E45                        00            .byte	0
30476                                           ! 4502                                 0,
30477 7E46                        00            .byte	0
30478                                           ! 4503                          0,
30479 7E47                      0000            .word	0
30480 7E49                      0000            .word	0
30481                                           ! 4504 } },
30482                                           ! 4505 { 0x0101,
30483 7E4B                      0101            .word	$101
30484                                           ! 4506 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30485 7E4D                      009B            .word	$9B
30486                                           ! 4507                           0x01 | 0x02 | 0x04,
30487 7E4F                        07            .byte	7
30488                                           ! 4508                           0,
30489 7E50                        00            .byte	0
30490                                           ! 4509                           64,
30491 7E51                      0040            .word	$40
30492                                           ! 4510                    64,
30493 7E53                      0040            .word	$40
30494                                           ! 4511                        0xA000,
30495 7E55                      A000            .word	$A000
30496                                           ! 4512                        0x0000,
30497 7E57                      0000            .word	0
30498                                           ! 4513                       0,
30499 7E59                      0000            .word	0
30500 7E5B                      0000            .word	0
30501                                           ! 4514                             640,
30502 7E5D                      0280            .word	$280
30503                                           ! 4515                        640,
30504 7E5F                      0280            .word	$280
30505                                           ! 4516                        480,
30506 7E61                      01E0            .word	$1E0
30507                                           ! 4517                      8,
30508 7E63                        08            .byte	8
30509                                           ! 4518                      16,
30510 7E64                        10            .byte	$10
30511                                           ! 4519                           1,
30512 7E65                        01            .byte	1
30513                                           ! 4520                         8,
30514 7E66                        08            .byte	8
30515                                           ! 4521                          5,
30516 7E67                        05            .byte	5
30517                                           ! 4522                        0x04,
30518 7E68                        04            .byte	4
30519                                           ! 4523                     0,
30520 7E69                        00            .byte	0
30521                                           ! 4524                               53,
30522 7E6A                        35            .byte	$35
30523                                           ! 4525                          0,
30524 7E6B                        00            .byte	0
30525                                           ! 4526                        0,
30526 7E6C                        00            .byte	0
30527                                           ! 4527                             0,
30528 7E6D                        00            .byte	0
30529                                           ! 4528                          0,
30530 7E6E                        00            .byte	0
30531                                           ! 4529                               0,
30532 7E6F                        00            .byte	0
30533                                           ! 4530                         0,
30534 7E70                        00            .byte	0
30535                                           ! 4531                              0,
30536 7E71                        00            .byte	0
30537                                           ! 4532                         0,
30538 7E72                        00            .byte	0
30539                                           ! 4533                              0,
30540 7E73                        00            .byte	0
30541                                           ! 4534                                0,
30542 7E74                        00            .byte	0
30543                                           ! 4535                        0xE0000000,
30544 7E75                      0000            .word	0
30545 7E77                      E000            .word	$E000
30546                                           ! 4536                               0,
30547 7E79                      0000            .word	0
30548 7E7B                      0000            .word	0
30549                                           ! 4537                             0,
30550 7E7D                      0000            .word	0
30551                                           ! 4538                                640,
30552 7E7F                      0280            .word	$280
30553                                           ! 4539                             0,
30554 7E81                        00            .byte	0
30555                                           ! 4540                             0,
30556 7E82                        00            .byte	0
30557                                           ! 4541                           0,
30558 7E83                        00            .byte	0
30559                                           ! 4542                                0,
30560 7E84                        00            .byte	0
30561                                           ! 4543                             0,
30562 7E85                        00            .byte	0
30563                                           ! 4544                                  0,
30564 7E86                        00            .byte	0
30565                                           ! 4545                            0,
30566 7E87                        00            .byte	0
30567                                           ! 4546                                 0,
30568 7E88                        00            .byte	0
30569                                           ! 4547                            0,
30570 7E89                        00            .byte	0
30571                                           ! 4548                                 0,
30572 7E8A                        00            .byte	0
30573                                           ! 4549                          0,
30574 7E8B                      0000            .word	0
30575 7E8D                      0000            .word	0
30576                                           ! 4550 } },
30577                                           ! 4551 { 0x0102,
30578 7E8F                      0102            .word	$102
30579                                           ! 4552 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30580 7E91                      001F            .word	$1F
30581                                           ! 4553                           0x01 | 0x02 | 0x04,
30582 7E93                        07            .byte	7
30583                                           ! 4554                           0,
30584 7E94                        00            .byte	0
30585                                           ! 4555                           64,
30586 7E95                      0040            .word	$40
30587                                           ! 4556                    64,
30588 7E97                      0040            .word	$40
30589                                           ! 4557                        0xA000,
30590 7E99                      A000            .word	$A000
30591                                           ! 4558          
30592                                           ! 4558               0x0000,
30593 7E9B                      0000            .word	0
30594                                           ! 4559                       0,
30595 7E9D                      0000            .word	0
30596 7E9F                      0000            .word	0
30597                                           ! 4560                             100,
30598 7EA1                      0064            .word	$64
30599                                           ! 4561                        800,
30600 7EA3                      0320            .word	$320
30601                                           ! 4562                        600,
30602 7EA5                      0258            .word	$258
30603                                           ! 4563                      8,
30604 7EA7                        08            .byte	8
30605                                           ! 4564                      16,
30606 7EA8                        10            .byte	$10
30607                                           ! 4565                           4,
30608 7EA9                        04            .byte	4
30609                                           ! 4566                         4,
30610 7EAA                        04            .byte	4
30611                                           ! 4567                          1,
30612 7EAB                        01            .byte	1
30613                                           ! 4568                        0x03,
30614 7EAC                        03            .byte	3
30615                                           ! 4569                     0,
30616 7EAD                        00            .byte	0
30617                                           ! 4570                               68,
30618 7EAE                        44            .byte	$44
30619                                           ! 4571                          0,
30620 7EAF                        00            .byte	0
30621                                           ! 4572                        0,
30622 7EB0                        00            .byte	0
30623                                           ! 4573                             0,
30624 7EB1                        00            .byte	0
30625                                           ! 4574                          0,
30626 7EB2                        00            .byte	0
30627                                           ! 4575                               0,
30628 7EB3                        00            .byte	0
30629                                           ! 4576                         0,
30630 7EB4                        00            .byte	0
30631                                           ! 4577                              0,
30632 7EB5                        00            .byte	0
30633                                           ! 4578                         0,
30634 7EB6                        00            .byte	0
30635                                           ! 4579                              0,
30636 7EB7                        00            .byte	0
30637                                           ! 4580                                0,
30638 7EB8                        00            .byte	0
30639                                           ! 4581                        0,
30640 7EB9                      0000            .word	0
30641 7EBB                      0000            .word	0
30642                                           ! 4582                               0,
30643 7EBD                      0000            .word	0
30644 7EBF                      0000            .word	0
30645                                           ! 4583                             0,
30646 7EC1                      0000            .word	0
30647                                           ! 4584                                100,
30648 7EC3                      0064            .word	$64
30649                                           ! 4585                             0,
30650 7EC5                        00            .byte	0
30651                                           ! 4586                             0,
30652 7EC6                        00            .byte	0
30653                                           ! 4587                           0,
30654 7EC7                        00            .byte	0
30655                                           ! 4588                                0,
30656 7EC8                        00            .byte	0
30657                                           ! 4589                             0,
30658 7EC9                        00            .byte	0
30659                                           ! 4590                                  0,
30660 7ECA                        00            .byte	0
30661                                           ! 4591                            0,
30662 7ECB                        00            .byte	0
30663                                           ! 4592                                 0,
30664 7ECC                        00            .byte	0
30665                                           ! 4593                            0,
30666 7ECD                        00            .byte	0
30667                                           ! 4594                                 0,
30668 7ECE                        00            .byte	0
30669                                           ! 4595                          0,
30670 7ECF                      0000            .word	0
30671 7ED1                      0000            .word	0
30672                                           ! 4596 } },
30673                                           ! 4597 { 0x0103,
30674 7ED3                      0103            .word	$103
30675                                           ! 4598 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30676 7ED5                      009B            .word	$9B
30677                                           ! 4599                           0x01 | 0x02 | 0x04,
30678 7ED7                        07            .byte	7
30679                                           ! 4600                           0,
30680 7ED8                        00            .byte	0
30681                                           ! 4601                           64,
30682 7ED9                      0040            .word	$40
30683                                           ! 4602                    64,
30684 7EDB                      0040            .word	$40
30685                                           ! 4603                        0xA000,
30686 7EDD                      A000            .word	$A000
30687                                           ! 4604                        0x0000,
30688 7EDF                      0000            .word	0
30689                                           ! 4605                       0,
30690 7EE1                      0000            .word	0
30691 7EE3                      0000            .word	0
30692                                           ! 4606                             800,
30693 7EE5                      0320            .word	$320
30694                                           ! 4607                        800,
30695 7EE7                      0320            .word	$320
30696                                           ! 4608                        600,
30697 7EE9                      0258            .word	$258
30698                                           ! 4609                      8,
30699 7EEB                        08            .byte	8
30700                                           ! 4610                      16,
30701 7EEC                        10            .byte	$10
30702                                           ! 4611                           1,
30703 7EED                        01            .byte	1
30704                                           ! 4612                         8,
30705 7EEE                        08            .byte	8
30706                                           ! 4613                          8,
30707 7EEF                        08            .byte	8
30708                                           ! 4614                        0x04,
30709 7EF0                        04            .byte	4
30710                                           ! 4615                     0,
30711 7EF1                        00            .byte	0
30712                                           ! 4616                               33,
30713 7EF2                        21            .byte	$21
30714                                           ! 4617                          0,
30715 7EF3                        00            .byte	0
30716                                           ! 4618                        0,
30717 7EF4                        00            .byte	0
30718                                           ! 4619                             0,
30719 7EF5                        00            .byte	0
30720                                           ! 4620                          0,
30721 7EF6                        00            .byte	0
30722                                           ! 4621                               0,
30723 7EF7                        00            .byte	0
30724                                           ! 4622                         0,
30725 7EF8                        00            .byte	0
30726                                           ! 4623                              0,
30727 7EF9                        00            .byte	0
30728                                           ! 4624                         0,
30729 7EFA                        00            .byte	0
30730                                           ! 4625                              0,
30731 7EFB                        00            .byte	0
30732                                           ! 4626                                0,
30733 7EFC                        00            .byte	0
30734                                           ! 4627                        0xE0000000,
30735 7EFD                      0000            .word	0
30736 7EFF                      E000            .word	$E000
30737                                           ! 4628   
30738                                           ! 4628                             0,
30739 7F01                      0000            .word	0
30740 7F03                      0000            .word	0
30741                                           ! 4629                             0,
30742 7F05                      0000            .word	0
30743                                           ! 4630                                800,
30744 7F07                      0320            .word	$320
30745                                           ! 4631                             0,
30746 7F09                        00            .byte	0
30747                                           ! 4632                             0,
30748 7F0A                        00            .byte	0
30749                                           ! 4633                           0,
30750 7F0B                        00            .byte	0
30751                                           ! 4634                                0,
30752 7F0C                        00            .byte	0
30753                                           ! 4635                             0,
30754 7F0D                        00            .byte	0
30755                                           ! 4636                                  0,
30756 7F0E                        00            .byte	0
30757                                           ! 4637                            0,
30758 7F0F                        00            .byte	0
30759                                           ! 4638                                 0,
30760 7F10                        00            .byte	0
30761                                           ! 4639                            0,
30762 7F11                        00            .byte	0
30763                                           ! 4640                                 0,
30764 7F12                        00            .byte	0
30765                                           ! 4641                          0,
30766 7F13                      0000            .word	0
30767 7F15                      0000            .word	0
30768                                           ! 4642 } },
30769                                           ! 4643 { 0x0104,
30770 7F17                      0104            .word	$104
30771                                           ! 4644 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30772 7F19                      001F            .word	$1F
30773                                           ! 4645                           0x01 | 0x02 | 0x04,
30774 7F1B                        07            .byte	7
30775                                           ! 4646                           0,
30776 7F1C                        00            .byte	0
30777                                           ! 4647                           64,
30778 7F1D                      0040            .word	$40
30779                                           ! 4648                    64,
30780 7F1F                      0040            .word	$40
30781                                           ! 4649                        0xA000,
30782 7F21                      A000            .word	$A000
30783                                           ! 4650                        0x0000,
30784 7F23                      0000            .word	0
30785                                           ! 4651                       0,
30786 7F25                      0000            .word	0
30787 7F27                      0000            .word	0
30788                                           ! 4652                             128,
30789 7F29                      0080            .word	$80
30790                                           ! 4653                        1024,
30791 7F2B                      0400            .word	$400
30792                                           ! 4654                        768,
30793 7F2D                      0300            .word	$300
30794                                           ! 4655                      8,
30795 7F2F                        08            .byte	8
30796                                           ! 4656                      16,
30797 7F30                        10            .byte	$10
30798                                           ! 4657                           4,
30799 7F31                        04            .byte	4
30800                                           ! 4658                         4,
30801 7F32                        04            .byte	4
30802                                           ! 4659                          2,
30803 7F33                        02            .byte	2
30804                                           ! 4660                        0x03,
30805 7F34                        03            .byte	3
30806                                           ! 4661                     0,
30807 7F35                        00            .byte	0
30808                                           ! 4662                               41,
30809 7F36                        29            .byte	$29
30810                                           ! 4663                          0,
30811 7F37                        00            .byte	0
30812                                           ! 4664                        0,
30813 7F38                        00            .byte	0
30814                                           ! 4665                             0,
30815 7F39                        00            .byte	0
30816                                           ! 4666                          0,
30817 7F3A                        00            .byte	0
30818                                           ! 4667                               0,
30819 7F3B                        00            .byte	0
30820                                           ! 4668                         0,
30821 7F3C                        00            .byte	0
30822                                           ! 4669                              0,
30823 7F3D                        00            .byte	0
30824                                           ! 4670                         0,
30825 7F3E                        00            .byte	0
30826                                           ! 4671                              0,
30827 7F3F                        00            .byte	0
30828                                           ! 4672                                0,
30829 7F40                        00            .byte	0
30830                                           ! 4673                        0,
30831 7F41                      0000            .word	0
30832 7F43                      0000            .word	0
30833                                           ! 4674                               0,
30834 7F45                      0000            .word	0
30835 7F47                      0000            .word	0
30836                                           ! 4675                             0,
30837 7F49                      0000            .word	0
30838                                           ! 4676                                128,
30839 7F4B                      0080            .word	$80
30840                                           ! 4677                             0,
30841 7F4D                        00            .byte	0
30842                                           ! 4678                             0,
30843 7F4E                        00            .byte	0
30844                                           ! 4679                           0,
30845 7F4F                        00            .byte	0
30846                                           ! 4680                                0,
30847 7F50                        00            .byte	0
30848                                           ! 4681                             0,
30849 7F51                        00            .byte	0
30850                                           ! 4682                                  0,
30851 7F52                        00            .byte	0
30852                                           ! 4683                            0,
30853 7F53                        00            .byte	0
30854                                           ! 4684                                 0,
30855 7F54                        00            .byte	0
30856                                           ! 4685                            0,
30857 7F55                        00            .byte	0
30858                                           ! 4686                                 0,
30859 7F56                        00            .byte	0
30860                                           ! 4687                          0,
30861 7F57                      0000            .word	0
30862 7F59                      0000            .word	0
30863                                           ! 4688 } },
30864                                           ! 4689 { 0x0105,
30865 7F5B                      0105            .word	$105
30866                                           ! 4690 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30867 7F5D                      009B            .word	$9B
30868                                           ! 4691                           0x01 | 0x02 | 0x04,
30869 7F5F                        07            .byte	7
30870                                           ! 4692                           0,
30871 7F60                        00            .byte	0
30872                                           ! 4693                           64,
30873 7F61                      0040            .word	$40
30874                                           ! 4694                    64,
30875 7F63                      0040            .word	$40
30876                                           ! 4695                        0xA000,
30877 7F65                      A000            .word	$A000
30878                                           ! 4696                      
30879                                           ! 4696   0x0000,
30880 7F67                      0000            .word	0
30881                                           ! 4697                       0,
30882 7F69                      0000            .word	0
30883 7F6B                      0000            .word	0
30884                                           ! 4698                             1024,
30885 7F6D                      0400            .word	$400
30886                                           ! 4699                        1024,
30887 7F6F                      0400            .word	$400
30888                                           ! 4700                        768,
30889 7F71                      0300            .word	$300
30890                                           ! 4701                      8,
30891 7F73                        08            .byte	8
30892                                           ! 4702                      16,
30893 7F74                        10            .byte	$10
30894                                           ! 4703                           1,
30895 7F75                        01            .byte	1
30896                                           ! 4704                         8,
30897 7F76                        08            .byte	8
30898                                           ! 4705                          12,
30899 7F77                        0C            .byte	$C
30900                                           ! 4706                        0x04,
30901 7F78                        04            .byte	4
30902                                           ! 4707                     0,
30903 7F79                        00            .byte	0
30904                                           ! 4708                               20,
30905 7F7A                        14            .byte	$14
30906                                           ! 4709                          0,
30907 7F7B                        00            .byte	0
30908                                           ! 4710                        0,
30909 7F7C                        00            .byte	0
30910                                           ! 4711                             0,
30911 7F7D                        00            .byte	0
30912                                           ! 4712                          0,
30913 7F7E                        00            .byte	0
30914                                           ! 4713                               0,
30915 7F7F                        00            .byte	0
30916                                           ! 4714                         0,
30917 7F80                        00            .byte	0
30918                                           ! 4715                              0,
30919 7F81                        00            .byte	0
30920                                           ! 4716                         0,
30921 7F82                        00            .byte	0
30922                                           ! 4717                              0,
30923 7F83                        00            .byte	0
30924                                           ! 4718                                0,
30925 7F84                        00            .byte	0
30926                                           ! 4719                        0xE0000000,
30927 7F85                      0000            .word	0
30928 7F87                      E000            .word	$E000
30929                                           ! 4720                               0,
30930 7F89                      0000            .word	0
30931 7F8B                      0000            .word	0
30932                                           ! 4721                             0,
30933 7F8D                      0000            .word	0
30934                                           ! 4722                                1024,
30935 7F8F                      0400            .word	$400
30936                                           ! 4723                             0,
30937 7F91                        00            .byte	0
30938                                           ! 4724                             0,
30939 7F92                        00            .byte	0
30940                                           ! 4725                           0,
30941 7F93                        00            .byte	0
30942                                           ! 4726                                0,
30943 7F94                        00            .byte	0
30944                                           ! 4727                             0,
30945 7F95                        00            .byte	0
30946                                           ! 4728                                  0,
30947 7F96                        00            .byte	0
30948                                           ! 4729                            0,
30949 7F97                        00            .byte	0
30950                                           ! 4730                                 0,
30951 7F98                        00            .byte	0
30952                                           ! 4731                            0,
30953 7F99                        00            .byte	0
30954                                           ! 4732                                 0,
30955 7F9A                        00            .byte	0
30956                                           ! 4733                          0,
30957 7F9B                      0000            .word	0
30958 7F9D                      0000            .word	0
30959                                           ! 4734 } },
30960                                           ! 4735 { 0x0106,
30961 7F9F                      0106            .word	$106
30962                                           ! 4736 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30963 7FA1                      001F            .word	$1F
30964                                           ! 4737                           0x01 | 0x02 | 0x04,
30965 7FA3                        07            .byte	7
30966                                           ! 4738                           0,
30967 7FA4                        00            .byte	0
30968                                           ! 4739                           64,
30969 7FA5                      0040            .word	$40
30970                                           ! 4740                    64,
30971 7FA7                      0040            .word	$40
30972                                           ! 4741                        0xA000,
30973 7FA9                      A000            .word	$A000
30974                                           ! 4742                        0x0000,
30975 7FAB                      0000            .word	0
30976                                           ! 4743                       0,
30977 7FAD                      0000            .word	0
30978 7FAF                      0000            .word	0
30979                                           ! 4744                             160,
30980 7FB1                      00A0            .word	$A0
30981                                           ! 4745                        1280,
30982 7FB3                      0500            .word	$500
30983                                           ! 4746                        1024,
30984 7FB5                      0400            .word	$400
30985                                           ! 4747                      8,
30986 7FB7                        08            .byte	8
30987                                           ! 4748                      16,
30988 7FB8                        10            .byte	$10
30989                                           ! 4749                           4,
30990 7FB9                        04            .byte	4
30991                                           ! 4750                         4,
30992 7FBA                        04            .byte	4
30993                                           ! 4751                          3,
30994 7FBB                        03            .byte	3
30995                                           ! 4752                        0x03,
30996 7FBC                        03            .byte	3
30997                                           ! 4753                     0,
30998 7FBD                        00            .byte	0
30999                                           ! 4754                               24,
31000 7FBE                        18            .byte	$18
31001                                           ! 4755                          0,
31002 7FBF                        00            .byte	0
31003                                           ! 4756                        0,
31004 7FC0                        00            .byte	0
31005                                           ! 4757                             0,
31006 7FC1                        00            .byte	0
31007                                           ! 4758                          0,
31008 7FC2                        00            .byte	0
31009                                           ! 4759                               0,
31010 7FC3                        00            .byte	0
31011                                           ! 4760                         0,
31012 7FC4                        00            .byte	0
31013                                           ! 4761                              0,
31014 7FC5                        00            .byte	0
31015                                           ! 4762                         0,
31016 7FC6                        00            .byte	0
31017                                           ! 4763                              0,
31018 7FC7                        00            .byte	0
31019                                           ! 4764                                0,
31020 7FC8                        00            .byte	0
31021                                           ! 4765                        0,
31022 7FC9                      0000            .word	0
31023 7FCB                      0000            .word	0
31024                                           ! 4766         
31025                                           ! 4766                       0,
31026 7FCD                      0000            .word	0
31027 7FCF                      0000            .word	0
31028                                           ! 4767                             0,
31029 7FD1                      0000            .word	0
31030                                           ! 4768                                160,
31031 7FD3                      00A0            .word	$A0
31032                                           ! 4769                             0,
31033 7FD5                        00            .byte	0
31034                                           ! 4770                             0,
31035 7FD6                        00            .byte	0
31036                                           ! 4771                           0,
31037 7FD7                        00            .byte	0
31038                                           ! 4772                                0,
31039 7FD8                        00            .byte	0
31040                                           ! 4773                             0,
31041 7FD9                        00            .byte	0
31042                                           ! 4774                                  0,
31043 7FDA                        00            .byte	0
31044                                           ! 4775                            0,
31045 7FDB                        00            .byte	0
31046                                           ! 4776                                 0,
31047 7FDC                        00            .byte	0
31048                                           ! 4777                            0,
31049 7FDD                        00            .byte	0
31050                                           ! 4778                                 0,
31051 7FDE                        00            .byte	0
31052                                           ! 4779                          0,
31053 7FDF                      0000            .word	0
31054 7FE1                      0000            .word	0
31055                                           ! 4780 } },
31056                                           ! 4781 { 0x0107,
31057 7FE3                      0107            .word	$107
31058                                           ! 4782 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31059 7FE5                      009B            .word	$9B
31060                                           ! 4783                           0x01 | 0x02 | 0x04,
31061 7FE7                        07            .byte	7
31062                                           ! 4784                           0,
31063 7FE8                        00            .byte	0
31064                                           ! 4785                           64,
31065 7FE9                      0040            .word	$40
31066                                           ! 4786                    64,
31067 7FEB                      0040            .word	$40
31068                                           ! 4787                        0xA000,
31069 7FED                      A000            .word	$A000
31070                                           ! 4788                        0x0000,
31071 7FEF                      0000            .word	0
31072                                           ! 4789                       0,
31073 7FF1                      0000            .word	0
31074 7FF3                      0000            .word	0
31075                                           ! 4790                             1280,
31076 7FF5                      0500            .word	$500
31077                                           ! 4791                        1280,
31078 7FF7                      0500            .word	$500
31079                                           ! 4792                        1024,
31080 7FF9                      0400            .word	$400
31081                                           ! 4793                      8,
31082 7FFB                        08            .byte	8
31083                                           ! 4794                      16,
31084 7FFC                        10            .byte	$10
31085                                           ! 4795                           1,
31086 7FFD                        01            .byte	1
31087                                           ! 4796                         8,
31088 7FFE                        08            .byte	8
31089                                           ! 4797                          20,
31090 7FFF                        14            .byte	$14
31091                                           ! 4798                        0x04,
31092 8000                        04            .byte	4
31093                                           ! 4799                     0,
31094 8001                        00            .byte	0
31095                                           ! 4800                               11,
31096 8002                        0B            .byte	$B
31097                                           ! 4801                          0,
31098 8003                        00            .byte	0
31099                                           ! 4802                        0,
31100 8004                        00            .byte	0
31101                                           ! 4803                             0,
31102 8005                        00            .byte	0
31103                                           ! 4804                          0,
31104 8006                        00            .byte	0
31105                                           ! 4805                               0,
31106 8007                        00            .byte	0
31107                                           ! 4806                         0,
31108 8008                        00            .byte	0
31109                                           ! 4807                              0,
31110 8009                        00            .byte	0
31111                                           ! 4808                         0,
31112 800A                        00            .byte	0
31113                                           ! 4809                              0,
31114 800B                        00            .byte	0
31115                                           ! 4810                                0,
31116 800C                        00            .byte	0
31117                                           ! 4811                        0xE0000000,
31118 800D                      0000            .word	0
31119 800F                      E000            .word	$E000
31120                                           ! 4812                               0,
31121 8011                      0000            .word	0
31122 8013                      0000            .word	0
31123                                           ! 4813                             0,
31124 8015                      0000            .word	0
31125                                           ! 4814                                1280,
31126 8017                      0500            .word	$500
31127                                           ! 4815                             0,
31128 8019                        00            .byte	0
31129                                           ! 4816                             0,
31130 801A                        00            .byte	0
31131                                           ! 4817                           0,
31132 801B                        00            .byte	0
31133                                           ! 4818                                0,
31134 801C                        00            .byte	0
31135                                           ! 4819                             0,
31136 801D                        00            .byte	0
31137                                           ! 4820                                  0,
31138 801E                        00            .byte	0
31139                                           ! 4821                            0,
31140 801F                        00            .byte	0
31141                                           ! 4822                                 0,
31142 8020                        00            .byte	0
31143                                           ! 4823                            0,
31144 8021                        00            .byte	0
31145                                           ! 4824                                 0,
31146 8022                        00            .byte	0
31147                                           ! 4825                          0,
31148 8023                      0000            .word	0
31149 8025                      0000            .word	0
31150                                           ! 4826 } },
31151                                           ! 4827 { 0x010d,
31152 8027                      010D            .word	$10D
31153                                           ! 4828 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31154 8029                      009B            .word	$9B
31155                                           ! 4829                           0x01 | 0x02 | 0x04,
31156 802B                        07            .byte	7
31157                                           ! 4830                           0,
31158 802C                        00            .byte	0
31159                                           ! 4831                           64,
31160 802D                      0040            .word	$40
31161                                           ! 4832                    64,
31162 802F                      0040            .word	$40
31163                                           ! 4833                        0xA000,
31164 8031                      A000            .word	$A000
31165                                           ! 4834               
31166                                           ! 4834          0x0000,
31167 8033                      0000            .word	0
31168                                           ! 4835                       0,
31169 8035                      0000            .word	0
31170 8037                      0000            .word	0
31171                                           ! 4836                             640,
31172 8039                      0280            .word	$280
31173                                           ! 4837                        320,
31174 803B                      0140            .word	$140
31175                                           ! 4838                        200,
31176 803D                      00C8            .word	$C8
31177                                           ! 4839                      8,
31178 803F                        08            .byte	8
31179                                           ! 4840                      16,
31180 8040                        10            .byte	$10
31181                                           ! 4841                           1,
31182 8041                        01            .byte	1
31183                                           ! 4842                         15,
31184 8042                        0F            .byte	$F
31185                                           ! 4843                          2,
31186 8043                        02            .byte	2
31187                                           ! 4844                        0x06,
31188 8044                        06            .byte	6
31189                                           ! 4845                     0,
31190 8045                        00            .byte	0
31191                                           ! 4846                               130,
31192 8046                        82            .byte	$82
31193                                           ! 4847                          0,
31194 8047                        00            .byte	0
31195                                           ! 4848                        5,
31196 8048                        05            .byte	5
31197                                           ! 4849                             10,
31198 8049                        0A            .byte	$A
31199                                           ! 4850                          5,
31200 804A                        05            .byte	5
31201                                           ! 4851                               5,
31202 804B                        05            .byte	5
31203                                           ! 4852                         5,
31204 804C                        05            .byte	5
31205                                           ! 4853                              0,
31206 804D                        00            .byte	0
31207                                           ! 4854                         1,
31208 804E                        01            .byte	1
31209                                           ! 4855                              15,
31210 804F                        0F            .byte	$F
31211                                           ! 4856                                0,
31212 8050                        00            .byte	0
31213                                           ! 4857                        0xE0000000,
31214 8051                      0000            .word	0
31215 8053                      E000            .word	$E000
31216                                           ! 4858                               0,
31217 8055                      0000            .word	0
31218 8057                      0000            .word	0
31219                                           ! 4859                             0,
31220 8059                      0000            .word	0
31221                                           ! 4860                                640,
31222 805B                      0280            .word	$280
31223                                           ! 4861                             0,
31224 805D                        00            .byte	0
31225                                           ! 4862                             0,
31226 805E                        00            .byte	0
31227                                           ! 4863                           5,
31228 805F                        05            .byte	5
31229                                           ! 4864                                10,
31230 8060                        0A            .byte	$A
31231                                           ! 4865                             5,
31232 8061                        05            .byte	5
31233                                           ! 4866                                  5,
31234 8062                        05            .byte	5
31235                                           ! 4867                            5,
31236 8063                        05            .byte	5
31237                                           ! 4868                                 0,
31238 8064                        00            .byte	0
31239                                           ! 4869                            1,
31240 8065                        01            .byte	1
31241                                           ! 4870                                 15,
31242 8066                        0F            .byte	$F
31243                                           ! 4871                          0,
31244 8067                      0000            .word	0
31245 8069                      0000            .word	0
31246                                           ! 4872 } },
31247                                           ! 4873 { 0x010e,
31248 806B                      010E            .word	$10E
31249                                           ! 4874 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31250 806D                      009B            .word	$9B
31251                                           ! 4875                           0x01 | 0x02 | 0x04,
31252 806F                        07            .byte	7
31253                                           ! 4876                           0,
31254 8070                        00            .byte	0
31255                                           ! 4877                           64,
31256 8071                      0040            .word	$40
31257                                           ! 4878                    64,
31258 8073                      0040            .word	$40
31259                                           ! 4879                        0xA000,
31260 8075                      A000            .word	$A000
31261                                           ! 4880                        0x0000,
31262 8077                      0000            .word	0
31263                                           ! 4881                       0,
31264 8079                      0000            .word	0
31265 807B                      0000            .word	0
31266                                           ! 4882                             640,
31267 807D                      0280            .word	$280
31268                                           ! 4883                        320,
31269 807F                      0140            .word	$140
31270                                           ! 4884                        200,
31271 8081                      00C8            .word	$C8
31272                                           ! 4885                      8,
31273 8083                        08            .byte	8
31274                                           ! 4886                      16,
31275 8084                        10            .byte	$10
31276                                           ! 4887                           1,
31277 8085                        01            .byte	1
31278                                           ! 4888                         16,
31279 8086                        10            .byte	$10
31280                                           ! 4889                          2,
31281 8087                        02            .byte	2
31282                                           ! 4890                        0x06,
31283 8088                        06            .byte	6
31284                                           ! 4891                     0,
31285 8089                        00            .byte	0
31286                                           ! 4892                               130,
31287 808A                        82            .byte	$82
31288                                           ! 4893                          0,
31289 808B                        00            .byte	0
31290                                           ! 4894                        5,
31291 808C                        05            .byte	5
31292                                           ! 4895                             11,
31293 808D                        0B            .byte	$B
31294                                           ! 4896                          6,
31295 808E                        06            .byte	6
31296                                           ! 4897                               5,
31297 808F                        05            .byte	5
31298                                           ! 4898                         5,
31299 8090                        05            .byte	5
31300                                           ! 4899                              0,
31301 8091                        00            .byte	0
31302                                           ! 4900                         0,
31303 8092                        00            .byte	0
31304                                           ! 4901                              0,
31305 8093                        00            .byte	0
31306                                           ! 4902                                0,
31307 8094                        00            .byte	0
31308                                           ! 4903                        0
31309                                           ! 4903 xE0000000,
31310 8095                      0000            .word	0
31311 8097                      E000            .word	$E000
31312                                           ! 4904                               0,
31313 8099                      0000            .word	0
31314 809B                      0000            .word	0
31315                                           ! 4905                             0,
31316 809D                      0000            .word	0
31317                                           ! 4906                                640,
31318 809F                      0280            .word	$280
31319                                           ! 4907                             0,
31320 80A1                        00            .byte	0
31321                                           ! 4908                             0,
31322 80A2                        00            .byte	0
31323                                           ! 4909                           5,
31324 80A3                        05            .byte	5
31325                                           ! 4910                                11,
31326 80A4                        0B            .byte	$B
31327                                           ! 4911                             6,
31328 80A5                        06            .byte	6
31329                                           ! 4912                                  5,
31330 80A6                        05            .byte	5
31331                                           ! 4913                            5,
31332 80A7                        05            .byte	5
31333                                           ! 4914                                 0,
31334 80A8                        00            .byte	0
31335                                           ! 4915                            0,
31336 80A9                        00            .byte	0
31337                                           ! 4916                                 0,
31338 80AA                        00            .byte	0
31339                                           ! 4917                          0,
31340 80AB                      0000            .word	0
31341 80AD                      0000            .word	0
31342                                           ! 4918 } },
31343                                           ! 4919 { 0x010f,
31344 80AF                      010F            .word	$10F
31345                                           ! 4920 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31346 80B1                      009B            .word	$9B
31347                                           ! 4921                           0x01 | 0x02 | 0x04,
31348 80B3                        07            .byte	7
31349                                           ! 4922                           0,
31350 80B4                        00            .byte	0
31351                                           ! 4923                           64,
31352 80B5                      0040            .word	$40
31353                                           ! 4924                    64,
31354 80B7                      0040            .word	$40
31355                                           ! 4925                        0xA000,
31356 80B9                      A000            .word	$A000
31357                                           ! 4926                        0x0000,
31358 80BB                      0000            .word	0
31359                                           ! 4927                       0,
31360 80BD                      0000            .word	0
31361 80BF                      0000            .word	0
31362                                           ! 4928                             960,
31363 80C1                      03C0            .word	$3C0
31364                                           ! 4929                        320,
31365 80C3                      0140            .word	$140
31366                                           ! 4930                        200,
31367 80C5                      00C8            .word	$C8
31368                                           ! 4931                      8,
31369 80C7                        08            .byte	8
31370                                           ! 4932                      16,
31371 80C8                        10            .byte	$10
31372                                           ! 4933                           1,
31373 80C9                        01            .byte	1
31374                                           ! 4934                         24,
31375 80CA                        18            .byte	$18
31376                                           ! 4935                          3,
31377 80CB                        03            .byte	3
31378                                           ! 4936                        0x06,
31379 80CC                        06            .byte	6
31380                                           ! 4937                     0,
31381 80CD                        00            .byte	0
31382                                           ! 4938                               86,
31383 80CE                        56            .byte	$56
31384                                           ! 4939                          0,
31385 80CF                        00            .byte	0
31386                                           ! 4940                        8,
31387 80D0                        08            .byte	8
31388                                           ! 4941                             16,
31389 80D1                        10            .byte	$10
31390                                           ! 4942                          8,
31391 80D2                        08            .byte	8
31392                                           ! 4943                               8,
31393 80D3                        08            .byte	8
31394                                           ! 4944                         8,
31395 80D4                        08            .byte	8
31396                                           ! 4945                              0,
31397 80D5                        00            .byte	0
31398                                           ! 4946                         0,
31399 80D6                        00            .byte	0
31400                                           ! 4947                              0,
31401 80D7                        00            .byte	0
31402                                           ! 4948                                0,
31403 80D8                        00            .byte	0
31404                                           ! 4949                        0xE0000000,
31405 80D9                      0000            .word	0
31406 80DB                      E000            .word	$E000
31407                                           ! 4950                               0,
31408 80DD                      0000            .word	0
31409 80DF                      0000            .word	0
31410                                           ! 4951                             0,
31411 80E1                      0000            .word	0
31412                                           ! 4952                                960,
31413 80E3                      03C0            .word	$3C0
31414                                           ! 4953                             0,
31415 80E5                        00            .byte	0
31416                                           ! 4954                             0,
31417 80E6                        00            .byte	0
31418                                           ! 4955                           8,
31419 80E7                        08            .byte	8
31420                                           ! 4956                                16,
31421 80E8                        10            .byte	$10
31422                                           ! 4957                             8,
31423 80E9                        08            .byte	8
31424                                           ! 4958                                  8,
31425 80EA                        08            .byte	8
31426                                           ! 4959                            8,
31427 80EB                        08            .byte	8
31428                                           ! 4960                                 0,
31429 80EC                        00            .byte	0
31430                                           ! 4961                            0,
31431 80ED                        00            .byte	0
31432                                           ! 4962                                 0,
31433 80EE                        00            .byte	0
31434                                           ! 4963                          0,
31435 80EF                      0000            .word	0
31436 80F1                      0000            .word	0
31437                                           ! 4964 } },
31438                                           ! 4965 { 0x0110,
31439 80F3                      0110            .word	$110
31440                                           ! 4966 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31441 80F5                      009B            .word	$9B
31442                                           ! 4967                           0x01 | 0x02 | 0x04,
31443 80F7                        07            .byte	7
31444                                           ! 4968                           0,
31445 80F8                        00            .byte	0
31446                                           ! 4969                           64,
31447 80F9                      0040            .word	$40
31448                                           ! 4970                    64,
31449 80FB                      0040            .word	$40
31450                                           ! 4971                        0xA0
31451                                           ! 4971 00,
31452 80FD                      A000            .word	$A000
31453                                           ! 4972                        0x0000,
31454 80FF                      0000            .word	0
31455                                           ! 4973                       0,
31456 8101                      0000            .word	0
31457 8103                      0000            .word	0
31458                                           ! 4974                             1280,
31459 8105                      0500            .word	$500
31460                                           ! 4975                        640,
31461 8107                      0280            .word	$280
31462                                           ! 4976                        480,
31463 8109                      01E0            .word	$1E0
31464                                           ! 4977                      8,
31465 810B                        08            .byte	8
31466                                           ! 4978                      16,
31467 810C                        10            .byte	$10
31468                                           ! 4979                           1,
31469 810D                        01            .byte	1
31470                                           ! 4980                         15,
31471 810E                        0F            .byte	$F
31472                                           ! 4981                          10,
31473 810F                        0A            .byte	$A
31474                                           ! 4982                        0x06,
31475 8110                        06            .byte	6
31476                                           ! 4983                     0,
31477 8111                        00            .byte	0
31478                                           ! 4984                               26,
31479 8112                        1A            .byte	$1A
31480                                           ! 4985                          0,
31481 8113                        00            .byte	0
31482                                           ! 4986                        5,
31483 8114                        05            .byte	5
31484                                           ! 4987                             10,
31485 8115                        0A            .byte	$A
31486                                           ! 4988                          5,
31487 8116                        05            .byte	5
31488                                           ! 4989                               5,
31489 8117                        05            .byte	5
31490                                           ! 4990                         5,
31491 8118                        05            .byte	5
31492                                           ! 4991                              0,
31493 8119                        00            .byte	0
31494                                           ! 4992                         1,
31495 811A                        01            .byte	1
31496                                           ! 4993                              15,
31497 811B                        0F            .byte	$F
31498                                           ! 4994                                0,
31499 811C                        00            .byte	0
31500                                           ! 4995                        0xE0000000,
31501 811D                      0000            .word	0
31502 811F                      E000            .word	$E000
31503                                           ! 4996                               0,
31504 8121                      0000            .word	0
31505 8123                      0000            .word	0
31506                                           ! 4997                             0,
31507 8125                      0000            .word	0
31508                                           ! 4998                                1280,
31509 8127                      0500            .word	$500
31510                                           ! 4999                             0,
31511 8129                        00            .byte	0
31512                                           ! 5000                             0,
31513 812A                        00            .byte	0
31514                                           ! 5001                           5,
31515 812B                        05            .byte	5
31516                                           ! 5002                                10,
31517 812C                        0A            .byte	$A
31518                                           ! 5003                             5,
31519 812D                        05            .byte	5
31520                                           ! 5004                                  5,
31521 812E                        05            .byte	5
31522                                           ! 5005                            5,
31523 812F                        05            .byte	5
31524                                           ! 5006                                 0,
31525 8130                        00            .byte	0
31526                                           ! 5007                            1,
31527 8131                        01            .byte	1
31528                                           ! 5008                                 15,
31529 8132                        0F            .byte	$F
31530                                           ! 5009                          0,
31531 8133                      0000            .word	0
31532 8135                      0000            .word	0
31533                                           ! 5010 } },
31534                                           ! 5011 { 0x0111,
31535 8137                      0111            .word	$111
31536                                           ! 5012 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31537 8139                      009B            .word	$9B
31538                                           ! 5013                           0x01 | 0x02 | 0x04,
31539 813B                        07            .byte	7
31540                                           ! 5014                           0,
31541 813C                        00            .byte	0
31542                                           ! 5015                           64,
31543 813D                      0040            .word	$40
31544                                           ! 5016                    64,
31545 813F                      0040            .word	$40
31546                                           ! 5017                        0xA000,
31547 8141                      A000            .word	$A000
31548                                           ! 5018                        0x0000,
31549 8143                      0000            .word	0
31550                                           ! 5019                       0,
31551 8145                      0000            .word	0
31552 8147                      0000            .word	0
31553                                           ! 5020                             1280,
31554 8149                      0500            .word	$500
31555                                           ! 5021                        640,
31556 814B                      0280            .word	$280
31557                                           ! 5022                        480,
31558 814D                      01E0            .word	$1E0
31559                                           ! 5023                      8,
31560 814F                        08            .byte	8
31561                                           ! 5024                      16,
31562 8150                        10            .byte	$10
31563                                           ! 5025                           1,
31564 8151                        01            .byte	1
31565                                           ! 5026                         16,
31566 8152                        10            .byte	$10
31567                                           ! 5027                          10,
31568 8153                        0A            .byte	$A
31569                                           ! 5028                        0x06,
31570 8154                        06            .byte	6
31571                                           ! 5029                     0,
31572 8155                        00            .byte	0
31573                                           ! 5030                               26,
31574 8156                        1A            .byte	$1A
31575                                           ! 5031                          0,
31576 8157                        00            .byte	0
31577                                           ! 5032                        5,
31578 8158                        05            .byte	5
31579                                           ! 5033                             11,
31580 8159                        0B            .byte	$B
31581                                           ! 5034                          6,
31582 815A                        06            .byte	6
31583                                           ! 5035                               5,
31584 815B                        05            .byte	5
31585                                           ! 5036                         5,
31586 815C                        05            .byte	5
31587                                           ! 5037                              0,
31588 815D                        00            .byte	0
31589                                           ! 5038                         0,
31590 815E                        00            .byte	0
31591                                           ! 5039                              0,
31592 815F                        00            .byte	0
31593                                           ! 5040                                0,
31594 8160                        00            .byte	0
31595                                           ! 5041    
31596                                           ! 5041                     0xE0000000,
31597 8161                      0000            .word	0
31598 8163                      E000            .word	$E000
31599                                           ! 5042                               0,
31600 8165                      0000            .word	0
31601 8167                      0000            .word	0
31602                                           ! 5043                             0,
31603 8169                      0000            .word	0
31604                                           ! 5044                                1280,
31605 816B                      0500            .word	$500
31606                                           ! 5045                             0,
31607 816D                        00            .byte	0
31608                                           ! 5046                             0,
31609 816E                        00            .byte	0
31610                                           ! 5047                           5,
31611 816F                        05            .byte	5
31612                                           ! 5048                                11,
31613 8170                        0B            .byte	$B
31614                                           ! 5049                             6,
31615 8171                        06            .byte	6
31616                                           ! 5050                                  5,
31617 8172                        05            .byte	5
31618                                           ! 5051                            5,
31619 8173                        05            .byte	5
31620                                           ! 5052                                 0,
31621 8174                        00            .byte	0
31622                                           ! 5053                            0,
31623 8175                        00            .byte	0
31624                                           ! 5054                                 0,
31625 8176                        00            .byte	0
31626                                           ! 5055                          0,
31627 8177                      0000            .word	0
31628 8179                      0000            .word	0
31629                                           ! 5056 } },
31630                                           ! 5057 { 0x0112,
31631 817B                      0112            .word	$112
31632                                           ! 5058 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31633 817D                      009B            .word	$9B
31634                                           ! 5059                           0x01 | 0x02 | 0x04,
31635 817F                        07            .byte	7
31636                                           ! 5060                           0,
31637 8180                        00            .byte	0
31638                                           ! 5061                           64,
31639 8181                      0040            .word	$40
31640                                           ! 5062                    64,
31641 8183                      0040            .word	$40
31642                                           ! 5063                        0xA000,
31643 8185                      A000            .word	$A000
31644                                           ! 5064                        0x0000,
31645 8187                      0000            .word	0
31646                                           ! 5065                       0,
31647 8189                      0000            .word	0
31648 818B                      0000            .word	0
31649                                           ! 5066                             1920,
31650 818D                      0780            .word	$780
31651                                           ! 5067                        640,
31652 818F                      0280            .word	$280
31653                                           ! 5068                        480,
31654 8191                      01E0            .word	$1E0
31655                                           ! 5069                      8,
31656 8193                        08            .byte	8
31657                                           ! 5070                      16,
31658 8194                        10            .byte	$10
31659                                           ! 5071                           1,
31660 8195                        01            .byte	1
31661                                           ! 5072                         24,
31662 8196                        18            .byte	$18
31663                                           ! 5073                          15,
31664 8197                        0F            .byte	$F
31665                                           ! 5074                        0x06,
31666 8198                        06            .byte	6
31667                                           ! 5075                     0,
31668 8199                        00            .byte	0
31669                                           ! 5076                               17,
31670 819A                        11            .byte	$11
31671                                           ! 5077                          0,
31672 819B                        00            .byte	0
31673                                           ! 5078                        8,
31674 819C                        08            .byte	8
31675                                           ! 5079                             16,
31676 819D                        10            .byte	$10
31677                                           ! 5080                          8,
31678 819E                        08            .byte	8
31679                                           ! 5081                               8,
31680 819F                        08            .byte	8
31681                                           ! 5082                         8,
31682 81A0                        08            .byte	8
31683                                           ! 5083                              0,
31684 81A1                        00            .byte	0
31685                                           ! 5084                         0,
31686 81A2                        00            .byte	0
31687                                           ! 5085                              0,
31688 81A3                        00            .byte	0
31689                                           ! 5086                                0,
31690 81A4                        00            .byte	0
31691                                           ! 5087                        0xE0000000,
31692 81A5                      0000            .word	0
31693 81A7                      E000            .word	$E000
31694                                           ! 5088                               0,
31695 81A9                      0000            .word	0
31696 81AB                      0000            .word	0
31697                                           ! 5089                             0,
31698 81AD                      0000            .word	0
31699                                           ! 5090                                1920,
31700 81AF                      0780            .word	$780
31701                                           ! 5091                             0,
31702 81B1                        00            .byte	0
31703                                           ! 5092                             0,
31704 81B2                        00            .byte	0
31705                                           ! 5093                           8,
31706 81B3                        08            .byte	8
31707                                           ! 5094                                16,
31708 81B4                        10            .byte	$10
31709                                           ! 5095                             8,
31710 81B5                        08            .byte	8
31711                                           ! 5096                                  8,
31712 81B6                        08            .byte	8
31713                                           ! 5097                            8,
31714 81B7                        08            .byte	8
31715                                           ! 5098                                 0,
31716 81B8                        00            .byte	0
31717                                           ! 5099                            0,
31718 81B9                        00            .byte	0
31719                                           ! 5100                                 0,
31720 81BA                        00            .byte	0
31721                                           ! 5101                          0,
31722 81BB                      0000            .word	0
31723 81BD                      0000            .word	0
31724                                           ! 5102 } },
31725                                           ! 5103 { 0x0113,
31726 81BF                      0113            .word	$113
31727                                           ! 5104 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31728 81C1                      009B            .word	$9B
31729                                           ! 5105                           0x01 | 0x02 | 0x04,
31730 81C3                        07            .byte	7
31731                                           ! 5106                           0,
31732 81C4                        00            .byte	0
31733                                           ! 5107                           64,
31734 81C5                      0040            .word	$40
31735                                           ! 5108                    64,
31736 81C7                      0040            .word	$40
31737                                           ! 5109   
31738                                           ! 5109                      0xA000,
31739 81C9                      A000            .word	$A000
31740                                           ! 5110                        0x0000,
31741 81CB                      0000            .word	0
31742                                           ! 5111                       0,
31743 81CD                      0000            .word	0
31744 81CF                      0000            .word	0
31745                                           ! 5112                             1600,
31746 81D1                      0640            .word	$640
31747                                           ! 5113                        800,
31748 81D3                      0320            .word	$320
31749                                           ! 5114                        600,
31750 81D5                      0258            .word	$258
31751                                           ! 5115                      8,
31752 81D7                        08            .byte	8
31753                                           ! 5116                      16,
31754 81D8                        10            .byte	$10
31755                                           ! 5117                           1,
31756 81D9                        01            .byte	1
31757                                           ! 5118                         15,
31758 81DA                        0F            .byte	$F
31759                                           ! 5119                          15,
31760 81DB                        0F            .byte	$F
31761                                           ! 5120                        0x06,
31762 81DC                        06            .byte	6
31763                                           ! 5121                     0,
31764 81DD                        00            .byte	0
31765                                           ! 5122                               16,
31766 81DE                        10            .byte	$10
31767                                           ! 5123                          0,
31768 81DF                        00            .byte	0
31769                                           ! 5124                        5,
31770 81E0                        05            .byte	5
31771                                           ! 5125                             10,
31772 81E1                        0A            .byte	$A
31773                                           ! 5126                          5,
31774 81E2                        05            .byte	5
31775                                           ! 5127                               5,
31776 81E3                        05            .byte	5
31777                                           ! 5128                         5,
31778 81E4                        05            .byte	5
31779                                           ! 5129                              0,
31780 81E5                        00            .byte	0
31781                                           ! 5130                         1,
31782 81E6                        01            .byte	1
31783                                           ! 5131                              15,
31784 81E7                        0F            .byte	$F
31785                                           ! 5132                                0,
31786 81E8                        00            .byte	0
31787                                           ! 5133                        0xE0000000,
31788 81E9                      0000            .word	0
31789 81EB                      E000            .word	$E000
31790                                           ! 5134                               0,
31791 81ED                      0000            .word	0
31792 81EF                      0000            .word	0
31793                                           ! 5135                             0,
31794 81F1                      0000            .word	0
31795                                           ! 5136                                1600,
31796 81F3                      0640            .word	$640
31797                                           ! 5137                             0,
31798 81F5                        00            .byte	0
31799                                           ! 5138                             0,
31800 81F6                        00            .byte	0
31801                                           ! 5139                           5,
31802 81F7                        05            .byte	5
31803                                           ! 5140                                10,
31804 81F8                        0A            .byte	$A
31805                                           ! 5141                             5,
31806 81F9                        05            .byte	5
31807                                           ! 5142                                  5,
31808 81FA                        05            .byte	5
31809                                           ! 5143                            5,
31810 81FB                        05            .byte	5
31811                                           ! 5144                                 0,
31812 81FC                        00            .byte	0
31813                                           ! 5145                            1,
31814 81FD                        01            .byte	1
31815                                           ! 5146                                 15,
31816 81FE                        0F            .byte	$F
31817                                           ! 5147                          0,
31818 81FF                      0000            .word	0
31819 8201                      0000            .word	0
31820                                           ! 5148 } },
31821                                           ! 5149 { 0x0114,
31822 8203                      0114            .word	$114
31823                                           ! 5150 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31824 8205                      009B            .word	$9B
31825                                           ! 5151                           0x01 | 0x02 | 0x04,
31826 8207                        07            .byte	7
31827                                           ! 5152                           0,
31828 8208                        00            .byte	0
31829                                           ! 5153                           64,
31830 8209                      0040            .word	$40
31831                                           ! 5154                    64,
31832 820B                      0040            .word	$40
31833                                           ! 5155                        0xA000,
31834 820D                      A000            .word	$A000
31835                                           ! 5156                        0x0000,
31836 820F                      0000            .word	0
31837                                           ! 5157                       0,
31838 8211                      0000            .word	0
31839 8213                      0000            .word	0
31840                                           ! 5158                             1600,
31841 8215                      0640            .word	$640
31842                                           ! 5159                        800,
31843 8217                      0320            .word	$320
31844                                           ! 5160                        600,
31845 8219                      0258            .word	$258
31846                                           ! 5161                      8,
31847 821B                        08            .byte	8
31848                                           ! 5162                      16,
31849 821C                        10            .byte	$10
31850                                           ! 5163                           1,
31851 821D                        01            .byte	1
31852                                           ! 5164                         16,
31853 821E                        10            .byte	$10
31854                                           ! 5165                          15,
31855 821F                        0F            .byte	$F
31856                                           ! 5166                        0x06,
31857 8220                        06            .byte	6
31858                                           ! 5167                     0,
31859 8221                        00            .byte	0
31860                                           ! 5168                               16,
31861 8222                        10            .byte	$10
31862                                           ! 5169                          0,
31863 8223                        00            .byte	0
31864                                           ! 5170                        5,
31865 8224                        05            .byte	5
31866                                           ! 5171                             11,
31867 8225                        0B            .byte	$B
31868                                           ! 5172                          6,
31869 8226                        06            .byte	6
31870                                           ! 5173                               5,
31871 8227                        05            .byte	5
31872                                           ! 5174                         5,
31873 8228                        05            .byte	5
31874                                           ! 5175                              0,
31875 8229                        00            .byte	0
31876                                           ! 5176                         0,
31877 822A                        00            .byte	0
31878                                           ! 5177                              0,
31879 822B                        00            .byte	0
31880                                           ! 5178             
31881                                           ! 5178                    0,
31882 822C                        00            .byte	0
31883                                           ! 5179                        0xE0000000,
31884 822D                      0000            .word	0
31885 822F                      E000            .word	$E000
31886                                           ! 5180                               0,
31887 8231                      0000            .word	0
31888 8233                      0000            .word	0
31889                                           ! 5181                             0,
31890 8235                      0000            .word	0
31891                                           ! 5182                                1600,
31892 8237                      0640            .word	$640
31893                                           ! 5183                             0,
31894 8239                        00            .byte	0
31895                                           ! 5184                             0,
31896 823A                        00            .byte	0
31897                                           ! 5185                           5,
31898 823B                        05            .byte	5
31899                                           ! 5186                                11,
31900 823C                        0B            .byte	$B
31901                                           ! 5187                             6,
31902 823D                        06            .byte	6
31903                                           ! 5188                                  5,
31904 823E                        05            .byte	5
31905                                           ! 5189                            5,
31906 823F                        05            .byte	5
31907                                           ! 5190                                 0,
31908 8240                        00            .byte	0
31909                                           ! 5191                            0,
31910 8241                        00            .byte	0
31911                                           ! 5192                                 0,
31912 8242                        00            .byte	0
31913                                           ! 5193                          0,
31914 8243                      0000            .word	0
31915 8245                      0000            .word	0
31916                                           ! 5194 } },
31917                                           ! 5195 { 0x0115,
31918 8247                      0115            .word	$115
31919                                           ! 5196 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31920 8249                      009B            .word	$9B
31921                                           ! 5197                           0x01 | 0x02 | 0x04,
31922 824B                        07            .byte	7
31923                                           ! 5198                           0,
31924 824C                        00            .byte	0
31925                                           ! 5199                           64,
31926 824D                      0040            .word	$40
31927                                           ! 5200                    64,
31928 824F                      0040            .word	$40
31929                                           ! 5201                        0xA000,
31930 8251                      A000            .word	$A000
31931                                           ! 5202                        0x0000,
31932 8253                      0000            .word	0
31933                                           ! 5203                       0,
31934 8255                      0000            .word	0
31935 8257                      0000            .word	0
31936                                           ! 5204                             2400,
31937 8259                      0960            .word	$960
31938                                           ! 5205                        800,
31939 825B                      0320            .word	$320
31940                                           ! 5206                        600,
31941 825D                      0258            .word	$258
31942                                           ! 5207                      8,
31943 825F                        08            .byte	8
31944                                           ! 5208                      16,
31945 8260                        10            .byte	$10
31946                                           ! 5209                           1,
31947 8261                        01            .byte	1
31948                                           ! 5210                         24,
31949 8262                        18            .byte	$18
31950                                           ! 5211                          22,
31951 8263                        16            .byte	$16
31952                                           ! 5212                        0x06,
31953 8264                        06            .byte	6
31954                                           ! 5213                     0,
31955 8265                        00            .byte	0
31956                                           ! 5214                               10,
31957 8266                        0A            .byte	$A
31958                                           ! 5215                          0,
31959 8267                        00            .byte	0
31960                                           ! 5216                        8,
31961 8268                        08            .byte	8
31962                                           ! 5217                             16,
31963 8269                        10            .byte	$10
31964                                           ! 5218                          8,
31965 826A                        08            .byte	8
31966                                           ! 5219                               8,
31967 826B                        08            .byte	8
31968                                           ! 5220                         8,
31969 826C                        08            .byte	8
31970                                           ! 5221                              0,
31971 826D                        00            .byte	0
31972                                           ! 5222                         0,
31973 826E                        00            .byte	0
31974                                           ! 5223                              0,
31975 826F                        00            .byte	0
31976                                           ! 5224                                0,
31977 8270                        00            .byte	0
31978                                           ! 5225                        0xE0000000,
31979 8271                      0000            .word	0
31980 8273                      E000            .word	$E000
31981                                           ! 5226                               0,
31982 8275                      0000            .word	0
31983 8277                      0000            .word	0
31984                                           ! 5227                             0,
31985 8279                      0000            .word	0
31986                                           ! 5228                                2400,
31987 827B                      0960            .word	$960
31988                                           ! 5229                             0,
31989 827D                        00            .byte	0
31990                                           ! 5230                             0,
31991 827E                        00            .byte	0
31992                                           ! 5231                           8,
31993 827F                        08            .byte	8
31994                                           ! 5232                                16,
31995 8280                        10            .byte	$10
31996                                           ! 5233                             8,
31997 8281                        08            .byte	8
31998                                           ! 5234                                  8,
31999 8282                        08            .byte	8
32000                                           ! 5235                            8,
32001 8283                        08            .byte	8
32002                                           ! 5236                                 0,
32003 8284                        00            .byte	0
32004                                           ! 5237                            0,
32005 8285                        00            .byte	0
32006                                           ! 5238                                 0,
32007 8286                        00            .byte	0
32008                                           ! 5239                          0,
32009 8287                      0000            .word	0
32010 8289                      0000            .word	0
32011                                           ! 5240 } },
32012                                           ! 5241 { 0x0116,
32013 828B                      0116            .word	$116
32014                                           ! 5242 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32015 828D                      009B            .word	$9B
32016                                           ! 5243                           0x01 | 0x02 | 0x04,
32017 828F                        07            .byte	7
32018                                           ! 5244                           0,
32019 8290                        00            .byte	0
32020                                           ! 5245                           64,
32021 8291                      0040            .word	$40
32022                                           ! 5246 
32023                                           ! 5246                    64,
32024 8293                      0040            .word	$40
32025                                           ! 5247                        0xA000,
32026 8295                      A000            .word	$A000
32027                                           ! 5248                        0x0000,
32028 8297                      0000            .word	0
32029                                           ! 5249                       0,
32030 8299                      0000            .word	0
32031 829B                      0000            .word	0
32032                                           ! 5250                             2048,
32033 829D                      0800            .word	$800
32034                                           ! 5251                        1024,
32035 829F                      0400            .word	$400
32036                                           ! 5252                        768,
32037 82A1                      0300            .word	$300
32038                                           ! 5253                      8,
32039 82A3                        08            .byte	8
32040                                           ! 5254                      16,
32041 82A4                        10            .byte	$10
32042                                           ! 5255                           1,
32043 82A5                        01            .byte	1
32044                                           ! 5256                         15,
32045 82A6                        0F            .byte	$F
32046                                           ! 5257                          24,
32047 82A7                        18            .byte	$18
32048                                           ! 5258                        0x06,
32049 82A8                        06            .byte	6
32050                                           ! 5259                     0,
32051 82A9                        00            .byte	0
32052                                           ! 5260                               9,
32053 82AA                        09            .byte	9
32054                                           ! 5261                          0,
32055 82AB                        00            .byte	0
32056                                           ! 5262                        5,
32057 82AC                        05            .byte	5
32058                                           ! 5263                             10,
32059 82AD                        0A            .byte	$A
32060                                           ! 5264                          5,
32061 82AE                        05            .byte	5
32062                                           ! 5265                               5,
32063 82AF                        05            .byte	5
32064                                           ! 5266                         5,
32065 82B0                        05            .byte	5
32066                                           ! 5267                              0,
32067 82B1                        00            .byte	0
32068                                           ! 5268                         1,
32069 82B2                        01            .byte	1
32070                                           ! 5269                              15,
32071 82B3                        0F            .byte	$F
32072                                           ! 5270                                0,
32073 82B4                        00            .byte	0
32074                                           ! 5271                        0xE0000000,
32075 82B5                      0000            .word	0
32076 82B7                      E000            .word	$E000
32077                                           ! 5272                               0,
32078 82B9                      0000            .word	0
32079 82BB                      0000            .word	0
32080                                           ! 5273                             0,
32081 82BD                      0000            .word	0
32082                                           ! 5274                                2048,
32083 82BF                      0800            .word	$800
32084                                           ! 5275                             0,
32085 82C1                        00            .byte	0
32086                                           ! 5276                             0,
32087 82C2                        00            .byte	0
32088                                           ! 5277                           5,
32089 82C3                        05            .byte	5
32090                                           ! 5278                                10,
32091 82C4                        0A            .byte	$A
32092                                           ! 5279                             5,
32093 82C5                        05            .byte	5
32094                                           ! 5280                                  5,
32095 82C6                        05            .byte	5
32096                                           ! 5281                            5,
32097 82C7                        05            .byte	5
32098                                           ! 5282                                 0,
32099 82C8                        00            .byte	0
32100                                           ! 5283                            1,
32101 82C9                        01            .byte	1
32102                                           ! 5284                                 15,
32103 82CA                        0F            .byte	$F
32104                                           ! 5285                          0,
32105 82CB                      0000            .word	0
32106 82CD                      0000            .word	0
32107                                           ! 5286 } },
32108                                           ! 5287 { 0x0117,
32109 82CF                      0117            .word	$117
32110                                           ! 5288 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32111 82D1                      009B            .word	$9B
32112                                           ! 5289                           0x01 | 0x02 | 0x04,
32113 82D3                        07            .byte	7
32114                                           ! 5290                           0,
32115 82D4                        00            .byte	0
32116                                           ! 5291                           64,
32117 82D5                      0040            .word	$40
32118                                           ! 5292                    64,
32119 82D7                      0040            .word	$40
32120                                           ! 5293                        0xA000,
32121 82D9                      A000            .word	$A000
32122                                           ! 5294                        0x0000,
32123 82DB                      0000            .word	0
32124                                           ! 5295                       0,
32125 82DD                      0000            .word	0
32126 82DF                      0000            .word	0
32127                                           ! 5296                             2048,
32128 82E1                      0800            .word	$800
32129                                           ! 5297                        1024,
32130 82E3                      0400            .word	$400
32131                                           ! 5298                        768,
32132 82E5                      0300            .word	$300
32133                                           ! 5299                      8,
32134 82E7                        08            .byte	8
32135                                           ! 5300                      16,
32136 82E8                        10            .byte	$10
32137                                           ! 5301                           1,
32138 82E9                        01            .byte	1
32139                                           ! 5302                         16,
32140 82EA                        10            .byte	$10
32141                                           ! 5303                          24,
32142 82EB                        18            .byte	$18
32143                                           ! 5304                        0x06,
32144 82EC                        06            .byte	6
32145                                           ! 5305                     0,
32146 82ED                        00            .byte	0
32147                                           ! 5306                               9,
32148 82EE                        09            .byte	9
32149                                           ! 5307                          0,
32150 82EF                        00            .byte	0
32151                                           ! 5308                        5,
32152 82F0                        05            .byte	5
32153                                           ! 5309                             11,
32154 82F1                        0B            .byte	$B
32155                                           ! 5310                          6,
32156 82F2                        06            .byte	6
32157                                           ! 5311                               5,
32158 82F3                        05            .byte	5
32159                                           ! 5312                         5,
32160 82F4                        05            .byte	5
32161                                           ! 5313                              0,
32162 82F5                        00            .byte	0
32163                                           ! 5314                         0,
32164 82F6                        00            .byte	0
32165                                           ! 5315                    
32166                                           ! 5315           0,
32167 82F7                        00            .byte	0
32168                                           ! 5316                                0,
32169 82F8                        00            .byte	0
32170                                           ! 5317                        0xE0000000,
32171 82F9                      0000            .word	0
32172 82FB                      E000            .word	$E000
32173                                           ! 5318                               0,
32174 82FD                      0000            .word	0
32175 82FF                      0000            .word	0
32176                                           ! 5319                             0,
32177 8301                      0000            .word	0
32178                                           ! 5320                                2048,
32179 8303                      0800            .word	$800
32180                                           ! 5321                             0,
32181 8305                        00            .byte	0
32182                                           ! 5322                             0,
32183 8306                        00            .byte	0
32184                                           ! 5323                           5,
32185 8307                        05            .byte	5
32186                                           ! 5324                                11,
32187 8308                        0B            .byte	$B
32188                                           ! 5325                             6,
32189 8309                        06            .byte	6
32190                                           ! 5326                                  5,
32191 830A                        05            .byte	5
32192                                           ! 5327                            5,
32193 830B                        05            .byte	5
32194                                           ! 5328                                 0,
32195 830C                        00            .byte	0
32196                                           ! 5329                            0,
32197 830D                        00            .byte	0
32198                                           ! 5330                                 0,
32199 830E                        00            .byte	0
32200                                           ! 5331                          0,
32201 830F                      0000            .word	0
32202 8311                      0000            .word	0
32203                                           ! 5332 } },
32204                                           ! 5333 { 0x0118,
32205 8313                      0118            .word	$118
32206                                           ! 5334 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32207 8315                      009B            .word	$9B
32208                                           ! 5335                           0x01 | 0x02 | 0x04,
32209 8317                        07            .byte	7
32210                                           ! 5336                           0,
32211 8318                        00            .byte	0
32212                                           ! 5337                           64,
32213 8319                      0040            .word	$40
32214                                           ! 5338                    64,
32215 831B                      0040            .word	$40
32216                                           ! 5339                        0xA000,
32217 831D                      A000            .word	$A000
32218                                           ! 5340                        0x0000,
32219 831F                      0000            .word	0
32220                                           ! 5341                       0,
32221 8321                      0000            .word	0
32222 8323                      0000            .word	0
32223                                           ! 5342                             3072,
32224 8325                      0C00            .word	$C00
32225                                           ! 5343                        1024,
32226 8327                      0400            .word	$400
32227                                           ! 5344                        768,
32228 8329                      0300            .word	$300
32229                                           ! 5345                      8,
32230 832B                        08            .byte	8
32231                                           ! 5346                      16,
32232 832C                        10            .byte	$10
32233                                           ! 5347                           1,
32234 832D                        01            .byte	1
32235                                           ! 5348                         24,
32236 832E                        18            .byte	$18
32237                                           ! 5349                          36,
32238 832F                        24            .byte	$24
32239                                           ! 5350                        0x06,
32240 8330                        06            .byte	6
32241                                           ! 5351                     0,
32242 8331                        00            .byte	0
32243                                           ! 5352                               6,
32244 8332                        06            .byte	6
32245                                           ! 5353                          0,
32246 8333                        00            .byte	0
32247                                           ! 5354                        8,
32248 8334                        08            .byte	8
32249                                           ! 5355                             16,
32250 8335                        10            .byte	$10
32251                                           ! 5356                          8,
32252 8336                        08            .byte	8
32253                                           ! 5357                               8,
32254 8337                        08            .byte	8
32255                                           ! 5358                         8,
32256 8338                        08            .byte	8
32257                                           ! 5359                              0,
32258 8339                        00            .byte	0
32259                                           ! 5360                         0,
32260 833A                        00            .byte	0
32261                                           ! 5361                              0,
32262 833B                        00            .byte	0
32263                                           ! 5362                                0,
32264 833C                        00            .byte	0
32265                                           ! 5363                        0xE0000000,
32266 833D                      0000            .word	0
32267 833F                      E000            .word	$E000
32268                                           ! 5364                               0,
32269 8341                      0000            .word	0
32270 8343                      0000            .word	0
32271                                           ! 5365                             0,
32272 8345                      0000            .word	0
32273                                           ! 5366                                3072,
32274 8347                      0C00            .word	$C00
32275                                           ! 5367                             0,
32276 8349                        00            .byte	0
32277                                           ! 5368                             0,
32278 834A                        00            .byte	0
32279                                           ! 5369                           8,
32280 834B                        08            .byte	8
32281                                           ! 5370                                16,
32282 834C                        10            .byte	$10
32283                                           ! 5371                             8,
32284 834D                        08            .byte	8
32285                                           ! 5372                                  8,
32286 834E                        08            .byte	8
32287                                           ! 5373                            8,
32288 834F                        08            .byte	8
32289                                           ! 5374                                 0,
32290 8350                        00            .byte	0
32291                                           ! 5375                            0,
32292 8351                        00            .byte	0
32293                                           ! 5376                                 0,
32294 8352                        00            .byte	0
32295                                           ! 5377                          0,
32296 8353                      0000            .word	0
32297 8355                      0000            .word	0
32298                                           ! 5378 } },
32299                                           ! 5379 { 0x0119,
32300 8357                      0119            .word	$119
32301                                           ! 5380 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32302 8359                      009B            .word	$9B
32303                                           ! 5381                           0x01 | 0x02 | 0x04,
32304 835B                        07            .byte	7
32305                                           ! 5382                           0,
32306 835C                        00            .byte	0
32307                                           ! 5383      
32308                                           ! 5383                      64,
32309 835D                      0040            .word	$40
32310                                           ! 5384                    64,
32311 835F                      0040            .word	$40
32312                                           ! 5385                        0xA000,
32313 8361                      A000            .word	$A000
32314                                           ! 5386                        0x0000,
32315 8363                      0000            .word	0
32316                                           ! 5387                       0,
32317 8365                      0000            .word	0
32318 8367                      0000            .word	0
32319                                           ! 5388                             2560,
32320 8369                      0A00            .word	$A00
32321                                           ! 5389                        1280,
32322 836B                      0500            .word	$500
32323                                           ! 5390                        1024,
32324 836D                      0400            .word	$400
32325                                           ! 5391                      8,
32326 836F                        08            .byte	8
32327                                           ! 5392                      16,
32328 8370                        10            .byte	$10
32329                                           ! 5393                           1,
32330 8371                        01            .byte	1
32331                                           ! 5394                         15,
32332 8372                        0F            .byte	$F
32333                                           ! 5395                          40,
32334 8373                        28            .byte	$28
32335                                           ! 5396                        0x06,
32336 8374                        06            .byte	6
32337                                           ! 5397                     0,
32338 8375                        00            .byte	0
32339                                           ! 5398                               5,
32340 8376                        05            .byte	5
32341                                           ! 5399                          0,
32342 8377                        00            .byte	0
32343                                           ! 5400                        5,
32344 8378                        05            .byte	5
32345                                           ! 5401                             10,
32346 8379                        0A            .byte	$A
32347                                           ! 5402                          5,
32348 837A                        05            .byte	5
32349                                           ! 5403                               5,
32350 837B                        05            .byte	5
32351                                           ! 5404                         5,
32352 837C                        05            .byte	5
32353                                           ! 5405                              0,
32354 837D                        00            .byte	0
32355                                           ! 5406                         1,
32356 837E                        01            .byte	1
32357                                           ! 5407                              15,
32358 837F                        0F            .byte	$F
32359                                           ! 5408                                0,
32360 8380                        00            .byte	0
32361                                           ! 5409                        0xE0000000,
32362 8381                      0000            .word	0
32363 8383                      E000            .word	$E000
32364                                           ! 5410                               0,
32365 8385                      0000            .word	0
32366 8387                      0000            .word	0
32367                                           ! 5411                             0,
32368 8389                      0000            .word	0
32369                                           ! 5412                                2560,
32370 838B                      0A00            .word	$A00
32371                                           ! 5413                             0,
32372 838D                        00            .byte	0
32373                                           ! 5414                             0,
32374 838E                        00            .byte	0
32375                                           ! 5415                           5,
32376 838F                        05            .byte	5
32377                                           ! 5416                                10,
32378 8390                        0A            .byte	$A
32379                                           ! 5417                             5,
32380 8391                        05            .byte	5
32381                                           ! 5418                                  5,
32382 8392                        05            .byte	5
32383                                           ! 5419                            5,
32384 8393                        05            .byte	5
32385                                           ! 5420                                 0,
32386 8394                        00            .byte	0
32387                                           ! 5421                            1,
32388 8395                        01            .byte	1
32389                                           ! 5422                                 15,
32390 8396                        0F            .byte	$F
32391                                           ! 5423                          0,
32392 8397                      0000            .word	0
32393 8399                      0000            .word	0
32394                                           ! 5424 } },
32395                                           ! 5425 { 0x011a,
32396 839B                      011A            .word	$11A
32397                                           ! 5426 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32398 839D                      009B            .word	$9B
32399                                           ! 5427                           0x01 | 0x02 | 0x04,
32400 839F                        07            .byte	7
32401                                           ! 5428                           0,
32402 83A0                        00            .byte	0
32403                                           ! 5429                           64,
32404 83A1                      0040            .word	$40
32405                                           ! 5430                    64,
32406 83A3                      0040            .word	$40
32407                                           ! 5431                        0xA000,
32408 83A5                      A000            .word	$A000
32409                                           ! 5432                        0x0000,
32410 83A7                      0000            .word	0
32411                                           ! 5433                       0,
32412 83A9                      0000            .word	0
32413 83AB                      0000            .word	0
32414                                           ! 5434                             2560,
32415 83AD                      0A00            .word	$A00
32416                                           ! 5435                        1280,
32417 83AF                      0500            .word	$500
32418                                           ! 5436                        1024,
32419 83B1                      0400            .word	$400
32420                                           ! 5437                      8,
32421 83B3                        08            .byte	8
32422                                           ! 5438                      16,
32423 83B4                        10            .byte	$10
32424                                           ! 5439                           1,
32425 83B5                        01            .byte	1
32426                                           ! 5440                         16,
32427 83B6                        10            .byte	$10
32428                                           ! 5441                          40,
32429 83B7                        28            .byte	$28
32430                                           ! 5442                        0x06,
32431 83B8                        06            .byte	6
32432                                           ! 5443                     0,
32433 83B9                        00            .byte	0
32434                                           ! 5444                               5,
32435 83BA                        05            .byte	5
32436                                           ! 5445                          0,
32437 83BB                        00            .byte	0
32438                                           ! 5446                        5,
32439 83BC                        05            .byte	5
32440                                           ! 5447                             11,
32441 83BD                        0B            .byte	$B
32442                                           ! 5448                          6,
32443 83BE                        06            .byte	6
32444                                           ! 5449                               5,
32445 83BF                        05            .byte	5
32446                                           ! 5450                         5,
32447 83C0                        05            .byte	5
32448                                           ! 5451                              0,
32449 83C1                        00            .byte	0
32450                                           ! 5452                    
32451                                           ! 5452      0,
32452 83C2                        00            .byte	0
32453                                           ! 5453                              0,
32454 83C3                        00            .byte	0
32455                                           ! 5454                                0,
32456 83C4                        00            .byte	0
32457                                           ! 5455                        0xE0000000,
32458 83C5                      0000            .word	0
32459 83C7                      E000            .word	$E000
32460                                           ! 5456                               0,
32461 83C9                      0000            .word	0
32462 83CB                      0000            .word	0
32463                                           ! 5457                             0,
32464 83CD                      0000            .word	0
32465                                           ! 5458                                2560,
32466 83CF                      0A00            .word	$A00
32467                                           ! 5459                             0,
32468 83D1                        00            .byte	0
32469                                           ! 5460                             0,
32470 83D2                        00            .byte	0
32471                                           ! 5461                           5,
32472 83D3                        05            .byte	5
32473                                           ! 5462                                11,
32474 83D4                        0B            .byte	$B
32475                                           ! 5463                             6,
32476 83D5                        06            .byte	6
32477                                           ! 5464                                  5,
32478 83D6                        05            .byte	5
32479                                           ! 5465                            5,
32480 83D7                        05            .byte	5
32481                                           ! 5466                                 0,
32482 83D8                        00            .byte	0
32483                                           ! 5467                            0,
32484 83D9                        00            .byte	0
32485                                           ! 5468                                 0,
32486 83DA                        00            .byte	0
32487                                           ! 5469                          0,
32488 83DB                      0000            .word	0
32489 83DD                      0000            .word	0
32490                                           ! 5470 } },
32491                                           ! 5471 { 0x011b,
32492 83DF                      011B            .word	$11B
32493                                           ! 5472 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32494 83E1                      009B            .word	$9B
32495                                           ! 5473                           0x01 | 0x02 | 0x04,
32496 83E3                        07            .byte	7
32497                                           ! 5474                           0,
32498 83E4                        00            .byte	0
32499                                           ! 5475                           64,
32500 83E5                      0040            .word	$40
32501                                           ! 5476                    64,
32502 83E7                      0040            .word	$40
32503                                           ! 5477                        0xA000,
32504 83E9                      A000            .word	$A000
32505                                           ! 5478                        0x0000,
32506 83EB                      0000            .word	0
32507                                           ! 5479                       0,
32508 83ED                      0000            .word	0
32509 83EF                      0000            .word	0
32510                                           ! 5480                             3840,
32511 83F1                      0F00            .word	$F00
32512                                           ! 5481                        1280,
32513 83F3                      0500            .word	$500
32514                                           ! 5482                        1024,
32515 83F5                      0400            .word	$400
32516                                           ! 5483                      8,
32517 83F7                        08            .byte	8
32518                                           ! 5484                      16,
32519 83F8                        10            .byte	$10
32520                                           ! 5485                           1,
32521 83F9                        01            .byte	1
32522                                           ! 5486                         24,
32523 83FA                        18            .byte	$18
32524                                           ! 5487                          60,
32525 83FB                        3C            .byte	$3C
32526                                           ! 5488                        0x06,
32527 83FC                        06            .byte	6
32528                                           ! 5489                     0,
32529 83FD                        00            .byte	0
32530                                           ! 5490                               3,
32531 83FE                        03            .byte	3
32532                                           ! 5491                          0,
32533 83FF                        00            .byte	0
32534                                           ! 5492                        8,
32535 8400                        08            .byte	8
32536                                           ! 5493                             16,
32537 8401                        10            .byte	$10
32538                                           ! 5494                          8,
32539 8402                        08            .byte	8
32540                                           ! 5495                               8,
32541 8403                        08            .byte	8
32542                                           ! 5496                         8,
32543 8404                        08            .byte	8
32544                                           ! 5497                              0,
32545 8405                        00            .byte	0
32546                                           ! 5498                         0,
32547 8406                        00            .byte	0
32548                                           ! 5499                              0,
32549 8407                        00            .byte	0
32550                                           ! 5500                                0,
32551 8408                        00            .byte	0
32552                                           ! 5501                        0xE0000000,
32553 8409                      0000            .word	0
32554 840B                      E000            .word	$E000
32555                                           ! 5502                               0,
32556 840D                      0000            .word	0
32557 840F                      0000            .word	0
32558                                           ! 5503                             0,
32559 8411                      0000            .word	0
32560                                           ! 5504                                3840,
32561 8413                      0F00            .word	$F00
32562                                           ! 5505                             0,
32563 8415                        00            .byte	0
32564                                           ! 5506                             0,
32565 8416                        00            .byte	0
32566                                           ! 5507                           8,
32567 8417                        08            .byte	8
32568                                           ! 5508                                16,
32569 8418                        10            .byte	$10
32570                                           ! 5509                             8,
32571 8419                        08            .byte	8
32572                                           ! 5510                                  8,
32573 841A                        08            .byte	8
32574                                           ! 5511                            8,
32575 841B                        08            .byte	8
32576                                           ! 5512                                 0,
32577 841C                        00            .byte	0
32578                                           ! 5513                            0,
32579 841D                        00            .byte	0
32580                                           ! 5514                                 0,
32581 841E                        00            .byte	0
32582                                           ! 5515                          0,
32583 841F                      0000            .word	0
32584 8421                      0000            .word	0
32585                                           ! 5516 } },
32586                                           ! 5517 { 0x011c,
32587 8423                      011C            .word	$11C
32588                                           ! 5518 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32589 8425                      009B            .word	$9B
32590                                           ! 5519                           0x01 | 0x02 | 0x04,
32591 8427                        07            .byte	7
32592                                           ! 5520       
32593                                           ! 5520                     0,
32594 8428                        00            .byte	0
32595                                           ! 5521                           64,
32596 8429                      0040            .word	$40
32597                                           ! 5522                    64,
32598 842B                      0040            .word	$40
32599                                           ! 5523                        0xA000,
32600 842D                      A000            .word	$A000
32601                                           ! 5524                        0x0000,
32602 842F                      0000            .word	0
32603                                           ! 5525                       0,
32604 8431                      0000            .word	0
32605 8433                      0000            .word	0
32606                                           ! 5526                             1600,
32607 8435                      0640            .word	$640
32608                                           ! 5527                        1600,
32609 8437                      0640            .word	$640
32610                                           ! 5528                        1200,
32611 8439                      04B0            .word	$4B0
32612                                           ! 5529                      8,
32613 843B                        08            .byte	8
32614                                           ! 5530                      16,
32615 843C                        10            .byte	$10
32616                                           ! 5531                           1,
32617 843D                        01            .byte	1
32618                                           ! 5532                         8,
32619 843E                        08            .byte	8
32620                                           ! 5533                          30,
32621 843F                        1E            .byte	$1E
32622                                           ! 5534                        0x04,
32623 8440                        04            .byte	4
32624                                           ! 5535                     0,
32625 8441                        00            .byte	0
32626                                           ! 5536                               7,
32627 8442                        07            .byte	7
32628                                           ! 5537                          0,
32629 8443                        00            .byte	0
32630                                           ! 5538                        0,
32631 8444                        00            .byte	0
32632                                           ! 5539                             0,
32633 8445                        00            .byte	0
32634                                           ! 5540                          0,
32635 8446                        00            .byte	0
32636                                           ! 5541                               0,
32637 8447                        00            .byte	0
32638                                           ! 5542                         0,
32639 8448                        00            .byte	0
32640                                           ! 5543                              0,
32641 8449                        00            .byte	0
32642                                           ! 5544                         0,
32643 844A                        00            .byte	0
32644                                           ! 5545                              0,
32645 844B                        00            .byte	0
32646                                           ! 5546                                0,
32647 844C                        00            .byte	0
32648                                           ! 5547                        0xE0000000,
32649 844D                      0000            .word	0
32650 844F                      E000            .word	$E000
32651                                           ! 5548                               0,
32652 8451                      0000            .word	0
32653 8453                      0000            .word	0
32654                                           ! 5549                             0,
32655 8455                      0000            .word	0
32656                                           ! 5550                                1600,
32657 8457                      0640            .word	$640
32658                                           ! 5551                             0,
32659 8459                        00            .byte	0
32660                                           ! 5552                             0,
32661 845A                        00            .byte	0
32662                                           ! 5553                           0,
32663 845B                        00            .byte	0
32664                                           ! 5554                                0,
32665 845C                        00            .byte	0
32666                                           ! 5555                             0,
32667 845D                        00            .byte	0
32668                                           ! 5556                                  0,
32669 845E                        00            .byte	0
32670                                           ! 5557                            0,
32671 845F                        00            .byte	0
32672                                           ! 5558                                 0,
32673 8460                        00            .byte	0
32674                                           ! 5559                            0,
32675 8461                        00            .byte	0
32676                                           ! 5560                                 0,
32677 8462                        00            .byte	0
32678                                           ! 5561                          0,
32679 8463                      0000            .word	0
32680 8465                      0000            .word	0
32681                                           ! 5562 } },
32682                                           ! 5563 { 0x011d,
32683 8467                      011D            .word	$11D
32684                                           ! 5564 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32685 8469                      009B            .word	$9B
32686                                           ! 5565                           0x01 | 0x02 | 0x04,
32687 846B                        07            .byte	7
32688                                           ! 5566                           0,
32689 846C                        00            .byte	0
32690                                           ! 5567                           64,
32691 846D                      0040            .word	$40
32692                                           ! 5568                    64,
32693 846F                      0040            .word	$40
32694                                           ! 5569                        0xA000,
32695 8471                      A000            .word	$A000
32696                                           ! 5570                        0x0000,
32697 8473                      0000            .word	0
32698                                           ! 5571                       0,
32699 8475                      0000            .word	0
32700 8477                      0000            .word	0
32701                                           ! 5572                             3200,
32702 8479                      0C80            .word	$C80
32703                                           ! 5573                        1600,
32704 847B                      0640            .word	$640
32705                                           ! 5574                        1200,
32706 847D                      04B0            .word	$4B0
32707                                           ! 5575                      8,
32708 847F                        08            .byte	8
32709                                           ! 5576                      16,
32710 8480                        10            .byte	$10
32711                                           ! 5577                           1,
32712 8481                        01            .byte	1
32713                                           ! 5578                         15,
32714 8482                        0F            .byte	$F
32715                                           ! 5579                          59,
32716 8483                        3B            .byte	$3B
32717                                           ! 5580                        0x06,
32718 8484                        06            .byte	6
32719                                           ! 5581                     0,
32720 8485                        00            .byte	0
32721                                           ! 5582                               3,
32722 8486                        03            .byte	3
32723                                           ! 5583                          0,
32724 8487                        00            .byte	0
32725                                           ! 5584                        5,
32726 8488                        05            .byte	5
32727                                           ! 5585                             10,
32728 8489                        0A            .byte	$A
32729                                           ! 5586                          5,
32730 848A                        05            .byte	5
32731                                           ! 5587                               5,
32732 848B                        05            .byte	5
32733                                           ! 5588                         5,
32734 848C                        05            .byte	5
32735                                           ! 5589                             
32736                                           ! 5589  0,
32737 848D                        00            .byte	0
32738                                           ! 5590                         1,
32739 848E                        01            .byte	1
32740                                           ! 5591                              15,
32741 848F                        0F            .byte	$F
32742                                           ! 5592                                0,
32743 8490                        00            .byte	0
32744                                           ! 5593                        0xE0000000,
32745 8491                      0000            .word	0
32746 8493                      E000            .word	$E000
32747                                           ! 5594                               0,
32748 8495                      0000            .word	0
32749 8497                      0000            .word	0
32750                                           ! 5595                             0,
32751 8499                      0000            .word	0
32752                                           ! 5596                                3200,
32753 849B                      0C80            .word	$C80
32754                                           ! 5597                             0,
32755 849D                        00            .byte	0
32756                                           ! 5598                             0,
32757 849E                        00            .byte	0
32758                                           ! 5599                           5,
32759 849F                        05            .byte	5
32760                                           ! 5600                                10,
32761 84A0                        0A            .byte	$A
32762                                           ! 5601                             5,
32763 84A1                        05            .byte	5
32764                                           ! 5602                                  5,
32765 84A2                        05            .byte	5
32766                                           ! 5603                            5,
32767 84A3                        05            .byte	5
32768                                           ! 5604                                 0,
32769 84A4                        00            .byte	0
32770                                           ! 5605                            1,
32771 84A5                        01            .byte	1
32772                                           ! 5606                                 15,
32773 84A6                        0F            .byte	$F
32774                                           ! 5607                          0,
32775 84A7                      0000            .word	0
32776 84A9                      0000            .word	0
32777                                           ! 5608 } },
32778                                           ! 5609 { 0x011e,
32779 84AB                      011E            .word	$11E
32780                                           ! 5610 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32781 84AD                      009B            .word	$9B
32782                                           ! 5611                           0x01 | 0x02 | 0x04,
32783 84AF                        07            .byte	7
32784                                           ! 5612                           0,
32785 84B0                        00            .byte	0
32786                                           ! 5613                           64,
32787 84B1                      0040            .word	$40
32788                                           ! 5614                    64,
32789 84B3                      0040            .word	$40
32790                                           ! 5615                        0xA000,
32791 84B5                      A000            .word	$A000
32792                                           ! 5616                        0x0000,
32793 84B7                      0000            .word	0
32794                                           ! 5617                       0,
32795 84B9                      0000            .word	0
32796 84BB                      0000            .word	0
32797                                           ! 5618                             3200,
32798 84BD                      0C80            .word	$C80
32799                                           ! 5619                        1600,
32800 84BF                      0640            .word	$640
32801                                           ! 5620                        1200,
32802 84C1                      04B0            .word	$4B0
32803                                           ! 5621                      8,
32804 84C3                        08            .byte	8
32805                                           ! 5622                      16,
32806 84C4                        10            .byte	$10
32807                                           ! 5623                           1,
32808 84C5                        01            .byte	1
32809                                           ! 5624                         16,
32810 84C6                        10            .byte	$10
32811                                           ! 5625                          59,
32812 84C7                        3B            .byte	$3B
32813                                           ! 5626                        0x06,
32814 84C8                        06            .byte	6
32815                                           ! 5627                     0,
32816 84C9                        00            .byte	0
32817                                           ! 5628                               3,
32818 84CA                        03            .byte	3
32819                                           ! 5629                          0,
32820 84CB                        00            .byte	0
32821                                           ! 5630                        5,
32822 84CC                        05            .byte	5
32823                                           ! 5631                             11,
32824 84CD                        0B            .byte	$B
32825                                           ! 5632                          6,
32826 84CE                        06            .byte	6
32827                                           ! 5633                               5,
32828 84CF                        05            .byte	5
32829                                           ! 5634                         5,
32830 84D0                        05            .byte	5
32831                                           ! 5635                              0,
32832 84D1                        00            .byte	0
32833                                           ! 5636                         0,
32834 84D2                        00            .byte	0
32835                                           ! 5637                              0,
32836 84D3                        00            .byte	0
32837                                           ! 5638                                0,
32838 84D4                        00            .byte	0
32839                                           ! 5639                        0xE0000000,
32840 84D5                      0000            .word	0
32841 84D7                      E000            .word	$E000
32842                                           ! 5640                               0,
32843 84D9                      0000            .word	0
32844 84DB                      0000            .word	0
32845                                           ! 5641                             0,
32846 84DD                      0000            .word	0
32847                                           ! 5642                                3200,
32848 84DF                      0C80            .word	$C80
32849                                           ! 5643                             0,
32850 84E1                        00            .byte	0
32851                                           ! 5644                             0,
32852 84E2                        00            .byte	0
32853                                           ! 5645                           5,
32854 84E3                        05            .byte	5
32855                                           ! 5646                                11,
32856 84E4                        0B            .byte	$B
32857                                           ! 5647                             6,
32858 84E5                        06            .byte	6
32859                                           ! 5648                                  5,
32860 84E6                        05            .byte	5
32861                                           ! 5649                            5,
32862 84E7                        05            .byte	5
32863                                           ! 5650                                 0,
32864 84E8                        00            .byte	0
32865                                           ! 5651                            0,
32866 84E9                        00            .byte	0
32867                                           ! 5652                                 0,
32868 84EA                        00            .byte	0
32869                                           ! 5653                          0,
32870 84EB                      0000            .word	0
32871 84ED                      0000            .word	0
32872                                           ! 5654 } },
32873                                           ! 5655 { 0x011f,
32874 84EF                      011F            .word	$11F
32875                                           ! 5656 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32876 84F1                      009B            .word	$9B
32877                                           ! 5657                           0
32878                                           ! 5657 x01 | 0x02 | 0x04,
32879 84F3                        07            .byte	7
32880                                           ! 5658                           0,
32881 84F4                        00            .byte	0
32882                                           ! 5659                           64,
32883 84F5                      0040            .word	$40
32884                                           ! 5660                    64,
32885 84F7                      0040            .word	$40
32886                                           ! 5661                        0xA000,
32887 84F9                      A000            .word	$A000
32888                                           ! 5662                        0x0000,
32889 84FB                      0000            .word	0
32890                                           ! 5663                       0,
32891 84FD                      0000            .word	0
32892 84FF                      0000            .word	0
32893                                           ! 5664                             4800,
32894 8501                      12C0            .word	$12C0
32895                                           ! 5665                        1600,
32896 8503                      0640            .word	$640
32897                                           ! 5666                        1200,
32898 8505                      04B0            .word	$4B0
32899                                           ! 5667                      8,
32900 8507                        08            .byte	8
32901                                           ! 5668                      16,
32902 8508                        10            .byte	$10
32903                                           ! 5669                           1,
32904 8509                        01            .byte	1
32905                                           ! 5670                         24,
32906 850A                        18            .byte	$18
32907                                           ! 5671                          88,
32908 850B                        58            .byte	$58
32909                                           ! 5672                        0x06,
32910 850C                        06            .byte	6
32911                                           ! 5673                     0,
32912 850D                        00            .byte	0
32913                                           ! 5674                               1,
32914 850E                        01            .byte	1
32915                                           ! 5675                          0,
32916 850F                        00            .byte	0
32917                                           ! 5676                        8,
32918 8510                        08            .byte	8
32919                                           ! 5677                             16,
32920 8511                        10            .byte	$10
32921                                           ! 5678                          8,
32922 8512                        08            .byte	8
32923                                           ! 5679                               8,
32924 8513                        08            .byte	8
32925                                           ! 5680                         8,
32926 8514                        08            .byte	8
32927                                           ! 5681                              0,
32928 8515                        00            .byte	0
32929                                           ! 5682                         0,
32930 8516                        00            .byte	0
32931                                           ! 5683                              0,
32932 8517                        00            .byte	0
32933                                           ! 5684                                0,
32934 8518                        00            .byte	0
32935                                           ! 5685                        0xE0000000,
32936 8519                      0000            .word	0
32937 851B                      E000            .word	$E000
32938                                           ! 5686                               0,
32939 851D                      0000            .word	0
32940 851F                      0000            .word	0
32941                                           ! 5687                             0,
32942 8521                      0000            .word	0
32943                                           ! 5688                                4800,
32944 8523                      12C0            .word	$12C0
32945                                           ! 5689                             0,
32946 8525                        00            .byte	0
32947                                           ! 5690                             0,
32948 8526                        00            .byte	0
32949                                           ! 5691                           8,
32950 8527                        08            .byte	8
32951                                           ! 5692                                16,
32952 8528                        10            .byte	$10
32953                                           ! 5693                             8,
32954 8529                        08            .byte	8
32955                                           ! 5694                                  8,
32956 852A                        08            .byte	8
32957                                           ! 5695                            8,
32958 852B                        08            .byte	8
32959                                           ! 5696                                 0,
32960 852C                        00            .byte	0
32961                                           ! 5697                            0,
32962 852D                        00            .byte	0
32963                                           ! 5698                                 0,
32964 852E                        00            .byte	0
32965                                           ! 5699                          0,
32966 852F                      0000            .word	0
32967 8531                      0000            .word	0
32968                                           ! 5700 } },
32969                                           ! 5701 { 0x0140,
32970 8533                      0140            .word	$140
32971                                           ! 5702 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32972 8535                      009B            .word	$9B
32973                                           ! 5703                           0x01 | 0x02 | 0x04,
32974 8537                        07            .byte	7
32975                                           ! 5704                           0,
32976 8538                        00            .byte	0
32977                                           ! 5705                           64,
32978 8539                      0040            .word	$40
32979                                           ! 5706                    64,
32980 853B                      0040            .word	$40
32981                                           ! 5707                        0xA000,
32982 853D                      A000            .word	$A000
32983                                           ! 5708                        0x0000,
32984 853F                      0000            .word	0
32985                                           ! 5709                       0,
32986 8541                      0000            .word	0
32987 8543                      0000            .word	0
32988                                           ! 5710                             1280,
32989 8545                      0500            .word	$500
32990                                           ! 5711                        320,
32991 8547                      0140            .word	$140
32992                                           ! 5712                        200,
32993 8549                      00C8            .word	$C8
32994                                           ! 5713                      8,
32995 854B                        08            .byte	8
32996                                           ! 5714                      16,
32997 854C                        10            .byte	$10
32998                                           ! 5715                           1,
32999 854D                        01            .byte	1
33000                                           ! 5716                         32,
33001 854E                        20            .byte	$20
33002                                           ! 5717                          4,
33003 854F                        04            .byte	4
33004                                           ! 5718                        0x06,
33005 8550                        06            .byte	6
33006                                           ! 5719                     0,
33007 8551                        00            .byte	0
33008                                           ! 5720                               64,
33009 8552                        40            .byte	$40
33010                                           ! 5721                          0,
33011 8553                        00            .byte	0
33012                                           ! 5722                        8,
33013 8554                        08            .byte	8
33014                                           ! 5723                             16,
33015 8555                        10            .byte	$10
33016                                           ! 5724                          8,
33017 8556                        08            .byte	8
33018                                           ! 5725                               8,
33019 8557                        08            .byte	8
33020                                           ! 5726                         8,
33021 8558                        08            .byte	8
33022                                           ! 5727   
33023                                           ! 5727                            0,
33024 8559                        00            .byte	0
33025                                           ! 5728                         8,
33026 855A                        08            .byte	8
33027                                           ! 5729                              24,
33028 855B                        18            .byte	$18
33029                                           ! 5730                                0x02,
33030 855C                        02            .byte	2
33031                                           ! 5731                        0xE0000000,
33032 855D                      0000            .word	0
33033 855F                      E000            .word	$E000
33034                                           ! 5732                               0,
33035 8561                      0000            .word	0
33036 8563                      0000            .word	0
33037                                           ! 5733                             0,
33038 8565                      0000            .word	0
33039                                           ! 5734                                1280,
33040 8567                      0500            .word	$500
33041                                           ! 5735                             0,
33042 8569                        00            .byte	0
33043                                           ! 5736                             0,
33044 856A                        00            .byte	0
33045                                           ! 5737                           8,
33046 856B                        08            .byte	8
33047                                           ! 5738                                16,
33048 856C                        10            .byte	$10
33049                                           ! 5739                             8,
33050 856D                        08            .byte	8
33051                                           ! 5740                                  8,
33052 856E                        08            .byte	8
33053                                           ! 5741                            8,
33054 856F                        08            .byte	8
33055                                           ! 5742                                 0,
33056 8570                        00            .byte	0
33057                                           ! 5743                            8,
33058 8571                        08            .byte	8
33059                                           ! 5744                                 24,
33060 8572                        18            .byte	$18
33061                                           ! 5745                          0,
33062 8573                      0000            .word	0
33063 8575                      0000            .word	0
33064                                           ! 5746 } },
33065                                           ! 5747 { 0x0141,
33066 8577                      0141            .word	$141
33067                                           ! 5748 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33068 8579                      009B            .word	$9B
33069                                           ! 5749                           0x01 | 0x02 | 0x04,
33070 857B                        07            .byte	7
33071                                           ! 5750                           0,
33072 857C                        00            .byte	0
33073                                           ! 5751                           64,
33074 857D                      0040            .word	$40
33075                                           ! 5752                    64,
33076 857F                      0040            .word	$40
33077                                           ! 5753                        0xA000,
33078 8581                      A000            .word	$A000
33079                                           ! 5754                        0x0000,
33080 8583                      0000            .word	0
33081                                           ! 5755                       0,
33082 8585                      0000            .word	0
33083 8587                      0000            .word	0
33084                                           ! 5756                             2560,
33085 8589                      0A00            .word	$A00
33086                                           ! 5757                        640,
33087 858B                      0280            .word	$280
33088                                           ! 5758                        400,
33089 858D                      0190            .word	$190
33090                                           ! 5759                      8,
33091 858F                        08            .byte	8
33092                                           ! 5760                      16,
33093 8590                        10            .byte	$10
33094                                           ! 5761                           1,
33095 8591                        01            .byte	1
33096                                           ! 5762                         32,
33097 8592                        20            .byte	$20
33098                                           ! 5763                          16,
33099 8593                        10            .byte	$10
33100                                           ! 5764                        0x06,
33101 8594                        06            .byte	6
33102                                           ! 5765                     0,
33103 8595                        00            .byte	0
33104                                           ! 5766                               15,
33105 8596                        0F            .byte	$F
33106                                           ! 5767                          0,
33107 8597                        00            .byte	0
33108                                           ! 5768                        8,
33109 8598                        08            .byte	8
33110                                           ! 5769                             16,
33111 8599                        10            .byte	$10
33112                                           ! 5770                          8,
33113 859A                        08            .byte	8
33114                                           ! 5771                               8,
33115 859B                        08            .byte	8
33116                                           ! 5772                         8,
33117 859C                        08            .byte	8
33118                                           ! 5773                              0,
33119 859D                        00            .byte	0
33120                                           ! 5774                         8,
33121 859E                        08            .byte	8
33122                                           ! 5775                              24,
33123 859F                        18            .byte	$18
33124                                           ! 5776                                0x02,
33125 85A0                        02            .byte	2
33126                                           ! 5777                        0xE0000000,
33127 85A1                      0000            .word	0
33128 85A3                      E000            .word	$E000
33129                                           ! 5778                               0,
33130 85A5                      0000            .word	0
33131 85A7                      0000            .word	0
33132                                           ! 5779                             0,
33133 85A9                      0000            .word	0
33134                                           ! 5780                                2560,
33135 85AB                      0A00            .word	$A00
33136                                           ! 5781                             0,
33137 85AD                        00            .byte	0
33138                                           ! 5782                             0,
33139 85AE                        00            .byte	0
33140                                           ! 5783                           8,
33141 85AF                        08            .byte	8
33142                                           ! 5784                                16,
33143 85B0                        10            .byte	$10
33144                                           ! 5785                             8,
33145 85B1                        08            .byte	8
33146                                           ! 5786                                  8,
33147 85B2                        08            .byte	8
33148                                           ! 5787                            8,
33149 85B3                        08            .byte	8
33150                                           ! 5788                                 0,
33151 85B4                        00            .byte	0
33152                                           ! 5789                            8,
33153 85B5                        08            .byte	8
33154                                           ! 5790                                 24,
33155 85B6                        18            .byte	$18
33156                                           ! 5791                          0,
33157 85B7                      0000            .word	0
33158 85B9                      0000            .word	0
33159                                           ! 5792 } },
33160                                           ! 5793 { 0x0142,
33161 85BB                      0142            .word	$142
33162                                           ! 5794 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x
33163                                           ! 5794 0010,
33164 85BD                      009B            .word	$9B
33165                                           ! 5795                           0x01 | 0x02 | 0x04,
33166 85BF                        07            .byte	7
33167                                           ! 5796                           0,
33168 85C0                        00            .byte	0
33169                                           ! 5797                           64,
33170 85C1                      0040            .word	$40
33171                                           ! 5798                    64,
33172 85C3                      0040            .word	$40
33173                                           ! 5799                        0xA000,
33174 85C5                      A000            .word	$A000
33175                                           ! 5800                        0x0000,
33176 85C7                      0000            .word	0
33177                                           ! 5801                       0,
33178 85C9                      0000            .word	0
33179 85CB                      0000            .word	0
33180                                           ! 5802                             2560,
33181 85CD                      0A00            .word	$A00
33182                                           ! 5803                        640,
33183 85CF                      0280            .word	$280
33184                                           ! 5804                        480,
33185 85D1                      01E0            .word	$1E0
33186                                           ! 5805                      8,
33187 85D3                        08            .byte	8
33188                                           ! 5806                      16,
33189 85D4                        10            .byte	$10
33190                                           ! 5807                           1,
33191 85D5                        01            .byte	1
33192                                           ! 5808                         32,
33193 85D6                        20            .byte	$20
33194                                           ! 5809                          19,
33195 85D7                        13            .byte	$13
33196                                           ! 5810                        0x06,
33197 85D8                        06            .byte	6
33198                                           ! 5811                     0,
33199 85D9                        00            .byte	0
33200                                           ! 5812                               12,
33201 85DA                        0C            .byte	$C
33202                                           ! 5813                          0,
33203 85DB                        00            .byte	0
33204                                           ! 5814                        8,
33205 85DC                        08            .byte	8
33206                                           ! 5815                             16,
33207 85DD                        10            .byte	$10
33208                                           ! 5816                          8,
33209 85DE                        08            .byte	8
33210                                           ! 5817                               8,
33211 85DF                        08            .byte	8
33212                                           ! 5818                         8,
33213 85E0                        08            .byte	8
33214                                           ! 5819                              0,
33215 85E1                        00            .byte	0
33216                                           ! 5820                         8,
33217 85E2                        08            .byte	8
33218                                           ! 5821                              24,
33219 85E3                        18            .byte	$18
33220                                           ! 5822                                0x02,
33221 85E4                        02            .byte	2
33222                                           ! 5823                        0xE0000000,
33223 85E5                      0000            .word	0
33224 85E7                      E000            .word	$E000
33225                                           ! 5824                               0,
33226 85E9                      0000            .word	0
33227 85EB                      0000            .word	0
33228                                           ! 5825                             0,
33229 85ED                      0000            .word	0
33230                                           ! 5826                                2560,
33231 85EF                      0A00            .word	$A00
33232                                           ! 5827                             0,
33233 85F1                        00            .byte	0
33234                                           ! 5828                             0,
33235 85F2                        00            .byte	0
33236                                           ! 5829                           8,
33237 85F3                        08            .byte	8
33238                                           ! 5830                                16,
33239 85F4                        10            .byte	$10
33240                                           ! 5831                             8,
33241 85F5                        08            .byte	8
33242                                           ! 5832                                  8,
33243 85F6                        08            .byte	8
33244                                           ! 5833                            8,
33245 85F7                        08            .byte	8
33246                                           ! 5834                                 0,
33247 85F8                        00            .byte	0
33248                                           ! 5835                            8,
33249 85F9                        08            .byte	8
33250                                           ! 5836                                 24,
33251 85FA                        18            .byte	$18
33252                                           ! 5837                          0,
33253 85FB                      0000            .word	0
33254 85FD                      0000            .word	0
33255                                           ! 5838 } },
33256                                           ! 5839 { 0x0143,
33257 85FF                      0143            .word	$143
33258                                           ! 5840 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33259 8601                      009B            .word	$9B
33260                                           ! 5841                           0x01 | 0x02 | 0x04,
33261 8603                        07            .byte	7
33262                                           ! 5842                           0,
33263 8604                        00            .byte	0
33264                                           ! 5843                           64,
33265 8605                      0040            .word	$40
33266                                           ! 5844                    64,
33267 8607                      0040            .word	$40
33268                                           ! 5845                        0xA000,
33269 8609                      A000            .word	$A000
33270                                           ! 5846                        0x0000,
33271 860B                      0000            .word	0
33272                                           ! 5847                       0,
33273 860D                      0000            .word	0
33274 860F                      0000            .word	0
33275                                           ! 5848                             3200,
33276 8611                      0C80            .word	$C80
33277                                           ! 5849                        800,
33278 8613                      0320            .word	$320
33279                                           ! 5850                        600,
33280 8615                      0258            .word	$258
33281                                           ! 5851                      8,
33282 8617                        08            .byte	8
33283                                           ! 5852                      16,
33284 8618                        10            .byte	$10
33285                                           ! 5853                           1,
33286 8619                        01            .byte	1
33287                                           ! 5854                         32,
33288 861A                        20            .byte	$20
33289                                           ! 5855                          30,
33290 861B                        1E            .byte	$1E
33291                                           ! 5856                        0x06,
33292 861C                        06            .byte	6
33293                                           ! 5857                     0,
33294 861D                        00            .byte	0
33295                                           ! 5858                               7,
33296 861E                        07            .byte	7
33297                                           ! 5859                          0,
33298 861F                        00            .byte	0
33299                                           ! 5860                        8,
33300 8620                        08            .byte	8
33301                                           ! 5861                             16,
33302 8621                        10            .byte	$10
33303                                           ! 5862                          8,
33304 8622                        08            .byte	8
33305                                           ! 5863                          
33306                                           ! 5863      8,
33307 8623                        08            .byte	8
33308                                           ! 5864                         8,
33309 8624                        08            .byte	8
33310                                           ! 5865                              0,
33311 8625                        00            .byte	0
33312                                           ! 5866                         8,
33313 8626                        08            .byte	8
33314                                           ! 5867                              24,
33315 8627                        18            .byte	$18
33316                                           ! 5868                                0x02,
33317 8628                        02            .byte	2
33318                                           ! 5869                        0xE0000000,
33319 8629                      0000            .word	0
33320 862B                      E000            .word	$E000
33321                                           ! 5870                               0,
33322 862D                      0000            .word	0
33323 862F                      0000            .word	0
33324                                           ! 5871                             0,
33325 8631                      0000            .word	0
33326                                           ! 5872                                3200,
33327 8633                      0C80            .word	$C80
33328                                           ! 5873                             0,
33329 8635                        00            .byte	0
33330                                           ! 5874                             0,
33331 8636                        00            .byte	0
33332                                           ! 5875                           8,
33333 8637                        08            .byte	8
33334                                           ! 5876                                16,
33335 8638                        10            .byte	$10
33336                                           ! 5877                             8,
33337 8639                        08            .byte	8
33338                                           ! 5878                                  8,
33339 863A                        08            .byte	8
33340                                           ! 5879                            8,
33341 863B                        08            .byte	8
33342                                           ! 5880                                 0,
33343 863C                        00            .byte	0
33344                                           ! 5881                            8,
33345 863D                        08            .byte	8
33346                                           ! 5882                                 24,
33347 863E                        18            .byte	$18
33348                                           ! 5883                          0,
33349 863F                      0000            .word	0
33350 8641                      0000            .word	0
33351                                           ! 5884 } },
33352                                           ! 5885 { 0x0144,
33353 8643                      0144            .word	$144
33354                                           ! 5886 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33355 8645                      009B            .word	$9B
33356                                           ! 5887                           0x01 | 0x02 | 0x04,
33357 8647                        07            .byte	7
33358                                           ! 5888                           0,
33359 8648                        00            .byte	0
33360                                           ! 5889                           64,
33361 8649                      0040            .word	$40
33362                                           ! 5890                    64,
33363 864B                      0040            .word	$40
33364                                           ! 5891                        0xA000,
33365 864D                      A000            .word	$A000
33366                                           ! 5892                        0x0000,
33367 864F                      0000            .word	0
33368                                           ! 5893                       0,
33369 8651                      0000            .word	0
33370 8653                      0000            .word	0
33371                                           ! 5894                             4096,
33372 8655                      1000            .word	$1000
33373                                           ! 5895                        1024,
33374 8657                      0400            .word	$400
33375                                           ! 5896                        768,
33376 8659                      0300            .word	$300
33377                                           ! 5897                      8,
33378 865B                        08            .byte	8
33379                                           ! 5898                      16,
33380 865C                        10            .byte	$10
33381                                           ! 5899                           1,
33382 865D                        01            .byte	1
33383                                           ! 5900                         32,
33384 865E                        20            .byte	$20
33385                                           ! 5901                          48,
33386 865F                        30            .byte	$30
33387                                           ! 5902                        0x06,
33388 8660                        06            .byte	6
33389                                           ! 5903                     0,
33390 8661                        00            .byte	0
33391                                           ! 5904                               4,
33392 8662                        04            .byte	4
33393                                           ! 5905                          0,
33394 8663                        00            .byte	0
33395                                           ! 5906                        8,
33396 8664                        08            .byte	8
33397                                           ! 5907                             16,
33398 8665                        10            .byte	$10
33399                                           ! 5908                          8,
33400 8666                        08            .byte	8
33401                                           ! 5909                               8,
33402 8667                        08            .byte	8
33403                                           ! 5910                         8,
33404 8668                        08            .byte	8
33405                                           ! 5911                              0,
33406 8669                        00            .byte	0
33407                                           ! 5912                         8,
33408 866A                        08            .byte	8
33409                                           ! 5913                              24,
33410 866B                        18            .byte	$18
33411                                           ! 5914                                0x02,
33412 866C                        02            .byte	2
33413                                           ! 5915                        0xE0000000,
33414 866D                      0000            .word	0
33415 866F                      E000            .word	$E000
33416                                           ! 5916                               0,
33417 8671                      0000            .word	0
33418 8673                      0000            .word	0
33419                                           ! 5917                             0,
33420 8675                      0000            .word	0
33421                                           ! 5918                                4096,
33422 8677                      1000            .word	$1000
33423                                           ! 5919                             0,
33424 8679                        00            .byte	0
33425                                           ! 5920                             0,
33426 867A                        00            .byte	0
33427                                           ! 5921                           8,
33428 867B                        08            .byte	8
33429                                           ! 5922                                16,
33430 867C                        10            .byte	$10
33431                                           ! 5923                             8,
33432 867D                        08            .byte	8
33433                                           ! 5924                                  8,
33434 867E                        08            .byte	8
33435                                           ! 5925                            8,
33436 867F                        08            .byte	8
33437                                           ! 5926                                 0,
33438 8680                        00            .byte	0
33439                                           ! 5927                            8,
33440 8681                        08            .byte	8
33441                                           ! 5928                                 24,
33442 8682                        18            .byte	$18
33443                                           ! 5929                          0,
33444 8683                      0000            .word	0
33445 8685                      0000            .word	0
33446                                           ! 5930 } },
33447                                           ! 5931 { 0x0145,
33448 8687                      0145            .word	$145
33449                                           ! 5932 { 0
33450                                           ! 5932 x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33451 8689                      009B            .word	$9B
33452                                           ! 5933                           0x01 | 0x02 | 0x04,
33453 868B                        07            .byte	7
33454                                           ! 5934                           0,
33455 868C                        00            .byte	0
33456                                           ! 5935                           64,
33457 868D                      0040            .word	$40
33458                                           ! 5936                    64,
33459 868F                      0040            .word	$40
33460                                           ! 5937                        0xA000,
33461 8691                      A000            .word	$A000
33462                                           ! 5938                        0x0000,
33463 8693                      0000            .word	0
33464                                           ! 5939                       0,
33465 8695                      0000            .word	0
33466 8697                      0000            .word	0
33467                                           ! 5940                             5120,
33468 8699                      1400            .word	$1400
33469                                           ! 5941                        1280,
33470 869B                      0500            .word	$500
33471                                           ! 5942                        1024,
33472 869D                      0400            .word	$400
33473                                           ! 5943                      8,
33474 869F                        08            .byte	8
33475                                           ! 5944                      16,
33476 86A0                        10            .byte	$10
33477                                           ! 5945                           1,
33478 86A1                        01            .byte	1
33479                                           ! 5946                         32,
33480 86A2                        20            .byte	$20
33481                                           ! 5947                          80,
33482 86A3                        50            .byte	$50
33483                                           ! 5948                        0x06,
33484 86A4                        06            .byte	6
33485                                           ! 5949                     0,
33486 86A5                        00            .byte	0
33487                                           ! 5950                               2,
33488 86A6                        02            .byte	2
33489                                           ! 5951                          0,
33490 86A7                        00            .byte	0
33491                                           ! 5952                        8,
33492 86A8                        08            .byte	8
33493                                           ! 5953                             16,
33494 86A9                        10            .byte	$10
33495                                           ! 5954                          8,
33496 86AA                        08            .byte	8
33497                                           ! 5955                               8,
33498 86AB                        08            .byte	8
33499                                           ! 5956                         8,
33500 86AC                        08            .byte	8
33501                                           ! 5957                              0,
33502 86AD                        00            .byte	0
33503                                           ! 5958                         8,
33504 86AE                        08            .byte	8
33505                                           ! 5959                              24,
33506 86AF                        18            .byte	$18
33507                                           ! 5960                                0x02,
33508 86B0                        02            .byte	2
33509                                           ! 5961                        0xE0000000,
33510 86B1                      0000            .word	0
33511 86B3                      E000            .word	$E000
33512                                           ! 5962                               0,
33513 86B5                      0000            .word	0
33514 86B7                      0000            .word	0
33515                                           ! 5963                             0,
33516 86B9                      0000            .word	0
33517                                           ! 5964                                5120,
33518 86BB                      1400            .word	$1400
33519                                           ! 5965                             0,
33520 86BD                        00            .byte	0
33521                                           ! 5966                             0,
33522 86BE                        00            .byte	0
33523                                           ! 5967                           8,
33524 86BF                        08            .byte	8
33525                                           ! 5968                                16,
33526 86C0                        10            .byte	$10
33527                                           ! 5969                             8,
33528 86C1                        08            .byte	8
33529                                           ! 5970                                  8,
33530 86C2                        08            .byte	8
33531                                           ! 5971                            8,
33532 86C3                        08            .byte	8
33533                                           ! 5972                                 0,
33534 86C4                        00            .byte	0
33535                                           ! 5973                            8,
33536 86C5                        08            .byte	8
33537                                           ! 5974                                 24,
33538 86C6                        18            .byte	$18
33539                                           ! 5975                          0,
33540 86C7                      0000            .word	0
33541 86C9                      0000            .word	0
33542                                           ! 5976 } },
33543                                           ! 5977 { 0x0146,
33544 86CB                      0146            .word	$146
33545                                           ! 5978 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33546 86CD                      009B            .word	$9B
33547                                           ! 5979                           0x01 | 0x02 | 0x04,
33548 86CF                        07            .byte	7
33549                                           ! 5980                           0,
33550 86D0                        00            .byte	0
33551                                           ! 5981                           64,
33552 86D1                      0040            .word	$40
33553                                           ! 5982                    64,
33554 86D3                      0040            .word	$40
33555                                           ! 5983                        0xA000,
33556 86D5                      A000            .word	$A000
33557                                           ! 5984                        0x0000,
33558 86D7                      0000            .word	0
33559                                           ! 5985                       0,
33560 86D9                      0000            .word	0
33561 86DB                      0000            .word	0
33562                                           ! 5986                             320,
33563 86DD                      0140            .word	$140
33564                                           ! 5987                        320,
33565 86DF                      0140            .word	$140
33566                                           ! 5988                        200,
33567 86E1                      00C8            .word	$C8
33568                                           ! 5989                      8,
33569 86E3                        08            .byte	8
33570                                           ! 5990                      16,
33571 86E4                        10            .byte	$10
33572                                           ! 5991                           1,
33573 86E5                        01            .byte	1
33574                                           ! 5992                         8,
33575 86E6                        08            .byte	8
33576                                           ! 5993                          1,
33577 86E7                        01            .byte	1
33578                                           ! 5994                        0x04,
33579 86E8                        04            .byte	4
33580                                           ! 5995                     0,
33581 86E9                        00            .byte	0
33582                                           ! 5996                               261,
33583 86EA                        05            .byte	5
33584                                           ! 5997                          0,
33585 86EB                        00            .byte	0
33586                                           ! 5998                        0,
33587 86EC                        00            .byte	0
33588                                           ! 5999                             0,
33589 86ED                        00            .byte	0
33590                                           ! 6000                  
33591                                           ! 6000         0,
33592 86EE                        00            .byte	0
33593                                           ! 6001                               0,
33594 86EF                        00            .byte	0
33595                                           ! 6002                         0,
33596 86F0                        00            .byte	0
33597                                           ! 6003                              0,
33598 86F1                        00            .byte	0
33599                                           ! 6004                         0,
33600 86F2                        00            .byte	0
33601                                           ! 6005                              0,
33602 86F3                        00            .byte	0
33603                                           ! 6006                                0,
33604 86F4                        00            .byte	0
33605                                           ! 6007                        0xE0000000,
33606 86F5                      0000            .word	0
33607 86F7                      E000            .word	$E000
33608                                           ! 6008                               0,
33609 86F9                      0000            .word	0
33610 86FB                      0000            .word	0
33611                                           ! 6009                             0,
33612 86FD                      0000            .word	0
33613                                           ! 6010                                320,
33614 86FF                      0140            .word	$140
33615                                           ! 6011                             0,
33616 8701                        00            .byte	0
33617                                           ! 6012                             0,
33618 8702                        00            .byte	0
33619                                           ! 6013                           0,
33620 8703                        00            .byte	0
33621                                           ! 6014                                0,
33622 8704                        00            .byte	0
33623                                           ! 6015                             0,
33624 8705                        00            .byte	0
33625                                           ! 6016                                  0,
33626 8706                        00            .byte	0
33627                                           ! 6017                            0,
33628 8707                        00            .byte	0
33629                                           ! 6018                                 0,
33630 8708                        00            .byte	0
33631                                           ! 6019                            0,
33632 8709                        00            .byte	0
33633                                           ! 6020                                 0,
33634 870A                        00            .byte	0
33635                                           ! 6021                          0,
33636 870B                      0000            .word	0
33637 870D                      0000            .word	0
33638                                           ! 6022 } },
33639                                           ! 6023 { 0x0147,
33640 870F                      0147            .word	$147
33641                                           ! 6024 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33642 8711                      009B            .word	$9B
33643                                           ! 6025                           0x01 | 0x02 | 0x04,
33644 8713                        07            .byte	7
33645                                           ! 6026                           0,
33646 8714                        00            .byte	0
33647                                           ! 6027                           64,
33648 8715                      0040            .word	$40
33649                                           ! 6028                    64,
33650 8717                      0040            .word	$40
33651                                           ! 6029                        0xA000,
33652 8719                      A000            .word	$A000
33653                                           ! 6030                        0x0000,
33654 871B                      0000            .word	0
33655                                           ! 6031                       0,
33656 871D                      0000            .word	0
33657 871F                      0000            .word	0
33658                                           ! 6032                             6400,
33659 8721                      1900            .word	$1900
33660                                           ! 6033                        1600,
33661 8723                      0640            .word	$640
33662                                           ! 6034                        1200,
33663 8725                      04B0            .word	$4B0
33664                                           ! 6035                      8,
33665 8727                        08            .byte	8
33666                                           ! 6036                      16,
33667 8728                        10            .byte	$10
33668                                           ! 6037                           1,
33669 8729                        01            .byte	1
33670                                           ! 6038                         32,
33671 872A                        20            .byte	$20
33672                                           ! 6039                          118,
33673 872B                        76            .byte	$76
33674                                           ! 6040                        0x06,
33675 872C                        06            .byte	6
33676                                           ! 6041                     0,
33677 872D                        00            .byte	0
33678                                           ! 6042                               1,
33679 872E                        01            .byte	1
33680                                           ! 6043                          0,
33681 872F                        00            .byte	0
33682                                           ! 6044                        8,
33683 8730                        08            .byte	8
33684                                           ! 6045                             16,
33685 8731                        10            .byte	$10
33686                                           ! 6046                          8,
33687 8732                        08            .byte	8
33688                                           ! 6047                               8,
33689 8733                        08            .byte	8
33690                                           ! 6048                         8,
33691 8734                        08            .byte	8
33692                                           ! 6049                              0,
33693 8735                        00            .byte	0
33694                                           ! 6050                         8,
33695 8736                        08            .byte	8
33696                                           ! 6051                              24,
33697 8737                        18            .byte	$18
33698                                           ! 6052                                0x02,
33699 8738                        02            .byte	2
33700                                           ! 6053                        0xE0000000,
33701 8739                      0000            .word	0
33702 873B                      E000            .word	$E000
33703                                           ! 6054                               0,
33704 873D                      0000            .word	0
33705 873F                      0000            .word	0
33706                                           ! 6055                             0,
33707 8741                      0000            .word	0
33708                                           ! 6056                                6400,
33709 8743                      1900            .word	$1900
33710                                           ! 6057                             0,
33711 8745                        00            .byte	0
33712                                           ! 6058                             0,
33713 8746                        00            .byte	0
33714                                           ! 6059                           8,
33715 8747                        08            .byte	8
33716                                           ! 6060                                16,
33717 8748                        10            .byte	$10
33718                                           ! 6061                             8,
33719 8749                        08            .byte	8
33720                                           ! 6062                                  8,
33721 874A                        08            .byte	8
33722                                           ! 6063                            8,
33723 874B                        08            .byte	8
33724                                           ! 6064                                 0,
33725 874C                        00            .byte	0
33726                                           ! 6065                            8,
33727 874D                        08            .byte	8
33728                                           ! 6066                                 24,
33729 874E                        18            .byte	$18
33730                                           ! 6067                
33731                                           ! 6067           0,
33732 874F                      0000            .word	0
33733 8751                      0000            .word	0
33734                                           ! 6068 } },
33735                                           ! 6069 { 0x0148,
33736 8753                      0148            .word	$148
33737                                           ! 6070 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33738 8755                      009B            .word	$9B
33739                                           ! 6071                           0x01 | 0x02 | 0x04,
33740 8757                        07            .byte	7
33741                                           ! 6072                           0,
33742 8758                        00            .byte	0
33743                                           ! 6073                           64,
33744 8759                      0040            .word	$40
33745                                           ! 6074                    64,
33746 875B                      0040            .word	$40
33747                                           ! 6075                        0xA000,
33748 875D                      A000            .word	$A000
33749                                           ! 6076                        0x0000,
33750 875F                      0000            .word	0
33751                                           ! 6077                       0,
33752 8761                      0000            .word	0
33753 8763                      0000            .word	0
33754                                           ! 6078                             1152,
33755 8765                      0480            .word	$480
33756                                           ! 6079                        1152,
33757 8767                      0480            .word	$480
33758                                           ! 6080                        864,
33759 8769                      0360            .word	$360
33760                                           ! 6081                      8,
33761 876B                        08            .byte	8
33762                                           ! 6082                      16,
33763 876C                        10            .byte	$10
33764                                           ! 6083                           1,
33765 876D                        01            .byte	1
33766                                           ! 6084                         8,
33767 876E                        08            .byte	8
33768                                           ! 6085                          16,
33769 876F                        10            .byte	$10
33770                                           ! 6086                        0x04,
33771 8770                        04            .byte	4
33772                                           ! 6087                     0,
33773 8771                        00            .byte	0
33774                                           ! 6088                               15,
33775 8772                        0F            .byte	$F
33776                                           ! 6089                          0,
33777 8773                        00            .byte	0
33778                                           ! 6090                        0,
33779 8774                        00            .byte	0
33780                                           ! 6091                             0,
33781 8775                        00            .byte	0
33782                                           ! 6092                          0,
33783 8776                        00            .byte	0
33784                                           ! 6093                               0,
33785 8777                        00            .byte	0
33786                                           ! 6094                         0,
33787 8778                        00            .byte	0
33788                                           ! 6095                              0,
33789 8779                        00            .byte	0
33790                                           ! 6096                         0,
33791 877A                        00            .byte	0
33792                                           ! 6097                              0,
33793 877B                        00            .byte	0
33794                                           ! 6098                                0,
33795 877C                        00            .byte	0
33796                                           ! 6099                        0xE0000000,
33797 877D                      0000            .word	0
33798 877F                      E000            .word	$E000
33799                                           ! 6100                               0,
33800 8781                      0000            .word	0
33801 8783                      0000            .word	0
33802                                           ! 6101                             0,
33803 8785                      0000            .word	0
33804                                           ! 6102                                1152,
33805 8787                      0480            .word	$480
33806                                           ! 6103                             0,
33807 8789                        00            .byte	0
33808                                           ! 6104                             0,
33809 878A                        00            .byte	0
33810                                           ! 6105                           0,
33811 878B                        00            .byte	0
33812                                           ! 6106                                0,
33813 878C                        00            .byte	0
33814                                           ! 6107                             0,
33815 878D                        00            .byte	0
33816                                           ! 6108                                  0,
33817 878E                        00            .byte	0
33818                                           ! 6109                            0,
33819 878F                        00            .byte	0
33820                                           ! 6110                                 0,
33821 8790                        00            .byte	0
33822                                           ! 6111                            0,
33823 8791                        00            .byte	0
33824                                           ! 6112                                 0,
33825 8792                        00            .byte	0
33826                                           ! 6113                          0,
33827 8793                      0000            .word	0
33828 8795                      0000            .word	0
33829                                           ! 6114 } },
33830                                           ! 6115 { 0x0149,
33831 8797                      0149            .word	$149
33832                                           ! 6116 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33833 8799                      009B            .word	$9B
33834                                           ! 6117                           0x01 | 0x02 | 0x04,
33835 879B                        07            .byte	7
33836                                           ! 6118                           0,
33837 879C                        00            .byte	0
33838                                           ! 6119                           64,
33839 879D                      0040            .word	$40
33840                                           ! 6120                    64,
33841 879F                      0040            .word	$40
33842                                           ! 6121                        0xA000,
33843 87A1                      A000            .word	$A000
33844                                           ! 6122                        0x0000,
33845 87A3                      0000            .word	0
33846                                           ! 6123                       0,
33847 87A5                      0000            .word	0
33848 87A7                      0000            .word	0
33849                                           ! 6124                             2304,
33850 87A9                      0900            .word	$900
33851                                           ! 6125                        1152,
33852 87AB                      0480            .word	$480
33853                                           ! 6126                        864,
33854 87AD                      0360            .word	$360
33855                                           ! 6127                      8,
33856 87AF                        08            .byte	8
33857                                           ! 6128                      16,
33858 87B0                        10            .byte	$10
33859                                           ! 6129                           1,
33860 87B1                        01            .byte	1
33861                                           ! 6130                         15,
33862 87B2                        0F            .byte	$F
33863                                           ! 6131                          31,
33864 87B3                        1F            .byte	$1F
33865                                           ! 6132                        0x06,
33866 87B4                        06            .byte	6
33867                                           ! 6133                     0,
33868 87B5                        00            .byte	0
33869                                           ! 6134                               7,
33870 87B6                        07            .byte	7
33871                                           ! 6135                          0,
33872 87B7                        00            .byte	0
33873                                           ! 6136                        5,
33874 87B8                        05            .byte	5
33875                                           ! 6137                        
33876                                           ! 6137      10,
33877 87B9                        0A            .byte	$A
33878                                           ! 6138                          5,
33879 87BA                        05            .byte	5
33880                                           ! 6139                               5,
33881 87BB                        05            .byte	5
33882                                           ! 6140                         5,
33883 87BC                        05            .byte	5
33884                                           ! 6141                              0,
33885 87BD                        00            .byte	0
33886                                           ! 6142                         1,
33887 87BE                        01            .byte	1
33888                                           ! 6143                              15,
33889 87BF                        0F            .byte	$F
33890                                           ! 6144                                0,
33891 87C0                        00            .byte	0
33892                                           ! 6145                        0xE0000000,
33893 87C1                      0000            .word	0
33894 87C3                      E000            .word	$E000
33895                                           ! 6146                               0,
33896 87C5                      0000            .word	0
33897 87C7                      0000            .word	0
33898                                           ! 6147                             0,
33899 87C9                      0000            .word	0
33900                                           ! 6148                                2304,
33901 87CB                      0900            .word	$900
33902                                           ! 6149                             0,
33903 87CD                        00            .byte	0
33904                                           ! 6150                             0,
33905 87CE                        00            .byte	0
33906                                           ! 6151                           5,
33907 87CF                        05            .byte	5
33908                                           ! 6152                                10,
33909 87D0                        0A            .byte	$A
33910                                           ! 6153                             5,
33911 87D1                        05            .byte	5
33912                                           ! 6154                                  5,
33913 87D2                        05            .byte	5
33914                                           ! 6155                            5,
33915 87D3                        05            .byte	5
33916                                           ! 6156                                 0,
33917 87D4                        00            .byte	0
33918                                           ! 6157                            1,
33919 87D5                        01            .byte	1
33920                                           ! 6158                                 15,
33921 87D6                        0F            .byte	$F
33922                                           ! 6159                          0,
33923 87D7                      0000            .word	0
33924 87D9                      0000            .word	0
33925                                           ! 6160 } },
33926                                           ! 6161 { 0x014a,
33927 87DB                      014A            .word	$14A
33928                                           ! 6162 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33929 87DD                      009B            .word	$9B
33930                                           ! 6163                           0x01 | 0x02 | 0x04,
33931 87DF                        07            .byte	7
33932                                           ! 6164                           0,
33933 87E0                        00            .byte	0
33934                                           ! 6165                           64,
33935 87E1                      0040            .word	$40
33936                                           ! 6166                    64,
33937 87E3                      0040            .word	$40
33938                                           ! 6167                        0xA000,
33939 87E5                      A000            .word	$A000
33940                                           ! 6168                        0x0000,
33941 87E7                      0000            .word	0
33942                                           ! 6169                       0,
33943 87E9                      0000            .word	0
33944 87EB                      0000            .word	0
33945                                           ! 6170                             2304,
33946 87ED                      0900            .word	$900
33947                                           ! 6171                        1152,
33948 87EF                      0480            .word	$480
33949                                           ! 6172                        864,
33950 87F1                      0360            .word	$360
33951                                           ! 6173                      8,
33952 87F3                        08            .byte	8
33953                                           ! 6174                      16,
33954 87F4                        10            .byte	$10
33955                                           ! 6175                           1,
33956 87F5                        01            .byte	1
33957                                           ! 6176                         16,
33958 87F6                        10            .byte	$10
33959                                           ! 6177                          31,
33960 87F7                        1F            .byte	$1F
33961                                           ! 6178                        0x06,
33962 87F8                        06            .byte	6
33963                                           ! 6179                     0,
33964 87F9                        00            .byte	0
33965                                           ! 6180                               7,
33966 87FA                        07            .byte	7
33967                                           ! 6181                          0,
33968 87FB                        00            .byte	0
33969                                           ! 6182                        5,
33970 87FC                        05            .byte	5
33971                                           ! 6183                             11,
33972 87FD                        0B            .byte	$B
33973                                           ! 6184                          6,
33974 87FE                        06            .byte	6
33975                                           ! 6185                               5,
33976 87FF                        05            .byte	5
33977                                           ! 6186                         5,
33978 8800                        05            .byte	5
33979                                           ! 6187                              0,
33980 8801                        00            .byte	0
33981                                           ! 6188                         0,
33982 8802                        00            .byte	0
33983                                           ! 6189                              0,
33984 8803                        00            .byte	0
33985                                           ! 6190                                0,
33986 8804                        00            .byte	0
33987                                           ! 6191                        0xE0000000,
33988 8805                      0000            .word	0
33989 8807                      E000            .word	$E000
33990                                           ! 6192                               0,
33991 8809                      0000            .word	0
33992 880B                      0000            .word	0
33993                                           ! 6193                             0,
33994 880D                      0000            .word	0
33995                                           ! 6194                                2304,
33996 880F                      0900            .word	$900
33997                                           ! 6195                             0,
33998 8811                        00            .byte	0
33999                                           ! 6196                             0,
34000 8812                        00            .byte	0
34001                                           ! 6197                           5,
34002 8813                        05            .byte	5
34003                                           ! 6198                                11,
34004 8814                        0B            .byte	$B
34005                                           ! 6199                             6,
34006 8815                        06            .byte	6
34007                                           ! 6200                                  5,
34008 8816                        05            .byte	5
34009                                           ! 6201                            5,
34010 8817                        05            .byte	5
34011                                           ! 6202                                 0,
34012 8818                        00            .byte	0
34013                                           ! 6203                            0,
34014 8819                        00            .byte	0
34015                                           ! 6204                            
34016                                           ! 6204      0,
34017 881A                        00            .byte	0
34018                                           ! 6205                          0,
34019 881B                      0000            .word	0
34020 881D                      0000            .word	0
34021                                           ! 6206 } },
34022                                           ! 6207 { 0x014b,
34023 881F                      014B            .word	$14B
34024                                           ! 6208 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34025 8821                      009B            .word	$9B
34026                                           ! 6209                           0x01 | 0x02 | 0x04,
34027 8823                        07            .byte	7
34028                                           ! 6210                           0,
34029 8824                        00            .byte	0
34030                                           ! 6211                           64,
34031 8825                      0040            .word	$40
34032                                           ! 6212                    64,
34033 8827                      0040            .word	$40
34034                                           ! 6213                        0xA000,
34035 8829                      A000            .word	$A000
34036                                           ! 6214                        0x0000,
34037 882B                      0000            .word	0
34038                                           ! 6215                       0,
34039 882D                      0000            .word	0
34040 882F                      0000            .word	0
34041                                           ! 6216                             3456,
34042 8831                      0D80            .word	$D80
34043                                           ! 6217                        1152,
34044 8833                      0480            .word	$480
34045                                           ! 6218                        864,
34046 8835                      0360            .word	$360
34047                                           ! 6219                      8,
34048 8837                        08            .byte	8
34049                                           ! 6220                      16,
34050 8838                        10            .byte	$10
34051                                           ! 6221                           1,
34052 8839                        01            .byte	1
34053                                           ! 6222                         24,
34054 883A                        18            .byte	$18
34055                                           ! 6223                          46,
34056 883B                        2E            .byte	$2E
34057                                           ! 6224                        0x06,
34058 883C                        06            .byte	6
34059                                           ! 6225                     0,
34060 883D                        00            .byte	0
34061                                           ! 6226                               4,
34062 883E                        04            .byte	4
34063                                           ! 6227                          0,
34064 883F                        00            .byte	0
34065                                           ! 6228                        8,
34066 8840                        08            .byte	8
34067                                           ! 6229                             16,
34068 8841                        10            .byte	$10
34069                                           ! 6230                          8,
34070 8842                        08            .byte	8
34071                                           ! 6231                               8,
34072 8843                        08            .byte	8
34073                                           ! 6232                         8,
34074 8844                        08            .byte	8
34075                                           ! 6233                              0,
34076 8845                        00            .byte	0
34077                                           ! 6234                         0,
34078 8846                        00            .byte	0
34079                                           ! 6235                              0,
34080 8847                        00            .byte	0
34081                                           ! 6236                                0,
34082 8848                        00            .byte	0
34083                                           ! 6237                        0xE0000000,
34084 8849                      0000            .word	0
34085 884B                      E000            .word	$E000
34086                                           ! 6238                               0,
34087 884D                      0000            .word	0
34088 884F                      0000            .word	0
34089                                           ! 6239                             0,
34090 8851                      0000            .word	0
34091                                           ! 6240                                3456,
34092 8853                      0D80            .word	$D80
34093                                           ! 6241                             0,
34094 8855                        00            .byte	0
34095                                           ! 6242                             0,
34096 8856                        00            .byte	0
34097                                           ! 6243                           8,
34098 8857                        08            .byte	8
34099                                           ! 6244                                16,
34100 8858                        10            .byte	$10
34101                                           ! 6245                             8,
34102 8859                        08            .byte	8
34103                                           ! 6246                                  8,
34104 885A                        08            .byte	8
34105                                           ! 6247                            8,
34106 885B                        08            .byte	8
34107                                           ! 6248                                 0,
34108 885C                        00            .byte	0
34109                                           ! 6249                            0,
34110 885D                        00            .byte	0
34111                                           ! 6250                                 0,
34112 885E                        00            .byte	0
34113                                           ! 6251                          0,
34114 885F                      0000            .word	0
34115 8861                      0000            .word	0
34116                                           ! 6252 } },
34117                                           ! 6253 { 0x014c,
34118 8863                      014C            .word	$14C
34119                                           ! 6254 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34120 8865                      009B            .word	$9B
34121                                           ! 6255                           0x01 | 0x02 | 0x04,
34122 8867                        07            .byte	7
34123                                           ! 6256                           0,
34124 8868                        00            .byte	0
34125                                           ! 6257                           64,
34126 8869                      0040            .word	$40
34127                                           ! 6258                    64,
34128 886B                      0040            .word	$40
34129                                           ! 6259                        0xA000,
34130 886D                      A000            .word	$A000
34131                                           ! 6260                        0x0000,
34132 886F                      0000            .word	0
34133                                           ! 6261                       0,
34134 8871                      0000            .word	0
34135 8873                      0000            .word	0
34136                                           ! 6262                             4608,
34137 8875                      1200            .word	$1200
34138                                           ! 6263                        1152,
34139 8877                      0480            .word	$480
34140                                           ! 6264                        864,
34141 8879                      0360            .word	$360
34142                                           ! 6265                      8,
34143 887B                        08            .byte	8
34144                                           ! 6266                      16,
34145 887C                        10            .byte	$10
34146                                           ! 6267                           1,
34147 887D                        01            .byte	1
34148                                           ! 6268                         32,
34149 887E                        20            .byte	$20
34150                                           ! 6269                          61,
34151 887F                        3D            .byte	$3D
34152                                           ! 6270                        0x06,
34153 8880                        06            .byte	6
34154                                           ! 6271                     0,
34155 8881                        00            .byte	0
34156                                           ! 6272                               3,
34157 8882                        03            .byte	3
34158                                           ! 6273                          0,
34159 8883                        00            .byte	0
34160                                           ! 6274                        8
34161                                           ! 6274 ,
34162 8884                        08            .byte	8
34163                                           ! 6275                             16,
34164 8885                        10            .byte	$10
34165                                           ! 6276                          8,
34166 8886                        08            .byte	8
34167                                           ! 6277                               8,
34168 8887                        08            .byte	8
34169                                           ! 6278                         8,
34170 8888                        08            .byte	8
34171                                           ! 6279                              0,
34172 8889                        00            .byte	0
34173                                           ! 6280                         8,
34174 888A                        08            .byte	8
34175                                           ! 6281                              24,
34176 888B                        18            .byte	$18
34177                                           ! 6282                                0x02,
34178 888C                        02            .byte	2
34179                                           ! 6283                        0xE0000000,
34180 888D                      0000            .word	0
34181 888F                      E000            .word	$E000
34182                                           ! 6284                               0,
34183 8891                      0000            .word	0
34184 8893                      0000            .word	0
34185                                           ! 6285                             0,
34186 8895                      0000            .word	0
34187                                           ! 6286                                4608,
34188 8897                      1200            .word	$1200
34189                                           ! 6287                             0,
34190 8899                        00            .byte	0
34191                                           ! 6288                             0,
34192 889A                        00            .byte	0
34193                                           ! 6289                           8,
34194 889B                        08            .byte	8
34195                                           ! 6290                                16,
34196 889C                        10            .byte	$10
34197                                           ! 6291                             8,
34198 889D                        08            .byte	8
34199                                           ! 6292                                  8,
34200 889E                        08            .byte	8
34201                                           ! 6293                            8,
34202 889F                        08            .byte	8
34203                                           ! 6294                                 0,
34204 88A0                        00            .byte	0
34205                                           ! 6295                            8,
34206 88A1                        08            .byte	8
34207                                           ! 6296                                 24,
34208 88A2                        18            .byte	$18
34209                                           ! 6297                          0,
34210 88A3                      0000            .word	0
34211 88A5                      0000            .word	0
34212                                           ! 6298 } },
34213                                           ! 6299 { 0x0178,
34214 88A7                      0178            .word	$178
34215                                           ! 6300 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34216 88A9                      009B            .word	$9B
34217                                           ! 6301                           0x01 | 0x02 | 0x04,
34218 88AB                        07            .byte	7
34219                                           ! 6302                           0,
34220 88AC                        00            .byte	0
34221                                           ! 6303                           64,
34222 88AD                      0040            .word	$40
34223                                           ! 6304                    64,
34224 88AF                      0040            .word	$40
34225                                           ! 6305                        0xA000,
34226 88B1                      A000            .word	$A000
34227                                           ! 6306                        0x0000,
34228 88B3                      0000            .word	0
34229                                           ! 6307                       0,
34230 88B5                      0000            .word	0
34231 88B7                      0000            .word	0
34232                                           ! 6308                             2560,
34233 88B9                      0A00            .word	$A00
34234                                           ! 6309                        1280,
34235 88BB                      0500            .word	$500
34236                                           ! 6310                        800,
34237 88BD                      0320            .word	$320
34238                                           ! 6311                      8,
34239 88BF                        08            .byte	8
34240                                           ! 6312                      16,
34241 88C0                        10            .byte	$10
34242                                           ! 6313                           1,
34243 88C1                        01            .byte	1
34244                                           ! 6314                         16,
34245 88C2                        10            .byte	$10
34246                                           ! 6315                          32,
34247 88C3                        20            .byte	$20
34248                                           ! 6316                        0x06,
34249 88C4                        06            .byte	6
34250                                           ! 6317                     0,
34251 88C5                        00            .byte	0
34252                                           ! 6318                               7,
34253 88C6                        07            .byte	7
34254                                           ! 6319                          0,
34255 88C7                        00            .byte	0
34256                                           ! 6320                        5,
34257 88C8                        05            .byte	5
34258                                           ! 6321                             11,
34259 88C9                        0B            .byte	$B
34260                                           ! 6322                          6,
34261 88CA                        06            .byte	6
34262                                           ! 6323                               5,
34263 88CB                        05            .byte	5
34264                                           ! 6324                         5,
34265 88CC                        05            .byte	5
34266                                           ! 6325                              0,
34267 88CD                        00            .byte	0
34268                                           ! 6326                         0,
34269 88CE                        00            .byte	0
34270                                           ! 6327                              0,
34271 88CF                        00            .byte	0
34272                                           ! 6328                                0,
34273 88D0                        00            .byte	0
34274                                           ! 6329                        0xE0000000,
34275 88D1                      0000            .word	0
34276 88D3                      E000            .word	$E000
34277                                           ! 6330                               0,
34278 88D5                      0000            .word	0
34279 88D7                      0000            .word	0
34280                                           ! 6331                             0,
34281 88D9                      0000            .word	0
34282                                           ! 6332                                2560,
34283 88DB                      0A00            .word	$A00
34284                                           ! 6333                             0,
34285 88DD                        00            .byte	0
34286                                           ! 6334                             0,
34287 88DE                        00            .byte	0
34288                                           ! 6335                           5,
34289 88DF                        05            .byte	5
34290                                           ! 6336                                11,
34291 88E0                        0B            .byte	$B
34292                                           ! 6337                             6,
34293 88E1                        06            .byte	6
34294                                           ! 6338                                  5,
34295 88E2                        05            .byte	5
34296                                           ! 6339                            5,
34297 88E3                        05            .byte	5
34298                                           ! 6340                                 0,
34299 88E4                        00            .byte	0
34300                                           ! 6341                            0,
34301                                           ! 6341 
34302 88E5                        00            .byte	0
34303                                           ! 6342                                 0,
34304 88E6                        00            .byte	0
34305                                           ! 6343                          0,
34306 88E7                      0000            .word	0
34307 88E9                      0000            .word	0
34308                                           ! 6344 } },
34309                                           ! 6345 { 0x0179,
34310 88EB                      0179            .word	$179
34311                                           ! 6346 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34312 88ED                      009B            .word	$9B
34313                                           ! 6347                           0x01 | 0x02 | 0x04,
34314 88EF                        07            .byte	7
34315                                           ! 6348                           0,
34316 88F0                        00            .byte	0
34317                                           ! 6349                           64,
34318 88F1                      0040            .word	$40
34319                                           ! 6350                    64,
34320 88F3                      0040            .word	$40
34321                                           ! 6351                        0xA000,
34322 88F5                      A000            .word	$A000
34323                                           ! 6352                        0x0000,
34324 88F7                      0000            .word	0
34325                                           ! 6353                       0,
34326 88F9                      0000            .word	0
34327 88FB                      0000            .word	0
34328                                           ! 6354                             3840,
34329 88FD                      0F00            .word	$F00
34330                                           ! 6355                        1280,
34331 88FF                      0500            .word	$500
34332                                           ! 6356                        800,
34333 8901                      0320            .word	$320
34334                                           ! 6357                      8,
34335 8903                        08            .byte	8
34336                                           ! 6358                      16,
34337 8904                        10            .byte	$10
34338                                           ! 6359                           1,
34339 8905                        01            .byte	1
34340                                           ! 6360                         24,
34341 8906                        18            .byte	$18
34342                                           ! 6361                          47,
34343 8907                        2F            .byte	$2F
34344                                           ! 6362                        0x06,
34345 8908                        06            .byte	6
34346                                           ! 6363                     0,
34347 8909                        00            .byte	0
34348                                           ! 6364                               4,
34349 890A                        04            .byte	4
34350                                           ! 6365                          0,
34351 890B                        00            .byte	0
34352                                           ! 6366                        8,
34353 890C                        08            .byte	8
34354                                           ! 6367                             16,
34355 890D                        10            .byte	$10
34356                                           ! 6368                          8,
34357 890E                        08            .byte	8
34358                                           ! 6369                               8,
34359 890F                        08            .byte	8
34360                                           ! 6370                         8,
34361 8910                        08            .byte	8
34362                                           ! 6371                              0,
34363 8911                        00            .byte	0
34364                                           ! 6372                         0,
34365 8912                        00            .byte	0
34366                                           ! 6373                              0,
34367 8913                        00            .byte	0
34368                                           ! 6374                                0,
34369 8914                        00            .byte	0
34370                                           ! 6375                        0xE0000000,
34371 8915                      0000            .word	0
34372 8917                      E000            .word	$E000
34373                                           ! 6376                               0,
34374 8919                      0000            .word	0
34375 891B                      0000            .word	0
34376                                           ! 6377                             0,
34377 891D                      0000            .word	0
34378                                           ! 6378                                3840,
34379 891F                      0F00            .word	$F00
34380                                           ! 6379                             0,
34381 8921                        00            .byte	0
34382                                           ! 6380                             0,
34383 8922                        00            .byte	0
34384                                           ! 6381                           8,
34385 8923                        08            .byte	8
34386                                           ! 6382                                16,
34387 8924                        10            .byte	$10
34388                                           ! 6383                             8,
34389 8925                        08            .byte	8
34390                                           ! 6384                                  8,
34391 8926                        08            .byte	8
34392                                           ! 6385                            8,
34393 8927                        08            .byte	8
34394                                           ! 6386                                 0,
34395 8928                        00            .byte	0
34396                                           ! 6387                            0,
34397 8929                        00            .byte	0
34398                                           ! 6388                                 0,
34399 892A                        00            .byte	0
34400                                           ! 6389                          0,
34401 892B                      0000            .word	0
34402 892D                      0000            .word	0
34403                                           ! 6390 } },
34404                                           ! 6391 { 0x017a,
34405 892F                      017A            .word	$17A
34406                                           ! 6392 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34407 8931                      009B            .word	$9B
34408                                           ! 6393                           0x01 | 0x02 | 0x04,
34409 8933                        07            .byte	7
34410                                           ! 6394                           0,
34411 8934                        00            .byte	0
34412                                           ! 6395                           64,
34413 8935                      0040            .word	$40
34414                                           ! 6396                    64,
34415 8937                      0040            .word	$40
34416                                           ! 6397                        0xA000,
34417 8939                      A000            .word	$A000
34418                                           ! 6398                        0x0000,
34419 893B                      0000            .word	0
34420                                           ! 6399                       0,
34421 893D                      0000            .word	0
34422 893F                      0000            .word	0
34423                                           ! 6400                             5120,
34424 8941                      1400            .word	$1400
34425                                           ! 6401                        1280,
34426 8943                      0500            .word	$500
34427                                           ! 6402                        800,
34428 8945                      0320            .word	$320
34429                                           ! 6403                      8,
34430 8947                        08            .byte	8
34431                                           ! 6404                      16,
34432 8948                        10            .byte	$10
34433                                           ! 6405                           1,
34434 8949                        01            .byte	1
34435                                           ! 6406                         32,
34436 894A                        20            .byte	$20
34437                                           ! 6407                          63,
34438 894B                        3F            .byte	$3F
34439                                           ! 6408                        0x06,
34440 894C                        06            .byte	6
34441                                           ! 6409                     0,
34442 894D                        00            .byte	0
34443                                           ! 6410                               3,
34444 894E                        03            .byte	3
34445                                           ! 6411                         
34446                                           ! 6411  0,
34447 894F                        00            .byte	0
34448                                           ! 6412                        8,
34449 8950                        08            .byte	8
34450                                           ! 6413                             16,
34451 8951                        10            .byte	$10
34452                                           ! 6414                          8,
34453 8952                        08            .byte	8
34454                                           ! 6415                               8,
34455 8953                        08            .byte	8
34456                                           ! 6416                         8,
34457 8954                        08            .byte	8
34458                                           ! 6417                              0,
34459 8955                        00            .byte	0
34460                                           ! 6418                         8,
34461 8956                        08            .byte	8
34462                                           ! 6419                              24,
34463 8957                        18            .byte	$18
34464                                           ! 6420                                0x02,
34465 8958                        02            .byte	2
34466                                           ! 6421                        0xE0000000,
34467 8959                      0000            .word	0
34468 895B                      E000            .word	$E000
34469                                           ! 6422                               0,
34470 895D                      0000            .word	0
34471 895F                      0000            .word	0
34472                                           ! 6423                             0,
34473 8961                      0000            .word	0
34474                                           ! 6424                                5120,
34475 8963                      1400            .word	$1400
34476                                           ! 6425                             0,
34477 8965                        00            .byte	0
34478                                           ! 6426                             0,
34479 8966                        00            .byte	0
34480                                           ! 6427                           8,
34481 8967                        08            .byte	8
34482                                           ! 6428                                16,
34483 8968                        10            .byte	$10
34484                                           ! 6429                             8,
34485 8969                        08            .byte	8
34486                                           ! 6430                                  8,
34487 896A                        08            .byte	8
34488                                           ! 6431                            8,
34489 896B                        08            .byte	8
34490                                           ! 6432                                 0,
34491 896C                        00            .byte	0
34492                                           ! 6433                            8,
34493 896D                        08            .byte	8
34494                                           ! 6434                                 24,
34495 896E                        18            .byte	$18
34496                                           ! 6435                          0,
34497 896F                      0000            .word	0
34498 8971                      0000            .word	0
34499                                           ! 6436 } },
34500                                           ! 6437 { 0x017b,
34501 8973                      017B            .word	$17B
34502                                           ! 6438 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34503 8975                      009B            .word	$9B
34504                                           ! 6439                           0x01 | 0x02 | 0x04,
34505 8977                        07            .byte	7
34506                                           ! 6440                           0,
34507 8978                        00            .byte	0
34508                                           ! 6441                           64,
34509 8979                      0040            .word	$40
34510                                           ! 6442                    64,
34511 897B                      0040            .word	$40
34512                                           ! 6443                        0xA000,
34513 897D                      A000            .word	$A000
34514                                           ! 6444                        0x0000,
34515 897F                      0000            .word	0
34516                                           ! 6445                       0,
34517 8981                      0000            .word	0
34518 8983                      0000            .word	0
34519                                           ! 6446                             2560,
34520 8985                      0A00            .word	$A00
34521                                           ! 6447                        1280,
34522 8987                      0500            .word	$500
34523                                           ! 6448                        960,
34524 8989                      03C0            .word	$3C0
34525                                           ! 6449                      8,
34526 898B                        08            .byte	8
34527                                           ! 6450                      16,
34528 898C                        10            .byte	$10
34529                                           ! 6451                           1,
34530 898D                        01            .byte	1
34531                                           ! 6452                         16,
34532 898E                        10            .byte	$10
34533                                           ! 6453                          38,
34534 898F                        26            .byte	$26
34535                                           ! 6454                        0x06,
34536 8990                        06            .byte	6
34537                                           ! 6455                     0,
34538 8991                        00            .byte	0
34539                                           ! 6456                               5,
34540 8992                        05            .byte	5
34541                                           ! 6457                          0,
34542 8993                        00            .byte	0
34543                                           ! 6458                        5,
34544 8994                        05            .byte	5
34545                                           ! 6459                             11,
34546 8995                        0B            .byte	$B
34547                                           ! 6460                          6,
34548 8996                        06            .byte	6
34549                                           ! 6461                               5,
34550 8997                        05            .byte	5
34551                                           ! 6462                         5,
34552 8998                        05            .byte	5
34553                                           ! 6463                              0,
34554 8999                        00            .byte	0
34555                                           ! 6464                         0,
34556 899A                        00            .byte	0
34557                                           ! 6465                              0,
34558 899B                        00            .byte	0
34559                                           ! 6466                                0,
34560 899C                        00            .byte	0
34561                                           ! 6467                        0xE0000000,
34562 899D                      0000            .word	0
34563 899F                      E000            .word	$E000
34564                                           ! 6468                               0,
34565 89A1                      0000            .word	0
34566 89A3                      0000            .word	0
34567                                           ! 6469                             0,
34568 89A5                      0000            .word	0
34569                                           ! 6470                                2560,
34570 89A7                      0A00            .word	$A00
34571                                           ! 6471                             0,
34572 89A9                        00            .byte	0
34573                                           ! 6472                             0,
34574 89AA                        00            .byte	0
34575                                           ! 6473                           5,
34576 89AB                        05            .byte	5
34577                                           ! 6474                                11,
34578 89AC                        0B            .byte	$B
34579                                           ! 6475                             6,
34580 89AD                        06            .byte	6
34581                                           ! 6476                                  5,
34582 89AE                        05            .byte	5
34583                                           ! 6477                            5,
34584 89AF                        05            .byte	5
34585                                           ! 6478                                 0,
34586 89B0                        00            .byte	0
34587                                           ! 6479  
34588                                           ! 6479                           0,
34589 89B1                        00            .byte	0
34590                                           ! 6480                                 0,
34591 89B2                        00            .byte	0
34592                                           ! 6481                          0,
34593 89B3                      0000            .word	0
34594 89B5                      0000            .word	0
34595                                           ! 6482 } },
34596                                           ! 6483 { 0x017c,
34597 89B7                      017C            .word	$17C
34598                                           ! 6484 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34599 89B9                      009B            .word	$9B
34600                                           ! 6485                           0x01 | 0x02 | 0x04,
34601 89BB                        07            .byte	7
34602                                           ! 6486                           0,
34603 89BC                        00            .byte	0
34604                                           ! 6487                           64,
34605 89BD                      0040            .word	$40
34606                                           ! 6488                    64,
34607 89BF                      0040            .word	$40
34608                                           ! 6489                        0xA000,
34609 89C1                      A000            .word	$A000
34610                                           ! 6490                        0x0000,
34611 89C3                      0000            .word	0
34612                                           ! 6491                       0,
34613 89C5                      0000            .word	0
34614 89C7                      0000            .word	0
34615                                           ! 6492                             3840,
34616 89C9                      0F00            .word	$F00
34617                                           ! 6493                        1280,
34618 89CB                      0500            .word	$500
34619                                           ! 6494                        960,
34620 89CD                      03C0            .word	$3C0
34621                                           ! 6495                      8,
34622 89CF                        08            .byte	8
34623                                           ! 6496                      16,
34624 89D0                        10            .byte	$10
34625                                           ! 6497                           1,
34626 89D1                        01            .byte	1
34627                                           ! 6498                         24,
34628 89D2                        18            .byte	$18
34629                                           ! 6499                          57,
34630 89D3                        39            .byte	$39
34631                                           ! 6500                        0x06,
34632 89D4                        06            .byte	6
34633                                           ! 6501                     0,
34634 89D5                        00            .byte	0
34635                                           ! 6502                               3,
34636 89D6                        03            .byte	3
34637                                           ! 6503                          0,
34638 89D7                        00            .byte	0
34639                                           ! 6504                        8,
34640 89D8                        08            .byte	8
34641                                           ! 6505                             16,
34642 89D9                        10            .byte	$10
34643                                           ! 6506                          8,
34644 89DA                        08            .byte	8
34645                                           ! 6507                               8,
34646 89DB                        08            .byte	8
34647                                           ! 6508                         8,
34648 89DC                        08            .byte	8
34649                                           ! 6509                              0,
34650 89DD                        00            .byte	0
34651                                           ! 6510                         0,
34652 89DE                        00            .byte	0
34653                                           ! 6511                              0,
34654 89DF                        00            .byte	0
34655                                           ! 6512                                0,
34656 89E0                        00            .byte	0
34657                                           ! 6513                        0xE0000000,
34658 89E1                      0000            .word	0
34659 89E3                      E000            .word	$E000
34660                                           ! 6514                               0,
34661 89E5                      0000            .word	0
34662 89E7                      0000            .word	0
34663                                           ! 6515                             0,
34664 89E9                      0000            .word	0
34665                                           ! 6516                                3840,
34666 89EB                      0F00            .word	$F00
34667                                           ! 6517                             0,
34668 89ED                        00            .byte	0
34669                                           ! 6518                             0,
34670 89EE                        00            .byte	0
34671                                           ! 6519                           8,
34672 89EF                        08            .byte	8
34673                                           ! 6520                                16,
34674 89F0                        10            .byte	$10
34675                                           ! 6521                             8,
34676 89F1                        08            .byte	8
34677                                           ! 6522                                  8,
34678 89F2                        08            .byte	8
34679                                           ! 6523                            8,
34680 89F3                        08            .byte	8
34681                                           ! 6524                                 0,
34682 89F4                        00            .byte	0
34683                                           ! 6525                            0,
34684 89F5                        00            .byte	0
34685                                           ! 6526                                 0,
34686 89F6                        00            .byte	0
34687                                           ! 6527                          0,
34688 89F7                      0000            .word	0
34689 89F9                      0000            .word	0
34690                                           ! 6528 } },
34691                                           ! 6529 { 0x017d,
34692 89FB                      017D            .word	$17D
34693                                           ! 6530 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34694 89FD                      009B            .word	$9B
34695                                           ! 6531                           0x01 | 0x02 | 0x04,
34696 89FF                        07            .byte	7
34697                                           ! 6532                           0,
34698 8A00                        00            .byte	0
34699                                           ! 6533                           64,
34700 8A01                      0040            .word	$40
34701                                           ! 6534                    64,
34702 8A03                      0040            .word	$40
34703                                           ! 6535                        0xA000,
34704 8A05                      A000            .word	$A000
34705                                           ! 6536                        0x0000,
34706 8A07                      0000            .word	0
34707                                           ! 6537                       0,
34708 8A09                      0000            .word	0
34709 8A0B                      0000            .word	0
34710                                           ! 6538                             5120,
34711 8A0D                      1400            .word	$1400
34712                                           ! 6539                        1280,
34713 8A0F                      0500            .word	$500
34714                                           ! 6540                        960,
34715 8A11                      03C0            .word	$3C0
34716                                           ! 6541                      8,
34717 8A13                        08            .byte	8
34718                                           ! 6542                      16,
34719 8A14                        10            .byte	$10
34720                                           ! 6543                           1,
34721 8A15                        01            .byte	1
34722                                           ! 6544                         32,
34723 8A16                        20            .byte	$20
34724                                           ! 6545                          75,
34725 8A17                        4B            .byte	$4B
34726                                           ! 6546                        0x06,
34727 8A18                        06            .byte	6
34728                                           ! 6547                     0,
34729 8A19                        00            .byte	0
34730                                           ! 6548                              
34731                                           ! 6548  2,
34732 8A1A                        02            .byte	2
34733                                           ! 6549                          0,
34734 8A1B                        00            .byte	0
34735                                           ! 6550                        8,
34736 8A1C                        08            .byte	8
34737                                           ! 6551                             16,
34738 8A1D                        10            .byte	$10
34739                                           ! 6552                          8,
34740 8A1E                        08            .byte	8
34741                                           ! 6553                               8,
34742 8A1F                        08            .byte	8
34743                                           ! 6554                         8,
34744 8A20                        08            .byte	8
34745                                           ! 6555                              0,
34746 8A21                        00            .byte	0
34747                                           ! 6556                         8,
34748 8A22                        08            .byte	8
34749                                           ! 6557                              24,
34750 8A23                        18            .byte	$18
34751                                           ! 6558                                0x02,
34752 8A24                        02            .byte	2
34753                                           ! 6559                        0xE0000000,
34754 8A25                      0000            .word	0
34755 8A27                      E000            .word	$E000
34756                                           ! 6560                               0,
34757 8A29                      0000            .word	0
34758 8A2B                      0000            .word	0
34759                                           ! 6561                             0,
34760 8A2D                      0000            .word	0
34761                                           ! 6562                                5120,
34762 8A2F                      1400            .word	$1400
34763                                           ! 6563                             0,
34764 8A31                        00            .byte	0
34765                                           ! 6564                             0,
34766 8A32                        00            .byte	0
34767                                           ! 6565                           8,
34768 8A33                        08            .byte	8
34769                                           ! 6566                                16,
34770 8A34                        10            .byte	$10
34771                                           ! 6567                             8,
34772 8A35                        08            .byte	8
34773                                           ! 6568                                  8,
34774 8A36                        08            .byte	8
34775                                           ! 6569                            8,
34776 8A37                        08            .byte	8
34777                                           ! 6570                                 0,
34778 8A38                        00            .byte	0
34779                                           ! 6571                            8,
34780 8A39                        08            .byte	8
34781                                           ! 6572                                 24,
34782 8A3A                        18            .byte	$18
34783                                           ! 6573                          0,
34784 8A3B                      0000            .word	0
34785 8A3D                      0000            .word	0
34786                                           ! 6574 } },
34787                                           ! 6575 { 0x017e,
34788 8A3F                      017E            .word	$17E
34789                                           ! 6576 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34790 8A41                      009B            .word	$9B
34791                                           ! 6577                           0x01 | 0x02 | 0x04,
34792 8A43                        07            .byte	7
34793                                           ! 6578                           0,
34794 8A44                        00            .byte	0
34795                                           ! 6579                           64,
34796 8A45                      0040            .word	$40
34797                                           ! 6580                    64,
34798 8A47                      0040            .word	$40
34799                                           ! 6581                        0xA000,
34800 8A49                      A000            .word	$A000
34801                                           ! 6582                        0x0000,
34802 8A4B                      0000            .word	0
34803                                           ! 6583                       0,
34804 8A4D                      0000            .word	0
34805 8A4F                      0000            .word	0
34806                                           ! 6584                             2880,
34807 8A51                      0B40            .word	$B40
34808                                           ! 6585                        1440,
34809 8A53                      05A0            .word	$5A0
34810                                           ! 6586                        900,
34811 8A55                      0384            .word	$384
34812                                           ! 6587                      8,
34813 8A57                        08            .byte	8
34814                                           ! 6588                      16,
34815 8A58                        10            .byte	$10
34816                                           ! 6589                           1,
34817 8A59                        01            .byte	1
34818                                           ! 6590                         16,
34819 8A5A                        10            .byte	$10
34820                                           ! 6591                          40,
34821 8A5B                        28            .byte	$28
34822                                           ! 6592                        0x06,
34823 8A5C                        06            .byte	6
34824                                           ! 6593                     0,
34825 8A5D                        00            .byte	0
34826                                           ! 6594                               5,
34827 8A5E                        05            .byte	5
34828                                           ! 6595                          0,
34829 8A5F                        00            .byte	0
34830                                           ! 6596                        5,
34831 8A60                        05            .byte	5
34832                                           ! 6597                             11,
34833 8A61                        0B            .byte	$B
34834                                           ! 6598                          6,
34835 8A62                        06            .byte	6
34836                                           ! 6599                               5,
34837 8A63                        05            .byte	5
34838                                           ! 6600                         5,
34839 8A64                        05            .byte	5
34840                                           ! 6601                              0,
34841 8A65                        00            .byte	0
34842                                           ! 6602                         0,
34843 8A66                        00            .byte	0
34844                                           ! 6603                              0,
34845 8A67                        00            .byte	0
34846                                           ! 6604                                0,
34847 8A68                        00            .byte	0
34848                                           ! 6605                        0xE0000000,
34849 8A69                      0000            .word	0
34850 8A6B                      E000            .word	$E000
34851                                           ! 6606                               0,
34852 8A6D                      0000            .word	0
34853 8A6F                      0000            .word	0
34854                                           ! 6607                             0,
34855 8A71                      0000            .word	0
34856                                           ! 6608                                2880,
34857 8A73                      0B40            .word	$B40
34858                                           ! 6609                             0,
34859 8A75                        00            .byte	0
34860                                           ! 6610                             0,
34861 8A76                        00            .byte	0
34862                                           ! 6611                           5,
34863 8A77                        05            .byte	5
34864                                           ! 6612                                11,
34865 8A78                        0B            .byte	$B
34866                                           ! 6613                             6,
34867 8A79                        06            .byte	6
34868                                           ! 6614                                  5,
34869 8A7A                        05            .byte	5
34870                                           ! 6615                            5,
34871 8A7B                        05            .byte	5
34872                                           ! 6616         
34873                                           ! 6616                         0,
34874 8A7C                        00            .byte	0
34875                                           ! 6617                            0,
34876 8A7D                        00            .byte	0
34877                                           ! 6618                                 0,
34878 8A7E                        00            .byte	0
34879                                           ! 6619                          0,
34880 8A7F                      0000            .word	0
34881 8A81                      0000            .word	0
34882                                           ! 6620 } },
34883                                           ! 6621 { 0x017f,
34884 8A83                      017F            .word	$17F
34885                                           ! 6622 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34886 8A85                      009B            .word	$9B
34887                                           ! 6623                           0x01 | 0x02 | 0x04,
34888 8A87                        07            .byte	7
34889                                           ! 6624                           0,
34890 8A88                        00            .byte	0
34891                                           ! 6625                           64,
34892 8A89                      0040            .word	$40
34893                                           ! 6626                    64,
34894 8A8B                      0040            .word	$40
34895                                           ! 6627                        0xA000,
34896 8A8D                      A000            .word	$A000
34897                                           ! 6628                        0x0000,
34898 8A8F                      0000            .word	0
34899                                           ! 6629                       0,
34900 8A91                      0000            .word	0
34901 8A93                      0000            .word	0
34902                                           ! 6630                             4320,
34903 8A95                      10E0            .word	$10E0
34904                                           ! 6631                        1440,
34905 8A97                      05A0            .word	$5A0
34906                                           ! 6632                        900,
34907 8A99                      0384            .word	$384
34908                                           ! 6633                      8,
34909 8A9B                        08            .byte	8
34910                                           ! 6634                      16,
34911 8A9C                        10            .byte	$10
34912                                           ! 6635                           1,
34913 8A9D                        01            .byte	1
34914                                           ! 6636                         24,
34915 8A9E                        18            .byte	$18
34916                                           ! 6637                          60,
34917 8A9F                        3C            .byte	$3C
34918                                           ! 6638                        0x06,
34919 8AA0                        06            .byte	6
34920                                           ! 6639                     0,
34921 8AA1                        00            .byte	0
34922                                           ! 6640                               3,
34923 8AA2                        03            .byte	3
34924                                           ! 6641                          0,
34925 8AA3                        00            .byte	0
34926                                           ! 6642                        8,
34927 8AA4                        08            .byte	8
34928                                           ! 6643                             16,
34929 8AA5                        10            .byte	$10
34930                                           ! 6644                          8,
34931 8AA6                        08            .byte	8
34932                                           ! 6645                               8,
34933 8AA7                        08            .byte	8
34934                                           ! 6646                         8,
34935 8AA8                        08            .byte	8
34936                                           ! 6647                              0,
34937 8AA9                        00            .byte	0
34938                                           ! 6648                         0,
34939 8AAA                        00            .byte	0
34940                                           ! 6649                              0,
34941 8AAB                        00            .byte	0
34942                                           ! 6650                                0,
34943 8AAC                        00            .byte	0
34944                                           ! 6651                        0xE0000000,
34945 8AAD                      0000            .word	0
34946 8AAF                      E000            .word	$E000
34947                                           ! 6652                               0,
34948 8AB1                      0000            .word	0
34949 8AB3                      0000            .word	0
34950                                           ! 6653                             0,
34951 8AB5                      0000            .word	0
34952                                           ! 6654                                4320,
34953 8AB7                      10E0            .word	$10E0
34954                                           ! 6655                             0,
34955 8AB9                        00            .byte	0
34956                                           ! 6656                             0,
34957 8ABA                        00            .byte	0
34958                                           ! 6657                           8,
34959 8ABB                        08            .byte	8
34960                                           ! 6658                                16,
34961 8ABC                        10            .byte	$10
34962                                           ! 6659                             8,
34963 8ABD                        08            .byte	8
34964                                           ! 6660                                  8,
34965 8ABE                        08            .byte	8
34966                                           ! 6661                            8,
34967 8ABF                        08            .byte	8
34968                                           ! 6662                                 0,
34969 8AC0                        00            .byte	0
34970                                           ! 6663                            0,
34971 8AC1                        00            .byte	0
34972                                           ! 6664                                 0,
34973 8AC2                        00            .byte	0
34974                                           ! 6665                          0,
34975 8AC3                      0000            .word	0
34976 8AC5                      0000            .word	0
34977                                           ! 6666 } },
34978                                           ! 6667 { 0x0180,
34979 8AC7                      0180            .word	$180
34980                                           ! 6668 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34981 8AC9                      009B            .word	$9B
34982                                           ! 6669                           0x01 | 0x02 | 0x04,
34983 8ACB                        07            .byte	7
34984                                           ! 6670                           0,
34985 8ACC                        00            .byte	0
34986                                           ! 6671                           64,
34987 8ACD                      0040            .word	$40
34988                                           ! 6672                    64,
34989 8ACF                      0040            .word	$40
34990                                           ! 6673                        0xA000,
34991 8AD1                      A000            .word	$A000
34992                                           ! 6674                        0x0000,
34993 8AD3                      0000            .word	0
34994                                           ! 6675                       0,
34995 8AD5                      0000            .word	0
34996 8AD7                      0000            .word	0
34997                                           ! 6676                             5760,
34998 8AD9                      1680            .word	$1680
34999                                           ! 6677                        1440,
35000 8ADB                      05A0            .word	$5A0
35001                                           ! 6678                        900,
35002 8ADD                      0384            .word	$384
35003                                           ! 6679                      8,
35004 8ADF                        08            .byte	8
35005                                           ! 6680                      16,
35006 8AE0                        10            .byte	$10
35007                                           ! 6681                           1,
35008 8AE1                        01            .byte	1
35009                                           ! 6682                         32,
35010 8AE2                        20            .byte	$20
35011                                           ! 6683                          80,
35012 8AE3                        50            .byte	$50
35013                                           ! 6684                        0x06,
35014 8AE4                        06            .byte	6
35015                                           ! 6685                     0,
35016 8AE5                        00            .byte	0
35017                                           ! 6686  
35018                                           ! 6686                              2,
35019 8AE6                        02            .byte	2
35020                                           ! 6687                          0,
35021 8AE7                        00            .byte	0
35022                                           ! 6688                        8,
35023 8AE8                        08            .byte	8
35024                                           ! 6689                             16,
35025 8AE9                        10            .byte	$10
35026                                           ! 6690                          8,
35027 8AEA                        08            .byte	8
35028                                           ! 6691                               8,
35029 8AEB                        08            .byte	8
35030                                           ! 6692                         8,
35031 8AEC                        08            .byte	8
35032                                           ! 6693                              0,
35033 8AED                        00            .byte	0
35034                                           ! 6694                         8,
35035 8AEE                        08            .byte	8
35036                                           ! 6695                              24,
35037 8AEF                        18            .byte	$18
35038                                           ! 6696                                0x02,
35039 8AF0                        02            .byte	2
35040                                           ! 6697                        0xE0000000,
35041 8AF1                      0000            .word	0
35042 8AF3                      E000            .word	$E000
35043                                           ! 6698                               0,
35044 8AF5                      0000            .word	0
35045 8AF7                      0000            .word	0
35046                                           ! 6699                             0,
35047 8AF9                      0000            .word	0
35048                                           ! 6700                                5760,
35049 8AFB                      1680            .word	$1680
35050                                           ! 6701                             0,
35051 8AFD                        00            .byte	0
35052                                           ! 6702                             0,
35053 8AFE                        00            .byte	0
35054                                           ! 6703                           8,
35055 8AFF                        08            .byte	8
35056                                           ! 6704                                16,
35057 8B00                        10            .byte	$10
35058                                           ! 6705                             8,
35059 8B01                        08            .byte	8
35060                                           ! 6706                                  8,
35061 8B02                        08            .byte	8
35062                                           ! 6707                            8,
35063 8B03                        08            .byte	8
35064                                           ! 6708                                 0,
35065 8B04                        00            .byte	0
35066                                           ! 6709                            8,
35067 8B05                        08            .byte	8
35068                                           ! 6710                                 24,
35069 8B06                        18            .byte	$18
35070                                           ! 6711                          0,
35071 8B07                      0000            .word	0
35072 8B09                      0000            .word	0
35073                                           ! 6712 } },
35074                                           ! 6713 { 0x0181,
35075 8B0B                      0181            .word	$181
35076                                           ! 6714 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35077 8B0D                      009B            .word	$9B
35078                                           ! 6715                           0x01 | 0x02 | 0x04,
35079 8B0F                        07            .byte	7
35080                                           ! 6716                           0,
35081 8B10                        00            .byte	0
35082                                           ! 6717                           64,
35083 8B11                      0040            .word	$40
35084                                           ! 6718                    64,
35085 8B13                      0040            .word	$40
35086                                           ! 6719                        0xA000,
35087 8B15                      A000            .word	$A000
35088                                           ! 6720                        0x0000,
35089 8B17                      0000            .word	0
35090                                           ! 6721                       0,
35091 8B19                      0000            .word	0
35092 8B1B                      0000            .word	0
35093                                           ! 6722                             2800,
35094 8B1D                      0AF0            .word	$AF0
35095                                           ! 6723                        1400,
35096 8B1F                      0578            .word	$578
35097                                           ! 6724                        1050,
35098 8B21                      041A            .word	$41A
35099                                           ! 6725                      8,
35100 8B23                        08            .byte	8
35101                                           ! 6726                      16,
35102 8B24                        10            .byte	$10
35103                                           ! 6727                           1,
35104 8B25                        01            .byte	1
35105                                           ! 6728                         16,
35106 8B26                        10            .byte	$10
35107                                           ! 6729                          45,
35108 8B27                        2D            .byte	$2D
35109                                           ! 6730                        0x06,
35110 8B28                        06            .byte	6
35111                                           ! 6731                     0,
35112 8B29                        00            .byte	0
35113                                           ! 6732                               4,
35114 8B2A                        04            .byte	4
35115                                           ! 6733                          0,
35116 8B2B                        00            .byte	0
35117                                           ! 6734                        5,
35118 8B2C                        05            .byte	5
35119                                           ! 6735                             11,
35120 8B2D                        0B            .byte	$B
35121                                           ! 6736                          6,
35122 8B2E                        06            .byte	6
35123                                           ! 6737                               5,
35124 8B2F                        05            .byte	5
35125                                           ! 6738                         5,
35126 8B30                        05            .byte	5
35127                                           ! 6739                              0,
35128 8B31                        00            .byte	0
35129                                           ! 6740                         0,
35130 8B32                        00            .byte	0
35131                                           ! 6741                              0,
35132 8B33                        00            .byte	0
35133                                           ! 6742                                0,
35134 8B34                        00            .byte	0
35135                                           ! 6743                        0xE0000000,
35136 8B35                      0000            .word	0
35137 8B37                      E000            .word	$E000
35138                                           ! 6744                               0,
35139 8B39                      0000            .word	0
35140 8B3B                      0000            .word	0
35141                                           ! 6745                             0,
35142 8B3D                      0000            .word	0
35143                                           ! 6746                                2800,
35144 8B3F                      0AF0            .word	$AF0
35145                                           ! 6747                             0,
35146 8B41                        00            .byte	0
35147                                           ! 6748                             0,
35148 8B42                        00            .byte	0
35149                                           ! 6749                           5,
35150 8B43                        05            .byte	5
35151                                           ! 6750                                11,
35152 8B44                        0B            .byte	$B
35153                                           ! 6751                             6,
35154 8B45                        06            .byte	6
35155                                           ! 6752                                  5,
35156 8B46                        05            .byte	5
35157                                           ! 6753          
35158                                           ! 6753                   5,
35159 8B47                        05            .byte	5
35160                                           ! 6754                                 0,
35161 8B48                        00            .byte	0
35162                                           ! 6755                            0,
35163 8B49                        00            .byte	0
35164                                           ! 6756                                 0,
35165 8B4A                        00            .byte	0
35166                                           ! 6757                          0,
35167 8B4B                      0000            .word	0
35168 8B4D                      0000            .word	0
35169                                           ! 6758 } },
35170                                           ! 6759 { 0x0182,
35171 8B4F                      0182            .word	$182
35172                                           ! 6760 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35173 8B51                      009B            .word	$9B
35174                                           ! 6761                           0x01 | 0x02 | 0x04,
35175 8B53                        07            .byte	7
35176                                           ! 6762                           0,
35177 8B54                        00            .byte	0
35178                                           ! 6763                           64,
35179 8B55                      0040            .word	$40
35180                                           ! 6764                    64,
35181 8B57                      0040            .word	$40
35182                                           ! 6765                        0xA000,
35183 8B59                      A000            .word	$A000
35184                                           ! 6766                        0x0000,
35185 8B5B                      0000            .word	0
35186                                           ! 6767                       0,
35187 8B5D                      0000            .word	0
35188 8B5F                      0000            .word	0
35189                                           ! 6768                             4200,
35190 8B61                      1068            .word	$1068
35191                                           ! 6769                        1400,
35192 8B63                      0578            .word	$578
35193                                           ! 6770                        1050,
35194 8B65                      041A            .word	$41A
35195                                           ! 6771                      8,
35196 8B67                        08            .byte	8
35197                                           ! 6772                      16,
35198 8B68                        10            .byte	$10
35199                                           ! 6773                           1,
35200 8B69                        01            .byte	1
35201                                           ! 6774                         24,
35202 8B6A                        18            .byte	$18
35203                                           ! 6775                          68,
35204 8B6B                        44            .byte	$44
35205                                           ! 6776                        0x06,
35206 8B6C                        06            .byte	6
35207                                           ! 6777                     0,
35208 8B6D                        00            .byte	0
35209                                           ! 6778                               2,
35210 8B6E                        02            .byte	2
35211                                           ! 6779                          0,
35212 8B6F                        00            .byte	0
35213                                           ! 6780                        8,
35214 8B70                        08            .byte	8
35215                                           ! 6781                             16,
35216 8B71                        10            .byte	$10
35217                                           ! 6782                          8,
35218 8B72                        08            .byte	8
35219                                           ! 6783                               8,
35220 8B73                        08            .byte	8
35221                                           ! 6784                         8,
35222 8B74                        08            .byte	8
35223                                           ! 6785                              0,
35224 8B75                        00            .byte	0
35225                                           ! 6786                         0,
35226 8B76                        00            .byte	0
35227                                           ! 6787                              0,
35228 8B77                        00            .byte	0
35229                                           ! 6788                                0,
35230 8B78                        00            .byte	0
35231                                           ! 6789                        0xE0000000,
35232 8B79                      0000            .word	0
35233 8B7B                      E000            .word	$E000
35234                                           ! 6790                               0,
35235 8B7D                      0000            .word	0
35236 8B7F                      0000            .word	0
35237                                           ! 6791                             0,
35238 8B81                      0000            .word	0
35239                                           ! 6792                                4200,
35240 8B83                      1068            .word	$1068
35241                                           ! 6793                             0,
35242 8B85                        00            .byte	0
35243                                           ! 6794                             0,
35244 8B86                        00            .byte	0
35245                                           ! 6795                           8,
35246 8B87                        08            .byte	8
35247                                           ! 6796                                16,
35248 8B88                        10            .byte	$10
35249                                           ! 6797                             8,
35250 8B89                        08            .byte	8
35251                                           ! 6798                                  8,
35252 8B8A                        08            .byte	8
35253                                           ! 6799                            8,
35254 8B8B                        08            .byte	8
35255                                           ! 6800                                 0,
35256 8B8C                        00            .byte	0
35257                                           ! 6801                            0,
35258 8B8D                        00            .byte	0
35259                                           ! 6802                                 0,
35260 8B8E                        00            .byte	0
35261                                           ! 6803                          0,
35262 8B8F                      0000            .word	0
35263 8B91                      0000            .word	0
35264                                           ! 6804 } },
35265                                           ! 6805 { 0x0183,
35266 8B93                      0183            .word	$183
35267                                           ! 6806 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35268 8B95                      009B            .word	$9B
35269                                           ! 6807                           0x01 | 0x02 | 0x04,
35270 8B97                        07            .byte	7
35271                                           ! 6808                           0,
35272 8B98                        00            .byte	0
35273                                           ! 6809                           64,
35274 8B99                      0040            .word	$40
35275                                           ! 6810                    64,
35276 8B9B                      0040            .word	$40
35277                                           ! 6811                        0xA000,
35278 8B9D                      A000            .word	$A000
35279                                           ! 6812                        0x0000,
35280 8B9F                      0000            .word	0
35281                                           ! 6813                       0,
35282 8BA1                      0000            .word	0
35283 8BA3                      0000            .word	0
35284                                           ! 6814                             5600,
35285 8BA5                      15E0            .word	$15E0
35286                                           ! 6815                        1400,
35287 8BA7                      0578            .word	$578
35288                                           ! 6816                        1050,
35289 8BA9                      041A            .word	$41A
35290                                           ! 6817                      8,
35291 8BAB                        08            .byte	8
35292                                           ! 6818                      16,
35293 8BAC                        10            .byte	$10
35294                                           ! 6819                           1,
35295 8BAD                        01            .byte	1
35296                                           ! 6820                         32,
35297 8BAE                        20            .byte	$20
35298                                           ! 6821                          90,
35299 8BAF                        5A            .byte	$5A
35300                                           ! 6822                       
35301                                           ! 6822  0x06,
35302 8BB0                        06            .byte	6
35303                                           ! 6823                     0,
35304 8BB1                        00            .byte	0
35305                                           ! 6824                               1,
35306 8BB2                        01            .byte	1
35307                                           ! 6825                          0,
35308 8BB3                        00            .byte	0
35309                                           ! 6826                        8,
35310 8BB4                        08            .byte	8
35311                                           ! 6827                             16,
35312 8BB5                        10            .byte	$10
35313                                           ! 6828                          8,
35314 8BB6                        08            .byte	8
35315                                           ! 6829                               8,
35316 8BB7                        08            .byte	8
35317                                           ! 6830                         8,
35318 8BB8                        08            .byte	8
35319                                           ! 6831                              0,
35320 8BB9                        00            .byte	0
35321                                           ! 6832                         8,
35322 8BBA                        08            .byte	8
35323                                           ! 6833                              24,
35324 8BBB                        18            .byte	$18
35325                                           ! 6834                                0x02,
35326 8BBC                        02            .byte	2
35327                                           ! 6835                        0xE0000000,
35328 8BBD                      0000            .word	0
35329 8BBF                      E000            .word	$E000
35330                                           ! 6836                               0,
35331 8BC1                      0000            .word	0
35332 8BC3                      0000            .word	0
35333                                           ! 6837                             0,
35334 8BC5                      0000            .word	0
35335                                           ! 6838                                5600,
35336 8BC7                      15E0            .word	$15E0
35337                                           ! 6839                             0,
35338 8BC9                        00            .byte	0
35339                                           ! 6840                             0,
35340 8BCA                        00            .byte	0
35341                                           ! 6841                           8,
35342 8BCB                        08            .byte	8
35343                                           ! 6842                                16,
35344 8BCC                        10            .byte	$10
35345                                           ! 6843                             8,
35346 8BCD                        08            .byte	8
35347                                           ! 6844                                  8,
35348 8BCE                        08            .byte	8
35349                                           ! 6845                            8,
35350 8BCF                        08            .byte	8
35351                                           ! 6846                                 0,
35352 8BD0                        00            .byte	0
35353                                           ! 6847                            8,
35354 8BD1                        08            .byte	8
35355                                           ! 6848                                 24,
35356 8BD2                        18            .byte	$18
35357                                           ! 6849                          0,
35358 8BD3                      0000            .word	0
35359 8BD5                      0000            .word	0
35360                                           ! 6850 } },
35361                                           ! 6851 { 0x0184,
35362 8BD7                      0184            .word	$184
35363                                           ! 6852 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35364 8BD9                      009B            .word	$9B
35365                                           ! 6853                           0x01 | 0x02 | 0x04,
35366 8BDB                        07            .byte	7
35367                                           ! 6854                           0,
35368 8BDC                        00            .byte	0
35369                                           ! 6855                           64,
35370 8BDD                      0040            .word	$40
35371                                           ! 6856                    64,
35372 8BDF                      0040            .word	$40
35373                                           ! 6857                        0xA000,
35374 8BE1                      A000            .word	$A000
35375                                           ! 6858                        0x0000,
35376 8BE3                      0000            .word	0
35377                                           ! 6859                       0,
35378 8BE5                      0000            .word	0
35379 8BE7                      0000            .word	0
35380                                           ! 6860                             3360,
35381 8BE9                      0D20            .word	$D20
35382                                           ! 6861                        1680,
35383 8BEB                      0690            .word	$690
35384                                           ! 6862                        1050,
35385 8BED                      041A            .word	$41A
35386                                           ! 6863                      8,
35387 8BEF                        08            .byte	8
35388                                           ! 6864                      16,
35389 8BF0                        10            .byte	$10
35390                                           ! 6865                           1,
35391 8BF1                        01            .byte	1
35392                                           ! 6866                         16,
35393 8BF2                        10            .byte	$10
35394                                           ! 6867                          54,
35395 8BF3                        36            .byte	$36
35396                                           ! 6868                        0x06,
35397 8BF4                        06            .byte	6
35398                                           ! 6869                     0,
35399 8BF5                        00            .byte	0
35400                                           ! 6870                               3,
35401 8BF6                        03            .byte	3
35402                                           ! 6871                          0,
35403 8BF7                        00            .byte	0
35404                                           ! 6872                        5,
35405 8BF8                        05            .byte	5
35406                                           ! 6873                             11,
35407 8BF9                        0B            .byte	$B
35408                                           ! 6874                          6,
35409 8BFA                        06            .byte	6
35410                                           ! 6875                               5,
35411 8BFB                        05            .byte	5
35412                                           ! 6876                         5,
35413 8BFC                        05            .byte	5
35414                                           ! 6877                              0,
35415 8BFD                        00            .byte	0
35416                                           ! 6878                         0,
35417 8BFE                        00            .byte	0
35418                                           ! 6879                              0,
35419 8BFF                        00            .byte	0
35420                                           ! 6880                                0,
35421 8C00                        00            .byte	0
35422                                           ! 6881                        0xE0000000,
35423 8C01                      0000            .word	0
35424 8C03                      E000            .word	$E000
35425                                           ! 6882                               0,
35426 8C05                      0000            .word	0
35427 8C07                      0000            .word	0
35428                                           ! 6883                             0,
35429 8C09                      0000            .word	0
35430                                           ! 6884                                3360,
35431 8C0B                      0D20            .word	$D20
35432                                           ! 6885                             0,
35433 8C0D                        00            .byte	0
35434                                           ! 6886                             0,
35435 8C0E                        00            .byte	0
35436                                           ! 6887                           5,
35437 8C0F                        05            .byte	5
35438                                           ! 6888                                11,
35439 8C10                        0B            .byte	$B
35440                                           ! 6889                             6,
35441 8C11                        06            .byte	6
35442                                           ! 6890               
35443                                           ! 6890                    5,
35444 8C12                        05            .byte	5
35445                                           ! 6891                            5,
35446 8C13                        05            .byte	5
35447                                           ! 6892                                 0,
35448 8C14                        00            .byte	0
35449                                           ! 6893                            0,
35450 8C15                        00            .byte	0
35451                                           ! 6894                                 0,
35452 8C16                        00            .byte	0
35453                                           ! 6895                          0,
35454 8C17                      0000            .word	0
35455 8C19                      0000            .word	0
35456                                           ! 6896 } },
35457                                           ! 6897 { 0x0185,
35458 8C1B                      0185            .word	$185
35459                                           ! 6898 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35460 8C1D                      009B            .word	$9B
35461                                           ! 6899                           0x01 | 0x02 | 0x04,
35462 8C1F                        07            .byte	7
35463                                           ! 6900                           0,
35464 8C20                        00            .byte	0
35465                                           ! 6901                           64,
35466 8C21                      0040            .word	$40
35467                                           ! 6902                    64,
35468 8C23                      0040            .word	$40
35469                                           ! 6903                        0xA000,
35470 8C25                      A000            .word	$A000
35471                                           ! 6904                        0x0000,
35472 8C27                      0000            .word	0
35473                                           ! 6905                       0,
35474 8C29                      0000            .word	0
35475 8C2B                      0000            .word	0
35476                                           ! 6906                             5040,
35477 8C2D                      13B0            .word	$13B0
35478                                           ! 6907                        1680,
35479 8C2F                      0690            .word	$690
35480                                           ! 6908                        1050,
35481 8C31                      041A            .word	$41A
35482                                           ! 6909                      8,
35483 8C33                        08            .byte	8
35484                                           ! 6910                      16,
35485 8C34                        10            .byte	$10
35486                                           ! 6911                           1,
35487 8C35                        01            .byte	1
35488                                           ! 6912                         24,
35489 8C36                        18            .byte	$18
35490                                           ! 6913                          81,
35491 8C37                        51            .byte	$51
35492                                           ! 6914                        0x06,
35493 8C38                        06            .byte	6
35494                                           ! 6915                     0,
35495 8C39                        00            .byte	0
35496                                           ! 6916                               2,
35497 8C3A                        02            .byte	2
35498                                           ! 6917                          0,
35499 8C3B                        00            .byte	0
35500                                           ! 6918                        8,
35501 8C3C                        08            .byte	8
35502                                           ! 6919                             16,
35503 8C3D                        10            .byte	$10
35504                                           ! 6920                          8,
35505 8C3E                        08            .byte	8
35506                                           ! 6921                               8,
35507 8C3F                        08            .byte	8
35508                                           ! 6922                         8,
35509 8C40                        08            .byte	8
35510                                           ! 6923                              0,
35511 8C41                        00            .byte	0
35512                                           ! 6924                         0,
35513 8C42                        00            .byte	0
35514                                           ! 6925                              0,
35515 8C43                        00            .byte	0
35516                                           ! 6926                                0,
35517 8C44                        00            .byte	0
35518                                           ! 6927                        0xE0000000,
35519 8C45                      0000            .word	0
35520 8C47                      E000            .word	$E000
35521                                           ! 6928                               0,
35522 8C49                      0000            .word	0
35523 8C4B                      0000            .word	0
35524                                           ! 6929                             0,
35525 8C4D                      0000            .word	0
35526                                           ! 6930                                5040,
35527 8C4F                      13B0            .word	$13B0
35528                                           ! 6931                             0,
35529 8C51                        00            .byte	0
35530                                           ! 6932                             0,
35531 8C52                        00            .byte	0
35532                                           ! 6933                           8,
35533 8C53                        08            .byte	8
35534                                           ! 6934                                16,
35535 8C54                        10            .byte	$10
35536                                           ! 6935                             8,
35537 8C55                        08            .byte	8
35538                                           ! 6936                                  8,
35539 8C56                        08            .byte	8
35540                                           ! 6937                            8,
35541 8C57                        08            .byte	8
35542                                           ! 6938                                 0,
35543 8C58                        00            .byte	0
35544                                           ! 6939                            0,
35545 8C59                        00            .byte	0
35546                                           ! 6940                                 0,
35547 8C5A                        00            .byte	0
35548                                           ! 6941                          0,
35549 8C5B                      0000            .word	0
35550 8C5D                      0000            .word	0
35551                                           ! 6942 } },
35552                                           ! 6943 { 0x0186,
35553 8C5F                      0186            .word	$186
35554                                           ! 6944 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35555 8C61                      009B            .word	$9B
35556                                           ! 6945                           0x01 | 0x02 | 0x04,
35557 8C63                        07            .byte	7
35558                                           ! 6946                           0,
35559 8C64                        00            .byte	0
35560                                           ! 6947                           64,
35561 8C65                      0040            .word	$40
35562                                           ! 6948                    64,
35563 8C67                      0040            .word	$40
35564                                           ! 6949                        0xA000,
35565 8C69                      A000            .word	$A000
35566                                           ! 6950                        0x0000,
35567 8C6B                      0000            .word	0
35568                                           ! 6951                       0,
35569 8C6D                      0000            .word	0
35570 8C6F                      0000            .word	0
35571                                           ! 6952                             6720,
35572 8C71                      1A40            .word	$1A40
35573                                           ! 6953                        1680,
35574 8C73                      0690            .word	$690
35575                                           ! 6954                        1050,
35576 8C75                      041A            .word	$41A
35577                                           ! 6955                      8,
35578 8C77                        08            .byte	8
35579                                           ! 6956                      16,
35580 8C78                        10            .byte	$10
35581                                           ! 6957                           1,
35582 8C79                        01            .byte	1
35583                                           ! 6958                         32,
35584 8C7A                        20            .byte	$20
35585                                           ! 6959                     
35586                                           ! 6959      108,
35587 8C7B                        6C            .byte	$6C
35588                                           ! 6960                        0x06,
35589 8C7C                        06            .byte	6
35590                                           ! 6961                     0,
35591 8C7D                        00            .byte	0
35592                                           ! 6962                               1,
35593 8C7E                        01            .byte	1
35594                                           ! 6963                          0,
35595 8C7F                        00            .byte	0
35596                                           ! 6964                        8,
35597 8C80                        08            .byte	8
35598                                           ! 6965                             16,
35599 8C81                        10            .byte	$10
35600                                           ! 6966                          8,
35601 8C82                        08            .byte	8
35602                                           ! 6967                               8,
35603 8C83                        08            .byte	8
35604                                           ! 6968                         8,
35605 8C84                        08            .byte	8
35606                                           ! 6969                              0,
35607 8C85                        00            .byte	0
35608                                           ! 6970                         8,
35609 8C86                        08            .byte	8
35610                                           ! 6971                              24,
35611 8C87                        18            .byte	$18
35612                                           ! 6972                                0x02,
35613 8C88                        02            .byte	2
35614                                           ! 6973                        0xE0000000,
35615 8C89                      0000            .word	0
35616 8C8B                      E000            .word	$E000
35617                                           ! 6974                               0,
35618 8C8D                      0000            .word	0
35619 8C8F                      0000            .word	0
35620                                           ! 6975                             0,
35621 8C91                      0000            .word	0
35622                                           ! 6976                                6720,
35623 8C93                      1A40            .word	$1A40
35624                                           ! 6977                             0,
35625 8C95                        00            .byte	0
35626                                           ! 6978                             0,
35627 8C96                        00            .byte	0
35628                                           ! 6979                           8,
35629 8C97                        08            .byte	8
35630                                           ! 6980                                16,
35631 8C98                        10            .byte	$10
35632                                           ! 6981                             8,
35633 8C99                        08            .byte	8
35634                                           ! 6982                                  8,
35635 8C9A                        08            .byte	8
35636                                           ! 6983                            8,
35637 8C9B                        08            .byte	8
35638                                           ! 6984                                 0,
35639 8C9C                        00            .byte	0
35640                                           ! 6985                            8,
35641 8C9D                        08            .byte	8
35642                                           ! 6986                                 24,
35643 8C9E                        18            .byte	$18
35644                                           ! 6987                          0,
35645 8C9F                      0000            .word	0
35646 8CA1                      0000            .word	0
35647                                           ! 6988 } },
35648                                           ! 6989 { 0x0187,
35649 8CA3                      0187            .word	$187
35650                                           ! 6990 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35651 8CA5                      009B            .word	$9B
35652                                           ! 6991                           0x01 | 0x02 | 0x04,
35653 8CA7                        07            .byte	7
35654                                           ! 6992                           0,
35655 8CA8                        00            .byte	0
35656                                           ! 6993                           64,
35657 8CA9                      0040            .word	$40
35658                                           ! 6994                    64,
35659 8CAB                      0040            .word	$40
35660                                           ! 6995                        0xA000,
35661 8CAD                      A000            .word	$A000
35662                                           ! 6996                        0x0000,
35663 8CAF                      0000            .word	0
35664                                           ! 6997                       0,
35665 8CB1                      0000            .word	0
35666 8CB3                      0000            .word	0
35667                                           ! 6998                             3840,
35668 8CB5                      0F00            .word	$F00
35669                                           ! 6999                        1920,
35670 8CB7                      0780            .word	$780
35671                                           ! 7000                        1200,
35672 8CB9                      04B0            .word	$4B0
35673                                           ! 7001                      8,
35674 8CBB                        08            .byte	8
35675                                           ! 7002                      16,
35676 8CBC                        10            .byte	$10
35677                                           ! 7003                           1,
35678 8CBD                        01            .byte	1
35679                                           ! 7004                         16,
35680 8CBE                        10            .byte	$10
35681                                           ! 7005                          71,
35682 8CBF                        47            .byte	$47
35683                                           ! 7006                        0x06,
35684 8CC0                        06            .byte	6
35685                                           ! 7007                     0,
35686 8CC1                        00            .byte	0
35687                                           ! 7008                               2,
35688 8CC2                        02            .byte	2
35689                                           ! 7009                          0,
35690 8CC3                        00            .byte	0
35691                                           ! 7010                        5,
35692 8CC4                        05            .byte	5
35693                                           ! 7011                             11,
35694 8CC5                        0B            .byte	$B
35695                                           ! 7012                          6,
35696 8CC6                        06            .byte	6
35697                                           ! 7013                               5,
35698 8CC7                        05            .byte	5
35699                                           ! 7014                         5,
35700 8CC8                        05            .byte	5
35701                                           ! 7015                              0,
35702 8CC9                        00            .byte	0
35703                                           ! 7016                         0,
35704 8CCA                        00            .byte	0
35705                                           ! 7017                              0,
35706 8CCB                        00            .byte	0
35707                                           ! 7018                                0,
35708 8CCC                        00            .byte	0
35709                                           ! 7019                        0xE0000000,
35710 8CCD                      0000            .word	0
35711 8CCF                      E000            .word	$E000
35712                                           ! 7020                               0,
35713 8CD1                      0000            .word	0
35714 8CD3                      0000            .word	0
35715                                           ! 7021                             0,
35716 8CD5                      0000            .word	0
35717                                           ! 7022                                3840,
35718 8CD7                      0F00            .word	$F00
35719                                           ! 7023                             0,
35720 8CD9                        00            .byte	0
35721                                           ! 7024                             0,
35722 8CDA                        00            .byte	0
35723                                           ! 7025                           5,
35724 8CDB                        05            .byte	5
35725                                           ! 7026                                11,
35726 8CDC                        0B            .byte	$B
35727                                           ! 7027              
35728                                           ! 7027                6,
35729 8CDD                        06            .byte	6
35730                                           ! 7028                                  5,
35731 8CDE                        05            .byte	5
35732                                           ! 7029                            5,
35733 8CDF                        05            .byte	5
35734                                           ! 7030                                 0,
35735 8CE0                        00            .byte	0
35736                                           ! 7031                            0,
35737 8CE1                        00            .byte	0
35738                                           ! 7032                                 0,
35739 8CE2                        00            .byte	0
35740                                           ! 7033                          0,
35741 8CE3                      0000            .word	0
35742 8CE5                      0000            .word	0
35743                                           ! 7034 } },
35744                                           ! 7035 { 0x0188,
35745 8CE7                      0188            .word	$188
35746                                           ! 7036 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35747 8CE9                      009B            .word	$9B
35748                                           ! 7037                           0x01 | 0x02 | 0x04,
35749 8CEB                        07            .byte	7
35750                                           ! 7038                           0,
35751 8CEC                        00            .byte	0
35752                                           ! 7039                           64,
35753 8CED                      0040            .word	$40
35754                                           ! 7040                    64,
35755 8CEF                      0040            .word	$40
35756                                           ! 7041                        0xA000,
35757 8CF1                      A000            .word	$A000
35758                                           ! 7042                        0x0000,
35759 8CF3                      0000            .word	0
35760                                           ! 7043                       0,
35761 8CF5                      0000            .word	0
35762 8CF7                      0000            .word	0
35763                                           ! 7044                             5760,
35764 8CF9                      1680            .word	$1680
35765                                           ! 7045                        1920,
35766 8CFB                      0780            .word	$780
35767                                           ! 7046                        1200,
35768 8CFD                      04B0            .word	$4B0
35769                                           ! 7047                      8,
35770 8CFF                        08            .byte	8
35771                                           ! 7048                      16,
35772 8D00                        10            .byte	$10
35773                                           ! 7049                           1,
35774 8D01                        01            .byte	1
35775                                           ! 7050                         24,
35776 8D02                        18            .byte	$18
35777                                           ! 7051                          106,
35778 8D03                        6A            .byte	$6A
35779                                           ! 7052                        0x06,
35780 8D04                        06            .byte	6
35781                                           ! 7053                     0,
35782 8D05                        00            .byte	0
35783                                           ! 7054                               1,
35784 8D06                        01            .byte	1
35785                                           ! 7055                          0,
35786 8D07                        00            .byte	0
35787                                           ! 7056                        8,
35788 8D08                        08            .byte	8
35789                                           ! 7057                             16,
35790 8D09                        10            .byte	$10
35791                                           ! 7058                          8,
35792 8D0A                        08            .byte	8
35793                                           ! 7059                               8,
35794 8D0B                        08            .byte	8
35795                                           ! 7060                         8,
35796 8D0C                        08            .byte	8
35797                                           ! 7061                              0,
35798 8D0D                        00            .byte	0
35799                                           ! 7062                         0,
35800 8D0E                        00            .byte	0
35801                                           ! 7063                              0,
35802 8D0F                        00            .byte	0
35803                                           ! 7064                                0,
35804 8D10                        00            .byte	0
35805                                           ! 7065                        0xE0000000,
35806 8D11                      0000            .word	0
35807 8D13                      E000            .word	$E000
35808                                           ! 7066                               0,
35809 8D15                      0000            .word	0
35810 8D17                      0000            .word	0
35811                                           ! 7067                             0,
35812 8D19                      0000            .word	0
35813                                           ! 7068                                5760,
35814 8D1B                      1680            .word	$1680
35815                                           ! 7069                             0,
35816 8D1D                        00            .byte	0
35817                                           ! 7070                             0,
35818 8D1E                        00            .byte	0
35819                                           ! 7071                           8,
35820 8D1F                        08            .byte	8
35821                                           ! 7072                                16,
35822 8D20                        10            .byte	$10
35823                                           ! 7073                             8,
35824 8D21                        08            .byte	8
35825                                           ! 7074                                  8,
35826 8D22                        08            .byte	8
35827                                           ! 7075                            8,
35828 8D23                        08            .byte	8
35829                                           ! 7076                                 0,
35830 8D24                        00            .byte	0
35831                                           ! 7077                            0,
35832 8D25                        00            .byte	0
35833                                           ! 7078                                 0,
35834 8D26                        00            .byte	0
35835                                           ! 7079                          0,
35836 8D27                      0000            .word	0
35837 8D29                      0000            .word	0
35838                                           ! 7080 } },
35839                                           ! 7081 { 0x0189,
35840 8D2B                      0189            .word	$189
35841                                           ! 7082 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35842 8D2D                      009B            .word	$9B
35843                                           ! 7083                           0x01 | 0x02 | 0x04,
35844 8D2F                        07            .byte	7
35845                                           ! 7084                           0,
35846 8D30                        00            .byte	0
35847                                           ! 7085                           64,
35848 8D31                      0040            .word	$40
35849                                           ! 7086                    64,
35850 8D33                      0040            .word	$40
35851                                           ! 7087                        0xA000,
35852 8D35                      A000            .word	$A000
35853                                           ! 7088                        0x0000,
35854 8D37                      0000            .word	0
35855                                           ! 7089                       0,
35856 8D39                      0000            .word	0
35857 8D3B                      0000            .word	0
35858                                           ! 7090                             7680,
35859 8D3D                      1E00            .word	$1E00
35860                                           ! 7091                        1920,
35861 8D3F                      0780            .word	$780
35862                                           ! 7092                        1200,
35863 8D41                      04B0            .word	$4B0
35864                                           ! 7093                      8,
35865 8D43                        08            .byte	8
35866                                           ! 7094                      16,
35867 8D44                        10            .byte	$10
35868                                           ! 7095                           1,
35869 8D45                        01            .byte	1
35870                                           ! 7096                
35871                                           ! 7096          32,
35872 8D46                        20            .byte	$20
35873                                           ! 7097                          141,
35874 8D47                        8D            .byte	$8D
35875                                           ! 7098                        0x06,
35876 8D48                        06            .byte	6
35877                                           ! 7099                     0,
35878 8D49                        00            .byte	0
35879                                           ! 7100                               0,
35880 8D4A                        00            .byte	0
35881                                           ! 7101                          0,
35882 8D4B                        00            .byte	0
35883                                           ! 7102                        8,
35884 8D4C                        08            .byte	8
35885                                           ! 7103                             16,
35886 8D4D                        10            .byte	$10
35887                                           ! 7104                          8,
35888 8D4E                        08            .byte	8
35889                                           ! 7105                               8,
35890 8D4F                        08            .byte	8
35891                                           ! 7106                         8,
35892 8D50                        08            .byte	8
35893                                           ! 7107                              0,
35894 8D51                        00            .byte	0
35895                                           ! 7108                         8,
35896 8D52                        08            .byte	8
35897                                           ! 7109                              24,
35898 8D53                        18            .byte	$18
35899                                           ! 7110                                0x02,
35900 8D54                        02            .byte	2
35901                                           ! 7111                        0xE0000000,
35902 8D55                      0000            .word	0
35903 8D57                      E000            .word	$E000
35904                                           ! 7112                               0,
35905 8D59                      0000            .word	0
35906 8D5B                      0000            .word	0
35907                                           ! 7113                             0,
35908 8D5D                      0000            .word	0
35909                                           ! 7114                                7680,
35910 8D5F                      1E00            .word	$1E00
35911                                           ! 7115                             0,
35912 8D61                        00            .byte	0
35913                                           ! 7116                             0,
35914 8D62                        00            .byte	0
35915                                           ! 7117                           8,
35916 8D63                        08            .byte	8
35917                                           ! 7118                                16,
35918 8D64                        10            .byte	$10
35919                                           ! 7119                             8,
35920 8D65                        08            .byte	8
35921                                           ! 7120                                  8,
35922 8D66                        08            .byte	8
35923                                           ! 7121                            8,
35924 8D67                        08            .byte	8
35925                                           ! 7122                                 0,
35926 8D68                        00            .byte	0
35927                                           ! 7123                            8,
35928 8D69                        08            .byte	8
35929                                           ! 7124                                 24,
35930 8D6A                        18            .byte	$18
35931                                           ! 7125                          0,
35932 8D6B                      0000            .word	0
35933 8D6D                      0000            .word	0
35934                                           ! 7126 } },
35935                                           ! 7127 { 0x018a,
35936 8D6F                      018A            .word	$18A
35937                                           ! 7128 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35938 8D71                      009B            .word	$9B
35939                                           ! 7129                           0x01 | 0x02 | 0x04,
35940 8D73                        07            .byte	7
35941                                           ! 7130                           0,
35942 8D74                        00            .byte	0
35943                                           ! 7131                           64,
35944 8D75                      0040            .word	$40
35945                                           ! 7132                    64,
35946 8D77                      0040            .word	$40
35947                                           ! 7133                        0xA000,
35948 8D79                      A000            .word	$A000
35949                                           ! 7134                        0x0000,
35950 8D7B                      0000            .word	0
35951                                           ! 7135                       0,
35952 8D7D                      0000            .word	0
35953 8D7F                      0000            .word	0
35954                                           ! 7136                             5120,
35955 8D81                      1400            .word	$1400
35956                                           ! 7137                        2560,
35957 8D83                      0A00            .word	$A00
35958                                           ! 7138                        1600,
35959 8D85                      0640            .word	$640
35960                                           ! 7139                      8,
35961 8D87                        08            .byte	8
35962                                           ! 7140                      16,
35963 8D88                        10            .byte	$10
35964                                           ! 7141                           1,
35965 8D89                        01            .byte	1
35966                                           ! 7142                         16,
35967 8D8A                        10            .byte	$10
35968                                           ! 7143                          125,
35969 8D8B                        7D            .byte	$7D
35970                                           ! 7144                        0x06,
35971 8D8C                        06            .byte	6
35972                                           ! 7145                     0,
35973 8D8D                        00            .byte	0
35974                                           ! 7146                               1,
35975 8D8E                        01            .byte	1
35976                                           ! 7147                          0,
35977 8D8F                        00            .byte	0
35978                                           ! 7148                        5,
35979 8D90                        05            .byte	5
35980                                           ! 7149                             11,
35981 8D91                        0B            .byte	$B
35982                                           ! 7150                          6,
35983 8D92                        06            .byte	6
35984                                           ! 7151                               5,
35985 8D93                        05            .byte	5
35986                                           ! 7152                         5,
35987 8D94                        05            .byte	5
35988                                           ! 7153                              0,
35989 8D95                        00            .byte	0
35990                                           ! 7154                         0,
35991 8D96                        00            .byte	0
35992                                           ! 7155                              0,
35993 8D97                        00            .byte	0
35994                                           ! 7156                                0,
35995 8D98                        00            .byte	0
35996                                           ! 7157                        0xE0000000,
35997 8D99                      0000            .word	0
35998 8D9B                      E000            .word	$E000
35999                                           ! 7158                               0,
36000 8D9D                      0000            .word	0
36001 8D9F                      0000            .word	0
36002                                           ! 7159                             0,
36003 8DA1                      0000            .word	0
36004                                           ! 7160                                5120,
36005 8DA3                      1400            .word	$1400
36006                                           ! 7161                             0,
36007 8DA5                        00            .byte	0
36008                                           ! 7162                             0,
36009 8DA6                        00            .byte	0
36010                                           ! 7163                           5,
36011 8DA7                        05            .byte	5
36012                                           ! 7164               
36013                                           ! 7164                  11,
36014 8DA8                        0B            .byte	$B
36015                                           ! 7165                             6,
36016 8DA9                        06            .byte	6
36017                                           ! 7166                                  5,
36018 8DAA                        05            .byte	5
36019                                           ! 7167                            5,
36020 8DAB                        05            .byte	5
36021                                           ! 7168                                 0,
36022 8DAC                        00            .byte	0
36023                                           ! 7169                            0,
36024 8DAD                        00            .byte	0
36025                                           ! 7170                                 0,
36026 8DAE                        00            .byte	0
36027                                           ! 7171                          0,
36028 8DAF                      0000            .word	0
36029 8DB1                      0000            .word	0
36030                                           ! 7172 } },
36031                                           ! 7173 { 0x018b,
36032 8DB3                      018B            .word	$18B
36033                                           ! 7174 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36034 8DB5                      009B            .word	$9B
36035                                           ! 7175                           0x01 | 0x02 | 0x04,
36036 8DB7                        07            .byte	7
36037                                           ! 7176                           0,
36038 8DB8                        00            .byte	0
36039                                           ! 7177                           64,
36040 8DB9                      0040            .word	$40
36041                                           ! 7178                    64,
36042 8DBB                      0040            .word	$40
36043                                           ! 7179                        0xA000,
36044 8DBD                      A000            .word	$A000
36045                                           ! 7180                        0x0000,
36046 8DBF                      0000            .word	0
36047                                           ! 7181                       0,
36048 8DC1                      0000            .word	0
36049 8DC3                      0000            .word	0
36050                                           ! 7182                             7680,
36051 8DC5                      1E00            .word	$1E00
36052                                           ! 7183                        2560,
36053 8DC7                      0A00            .word	$A00
36054                                           ! 7184                        1600,
36055 8DC9                      0640            .word	$640
36056                                           ! 7185                      8,
36057 8DCB                        08            .byte	8
36058                                           ! 7186                      16,
36059 8DCC                        10            .byte	$10
36060                                           ! 7187                           1,
36061 8DCD                        01            .byte	1
36062                                           ! 7188                         24,
36063 8DCE                        18            .byte	$18
36064                                           ! 7189                          188,
36065 8DCF                        BC            .byte	$BC
36066                                           ! 7190                        0x06,
36067 8DD0                        06            .byte	6
36068                                           ! 7191                     0,
36069 8DD1                        00            .byte	0
36070                                           ! 7192                               0,
36071 8DD2                        00            .byte	0
36072                                           ! 7193                          0,
36073 8DD3                        00            .byte	0
36074                                           ! 7194                        8,
36075 8DD4                        08            .byte	8
36076                                           ! 7195                             16,
36077 8DD5                        10            .byte	$10
36078                                           ! 7196                          8,
36079 8DD6                        08            .byte	8
36080                                           ! 7197                               8,
36081 8DD7                        08            .byte	8
36082                                           ! 7198                         8,
36083 8DD8                        08            .byte	8
36084                                           ! 7199                              0,
36085 8DD9                        00            .byte	0
36086                                           ! 7200                         0,
36087 8DDA                        00            .byte	0
36088                                           ! 7201                              0,
36089 8DDB                        00            .byte	0
36090                                           ! 7202                                0,
36091 8DDC                        00            .byte	0
36092                                           ! 7203                        0xE0000000,
36093 8DDD                      0000            .word	0
36094 8DDF                      E000            .word	$E000
36095                                           ! 7204                               0,
36096 8DE1                      0000            .word	0
36097 8DE3                      0000            .word	0
36098                                           ! 7205                             0,
36099 8DE5                      0000            .word	0
36100                                           ! 7206                                7680,
36101 8DE7                      1E00            .word	$1E00
36102                                           ! 7207                             0,
36103 8DE9                        00            .byte	0
36104                                           ! 7208                             0,
36105 8DEA                        00            .byte	0
36106                                           ! 7209                           8,
36107 8DEB                        08            .byte	8
36108                                           ! 7210                                16,
36109 8DEC                        10            .byte	$10
36110                                           ! 7211                             8,
36111 8DED                        08            .byte	8
36112                                           ! 7212                                  8,
36113 8DEE                        08            .byte	8
36114                                           ! 7213                            8,
36115 8DEF                        08            .byte	8
36116                                           ! 7214                                 0,
36117 8DF0                        00            .byte	0
36118                                           ! 7215                            0,
36119 8DF1                        00            .byte	0
36120                                           ! 7216                                 0,
36121 8DF2                        00            .byte	0
36122                                           ! 7217                          0,
36123 8DF3                      0000            .word	0
36124 8DF5                      0000            .word	0
36125                                           ! 7218 } },
36126                                           ! 7219 { 0x018c,
36127 8DF7                      018C            .word	$18C
36128                                           ! 7220 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36129 8DF9                      009B            .word	$9B
36130                                           ! 7221                           0x01 | 0x02 | 0x04,
36131 8DFB                        07            .byte	7
36132                                           ! 7222                           0,
36133 8DFC                        00            .byte	0
36134                                           ! 7223                           64,
36135 8DFD                      0040            .word	$40
36136                                           ! 7224                    64,
36137 8DFF                      0040            .word	$40
36138                                           ! 7225                        0xA000,
36139 8E01                      A000            .word	$A000
36140                                           ! 7226                        0x0000,
36141 8E03                      0000            .word	0
36142                                           ! 7227                       0,
36143 8E05                      0000            .word	0
36144 8E07                      0000            .word	0
36145                                           ! 7228                             10240,
36146 8E09                      2800            .word	$2800
36147                                           ! 7229                        2560,
36148 8E0B                      0A00            .word	$A00
36149                                           ! 7230                        1600,
36150 8E0D                      0640            .word	$640
36151                                           ! 7231                      8,
36152 8E0F                        08            .byte	8
36153                                           ! 7232                      16,
36154 8E10                        10            .byte	$10
36155                                           ! 7233          
36156                                           ! 7233                  1,
36157 8E11                        01            .byte	1
36158                                           ! 7234                         32,
36159 8E12                        20            .byte	$20
36160                                           ! 7235                          250,
36161 8E13                        FA            .byte	$FA
36162                                           ! 7236                        0x06,
36163 8E14                        06            .byte	6
36164                                           ! 7237                     0,
36165 8E15                        00            .byte	0
36166                                           ! 7238                               0,
36167 8E16                        00            .byte	0
36168                                           ! 7239                          0,
36169 8E17                        00            .byte	0
36170                                           ! 7240                        8,
36171 8E18                        08            .byte	8
36172                                           ! 7241                             16,
36173 8E19                        10            .byte	$10
36174                                           ! 7242                          8,
36175 8E1A                        08            .byte	8
36176                                           ! 7243                               8,
36177 8E1B                        08            .byte	8
36178                                           ! 7244                         8,
36179 8E1C                        08            .byte	8
36180                                           ! 7245                              0,
36181 8E1D                        00            .byte	0
36182                                           ! 7246                         8,
36183 8E1E                        08            .byte	8
36184                                           ! 7247                              24,
36185 8E1F                        18            .byte	$18
36186                                           ! 7248                                0x02,
36187 8E20                        02            .byte	2
36188                                           ! 7249                        0xE0000000,
36189 8E21                      0000            .word	0
36190 8E23                      E000            .word	$E000
36191                                           ! 7250                               0,
36192 8E25                      0000            .word	0
36193 8E27                      0000            .word	0
36194                                           ! 7251                             0,
36195 8E29                      0000            .word	0
36196                                           ! 7252                                10240,
36197 8E2B                      2800            .word	$2800
36198                                           ! 7253                             0,
36199 8E2D                        00            .byte	0
36200                                           ! 7254                             0,
36201 8E2E                        00            .byte	0
36202                                           ! 7255                           8,
36203 8E2F                        08            .byte	8
36204                                           ! 7256                                16,
36205 8E30                        10            .byte	$10
36206                                           ! 7257                             8,
36207 8E31                        08            .byte	8
36208                                           ! 7258                                  8,
36209 8E32                        08            .byte	8
36210                                           ! 7259                            8,
36211 8E33                        08            .byte	8
36212                                           ! 7260                                 0,
36213 8E34                        00            .byte	0
36214                                           ! 7261                            8,
36215 8E35                        08            .byte	8
36216                                           ! 7262                                 24,
36217 8E36                        18            .byte	$18
36218                                           ! 7263                          0,
36219 8E37                      0000            .word	0
36220 8E39                      0000            .word	0
36221                                           ! 7264 } },
36222                                           ! 7265 { 0xFFFF,
36223 8E3B                      FFFF            .word	$FFFF
36224                                           ! 7266 { 0,
36225 8E3D                      0000            .word	0
36226                                           ! 7267 } },
36227 8E3F                  00000040            .blkb	$40
36228                                           ! 7268 };
36229                                           !BCC_EOS
36230                                           ! 7269 extern char vbebios_copyright;
36231                                           !BCC_EOS
36232                                           ! 7270 extern char vbebios_vendor_name;
36233                                           !BCC_EOS
36234                                           ! 7271 extern char vbebios_product_name;
36235                                           !BCC_EOS
36236                                           ! 7272 extern char vbebios_product_revision;
36237                                           !BCC_EOS
36238                                           ! 7273 #asm
36239                                           !BCC_ASM
36240                       00008E7F            _vbebios_copyright:
36241 8E7F                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36242 8EC4                        00            .byte 0x00
36243                       00008EC5            _vbebios_vendor_name:
36244 8EC5                        42            .ascii "Bochs/Plex86 Developers"
36245 8EDC                        00            .byte 0x00
36246                       00008EDD            _vbebios_product_name:
36247 8EDD                        42            .ascii "Bochs/Plex86 VBE Adapter"
36248 8EF5                        00            .byte 0x00
36249                       00008EF6            _vbebios_product_revision:
36250 8EF6                        24            .ascii "$Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36251 8F2A                        00            .byte 0x00
36252                       00008F2B            _vbebios_info_string:
36253 8F2B                        42            .ascii "Bochs VBE Display Adapter enabled"
36254 8F4C                        0A            .byte 0x0a,0x0d
36255 8F4E                        0A            .byte 0x0a,0x0d
36256 8F50                        00            .byte 0x00
36257                       00008F51            _no_vbebios_info_string:
36258 8F51                        4E            .ascii "NO Bochs VBE Support available!"
36259 8F70                        0A            .byte 0x0a,0x0d
36260 8F72                        0A            .byte 0x0a,0x0d
36261 8F74                        00            .byte 0x00
36262                       00008F75            msg_vbe_init:
36263 8F75                        56            .ascii "VBE Bios $Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36264 8FB2                        0A            .byte 0x0a,0x0d, 0x00
36265 8FB5                  00000002              .align 2
36266                       00008FB6            vesa_pm_start:
36267 8FB6                      0014              dw vesa_pm_set_window - vesa_pm_start
36268 8FB8                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36269 8FBA                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36270 8FBC                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36271                       00008FBE            vesa_pm_io_ports_table:
36272 8FBE                      01CE              dw 0x01CE
36273 8FC0                      01CF              dw 0x01CE + 1
36274 8FC2                      01CF              dw 0x01CF
36275 8FC4                      01D0              dw 0x01CF + 1
36276 8FC6                      FFFF              dw 0xffff
36277 8FC8                      FFFF              dw 0xffff
36278                                             USE32
36279                       00008FCA            vesa_pm_set_window:
36280 8FCA     66    83FB                   00    cmp bx, #0x00
36281 8FCE           74           05              je vesa_pm_set_display_window1
36282 8FD0     66    B8                   0100    mov ax, #0x0100
36283 8FD4           C3                           ret
36284                       00008FD5            vesa_pm_set_display_window1:
36285 8FD5     66    89D0                         mov ax, dx
36286 8FD8     66    52                           push dx
36287 8FDA     66    50                           push ax
36288 8FDC     66    BA                   01CE    mov dx, # 0x01CE
36289 8FE0     66    B8                   0005    mov ax, # 0x5
36290 8FE4     66    EF                           out dx, ax
36291 8FE6     66    58                           pop ax
36292 8FE8     66    BA                   01CF    mov dx, # 0x01CF
36293 8FEC     66    EF                           out dx, ax
36294 8FEE     66    ED                           in ax, dx
36295 8FF0     66    5A                           pop dx
36296 8FF2     66    39C2                         cmp dx, ax
36297 8FF5           75           05              jne illegal_window
36298 8FF7     66    B8                   004F    mov ax, #0x004f
36299 8FFB           C3                           ret
36300                       00008FFC            illegal_window:
36301 8FFC     66    B8                   014F    mov ax, #0x014f
36302 9000           C3                           ret
36303                       00009001            vesa_pm_set_display_start:
36304 9001           80FB                   80    cmp bl, #0x80
36305 9004           74           0A              je vesa_pm_set_display_start1
36306 9006           80FB                   00    cmp bl, #0x00
36307 9009           74           05              je vesa_pm_set_display_start1
36308 900B     66    B8                   0100    mov ax, #0x0100
36309 900F           C3                           ret
36310                       00009010            vesa_pm_set_display_start1:
36311                                           ; convert offset to (X, Y) coordinate
36312                                           ; (would be simpler to change Bochs 1 API...)
36313 9010           50                           push eax
36314 9011           51                           push ecx
36315 9012           52                           push edx
36316 9013           56                           push esi
36317 9014           57                           push edi
36318 9015           C1E2                   10    shl edx, #16
36319 9018           81E1             0000FFFF    and ecx, #0xffff
36320 901E           09D1                         or ecx, edx
36321 9020           C1E1                   02    shl ecx, #2
36322 9023           89C8                         mov eax, ecx
36323 9025           50                           push eax
36324 9026     66    BA                   01CE    mov dx, # 0x01CE
36325 902A     66    B8                   0006    mov ax, # 0x6
36326 902E     66    EF                           out dx, ax
36327 9030     66    BA                   01CF    mov dx, # 0x01CF
36328 9034     66    ED                           in ax, dx
36329 9036         0FB7C8                         movzx ecx, ax
36330 9039     66    BA                   01CE    mov dx, # 0x01CE
36331 903D     66    B8                   0003    mov ax, # 0x3
36332 9041     66    EF                           out dx, ax
36333 9043     66    BA                   01CF    mov dx, # 0x01CF
36334 9047     66    ED                           in ax, dx
36335 9049         0FB7F0                         movzx esi, ax
36336 904C           58                           pop eax
36337 904D           83FE                   04    cmp esi, #4
36338 9050           74           17              jz bpp4_mode
36339 9052           83C6                   07    add esi, #7
36340 9055           C1EE                   03    shr esi, #3
36341 9058         0FAFCE                         imul ecx, esi
36342 905B           31D2                         xor edx, edx
36343 905D           F7F1                         div ecx
36344 905F           89C7                         mov edi, eax
36345 9061           89D0                         mov eax, edx
36346 9063           31D2                         xor edx, edx
36347 9065           F7F6                         div esi
36348 9067           EB           0C              jmp set_xy_regs
36349                       00009069            bpp4_mode:
36350 9069           D1E9                         shr ecx, #1
36351 906B           31D2                         xor edx, edx
36352 906D           F7F1                         div ecx
36353 906F           89C7                         mov edi, eax
36354 9071           89D0                         mov eax, edx
36355 9073           D1E0                         shl eax, #1
36356                       00009075            set_xy_regs:
36357 9075     66    52                           push dx
36358 9077     66    50                           push ax
36359 9079     66    BA                   01CE    mov dx, # 0x01CE
36360 907D     66    B8                   0008    mov ax, # 0x8
36361 9081     66    EF                           out dx, ax
36362 9083     66    58                           pop ax
36363 9085     66    BA                   01CF    mov dx, # 0x01CF
36364 9089     66    EF                           out dx, ax
36365 908B     66    5A                           pop dx
36366 908D     66    89F8                         mov ax, di
36367 9090     66    52                           push dx
36368 9092     66    50                           push ax
36369 9094     66    BA                   01CE    mov dx, # 0x01CE
36370 9098     66    B8                   0009    mov ax, # 0x9
36371 909C     66    EF                           out dx, ax
36372 909E     66    58                           pop ax
36373 90A0     66    BA                   01CF    mov dx, # 0x01CF
36374 90A4     66    EF                           out dx, ax
36375 90A6     66    5A                           pop dx
36376 90A8           5F                           pop edi
36377 90A9           5E                           pop esi
36378 90AA           5A                           pop edx
36379 90AB           59                           pop ecx
36380 90AC           58                           pop eax
36381 90AD     66    B8                   004F    mov ax, #0x004f
36382 90B1           C3                           ret
36383                       000090B2            vesa_pm_unimplemented:
36384 90B2     66    B8                   014F    mov ax, #0x014f
36385 90B6           C3                           ret
36386                                             USE16
36387                       000090B7            vesa_pm_end:
36388                                           ; DISPI ioport functions
36389                       000090B7            dispi_get_id:
36390 90B7           52                           push dx
36391 90B8           BA                   01CE    mov dx, # 0x01CE
36392 90BB           B8                   0000    mov ax, # 0x0
36393 90BE           EF                           out dx, ax
36394 90BF           BA                   01CF    mov dx, # 0x01CF
36395 90C2           ED                           in ax, dx
36396 90C3           5A                           pop dx
36397 90C4           C3                           ret
36398                       000090C5            dispi_set_id:
36399 90C5           52                           push dx
36400 90C6           50                           push ax
36401 90C7           BA                   01CE    mov dx, # 0x01CE
36402 90CA           B8                   0000    mov ax, # 0x0
36403 90CD           EF                           out dx, ax
36404 90CE           58                           pop ax
36405 90CF           BA                   01CF    mov dx, # 0x01CF
36406 90D2           EF                           out dx, ax
36407 90D3           5A                           pop dx
36408 90D4           C3                           ret
36409                                           ! 7443 endasm
36410                                           !BCC_ENDASM
36411                                           ! 7444 static void dispi_set_xres(xres)
36412                                           ! 7445   Bit16u xres;
36413                                           
36414                       000090D5            _dispi_set_xres:
36415                                           !BCC_EOS
36416                                           ! 7446 {
36417                                           ! 7447 #asm
36418                                           !BCC_ASM
36419                       00000002            _dispi_set_xres.xres	set	2
36420 90D5           55                           push bp
36421 90D6           89E5                         mov bp, sp
36422 90D8           50                           push ax
36423 90D9           52                           push dx
36424 90DA           BA                   01CE    mov dx, # 0x01CE
36425 90DD           B8                   0001    mov ax, # 0x1
36426 90E0           EF                           out dx, ax
36427 90E1           BA                   01CF    mov dx, # 0x01CF
36428 90E4           8B46         04              mov ax, 4[bp] ; xres
36429 90E7           EF                           out dx, ax
36430 90E8           5A                           pop dx
36431 90E9           58                           pop ax
36432 90EA           5D                           pop bp
36433                                           ! 7461 endasm
36434                                           !BCC_ENDASM
36435                                           ! 7462 }
36436 90EB           C3                         ret
36437                                           ! 7463 static void dispi_set_yres(yres)
36438                                           ! 7464   Bit16u yres;
36439                       000090EC            _dispi_set_yres:
36440                                           !BCC_EOS
36441                                           ! 7465 {
36442                                           ! 7466   outw(0x01CE,0x2);
36443 90EC           55                         push	bp
36444 90ED           89E5                       mov	bp,sp
36445                                           ! Debug: list int = const 2 (used reg = )
36446 90EF           B8                   0002  mov	ax,*2
36447 90F2           50                         push	ax
36448                                           ! Debug: list int = const $1CE (used reg = )
36449 90F3           B8                   01CE  mov	ax,#$1CE
36450 90F6           50                         push	ax
36451                                           ! Debug: func () void = outw+0 (used reg = )
36452 90F7           E8         EB63            call	_outw
36453 90FA           89EC                       mov	sp,bp
36454                                           !BCC_EOS
36455                                           ! 7467   outw(0x01CF,yres);
36456                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36457 90FC           FF76         04            push	4[bp]
36458                                           ! Debug: list int = const $1CF (used reg = )
36459 90FF           B8                   01CF  mov	ax,#$1CF
36460 9102           50                         push	ax
36461                                           ! Debug: func () void = outw+0 (used reg = )
36462 9103           E8         EB57            call	_outw
36463 9106           89EC                       mov	sp,bp
36464                                           !BCC_EOS
36465                                           ! 7468 }
36466 9108           5D                         pop	bp
36467 9109           C3                         ret
36468                                           ! 7469 static void dispi_set_bpp(bpp)
36469                                           ! 7470   Bit16u bpp;
36470                       0000910A            _dispi_set_bpp:
36471                                           !BCC_EOS
36472                                           ! 7471 {
36473                                           ! 7472   outw(0x01CE,0x3);
36474 910A           55                         push	bp
36475 910B           89E5                       mov	bp,sp
36476                                           ! Debug: list int = const 3 (used reg = )
36477 910D           B8                   0003  mov	ax,*3
36478 9110           50                         push	ax
36479                                           ! Debug: list int = const $1CE (used reg = )
36480 9111           B8                   01CE  mov	ax,#$1CE
36481 9114           50                         push	ax
36482                                           ! Debug: func () void = outw+0 (used reg = )
36483 9115           E8         EB45            call	_outw
36484 9118           89EC                       mov	sp,bp
36485                                           !BCC_EOS
36486                                           ! 7473   outw(0x01CF,bpp);
36487                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36488 911A           FF76         04            push	4[bp]
36489                                           ! Debug: list int = const $1CF (used reg = )
36490 911D           B8                   01CF  mov	ax,#$1CF
36491 9120           50                         push	ax
36492                                           ! Debug: func () void = outw+0 (used reg = )
36493 9121           E8         EB39            call	_outw
36494 9124           89EC                       mov	sp,bp
36495                                           !BCC_EOS
36496                                           ! 7474 }
36497 9126           5D                         pop	bp
36498 9127           C3                         ret
36499                                           ! 7475 #asm
36500                                           !BCC_ASM
36501                       00000002            _dispi_set_bpp.bpp	set	2
36502                                           ; AL = bits per pixel / AH = bytes per pixel
36503                       00009128            dispi_get_bpp:
36504 9128           52                           push dx
36505 9129           BA                   01CE    mov dx, # 0x01CE
36506 912C           B8                   0003    mov ax, # 0x3
36507 912F           EF                           out dx, ax
36508 9130           BA                   01CF    mov dx, # 0x01CF
36509 9133           ED                           in ax, dx
36510 9134           88C4                         mov ah, al
36511 9136           C0EC                   03    shr ah, 3
36512 9139           A8                     07    test al, #0x07
36513 913B           74           02              jz get_bpp_noinc
36514 913D           FEC4                         inc ah
36515                       0000913F            get_bpp_noinc:
36516 913F           5A                           pop dx
36517 9140           C3                           ret
36518                                           ; get display capabilities
36519                       00009141            _dispi_get_max_xres:
36520 9141           52                           push dx
36521 9142           53                           push bx
36522 9143           E8         004F              call dispi_get_enable
36523 9146           89C3                         mov bx, ax
36524 9148           0D                   0002    or ax, # 0x02
36525 914B           E8         0037              call _dispi_set_enable
36526 914E           BA                   01CE    mov dx, # 0x01CE
36527 9151           B8                   0001    mov ax, # 0x1
36528 9154           EF                           out dx, ax
36529 9155           BA                   01CF    mov dx, # 0x01CF
36530 9158           ED                           in ax, dx
36531 9159           50                           push ax
36532 915A           89D8                         mov ax, bx
36533 915C           E8         0026              call _dispi_set_enable
36534 915F           58                           pop ax
36535 9160           5B                           pop bx
36536 9161           5A                           pop dx
36537 9162           C3                           ret
36538                       00009163            _dispi_get_max_bpp:
36539 9163           52                           push dx
36540 9164           53                           push bx
36541 9165           E8         002D              call dispi_get_enable
36542 9168           89C3                         mov bx, ax
36543 916A           0D                   0002    or ax, # 0x02
36544 916D           E8         0015              call _dispi_set_enable
36545 9170           BA                   01CE    mov dx, # 0x01CE
36546 9173           B8                   0003    mov ax, # 0x3
36547 9176           EF                           out dx, ax
36548 9177           BA                   01CF    mov dx, # 0x01CF
36549 917A           ED                           in ax, dx
36550 917B           50                           push ax
36551 917C           89D8                         mov ax, bx
36552 917E           E8         0004              call _dispi_set_enable
36553 9181           58                           pop ax
36554 9182           5B                           pop bx
36555 9183           5A                           pop dx
36556 9184           C3                           ret
36557                       00009185            _dispi_set_enable:
36558 9185           52                           push dx
36559 9186           50                           push ax
36560 9187           BA                   01CE    mov dx, # 0x01CE
36561 918A           B8                   0004    mov ax, # 0x4
36562 918D           EF                           out dx, ax
36563 918E           58                           pop ax
36564 918F           BA                   01CF    mov dx, # 0x01CF
36565 9192           EF                           out dx, ax
36566 9193           5A                           pop dx
36567 9194           C3                           ret
36568                       00009195            dispi_get_enable:
36569 9195           52                           push dx
36570 9196           BA                   01CE    mov dx, # 0x01CE
36571 9199           B8                   0004    mov ax, # 0x4
36572 919C           EF                           out dx, ax
36573 919D           BA                   01CF    mov dx, # 0x01CF
36574 91A0           ED                           in ax, dx
36575 91A1           5A                           pop dx
36576 91A2           C3                           ret
36577                       000091A3            _dispi_set_bank:
36578 91A3           52                           push dx
36579 91A4           50                           push ax
36580 91A5           BA                   01CE    mov dx, # 0x01CE
36581 91A8           B8                   0005    mov ax, # 0x5
36582 91AB           EF                           out dx, ax
36583 91AC           58                           pop ax
36584 91AD           BA                   01CF    mov dx, # 0x01CF
36585 91B0           EF                           out dx, ax
36586 91B1           5A                           pop dx
36587 91B2           C3                           ret
36588                       000091B3            dispi_get_bank:
36589 91B3           52                           push dx
36590 91B4           BA                   01CE    mov dx, # 0x01CE
36591 91B7           B8                   0005    mov ax, # 0x5
36592 91BA           EF                           out dx, ax
36593 91BB           BA                   01CF    mov dx, # 0x01CF
36594 91BE           ED                           in ax, dx
36595 91BF           5A                           pop dx
36596 91C0           C3                           ret
36597                                           ! 7571 endasm
36598                                           !BCC_ENDASM
36599                                           ! 7572 static void dispi_set_bank_farcall()
36600                                           ! 7573 {
36601                       000091C1            _dispi_set_bank_farcall:
36602                                           ! 7574 #asm
36603                                           !BCC_ASM
36604 91C1           81FB                 0100    cmp bx,#0x0100
36605 91C5           74           1E              je dispi_set_bank_farcall_get
36606 91C7           09DB                         or bx,bx
36607 91C9           75           28              jnz dispi_set_bank_farcall_error
36608 91CB           89D0                         mov ax,dx
36609 91CD           52                           push dx
36610 91CE           50                           push ax
36611 91CF           B8                   0005    mov ax,# 0x5
36612 91D2           BA                   01CE    mov dx,# 0x01CE
36613 91D5           EF                           out dx,ax
36614 91D6           58                           pop ax
36615 91D7           BA                   01CF    mov dx,# 0x01CF
36616 91DA           EF                           out dx,ax
36617 91DB           ED                           in ax,dx
36618 91DC           5A                           pop dx
36619 91DD           39C2                         cmp dx,ax
36620 91DF           75           12              jne dispi_set_bank_farcall_error
36621 91E1           B8                   004F    mov ax, #0x004f
36622 91E4           CB                           retf
36623                       000091E5            dispi_set_bank_farcall_get:
36624 91E5           B8                   0005    mov ax,# 0x5
36625 91E8           BA                   01CE    mov dx,# 0x01CE
36626 91EB           EF                           out dx,ax
36627 91EC           BA                   01CF    mov dx,# 0x01CF
36628 91EF           ED                           in ax,dx
36629 91F0           89C2                         mov dx,ax
36630 91F2           CB                           retf
36631                       000091F3            dispi_set_bank_farcall_error:
36632 91F3           B8                   014F    mov ax,#0x014F
36633 91F6           CB                           retf
36634                                           ! 7605 endasm
36635                                           !BCC_ENDASM
36636                                           ! 7606 }
36637 91F7           C3                         ret
36638                                           ! 7607 #asm
36639                                           !BCC_ASM
36640                       000091F8            dispi_set_x_offset:
36641 91F8           52                           push dx
36642 91F9           50                           push ax
36643 91FA           BA                   01CE    mov dx, # 0x01CE
36644 91FD           B8                   0008    mov ax, # 0x8
36645 9200           EF                           out dx, ax
36646 9201           58                           pop ax
36647 9202           BA                   01CF    mov dx, # 0x01CF
36648 9205           EF                           out dx, ax
36649 9206           5A                           pop dx
36650 9207           C3                           ret
36651                       00009208            dispi_get_x_offset:
36652 9208           52                           push dx
36653 9209           BA                   01CE    mov dx, # 0x01CE
36654 920C           B8                   0008    mov ax, # 0x8
36655 920F           EF                           out dx, ax
36656 9210           BA                   01CF    mov dx, # 0x01CF
36657 9213           ED                           in ax, dx
36658 9214           5A                           pop dx
36659 9215           C3                           ret
36660                       00009216            dispi_set_y_offset:
36661 9216           52                           push dx
36662 9217           50                           push ax
36663 9218           BA                   01CE    mov dx, # 0x01CE
36664 921B           B8                   0009    mov ax, # 0x9
36665 921E           EF                           out dx, ax
36666 921F           58                           pop ax
36667 9220           BA                   01CF    mov dx, # 0x01CF
36668 9223           EF                           out dx, ax
36669 9224           5A                           pop dx
36670 9225           C3                           ret
36671                       00009226            dispi_get_y_offset:
36672 9226           52                           push dx
36673 9227           BA                   01CE    mov dx, # 0x01CE
36674 922A           B8                   0009    mov ax, # 0x9
36675 922D           EF                           out dx, ax
36676 922E           BA                   01CF    mov dx, # 0x01CF
36677 9231           ED                           in ax, dx
36678 9232           5A                           pop dx
36679 9233           C3                           ret
36680                       00009234            vga_set_virt_width:
36681 9234           50                           push ax
36682 9235           53                           push bx
36683 9236           52                           push dx
36684 9237           89C3                         mov bx, ax
36685 9239           E8         FEEC              call dispi_get_bpp
36686 923C           3C                     04    cmp al, #0x04
36687 923E           77           02              ja set_width_svga
36688 9240           D1EB                         shr bx, #1
36689                       00009242            set_width_svga:
36690 9242           C1EB                   03    shr bx, #3
36691 9245           BA                   03D4    mov dx, # 0x3d4
36692 9248           88DC                         mov ah, bl
36693 924A           B0                     13    mov al, #0x13
36694 924C           EF                           out dx, ax
36695 924D           5A                           pop dx
36696 924E           5B                           pop bx
36697 924F           58                           pop ax
36698 9250           C3                           ret
36699                       00009251            dispi_set_virt_width:
36700 9251           E8         FFE0              call vga_set_virt_width
36701 9254           52                           push dx
36702 9255           50                           push ax
36703 9256           BA                   01CE    mov dx, # 0x01CE
36704 9259           B8                   0006    mov ax, # 0x6
36705 925C           EF                           out dx, ax
36706 925D           58                           pop ax
36707 925E           BA                   01CF    mov dx, # 0x01CF
36708 9261           EF                           out dx, ax
36709 9262           5A                           pop dx
36710 9263           C3                           ret
36711                       00009264            dispi_get_virt_width:
36712 9264           52                           push dx
36713 9265           BA                   01CE    mov dx, # 0x01CE
36714 9268           B8                   0006    mov ax, # 0x6
36715 926B           EF                           out dx, ax
36716 926C           BA                   01CF    mov dx, # 0x01CF
36717 926F           ED                           in ax, dx
36718 9270           5A                           pop dx
36719 9271           C3                           ret
36720                       00009272            dispi_get_virt_height:
36721 9272           52                           push dx
36722 9273           BA                   01CE    mov dx, # 0x01CE
36723 9276           B8                   0007    mov ax, # 0x7
36724 9279           EF                           out dx, ax
36725 927A           BA                   01CF    mov dx, # 0x01CF
36726 927D           ED                           in ax, dx
36727 927E           5A                           pop dx
36728 927F           C3                           ret
36729                       00009280            _vga_compat_setup:
36730 9280           50                           push ax
36731 9281           52                           push dx
36732                                             ; set CRT X resolution
36733 9282           BA                   01CE    mov dx, # 0x01CE
36734 9285           B8                   0001    mov ax, # 0x1
36735 9288           EF                           out dx, ax
36736 9289           BA                   01CF    mov dx, # 0x01CF
36737 928C           ED                           in ax, dx
36738 928D           50                           push ax
36739 928E           BA                   03D4    mov dx, # 0x3d4
36740 9291           B8                   0011    mov ax, #0x0011
36741 9294           EF                           out dx, ax
36742 9295           58                           pop ax
36743 9296           50                           push ax
36744 9297           C1E8                   03    shr ax, #3
36745 929A           48                           dec ax
36746 929B           88C4                         mov ah, al
36747 929D           B0                     01    mov al, #0x01
36748 929F           EF                           out dx, ax
36749 92A0           58                           pop ax
36750 92A1           E8         FF90              call vga_set_virt_width
36751                                             ; set CRT Y resolution
36752 92A4           BA                   01CE    mov dx, # 0x01CE
36753 92A7           B8                   0002    mov ax, # 0x2
36754 92AA           EF                           out dx, ax
36755 92AB           BA                   01CF    mov dx, # 0x01CF
36756 92AE           ED                           in ax, dx
36757 92AF           48                           dec ax
36758 92B0           50                           push ax
36759 92B1           BA                   03D4    mov dx, # 0x3d4
36760 92B4           88C4                         mov ah, al
36761 92B6           B0                     12    mov al, #0x12
36762 92B8           EF                           out dx, ax
36763 92B9           58                           pop ax
36764 92BA           B0                     07    mov al, #0x07
36765 92BC           EE                           out dx, al
36766 92BD           42                           inc dx
36767 92BE           EC                           in al, dx
36768 92BF           24                     BD    and al, #0xbd
36769 92C1           F6C4                   01    test ah, #0x01
36770 92C4           74           02              jz bit8_clear
36771 92C6           0C                     02    or al, #0x02
36772                       000092C8            bit8_clear:
36773 92C8           F6C4                   02    test ah, #0x02
36774 92CB           74           02              jz bit9_clear
36775 92CD           0C                     40    or al, #0x40
36776                       000092CF            bit9_clear:
36777 92CF           EE                           out dx, al
36778                                             ; other settings
36779 92D0           BA                   03D4    mov dx, # 0x3d4
36780 92D3           B8                   0009    mov ax, #0x0009
36781 92D6           EF                           out dx, ax
36782 92D7           B0                     17    mov al, #0x17
36783 92D9           EE                           out dx, al
36784 92DA           BA                   03D5    mov dx, # 0x3d5
36785 92DD           EC                           in al, dx
36786 92DE           0C                     03    or al, #0x03
36787 92E0           EE                           out dx, al
36788 92E1           BA                   03DA    mov dx, # 0x3da
36789 92E4           EC                           in al, dx
36790 92E5           BA                   03C0    mov dx, # 0x3c0
36791 92E8           B0                     10    mov al, #0x10
36792 92EA           EE                           out dx, al
36793 92EB           BA                   03C1    mov dx, # 0x3c1
36794 92EE           EC                           in al, dx
36795 92EF           0C                     01    or al, #0x01
36796 92F1           BA                   03C0    mov dx, # 0x3c0
36797 92F4           EE                           out dx, al
36798 92F5           B0                     20    mov al, #0x20
36799 92F7           EE                           out dx, al
36800 92F8           BA                   03CE    mov dx, # 0x3ce
36801 92FB           B8                   0506    mov ax, #0x0506
36802 92FE           EF                           out dx, ax
36803 92FF           BA                   03C4    mov dx, # 0x3c4
36804 9302           B8                   0F02    mov ax, #0x0f02
36805 9305           EF                           out dx, ax
36806                                             ; settings for >= 8bpp
36807 9306           BA                   01CE    mov dx, # 0x01CE
36808 9309           B8                   0003    mov ax, # 0x3
36809 930C           EF                           out dx, ax
36810 930D           BA                   01CF    mov dx, # 0x01CF
36811 9310           ED                           in ax, dx
36812 9311           3C                     08    cmp al, #0x08
36813 9313           72           40              jb vga_compat_end
36814 9315           BA                   03D4    mov dx, # 0x3d4
36815 9318           B0                     14    mov al, #0x14
36816 931A           EE                           out dx, al
36817 931B           BA                   03D5    mov dx, # 0x3d5
36818 931E           EC                           in al, dx
36819 931F           0C                     40    or al, #0x40
36820 9321           EE                           out dx, al
36821 9322           BA                   03DA    mov dx, # 0x3da
36822 9325           EC                           in al, dx
36823 9326           BA                   03C0    mov dx, # 0x3c0
36824 9329           B0                     10    mov al, #0x10
36825 932B           EE                           out dx, al
36826 932C           BA                   03C1    mov dx, # 0x3c1
36827 932F           EC                           in al, dx
36828 9330           0C                     40    or al, #0x40
36829 9332           BA                   03C0    mov dx, # 0x3c0
36830 9335           EE                           out dx, al
36831 9336           B0                     20    mov al, #0x20
36832 9338           EE                           out dx, al
36833 9339           BA                   03C4    mov dx, # 0x3c4
36834 933C           B0                     04    mov al, #0x04
36835 933E           EE                           out dx, al
36836 933F           BA                   03C5    mov dx, # 0x3c5
36837 9342           EC                           in al, dx
36838 9343           0C                     08    or al, #0x08
36839 9345           EE                           out dx, al
36840 9346           BA                   03CE    mov dx, # 0x3ce
36841 9349           B0                     05    mov al, #0x05
36842 934B           EE                           out dx, al
36843 934C           BA                   03CF    mov dx, # 0x3cf
36844 934F           EC                           in al, dx
36845 9350           24                     9F    and al, #0x9f
36846 9352           0C                     40    or al, #0x40
36847 9354           EE                           out dx, al
36848                       00009355            vga_compat_end:
36849 9355           5A                           pop dx
36850 9356           58                           pop ax
36851                                           ! 7819 endasm
36852                                           !BCC_ENDASM
36853                                           ! 7820 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
36854                                           ! 7821   Bit16u mode; Boolean using_lfb;
36855                       00009357            _mode_info_find_mode:
36856                                           !BCC_EOS
36857                                           !BCC_EOS
36858                                           ! 7822 {
36859                                           ! 7823   ModeInfoListItem *cur_info=&mode_info_list;
36860 9357           55                         push	bp
36861 9358           89E5                       mov	bp,sp
36862 935A           4C                         dec	sp
36863 935B           4C                         dec	sp
36864                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36865 935C           BB                   7E07  mov	bx,#_mode_info_list
36866 935F           895E         FE            mov	-2[bp],bx
36867                                           !BCC_EOS
36868                                           ! 7824   while (cur_info->mode != 0xFFFF)
36869                                           ! 7825   {
36870 9362           EB           43            jmp .2B9
36871                       00009364            .2BA:
36872                                           ! 7826     if (cur_info->mode == mode)
36873 9364           8B5E         FE            mov	bx,-2[bp]
36874                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
36875 9367           8B1F                       mov	bx,[bx]
36876 9369           3B5E         04            cmp	bx,4[bp]
36877 936C           75           30            jne 	.2BB
36878                       0000936E            .2BC:
36879                                           ! 7827     {
36880                                           ! 7828       if (!using_lfb)
36881 936E           8B46         06            mov	ax,6[bp]
36882 9371           85C0                       test	ax,ax
36883 9373           75           09            jne 	.2BD
36884                       00009375            .2BE:
36885                                           ! 7829       {
36886                                           ! 7830         return cur_info;
36887 9375           8B46         FE            mov	ax,-2[bp]
36888 9378           89EC                       mov	sp,bp
36889 937A           5D                         pop	bp
36890 937B           C3                         ret
36891                                           !BCC_EOS
36892                                           ! 7831       }
36893                                           ! 7832       else if (cur_info->info.ModeAttributes & 0x0080)
36894 937C           EB           1E            jmp .2BF
36895                       0000937E            .2BD:
36896 937E           8B5E         FE            mov	bx,-2[bp]
36897                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
36898 9381           8A47         02            mov	al,2[bx]
36899 9384           24                     80  and	al,#$80
36900 9386           84C0                       test	al,al
36901 9388           74           09            je  	.2C0
36902                       0000938A            .2C1:
36903                                           ! 7833       {
36904                                           ! 7834         return cur_info;
36905 938A           8B46         FE            mov	ax,-2[bp]
36906 938D           89EC                       mov	sp,bp
36907 938F           5D                         pop	bp
36908 9390           C3                         ret
36909                                           !BCC_EOS
36910                                           ! 7835       }
36911                                           ! 7836       else
36912                                           ! 7837       {
36913 9391           EB           09            jmp .2C2
36914                       00009393            .2C0:
36915                                           ! 7838         cur_info++;
36916                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36917 9393           8B5E         FE            mov	bx,-2[bp]
36918 9396           83C3                   44  add	bx,*$44
36919 9399           895E         FE            mov	-2[bp],bx
36920                                           !BCC_EOS
36921                                           ! 7839       }
36922                                           ! 7840     }
36923                       0000939C            .2C2:
36924                       0000939C            .2BF:
36925                                           ! 7841     else
36926                                           ! 7842     {
36927 939C           EB           09            jmp .2C3
36928                       0000939E            .2BB:
36929                                           ! 7843       cur_info++;
36930                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36931 939E           8B5E         FE            mov	bx,-2[bp]
36932 93A1           83C3                   44  add	bx,*$44
36933 93A4           895E         FE            mov	-2[bp],bx
36934                                           !BCC_EOS
36935                                           ! 7844     }
36936                                           ! 7845   }
36937                       000093A7            .2C3:
36938                                           ! 7846   return 0;
36939                       000093A7            .2B9:
36940 93A7           8B5E         FE            mov	bx,-2[bp]
36941                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
36942 93AA           8B1F                       mov	bx,[bx]
36943 93AC           81FB                 FFFF  cmp	bx,#$FFFF
36944 93B0           75           B2            jne	.2BA
36945                       000093B2            .2C4:
36946                       000093B2            .2B8:
36947 93B2           31C0                       xor	ax,ax
36948 93B4           89EC                       mov	sp,bp
36949 93B6           5D                         pop	bp
36950 93B7           C3                         ret
36951                                           !BCC_EOS
36952                                           ! 7847 }
36953                                           ! 7848 #asm
36954                                           !BCC_ASM
36955                       00000004            _mode_info_find_mode.using_lfb	set	4
36956                       00000002            _mode_info_find_mode.mode	set	2
36957                                           ; Has 1 display - Returns true if 1 display detected
36958                       000093B8            _vbe_has_vbe_display:
36959 93B8           1E                           push ds
36960 93B9           53                           push bx
36961 93BA           B8                   0040    mov ax, # 0x40
36962 93BD           8ED8                         mov ds, ax
36963 93BF           BB                   00B9    mov bx, # 0xB9
36964 93C2           8A07                         mov al, [bx]
36965 93C4           24                     01    and al, #0x01
36966 93C6           30E4                         xor ah, ah
36967 93C8           5B                           pop bx
36968 93C9           1F                           pop ds
36969 93CA           C3                           ret
36970                                           ; 1 Init - Initialise the Vesa Bios Extension Code
36971                                           ; This function does a sanity check on the host side display code interface.
36972                       000093CB            vbe_init:
36973 93CB           B8                   B0C0    mov ax, # 0xB0C0
36974 93CE           E8         FCF4              call dispi_set_id
36975 93D1           E8         FCE3              call dispi_get_id
36976 93D4           3D                   B0C0    cmp ax, # 0xB0C0
36977 93D7           75           16              jne no_vbe_interface
36978 93D9           1E                           push ds
36979 93DA           53                           push bx
36980 93DB           B8                   0040    mov ax, # 0x40
36981 93DE           8ED8                         mov ds, ax
36982 93E0           BB                   00B9    mov bx, # 0xB9
36983 93E3           B0                     01    mov al, #0x01
36984 93E5           8807                         mov [bx], al
36985 93E7           5B                           pop bx
36986 93E8           1F                           pop ds
36987 93E9           B8                   B0C5    mov ax, # 0xB0C5
36988 93EC           E8         FCD6              call dispi_set_id
36989                       000093EF            no_vbe_interface:
36990 93EF           BB                   8F75    mov bx, #msg_vbe_init
36991 93F2           53                           push bx
36992 93F3           E8         E87A              call _printf
36993 93F6           44                           inc sp
36994 93F7           44                           inc sp
36995 93F8           C3                           ret
36996                                           ; 1 Display Info - Display information on screen about the 1
36997                       000093F9            vbe_display_info:
36998 93F9           E8         FFBC              call _vbe_has_vbe_display
36999 93FC           85C0                         test ax, ax
37000 93FE           74           0B              jz no_vbe_flag
37001 9400           B8                   C000    mov ax, #0xc000
37002 9403           8ED8                         mov ds, ax
37003 9405           BE                   8F2B    mov si, #_vbebios_info_string
37004 9408           E9         A223              jmp _display_string
37005                       0000940B            no_vbe_flag:
37006 940B           B8                   C000    mov ax, #0xc000
37007 940E           8ED8                         mov ds, ax
37008 9410           BE                   8F51    mov si, #_no_vbebios_info_string
37009 9413           E9         A218              jmp _display_string
37010                                           ; helper function for memory size calculation
37011                       00009416            lmulul:
37012 9416     66    25               0000FFFF    and eax, #0x0000FFFF
37013 941C     66    C1E3                   10    shl ebx, #16
37014 9420     66    09D8                         or eax, ebx
37015 9423           36                           SEG SS
37016 9424     66    F725                         mul eax, dword ptr [di]
37017 9427     66    89C3                         mov ebx, eax
37018 942A     66    C1EB                   10    shr ebx, #16
37019 942E           C3                           ret
37020                                           ! 7912 endasm
37021                                           !BCC_ENDASM
37022                                           ! 7913 void vbe_biosfn_return_controller_information(AX, ES, DI)
37023                                           ! Register BX used in function mode_info_find_mode
37024                                           ! 7914 Bit16u *AX;Bit16u ES;Bit16u DI;
37025                                           export	_vbe_biosfn_return_controller_information
37026                       0000942F            _vbe_biosfn_return_controller_information:
37027                                           !BCC_EOS
37028                                           !BCC_EOS
37029                                           !BCC_EOS
37030                                           ! 7915 {
37031                                           ! 7916         Bit16u ss=get_SS();
37032 942F           55                         push	bp
37033 9430           89E5                       mov	bp,sp
37034 9432           4C                         dec	sp
37035 9433           4C                         dec	sp
37036                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37037 9434           E8         E836            call	_get_SS
37038                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37039 9437           8946         FE            mov	-2[bp],ax
37040                                           !BCC_EOS
37041                                           ! 7917         VbeInfoBlock vbe_info_block;
37042                                           !BCC_EOS
37043                                           ! 7918         Bit16u status;
37044                                           !BCC_EOS
37045                                           ! 7919         Bit16u result;
37046                                           !BCC_EOS
37047                                           ! 7920         Bit16u vbe2_info;
37048                                           !BCC_EOS
37049                                           ! 7921         Bit16u cur_mode=0;
37050 943A           81C4                 FDF8  add	sp,#-$208
37051                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
37052 943E           31C0                       xor	ax,ax
37053 9440           8986       FDF6            mov	-$20A[bp],ax
37054                                           !BCC_EOS
37055                                           ! 7922         Bit16u cur_ptr=34;
37056 9444           4C                         dec	sp
37057 9445           4C                         dec	sp
37058                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
37059 9446           B8                   0022  mov	ax,*$22
37060 9449           8986       FDF4            mov	-$20C[bp],ax
37061                                           !BCC_EOS
37062                                           ! 7923         Bit16u size_64k;
37063                                           !BCC_EOS
37064                                           ! 7924         ModeInfoListItem *cur_info=&mode_info_list;
37065 944D           83C4                   FC  add	sp,*-4
37066                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37067 9450           BB                   7E07  mov	bx,#_mode_info_list
37068 9453           899E       FDF0            mov	-$210[bp],bx
37069                                           !BCC_EOS
37070                                           ! 7925         status = read_word(ss, AX);
37071                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37072 9457           FF76         04            push	4[bp]
37073                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37074 945A           FF76         FE            push	-2[bp]
37075                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
37076 945D           E8         E794            call	_read_word
37077 9460           83C4                   04  add	sp,*4
37078                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
37079 9463           8986       FDFC            mov	-$204[bp],ax
37080                                           !BCC_EOS
37081                                           ! 7926         vbe2_info = 0;
37082                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37083 9467           31C0                       xor	ax,ax
37084 9469           8986       FDF8            mov	-$208[bp],ax
37085                                           !BCC_EOS
37086                                           ! 7927         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
37087                                           ! Debug: list int = const $200 (used reg = )
37088 946D           B8                   0200  mov	ax,#$200
37089 9470           50                         push	ax
37090                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
37091 9471           FF76         08            push	8[bp]
37092                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37093 9474           FF76         06            push	6[bp]
37094                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
37095 9477           8D9E       FDFE            lea	bx,-$202[bp]
37096 947B           53                         push	bx
37097                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
37098 947C           FF76         FE            push	-2[bp]
37099                                           ! Debug: func () void = memcpyb+0 (used reg = )
37100 947F           E8         E6FF            call	_memcpyb
37101 9482           83C4                   0A  add	sp,*$A
37102                                           !BCC_EOS
37103                                           ! 7928         if (((vbe_info_block.VbeSignature[0] == 'V') &&
37104                                           ! 7929              (vbe_info_block.VbeSignature[1] == 'B') &&
37105                                           ! 7930              (vbe_info_block.VbeSignature[2] == 'E') &&
37106                                           ! 7931              (vbe_info_block.VbeSignature[3] == '2')) ||
37107                                           ! 7932             ((vbe_info_block.VbeSignature[0] == 'V') &&
37108                                           ! 7933              (vbe_info_block.VbeSignature[1] == 'E') &&
37109                                           ! 7934              (vbe_info_block.VbeSignature[2] == 'S') &&
37110                                           ! 7935              (vbe_info_block.VbeSignature[3] == 'A')) )
37111                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37112 9485           8A86       FDFE            mov	al,-$202[bp]
37113 9489           3C                     56  cmp	al,*$56
37114 948B           75           18            jne 	.2C7
37115                       0000948D            .2CA:
37116                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37117 948D           8A86       FDFF            mov	al,-$201[bp]
37118 9491           3C                     42  cmp	al,*$42
37119 9493           75           10            jne 	.2C7
37120                       00009495            .2C9:
37121                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37122 9495           8A86       FE00            mov	al,-$200[bp]
37123 9499           3C                     45  cmp	al,*$45
37124 949B           75           08            jne 	.2C7
37125                       0000949D            .2C8:
37126                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37127 949D           8A86       FE01            mov	al,-$1FF[bp]
37128 94A1           3C                     32  cmp	al,*$32
37129 94A3           74           20            je  	.2C6
37130                       000094A5            .2C7:
37131                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37132 94A5           8A86       FDFE            mov	al,-$202[bp]
37133 94A9           3C                     56  cmp	al,*$56
37134 94AB           75           1F            jne 	.2C5
37135                       000094AD            .2CD:
37136                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37137 94AD           8A86       FDFF            mov	al,-$201[bp]
37138 94B1           3C                     45  cmp	al,*$45
37139 94B3           75           17            jne 	.2C5
37140                       000094B5            .2CC:
37141                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37142 94B5           8A86       FE00            mov	al,-$200[bp]
37143 94B9           3C                     53  cmp	al,*$53
37144 94BB           75           0F            jne 	.2C5
37145                       000094BD            .2CB:
37146                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37147 94BD           8A86       FE01            mov	al,-$1FF[bp]
37148 94C1           3C                     41  cmp	al,*$41
37149 94C3           75           07            jne 	.2C5
37150                       000094C5            .2C6:
37151                                           ! 7936         {
37152                                           ! 7937                 vbe2_info = 1;
37153                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37154 94C5           B8                   0001  mov	ax,*1
37155 94C8           8986       FDF8            mov	-$208[bp],ax
37156                                           !BCC_EOS
37157                                           ! 7938         }
37158                                           ! 7939         vbe_info_block.VbeSignature[0] = 'V';
37159                       000094CC            .2C5:
37160                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37161 94CC           B0                     56  mov	al,*$56
37162 94CE           8886       FDFE            mov	-$202[bp],al
37163                                           !BCC_EOS
37164                                           ! 7940         vbe_info_block.VbeSignature[1] = 'E';
37165                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37166 94D2           B0                     45  mov	al,*$45
37167 94D4           8886       FDFF            mov	-$201[bp],al
37168                                           !BCC_EOS
37169                                           ! 7941         vbe_info_block.VbeSignature[2] = 'S';
37170                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37171 94D8           B0                     53  mov	al,*$53
37172 94DA           8886       FE00            mov	-$200[bp],al
37173                                           !BCC_EOS
37174                                           ! 7942         vbe_info_block.VbeSignature[3] = 'A';
37175                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37176 94DE           B0                     41  mov	al,*$41
37177 94E0           8886       FE01            mov	-$1FF[bp],al
37178                                           !BCC_EOS
37179                                           ! 7943    
37180                                           ! 7943      vbe_info_block.VbeVersion = 0x0200;
37181                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
37182 94E4           B8                   0200  mov	ax,#$200
37183 94E7           8986       FE02            mov	-$1FE[bp],ax
37184                                           !BCC_EOS
37185                                           ! 7944         vbe_info_block.OemStringPtr_Seg = 0xc000;
37186                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
37187 94EB           B8                   C000  mov	ax,#$C000
37188 94EE           8986       FE06            mov	-$1FA[bp],ax
37189                                           !BCC_EOS
37190                                           ! 7945         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37191                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
37192 94F2           BB                   8E7F  mov	bx,#_vbebios_copyright
37193 94F5           899E       FE04            mov	-$1FC[bp],bx
37194                                           !BCC_EOS
37195                                           ! 7946         vbe_info_block.Capabilities[0] = 0x0001;
37196                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
37197 94F9           B0                     01  mov	al,*1
37198 94FB           8886       FE08            mov	-$1F8[bp],al
37199                                           !BCC_EOS
37200                                           ! 7947         vbe_info_block.Capabilities[1] = 0;
37201                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
37202 94FF           30C0                       xor	al,al
37203 9501           8886       FE09            mov	-$1F7[bp],al
37204                                           !BCC_EOS
37205                                           ! 7948         vbe_info_block.Capabilities[2] = 0;
37206                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
37207 9505           30C0                       xor	al,al
37208 9507           8886       FE0A            mov	-$1F6[bp],al
37209                                           !BCC_EOS
37210                                           ! 7949         vbe_info_block.Capabilities[3] = 0;
37211                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
37212 950B           30C0                       xor	al,al
37213 950D           8886       FE0B            mov	-$1F5[bp],al
37214                                           !BCC_EOS
37215                                           ! 7950         vbe_info_block.VideoModePtr_Seg= ES ;
37216                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
37217 9511           8B46         06            mov	ax,6[bp]
37218 9514           8986       FE0E            mov	-$1F2[bp],ax
37219                                           !BCC_EOS
37220                                           ! 7951         vbe_info_block.VideoModePtr_Off= DI + 34;
37221                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
37222 9518           8B46         08            mov	ax,8[bp]
37223                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
37224 951B           05                   0022  add	ax,*$22
37225 951E           8986       FE0C            mov	-$1F4[bp],ax
37226                                           !BCC_EOS
37227                                           ! 7952         outw(0x01CE, 0xa);
37228                                           ! Debug: list int = const $A (used reg = )
37229 9522           B8                   000A  mov	ax,*$A
37230 9525           50                         push	ax
37231                                           ! Debug: list int = const $1CE (used reg = )
37232 9526           B8                   01CE  mov	ax,#$1CE
37233 9529           50                         push	ax
37234                                           ! Debug: func () void = outw+0 (used reg = )
37235 952A           E8         E730            call	_outw
37236 952D           83C4                   04  add	sp,*4
37237                                           !BCC_EOS
37238                                           ! 7953         vbe_info_block.TotalMemory = inw(0x01CF);
37239                                           ! Debug: list int = const $1CF (used reg = )
37240 9530           B8                   01CF  mov	ax,#$1CF
37241 9533           50                         push	ax
37242                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37243 9534           E8         E70B            call	_inw
37244 9537           44                         inc	sp
37245 9538           44                         inc	sp
37246                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
37247 9539           8986       FE10            mov	-$1F0[bp],ax
37248                                           !BCC_EOS
37249                                           ! 7954         if (vbe2_info)
37250 953D           8B86       FDF8            mov	ax,-$208[bp]
37251 9541           85C0                       test	ax,ax
37252 9543           74           4B            je  	.2CE
37253                       00009545            .2CF:
37254                                           ! 7955         {
37255                                           ! 7956                 vbe_info_block.OemSoftwareRev = 0x0002;;
37256                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
37257 9545           B8                   0002  mov	ax,*2
37258 9548           8986       FE12            mov	-$1EE[bp],ax
37259                                           !BCC_EOS
37260                                           !BCC_EOS
37261                                           ! 7957                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37262                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
37263 954C           B8                   C000  mov	ax,#$C000
37264 954F           8986       FE16            mov	-$1EA[bp],ax
37265                                           !BCC_EOS
37266                                           ! 7958                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37267                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
37268 9553           BB                   8EC5  mov	bx,#_vbebios_vendor_name
37269 9556           899E       FE14            mov	-$1EC[bp],bx
37270                                           !BCC_EOS
37271                                           ! 7959                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37272                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
37273 955A           B8                   C000  mov	ax,#$C000
37274 955D           8986       FE1A            mov	-$1E6[bp],ax
37275                                           !BCC_EOS
37276                                           ! 7960                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37277                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
37278 9561           BB                   8EDD  mov	bx,#_vbebios_product_name
37279 9564           899E       FE18            mov	-$1E8[bp],bx
37280                                           !BCC_EOS
37281                                           ! 7961                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37282                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
37283 9568           B8                   C000  mov	ax,#$C000
37284 956B           8986       FE1E            mov	-$1E2[bp],ax
37285                                           !BCC_EOS
37286                                           ! 7962                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37287                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
37288 956F           BB                   8EF6  mov	bx,#_vbebios_product_revision
37289 9572           899E       FE1C            mov	-$1E4[bp],bx
37290                                           !BCC_EOS
37291                                           ! 7963                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37292                                           ! Debug: list int = const $200 (used reg = )
37293 9576           B8                   0200  mov	ax,#$200
37294 9579           50                         push	ax
37295                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37296 957A           8D9E       FDFE            lea	bx,-$202[bp]
37297 957E           53                         push	bx
37298                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37299 957F           FF76         FE            push	-2[bp]
37300                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37301 9582           FF76         08            push	8[bp]
37302                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37303 9585           FF76         06            push	6[bp]
37304                                           ! Debug: func () void = memcpyb+0 (used reg = )
37305 9588           E8         E5F6            call	_memcpyb
37306 958B           83C4                   0A  add	sp,*$A
37307                                           !BCC_EOS
37308                                           ! 7964         }
37309                                           ! 7965         else
37310                                           ! 7966         {
37311 958E           EB           18            jmp .2D0
37312                       00009590            .2CE:
37313                                           ! 7967                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37314                                           ! Debug: list int = const $100 (used reg = )
37315 9590           B8                   0100  mov	ax,#$100
37316 9593           50                         push	ax
37317                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37318 9594           8D9E       FDFE            lea	bx,-$202[bp]
37319 9598           53                         push	bx
37320                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37321 9599           FF76         FE            push	-2[bp]
37322                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37323 959C           FF76         08            push	8[bp]
37324                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37325 959F           FF76         06            push	6[bp]
37326                                           ! Debug: func () void = memcpyb+0 (used reg = )
37327 95A2           E8         E5DC            call	_memcpyb
37328 95A5           83C4                   0A  add	sp,*$A
37329                                           !BCC_EOS
37330                                           ! 7968         }
37331                                           ! 7969         do
37332                       000095A8            .2D0:
37333                                           ! 7970         {
37334                       000095A8            .2D3:
37335                                           ! 7971                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
37336 95A8           8B9E       FDF0            mov	bx,-$210[bp]
37337                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
37338 95AC           8A47         1B            mov	al,$1B[bx]
37339 95AF           30E4                       xor	ah,ah
37340 95B1           31DB                       xor	bx,bx
37341 95B3           53                         push	bx
37342 95B4           50                         push	ax
37343 95B5           8B9E       FDF0            mov	bx,-$210[bp]
37344                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37345 95B9           8B47         14            mov	ax,$14[bx]
37346 95BC           31DB                       xor	bx,bx
37347 95BE           53                         push	bx
37348 95BF           50                         push	ax
37349 95C0           8B9E       FDF0            mov	bx,-$210[bp]
37350                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37351 95C4           8B47         14            mov	ax,$14[bx]
37352 95C7           31DB                       xor	bx,bx
37353                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
37354 95C9           8DBE       FDE8            lea	di,-$218[bp]
37355 95CD           E8         FE46            call	lmulul
37356 95D0           83C4                   04  add	sp,*4
37357                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
37358 95D3           8DBE       FDEC            lea	di,-$214[bp]
37359 95D7           E8         FE3C            call	lmulul
37360 95DA           83C4                   04  add	sp,*4
37361                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
37362                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
37363 95DD           31C0                       xor	ax,ax
37364                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
37365 95DF           8986       FDF2            mov	-$20E[bp],ax
37366                                           !BCC_EOS
37367                                           ! 7972                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37368                                           ! 7973                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
37369                                           ! 7974                     (size_64k <= vbe_info_block.TotalMemory)) {
37370                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37371 95E3           E8         FB5B            call	_dispi_get_max_xres
37372 95E6           8B9E       FDF0            mov	bx,-$210[bp]
37373                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37374 95EA           3B47         14            cmp	ax,$14[bx]
37375 95ED           72           4D            jb  	.2D4
37376                       000095EF            .2D7:
37377                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37378 95EF           E8         FB71            call	_dispi_get_max_bpp
37379 95F2           8B9E       FDF0            mov	bx,-$210[bp]
37380                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
37381 95F6           50                         push	ax
37382 95F7           8A47         1B            mov	al,$1B[bx]
37383 95FA           30E4                       xor	ah,ah
37384 95FC           3B86       FDEE            cmp	ax,-$212[bp]
37385 9600           8DA6       FDF0            lea	sp,-$210[bp]
37386 9604           77           36            ja  	.2D4
37387                       00009606            .2D6:
37388                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
37389 9606           8B86       FDF2            mov	ax,-$20E[bp]
37390 960A           3B86       FE10            cmp	ax,-$1F0[bp]
37391 960E           77           2C            ja  	.2D4
37392                       00009610            .2D5:
37393                                           ! 7975                   write_word(ES, DI + cur_ptr, cur_info->mode);
37394 9610           8B9E       FDF0            mov	bx,-$210[bp]
37395                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37396 9614           FF37                       push	[bx]
37397                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37398 9616           8B46         08            mov	ax,8[bp]
37399 9619           0386       FDF4            add	ax,-$20C[bp]
37400                                           ! Debug: list unsigned int = ax+0 (used reg = )
37401 961D           50                         push	ax
37402                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37403 961E           FF76         06            push	6[bp]
37404                                           ! Debug: func () void = write_word+0 (used reg = )
37405 9621           E8         E5FB            call	_write_word
37406 9624           83C4                   06  add	sp,*6
37407                                           !BCC_EOS
37408                                           ! 7976                   cur_mode++;
37409                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
37410 9627           8B86       FDF6            mov	ax,-$20A[bp]
37411 962B           40                         inc	ax
37412 962C           8986       FDF6            mov	-$20A[bp],ax
37413                                           !BCC_EOS
37414                                           ! 7977                   cur_ptr+=2;
37415                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
37416 9630           8B86       FDF4            mov	ax,-$20C[bp]
37417 9634           40                         inc	ax
37418 9635           40                         inc	ax
37419 9636           8986       FDF4            mov	-$20C[bp],ax
37420                                           !BCC_EOS
37421                                           ! 7978                 } else {
37422 963A           EB           00            jmp .2D8
37423                       0000963C            .2D4:
37424                                           ! 7979                 }
37425                                           ! 7980                 cur_info++;
37426                       0000963C            .2D8:
37427                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37428 963C           8B9E       FDF0            mov	bx,-$210[bp]
37429 9640           83C3                   44  add	bx,*$44
37430 9643           899E       FDF0            mov	-$210[bp],bx
37431                                           !BCC_EOS
37432                                           ! 7981         } while (cur_info->mode != 0xFFFF);
37433                       00009647            .2D2:
37434 9647           8B9E       FDF0            mov	bx,-$210[bp]
37435                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37436 964B           8B1F                       mov	bx,[bx]
37437 964D           81FB                 FFFF  cmp	bx,#$FFFF
37438 9651         0F85         FF53            bne 	.2D3
37439                       00009655            .2D9:
37440                                           !BCC_EOS
37441                                           ! 7982         write_word(ES, DI + cur_ptr, cur_info->mode);
37442                       00009655            .2D1:
37443 9655           8B9E       FDF0            mov	bx,-$210[bp]
37444                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37445 9659           FF37                       push	[bx]
37446                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37447 965B           8B46         08            mov	ax,8[bp]
37448 965E           0386       FDF4            add	ax,-$20C[bp]
37449                                           ! Debug: list unsigned int = ax+0 (used reg = )
37450 9662           50                         push	ax
37451                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37452 9663           FF76         06            push	6[bp]
37453                                           ! Debug: func () void = write_word+0 (used reg = )
37454 9666           E8         E5B6            call	_write_word
37455 9669           83C4                   06  add	sp,*6
37456                                           !BCC_EOS
37457                                           ! 7983         result = 0x4f;
37458                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
37459 966C           B8                   004F  mov	ax,*$4F
37460 966F           8986       FDFA            mov	-$206[bp],ax
37461                                           !BCC_EOS
37462                                           ! 7984         write_word(ss, AX, result);
37463                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
37464 9673           FFB6       FDFA            push	-$206[bp]
37465                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
37466 9677           FF76         04            push	4[bp]
37467                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37468 967A           FF76         FE            push	-2[bp]
37469                                           ! Debug: func () void = write_word+0 (used reg = )
37470 967D           E8         E59F            call	_write_word
37471 9680           83C4                   06  add	sp,*6
37472                                           !BCC_EOS
37473                                           ! 7985 }
37474 9683           89EC                       mov	sp,bp
37475 9685           5D                         pop	bp
37476 9686           C3                         ret
37477                                           ! 7986 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37478                                           ! Register BX used in function vbe_biosfn_return_controller_information
37479                                           ! 7987 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37480                                           export	_vbe_biosfn_return_mode_information
37481                       00009687            _vbe_biosfn_return_mode_information:
37482                                           !BCC_EOS
37483                                           !BCC_EOS
37484                                           !BCC_EOS
37485                                           !BCC_EOS
37486                                           ! 7988 {
37487                                           ! 7989         Bit16u resu
37488                                           ! 7989 lt=0x0100;
37489 9687           55                         push	bp
37490 9688           89E5                       mov	bp,sp
37491 968A           4C                         dec	sp
37492 968B           4C                         dec	sp
37493                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
37494 968C           B8                   0100  mov	ax,#$100
37495 968F           8946         FE            mov	-2[bp],ax
37496                                           !BCC_EOS
37497                                           ! 7990         Bit16u ss=get_SS();
37498 9692           4C                         dec	sp
37499 9693           4C                         dec	sp
37500                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37501 9694           E8         E5D6            call	_get_SS
37502                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37503 9697           8946         FC            mov	-4[bp],ax
37504                                           !BCC_EOS
37505                                           ! 7991         ModeInfoBlock info;
37506                                           !BCC_EOS
37507                                           ! 7992         ModeInfoListItem *cur_info;
37508                                           !BCC_EOS
37509                                           ! 7993         Boolean using_lfb;
37510                                           !BCC_EOS
37511                                           ! 7994         Bit16u lfb_addr;
37512                                           !BCC_EOS
37513                                           ! 7995         using_lfb=((CX & 0x4000) == 0x4000);
37514 969A           81C4                 FEFA  add	sp,#-$106
37515                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
37516 969E           8B46         06            mov	ax,6[bp]
37517 96A1           25                   4000  and	ax,#$4000
37518                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37519 96A4           3D                   4000  cmp	ax,#$4000
37520 96A7           75           04            jne	.2DA
37521 96A9           B0                     01  mov	al,*1
37522 96AB           EB           02            jmp	.2DB
37523                       000096AD            .2DA:
37524 96AD           30C0                       xor	al,al
37525                       000096AF            .2DB:
37526                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
37527 96AF           30E4                       xor	ah,ah
37528 96B1           8986       FEF8            mov	-$108[bp],ax
37529                                           !BCC_EOS
37530                                           ! 7996         CX = (CX & 0x1ff);
37531                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
37532 96B5           8B46         06            mov	ax,6[bp]
37533 96B8           25                   01FF  and	ax,#$1FF
37534                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
37535 96BB           8946         06            mov	6[bp],ax
37536                                           !BCC_EOS
37537                                           ! 7997         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37538                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
37539 96BE           8D9E       FEFA            lea	bx,-$106[bp]
37540 96C2           53                         push	bx
37541                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
37542 96C3           FFB6       FEF8            push	-$108[bp]
37543                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
37544 96C7           FF76         06            push	6[bp]
37545                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37546 96CA           E8         FC8A            call	_mode_info_find_mode
37547 96CD           83C4                   06  add	sp,*6
37548                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37549 96D0           8986       FEFA            mov	-$106[bp],ax
37550                                           !BCC_EOS
37551                                           ! 7998         if (cur_info != 0)
37552                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37553 96D4           8B86       FEFA            mov	ax,-$106[bp]
37554 96D8           85C0                       test	ax,ax
37555 96DA         0F84         008C            beq 	.2DC
37556                       000096DE            .2DD:
37557                                           ! 7999         {
37558                                           ! 8000                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
37559                                           ! Debug: list int = const $100 (used reg = )
37560 96DE           B8                   0100  mov	ax,#$100
37561 96E1           50                         push	ax
37562                                           ! Debug: list int = const 0 (used reg = )
37563 96E2           31C0                       xor	ax,ax
37564 96E4           50                         push	ax
37565                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
37566 96E5           8D9E       FEFC            lea	bx,-$104[bp]
37567 96E9           53                         push	bx
37568                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
37569 96EA           FF76         FC            push	-4[bp]
37570                                           ! Debug: func () void = memsetb+0 (used reg = )
37571 96ED           E8         E447            call	_memsetb
37572 96F0           83C4                   08  add	sp,*8
37573                                           !BCC_EOS
37574                                           ! 8001                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37575                                           ! Debug: list int = const $42 (used reg = )
37576 96F3           B8                   0042  mov	ax,*$42
37577 96F6           50                         push	ax
37578 96F7           8B9E       FEFA            mov	bx,-$106[bp]
37579                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37580                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37581 96FB           43                         inc	bx
37582 96FC           43                         inc	bx
37583 96FD           53                         push	bx
37584                                           ! Debug: list unsigned int = const $C000 (used reg = )
37585 96FE           B8                   C000  mov	ax,#$C000
37586 9701           50                         push	ax
37587                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
37588 9702           8D9E       FEFC            lea	bx,-$104[bp]
37589 9706           53                         push	bx
37590                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
37591 9707           FF76         FC            push	-4[bp]
37592                                           ! Debug: func () void = memcpyb+0 (used reg = )
37593 970A           E8         E474            call	_memcpyb
37594 970D           83C4                   0A  add	sp,*$A
37595                                           !BCC_EOS
37596                                           ! 8002                 if (using_lfb) {
37597 9710           8B86       FEF8            mov	ax,-$108[bp]
37598 9714           85C0                       test	ax,ax
37599 9716           74           06            je  	.2DE
37600                       00009718            .2DF:
37601                                           ! 8003                   info.NumberOfBanks = 1;
37602                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
37603 9718           B0                     01  mov	al,*1
37604 971A           8886       FF16            mov	-$EA[bp],al
37605                                           !BCC_EOS
37606                                           ! 8004                 }
37607                                           ! 8005                 lfb_addr = pci_get_lfb_addr(0x1234);
37608                       0000971E            .2DE:
37609                                           ! Debug: list int = const $1234 (used reg = )
37610 971E           B8                   1234  mov	ax,#$1234
37611 9721           50                         push	ax
37612                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
37613 9722           E8         E688            call	_pci_get_lfb_addr
37614 9725           44                         inc	sp
37615 9726           44                         inc	sp
37616                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37617 9727           8986       FEF6            mov	-$10A[bp],ax
37618                                           !BCC_EOS
37619                                           ! 8006                 if (lfb_addr > 0) {
37620                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37621 972B           8B86       FEF6            mov	ax,-$10A[bp]
37622 972F           85C0                       test	ax,ax
37623 9731           74           11            je  	.2E0
37624                       00009733            .2E1:
37625                                           ! 8007                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
37626                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37627 9733           8B86       FEF6            mov	ax,-$10A[bp]
37628 9737           31DB                       xor	bx,bx
37629                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
37630 9739           93                         xchg	bx,ax
37631 973A           31C0                       xor	ax,ax
37632                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
37633 973C           8986       FF24            mov	-$DC[bp],ax
37634 9740           899E       FF26            mov	-$DA[bp],bx
37635                                           !BCC_EOS
37636                                           ! 8008                 }
37637                                           ! 8009                 if (info.WinAAttributes & 0x01) {
37638                       00009744            .2E0:
37639                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
37640 9744           8A86       FEFE            mov	al,-$102[bp]
37641 9748           24                     01  and	al,*1
37642 974A           84C0                       test	al,al
37643 974C           74           14            je  	.2E2
37644                       0000974E            .2E3:
37645                                           ! 8010                   info.WinFuncPtr = 0xC0000000UL;
37646                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
37647 974E           31C0                       xor	ax,ax
37648 9750           BB                   C000  mov	bx,#$C000
37649 9753           8986       FF08            mov	-$F8[bp],ax
37650 9757           899E       FF0A            mov	-$F6[bp],bx
37651                                           !BCC_EOS
37652                                           ! 8011                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37653                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37654                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
37655 975B           BB                   91C1  mov	bx,#_dispi_set_bank_farcall
37656 975E           899E       FF08            mov	-$F8[bp],bx
37657                                           !BCC_EOS
37658                                           ! 8012                 }
37659                                           ! 8013                 result = 0x4f;
37660                       00009762            .2E2:
37661                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
37662 9762           B8                   004F  mov	ax,*$4F
37663 9765           8946         FE            mov	-2[bp],ax
37664                                           !BCC_EOS
37665                                           ! 8014         }
37666                                           ! 8015         else
37667                                           ! 8016         {
37668 9768           EB           06            jmp .2E4
37669                       0000976A            .2DC:
37670                                           ! 8017                 result = 0x100;
37671                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
37672 976A           B8                   0100  mov	ax,#$100
37673 976D           8946         FE            mov	-2[bp],ax
37674                                           !BCC_EOS
37675                                           ! 8018         }
37676                                           ! 8019         if (result == 0x4f)
37677                       00009770            .2E4:
37678                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
37679 9770           8B46         FE            mov	ax,-2[bp]
37680 9773           3D                   004F  cmp	ax,*$4F
37681 9776           75           18            jne 	.2E5
37682                       00009778            .2E6:
37683                                           ! 8020         {
37684                                           ! 8021                 memcpyb(ES, DI, ss, &info, sizeof(info));
37685                                           ! Debug: list int = const $100 (used reg = )
37686 9778           B8                   0100  mov	ax,#$100
37687 977B           50                         push	ax
37688                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
37689 977C           8D9E       FEFC            lea	bx,-$104[bp]
37690 9780           53                         push	bx
37691                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
37692 9781           FF76         FC            push	-4[bp]
37693                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
37694 9784           FF76         0A            push	$A[bp]
37695                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
37696 9787           FF76         08            push	8[bp]
37697                                           ! Debug: func () void = memcpyb+0 (used reg = )
37698 978A           E8         E3F4            call	_memcpyb
37699 978D           83C4                   0A  add	sp,*$A
37700                                           !BCC_EOS
37701                                           ! 8022         }
37702                                           ! 8023         write_word(ss, AX, result);
37703                       00009790            .2E5:
37704                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
37705 9790           FF76         FE            push	-2[bp]
37706                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
37707 9793           FF76         04            push	4[bp]
37708                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
37709 9796           FF76         FC            push	-4[bp]
37710                                           ! Debug: func () void = write_word+0 (used reg = )
37711 9799           E8         E483            call	_write_word
37712 979C           83C4                   06  add	sp,*6
37713                                           !BCC_EOS
37714                                           ! 8024 }
37715 979F           89EC                       mov	sp,bp
37716 97A1           5D                         pop	bp
37717 97A2           C3                         ret
37718                                           ! 8025 void vbe_biosfn_set_mode(AX, BX, ES, DI)
37719                                           ! Register BX used in function vbe_biosfn_return_mode_information
37720                                           ! 8026 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
37721                                           export	_vbe_biosfn_set_mode
37722                       000097A3            _vbe_biosfn_set_mode:
37723                                           !BCC_EOS
37724                                           !BCC_EOS
37725                                           !BCC_EOS
37726                                           !BCC_EOS
37727                                           ! 8027 {
37728                                           ! 8028         Bit16u ss = get_SS();
37729 97A3           55                         push	bp
37730 97A4           89E5                       mov	bp,sp
37731 97A6           4C                         dec	sp
37732 97A7           4C                         dec	sp
37733                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37734 97A8           E8         E4C2            call	_get_SS
37735                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37736 97AB           8946         FE            mov	-2[bp],ax
37737                                           !BCC_EOS
37738                                           ! 8029         Bit16u result;
37739                                           !BCC_EOS
37740                                           ! 8030         ModeInfoListItem *cur_info;
37741                                           !BCC_EOS
37742                                           ! 8031         Boolean using_lfb;
37743                                           !BCC_EOS
37744                                           ! 8032         Bit8u no_clear;
37745                                           !BCC_EOS
37746                                           ! 8033         Bit8u lfb_flag;
37747                                           !BCC_EOS
37748                                           ! 8034         using_lfb=((BX & 0x4000) == 0x4000);
37749 97AE           83C4                   F8  add	sp,*-8
37750                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
37751 97B1           8B46         06            mov	ax,6[bp]
37752 97B4           25                   4000  and	ax,#$4000
37753                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37754 97B7           3D                   4000  cmp	ax,#$4000
37755 97BA           75           04            jne	.2E7
37756 97BC           B0                     01  mov	al,*1
37757 97BE           EB           02            jmp	.2E8
37758                       000097C0            .2E7:
37759 97C0           30C0                       xor	al,al
37760                       000097C2            .2E8:
37761                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
37762 97C2           30E4                       xor	ah,ah
37763 97C4           8946         F8            mov	-8[bp],ax
37764                                           !BCC_EOS
37765                                           ! 8035         lfb_flag=using_lfb?0x40:0;
37766 97C7           8B46         F8            mov	ax,-8[bp]
37767 97CA           85C0                       test	ax,ax
37768 97CC           74           04            je  	.2E9
37769                       000097CE            .2EA:
37770 97CE           B0                     40  mov	al,*$40
37771 97D0           EB           02            jmp .2EB
37772                       000097D2            .2E9:
37773 97D2           30C0                       xor	al,al
37774                       000097D4            .2EB:
37775                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
37776 97D4           8846         F6            mov	-$A[bp],al
37777                                           !BCC_EOS
37778                                           ! 8036         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
37779                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
37780 97D7           8B46         06            mov	ax,6[bp]
37781 97DA           25                   8000  and	ax,#$8000
37782                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
37783 97DD           3D                   8000  cmp	ax,#$8000
37784 97E0           75           04            jne 	.2EC
37785                       000097E2            .2ED:
37786 97E2           B0                     80  mov	al,#$80
37787 97E4           EB           02            jmp .2EE
37788                       000097E6            .2EC:
37789 97E6           30C0                       xor	al,al
37790                       000097E8            .2EE:
37791                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
37792 97E8           8846         F7            mov	-9[bp],al
37793                                           !BCC_EOS
37794                                           ! 8037         BX = (BX & 0x1ff);
37795                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
37796 97EB           8B46         06            mov	ax,6[bp]
37797 97EE           25                   01FF  and	ax,#$1FF
37798                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
37799 97F1           8946         06            mov	6[bp],ax
37800                                           !BCC_EOS
37801                                           ! 8038         if (BX<0x0100)
37802                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
37803 97F4           8B46         06            mov	ax,6[bp]
37804 97F7           3D                   0100  cmp	ax,#$100
37805 97FA           73           23            jae 	.2EF
37806                       000097FC            .2F0:
37807                                           ! 8039         {
37808                                           ! 8040                 Bit8u mode;
37809                                           !BCC_EOS
37810                                           ! 8041                 dispi_set_enable(0x00);
37811 97FC           4C                         dec	sp
37812 97FD           4C                         dec	sp
37813                                           ! Debug: list int = const 0 (used reg = )
37814 97FE           31C0                       xor	ax,ax
37815 9800           50                         push	ax
37816                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37817 9801           E8         F981            call	_dispi_set_enable
37818 9804           44                         inc	sp
37819 9805           44                         inc	sp
37820                                           !BCC_EOS
37821                                           ! 8042                 mode=(BX & 0xff);
37822                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
37823 9806           8A46         06            mov	al,6[bp]
37824                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
37825 9809           8846         F5            mov	-$B[bp],al
37826                                           !BCC_EOS
37827                                           ! 8043                 biosfn_set_video_mode(mode);
37828                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
37829 980C           8A46         F5            mov	al,-$B[bp]
37830 980F           30E4                       xor	ah,ah
37831 9811           50                         push	ax
37832                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37833 9812           E8         A37A            call	_biosfn_set_video_mode
37834 9815           44                         inc	sp
37835 9816           44                         inc	sp
37836                                           !BCC_EOS
37837                                           ! 8044                 result = 0x4f;
37838                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
37839 9817           B8                   004F  mov	ax,*$4F
37840 981A           8946         FC            mov	-4[bp],ax
37841                                           !BCC_EOS
37842                                           ! 8045         }
37843 981D           44                         inc	sp
37844 981E           44                         inc	sp
37845                                           ! 8046         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
37846                       0000981F            .2EF:
37847                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
37848 981F           8D5E         FA            lea	bx,-6[bp]
37849 9822           53                         push	bx
37850                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
37851 9823           FF76         F8            push	-8[bp]
37852                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
37853 9826           FF76         06            push	6[bp]
37854                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37855 9829           E8         FB2B            call	_mode_info_find_mode
37856 982C           83C4                   06  add	sp,*6
37857                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37858 982F           8946         FA            mov	-6[bp],ax
37859                                           !BCC_EOS
37860                                           ! 8047         if (cur_info != 0)
37861                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37862 9832           8B46         FA            mov	ax,-6[bp]
37863 9835           85C0                       test	ax,ax
37864 9837         0F84         0089            beq 	.2F1
37865                       0000983B            .2F2:
37866                                           ! 8048         {
37867                                           ! 8049                 dispi_set_enable(0x00);
37868                                           ! Debug: list int = const 0 (used reg = )
37869 983B           31C0                       xor	ax,ax
37870 983D           50                         push	ax
37871                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37872 983E           E8         F944            call	_dispi_set_enable
37873 9841           44                         inc	sp
37874 9842           44                         inc	sp
37875                                           !BCC_EOS
37876                                           ! 8050                 if (cur_info->info.BitsPerPixel == 4)
37877 9843           8B5E         FA            mov	bx,-6[bp]
37878                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
37879 9846           8A47         1B            mov	al,$1B[bx]
37880 9849           3C                     04  cmp	al,*4
37881 984B           75           09            jne 	.2F3
37882                       0000984D            .2F4:
37883                                           ! 8051                 {
37884                                           ! 8052     
37885                                           ! 8052               biosfn_set_video_mode(0x6a);
37886                                           ! Debug: list int = const $6A (used reg = )
37887 984D           B8                   006A  mov	ax,*$6A
37888 9850           50                         push	ax
37889                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37890 9851           E8         A33B            call	_biosfn_set_video_mode
37891 9854           44                         inc	sp
37892 9855           44                         inc	sp
37893                                           !BCC_EOS
37894                                           ! 8053                 }
37895                                           ! 8054                 dispi_set_bpp(cur_info->info.BitsPerPixel);
37896                       00009856            .2F3:
37897 9856           8B5E         FA            mov	bx,-6[bp]
37898                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37899 9859           8A47         1B            mov	al,$1B[bx]
37900 985C           30E4                       xor	ah,ah
37901 985E           50                         push	ax
37902                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
37903 985F           E8         F8A8            call	_dispi_set_bpp
37904 9862           44                         inc	sp
37905 9863           44                         inc	sp
37906                                           !BCC_EOS
37907                                           ! 8055                 dispi_set_xres(cur_info->info.XResolution);
37908 9864           8B5E         FA            mov	bx,-6[bp]
37909                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37910 9867           FF77         14            push	$14[bx]
37911                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
37912 986A           E8         F868            call	_dispi_set_xres
37913 986D           44                         inc	sp
37914 986E           44                         inc	sp
37915                                           !BCC_EOS
37916                                           ! 8056                 dispi_set_yres(cur_info->info.YResolution);
37917 986F           8B5E         FA            mov	bx,-6[bp]
37918                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37919 9872           FF77         16            push	$16[bx]
37920                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
37921 9875           E8         F874            call	_dispi_set_yres
37922 9878           44                         inc	sp
37923 9879           44                         inc	sp
37924                                           !BCC_EOS
37925                                           ! 8057                 dispi_set_bank(0);
37926                                           ! Debug: list int = const 0 (used reg = )
37927 987A           31C0                       xor	ax,ax
37928 987C           50                         push	ax
37929                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
37930 987D           E8         F923            call	_dispi_set_bank
37931 9880           44                         inc	sp
37932 9881           44                         inc	sp
37933                                           !BCC_EOS
37934                                           ! 8058                 dispi_set_enable(0x01 | no_clear | lfb_flag);
37935                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
37936                                           ! Debug: expression subtree swapping
37937 9882           8A46         F7            mov	al,-9[bp]
37938 9885           0C                     01  or	al,*1
37939                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
37940 9887           0A46         F6            or	al,-$A[bp]
37941                                           ! Debug: list unsigned char = al+0 (used reg = )
37942 988A           30E4                       xor	ah,ah
37943 988C           50                         push	ax
37944                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37945 988D           E8         F8F5            call	_dispi_set_enable
37946 9890           44                         inc	sp
37947 9891           44                         inc	sp
37948                                           !BCC_EOS
37949                                           ! 8059                 vga_compat_setup();
37950                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
37951 9892           E8         F9EB            call	_vga_compat_setup
37952                                           !BCC_EOS
37953                                           ! 8060                 write_word(0x40,0xBA,BX);
37954                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
37955 9895           FF76         06            push	6[bp]
37956                                           ! Debug: list int = const $BA (used reg = )
37957 9898           B8                   00BA  mov	ax,#$BA
37958 989B           50                         push	ax
37959                                           ! Debug: list int = const $40 (used reg = )
37960 989C           B8                   0040  mov	ax,*$40
37961 989F           50                         push	ax
37962                                           ! Debug: func () void = write_word+0 (used reg = )
37963 98A0           E8         E37C            call	_write_word
37964 98A3           83C4                   06  add	sp,*6
37965                                           !BCC_EOS
37966                                           ! 8061                 write_byte(0x40,0x87,(0x60 | no_clear));
37967                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
37968                                           ! Debug: expression subtree swapping
37969 98A6           8A46         F7            mov	al,-9[bp]
37970 98A9           0C                     60  or	al,*$60
37971                                           ! Debug: list unsigned char = al+0 (used reg = )
37972 98AB           30E4                       xor	ah,ah
37973 98AD           50                         push	ax
37974                                           ! Debug: list int = const $87 (used reg = )
37975 98AE           B8                   0087  mov	ax,#$87
37976 98B1           50                         push	ax
37977                                           ! Debug: list int = const $40 (used reg = )
37978 98B2           B8                   0040  mov	ax,*$40
37979 98B5           50                         push	ax
37980                                           ! Debug: func () void = write_byte+0 (used reg = )
37981 98B6           E8         E34E            call	_write_byte
37982 98B9           83C4                   06  add	sp,*6
37983                                           !BCC_EOS
37984                                           ! 8062                 result = 0x4f;
37985                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37986 98BC           B8                   004F  mov	ax,*$4F
37987 98BF           8946         FC            mov	-4[bp],ax
37988                                           !BCC_EOS
37989                                           ! 8063         }
37990                                           ! 8064         else
37991                                           ! 8065         {
37992 98C2           EB           14            jmp .2F5
37993                       000098C4            .2F1:
37994                                           ! 8066                 result = 0x100;
37995                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
37996 98C4           B8                   0100  mov	ax,#$100
37997 98C7           8946         FC            mov	-4[bp],ax
37998                                           !BCC_EOS
37999                                           ! 8067                 if (BX == 3)
38000                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
38001 98CA           8B46         06            mov	ax,6[bp]
38002 98CD           3D                   0003  cmp	ax,*3
38003 98D0           75           06            jne 	.2F6
38004                       000098D2            .2F7:
38005                                           ! 8068                         result = 0x4f;
38006                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38007 98D2           B8                   004F  mov	ax,*$4F
38008 98D5           8946         FC            mov	-4[bp],ax
38009                                           !BCC_EOS
38010                                           ! 8069         }
38011                       000098D8            .2F6:
38012                                           ! 8070         write_word(ss, AX, result);
38013                       000098D8            .2F5:
38014                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
38015 98D8           FF76         FC            push	-4[bp]
38016                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
38017 98DB           FF76         04            push	4[bp]
38018                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
38019 98DE           FF76         FE            push	-2[bp]
38020                                           ! Debug: func () void = write_word+0 (used reg = )
38021 98E1           E8         E33B            call	_write_word
38022 98E4           83C4                   06  add	sp,*6
38023                                           !BCC_EOS
38024                                           ! 8071 }
38025 98E7           89EC                       mov	sp,bp
38026 98E9           5D                         pop	bp
38027 98EA           C3                         ret
38028                                           ! 8072 #asm
38029                                           !BCC_ASM
38030                       00000008            _vbe_biosfn_set_mode.DI	set	8
38031                       00000006            _vbe_biosfn_set_mode.ES	set	6
38032                       00000002            _vbe_biosfn_set_mode.AX	set	2
38033                       00000004            _vbe_biosfn_set_mode.BX	set	4
38034                       000098EB            vbe_biosfn_return_current_mode:
38035 98EB           1E                           push ds
38036 98EC           B8                   0040    mov ax, # 0x40
38037 98EF           8ED8                         mov ds, ax
38038 98F1           E8         F8A1              call dispi_get_enable
38039 98F4           25                   0001    and ax, # 0x01
38040 98F7           74           09              jz no_vbe_mode
38041 98F9           BB                   00BA    mov bx, # 0xBA
38042 98FC           8B07                         mov ax, [bx]
38043 98FE           89C3                         mov bx, ax
38044 9900           75           09              jnz vbe_03_ok
38045                       00009902            no_vbe_mode:
38046 9902           BB                   0049    mov bx, # 0x49
38047 9905           8A07                         mov al, [bx]
38048 9907           88C3                         mov bl, al
38049 9909           30FF                         xor bh, bh
38050                       0000990B            vbe_03_ok:
38051 990B           B8                   004F    mov ax, #0x004f
38052 990E           1F                           pop ds
38053 990F           C3                           ret
38054                                           ! 8093 endasm
38055                                           !BCC_ENDASM
38056                                           ! 8094 Bit16u vbe_biosfn_read_video_state_size()
38057                                           ! Register BX used in function vbe_biosfn_set_mode
38058                                           ! 8095 {
38059                                           export	_vbe_biosfn_read_video_state_size
38060                       00009910            _vbe_biosfn_read_video_state_size:
38061                                           ! 8096     return 9 * 2;
38062 9910           55                         push	bp
38063 9911           89E5                       mov	bp,sp
38064 9913           B8                   0012  mov	ax,*$12
38065 9916           5D                         pop	bp
38066 9917           C3                         ret
38067                                           !BCC_EOS
38068                                           ! 8097 }
38069                                           ! 8098 void vbe_biosfn_save_video_state(ES, BX)
38070                                           ! 8099      Bit16u ES; Bit16u BX;
38071                                           export	_vbe_biosfn_save_video_state
38072                       00009918            _vbe_biosfn_save_video_state:
38073                                           !BCC_EOS
38074                                           !BCC_EOS
38075                                           ! 8100 {
38076                                           ! 8101     Bit16u enable, i;
38077                                           !BCC_EOS
38078                                           ! 8102     outw(0x01CE,0x4);
38079 9918           55                         push	bp
38080 9919           89E5                       mov	bp,sp
38081 991B           83C4                   FC  add	sp,*-4
38082                                           ! Debug: list int = const 4 (used reg = )
38083 991E           B8                   0004  mov	ax,*4
38084 9921           50                         push	ax
38085                                           ! Debug: list int = const $1CE (used reg = )
38086 9922           B8                   01CE  mov	ax,#$1CE
38087 9925           50                         push	ax
38088                                           ! Debug: func () void = outw+0 (used reg = )
38089 9926           E8         E334            call	_outw
38090 9929           83C4                   04  add	sp,*4
38091                                           !BCC_EOS
38092                                           ! 8103     enable = inw(0x01CF);
38093                                           ! Debug: list int = const $1CF (used reg = )
38094 992C           B8                   01CF  mov	ax,#$1CF
38095 992F           50                         push	ax
38096                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38097 9930           E8         E30F            call	_inw
38098 9933           44                         inc	sp
38099 9934           44                         inc	sp
38100                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38101 9935           8946         FE            mov	-2[bp],ax
38102                                           !BCC_EOS
38103                                           ! 8104     write_word(ES, BX, enable);
38104                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38105 9938           FF76         FE            push	-2[bp]
38106                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38107 993B           FF76         06            push	6[bp]
38108                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38109 993E           FF76         04            push	4[bp]
38110                                           ! Debug: func () void = write_word+0 (used reg = )
38111 9941           E8         E2DB            call	_write_word
38112 9944           83C4                   06  add	sp,*6
38113                                           !BCC_EOS
38114                                           ! 8105     BX += 2;
38115                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38116 9947           8B46         06            mov	ax,6[bp]
38117 994A           40                         inc	ax
38118 994B           40                         inc	ax
38119 994C           8946         06            mov	6[bp],ax
38120                                           !BCC_EOS
38121                                           ! 8106     if (!(enable & 0x01))
38122                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38123 994F           8A46         FE            mov	al,-2[bp]
38124 9952           24                     01  and	al,*1
38125 9954           84C0                       test	al,al
38126 9956           75           04            jne 	.2F8
38127                       00009958            .2F9:
38128                                           ! 8107         return;
38129 9958           89EC                       mov	sp,bp
38130 995A           5D                         pop	bp
38131 995B           C3                         ret
38132                                           !BCC_EOS
38133                                           ! 8108     for(i = 0x1; i <= 0x9; i++) {
38134                       0000995C            .2F8:
38135                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38136 995C           B8                   0001  mov	ax,*1
38137 995F           8946         FC            mov	-4[bp],ax
38138                                           !BCC_EOS
38139                                           !BCC_EOS
38140 9962           EB           3A            jmp .2FC
38141                       00009964            .2FD:
38142                                           ! 8109         if (i != 0x4) {
38143                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38144 9964           8B46         FC            mov	ax,-4[bp]
38145 9967           3D                   0004  cmp	ax,*4
38146 996A           74           2B            je  	.2FE
38147                       0000996C            .2FF:
38148                                           ! 8110             outw(0x01CE, i);
38149                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38150 996C           FF76         FC            push	-4[bp]
38151                                           ! Debug: list int = const $1CE (used reg = )
38152 996F           B8                   01CE  mov	ax,#$1CE
38153 9972           50                         push	ax
38154                                           ! Debug: func () void = outw+0 (used reg = )
38155 9973           E8         E2E7            call	_outw
38156 9976           83C4                   04  add	sp,*4
38157                                           !BCC_EOS
38158                                           ! 8111             write_word(ES, BX, inw(0x01CF));
38159                                           ! Debug: list int = const $1CF (used reg = )
38160 9979           B8                   01CF  mov	ax,#$1CF
38161 997C           50                         push	ax
38162                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38163 997D           E8         E2C2            call	_inw
38164 9980           44                         inc	sp
38165 9981           44                         inc	sp
38166                                           ! Debug: list unsigned short = ax+0 (used reg = )
38167 9982           50                         push	ax
38168                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38169 9983           FF76         06            push	6[bp]
38170                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38171 9986           FF76         04            push	4[bp]
38172                                           ! Debug: func () void = write_word+0 (used reg = )
38173 9989           E8         E293            call	_write_word
38174 998C           83C4                   06  add	sp,*6
38175                                           !BCC_EOS
38176                                           ! 8112             BX += 2;
38177                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38178 998F           8B46         06            mov	ax,6[bp]
38179 9992           40                         inc	ax
38180 9993           40                         inc	ax
38181 9994           8946         06            mov	6[bp],ax
38182                                           !BCC_EOS
38183                                           ! 8113         }
38184                                           ! 8114     }
38185                       00009997            .2FE:
38186                                           ! 8115 }
38187                       00009997            .2FB:
38188                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38189 9997           8B46         FC            mov	ax,-4[bp]
38190 999A           40                         inc	ax
38191 999B           8946         FC            mov	-4[bp],ax
38192                       0000999E            .2FC:
38193                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38194 999E           8B46         FC            mov	ax,-4[bp]
38195 99A1           3D                   0009  cmp	ax,*9
38196 99A4           76           BE            jbe	.2FD
38197                       000099A6            .300:
38198                       000099A6            .2FA:
38199 99A6           89EC                       mov	sp,bp
38200 99A8           5D                         pop	bp
38201 99A9           C3                         ret
38202                                           ! 8116 void vbe_biosfn_restore_video_state(ES, BX)
38203                                           ! 8117      Bit16u ES; Bit16u BX;
38204                                           export	_vbe_biosfn_restore_video_state
38205                       000099AA            _vbe_biosfn_restore_video_state:
38206                                           !BCC_EOS
38207                                           !BCC_EOS
38208                                           ! 8118 {
38209                                           ! 8119     Bit16u enable, i;
38210                                           !BCC_EOS
38211                                           ! 8120     enable = read_word(ES, BX);
38212 99AA           55                         push	bp
38213 99AB           89E5                       mov	bp,sp
38214 99AD           83C4                   FC  add	sp,*-4
38215                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38216 99B0           FF76         06            push	6[bp]
38217                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38218 99B3           FF76         04            push	4[bp]
38219                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38220 99B6           E8         E23B            call	_read_word
38221 99B9           83C4                   04  add	sp,*4
38222                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38223 99BC           8946         FE            mov	-2[bp],ax
38224                                           !BCC_EOS
38225                                           ! 8121     BX += 2;
38226                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38227 99BF           8B46         06            mov	ax,6[bp]
38228 99C2           40                         inc	ax
38229 99C3           40                         inc	ax
38230 99C4           8946         06            mov	6[bp],ax
38231                                           !BCC_EOS
38232                                           ! 8122     if (!(enable & 0x01)) {
38233                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38234 99C7           8A46         FE            mov	al,-2[bp]
38235 99CA           24                     01  and	al,*1
38236 99CC           84C0                       test	al,al
38237 99CE           75           1E            jne 	.301
38238                       000099D0            .302:
38239                                           ! 8123         outw(0x01CE,0x4);
38240                                           ! Debug: list int = const 4 (used reg = )
38241 99D0           B8                   0004  mov	ax,*4
38242 99D3           50                         push	ax
38243                                           ! Debug: list int = const $1CE (used reg = )
38244 99D4           B8                   01CE  mov	ax,#$1CE
38245 99D7           50                         push	ax
38246                                           ! Debug: func () void = outw+0 (used reg = )
38247 99D8           E8         E282            call	_outw
38248 99DB           83C4                   04  add	sp,*4
38249                                           !BCC_EOS
38250                                           ! 8124         outw(0x01CF, enable);
38251                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38252 99DE           FF76         FE            push	-2[bp]
38253                                           ! Debug: list int = const $1CF (used reg = )
38254 99E1           B8                   01CF  mov	ax,#$1CF
38255 99E4           50                         push	ax
38256                                           ! Debug: func () void = outw+0 (used reg = )
38257 99E5           E8         E275            call	_outw
38258 99E8           83C4                   04  add	sp,*4
38259                                           !BCC_EOS
38260                                           ! 8125     } else {
38261 99EB           E9         00E5            br 	.303
38262                       000099EE            .301:
38263                                           ! 8126         outw(0x01CE, 0x1);
38264                                           ! Debug: list int = const 1 (used reg = )
38265 99EE           B8                   0001  mov	ax,*1
38266 99F1           50                         push	ax
38267                                           ! Debug: list int = const $1CE (used reg = )
38268 99F2           B8                   01CE  mov	ax,#$1CE
38269 99F5           50                         push	ax
38270                                           ! Debug: func () void = outw+0 (used reg = )
38271 99F6           E8         E264            call	_outw
38272 99F9           83C4                   04  add	sp,*4
38273                                           !BCC_EOS
38274                                           ! 8127         outw(0x01CF, read_word(ES, BX));
38275                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38276 99FC           FF76         06            push	6[bp]
38277                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38278 99FF           FF76         04            push	4[bp]
38279                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38280 9A02           E8         E1EF            call	_read_word
38281 9A05           83C4                   04  add	sp,*4
38282                                           ! Debug: list unsigned short = ax+0 (used reg = )
38283 9A08           50                         push	ax
38284                                           ! Debug: list int = const $1CF (used reg = )
38285 9A09           B8                   01CF  mov	ax,#$1CF
38286 9A0C           50                         push	ax
38287                                           ! Debug: func () void = outw+0 (used reg = )
38288 9A0D           E8         E24D            call	_outw
38289 9A10           83C4                   04  add	sp,*4
38290                                           !BCC_EOS
38291                                           ! 8128         BX += 2;
38292                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38293 9A13           8B46         06            mov	ax,6[bp]
38294 9A16           40                         inc	ax
38295 9A17           40                         inc	ax
38296 9A18           8946         06            mov	6[bp],ax
38297                                           !BCC_EOS
38298                                           ! 8129         outw(0x01CE, 0x2);
38299                                           ! Debug: list int = const 2 (used reg = )
38300 9A1B           B8                   0002  mov	ax,*2
38301 9A1E           50                         push	ax
38302                                           ! Debug: list int = const $1CE (used reg = )
38303 9A1F           B8                   01CE  mov	ax,#$1CE
38304 9A22           50                         push	ax
38305                                           ! Debug: func () void = outw+0 (used reg = )
38306 9A23           E8         E237            call	_outw
38307 9A26           83C4                   04  add	sp,*4
38308                                           !BCC_EOS
38309                                           ! 8130         outw(0x01CF, read_word(ES, BX));
38310                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38311 9A29           FF76         06            push	6[bp]
38312                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38313 9A2C           FF76         04            push	4[bp]
38314                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38315 9A2F           E8         E1C2            call	_read_word
38316 9A32           83C4                   04  add	sp,*4
38317                                           ! Debug: list unsigned short = ax+0 (used reg = )
38318 9A35           50                         push	ax
38319                                           ! Debug: list int = const $1CF (used reg = )
38320 9A36           B8                   01CF  mov	ax,#$1CF
38321 9A39           50                         push	ax
38322                                           ! Debug: func () void = outw+0 (used reg = )
38323 9A3A           E8         E220            call	_outw
38324 9A3D           83C4                   04  add	sp,*4
38325                                           !BCC_EOS
38326                                           ! 8131         BX += 2;
38327                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38328 9A40           8B46         06            mov	ax,6[bp]
38329 9A43           40                         inc	ax
38330 9A44           40                         inc	ax
38331 9A45           8946         06            mov	6[bp],ax
38332                                           !BCC_EOS
38333                                           ! 8132         outw(0x01CE, 0x3);
38334                                           ! Debug: list int = const 3 (used reg = )
38335 9A48           B8                   0003  mov	ax,*3
38336 9A4B           50                         push	ax
38337                                           ! Debug: list int = const $1CE (used reg = )
38338 9A4C           B8                   01CE  mov	ax,#$1CE
38339 9A4F           50                         push	ax
38340                                           ! Debug: func () void = outw+0 (used reg = )
38341 9A50           E8         E20A            call	_outw
38342 9A53           83C4                   04  add	sp,*4
38343                                           !BCC_EOS
38344                                           ! 8133         outw(0x01CF, read_word(ES, BX));
38345                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38346 9A56           FF76         06            push	6[bp]
38347                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38348 9A59           FF76         04            push	4[bp]
38349                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38350 9A5C           E8         E195            call	_read_word
38351 9A5F           83C4                   04  add	sp,*4
38352                                           ! Debug: list unsigned short = ax+0 (used reg = )
38353 9A62           50                         push	ax
38354                                           ! Debug: list int = const $1CF (used reg = )
38355 9A63           B8                   01CF  mov	ax,#$1CF
38356 9A66           50                         push	ax
38357                                           ! Debug: func () void = outw+0 (used reg = )
38358 9A67           E8         E1F3            call	_outw
38359 9A6A           83C4                   04  add	sp,*4
38360                                           !BCC_EOS
38361                                           ! 8134         BX += 2;
38362                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38363 9A6D           8B46         06            mov	ax,6[bp]
38364 9A70           40                         inc	ax
38365 9A71           40                         inc	ax
38366 9A72           8946         06            mov	6[bp],ax
38367                                           !BCC_EOS
38368                                           ! 8135         outw(0x01CE,0x4);
38369                                           ! Debug: list int = const 4 (used reg = )
38370 9A75           B8                   0004  mov	ax,*4
38371 9A78           50                         push	ax
38372                                           ! Debug: list int = const $1CE (used reg = )
38373 9A79           B8                   01CE  mov	ax,#$1CE
38374 9A7C           50                         push	ax
38375                                           ! Debug: func () void = outw+0 (used reg = )
38376 9A7D           E8         E1DD            call	_outw
38377 9A80           83C4                   04  add	sp,*4
38378                                           !BCC_EOS
38379                                           ! 8136         outw(0x01CF, enable);
38380                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38381 9A83           FF76         FE            push	-2[bp]
38382                                           ! Debug: list int = const $1CF (used reg = )
38383 9A86           B8                   01CF  mov	ax,#$1CF
38384 9A89           50                         push	ax
38385                                           ! Debug: func () void = outw+0 (used reg = )
38386 9A8A           E8         E1D0            call	_outw
38387 9A8D           83C4                   04  add	sp,*4
38388                                           !BCC_EOS
38389                                           ! 8137         for(i = 0x5; i <= 0x9; i++
38390                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38391 9A90           B8                   0005  mov	ax,*5
38392 9A93           8946         FC            mov	-4[bp],ax
38393                                           !BCC_EOS
38394                                           !BCC_EOS
38395                                           ! 8137 ) {
38396 9A96           EB           33            jmp .306
38397                       00009A98            .307:
38398                                           ! 8138             outw(0x01CE, i);
38399                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38400 9A98           FF76         FC            push	-4[bp]
38401                                           ! Debug: list int = const $1CE (used reg = )
38402 9A9B           B8                   01CE  mov	ax,#$1CE
38403 9A9E           50                         push	ax
38404                                           ! Debug: func () void = outw+0 (used reg = )
38405 9A9F           E8         E1BB            call	_outw
38406 9AA2           83C4                   04  add	sp,*4
38407                                           !BCC_EOS
38408                                           ! 8139             outw(0x01CF, read_word(ES, BX));
38409                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38410 9AA5           FF76         06            push	6[bp]
38411                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38412 9AA8           FF76         04            push	4[bp]
38413                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38414 9AAB           E8         E146            call	_read_word
38415 9AAE           83C4                   04  add	sp,*4
38416                                           ! Debug: list unsigned short = ax+0 (used reg = )
38417 9AB1           50                         push	ax
38418                                           ! Debug: list int = const $1CF (used reg = )
38419 9AB2           B8                   01CF  mov	ax,#$1CF
38420 9AB5           50                         push	ax
38421                                           ! Debug: func () void = outw+0 (used reg = )
38422 9AB6           E8         E1A4            call	_outw
38423 9AB9           83C4                   04  add	sp,*4
38424                                           !BCC_EOS
38425                                           ! 8140             BX += 2;
38426                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38427 9ABC           8B46         06            mov	ax,6[bp]
38428 9ABF           40                         inc	ax
38429 9AC0           40                         inc	ax
38430 9AC1           8946         06            mov	6[bp],ax
38431                                           !BCC_EOS
38432                                           ! 8141         }
38433                                           ! 8142     }
38434                       00009AC4            .305:
38435                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38436 9AC4           8B46         FC            mov	ax,-4[bp]
38437 9AC7           40                         inc	ax
38438 9AC8           8946         FC            mov	-4[bp],ax
38439                       00009ACB            .306:
38440                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38441 9ACB           8B46         FC            mov	ax,-4[bp]
38442 9ACE           3D                   0009  cmp	ax,*9
38443 9AD1           76           C5            jbe	.307
38444                       00009AD3            .308:
38445                       00009AD3            .304:
38446                                           ! 8143 }
38447                       00009AD3            .303:
38448 9AD3           89EC                       mov	sp,bp
38449 9AD5           5D                         pop	bp
38450 9AD6           C3                         ret
38451                                           ! 8144 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38452                                           ! 8145 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38453                                           export	_vbe_biosfn_save_restore_state
38454                       00009AD7            _vbe_biosfn_save_restore_state:
38455                                           !BCC_EOS
38456                                           !BCC_EOS
38457                                           !BCC_EOS
38458                                           !BCC_EOS
38459                                           !BCC_EOS
38460                                           ! 8146 {
38461                                           ! 8147     Bit16u ss=get_SS();
38462 9AD7           55                         push	bp
38463 9AD8           89E5                       mov	bp,sp
38464 9ADA           4C                         dec	sp
38465 9ADB           4C                         dec	sp
38466                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38467 9ADC           E8         E18E            call	_get_SS
38468                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38469 9ADF           8946         FE            mov	-2[bp],ax
38470                                           !BCC_EOS
38471                                           ! 8148     Bit16u result, val;
38472                                           !BCC_EOS
38473                                           ! 8149     result = 0x4f;
38474 9AE2           83C4                   FC  add	sp,*-4
38475                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38476 9AE5           B8                   004F  mov	ax,*$4F
38477 9AE8           8946         FC            mov	-4[bp],ax
38478                                           !BCC_EOS
38479                                           ! 8150     switch(( DX & 0x00ff )) {
38480                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38481 9AEB           8A46         08            mov	al,8[bp]
38482 9AEE           E9         00A9            br 	.30B
38483                                           ! 8151     case 0x00:
38484                                           ! 8152         val = biosfn_read_video_state_size2(CX);
38485                       00009AF1            .30C:
38486                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38487 9AF1           FF76         06            push	6[bp]
38488                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38489 9AF4           E8         D3EB            call	_biosfn_read_video_state_size2
38490 9AF7           44                         inc	sp
38491 9AF8           44                         inc	sp
38492                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38493 9AF9           8946         FA            mov	-6[bp],ax
38494                                           !BCC_EOS
38495                                           ! 8153         if (CX & 8)
38496                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38497 9AFC           8A46         06            mov	al,6[bp]
38498 9AFF           24                     08  and	al,*8
38499 9B01           84C0                       test	al,al
38500 9B03           74           09            je  	.30D
38501                       00009B05            .30E:
38502                                           ! 8154             val += vbe_biosfn_read_video_state_size();
38503                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38504 9B05           E8         FE08            call	_vbe_biosfn_read_video_state_size
38505                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38506 9B08           0346         FA            add	ax,-6[bp]
38507 9B0B           8946         FA            mov	-6[bp],ax
38508                                           !BCC_EOS
38509                                           ! 8155         write_word(ss, BX, val);
38510                       00009B0E            .30D:
38511                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38512 9B0E           FF76         FA            push	-6[bp]
38513                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38514 9B11           FF76         0C            push	$C[bp]
38515                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38516 9B14           FF76         FE            push	-2[bp]
38517                                           ! Debug: func () void = write_word+0 (used reg = )
38518 9B17           E8         E105            call	_write_word
38519 9B1A           83C4                   06  add	sp,*6
38520                                           !BCC_EOS
38521                                           ! 8156         break;
38522 9B1D           E9         008C            br 	.309
38523                                           !BCC_EOS
38524                                           ! 8157     case 0x01:
38525                                           ! 8158         val = read_word(ss, BX);
38526                       00009B20            .30F:
38527                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38528 9B20           FF76         0C            push	$C[bp]
38529                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38530 9B23           FF76         FE            push	-2[bp]
38531                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38532 9B26           E8         E0CB            call	_read_word
38533 9B29           83C4                   04  add	sp,*4
38534                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38535 9B2C           8946         FA            mov	-6[bp],ax
38536                                           !BCC_EOS
38537                                           ! 8159         val = biosfn_save_video_state(CX, ES, val);
38538                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38539 9B2F           FF76         FA            push	-6[bp]
38540                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38541 9B32           FF76         0A            push	$A[bp]
38542                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38543 9B35           FF76         06            push	6[bp]
38544                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38545 9B38           E8         D412            call	_biosfn_save_video_state
38546 9B3B           83C4                   06  add	sp,*6
38547                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38548 9B3E           8946         FA            mov	-6[bp],ax
38549                                           !BCC_EOS
38550                                           ! 8160         if (CX & 8)
38551                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38552 9B41           8A46         06            mov	al,6[bp]
38553 9B44           24                     08  and	al,*8
38554 9B46           84C0                       test	al,al
38555 9B48           74           0C            je  	.310
38556                       00009B4A            .311:
38557                                           ! 8161             vbe_biosfn_save_video_state(ES, val);
38558                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38559 9B4A           FF76         FA            push	-6[bp]
38560                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38561 9B4D           FF76         0A            push	$A[bp]
38562                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38563 9B50           E8         FDC5            call	_vbe_biosfn_save_video_state
38564 9B53           83C4                   04  add	sp,*4
38565                                           !BCC_EOS
38566                                           ! 8162         break;
38567                       00009B56            .310:
38568 9B56           EB           54            jmp .309
38569                                           !BCC_EOS
38570                                           ! 8163     case 0x02:
38571                                           ! 8164         val = read_word(ss, BX);
38572                       00009B58            .312:
38573                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38574 9B58           FF76         0C            push	$C[bp]
38575                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38576 9B5B           FF76         FE            push	-2[bp]
38577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38578 9B5E           E8         E093            call	_read_word
38579 9B61           83C4                   04  add	sp,*4
38580                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38581 9B64           8946         FA            mov	-6[bp],ax
38582                                           !BCC_EOS
38583                                           ! 8165         val = biosfn_restore_video_state(CX, ES, val);
38584                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38585 9B67           FF76         FA            push	-6[bp]
38586                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38587 9B6A           FF76         0A            push	$A[bp]
38588                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38589 9B6D           FF76         06            push	6[bp]
38590                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38591 9B70           E8         D9A4            call	_biosfn_restore_video_state
38592 9B73           83C4                   06  add	sp,*6
38593                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38594 9B76           8946         FA            mov	-6[bp],ax
38595                                           !BCC_EOS
38596                                           ! 8166         if (CX & 8)
38597                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38598 9B79           8A46         06            mov	al,6[bp]
38599 9B7C           24                     08  and	al,*8
38600 9B7E           84C0                       test	al,al
38601 9B80           74           0C            je  	.313
38602                       00009B82            .314:
38603                                           ! 8167             vbe_biosfn_restore_video_state(ES, val);
38604                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38605 9B82           FF76         FA            push	-6[bp]
38606                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38607 9B85           FF76         0A            push	$A[bp]
38608                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
38609 9B88           E8         FE1F            call	_vbe_biosfn_restore_video_state
38610 9B8B           83C4                   04  add	sp,*4
38611                                           !BCC_EOS
38612                                           ! 8168         break;
38613                       00009B8E            .313:
38614 9B8E           EB           1C            jmp .309
38615                                           !BCC_EOS
38616                                           ! 8169     default:
38617                                           ! 8170         result = 0x100;
38618                       00009B90            .315:
38619                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
38620 9B90           B8                   0100  mov	ax,#$100
38621 9B93           8946         FC            mov	-4[bp],ax
38622                                           !BCC_EOS
38623                                           ! 8171         break;
38624 9B96           EB           14            jmp .309
38625                                           !BCC_EOS
38626                                           ! 8172     }
38627                                           ! 8173     write_word(ss, AX, result);
38628 9B98           EB           12            jmp .309
38629                       00009B9A            .30B:
38630 9B9A           2C                     00  sub	al,*0
38631 9B9C         0F84         FF51            beq 	.30C
38632 9BA0           2C                     01  sub	al,*1
38633 9BA2         0F84         FF7A            beq 	.30F
38634 9BA6           2C                     01  sub	al,*1
38635 9BA8           74           AE            je 	.312
38636 9BAA           EB           E4            jmp	.315
38637                       00009BAC            .309:
38638                       FFFFFFF8            ..FFF4	=	-8
38639                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
38640 9BAC           FF76         FC            push	-4[bp]
38641                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
38642 9BAF           FF76         04            push	4[bp]
38643                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38644 9BB2           FF76         FE            push	-2[bp]
38645                                           ! Debug: func () void = write_word+0 (used reg = )
38646 9BB5           E8         E067            call	_write_word
38647 9BB8           83C4                   06  add	sp,*6
38648                                           !BCC_EOS
38649                                           ! 8174 }
38650 9BBB           89EC                       mov	sp,bp
38651 9BBD           5D                         pop	bp
38652 9BBE           C3                         ret
38653                                           ! 8175 #asm
38654                                           !BCC_ASM
38655                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38656                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38657                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38658                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38659                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38660                       00009BBF            vbe_biosfn_display_window_control:
38661 9BBF           80FB                   00    cmp bl, #0x00
38662 9BC2           75           24              jne vbe_05_failed
38663 9BC4           80FF                   01    cmp bh, #0x01
38664 9BC7           74           16              je get_display_window
38665 9BC9           72           04              jb set_display_window
38666 9BCB           B8                   0100    mov ax, #0x0100
38667 9BCE           C3                           ret
38668                       00009BCF            set_display_window:
38669 9BCF           89D0                         mov ax, dx
38670 9BD1           E8         F5CF              call _dispi_set_bank
38671 9BD4           E8         F5DC              call dispi_get_bank
38672 9BD7           39D0                         cmp ax, dx
38673 9BD9           75           0D              jne vbe_05_failed
38674 9BDB           B8                   004F    mov ax, #0x004f
38675 9BDE           C3                           ret
38676                       00009BDF            get_display_window:
38677 9BDF           E8         F5D1              call dispi_get_bank
38678 9BE2           89C2                         mov dx, ax
38679 9BE4           B8                   004F    mov ax, #0x004f
38680 9BE7           C3                           ret
38681                       00009BE8            vbe_05_failed:
38682 9BE8           B8                   014F    mov ax, #0x014f
38683 9BEB           C3                           ret
38684                                           ! 8200 endasm
38685                                           !BCC_ENDASM
38686                                           ! 8201 #asm
38687                                           !BCC_ASM
38688                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38689                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38690                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38691                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38692                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38693                       00009BEC            vbe_biosfn_set_get_logical_scan_line_length:
38694 9BEC           89C8                         mov ax, cx
38695 9BEE           80FB                   01    cmp bl, #0x01
38696 9BF1           74           24              je get_logical_scan_line_length
38697 9BF3           80FB                   02    cmp bl, #0x02
38698 9BF6           74           06              je set_logical_scan_line_bytes
38699 9BF8           72           1A              jb set_logical_scan_line_pixels
38700 9BFA           B8                   0100    mov ax, #0x0100
38701 9BFD           C3                           ret
38702                       00009BFE            set_logical_scan_line_bytes:
38703 9BFE           50                           push ax
38704 9BFF           E8         F526              call dispi_get_bpp
38705 9C02           30FF                         xor bh, bh
38706 9C04           88E3                         mov bl, ah
38707 9C06           08DB                         or bl, bl
38708 9C08           75           05              jnz no_4bpp_1
38709 9C0A           C1E0                   03    shl ax, #3
38710 9C0D           B3                     01    mov bl, #1
38711                       00009C0F            no_4bpp_1:
38712 9C0F           31D2                         xor dx, dx
38713 9C11           58                           pop ax
38714 9C12           F7F3                         div bx
38715                       00009C14            set_logical_scan_line_pixels:
38716 9C14           E8         F63A              call dispi_set_virt_width
38717                       00009C17            get_logical_scan_line_length:
38718 9C17           E8         F50E              call dispi_get_bpp
38719 9C1A           30FF                         xor bh, bh
38720 9C1C           88E3                         mov bl, ah
38721 9C1E           E8         F643              call dispi_get_virt_width
38722 9C21           89C1                         mov cx, ax
38723 9C23           08DB                         or bl, bl
38724 9C25           75           05              jnz no_4bpp_2
38725 9C27           C1E8                   03    shr ax, #3
38726 9C2A           B3                     01    mov bl, #1
38727                       00009C2C            no_4bpp_2:
38728 9C2C           F7E3                         mul bx
38729 9C2E           89C3                         mov bx, ax
38730 9C30           E8         F63F              call dispi_get_virt_height
38731 9C33           89C2                         mov dx, ax
38732 9C35           B8                   004F    mov ax, #0x004f
38733 9C38           C3                           ret
38734                                           ! 8243 endasm
38735                                           !BCC_ENDASM
38736                                           ! 8244 #asm
38737                                           !BCC_ASM
38738                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38739                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38740                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38741                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38742                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38743                       00009C39            vbe_biosfn_set_get_display_start:
38744 9C39           80FB                   80    cmp bl, #0x80
38745 9C3C           74           0B              je set_display_start
38746 9C3E           80FB                   01    cmp bl, #0x01
38747 9C41           74           14              je get_display_start
38748 9C43           72           04              jb set_display_start
38749 9C45           B8                   0100    mov ax, #0x0100
38750 9C48           C3                           ret
38751                       00009C49            set_display_start:
38752 9C49           89C8                         mov ax, cx
38753 9C4B           E8         F5AA              call dispi_set_x_offset
38754 9C4E           89D0                         mov ax, dx
38755 9C50           E8         F5C3              call dispi_set_y_offset
38756 9C53           B8                   004F    mov ax, #0x004f
38757 9C56           C3                           ret
38758                       00009C57            get_display_start:
38759 9C57           E8         F5AE              call dispi_get_x_offset
38760 9C5A           89C1                         mov cx, ax
38761 9C5C           E8         F5C7              call dispi_get_y_offset
38762 9C5F           89C2                         mov dx, ax
38763 9C61           30FF                         xor bh, bh
38764 9C63           B8                   004F    mov ax, #0x004f
38765 9C66           C3                           ret
38766                                           ! 8268 endasm
38767                                           !BCC_ENDASM
38768                                           ! 8269 #asm
38769                                           !BCC_ASM
38770                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38771                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38772                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38773                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38774                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38775                       00009C67            vbe_biosfn_set_get_dac_palette_format:
38776 9C67           80FB                   01    cmp bl, #0x01
38777 9C6A           74           1E              je get_dac_palette_format
38778 9C6C           72           04              jb set_dac_palette_format
38779 9C6E           B8                   0100    mov ax, #0x0100
38780 9C71           C3                           ret
38781                       00009C72            set_dac_palette_format:
38782 9C72           E8         F520              call dispi_get_enable
38783 9C75           80FF                   06    cmp bh, #0x06
38784 9C78           74           0A              je set_normal_dac
38785 9C7A           80FF                   08    cmp bh, #0x08
38786 9C7D           75           1B              jne vbe_08_unsupported
38787 9C7F           0D                   0020    or ax, # 0x20
38788 9C82           75           03              jnz set_dac_mode
38789                       00009C84            set_normal_dac:
38790 9C84           25                   FFDF    and ax, #~ 0x20
38791                       00009C87            set_dac_mode:
38792 9C87           E8         F4FB              call _dispi_set_enable
38793                       00009C8A            get_dac_palette_format:
38794 9C8A           B7                     06    mov bh, #0x06
38795 9C8C           E8         F506              call dispi_get_enable
38796 9C8F           25                   0020    and ax, # 0x20
38797 9C92           74           02              jz vbe_08_ok
38798 9C94           B7                     08    mov bh, #0x08
38799                       00009C96            vbe_08_ok:
38800 9C96           B8                   004F    mov ax, #0x004f
38801 9C99           C3                           ret
38802                       00009C9A            vbe_08_unsupported:
38803 9C9A           B8                   014F    mov ax, #0x014f
38804 9C9D           C3                           ret
38805                                           ! 8300 endasm
38806                                           !BCC_ENDASM
38807                                           ! 8301 void vbe_biosfn_set_get_palette_data(AX)
38808                                           ! 8302 {
38809                                           export	_vbe_biosfn_set_get_palette_data
38810                       00009C9E            _vbe_biosfn_set_get_palette_data:
38811                                           ! 8303 }
38812 9C9E           C3                         ret
38813                                           ! 8304 #asm
38814                                           !BCC_ASM
38815                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38816                       00009C9F            vbe_biosfn_return_protected_mode_interface:
38817 9C9F           84DB                         test bl, bl
38818 9CA1           75           11              jnz _fail
38819 9CA3           BF                   C000    mov di, #0xc000
38820 9CA6           8EC7                         mov es, di
38821 9CA8           BF                   8FB6    mov di, # vesa_pm_start
38822 9CAB           B9                   90B7    mov cx, # vesa_pm_end
38823 9CAE           29F9                         sub cx, di
38824 9CB0           B8                   004F    mov ax, #0x004f
38825 9CB3           C3                           ret
38826                       00009CB4            _fail:
38827 9CB4           B8                   014F    mov ax, #0x014f
38828 9CB7           C3                           ret
38829                                           ! 8318 endasm
38830                                           !BCC_ENDASM
38831                                           ! 8319 #asm
38832                                           !BCC_ASM
38833                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38834                                           ;; DATA_SEG_DEFS_HERE
38835                                           ! 8321 endasm
38836                                           !BCC_ENDASM
38837                                           ! 8322 #asm
38838                                           !BCC_ASM
38839                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38840 9CB8                        76            .ascii "vgabios ends here"
38841 9CC9                        00            .byte 0x00
38842                       00009CCA            vgabios_end:
38843 9CCA                        CB            .byte 0xCB
38844                                           ;; BLOCK_STRINGS_BEGIN
38845                                           ! 8328 endasm
38846                                           !BCC_ENDASM
38847                                           ! 8329 
38848                                           
38849 9CCB                                      .bss
38850                                           
38851                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B8D A   .10                         0 368C A   
.100                        0 4CB2 A   .101                        0 4CAB A   
.102                        0 4CA2 A   .103                        0 4E4C A   
.104                        0 4DBE A   .105                        0 4D34 A   
.106                        0 4DBB A   .107                        0 4DAA A   
.108                        0 4DB1 A   .109                        0 4D3E A   
.10A                        0 4D82 A   .10B                        0 4D5C A   
.10C                        0 4D55 A   .10D                        0 4DAA A   
.10E                        0 4DBB A   .10F                        0 4E4C A   
.11                         0 36BB A   .110                        0 4E4C A   
.111                        0 4E39 A   .112                        0 4E40 A   
.113                        0 4DC8 A   .114                        0 4E05 A   
.115                        0 4DDF A   .116                        0 4DD8 A   
.117                        0 4E2D A   .118                        0 4E39 A   
.119                        0 4E37 A   .11A                        0 4E4C A   
.11B                        0 4E4F A   .11C                        0 4EE2 A   
.11D                        0 4E9D A   .11E                        0 4E8B A   
.11F                        0 4E79 A   .12                         0 36AB A   
.120                        0 4E72 A   .121                        0 4E6B A   
.122                        0 5026 A   .123                        0 4F05 A   
.124                        0 4EE9 A   .125                        0 4F98 A   
.126                        0 4F0E A   .127                        0 4F95 A   
.128                        0 4F84 A   .129                        0 4F8B A   
.12A                        0 4F18 A   .12B                        0 4F5C A   
.12C                        0 4F36 A   .12D                        0 4F2F A   
.12E                        0 4F84 A   .12F                        0 4F95 A   
.13                         0 36C0 A   .130                        0 5026 A   
.131                        0 5026 A   .132                        0 5013 A   
.133                        0 501A A   .134                        0 4FA2 A   
.135                        0 4FDF A   .136                        0 4FB9 A   
.137                        0 4FB2 A   .138                        0 5007 A   
.139                        0 5013 A   .13A                        0 5011 A   
.13B                        0 5026 A   .13C                        0 5078 A   
.13D                        0 5074 A   .13E                        0 5137 A   
.13F                        0 50D9 A   .14                         0 36D7 A   
.140                        0 5137 A   .141                        0 5168 A   
.143                        0 515E A   .144                        0 5146 A   
.145                        0 514E A   .146                        0 5156 A   
.147                        0 51D5 A   .148                        0 51C5 A   
.149                        0 51E3 A   .14A                        0 529B A   
.14B                        0 528A A   .14C                        0 5291 A   
.14D                        0 51EB A   .14E                        0 528A A   
.14F                        0 527A A   .15                         0 36EB A   
.150                        0 5281 A   .151                        0 5208 A   
.152                        0 526A A   .153                        0 5253 A   
.154                        0 527A A   .155                        0 528A A   
.156                        0 529B A   .157                        0 54AD A   
.158                        0 549D A   .159                        0 54A4 A   
.15A                        0 52F1 A   .15B                        0 5315 A   
.15C                        0 530C A   .15D                        0 53D6 A   
.15E                        0 5323 A   .15F                        0 533E A   
.16                         0 3704 A   .160                        0 532C A   
.161                        0 5343 A   .162                        0 53C0 A   
.163                        0 53B2 A   .164                        0 53B9 A   
.165                        0 534A A   .166                        0 53A8 A   
.167                        0 5361 A   .168                        0 538A A   
.169                        0 536A A   .16A                        0 53A8 A   
.16B                        0 53C0 A   .16C                        0 549D A   
.16D                        0 549D A   .16E                        0 5494 A   
.16F                        0 53D9 A   .17                         0 371B A   
.170                        0 53F4 A   .171                        0 53E2 A   
.172                        0 53F9 A   .173                        0 547A A   
.174                        0 546C A   .175                        0 5473 A   
.176                        0 5400 A   .177                        0 5462 A   
.178                        0 5417 A   .179                        0 5442 A   
.17A                        0 5420 A   .17B                        0 5462 A   
.17C                        0 547A A   .17D                        0 549D A   
.17E                        0 54AD A   .17F                        0 5581 A   
.18                         0 3729 A   .180                        0 5571 A   
.181                        0 5578 A   .182                        0 54F7 A   
.183                        0 5571 A   .184                        0 5563 A   
.185                        0 556A A   .186                        0 551D A   
.187                        0 553F A   .188                        0 5539 A   
.189                        0 5571 A   .18A                        0 5581 A   
.18B                        0 55B5 A   .18C                        0 55B1 A   
.18D                        0 5680 A   .18E                        0 5616 A   
.18F                        0 5773 A   .19                         0 3764 A   
.190                        0 5773 A   .191                        0 575B A   
.192                        0 56B5 A   .193                        0 5754 A   
.195                        0 5740 A   .196                        0 56C9 A   
.197                        0 56C9 A   .198                        0 56F2 A   
.199                        0 571B A   .19A                        0 5773 A   
.19B                        0 5767 A   .19C                        0 57A7 A   
.19D                        0 57A3 A   .19E                        0 5876 A   
.19F                        0 5808 A   .1A                         0 379E A   
.1A0                        0 5873 A   .1A1                        0 5867 A   
.1A2                        0 583E A   .1A3                        0 5873 A   
.1A4                        0 5969 A   .1A5                        0 5969 A   
.1A6                        0 5951 A   .1A7                        0 58AB A   
.1A8                        0 594A A   .1AA                        0 5936 A   
.1AB                        0 58BF A   .1AC                        0 58BF A   
.1AD                        0 58E8 A   .1AE                        0 5911 A   
.1AF                        0 5969 A   .1B                         0 37B3 A   
.1B0                        0 595D A   .1B1                        0 5A15 A   
.1B2                        0 5A11 A   .1B3                        0 5A2F A   
.1B4                        0 5A2B A   .1B5                        0 5C7D A   
.1B7                        0 5C67 A   .1B8                        0 5A44 A   
.1B9                        0 5A44 A   .1BA                        0 5AC5 A   
.1BB                        0 5AB7 A   .1BC                        0 5AEA A   
.1BD                        0 5B1C A   .1BE                        0 5B00 A   
.1BF                        0 5B36 A   .1C                         0 37D3 A   
.1C0                        0 5B48 A   .1C1                        0 5B3F A   
.1C2                        0 5BB4 A   .1C3                        0 5B6E A   
.1C4                        0 5BF4 A   .1C5                        0 5C08 A   
.1C6                        0 5BFD A   .1C7                        0 5C1E A   
.1C8                        0 5C33 A   .1C9                        0 5CB7 A   
.1CA                        0 5CB3 A   .1CB                        0 5CD1 A   
.1CC                        0 5CCD A   .1CD                        0 5E65 A   
.1CF                        0 5E4D A   .1D                         0 37F3 A   
.1D0                        0 5CE6 A   .1D1                        0 5CE6 A   
.1D2                        0 5D7A A   .1D3                        0 5D6C A   
.1D4                        0 5D73 A   .1D5                        0 5D28 A   
.1D6                        0 5D6C A   .1D7                        0 5D58 A   
.1D8                        0 5D7A A   .1D9                        0 5D7D A   
.1DA                        0 5DA9 A   .1DB                        0 5DA0 A   
.1DC                        0 5DF4 A   .1DD                        0 5DCF A   
.1DE                        0 5E15 A   .1DF                        0 5E17 A   
.1E                         0 3810 A   .1E0                        0 5E46 A   
.1E1                        0 5EA5 A   .1E2                        0 5E94 A   
.1E3                        0 5ECF A   .1E4                        0 5ECB A   
.1E5                        0 612E A   .1E7                        0 610D A   
.1E8                        0 5F20 A   .1E9                        0 5F23 A   
.1EA                        0 5F31 A   .1EB                        0 5F2A A   
.1EC                        0 5F34 A   .1ED                        0 5F3C A   
.1EE                        0 5F46 A   .1EF                        0 5F93 A   
.1F                         0 382B A   .1F0                        0 5F88 A   
.1F1                        0 5F46 A   .1F2                        0 5F93 A   
.1F3                        0 5F96 A   .1F4                        0 6032 A   
.1F5                        0 5FAE A   .1F6                        0 602F A   
.1F7                        0 600C A   .1F8                        0 6104 A   
.1F9                        0 6104 A   .1FB                        0 60F0 A   
.1FC                        0 6079 A   .1FD                        0 6079 A   
.1FE                        0 60A2 A   .1FF                        0 60CB A   
.20                         0 3848 A   .200                        0 6144 A   
.201                        0 6138 A   .202                        0 6219 A   
.203                        0 6150 A   .204                        0 61E9 A   
.205                        0 6168 A   .206                        0 6210 A   
.207                        0 65C6 A   .208                        0 65B5 A   
.209                        0 65BC A   .20A                        0 64FE A   
.20B                        0 6571 A   .20C                        0 656B A   
.20D                        0 65C6 A   .20E                        0 66A7 A   
.20F                        0 6697 A   .21                         0 3857 A   
.210                        0 66BF A   .211                        0 6804 A   
.212                        0 67F5 A   .213                        0 67FC A   
.214                        0 67B8 A   .215                        0 6804 A   
.216                        0 6819 A   .217                        0 680E A   
.218                        0 689D A   .219                        0 688E A   
.21A                        0 6895 A   .21B                        0 6854 A   
.21C                        0 689D A   .21D                        0 68B0 A   
.21E                        0 68A7 A   .21F                        0 692E A   
.22                         0 3992 A   .220                        0 691F A   
.221                        0 6926 A   .222                        0 68EB A   
.223                        0 692E A   .224                        0 6941 A   
.225                        0 6938 A   .226                        0 69CC A   
.227                        0 69BD A   .228                        0 69C4 A   
.229                        0 6989 A   .22A                        0 69CC A   
.22B                        0 69DF A   .22C                        0 69D6 A   
.22D                        0 6B61 A   .22F                        0 6B3C A   
.230                        0 69F9 A   .231                        0 6A30 A   
.232                        0 6A67 A   .233                        0 6A8A A   
.234                        0 6AAD A   .235                        0 6AD0 A   
.236                        0 6AF2 A   .237                        0 6B14 A   
.238                        0 6B36 A   .239                        0 6B5F A   
.23A                        0 6B4F A   .23B                        0 6CD1 A   
.23C                        0 6CBF A   .23D                        0 6D5B A   
.23E                        0 6D4F A   .23F                        0 6D00 A   
.24                         0 393E A   .240                        0 6D33 A   
.241                        0 6D1E A   .242                        0 6D5B A   
.243                        0 6D73 A   .244                        0 6D64 A   
.245                        0 6EFE A   .246                        0 6EF5 A   
.247                        0 6F10 A   .248                        0 6F07 A   
.249                        0 6F22 A   .24A                        0 6F19 A   
.24B                        0 71D5 A   .24C                        0 6F6F A   
.24D                        0 705A A   .24E                        0 704B A   
.24F                        0 7052 A   .25                         0 385D A   
.250                        0 701F A   .251                        0 705A A   
.252                        0 70C8 A   .253                        0 70B9 A   
.254                        0 70C0 A   .255                        0 708D A   
.256                        0 70C8 A   .257                        0 711B A   
.258                        0 710C A   .259                        0 7113 A   
.25A                        0 70CF A   .25B                        0 711B A   
.25C                        0 7166 A   .25D                        0 7157 A   
.25E                        0 715E A   .25F                        0 712B A   
.26                         0 385D A   .260                        0 7166 A   
.261                        0 7450 A   .262                        0 71E0 A   
.263                        0 7381 A   .264                        0 7372 A   
.265                        0 7379 A   .266                        0 734A A   
.267                        0 7381 A   .268                        0 7510 A   
.269                        0 745B A   .26A                        0 74FA A   
.26B                        0 74EB A   .26C                        0 74F2 A   
.26D                        0 74CC A   .26E                        0 74FA A   
.26F                        0 77D2 A   .27                         0 3886 A   
.270                        0 7528 A   .271                        0 7597 A   
.272                        0 7588 A   .273                        0 758F A   
.274                        0 755B A   .275                        0 7597 A   
.276                        0 761C A   .277                        0 760D A   
.278                        0 7614 A   .279                        0 75D8 A   
.27A                        0 7606 A   .27B                        0 75E0 A   
.27C                        0 761C A   .27D                        0 763E A   
.27E                        0 7636 A   .27F                        0 76DF A   
.28                         0 3886 A   .280                        0 76D0 A   
.281                        0 76D7 A   .282                        0 769B A   
.283                        0 76DF A   .284                        0 7738 A   
.285                        0 7729 A   .286                        0 7730 A   
.287                        0 76FC A   .288                        0 7738 A   
.289                        0 7A4D A   .28A                        0 77DD A   
.28B                        0 797E A   .28C                        0 796F A   
.28D                        0 7976 A   .28E                        0 7947 A   
.28F                        0 797E A   .29                         0 389B A   
.290                        0 7AEE A   .291                        0 7A58 A   
.292                        0 7ADA A   .293                        0 7ACB A   
.294                        0 7AD2 A   .295                        0 7AAB A   
.296                        0 7ADA A   .297                        0 7B30 A   
.298                        0 7B22 A   .299                        0 7B29 A   
.29A                        0 7B06 A   .29B                        0 7B22 A   
.29C                        0 7B1A A   .29D                        0 7B30 A   
.29E                        0 7DA9 A   .29F                        0 7D93 A   
.2A                         0 389B A   .2A0                        0 7C8F A   
.2A1                        0 7CA4 A   .2A2                        0 7C96 A   
.2A3                        0 7D8C A   .2A4                        0 7D7C A   
.2A5                        0 7CAD A   .2A6                        0 7CDC A   
.2A7                        0 7CBB A   .2A8                        0 7CB4 A   
.2A9                        0 7D7A A   .2AA                        0 7D7A A   
.2AB                        0 7CE5 A   .2AC                        0 7D09 A   
.2AD                        0 7D03 A   .2AE                        0 7D75 A   
.2AF                        0 7D66 A   .2B                         0 38B0 A   
.2B0                        0 7D6D A   .2B1                        0 7D1C A   
.2B2                        0 7D4E A   .2B3                        0 7D3B A   
.2B4                        0 7D5F A   .2B5                        0 7D75 A   
.2B6                        0 7D8C A   .2B7                        0 7DA9 A   
.2B8                        0 93B2 A   .2B9                        0 93A7 A   
.2BA                        0 9364 A   .2BB                        0 939E A   
.2BC                        0 936E A   .2BD                        0 937E A   
.2BE                        0 9375 A   .2BF                        0 939C A   
.2C                         0 38B0 A   .2C0                        0 9393 A   
.2C1                        0 938A A   .2C2                        0 939C A   
.2C3                        0 93A7 A   .2C4                        0 93B2 A   
.2C5                        0 94CC A   .2C6                        0 94C5 A   
.2C7                        0 94A5 A   .2C8                        0 949D A   
.2C9                        0 9495 A   .2CA                        0 948D A   
.2CB                        0 94BD A   .2CC                        0 94B5 A   
.2CD                        0 94AD A   .2CE                        0 9590 A   
.2CF                        0 9545 A   .2D                         0 38C5 A   
.2D0                        0 95A8 A   .2D1                        0 9655 A   
.2D2                        0 9647 A   .2D3                        0 95A8 A   
.2D4                        0 963C A   .2D5                        0 9610 A   
.2D6                        0 9606 A   .2D7                        0 95EF A   
.2D8                        0 963C A   .2D9                        0 9655 A   
.2DA                        0 96AD A   .2DB                        0 96AF A   
.2DC                        0 976A A   .2DD                        0 96DE A   
.2DE                        0 971E A   .2DF                        0 9718 A   
.2E                         0 38D4 A   .2E0                        0 9744 A   
.2E1                        0 9733 A   .2E2                        0 9762 A   
.2E3                        0 974E A   .2E4                        0 9770 A   
.2E5                        0 9790 A   .2E6                        0 9778 A   
.2E7                        0 97C0 A   .2E8                        0 97C2 A   
.2E9                        0 97D2 A   .2EA                        0 97CE A   
.2EB                        0 97D4 A   .2EC                        0 97E6 A   
.2ED                        0 97E2 A   .2EE                        0 97E8 A   
.2EF                        0 981F A   .2F                         0 38F2 A   
.2F0                        0 97FC A   .2F1                        0 98C4 A   
.2F2                        0 983B A   .2F3                        0 9856 A   
.2F4                        0 984D A   .2F5                        0 98D8 A   
.2F6                        0 98D8 A   .2F7                        0 98D2 A   
.2F8                        0 995C A   .2F9                        0 9958 A   
.2FA                        0 99A6 A   .2FB                        0 9997 A   
.2FC                        0 999E A   .2FD                        0 9964 A   
.2FE                        0 9997 A   .2FF                        0 996C A   
.3                          0 3B39 A   .30                         0 3900 A   
.300                        0 99A6 A   .301                        0 99EE A   
.302                        0 99D0 A   .303                        0 9AD3 A   
.304                        0 9AD3 A   .305                        0 9AC4 A   
.306                        0 9ACB A   .307                        0 9A98 A   
.308                        0 9AD3 A   .309                        0 9BAC A   
.30B                        0 9B9A A   .30C                        0 9AF1 A   
.30D                        0 9B0E A   .30E                        0 9B05 A   
.30F                        0 9B20 A   .31                         0 390E A   
.310                        0 9B56 A   .311                        0 9B4A A   
.312                        0 9B58 A   .313                        0 9B8E A   
.314                        0 9B82 A   .315                        0 9B90 A   
.32                         0 391C A   .33                         0 3995 A   
.34                         0 39E2 A   .36                         0 39D6 A   
.37                         0 399A A   .38                         0 399F A   
.39                         0 39BD A   .3A                         0 39E5 A   
.3B                         0 3A19 A   .3C                         0 3A35 A   
.3D                         0 3A79 A   .3F                         0 3A6D A   
.4                          0 3662 A   .40                         0 3A3A A   
.41                         0 3A49 A   .42                         0 3A5A A   
.43                         0 3A86 A   .44                         0 3B2F A   
.45                         0 3A8F A   .46                         0 3B2D A   
.48                         0 3B02 A   .49                         0 3A94 A   
.4A                         0 3AA7 A   .4B                         0 3ABC A   
.4C                         0 3AD1 A   .4D                         0 3AEA A   
.4E                         0 3AF2 A   .4F                         0 3AFA A   
.5                          0 36BD A   .50                         0 3B2B A   
.51                         0 3B15 A   .52                         0 3B35 A   
.53                         0 3B86 A   .54                         0 3B4C A   
.55                         0 3BAD A   .56                         0 3BA5 A   
.57                         0 3BCE A   .58                         0 3BCA A   
.59                         0 3DA1 A   .5A                         0 3C5C A   
.5B                         0 3CCE A   .5D                         0 3CBE A   
.5E                         0 3C9C A   .5F                         0 3CA4 A   
.60                         0 3CAC A   .61                         0 3CB4 A   
.62                         0 3D8B A   .63                         0 3D7A A   
.64                         0 3D81 A   .65                         0 3CD6 A   
.66                         0 3D53 A   .67                         0 3CF7 A   
.68                         0 3D7A A   .69                         0 3D8B A   
.6A                         0 3DA1 A   .6B                         0 3D94 A   
.6C                         0 3DF1 A   .6D                         0 3DE2 A   
.6E                         0 3DE9 A   .6F                         0 3DB1 A   
.7                          0 3698 A   .70                         0 3DF1 A   
.71                         0 3E76 A   .72                         0 3E67 A   
.73                         0 3E6E A   .74                         0 3E2F A   
.75                         0 3E76 A   .76                         0 3EBD A   
.77                         0 3EAE A   .78                         0 3EB5 A   
.79                         0 3E7D A   .7A                         0 3EBD A   
.7B                         0 3ED8 A   .7C                         0 3ED3 A   
.7D                         0 3EDB A   .7E                         0 3F32 A   
.7F                         0 3F23 A   .8                          0 3674 A   
.80                         0 3F2A A   .81                         0 3EF2 A   
.82                         0 3F32 A   .83                         0 4032 A   
.84                         0 3F71 A   .85                         0 3FAD A   
.86                         0 3F87 A   .87                         0 4032 A   
.88                         0 3FD8 A   .89                         0 3FB4 A   
.8A                         0 4032 A   .8B                         0 416F A   
.8C                         0 4161 A   .8D                         0 4191 A   
.8E                         0 4182 A   .8F                         0 4189 A   
.9                          0 3680 A   .90                         0 4176 A   
.91                         0 4191 A   .92                         0 41BD A   
.93                         0 41AF A   .94                         0 4223 A   
.96                         0 4214 A   .97                         0 41D5 A   
.98                         0 41EA A   .99                         0 41FE A   
.9A                         0 42F1 A   .9B                         0 42A1 A   
.9C                         0 429A A   .9D                         0 4293 A   
.9E                         0 428B A   .9F                         0 42CA A   
.A                          0 3680 A   .A0                         0 42B5 A   
.A1                         0 42DE A   .A2                         0 4353 A   
.A3                         0 434F A   .A4                         0 443E A   
.A5                         0 4386 A   .A6                         0 4476 A   
.A7                         0 4472 A   .A8                         0 44C8 A   
.A9                         0 44C4 A   .AA                         0 44F2 A   
.AB                         0 44EE A   .AC                         0 458A A   
.AD                         0 451C A   .AE                         0 45AE A   
.AF                         0 46D6 A   .B                          0 3680 A   
.B0                         0 46C7 A   .B1                         0 46CE A   
.B2                         0 468B A   .B3                         0 46D6 A   
.B4                         0 4761 A   .B5                         0 4752 A   
.B6                         0 4759 A   .B7                         0 4728 A   
.B8                         0 4761 A   .B9                         0 4881 A   
.BA                         0 4870 A   .BB                         0 4877 A   
.BC                         0 47CF A   .BD                         0 482E A   
.BE                         0 47D8 A   .BF                         0 4870 A   
.C                          0 3680 A   .C0                         0 4881 A   
.C1                         0 4936 A   .C2                         0 4927 A   
.C3                         0 492E A   .C4                         0 48B9 A   
.C5                         0 48FA A   .C6                         0 48C2 A   
.C7                         0 4927 A   .C8                         0 4936 A   
.C9                         0 494C A   .CA                         0 4948 A   
.CB                         0 4958 A   .CC                         0 4954 A   
.CD                         0 4982 A   .CE                         0 497E A   
.CF                         0 49BF A   .D                          0 3680 A   
.D0                         0 49AE A   .D1                         0 49D0 A   
.D2                         0 49C9 A   .D3                         0 49E1 A   
.D4                         0 49DA A   .D5                         0 49F0 A   
.D6                         0 49EB A   .D7                         0 4C67 A   
.D8                         0 4A17 A   .D9                         0 4AA1 A   
.DA                         0 4A6C A   .DB                         0 4A5A A   
.DC                         0 4A48 A   .DD                         0 4A41 A   
.DE                         0 4A3A A   .DF                         0 4C64 A   
.E                          0 3680 A   .E0                         0 4B86 A   
.E1                         0 4AAA A   .E2                         0 4B83 A   
.E3                         0 4B70 A   .E4                         0 4B77 A   
.E5                         0 4AB5 A   .E6                         0 4B15 A   
.E7                         0 4AD3 A   .E8                         0 4ACC A   
.E9                         0 4B70 A   .EA                         0 4B83 A   
.EB                         0 4C64 A   .EC                         0 4C64 A   
.ED                         0 4C51 A   .EE                         0 4C58 A   
.EF                         0 4B91 A   .F                          0 3680 A   
.F0                         0 4BEA A   .F1                         0 4BA8 A   
.F2                         0 4BA1 A   .F3                         0 4C45 A   
.F4                         0 4C51 A   .F5                         0 4C4F A   
.F6                         0 4C64 A   .F7                         0 503C A   
.F8                         0 503C A   .FA                         0 502A A   
.FB                         0 4C99 A   .FC                         0 4C99 A   
.FD                         0 4D2B A   .FE                         0 4CD6 A   
.FF                         0 4CC4 A   _biosfn_alternate_prtsc     0 6BC2 A   
_biosfn_enable_video_refre+ 0 6C9D A   _biosfn_get_cursor_pos      0 4442 A   
_biosfn_get_font_info       0 69E8 A   _biosfn_load_gfx_8_14_char+ 0 69E5 A   
_biosfn_load_gfx_8_16_char+ 0 69E7 A   _biosfn_load_gfx_8_8_chars  0 69E3 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 69E6 A   _biosfn_load_gfx_user_char+ 0 69E4 A   
_biosfn_load_text_8_14_pat  0 681D A   _biosfn_load_text_8_16_pat  0 6952 A   
_biosfn_load_text_8_8_pat   0 68B4 A   _biosfn_load_text_user_pat  0 6781 A   
_biosfn_perform_gray_scale+ 0 64DA A   _biosfn_read_char_attr      0 5040 A   
_biosfn_read_pixel          0 5C81 A   _biosfn_read_state_info     0 6DAA A   
_biosfn_read_video_state_s+ 0 6F29 A   _biosfn_read_video_state_s+ 0 6EE2 A   
_biosfn_restore_video_stat+ 0 7517 A   _biosfn_save_video_state    0 6F4D A   
_biosfn_scroll              0 493A A   _biosfn_set_active_page     0 44B7 A   
_biosfn_set_cursor_pos      0 4342 A   _biosfn_set_cursor_shape    0 4227 A   
_biosfn_set_video_mode      0 3B8F A   _biosfn_switch_video_inter+ 0 6C9C A   
_biosfn_write_char_attr     0 5585 A   _biosfn_write_char_only     0 5777 A   
_biosfn_write_pixel         0 59E5 A   _biosfn_write_string        0 6C9E A   
_biosfn_write_teletype      0 5E87 A   _dac_regs                   0 0286 A   
_dispi_get_max_bpp          0 9163 A   _dispi_get_max_xres         0 9141 A   
_dispi_set_bank             0 91A3 A   _dispi_set_bank_farcall     0 91C1 A   
_dispi_set_bpp              0 910A A   _dispi_set_enable           0 9185 A   
_dispi_set_xres             0 90D5 A   _dispi_set_yres             0 90EC A   
_display_info               0 3610 A   _display_splash_screen      0 360F A   
_display_string             0 362E A   _fail                       0 9CB4 A   
_find_vga_entry             0 7AF5 A   _get_SS                     0 7C6D A E 
_get_font_access            0 65E1 A   _inb                        0 7C37 A E 
_int10_func                 0 3655 A   _inw                        0 7C42 A E 
_line_to_vpti               0 0276 A   _memcpyb                    0 7B81 A   
_memcpyw                    0 7BB1 A   _memsetb                    0 7B37 A   
_memsetw                    0 7B5C A   _mode_info_find_mode        0 9357 A   
_mode_info_list             0 7E07 A   _no_vbebios_info_string     0 8F51 A   
_outb                       0 7C4D A E _outw                       0 7C5D A E 
_palette0                   0 0A0A A   _palette1                   0 0ACA A   
_palette2                   0 0B8A A   _palette3                   0 0C4A A   
_pci_get_lfb_addr           0 7DAD A   _printf                     0 7C70 A E 
_read_byte                  0 7BE1 A   _read_word                  0 7BF4 A   
_release_font_access        0 6604 A   _set_scan_lines             0 6638 A   
_static_functionality       0 0F4A A   _vbe_biosfn_read_video_sta+ 0 9910 A E 
_vbe_biosfn_restore_video_+ 0 99AA A E _vbe_biosfn_return_control+ 0 942F A E 
_vbe_biosfn_return_mode_in+ 0 9687 A E _vbe_biosfn_save_restore_s+ 0 9AD7 A E 
_vbe_biosfn_save_video_sta+ 0 9918 A E _vbe_biosfn_set_get_palett+ 0 9C9E A E 
_vbe_biosfn_set_mode        0 97A3 A E _vbe_has_vbe_display        0 93B8 A   
_vbebios_copyright          0 8E7F A   _vbebios_info_string        0 8F2B A   
_vbebios_product_name       0 8EDD A   _vbebios_product_revision   0 8EF6 A   
_vbebios_vendor_name        0 8EC5 A   _vga_compat_setup           0 9280 A   
_vga_modes                  0 01F6 A   _vgafont14                  0 175A A   
_vgafont14alt               0 355A A   _vgafont16                  0 255A A   
_vgafont16alt               0 355B A   _vgafont8                   0 0F5A A   
_vgamem_copy_cga            0 4773 A   _vgamem_copy_pl4            0 4626 A   
_vgamem_fill_cga            0 4885 A   _vgamem_fill_pl4            0 46E8 A   
_video_param_table          0 028A A   _video_save_pointer_table   0 35F3 A   
_write_byte                 0 7C07 A   _write_gfx_char_cga         0 52AE A   
_write_gfx_char_lin         0 54B1 A   _write_gfx_char_pl4         0 513B A   
_write_word                 0 7C1F A   biosfn_enable_cursor_emula+ 0 6C7A A   
biosfn_enable_default_pale+ 0 6C16 A   biosfn_enable_grayscale_su+ 0 6C56 A   
biosfn_enable_video_addres+ 0 6C38 A   biosfn_get_all_palette_reg  0 637F A   
biosfn_get_ega_info         0 6B9F A   biosfn_get_single_palette_+ 0 634D A   
biosfn_get_video_mode       0 624A A   biosfn_group_0B             0 596D A   
biosfn_group_10             0 6271 A   biosfn_group_1A             0 6D77 A   
biosfn_read_all_dac_reg     0 645F A   biosfn_read_display_code    0 6D80 A   
biosfn_read_overscan_borde+ 0 6371 A   biosfn_read_pel_mask        0 6492 A   
biosfn_read_single_dac_reg  0 6444 A   biosfn_read_video_dac_stat+ 0 649D A   
biosfn_select_vert_res      0 6BC3 A   biosfn_select_video_dac_co+ 0 6401 A   
biosfn_set_all_dac_reg      0 63D9 A   biosfn_set_all_palette_reg  0 62FA A   
biosfn_set_border_color     0 5978 A   biosfn_set_display_code     0 6D95 A   
biosfn_set_overscan_border+ 0 62F2 A   biosfn_set_palette          0 59B7 A   
biosfn_set_pel_mask         0 6487 A   biosfn_set_single_dac_reg   0 63C0 A   
biosfn_set_single_palette_+ 0 62D8 A   biosfn_set_text_block_spec+ 0 6945 A   
biosfn_toggle_intensity     0 6327 A   bit8_clear                  0 92C8 A   
bit9_clear                  0 92CF A   bpp4_mode                   0 9069 A   
dispi_get_bank              0 91B3 A   dispi_get_bpp               0 9128 A   
dispi_get_enable            0 9195 A   dispi_get_id                0 90B7 A   
dispi_get_virt_height       0 9272 A   dispi_get_virt_width        0 9264 A   
dispi_get_x_offset          0 9208 A   dispi_get_y_offset          0 9226 A   
dispi_set_bank_farcall_err+ 0 91F3 A   dispi_set_bank_farcall_get  0 91E5 A   
dispi_set_id                0 90C5 A   dispi_set_virt_width        0 9251 A   
dispi_set_x_offset          0 91F8 A   dispi_set_y_offset          0 9216 A   
get_bpp_noinc               0 913F A   get_dac_16_page             0 64CD A   
get_dac_palette_format      0 9C8A A   get_display_start           0 9C57 A   
get_display_window          0 9BDF A   get_logical_scan_line_leng+ 0 9C17 A   
get_palette_loop            0 6387 A   idiv_u                      0 6633 A   
illegal_window              0 8FFC A   init_bios_area              0 35BB A   
init_vga_card               0 355C A   int10_end                   0 01F4 A   
int10_group_10_unknown      0 62D7 A   int10_normal                0 01E6 A   
int10_test_0B               0 0143 A   int10_test_1001             0 6277 A   
int10_test_1002             0 627D A   int10_test_1003             0 6283 A   
int10_test_1007             0 628A A   int10_test_1008             0 6291 A   
int10_test_1009             0 6298 A   int10_test_1010             0 629F A   
int10_test_1012             0 62A6 A   int10_test_1013             0 62AD A   
int10_test_1015             0 62B4 A   int10_test_1017             0 62BB A   
int10_test_1018             0 62C2 A   int10_test_1019             0 62C9 A   
int10_test_101A             0 62D0 A   int10_test_101B             0 019C A   
int10_test_1103             0 014E A   int10_test_12               0 0159 A   
int10_test_1A               0 0138 A   int10_test_4F               0 01AB A   
int10_test_BL30             0 0169 A   int10_test_BL31             0 0174 A   
int10_test_BL32             0 017E A   int10_test_BL33             0 0188 A   
int10_test_BL34             0 0192 A   int10_test_vbe_05           0 01B9 A   
int10_test_vbe_06           0 01C2 A   int10_test_vbe_07           0 01CB A   
int10_test_vbe_08           0 01D4 A   int10_test_vbe_0A           0 01DD A   
lmulul                      0 9416 A   memcpyb_end                 0 7BA9 A   
memcpyw_end                 0 7BD9 A   memsetb_end                 0 7B56 A   
memsetw_end                 0 7B7B A   mode_ega_color              0 6BBF A   
msg_vbe_init                0 8F75 A   msg_vga_init                0 3578 A   
no_4bpp_1                   0 9C0F A   no_4bpp_2                   0 9C2C A   
no_actl_reg1                0 62F1 A   no_actl_reg2                0 6370 A   
no_vbe_flag                 0 940B A   no_vbe_interface            0 93EF A   
no_vbe_mode                 0 9902 A   pci_get_lfb_addr_3          0 7DC0 A   
pci_get_lfb_addr_4          0 7DD6 A   pci_get_lfb_addr_5          0 7DD2 A   
pci_get_lfb_addr_6          0 7DE6 A   pci_read_reg                0 7DEE A   
read_dac_loop               0 6470 A   set_actl_normal             0 643D A   
set_cga_palette_loop        0 59C4 A   set_dac_16_page             0 6437 A   
set_dac_loop                0 63EA A   set_dac_mode                0 9C87 A   
set_dac_page                0 6424 A   set_dac_palette_format      0 9C72 A   
set_display_start           0 9C49 A   set_display_window          0 9BCF A   
set_intensity_loop          0 5996 A   set_logical_scan_line_byte+ 0 9BFE A   
set_logical_scan_line_pixe+ 0 9C14 A   set_low_border              0 5990 A   
set_normal_dac              0 9C84 A   set_palette_loop            0 6309 A   
set_retcode                 0 6C0F A   set_vert_res                0 6C05 A   
set_width_svga              0 9242 A   set_xy_regs                 0 9075 A   
vbe_03_ok                   0 990B A   vbe_05_failed               0 9BE8 A   
vbe_08_ok                   0 9C96 A   vbe_08_unsupported          0 9C9A A   
vbe_biosfn_display_window_+ 0 9BBF A   vbe_biosfn_return_current_+ 0 98EB A   
vbe_biosfn_return_protecte+ 0 9C9F A   vbe_biosfn_set_get_dac_pal+ 0 9C67 A   
vbe_biosfn_set_get_display+ 0 9C39 A   vbe_biosfn_set_get_logical+ 0 9BEC A   
vbe_display_info            0 93F9 A   vbe_init                    0 93CB A   
vert_res_200                0 6BFB A   vert_res_350                0 6BF1 A   
vert_res_400                0 6BE5 A   vesa_pm_end                 0 90B7 A   
vesa_pm_io_ports_table      0 8FBE A   vesa_pm_set_display_start   0 9001 A   
vesa_pm_set_display_start1  0 9010 A   vesa_pm_set_display_window+ 0 8FD5 A   
vesa_pm_set_window          0 8FCA A   vesa_pm_start               0 8FB6 A   
vesa_pm_unimplemented       0 90B2 A   vga_compat_end              0 9355 A   
vga_set_virt_width          0 9234 A   vgabios_copyright           0 004B A   
vgabios_date                0 003D A   vgabios_end                 0 9CCA A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0102 A   
vgabios_int10_handler       0 012C A   vgabios_license             0 0077 A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00AC A   

00000 errors
00000 warnings
